
#Область ПрограммныйИнтерфейс

// Возвращает все реквизиты справочника виды упаковки в виде структуры
//
// Возвращаемое значение:
//   Структура - структура всех данных, которые хранятся в справочнике
//
Функция ШаблонСтруктурыВидаУпаковки() Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Код",                     "");
	РезультатФункции.Вставить("Наименование",            "");
	РезультатФункции.Вставить("Идентификатор",           "");
	РезультатФункции.Вставить("ТехническоеНаименование", "");
	РезультатФункции.Вставить("КлючСтроки",              0);
	РезультатФункции.Вставить("ВидУпаковки",             Неопределено);
	
	РезультатФункции.Вставить("Новый",                   Истина);
	
	Возврат РезультатФункции;
	
КонецФункции

// Находит или создает ссылку на справочник Saby_ВидыУпаковки и заполняет ее в структуру.
//
// Параметры:
//  СтруктураВидаУпаковки - Структура - см. ШаблонСтруктурыВидаУпаковки()
//
Процедура ЗаполнитьВидУпаковки(СтруктураВидаУпаковки) Экспорт
	
	Если ТипЗнч(ЗначениеМетаданных("Saby_ВидыУпаковки.ПустаяСсылка", "Справочник")) = Тип("Строка") Тогда
		СтруктураВидаУпаковки.ВидУпаковки = СтруктураВидаУпаковки.Код;
		Возврат;
	КонецЕсли;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Saby_ВидыУпаковки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Saby_ВидыУпаковки КАК Saby_ВидыУпаковки
	|ГДЕ
	|	Saby_ВидыУпаковки.Код = &Код
	|	И НЕ Saby_ВидыУпаковки.ПометкаУдаления";
	
	ЗапросДанных.УстановитьПараметр("Код", СтруктураВидаУпаковки.Код);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		СтруктураВидаУпаковки.ВидУпаковки = ВыборкаДанных.Ссылка;
		СтруктураВидаУпаковки.Новый       = Ложь;
		Возврат;
	КонецЕсли;
	
	ОбъектВидУпаковки = МодульКода("Справочники.Saby_ВидыУпаковки").СоздатьЭлемент();
	ОбъектВидУпаковки.Код          = СтруктураВидаУпаковки.Код;
	ОбъектВидУпаковки.Наименование = СтруктураВидаУпаковки.Код;
	ОбъектВидУпаковки.Записать();
	
	СтруктураВидаУпаковки.ВидУпаковки = ОбъектВидУпаковки.Ссылка;
	
КонецПроцедуры

// Дозаполняет реквизиты справочника после получения данных при чтении документа.
//
// Параметры:
//  НовыеВидыУпаковки - Массив - массив структур см. ШаблонСтруктурыВидаУпаковки()
//
Процедура ДозаполнитьНовыеВидыУпаковки(НовыеВидыУпаковки) Экспорт
	
	Если НовыеВидыУпаковки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьВидыУпаковкиСОнлайна(НовыеВидыУпаковки);
	
КонецПроцедуры

// Загружает с онлайна справочник видов упаковки.
//
// Параметры:
//  МассивСтруктурВидовУпаковки - Массив - массив структур видов упаковки для загрузки, если не передан, то грузятся все.
//  Результат - Структура - если передана, то в переменную возвращается результат загрузки.
//
Процедура ЗагрузитьВидыУпаковкиСОнлайна(МассивСтруктурВидовУпаковки = Неопределено, Результат = Неопределено) Экспорт
	
	Если МассивСтруктурВидовУпаковки = Неопределено Тогда
		МассивСтруктурВидовУпаковки = Новый Массив;
	КонецЕсли;
	
	ЗагрузитьДанныеВидовУпаковки(МассивСтруктурВидовУпаковки);
	
	ДанныеУпаковки = ДанныеУпаковки(МассивСтруктурВидовУпаковки);
	
	ДанныеУпаковкиДляЗагрузки = ДанныеУпаковкиДляЗагрузки(ДанныеУпаковки);
	
	Загружено = 0;
	ШаблонТекстаОшибки = "Не удалось загрузить ""%1""(%2) по причине: %3";
	МассивОшибок = Новый Массив;
	
	Для Каждого СтруктураДанных Из ДанныеУпаковкиДляЗагрузки Цикл
		
		Если ТипЗнч(СтруктураДанных.Ссылка) = Тип("Строка") Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Ссылка) Тогда
			ОбъектСправочника = СтруктураДанных.Ссылка.ПолучитьОбъект();
		Иначе
			ОбъектСправочника = МодульКода("Справочники.Saby_ВидыУпаковки").СоздатьЭлемент();
		КонецЕсли;
		
		ОбъектСправочника.Код                     = СтруктураДанных.Код;
		ОбъектСправочника.Наименование            = СтруктураДанных.Наименование;
		ОбъектСправочника.ТехническоеНаименование = СтруктураДанных.ТехническоеНаименование;
		ОбъектСправочника.Идентификатор           = СтруктураДанных.Идентификатор;
		
		Попытка
			ОбъектСправочника.Записать();
			Загружено = Загружено + 1;
		Исключение
			ТекстОшибки = СтрШаблон(
				ШаблонТекстаОшибки,
				СтруктураДанных.Наименование,
				СтруктураДанных.Идентификатор,
				ОписаниеОшибки());

			МассивОшибок.Добавить(ТекстОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ДанныеУпаковкиДляЗагрузки.Количество() > 0 Тогда
		ТекстРезультата = СтрШаблон(
			"Загружено данных %1 из %2",
			Формат(Загружено, "ЧДЦ=0; ЧГ="),
			Формат(ДанныеУпаковкиДляЗагрузки.Количество(), "ЧДЦ=0; ЧГ="));
	Иначе
		ТекстРезультата = "Данные справочника актуальны. Загрузка не требуется";
	КонецЕсли;
	ОписаниеОшибок = СтрСоединить(МассивОшибок, Символы.ПС);
	
	Если Результат = Неопределено Тогда
		Если Загружено <> ДанныеУпаковкиДляЗагрузки.Количество() Тогда
			МодульКода("Saby_ТНОбщегоНазначенияСервер").ЗаписатьОшибкуВЖурналРегистрации(
				ЗначениеМетаданных("Saby_ОпасныеГрузы.ПустаяСсылка", "Справочник"), ТекстРезультата, ОписаниеОшибок);
		КонецЕсли;
	Иначе
		Результат.Вставить("Текст",          ТекстРезультата);
		Результат.Вставить("ОписаниеОшибок", ОписаниеОшибок);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаСОнлайна

Функция ПреобразоватьНаименованиеВидаУпаковки(Наименование) Экспорт
	
	Возврат ВРег(СокрЛП(Наименование));
	
КонецФункции

Процедура ЗагрузитьДанныеВидовУпаковки(МассивСтруктурВидовУпаковки)
	
	ДанныеСправочника = МодульКода("Saby_ТНОбщегоНазначенияСервер").СправочникСОнлайна("Вид упаковки Меркурия");
	
	СоответствиеВидовУпаковки = Новый Соответствие;
	Для Каждого СтруктураВидаУпаковки Из МассивСтруктурВидовУпаковки Цикл
		Наименование = ПреобразоватьНаименованиеВидаУпаковки(СтруктураВидаУпаковки.Наименование);
		СоответствиеВидовУпаковки.Вставить(Наименование, СтруктураВидаУпаковки);
	КонецЦикла;
	
	Для Каждого МассивДанных Из ДанныеСправочника Цикл
		
		НаименованиеСОнлайна = ПреобразоватьНаименованиеВидаУпаковки(МассивДанных[2]);
		КодСОнлайна          = ПреобразоватьНаименованиеВидаУпаковки(МассивДанных[4]);
		
		СтруктураВидаУпаковки = СоответствиеВидовУпаковки[НаименованиеСОнлайна];
		Если СтруктураВидаУпаковки = Неопределено Тогда
			СтруктураВидаУпаковки = СоответствиеВидовУпаковки[КодСОнлайна];
		КонецЕсли;
		Если СтруктураВидаУпаковки = Неопределено И СоответствиеВидовУпаковки.Количество() = 0 Тогда
			СтруктураВидаУпаковки = ШаблонСтруктурыВидаУпаковки();
			МассивСтруктурВидовУпаковки.Добавить(СтруктураВидаУпаковки);
		КонецЕсли;
		
		Если СтруктураВидаУпаковки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураВидаУпаковки.Идентификатор           = МассивДанных[5];
		СтруктураВидаУпаковки.Наименование            = НаименованиеСОнлайна;
		СтруктураВидаУпаковки.ТехническоеНаименование = МассивДанных[3];
		СтруктураВидаУпаковки.Код                     = КодСОнлайна;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеУпаковки(МассивСтруктурВидовУпаковки = Неопределено)
	
	ТаблицаДанныхДляЗагрузки = ТаблицаДанныхДляЗагрузки();
	
	НомерСтроки = 1;
	
	Для Каждого СтруктураВидаУпаковки Из МассивСтруктурВидовУпаковки Цикл
		
		СтрокаДанных = ТаблицаДанныхДляЗагрузки.Добавить();
		СтрокаДанных.НомерСтроки = НомерСтроки;
		
		СтрокаДанных.Идентификатор           = СтруктураВидаУпаковки.Идентификатор;
		СтрокаДанных.Наименование            = СтруктураВидаУпаковки.Наименование;
		СтрокаДанных.ТехническоеНаименование = СтруктураВидаУпаковки.ТехническоеНаименование;
		СтрокаДанных.Код                     = СтруктураВидаУпаковки.Код;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаДанныхДляЗагрузки;
	
КонецФункции

Функция ТаблицаДанныхДляЗагрузки()
	
	РезультатФункции = Новый ТаблицаЗначений;
	
	КвалификаторЧисла5 = Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный);
	
	ОписаниеТипаНомераСтроки = Новый ОписаниеТипов("Число", КвалификаторЧисла5);
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	РезультатФункции.Колонки.Добавить("НомерСтроки",             ОписаниеТипаНомераСтроки);
	РезультатФункции.Колонки.Добавить("Идентификатор",           МодульТНОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(36));
	РезультатФункции.Колонки.Добавить("Наименование",            МодульТНОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(150));
	РезультатФункции.Колонки.Добавить("ТехническоеНаименование", МодульТНОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(255));
	РезультатФункции.Колонки.Добавить("Код",                     МодульТНОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(16));
	
	ДобавитьСсылочныеКолонкиТаблицыВидовУпаковки(РезультатФункции);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеУпаковкиДляЗагрузки(ДанныеУпаковки)
	
	РезультатФункции = Новый Массив;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПолучитьТаблицуСправочникВидыУпаковки(МенеджерВременныхТаблиц);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ДанныеУпаковки.НомерСтроки КАК НомерСтроки,
	|	ДанныеУпаковки.Идентификатор КАК Идентификатор,
	|	ДанныеУпаковки.Наименование КАК Наименование,
	|	ДанныеУпаковки.ТехническоеНаименование КАК ТехническоеНаименование,
	|	ДанныеУпаковки.Код КАК Код
	|ПОМЕСТИТЬ ТаблицаДанныхУпаковки
	|ИЗ
	|	&ДанныеУпаковки КАК ДанныеУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(ВложенныйЗапрос.СсылкаПоИдентификатору) КАК СсылкаПоИдентификатору,
	|	МАКСИМУМ(ВложенныйЗапрос.СсылкаПоКоду) КАК СсылкаПоКоду
	|ПОМЕСТИТЬ СуществующиеСправочники
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДанныхУпаковки.НомерСтроки КАК НомерСтроки,
	|		СправочникВидыУпаковки.Ссылка КАК СсылкаПоИдентификатору,
	|		&ВидУпаковкиПустаяСсылка КАК СсылкаПоКоду
	|	ИЗ
	|		ТаблицаДанныхУпаковки КАК ТаблицаДанныхУпаковки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СправочникВидыУпаковки КАК СправочникВидыУпаковки
	|			ПО ТаблицаДанныхУпаковки.Идентификатор = СправочникВидыУпаковки.Идентификатор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаДанныхУпаковки.НомерСтроки,
	|		&ВидУпаковкиПустаяСсылка,
	|		СправочникВидыУпаковки.Ссылка
	|	ИЗ
	|		ТаблицаДанныхУпаковки КАК ТаблицаДанныхУпаковки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СправочникВидыУпаковки КАК СправочникВидыУпаковки
	|			ПО ТаблицаДанныхУпаковки.Код = СправочникВидыУпаковки.Код) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныхУпаковки.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СуществующиеСправочники.СсылкаПоИдентификатору, &ВидУпаковкиПустаяСсылка) <> &ВидУпаковкиПустаяСсылка
	|			ТОГДА СуществующиеСправочники.СсылкаПоИдентификатору
	|		КОГДА ЕСТЬNULL(СуществующиеСправочники.СсылкаПоКоду, &ВидУпаковкиПустаяСсылка) <> &ВидУпаковкиПустаяСсылка
	|			ТОГДА СуществующиеСправочники.СсылкаПоКоду
	|		ИНАЧЕ &ВидУпаковкиПустаяСсылка
	|	КОНЕЦ КАК Ссылка
	|ИЗ
	|	ТаблицаДанныхУпаковки КАК ТаблицаДанныхУпаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СправочникВидыУпаковки КАК СправочникВидыУпаковки
	|		ПО ТаблицаДанныхУпаковки.Идентификатор = СправочникВидыУпаковки.Идентификатор
	|			И ТаблицаДанныхУпаковки.Наименование = СправочникВидыУпаковки.Наименование
	|			И ТаблицаДанныхУпаковки.ТехническоеНаименование = СправочникВидыУпаковки.ТехническоеНаименование
	|			И ТаблицаДанныхУпаковки.Код = СправочникВидыУпаковки.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуществующиеСправочники КАК СуществующиеСправочники
	|		ПО ТаблицаДанныхУпаковки.НомерСтроки = СуществующиеСправочники.НомерСтроки
	|ГДЕ
	|	СправочникВидыУпаковки.Ссылка ЕСТЬ NULL";
	
	ЗапросДанных.УстановитьПараметр("ДанныеУпаковки",          ДанныеУпаковки);
	ЗапросДанных.УстановитьПараметр("ВидУпаковкиПустаяСсылка", ЗначениеМетаданных("Saby_ВидыУпаковки.ПустаяСсылка", "Справочник"));
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		
		СтрокаДанныхУпаковки = ДанныеУпаковки[ВыборкаДанных.НомерСтроки - 1];
		СтрокаДанныхУпаковки.Ссылка = ВыборкаДанных.Ссылка;
		
		РезультатФункции.Добавить(СтрокаДанныхУпаковки);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ЗагрузкаСОнлайна

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область include_etrn_base_Catalog_ВидыУпаковки_СлужебныеПроцедурыИФункции
#КонецОбласти // include_etrn_base_Catalog_ВидыУпаковки_СлужебныеПроцедурыИФункции
