
#Область ПрограммныйИнтерфейс

// Возвращает все реквизиты справочника опасных грузов в виде структуры
//
// Возвращаемое значение:
//   Структура - структура всех данных, которые хранятся в справочнике
//
Функция ШаблонСтруктурыОпасногоГруза() Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Наименование",                   "");
	РезультатФункции.Вставить("ПолноеНаименование",             "");
	РезультатФункции.Вставить("ТехническоеНаименование",        "");
	РезультатФункции.Вставить("Класс",                          "");
	РезультатФункции.Вставить("ГруппаУпаковки",                 "");
	РезультатФункции.Вставить("КатегорияУпаковки",              "");
	РезультатФункции.Вставить("ГруппаУпаковкиЗначение",         "");
	РезультатФункции.Вставить("КонтрольнаяТемпература",         "");
	РезультатФункции.Вставить("АварийнаяТемпература",           "");
	РезультатФункции.Вставить("НазваниеРадионуклида",           "");
	РезультатФункции.Вставить("ПолнаяАктивность",               "");
	РезультатФункции.Вставить("МаксАктивность",                 "");
	РезультатФункции.Вставить("МассаНеттоВзрывчатый",           "");
	РезультатФункции.Вставить("МассаНеттоВзрывчатыйВсего",      "");
	РезультатФункции.Вставить("НомерООН",                       "");
	РезультатФункции.Вставить("ФизИХимФорма",                   "");
	РезультатФункции.Вставить("ТранспортныйИндекс",             "");
	РезультатФункции.Вставить("ЗнакОпасности",                  "");
	РезультатФункции.Вставить("ИндексБезопасности",             "");
	РезультатФункции.Вставить("ОпознавательныйЗнак",            "");
	РезультатФункции.Вставить("ПроцентСмеси",                   "");
	РезультатФункции.Вставить("Комментарий",                    "");
	РезультатФункции.Вставить("КлассификационныйКод",           "");
	РезультатФункции.Вставить("ОграничениеПроездаЧерезТуннели", "");
	РезультатФункции.Вставить("Идентификатор",                  "");
	РезультатФункции.Вставить("ДатаИстеченияУдержания",         Дата(1, 1, 1));
	РезультатФункции.Вставить("ОпасныйГруз",                    Неопределено);
	РезультатФункции.Вставить("КлючСтроки_Грузы",               0);
	
	РезультатФункции.Вставить("Новый",                          Истина);
	
	Возврат РезультатФункции;
	
КонецФункции

// Находит или создает ссылку на справочник Saby_ОпасныеГрузы и заполняет ее в структуру.
//
// Параметры:
//  СтруктураОпасногоГруза - Структура - см. ШаблонСтруктурыОпасногоГруза()
//
Процедура ЗаполнитьОпасныйГруз(СтруктураОпасногоГруза) Экспорт
	
	Если ТипЗнч(ЗначениеМетаданных("Saby_ОпасныеГрузы.ПустаяСсылка", "Справочник")) = Тип("Строка") Тогда
		СтруктураОпасногоГруза.ОпасныйГруз = СтруктураОпасногоГруза.Наименование;
		Возврат;
	КонецЕсли;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Saby_ОпасныеГрузы.Ссылка КАК Ссылка,
	|	Saby_ОпасныеГрузы.Наименование КАК Наименование,
	|	Saby_ОпасныеГрузы.ТехническоеНаименование КАК ТехническоеНаименование,
	|	Saby_ОпасныеГрузы.НомерООН КАК НомерООН
	|ИЗ
	|	Справочник.Saby_ОпасныеГрузы КАК Saby_ОпасныеГрузы
	|ГДЕ
	|	ИСТИНА В (Saby_ОпасныеГрузы.Наименование = &Наименование, Saby_ОпасныеГрузы.ТехническоеНаименование = &ТехническоеНаименование, Saby_ОпасныеГрузы.НомерООН = &НомерООН)
	|	И НЕ Saby_ОпасныеГрузы.ПометкаУдаления";
	
	ЗначенияПоиска = Новый Структура("Наименование,ТехническоеНаименование,НомерООН");
	
	Для Каждого КлючЗначение Из ЗначенияПоиска Цикл
		Если ЗначениеЗаполнено(СтруктураОпасногоГруза[КлючЗначение.Ключ]) Тогда
			ЗначенияПоиска[КлючЗначение.Ключ] = СтруктураОпасногоГруза[КлючЗначение.Ключ];
		Иначе
			ЗначенияПоиска[КлючЗначение.Ключ] = "Искать не нужно";
		КонецЕсли;
	КонецЦикла;
	
	ЗапросДанных.УстановитьПараметр("Наименование",            ЗначенияПоиска.Наименование);
	ЗапросДанных.УстановитьПараметр("ТехническоеНаименование", ЗначенияПоиска.ТехническоеНаименование);
	ЗапросДанных.УстановитьПараметр("НомерООН",                ЗначенияПоиска.НомерООН);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		СтруктураОпасногоГруза.ОпасныйГруз = ВыборкаДанных.Ссылка;
		СтруктураОпасногоГруза.Новый       = Ложь;
		Возврат;
	КонецЕсли;
	
	ОбъектОпасногоГрузка = МодульКода("Справочники.Saby_ОпасныеГрузы").СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ОбъектОпасногоГрузка, СтруктураОпасногоГруза);
	ОбъектОпасногоГрузка.УстановитьНовыйКод();
	ОбъектОпасногоГрузка.Записать();
	
	СтруктураОпасногоГруза.ОпасныйГруз = ОбъектОпасногоГрузка.Ссылка;
	
КонецПроцедуры

// Дозаполняет реквизиты справочника после получения данных при чтении документа.
//
// Параметры:
//  РезультатЗагрузки - Структура - результат загрузки см. Saby_ТНОбщегоНазначенияКлиентСервер.РезультатВзаимодействияСоСБИС
//  ОбщиеПараметрыЗагрузки - Структура - общие параметры загрузки
//
Процедура ДозаполнитьНовыеОпасныеГрузы(РезультатЗагрузки, ОбщиеПараметрыЗагрузки) Экспорт
	
	Если РезультатЗагрузки.НовыеОпасныеГрузы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьОпасныеГрузыСОнлайна(ОбщиеПараметрыЗагрузки, РезультатЗагрузки.НовыеОпасныеГрузы, РезультатЗагрузки);
	
КонецПроцедуры

// Обновляет неверно заполненные коды в справочнике, дополняя лидирующие нули.
//
Процедура ПерекодироватьСправочник() Экспорт
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Saby_ОпасныеГрузы.Ссылка КАК Ссылка,
	|	ДЛИНАСТРОКИ(Saby_ОпасныеГрузы.Код) КАК Длина,
	|	Saby_ОпасныеГрузы.Код КАК Код
	|ИЗ
	|	Справочник.Saby_ОпасныеГрузы КАК Saby_ОпасныеГрузы
	|ГДЕ
	|	(ДЛИНАСТРОКИ(Saby_ОпасныеГрузы.Код) <> 10
	|			ИЛИ Saby_ОпасныеГрузы.Код ПОДОБНО ""% %"")";
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		
		ОбъектСправочника = ВыборкаДанных.Ссылка.ПолучитьОбъект();
		НовыйКод = СокрЛП(ОбъектСправочника.Код);
		
		ДлинаКодаСправочника = 10;
		Пока СтрДлина(НовыйКод) <> ДлинаКодаСправочника Цикл
			НовыйКод = "0" + НовыйКод;
		КонецЦикла;
		
		ОбъектСправочника.Код = НовыйКод;
		ОбъектСправочника.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает с онлайна справочник опасных грузов.
//
// Параметры:
//  ОбщиеПараметрыЗагрузки - Структура - общие параметры загрузки
//  МассивСтруктурОпасныхГрузов - Массив - массив структур опасных грузов для загрузки, если не передан, то грузятся все.
//  РезультатЗагрузки - Структура - результат загрузки см. Saby_ТНОбщегоНазначенияКлиентСервер.РезультатВзаимодействияСоСБИС
//
// Возвращаемое значение:
//   Структура - результат загрузки
//
Функция ЗагрузитьОпасныеГрузыСОнлайна(ОбщиеПараметрыЗагрузки, МассивСтруктурОпасныхГрузов = Неопределено,
		РезультатЗагрузки = Неопределено) Экспорт
	
	Если МассивСтруктурОпасныхГрузов = Неопределено Тогда
		МассивСтруктурОпасныхГрузов = Новый Массив;
	КонецЕсли;
	
	ЗагрузитьДанныеОпасныхГрузов(МассивСтруктурОпасныхГрузов, ОбщиеПараметрыЗагрузки, РезультатЗагрузки);
	
	ДанныеОпасныхГрузов = ДанныеОпасныхГрузов(МассивСтруктурОпасныхГрузов);
	
	ДанныеОпасныхГрузовДляЗагрузки = ДанныеОпасныхГрузовДляЗагрузки(ДанныеОпасныхГрузов);
	
	Загружено = 0;
	ШаблонТекстаОшибки = "Не удалось загрузить ""%1""(%2) по причине: %3";
	МассивОшибок = Новый Массив;
	
	Для Каждого СтруктураДанных Из ДанныеОпасныхГрузовДляЗагрузки Цикл
		
		Если ТипЗнч(СтруктураДанных.Ссылка) = Тип("Строка") Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Ссылка) Тогда
			ОбъектСправочника = СтруктураДанных.Ссылка.ПолучитьОбъект();
		Иначе
			ОбъектСправочника = МодульКода("Справочники.Saby_ОпасныеГрузы").СоздатьЭлемент();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбъектСправочника, СтруктураДанных);
		
		Попытка
			ОбъектСправочника.Записать();
			Загружено = Загружено + 1;
		Исключение
			ТекстОшибки = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").СтрШаблонЭПД(
				ШаблонТекстаОшибки,
				СтруктураДанных.Наименование,
				СтруктураДанных.Идентификатор,
				ОписаниеОшибки());

			МассивОшибок.Добавить(ТекстОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат СформироватьРезультатЗагрузкиОпасныхГрузов(ДанныеОпасныхГрузовДляЗагрузки, Загружено, МассивОшибок);
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаСОнлайна

Функция ПреобразоватьНаименованиеОпасногоГруза(Наименование)
	
	Возврат ВРег(СокрЛП(Наименование));
	
КонецФункции

Процедура ЗагрузитьДанныеОпасныхГрузов(МассивСтруктурОпасныхГрузов, ОбщиеПараметрыЗагрузки, РезультатЗагрузки)
	
	Если РезультатЗагрузки <> Неопределено И РезультатЗагрузки.ОпасныеГрузыСОнлайна <> Неопределено Тогда
		ДанныеСправочника = РезультатЗагрузки.ОпасныеГрузыСОнлайна;
	Иначе
		ДанныеСправочника = МодульКода("Saby_ТНЗагрузкаСервер").СправочникСОнлайна(
			"Справочник опасных грузов", ОбщиеПараметрыЗагрузки);
	КонецЕсли;
	
	СоответствиеОпасныхГрузов = Новый Соответствие;
	Для Каждого СтруктураОпасногоГруза Из МассивСтруктурОпасныхГрузов Цикл
		Наименование = ПреобразоватьНаименованиеОпасногоГруза(СтруктураОпасногоГруза.Наименование);
		СоответствиеОпасныхГрузов.Вставить(Наименование, СтруктураОпасногоГруза);
	КонецЦикла;
	
	Для Каждого МассивДанных Из ДанныеСправочника Цикл
		
		НаименованиеСОнлайна = ПреобразоватьНаименованиеОпасногоГруза(МассивДанных[2]);
		
		СтруктураОпасногоГруза = СоответствиеОпасныхГрузов[НаименованиеСОнлайна];
		Если СтруктураОпасногоГруза = Неопределено И СоответствиеОпасныхГрузов.Количество() = 0 Тогда
			СтруктураОпасногоГруза = ШаблонСтруктурыОпасногоГруза();
			МассивСтруктурОпасныхГрузов.Добавить(СтруктураОпасногоГруза);
		КонецЕсли;
		
		Если СтруктураОпасногоГруза = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДопДанные = ДополнительныеДанныеОпасногоГрузаСОнлайна(МассивДанных[4]);
		
		ГруппаУпаковкиСсылка = МодульКода("Перечисления.Saby_ГруппыУпаковки").ГруппаУпаковкиПоКоду(
			СокрЛП(ДопДанные.ГруппаУпаковки));
		КлассСсылка = МодульКода("Перечисления.Saby_КлассыОпасностиГрузов").КлассОпасностиГрузаПоКоду(
			СокрЛП(МассивДанных[5]));
		
		ПрисвоитьЕслиНеПусто(СтруктураОпасногоГруза, "Наименование",            НаименованиеСОнлайна);
		ПрисвоитьЕслиНеПусто(СтруктураОпасногоГруза, "ПолноеНаименование",      НаименованиеСОнлайна);
		ПрисвоитьЕслиНеПусто(СтруктураОпасногоГруза, "ТехническоеНаименование", МассивДанных[3]);
		ПрисвоитьЕслиНеПусто(СтруктураОпасногоГруза, "Идентификатор",           МассивДанных[1]);
		ПрисвоитьЕслиНеПусто(СтруктураОпасногоГруза, "НомерООН",                МассивДанных[6]);
		ПрисвоитьЕслиНеПусто(СтруктураОпасногоГруза, "Класс",                   КлассСсылка);
		ПрисвоитьЕслиНеПусто(СтруктураОпасногоГруза, "КлассификационныйКод",    ДопДанные.КодОпасногоГруза);
		ПрисвоитьЕслиНеПусто(СтруктураОпасногоГруза, "ЗнакОпасности",           ДопДанные.НомерОпасности);
		ПрисвоитьЕслиНеПусто(СтруктураОпасногоГруза, "ГруппаУпаковки",          ДопДанные.ГруппаУпаковки);
		ПрисвоитьЕслиНеПусто(СтруктураОпасногоГруза, "ГруппаУпаковкиЗначение",  ГруппаУпаковкиСсылка);
		ПрисвоитьЕслиНеПусто(СтруктураОпасногоГруза, "ТранспортныйИндекс",      ДопДанные.ТранспКатегория);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеОпасныхГрузов(МассивСтруктурОпасныхГрузов = Неопределено)
	
	ТаблицаОпасныхГрузовДляЗагрузки = ТаблицаОпасныхГрузовДляЗагрузки();
	
	НомерСтроки = 1;
	
	Для Каждого СтруктураОпасногоГруза Из МассивСтруктурОпасныхГрузов Цикл
		
		СтрокаДанных = ТаблицаОпасныхГрузовДляЗагрузки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, СтруктураОпасногоГруза);
		СтрокаДанных.НомерСтроки = НомерСтроки;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаОпасныхГрузовДляЗагрузки;
	
КонецФункции

Функция ТаблицаОпасныхГрузовДляЗагрузки()
	
	РезультатФункции = Новый ТаблицаЗначений;
	
	КвалификаторЧисла5 = Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный);
	
	ОписаниеТипаНомераСтроки = Новый ОписаниеТипов("Число", КвалификаторЧисла5);
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	РезультатФункции.Колонки.Добавить("НомерСтроки",             ОписаниеТипаНомераСтроки);
	РезультатФункции.Колонки.Добавить("Идентификатор",           МодульТНОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(36));
	РезультатФункции.Колонки.Добавить("Наименование",            МодульТНОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(256));
	РезультатФункции.Колонки.Добавить("ТехническоеНаименование", МодульТНОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(255));
	РезультатФункции.Колонки.Добавить("НомерООН",                МодульТНОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(50));
	РезультатФункции.Колонки.Добавить("Класс",                   МодульТНОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(16));
	РезультатФункции.Колонки.Добавить("КлассификационныйКод",    МодульТНОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(50));
	РезультатФункции.Колонки.Добавить("ЗнакОпасности",           МодульТНОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(50));
	РезультатФункции.Колонки.Добавить("ГруппаУпаковки",          МодульТНОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(100));
	РезультатФункции.Колонки.Добавить("ТранспортныйИндекс",      МодульТНОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(50));
	
	ДобавитьСсылочныеКолонкиТаблицыОпасныхГрузов(РезультатФункции);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДополнительныеДанныеОпасногоГрузаСОнлайна(СтрокаJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	Возврат ПрочитатьJSON(ЧтениеJSON);
	
КонецФункции

Функция ДанныеОпасныхГрузовДляЗагрузки(ДанныеОпасныхГрузов)
	
	РезультатФункции = Новый Массив;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПолучитьТаблицуСправочникОпасныхГрузов(МенеджерВременныхТаблиц);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ДанныеОпасныхГрузов.НомерСтроки КАК НомерСтроки,
	|	ДанныеОпасныхГрузов.Идентификатор КАК Идентификатор,
	|	ДанныеОпасныхГрузов.Наименование КАК Наименование,
	|	ДанныеОпасныхГрузов.ТехническоеНаименование КАК ТехническоеНаименование,
	|	ДанныеОпасныхГрузов.НомерООН КАК НомерООН,
	|	ДанныеОпасныхГрузов.Класс КАК Класс,
	|	ДанныеОпасныхГрузов.КлассификационныйКод КАК КлассификационныйКод,
	|	ДанныеОпасныхГрузов.ЗнакОпасности КАК ЗнакОпасности,
	|	ДанныеОпасныхГрузов.ГруппаУпаковки КАК ГруппаУпаковки,
	|	ДанныеОпасныхГрузов.ТранспортныйИндекс КАК ТранспортныйИндекс,
	|	ДанныеОпасныхГрузов.ГруппаУпаковкиЗначение КАК ГруппаУпаковкиЗначение
	|ПОМЕСТИТЬ ТаблицаОпасныхГрузов
	|ИЗ
	|	&ДанныеОпасныхГрузов КАК ДанныеОпасныхГрузов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(ВложенныйЗапрос.СсылкаПоИдентификатору) КАК СсылкаПоИдентификатору,
	|	МАКСИМУМ(ВложенныйЗапрос.СсылкаПоПолномуНаименованию) КАК СсылкаПоПолномуНаименованию,
	|	МАКСИМУМ(ВложенныйЗапрос.СсылкаПоНаименованию) КАК СсылкаПоНаименованию
	|ПОМЕСТИТЬ СуществующиеСправочники
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаОпасныхГрузов.НомерСтроки КАК НомерСтроки,
	|		СправочникОпасныхГрузов.Ссылка КАК СсылкаПоИдентификатору,
	|		&ОпасныйГрузПустаяСсылка КАК СсылкаПоПолномуНаименованию,
	|		&ОпасныйГрузПустаяСсылка КАК СсылкаПоНаименованию
	|	ИЗ
	|		ТаблицаОпасныхГрузов КАК ТаблицаОпасныхГрузов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СправочникОпасныхГрузов КАК СправочникОпасныхГрузов
	|			ПО ТаблицаОпасныхГрузов.Идентификатор = СправочникОпасныхГрузов.Идентификатор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаОпасныхГрузов.НомерСтроки,
	|		&ОпасныйГрузПустаяСсылка,
	|		СправочникОпасныхГрузов.Ссылка,
	|		&ОпасныйГрузПустаяСсылка
	|	ИЗ
	|		ТаблицаОпасныхГрузов КАК ТаблицаОпасныхГрузов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СправочникОпасныхГрузов КАК СправочникОпасныхГрузов
	|			ПО ТаблицаОпасныхГрузов.Наименование = СправочникОпасныхГрузов.ПолноеНаименование
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаОпасныхГрузов.НомерСтроки,
	|		&ОпасныйГрузПустаяСсылка,
	|		&ОпасныйГрузПустаяСсылка,
	|		СправочникОпасныхГрузов.Ссылка
	|	ИЗ
	|		ТаблицаОпасныхГрузов КАК ТаблицаОпасныхГрузов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СправочникОпасныхГрузов КАК СправочникОпасныхГрузов
	|			ПО ТаблицаОпасныхГрузов.Наименование = СправочникОпасныхГрузов.Наименование) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОпасныхГрузов.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СуществующиеСправочники.СсылкаПоИдентификатору, &ОпасныйГрузПустаяСсылка) <> &ОпасныйГрузПустаяСсылка
	|			ТОГДА СуществующиеСправочники.СсылкаПоИдентификатору
	|		КОГДА ЕСТЬNULL(СуществующиеСправочники.СсылкаПоПолномуНаименованию, &ОпасныйГрузПустаяСсылка) <> &ОпасныйГрузПустаяСсылка
	|			ТОГДА СуществующиеСправочники.СсылкаПоПолномуНаименованию
	|		КОГДА ЕСТЬNULL(СуществующиеСправочники.СсылкаПоНаименованию, &ОпасныйГрузПустаяСсылка) <> &ОпасныйГрузПустаяСсылка
	|			ТОГДА СуществующиеСправочники.СсылкаПоНаименованию
	|		ИНАЧЕ &ОпасныйГрузПустаяСсылка
	|	КОНЕЦ КАК Ссылка
	|ИЗ
	|	ТаблицаОпасныхГрузов КАК ТаблицаОпасныхГрузов
	|		ЛЕВОЕ СОЕДИНЕНИЕ СправочникОпасныхГрузов КАК СправочникОпасныхГрузов
	|		ПО ТаблицаОпасныхГрузов.Идентификатор = СправочникОпасныхГрузов.Идентификатор
	|			И ТаблицаОпасныхГрузов.Наименование = СправочникОпасныхГрузов.ПолноеНаименование
	|			И ТаблицаОпасныхГрузов.ТехническоеНаименование = СправочникОпасныхГрузов.ТехническоеНаименование
	|			И ТаблицаОпасныхГрузов.НомерООН = СправочникОпасныхГрузов.НомерООН
	|			И ТаблицаОпасныхГрузов.Класс = СправочникОпасныхГрузов.Класс
	|			И ТаблицаОпасныхГрузов.КлассификационныйКод = СправочникОпасныхГрузов.КлассификационныйКод
	|			И ТаблицаОпасныхГрузов.ЗнакОпасности = СправочникОпасныхГрузов.ЗнакОпасности
	|			И ТаблицаОпасныхГрузов.ГруппаУпаковки = СправочникОпасныхГрузов.ГруппаУпаковки
	|			И ТаблицаОпасныхГрузов.ГруппаУпаковкиЗначение = СправочникОпасныхГрузов.ГруппаУпаковкиЗначение
	|			И ТаблицаОпасныхГрузов.ТранспортныйИндекс = СправочникОпасныхГрузов.ТранспортныйИндекс
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуществующиеСправочники КАК СуществующиеСправочники
	|		ПО ТаблицаОпасныхГрузов.НомерСтроки = СуществующиеСправочники.НомерСтроки
	|ГДЕ
	|	СправочникОпасныхГрузов.Ссылка ЕСТЬ NULL";
	
	ЗапросДанных.УстановитьПараметр("ДанныеОпасныхГрузов",     ДанныеОпасныхГрузов);
	ЗапросДанных.УстановитьПараметр("ОпасныйГрузПустаяСсылка", ЗначениеМетаданных("Saby_ОпасныеГрузы.ПустаяСсылка", "Справочник"));
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		
		СтрокаДанныхОпасныхГрузов = ДанныеОпасныхГрузов[ВыборкаДанных.НомерСтроки - 1];
		СтрокаДанныхОпасныхГрузов.Ссылка = ВыборкаДанных.Ссылка;
		
		РезультатФункции.Добавить(СтрокаДанныхОпасныхГрузов);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ПрисвоитьЕслиНеПусто(ОбъектСправочника, ИмяРеквизита, Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСправочника[ИмяРеквизита] = Значение;
	
КонецПроцедуры

Функция СформироватьРезультатЗагрузкиОпасныхГрузов(ДанныеОпасныхГрузовДляЗагрузки, Загружено, МассивОшибок)
	
	Если ДанныеОпасныхГрузовДляЗагрузки.Количество() > 0 Тогда
		ТекстРезультата = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").СтрШаблонЭПД(
			"Загружено данных %1 из %2",
			Формат(Загружено, "ЧДЦ=0; ЧГ="),
			Формат(ДанныеОпасныхГрузовДляЗагрузки.Количество(), "ЧДЦ=0; ЧГ="));
	Иначе
		ТекстРезультата = "Данные справочника актуальны. Загрузка не требуется";
	КонецЕсли;
	
	ОписаниеОшибок = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").СтрСоединитьЭПД(МассивОшибок, Символы.ПС);
	
	Если Загружено <> ДанныеОпасныхГрузовДляЗагрузки.Количество() Тогда
		МодульКода("Saby_ТНОбщегоНазначенияСервер").ЗаписатьОшибкуВЖурналРегистрации(
			ЗначениеМетаданных("Saby_ОпасныеГрузы.ПустаяСсылка", "Справочник"), ТекстРезультата, ОписаниеОшибок);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Текст",          ТекстРезультата);
	Результат.Вставить("ОписаниеОшибок", ОписаниеОшибок);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // ЗагрузкаСОнлайна

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область include_etrn_base_Catalog_ОпасныеГрузы_СлужебныеПроцедурыИФункции
#КонецОбласти // include_etrn_base_Catalog_ОпасныеГрузы_СлужебныеПроцедурыИФункции
