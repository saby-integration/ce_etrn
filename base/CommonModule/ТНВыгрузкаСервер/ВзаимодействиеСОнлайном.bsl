
//DynamicDirective

Процедура ВыполнитьВыгрузку(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат) Экспорт
	
	Если Не ПараметрыВыгрузки.ОтрицательныйПереход Тогда
		Если Не ЗаписаныСотрудники(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат) Тогда
			Возврат;
		КонецЕсли;
		Если Не ВложениеВыгружено(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ОтрицательныйПереход Или ПараметрыВыгрузки.ДинамическийТитул Тогда
		Если Не ПереходВыполнен(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат) Тогда
			Возврат;
		Иначе
			
			ЗаписатьСтатистику(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки);
				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//DynamicDirective

Функция ЗаписаныСотрудники(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат)
	
	Если Не ПараметрыВыгрузки.СтруктураДокумента.Свойство("ДанныеСотрудников") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Ошибки = Неопределено;
	
	Для Каждого Сотрудник Из ПараметрыВыгрузки.СтруктураДокумента.ДанныеСотрудников Цикл
		
		Параметр = Новый Структура;
		Параметр.Вставить("Сотрудник", Сотрудник);
		
		ПараметрыМетода  = Новый Структура;
		ПараметрыМетода.Вставить("Параметр", Параметр);
		
		Попытка
			
			ВыполнитьМетод(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, "СБИС.ЗаписатьСотрудника", ПараметрыМетода);
			
		Исключение
			
			ИнфоОшибки = ИнформацияОбОшибке();
			ТекстОшибки = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ПричинаОшибкиИзЯдра", ИнфоОшибки.Описание);
			Ошибки = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю", Ошибки, Неопределено, ТекстОшибки);
			Ошибки.Вставить("ИмяМетаданных", ПараметрыВыгрузки.ИмяМетаданных);
			КлючСоответствия = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").КлючСсылка(ПараметрыВыгрузки.Ссылка);
			Результат.Ошибки.Вставить(КлючСоответствия, Ошибки);
			Продолжить;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Ошибки = Неопределено;
	
КонецФункции

//DynamicDirective

Функция ВложениеВыгружено(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат)
	
	Если ПараметрыВыгрузки.ИмяМетаданных <> "Saby_ТранспортнаяНакладная" Тогда
		Возврат ВложениеВыгруженоПоНовому(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат);
	КонецЕсли;
	
	Ошибки = Неопределено;
	
	РезультатФункции = Истина;
	
	Попытка
		
		// 1. Выгрузим наш документ в сбис формата json и получим xml вложения
		//    в результате получим данные для создания документа в сбис
		ОтветВложение = РезультатПолученияВложенияПоПодстановкам(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки);
		Если Не ЗначениеЗаполнено(ОтветВложение) Тогда  
			
			ТекстОшибки = "Не сформирован файл json для генерации вложения!";
			Ошибки = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю", Ошибки, Неопределено, ТекстОшибки);
			Ошибки.Вставить("ИмяМетаданных", ПараметрыВыгрузки.ИмяМетаданных);
			КлючСоответствия = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").КлючСсылка(ПараметрыВыгрузки.Ссылка);
			Результат.Ошибки.Вставить(КлючСоответствия, Ошибки);
			РезультатФункции = Ложь;
		Иначе
			
			// 2. Отправим в сбис полученное вложение документа
			//    передадим полученный ранее xml в формате двоичных данных		       
			
			// на 1 этапе записываем документ, далее прикрепляем вложения
			ЭтоПервыйТитул = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов",
				ПараметрыВыгрузки.ИмяМетаданных, "ЭтоПервыйТитул", ПараметрыВыгрузки.ТипТитула);
				
			Если ЭтоПервыйТитул Тогда
				
				РезультатЗаписиСБИС = ЗаписатьНовыйДокументВСбис(ОтветВложение, ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки);
				
				ПараметрыВыгрузки.ИдентификаторСБИС = РезультатЗаписиСБИС["Идентификатор"];
				
			Иначе 	
				// для существующего документа пишем только вложение
				РезультатЗаписиСБИС = ЗаписатьВложениеДляДокументаСбис(
					ОтветВложение.Файл, ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки);
				
			КонецЕсли;
			
			Если Не ПараметрыВыгрузки.ДинамическийТитул Тогда					
				
				УдалитьЛишниеДействия(РезультатЗаписиСБИС);
				
				СтруктураОтвет = ДанныеУспешнойЗагрузкиДокумента(
					ПараметрыВыгрузки, Ложь, Результат, РезультатЗаписиСБИС["Этап"]);
				Результат.Успешные.Добавить(СтруктураОтвет);				
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		ТекстОшибки = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ПричинаОшибкиИзЯдра", ИнфоОшибки.Описание);
		Ошибки = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю", Ошибки, Неопределено, ТекстОшибки);
		Ошибки.Вставить("ИмяМетаданных", ПараметрыВыгрузки.ИмяМетаданных);
		КлючСоответствия = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").КлючСсылка(ПараметрыВыгрузки.Ссылка);
		Результат.Ошибки.Вставить(КлючСоответствия, Ошибки);
		РезультатФункции = Ложь;
		
	КонецПопытки;
	
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective

Функция ВложениеВыгруженоПоНовому(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат)
	
	Ошибки = Неопределено;
	
	Попытка
		
		ДанныеДокумента = ПараметрыВыгрузки.СтруктураДокумента;
		Если Не ЗначениеЗаполнено(ДанныеДокумента) Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		РезультатЗаписиСБИС = ЗаписатьНовыйДокументВСбис(ДанныеДокумента, ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки);
		
		ПараметрыВыгрузки.ИдентификаторСБИС = РезультатЗаписиСБИС["Идентификатор"];
		
		Если Не ПараметрыВыгрузки.ДинамическийТитул Тогда					
			
			УдалитьЛишниеДействия(РезультатЗаписиСБИС);
			
			СтруктураОтвет = ДанныеУспешнойЗагрузкиДокумента(
				ПараметрыВыгрузки, Ложь, Результат, РезультатЗаписиСБИС["Этап"]);
			Результат.Успешные.Добавить(СтруктураОтвет);				
			
		КонецЕсли;
		
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		ТекстОшибки = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ПричинаОшибкиИзЯдра", ИнфоОшибки.Описание);
		Ошибки = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю", Ошибки, Неопределено, ТекстОшибки);
		Ошибки.Вставить("ИмяМетаданных", ПараметрыВыгрузки.ИмяМетаданных);
		КлючСоответствия = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").КлючСсылка(ПараметрыВыгрузки.Ссылка);
		Результат.Ошибки.Вставить(КлючСоответствия, Ошибки);
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

//DynamicDirective

Функция РезультатПолученияВложенияПоПодстановкам(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки)
	
	ДанныеДокумента = ПараметрыВыгрузки.СтруктураДокумента;
	Если Не ЗначениеЗаполнено(ДанныеДокумента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяКлючаНашаОрганизация = "НашаОрганизация";
	ИмяКлючаФайл            = "Файл";
	
	ЭтоПервыйТитул = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов",
		ПараметрыВыгрузки.ИмяМетаданных, "ЭтоПервыйТитул", ПараметрыВыгрузки.ТипТитула);
	
	НашаОрганизация  = Неопределено;
	Грузоотправитель = Неопределено;
	Если ЭтоПервыйТитул Тогда
		
		// данные грузоотправителя для ПФ. иначе без подписания реквизиты ГО будут пустые
		ГОПодстановки    = ДанныеДокумента.Вложение[0].Подстановка.Грузоотправитель;		
    	Грузоотправитель = РеквизитыНашейОрганизации(ГОПодстановки);
		
		НашаОрганизация = ДанныеДокумента.Вложение[0].НашаОрганизация;
		ДанныеДокумента.Вложение[0].Удалить(ИмяКлючаНашаОрганизация);
		
		ИныеПолучатели = ДанныеДокумента.Вложение[0].ИныеПолучатели;
		ДанныеДокумента.Вложение[0].Удалить("ИныеПолучатели");
		
	КонецЕсли;
	
	ПараметрыМетода  = Новый Структура;
	ПараметрыМетода.Вставить("Документ", ДанныеДокумента);
	
	Ответ = ВыполнитьМетод(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, "СБИС.СгенерироватьВложение", ПараметрыМетода);
	ДанныеОтвета = Ответ["result"];
	
	Вложение = ДанныеОтвета["Вложение"][0];
	Файл     = Вложение[ИмяКлючаФайл];
	
	Если ДанныеДокумента.Свойство("Идентификатор") Тогда
		ИдСбис = ДанныеДокумента.Идентификатор;
	Иначе
		ИдСбис = "";
	КонецЕсли;
	
	Регламент = Новый Структура;
	Регламент.Вставить("Название", "Транспортная накладная");
	
	ОтветСтруктура = Новый Структура;
	ОтветСтруктура.Вставить(ИмяКлючаФайл, Файл);
	ОтветСтруктура.Вставить("ИДСбис",     ИдСбис);
	ОтветСтруктура.Вставить("Регламент",  Регламент);
	ОтветСтруктура.Вставить("Этап",       ДанныеДокумента.Вложение[0].Подтип);
	
	ОтветСтруктура.Вставить(ИмяКлючаНашаОрганизация, НашаОрганизация);
	ОтветСтруктура.Вставить("Грузоотправитель",      Грузоотправитель);
	ОтветСтруктура.Вставить("ИныеПолучатели",        ИныеПолучатели);
	
	Возврат ОтветСтруктура;
	
КонецФункции

//DynamicDirective

Функция ЗаписатьНовыйДокументВСбис(ДанныеXML, ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки)
	
	Если Не ДанныеXML.Свойство("Файл") Или Тип(ДанныеXML.Файл) = Тип("Структура") Тогда
		Возврат РезультатЗаписиНовогоДокументаВСБИС(ДанныеXML, ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки);
	КонецЕсли;
	
	Файл = ДанныеXML.Файл;
	
	ФайлСтруктура = Новый Структура;
	ФайлСтруктура.Вставить("Имя",            Файл["Имя"]);
	ФайлСтруктура.Вставить("ДвоичныеДанные", Файл["ДвоичныеДанные"]);
	
	СтруктураВложения = Новый Структура;
	СтруктураВложения.Вставить("Файл", ФайлСтруктура);
	
	МассивВложений = Новый Массив;
	МассивВложений.Добавить(СтруктураВложения);
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Тип",      ПараметрыВыгрузки.ПараметрыДляАПИ.Тип);
	ПараметрыМетода.Вставить("Вложение", МассивВложений);
	
	Если ЗначениеЗаполнено(ДанныеXML.ИдСбис) Тогда
		ПараметрыМетода.Вставить("Идентификатор", ДанныеXML.ИдСбис);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеXML.НашаОрганизация) Тогда
		ПараметрыМетода.Вставить("НашаОрганизация", ДанныеXML.НашаОрганизация);
	КонецЕсли;
	
	// доработка для пф черновиков
	Если ЗначениеЗаполнено(ДанныеXML.Грузоотправитель) Тогда
		ПараметрыМетода.Вставить("Грузоотправитель", ДанныеXML.Грузоотправитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеXML.ИныеПолучатели) Тогда
		ПараметрыМетода.Вставить("ИныеПолучатели", ДанныеXML.ИныеПолучатели);
	КонецЕсли;
	
    ПараметрыМетода.Вставить("Регламент", ДанныеXML.Регламент);
	
	ДокСбис = ВыполнитьМетодЗаписатьДокумент(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ПараметрыМетода);
	
	Возврат ДокСбис;
	
КонецФункции

//DynamicDirective

Функция РезультатЗаписиНовогоДокументаВСБИС(ДанныеДокумента, ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки)
	
	ПараметрыМетода = Новый Структура();
	ПараметрыМетода.Вставить("Документ", ДанныеДокумента);
	
	ИмяУзлаАдресация = "Адресация";
	Если ДанныеДокумента.Свойство(ИмяУзлаАдресация) Тогда
		ПараметрыМетода.Вставить(ИмяУзлаАдресация, ДанныеДокумента.Адресация);
		ДанныеДокумента.Удалить(ИмяУзлаАдресация);
	КонецЕсли;
	
	ОтветОнлайна = ВыполнитьМетод(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, "СБИС.ЗаписатьДокумент", ПараметрыМетода);
		
	РезультатЗапроса = ОтветОнлайна["result"];
	Если ЗначениеЗаполнено(РезультатЗапроса) Тогда
		ОтветОнлайна = РезультатЗапроса;
	КонецЕсли;
	
	Возврат ОтветОнлайна;
	
КонецФункции

//DynamicDirective

Функция ЗаписатьВложениеДляДокументаСбис(Файл, ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки)
	
	ФайлСтруктура = Новый Структура;
	ФайлСтруктура.Вставить("Имя",            Файл["Имя"]);
	ФайлСтруктура.Вставить("ДвоичныеДанные", Файл["ДвоичныеДанные"]);
	
	СтруктураВложения = Новый Структура; 
	СтруктураВложения.Вставить("Файл", ФайлСтруктура);
	
	МассивВложений = Новый Массив;
	МассивВложений.Добавить(СтруктураВложения);
			
	ПараметрыМетода = Новый Структура;		
	ПараметрыМетода.Вставить("Идентификатор", ПараметрыВыгрузки.ИдентификаторСБИС);
	ПараметрыМетода.Вставить("Вложение",      МассивВложений);
	
	Если ПараметрыВыгрузки.ДинамическийТитул Тогда
		СтруктураЭтапа = ЗначениеСледующегоЭтапа(
			ПараметрыВыгрузки.КодТитула,
			ПараметрыВыгрузки.ОтрицательныйПереход,
			ПараметрыВыгрузки.ПричинаОтрицательногоПерехода);
			
		ПараметрыМетода.Вставить("Этап", СтруктураЭтапа);
		ПараметрыМетода.Вставить("Тип",  ПараметрыВыгрузки.ПараметрыДляАПИ.Тип);
	КонецЕсли;
	
	Результат = ВыполнитьМетодЗаписатьВложение(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ПараметрыМетода);
	
	Возврат Результат;
	
КонецФункции

//DynamicDirective

Функция ПодготовитьДействиеКПереходуСбис(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки)
	
	ТекущиеДанныеСертификата = Неопределено;
	
	ДанныеДляПодписания = ДанныеДляПодписанияНовые(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки);
	Если ЗначениеЗаполнено(ДанныеДляПодписания.ТекущиеДанныеСертификата) Тогда
		ТекущиеДанныеСертификата = ДанныеДляПодписания.ТекущиеДанныеСертификата;
	КонецЕсли;
	
	СтруктураЭтапа = ЗначениеСледующегоЭтапа(
		ПараметрыВыгрузки.КодТитула,
		ПараметрыВыгрузки.ОтрицательныйПереход,
		ПараметрыВыгрузки.ПричинаОтрицательногоПерехода,
		ТекущиеДанныеСертификата);
		
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("Идентификатор", ПараметрыВыгрузки.ИдентификаторСБИС); 
	ПараметрыДействия.Вставить("Этап",          СтруктураЭтапа);
	
	Результат = ВыполнитьМетодПодготовитьДействие(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ПараметрыДействия);
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Результат",         Результат);
	РезультатФункции.Вставить("ПараметрыДействия", ПараметрыДействия);
		
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective

Процедура ВыполнитьДействиеВСбис(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ПараметрыДействия)
	
	ВыполнитьМетодВыполнитьДействие(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ПараметрыДействия);
	
	Если ПараметрыВыгрузки.ВыгрузкаНаКлиенте Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляЗагрузки = Новый Массив;
	ПараметрыЗагрузки = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ПараметрыЗагрузки(ПараметрыВыгрузки.Ссылка);
	ПараметрыЗагрузки.ИзДокумента        = Истина;
	ПараметрыЗагрузки.ТекущийТитул       = ПараметрыВыгрузки.ТипТитула;
	ПараметрыЗагрузки.ТолькоАктивныйЭтап = Истина;
	ПараметрыЗагрузки.ИмяМетаданных      = ПараметрыВыгрузки.ИмяМетаданных;
	ДанныеДляЗагрузки.Добавить(ПараметрыЗагрузки);
	
	ДополнительныеПараметры = Новый Структура;
	
	ВыполнитьНаСервере("Saby_ТНЗагрузкаСервер.РезультатЗагрузкиДокументов",
		ДанныеДляЗагрузки, ОбщиеПараметрыВыгрузки.context_params, ДополнительныеПараметры);
	
КонецПроцедуры

//DynamicDirective

Функция ЗначениеСледующегоЭтапа(ТекущийЭтап, ОтрицательныйПереход, ПричинаОтрицательногоПерехода,
		ДанныеДляПодписания = Неопределено)
	
	Комментарий = "";
	
	Если ТекущийЭтап = "1110343" Тогда
		
		Этап       = "Переадресовка";
		// ИдЭтап "327a0052-6b11-49eb-ba7a-c74c90938902"
		
		Действие   = "Переадресован";
		ИдДействие = "7b9b3f53-6549-4e37-8c49-650a7e41296c";
		
	ИначеЕсли ТекущийЭтап = "1110344" Тогда
		
		Этап       = "Замена водителей/ТС";
		// ИдЭтап "7b4c733f-3639-41a5-9e7c-bdac7e9d9a93"
		
		Действие   = "Замена водителей/ТС";
		ИдДействие = "8a458ae4-5a38-497d-b4ec-424e14cc64ed";
		
	ИначеЕсли ТекущийЭтап = "1167009" Тогда
		
		Этап       = "Уведомление о переадресовке";
		// ИдЭтап "bc2bb0b5-194f-40be-afd2-e43e01ed4baf"
		
		Действие   = "Уведомить";
		ИдДействие = "3f9da9bb-6cff-4d9f-aa97-99891079e4dd";
		
	ИначеЕсли ТекущийЭтап = "1110345" Тогда
		
		Этап       = "Изменить стоимость";
		// ИдЭтап "a03b3162-615f-49b4-916e-aa49a559e404"
		
		Действие   = "Согласовать";
		ИдДействие = "c1c702d6-f686-4baf-aa0f-52f4baee2e66";
		
	ИначеЕсли ТекущийЭтап = "1110346" Тогда
		
		Этап       = "Согласовать стоимость";
		// ИдЭтап "49c91f1d-1860-46ab-8279-d42ea215b0ce"
		
		Если ОтрицательныйПереход Тогда			
			Действие    = "Отклонено";
			ИдДействие  = "cc83d6a2-1c02-4246-8dc0-280f5ef9c9aa";
			Комментарий = ПричинаОтрицательногоПерехода;
		Иначе			
			Действие   = "Согласовано";
			ИдДействие = "9c4737f5-24a9-40e8-9d21-6b1122293550";			
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураДействия = Новый Структура;
    СтруктураДействия.Вставить("Название",      Действие);
	СтруктураДействия.Вставить("Идентификатор", ИдДействие);
	СтруктураДействия.Вставить("Комментарий",   Комментарий);
	
	Если ДанныеДляПодписания <> Неопределено
		И ДанныеДляПодписания.Свойство("СертификатДок")
		И ДанныеДляПодписания.СертификатДок <> Неопределено Тогда
		СтруктураДействия.Вставить("Сертификат", ДанныеДляПодписания.СертификатДок);
	КонецЕсли;
	
	СтруктураЭтапа = Новый Структура;
	СтруктураЭтапа.Вставить("Действие", СтруктураДействия);
	
	СтруктураЭтапа.Вставить("Название", Этап);
	
	Возврат СтруктураЭтапа;
	
КонецФункции

//DynamicDirective

Процедура УдалитьЛишниеДействия(СоответствиеДанных)
	
	Этап = СоответствиеДанных["Этап"];
	
	Если Не ЗначениеЗаполнено(Этап) Тогда 
		Возврат;
	КонецЕсли;
		
	Для Каждого Элемент Из Этап Цикл 
		
		Действия = Элемент["Действие"];
		Если Не ЗначениеЗаполнено(Действия) Тогда 
			Продолжить;
		КонецЕсли;
		
		НовыеДействия = Новый Массив;
		
		Для Каждого Действие Из Действия Цикл 
			Если Действие["Название"] <> "Переназначить" Тогда 
				НовыеДействия.Добавить(Действие);
			КонецЕсли;
		КонецЦикла;
		
		Элемент.Вставить("Действие", НовыеДействия);
		
	КонецЦикла;
		
КонецПроцедуры

//DynamicDirective

Функция ПереходВыполнен(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат)
	
	ПараметрыДействия = ПараметрыВыполненияДействия(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат);
	
	Если ПараметрыДействия = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Ошибки = Неопределено;
	
	Попытка
		
		ВыполнитьДействиеВСбис(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ПараметрыДействия);
								
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		ТекстОшибки = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ПричинаОшибкиИзЯдра", ИнфоОшибки.Описание);					
		Ошибки = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю", Ошибки, Неопределено, ТекстОшибки);
		Ошибки.Вставить("ИмяМетаданных", ПараметрыВыгрузки.ИмяМетаданных);
		КлючСоответствия = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").КлючСсылка(ПараметрыВыгрузки.Ссылка);
		Результат.Ошибки.Вставить(КлючСоответствия, Ошибки);
		
		СостояниеКод = 6; // Ошибка
		
		Состояние = ВыполнитьНаСервере("Справочники.Saby_СостоянияОбъектов.ПолучитьСтатусДокументаСБИС", СостояниеКод);
			
		ПараметрыСтатус = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ПараметрыЗаписиРегистраСостояний", Неопределено);
		ПараметрыСтатус.ИД           = ПараметрыВыгрузки.ИдентификаторСБИС;
		ПараметрыСтатус.АктивныйЭтап = ПараметрыВыгрузки.Этап;
		ПараметрыСтатус.Ссылка       = ПараметрыВыгрузки.Ссылка;
		ПараметрыСтатус.Состояние    = Состояние;
		
		ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ОбновитьДанныеСостояния", ПараметрыСтатус);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	СтруктураОтвет = ДанныеУспешнойЗагрузкиДокумента(ПараметрыВыгрузки, Истина, Результат);
	Результат.Успешные.Добавить(СтруктураОтвет);
		
	Возврат Истина;
	
КонецФункции

//DynamicDirective

Процедура ЗаписатьСтатистику(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки)
	
	Попытка
		
		ИмяТитула = "Переход\" + ПараметрыВыгрузки.Этап;
		
		ВыполнитьМетодЗаписатьСтатистику(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ИмяТитула, ПараметрыВыгрузки.ПараметрыДляАПИ.Тип);
			
	Исключение
				
		ИнфоОшибки = ИнформацияОбОшибке();
		
		ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации",
			ПараметрыВыгрузки.Ссылка,
			"Не записана статистика документа",
			ИнфоОшибки.Описание);
		
	КонецПопытки;
	
КонецПроцедуры

#Область ПодготовитьДействие

//DynamicDirective

Функция ПараметрыВыполненияДействия(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат)
	
	ПодготовкаУпала = Ложь;
	Попытка
		РезультатПодготовки = ПодготовитьДействиеКПереходуСбис(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки);
	Исключение
		ПодготовкаУпала = Истина;
	КонецПопытки;
	
	Ошибки = Неопределено;
	
	Если ПодготовкаУпала Тогда
		Попытка
			РезультатПодготовки = ПодготовитьДействиеКПереходуСбис(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки);
		Исключение
			ИнфоОшибки = ИнформацияОбОшибке();
			ТекстОшибки = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ПричинаОшибкиИзЯдра", ИнфоОшибки.Описание);
			Ошибки = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю", Ошибки, Неопределено, ТекстОшибки);
			Ошибки.Вставить("ИмяМетаданных", ПараметрыВыгрузки.ИмяМетаданных);
			КлючСоответствия = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").КлючСсылка(ПараметрыВыгрузки.Ссылка);
			Результат.Ошибки.Вставить(КлючСоответствия, Ошибки);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ДанныеДляПодписания = ДанныеДляПодписанияНовые(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки);
	Если Не ЗначениеЗаполнено(ДанныеДляПодписания.ТекущиеДанныеСертификата) Тогда
		Возврат РезультатПодготовки.ПараметрыДействия;
	КонецЕсли;
	
	ТекущиеДанныеСертификата = ДанныеДляПодписания.ТекущиеДанныеСертификата;
	Пока Не ПодписьДобавлена(ОбщиеПараметрыВыгрузки, РезультатПодготовки, ТекущиеДанныеСертификата) Цикл
		
		ДанныеДляПодписания = ДанныеДляПодписанияНовые(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ДанныеДляПодписания);

		ТекущиеДанныеСертификата = ДанныеДляПодписания.ТекущиеДанныеСертификата;
		Если Не ЗначениеЗаполнено(ТекущиеДанныеСертификата) Тогда
		    Прервать;
		КонецЕсли;
		
    КонецЦикла;
    
	Возврат РезультатПодготовки.ПараметрыДействия;
	
КонецФункции

//DynamicDirective

Функция ДанныеДляПодписанияНовые(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки,
		ИсходныеДанные = Неопределено, РезультатЗапроса = Неопределено)
	
	Если ИсходныеДанные = Неопределено Тогда
		РезультатФункции = Новый Структура;
		РезультатФункции.Вставить(
			"ДоступныеСертификаты",
			ДоступныеЛокальныеСертификаты(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, РезультатЗапроса));
	Иначе
		РезультатФункции = ИсходныеДанные;
		МассивСертификатов = РезультатФункции.ДоступныеСертификаты["Сертификат"];
		ИндексПоследнегоСертификата = НайтиПодписьВМассивеПодписей(
			МассивСертификатов, РезультатФункции.ТекущиеДанныеСертификата);
		
		Пока ИндексПоследнегоСертификата >= 0 Цикл
			МассивСертификатов.Удалить(ИндексПоследнегоСертификата);
			ИндексПоследнегоСертификата = ИндексПоследнегоСертификата - 1;
		КонецЦикла;
		
	КонецЕсли;
	
	ТекущиеДанныеСертификата = ОбщиеПараметрыВыгрузки.ТранспортБлокли.сбисОпределитьДанныеДляПодписания(
		Неопределено, Неопределено, РезультатФункции.ДоступныеСертификаты);
		
	РезультатФункции.Вставить("ТекущиеДанныеСертификата", ТекущиеДанныеСертификата);
	
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective

Функция НайтиПодписьВМассивеПодписей(МассивСертификатов, ТекущиеДанныеСертификата)
	
	РезультатФункции = -1;
	
	ОтпечатокТекущегоСертификата = ТекущиеДанныеСертификата["СертификатДок"]["Отпечаток"];
	
	Индекс = 0;
	Для Каждого ДанныеСертификата Из МассивСертификатов Цикл
		
		Если ДанныеСертификата["Отпечаток"] = ОтпечатокТекущегоСертификата Тогда
			РезультатФункции = Индекс;
			Прервать;
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective

Функция ПодписьДобавлена(ОбщиеПараметрыВыгрузки, РезультатПодготовки, ДанныеДляПодписания)
	
	РезультатПодготовкиЭтап = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ДанныеСоответствия(
		РезультатПодготовки, "Результат.Этап");
	
	Если ТипЗнч(РезультатПодготовкиЭтап) = Тип("Массив") Тогда
		РезультатПодготовки["Результат"]["Этап"] = РезультатПодготовкиЭтап[0];
	КонецЕсли;
	
	ВложенияДляДобавленияПодписи = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ДанныеСоответствия(
		РезультатПодготовки, "Результат.Этап.Вложение");
	
	Контекст = Новый Структура("params", ОбщиеПараметрыВыгрузки.context_params);
	
	ИмяКлючаПодписи = "Подпись";
	
	ТипДанныхПодписания = ДанныеДляПодписания["Тип"];
	Если ТипДанныхПодписания = "Дистанционное" Тогда
		ОбщиеПараметрыВыгрузки.ТранспортБлокли.ПодписатьДистанционно(
			Контекст,
			ВложенияДляДобавленияПодписи,
			ДанныеДляПодписания["СертификатДляПодписания"]);
	ИначеЕсли ТипДанныхПодписания = "ЛокальноеНаСервере" Тогда
		ОбщиеПараметрыВыгрузки.ТранспортБлокли.ПолучитьДвоичныеДанныеВложений(Контекст, РезультатПодготовки["Результат"]);
		ПодписатьНаСервереЭПД(Контекст, ВложенияДляДобавленияПодписи, ДанныеДляПодписания);
	ИначеЕсли ТипДанныхПодписания = "ЛокальноеНаКлиенте" Тогда
		ОбщиеПараметрыВыгрузки.ТранспортБлокли.ПодписатьНаКлиенте(
			Контекст,
			ВложенияДляДобавленияПодписи,
			ДанныеДляПодписания,
			Неопределено);
	ИначеЕсли ТипДанныхПодписания = "Отложенное" И ЗначениеЗаполнено(ДанныеДляПодписания.СертификатДок) Тогда
		ИмяКлючаДоверенность = "Доверенность";
		Если ДанныеДляПодписания.СертификатДок[ИмяКлючаДоверенность] <> Неопределено Тогда
			ДанныеДляПодписания.СертификатДок.Вставить(
				"Сертификат",
				Новый Структура(ИмяКлючаДоверенность, ДанныеДляПодписания.СертификатДок[ИмяКлючаДоверенность]));
		КонецЕсли;
		ВложенияДляДобавленияПодписи[0].Вставить(ИмяКлючаПодписи, Новый Массив);
	Иначе
		Возврат Ложь;
	КонецЕсли;

	Если ВложенияДляДобавленияПодписи[0][ИмяКлючаПодписи] = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВложенияДляДобавленияПодписи[0][ИмяКлючаПодписи].Количество() > 0 Тогда
		ДвоичныеДанные = ВложенияДляДобавленияПодписи[0][ИмяКлючаПодписи][0].Файл.ДвоичныеДанные;
		Идентификатор  = ВложенияДляДобавленияПодписи[0]["Идентификатор"];
		
		СтруктураПодписи = Новый Структура;
		СтруктураПодписи.Вставить("Файл", Новый Структура);
		СтруктураПодписи.Файл.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	Иначе
		СтруктураПодписи = ДанныеДляПодписания.СертификатДок;
	КонецЕсли;
	
	МассивПодписей = Новый Массив;
	МассивПодписей.Добавить(СтруктураПодписи);
	
	СтруктураВложения = Новый Структура;
	СтруктураВложения.Вставить("Идентификатор", Идентификатор);
	СтруктураВложения.Вставить(ИмяКлючаПодписи, МассивПодписей);
	
	МассивВложений = Новый Массив;
	МассивВложений.Добавить(СтруктураВложения);
	
	РезультатПодготовки.ПараметрыДействия.Этап.Вставить("Вложение", МассивВложений);
	
	Возврат Истина;
	
КонецФункции

Процедура ПодписатьНаСервереЭПД(Контекст, ВложенияДляДобавленияПодписи, ДанныеДляПодписания)
	
	МодульКода("Saby_ТНОбщегоНазначенияСервер").ОбъектОбработки().ПодписатьНаСервере(
		Контекст,
		ВложенияДляДобавленияПодписи,
		ДанныеДляПодписания["СертификатДляПодписания"]);
	
КонецПроцедуры

//DynamicDirective

Функция ДоступныеЛокальныеСертификаты(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, РезультатЗапроса = Неопределено)
	
	РезультатФункции = Новый Соответствие;
	
	УзелСертификат = "Сертификат";
	
	РезультатФункции.Вставить("ТребуетПодписания", "Да");
	РезультатФункции.Вставить(УзелСертификат, Новый Массив);
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Идентификатор", ПараметрыВыгрузки.ИдентификаторСБИС);
	ПараметрыМетода.Вставить("ДопПоля",       "ЭтапВернутьВсеСертификаты");
	
	Если РезультатЗапроса = Неопределено Тогда
		Результат = ВыполнитьМетодПрочитатьДокумент(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ПараметрыМетода);
	Иначе
		Результат = РезультатЗапроса;
	КонецЕсли;
	
	Если Результат["Этап"] = Неопределено Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Для Каждого Этап Из Результат["Этап"] Цикл
		Для Каждого Сертификат Из Этап["Действие"][0][УзелСертификат] Цикл			
			РезультатФункции[УзелСертификат].Добавить(Сертификат);
		КонецЦикла;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ПодготовитьДействие

//DynamicDirective

Функция ДанныеУспешнойЗагрузкиДокумента(ПараметрыВыгрузки, ДинамическийТитул, Результат, Знач ЭтапыИзСБИС = Неопределено)
	
	Результат.Итог.Количество = Результат.Итог.Количество + 1;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИдентификаторСБИС) И ТипЗнч(ПараметрыВыгрузки.Ссылка) = Тип("Структура") Тогда
		ПараметрыВыгрузки.Ссылка.Идентификатор = ПараметрыВыгрузки.ИдентификаторСБИС;
		Если ЭтапыИзСБИС = Неопределено Тогда
			ЭтапыИзСБИС = ПараметрыВыгрузки.Этап;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураОтвет = Новый Структура;
	СтруктураОтвет.Вставить("Ссылка",            ПараметрыВыгрузки.Ссылка);
	СтруктураОтвет.Вставить("Этап",              ЭтапыИзСБИС);
	СтруктураОтвет.Вставить("ДинамическийТитул", ДинамическийТитул);
	СтруктураОтвет.Вставить("ВыгрузкаНаКлиенте", ПараметрыВыгрузки.ВыгрузкаНаКлиенте);
	
	Возврат СтруктураОтвет;
			
КонецФункции

//DynamicDirective
// Возвращает дату в виде отформатированной строки с учетом смещения. 
// Аналог ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением, только с возможностью указать формат даты.
//
// Параметры:
//  ЛокальнаяДата	 - Дата	 	 - Дата
//  ФорматнаяСтрока	 - Строка	 - Форматная строка 
// 
// Возвращаемое значение:
//  Строка - Отформатированная дата с учетом смещения
//
Функция ФорматЛокальнойДатыСоСмещением(ЛокальнаяДата, ФорматнаяСтрока = "ДФ=ггггММддЧЧммсс")
	
	Если Не ЗначениеЗаполнено(ЛокальнаяДата) Тогда 
		Возврат "";
	КонецЕсли;
		
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Смещение = СмещениеСтандартногоВремени(ЧасовойПоясСеанса());
	#Иначе
		Смещение = МодульКодаКлиент("СтандартныеПодсистемыКлиент").ПараметрыРаботыКлиента().СмещениеСтандартногоВремени;
	#КонецЕсли
	
	ПредставлениеСмещения = "";
	Если Смещение > 0 Тогда
		ПредставлениеСмещения = "+";
	ИначеЕсли Смещение < 0 Тогда
		ПредставлениеСмещения = "-";
		Смещение = - Смещение;
	Иначе
		ПредставлениеСмещения = "+00:00";
	КонецЕсли; 
	
	Если Смещение <> 0 Тогда
		ПредставлениеСмещения = ПредставлениеСмещения + Формат('00010101' + Смещение, "ДФ=HH:mm");
	КонецЕсли;
	
	Возврат Формат(ЛокальнаяДата, ФорматнаяСтрока) + ПредставлениеСмещения;
	
КонецФункции

//DynamicDirective

Функция ФорматНашейОрганизации(ЭтоФЛ = Ложь)
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("ИНН",        "");
	ДанныеОрганизации.Вставить("КодФилиала", "");
	ДанныеОрганизации.Вставить("КодСтраны",  "");
	
	Если ЭтоФЛ Тогда
		ДанныеОрганизации.Вставить("Фамилия",     "");
		ДанныеОрганизации.Вставить("Имя",         "");
		ДанныеОрганизации.Вставить("Отчество",    "");
		ДанныеОрганизации.Вставить("ЧастноеЛицо", "Нет");
	Иначе 
		ДанныеОрганизации.Вставить("КПП",      "");
		ДанныеОрганизации.Вставить("Название", "");
	КонецЕсли;
	
	Возврат ДанныеОрганизации;
	
КонецФункции

//DynamicDirective

Функция РеквизитыНашейОрганизации(Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;		
	КонецЕсли;              
	
	ЭтоФл = Ложь;
	Реквизиты = Организация.Реквизиты;
		
	Если Реквизиты.Свойство("ИП") Тогда  
		
		ДанныеОрганизации = ФорматНашейОрганизации(Истина);
		ЗаполнитьЗначенияСвойств(ДанныеОрганизации, Реквизиты.ИП);
		
	ИначеЕсли Реквизиты.Свойство("ФЛ") Тогда 
		
		ЭтоФл = Истина;
		ДанныеОрганизации = ФорматНашейОрганизации(Истина);
		ЗаполнитьЗначенияСвойств(ДанныеОрганизации, Реквизиты.ФЛ);
		ДанныеОрганизации.ЧастноеЛицо = "Да";
		
	ИначеЕсли Реквизиты.Свойство("ЮЛ") Тогда
		
		ДанныеОрганизации = ФорматНашейОрганизации();
		ЗаполнитьЗначенияСвойств(ДанныеОрганизации, Реквизиты.ЮЛ, , "Название");
		ДанныеОрганизации.Название = Реквизиты.ЮЛ.Название.Полное;
		
	ИначеЕсли Реквизиты.Свойство("ИностранноеЛицо") Тогда
		
		ДанныеОрганизации = ФорматНашейОрганизации();
		ДанныеОрганизации.Название = Реквизиты.ИностаноеЛицо.Наименование;
		
	Иначе
		
		ДанныеОрганизации = ФорматНашейОрганизации();
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеОрганизации.КодФилиала) Тогда
		ДанныеОрганизации.Удалить("КодФилиала");
	КонецЕсли;
	
	ОбщаяСтруктура = Новый Структура;
	Если ЭтоФл Тогда
		ОбщаяСтруктура.Вставить("СвФЛ", ДанныеОрганизации);
	Иначе
		ОбщаяСтруктура.Вставить("СвЮЛ", ДанныеОрганизации);
	КонецЕсли;
	
	Если Организация.Свойство("Идентификатор") И ЗначениеЗаполнено(Организация.Идентификатор) Тогда
		ОбщаяСтруктура.Вставить("Идентификатор", Организация.Идентификатор);
	КонецЕсли;
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

//DynamicDirective

Функция ВыполнитьМетод(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ИмяМетода, ПараметрыМетода)
	
	СтандартныйТаймаут = 120;
	
	Аргументы = Новый Структура();
	Аргументы.Вставить("multithread_mode", Ложь);
	Аргументы.Вставить("timeout",          СтандартныйТаймаут);
	
	Возврат ОбщиеПараметрыВыгрузки.ОбъектОбработки.local_helper_exec_method(
		ОбщиеПараметрыВыгрузки.context_params, ИмяМетода, ПараметрыМетода, Истина, Аргументы);
	
КонецФункции

//DynamicDirective

Функция ВыполнитьМетодЗаписатьДокумент(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ПараметрыМетода)
	
	Возврат ОбщиеПараметрыВыгрузки.ОбъектОбработки.local_helper_write_document(
		ОбщиеПараметрыВыгрузки.context_params, ПараметрыМетода);
	
КонецФункции

//DynamicDirective

Функция ВыполнитьМетодЗаписатьВложение(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ПараметрыМетода)
	
	Возврат ОбщиеПараметрыВыгрузки.ОбъектОбработки.local_helper_write_attachment(
		ОбщиеПараметрыВыгрузки.context_params, ПараметрыМетода);
	
КонецФункции

//DynamicDirective

Функция ВыполнитьМетодПодготовитьДействие(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ПараметрыМетода)
	
	Возврат ОбщиеПараметрыВыгрузки.ОбъектОбработки.local_helper_prepare_action(
		ОбщиеПараметрыВыгрузки.context_params, ПараметрыМетода);
	
КонецФункции

//DynamicDirective

Процедура ВыполнитьМетодВыполнитьДействие(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ПараметрыМетода)
	
	ОбщиеПараметрыВыгрузки.ОбъектОбработки.local_helper_execute_action(ОбщиеПараметрыВыгрузки.context_params, ПараметрыМетода);
	
КонецПроцедуры

//DynamicDirective

Процедура ВыполнитьМетодЗаписатьСтатистику(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ИмяТитула, Тип)
	
	ОбъектОбработки = ОбщиеПараметрыВыгрузки.ОбъектОбработки;	
	ДопПараметры    = Новый Структура;
	СчетчикОпераций = 1;
	
	ОписаниеМетода = ОбъектОбработки.local_helper_element_action(ИмяТитула, Тип, ДопПараметры, СчетчикОпераций);
	
	МассивМетодов = Новый Массив;
	МассивМетодов.Добавить(ОписаниеМетода);
	
	ОбъектОбработки.local_helper_register_actions(ОбщиеПараметрыВыгрузки.context_params, МассивМетодов);
		
КонецПроцедуры

//DynamicDirective

Функция ВыполнитьМетодПрочитатьДокумент(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ПараметрыМетода)
	
	Возврат ОбщиеПараметрыВыгрузки.ОбъектОбработки.local_helper_read_document(
		ОбщиеПараметрыВыгрузки.context_params, ПараметрыМетода);
	
КонецФункции

