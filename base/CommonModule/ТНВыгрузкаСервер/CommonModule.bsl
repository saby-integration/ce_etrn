
#Область ПрограммныйИнтерфейс

// Выгружает документы в СБИС и возвращает результат.
//
// Параметры:
//  ДанныеДляВыгрузки - Массив - массив структур см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//  context_params - Структура - параметры подключения к СБИС
//  ДополнительныеПараметры - Структура - дополнительные параметры для выгрузки
//
// Возвращаемое значение:
//   Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.РезультатВзаимодействияСоСБИС
//
Функция РезультатВыгрузкиДокументов(ДанныеДляВыгрузки, context_params, ДополнительныеПараметры) Экспорт
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	ОбщиеПараметрыВыгрузки = МодульТНОбщегоНазначенияСервер.ОбщиеПараметрыВыгрузкиЗагрузки(context_params);
	
	РезультатФункции = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").РезультатВзаимодействияСоСБИС(
		ДанныеДляВыгрузки.Количество());
	
	Для Каждого ПараметрыВыгрузки Из ДанныеДляВыгрузки Цикл
		
		ВыгрузитьДокумент(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, РезультатФункции);
		
	КонецЦикла;
	
	МодульТНОбщегоНазначенияСервер.ЗаписьОшибокВЖурналРегистрации(РезультатФункции.Ошибки);
	
	РезультатФункции.Итог.Успех = Не ЗначениеЗаполнено(РезультатФункции.Ошибки);
	
	Возврат РезультатФункции;
	
КонецФункции

// Выполняет ФЛК и конвертирует данные документа в структуру подстановок готовых для выгрузки.
//
// Параметры:
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//  Результат - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.РезультатВзаимодействияСоСБИС
//  ТолькоВыполнитьФЛК - Булево - признак выполнения только ФЛК.
//    Если Истина, то формирование структуры документа не выполняется.
//
Процедура ЗаполнитьСтруктуруДокументаСПроверкойФЛК(ПараметрыВыгрузки, Результат, ТолькоВыполнитьФЛК = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ДанныеДокумента) Тогда
		ДанныеДокумента = ПараметрыВыгрузки.ДанныеДокумента;
	Иначе
		ДанныеДокумента = МодульКода("Документы." + ПараметрыВыгрузки.ИмяМетаданных).ДанныеДокумента(
			ПараметрыВыгрузки.Ссылка, ПараметрыВыгрузки.ТипТитула);
	КонецЕсли;
	
	РезультатФЛК = МодульКода("Saby_ТНОбщегоНазначенияСервер").РезультатФЛК(ДанныеДокумента, ПараметрыВыгрузки);
	Если ЗначениеЗаполнено(РезультатФЛК) Тогда
		РезультатФЛК.Вставить("ИмяМетаданных", ПараметрыВыгрузки.ИмяМетаданных);
		КлючСоответствия = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").КлючСсылка(ПараметрыВыгрузки.Ссылка);
		Результат.Ошибки.Вставить(КлючСоответствия, РезультатФЛК);
		Возврат;
	КонецЕсли;
	
	Если Не ТолькоВыполнитьФЛК Тогда
		ПараметрыВыгрузки.СтруктураДокумента = ДанныеДляВыгрузки(ДанныеДокумента, ПараметрыВыгрузки);
	КонецЕсли;
	
КонецПроцедуры

// Получает данные документа для выгрузки в формате подстановок
//
// Параметры:
//  ДанныеДокумента - Структура - структура данных документа
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//
// Возвращаемое значение:
//   Структура - структура данных для выгрузки в формате подстановок.
//     * Идентификатор - Строка - идентификатор документа СБИС
//     * Вложение - Массив - массив структур вложений в формате подстановок.
//
Функция ДанныеДляВыгрузки(ДанныеДокумента, ПараметрыВыгрузки) Экспорт
	
	ДокументСтруктура = МодульКода("Документы." + ПараметрыВыгрузки.ИмяМетаданных).ВложениеНаВыгрузку(
		ПараметрыВыгрузки.ТипТитула, ДанныеДокумента);
	
	Если Не ЗначениеЗаполнено(ДокументСтруктура) Тогда
		Возврат ДокументСтруктура;
	КонецЕсли;
				
	// Если есть свойство Вложение, то это документ, который отправляется по старому.
	// Порядок отправки по-старому отличается структурой запроса.
	Если ДокументСтруктура.Свойство("Вложение") Тогда
		
		Вложение = Новый Структура;
		Вложение.Вставить("Тип",         ПараметрыВыгрузки.ПараметрыДляАПИ.ТипДляВыгрузки);
		Вложение.Вставить("Подтип",      ДокументСтруктура.Титул);
		Вложение.Вставить("Подстановка", ДокументСтруктура.Вложение);
		
		// Регламент для документа. Ошибка на онлайн с подстановкой иного регламента
		Регламент = Новый Структура;		
		Регламент.Вставить("Название", ПараметрыВыгрузки.ПараметрыДляАПИ.Регламент);
		Вложение.Вставить("Регламент", Регламент);		
		
		// обход ошибки с не верной подстановкой организации
		ЗаполнитьНашуОрганизацию(Вложение, ПараметрыВыгрузки);
		ЗаполнитьИныхПолучателей(Вложение, ПараметрыВыгрузки);
		
		ДокументСтруктура = Новый Структура;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИдентификаторСБИС) Тогда
			ДокументСтруктура.Вставить("Идентификатор", ПараметрыВыгрузки.ИдентификаторСБИС);
		КонецЕсли;
		
		МассивВложений = Новый Массив;
		МассивВложений.Добавить(Вложение);
		ДокументСтруктура.Вставить("Вложение", МассивВложений);
		
	Иначе
		
		ДокументСтруктура.Вставить("Тип", ПараметрыВыгрузки.ПараметрыДляАПИ.ТипДляВыгрузки);
		
		ПервыйТитул = МодульКода("Saby_ТНОбщегоНазначенияСервер").РезультатФункцииТитулов(
			ПараметрыВыгрузки.ИмяМетаданных, "ПервыйТитул");
		
		Если ПараметрыВыгрузки.ТипТитула = ПервыйТитул Тогда 
			
			Регламент = Новый Структура;
			Регламент.Вставить("Название", ПараметрыВыгрузки.ПараметрыДляАПИ.Регламент);
			ДокументСтруктура.Вставить("Регламент", Регламент);
			
		КонецЕсли;
		
		ЗаполнитьНашуОрганизацию(ДокументСтруктура, ПараметрыВыгрузки);
		
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИдентификаторСБИС) Тогда
			Адресация = Новый Структура;
			Адресация.Вставить("Идентификатор", ПараметрыВыгрузки.ИдентификаторСБИС);
			ДокументСтруктура.Вставить("Адресация", Адресация);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДокументСтруктура;
	
КонецФункции

// Выгружает документы ЭПД в регламентном задании во внешней обработке
//
Процедура ВыгрузитьДокументыЭПДПоРегламентномуЗаданию() Экспорт
	
	context_params = МодульКода("Saby_Core").ПроверитьНаличиеПараметровПодключения();
	
	ВыгрузитьПоРегламенту(context_params, "Saby_ТранспортнаяНакладная");
	ВыгрузитьПоРегламенту(context_params, "Saby_ПутевойЛист");
	ВыгрузитьПоРегламенту(context_params, "Saby_ЗаказНаПеревозку");
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

Функция ЗначениеДатыВремяДляВыгрузки(ДатаВремя, БезВремени = Ложь, СоСмещением = Истина) Экспорт
	
	Если БезВремени Тогда
		Значение = Формат(ДатаВремя, "ДФ='dd.MM.yyyy'");
	Иначе
		ФорматДатаВремя = "ДФ=dd.MM.yyyyTHH:mm:ss; ДП=";
		Если СоСмещением Тогда
			Значение = ФорматЛокальнойДатыСоСмещением(ДатаВремя, ФорматДатаВремя);
		Иначе
			Значение = Формат(ДатаВремя, ФорматДатаВремя);
		КонецЕсли;
	КонецЕсли;

	Возврат Значение;
	
КонецФункции

Функция СтруктураДатаВремя(ДатаВремя, БезВремени = Ложь, СоСмещением = Истина) Экспорт
	
	Значение = ЗначениеДатыВремяДляВыгрузки(ДатаВремя, БезВремени, СоСмещением);
	
	Если Не БезВремени И Найти(Значение, "+") > 0 Тогда
		ЕстьЧасовойПояс = 1;
	Иначе
		ЕстьЧасовойПояс = 0;
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("ЕстьЧасовойПояс", ЕстьЧасовойПояс); // 0 нет, 1 - есть
	Структура.Вставить("Значение",        Значение);
	
	Возврат Структура;
	
КонецФункции

Процедура ЗаполнитьНашуОрганизацию(Вложение, ПараметрыВыгрузки) Экспорт
	
	МодульТНОбщегоНазначенияСервер       = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	МодульТНОбщегоНазначенияКлиентСервер = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	ЭтоПервыйТитул = МодульТНОбщегоНазначенияСервер.РезультатФункцииТитулов(
		ПараметрыВыгрузки.ИмяМетаданных, "ЭтоПервыйТитул", ПараметрыВыгрузки.ТипТитула);
	
	Если Не ЭтоПервыйТитул Тогда
		Возврат;
	КонецЕсли;
	
	Если Вложение.Свойство("Подстановка") Тогда
		ДанныеТитула = Вложение.Подстановка;
	Иначе
		ДанныеТитула = Вложение;
	КонецЕсли;
	
	Составитель     = МодульТНОбщегоНазначенияКлиентСервер.ДанныеСтруктуры(ДанныеТитула, "Файл.Составитель.ДанныеЮрЛица");
	ЕстьСоставитель = ЗначениеЗаполнено(Составитель);
	
	Оформитель      = МодульТНОбщегоНазначенияКлиентСервер.ДанныеСтруктуры(ДанныеТитула, "Документ.Оформитель");
	ЕстьОформитель  = ЗначениеЗаполнено(Оформитель);
		
	Если ЕстьСоставитель Тогда 
		Организация = ДанныеТитула.Файл.Составитель.ДанныеЮрЛица;
	ИначеЕсли ЕстьОформитель Тогда
		Организация = ДанныеТитула.Документ.Оформитель;
	Иначе
		Организация = ДанныеТитула.Грузоотправитель;
	КонецЕсли;
	
	Вложение.Вставить("НашаОрганизация", РеквизитыНашейОрганизации(Организация));
	
КонецПроцедуры

Процедура ЗаполнитьИныхПолучателей(Вложение, ПараметрыВыгрузки) Экспорт
	
	ЭтоПервыйТитул = МодульКода("Saby_ТНОбщегоНазначенияСервер").РезультатФункцииТитулов(
		ПараметрыВыгрузки.ИмяМетаданных, "ЭтоПервыйТитул", ПараметрыВыгрузки.ТипТитула);
	
	Если Не ЭтоПервыйТитул Тогда
		Возврат;
	КонецЕсли;
	
	Если Вложение.Свойство("Подстановка") Тогда
		ДанныеТитула = Вложение.Подстановка;
	Иначе
		ДанныеТитула = Вложение;
	КонецЕсли;
	
	ИмяКлючаИныеПолучатели = "ИныеПолучатели";
	
	Если Не ДанныеТитула.Свойство(ИмяКлючаИныеПолучатели) Тогда
		Возврат;
	КонецЕсли;
	
	ИныеПолучатели = Новый Массив;
	Для Каждого ДанныеИногоПолучателя Из ДанныеТитула.ИныеПолучатели Цикл
		ИныеПолучатели.Добавить(РеквизитыНашейОрганизации(ДанныеИногоПолучателя));
	КонецЦикла;
	
	Вложение.Вставить(ИмяКлючаИныеПолучатели, ИныеПолучатели);
	
	ДанныеТитула.Удалить(ИмяКлючаИныеПолучатели);
	
КонецПроцедуры

#Область ТранспортИнтерфейс

Функция ПодстановкиТранспортногоСредства(ДанныеТитула, Строка = Неопределено, ДляПутевогоЛиста = Ложь) Экспорт
	
	ТранспортныеСредства = ДанныеТитула.ТранспортныеСредства;
	
	ДанныеДляПодстановокТС = ДанныеДляПодстановокТС(ДляПутевогоЛиста);
	СтруктураТС = ДанныеДляПодстановокТС.СтруктураТС;
	
	Если Строка = Неопределено Тогда
		СтрокаТС = СтрокаАвтотранспорта(ТранспортныеСредства);
	Иначе
		СтрокаТС = Строка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТС) Тогда
		Возврат СтруктураТС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТС.Идентификатор) Тогда
		СтруктураТС.Удалить("UUID");
	КонецЕсли;
	
	Для Каждого КлючЗначение Из СтруктураТС Цикл
		ПолеДанных = ДанныеДляПодстановокТС.СоответствиеПолей.Получить(КлючЗначение.Ключ);
		Если ПолеДанных = Неопределено Тогда
			ПолеДанных = КлючЗначение.Ключ;
		КонецЕсли;
		СтруктураТС[КлючЗначение.Ключ] = СтрокаТС[ПолеДанных];
	КонецЦикла;
	
	Если СтруктураТС.Свойство("ТипВладения") Тогда
		СтруктураТС.ТипВладения = МодульКода("Перечисления.Saby_ТипыВладенияТС").КодПоТипуВладенияТС(СтруктураТС.ТипВладения);
	КонецЕсли;
	
	ДобавитьПодстановкиОснованийВладения(ДанныеТитула, СтруктураТС, СтрокаТС);
			
	Возврат СтруктураТС;
	
КонецФункции

Функция ПодстановкиПрицепов(ДанныеТитула, ДляПутевогоЛиста = Ложь) Экспорт
	
	ТранспортныеСредства = ДанныеТитула.ТранспортныеСредства;
	
	МассивПрицепы = Новый Массив;
	
	Прицеп = ЗначениеМетаданных("Saby_ВидыТС.Прицеп");
	
	Для Каждого СтрокаТС Из ТранспортныеСредства Цикл
		
		Если СтрокаТС.Вид <> Прицеп Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураТС = ПодстановкиТранспортногоСредства(ДанныеТитула, СтрокаТС, ДляПутевогоЛиста);
		
		Если ЗначениеЗаполнено(СтруктураТС.РегНомер) Тогда
			МассивПрицепы.Добавить(СтруктураТС);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПрицепы;
	
КонецФункции

Функция СпецУсловия(ТЗ_СпецРазрешения) Экспорт
		
	МассивУсловий = Новый Массив;   
	
	КолонкиИсключения = Новый Массив;
	КолонкиИсключения.Добавить("ИД");
	КолонкиИсключения.Добавить("Ссылка");
	КолонкиИсключения.Добавить("НомерСтроки");
	
	Для Каждого Строка Из ТЗ_СпецРазрешения Цикл
		
		Если ТипЗнч(Строка) <> Тип("Структура") Тогда 
			ПараметрыСтроки = МодульКода("Saby_ТНОбщегоНазначенияСервер").СтрокаТаблицыЗначенийВСтруктуруЭПД(Строка, КолонкиИсключения);
		Иначе 
			ПараметрыСтроки = Строка;
		КонецЕсли;
		
		ПараметрыСтроки.Дата = Формат(Строка.Дата, "ДФ=dd.MM.yyyy");
		
		Если ЗначениеЗаполнено(Строка.ИД) Тогда
			ПараметрыСтроки.Вставить("Идентификатор", Строка.ИД);
		КонецЕсли;
		
		ОИВ = Новый Структура;
		Если ПараметрыСтроки.Свойство("НаименованиеОрганаВласти") Тогда
			
			 // орган исполнительной власти
			ОИВ.Вставить("Наименование", ПараметрыСтроки.НаименованиеОрганаВласти);
									
			МассивУдалить = Новый Массив;
			МассивУдалить.Добавить("НаименованиеОрганаВласти");
			МодульКода("Saby_ТНОбщегоНазначенияСервер").УдалитьСвойстваИзСтруктуры(ПараметрыСтроки, МассивУдалить);
			
		КонецЕсли;	
			
		СтруктураУсловия = Новый Структура;
		СтруктураУсловия.Вставить("Маршрут",        Новый Структура);
		СтруктураУсловия.Вставить("ОИВ",            ОИВ);
		СтруктураУсловия.Вставить("СпецРазрешение", ПараметрыСтроки); 
		
		МассивУсловий.Добавить(СтруктураУсловия);
		
	КонецЦикла; 
	
	Возврат МассивУсловий;
	
КонецФункции

#КонецОбласти // ТранспортИнтерфейс 

#Область ВодителиИнтерфейс

// Формирование подстановок водителей для выгрузки
//
// Параметры:
// 	Водители - ТаблицаЗначений - данные водителей
// 	ДанныеДокументов - ТаблицаЗначений - данные путевых листов водителей
//                   - Структура - данные документов ЭПД и путевых листов
//  Исключения - Массив - свойства исключения согласно формату
//  ЭПЛ - Булево - признак документа ЭПЛ для работы со СНИЛС
//
// Возвращаемое значение:
// 	Структура - подстановки водителей для выгрузки
//
Функция ПодстановкиВодителя(Водители, ДанныеДокументов, Исключения = Неопределено, ЭПЛ = Ложь) Экспорт
	
	Если ТипЗнч(ДанныеДокументов) = Тип("Структура") Тогда		
		ПутевыеЛисты = ДанныеДокументов.ПутевыеЛисты;
		ДокументыЭПД = ДанныеДокументов.ДокументыЭПД;		
	Иначе			
		ПутевыеЛисты = ДанныеДокументов;
		ДокументыЭПД = Неопределено;		
	КонецЕсли;
		
	МассивДанных = Новый Массив;
	
	ПодстановкиПутевыхЛистов = ПодстановкиПутевыхЛистов(ПутевыеЛисты, ДокументыЭПД); 
	
	Для Каждого СтрокаВодителя Из Водители Цикл
		
		ПодстановкаВодителя = СтруктураПодстановкиВодителя();
		
		СвойстваИсключения = "";
		Если ТипЗнч(СтрокаВодителя) = Тип("Структура") И СтрокаВодителя.Свойство("ВУ") Тогда  
			СвойстваИсключения = "ВУ";
		КонецЕсли;
					
	    ЗаполнитьЗначенияСвойств(ПодстановкаВодителя, СтрокаВодителя, , СвойстваИсключения);
				
		ДатаВыдачи = МодульКода("Saby_ТНВыгрузкаСервер").ЗначениеДатыВремяДляВыгрузки(СтрокаВодителя.ДатаВыдачи, Истина);
		
		ПодстановкаВодителя.ВУ.Номер      = СтрокаВодителя.Номер;
		ПодстановкаВодителя.ВУ.Серия      = СтрокаВодителя.Серия;
		ПодстановкаВодителя.ВУ.ДатаВыдачи = ДатаВыдачи;
		
		Если ЭПЛ И ЗначениеЗаполнено(СтрокаВодителя.СНИЛС) Тогда
			ПодстановкаВодителя.Вставить("СНИЛС", СтрокаВодителя.СНИЛС);
		КонецЕсли;	
		
		ЗаполнитьТелефоныОтветственного(СтрокаВодителя, ПодстановкаВодителя);
				
		ЗаполнитьПутевыеЛистыВодителя(ПодстановкаВодителя, ПодстановкиПутевыхЛистов, СтрокаВодителя, ПутевыеЛисты);
		
		Если ЗначениеЗаполнено(Исключения) Тогда
			МодульКода("Saby_ТНОбщегоНазначенияСервер").УдалитьСвойстваИзСтруктуры(ПодстановкаВодителя, Исключения);
		КонецЕсли;
		
		МассивДанных.Добавить(ПодстановкаВодителя);
		
	КонецЦикла;
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Водитель", МассивДанных);
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ВодителиИнтерфейс

#Область ЮрЛицаИнтерфейс

Функция ДанныеЮрЛица(РольСтрокой, ДанныеДокумента, ЗаполнитьКодФилиала = Ложь, СтруктураЮрЛица = Неопределено) Экспорт
	
	СтруктураДанных = ОбщийШаблонЮрЛица(ДанныеДокумента.ИмяМетаданных);
	
	Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов." + РольСтрокой);
	Если Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов.Отправитель") Тогда
		// не входит в общую структуру
		СтруктураДанных.Вставить("Экспедитор", Число(ДанныеДокумента.Отправитель_Экспедитор));
	КонецЕсли;
	
	Если СтруктураЮрЛица <> Неопределено Тогда
		ОсновныеДанныеЮрЛицаИзДокумента(СтруктураДанных, СтруктураЮрЛица, ЗаполнитьКодФилиала);
	Иначе
		// Данные из документа
		Отбор = Новый Структура;
		Отбор.Вставить("Роль", Роль);
		
		НайденныеСтроки = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").НайтиСтрокиУниверсально(
			ДанныеДокумента.ДанныеЮрЛиц, Отбор);
		Если НайденныеСтроки.Количество() Тогда
			СтрокаДанные = НайденныеСтроки[0];
			ОсновныеДанныеЮрЛицаИзДокумента(СтруктураДанных, СтрокаДанные, ЗаполнитьКодФилиала);
		Иначе
			Возврат Новый Структура();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеДокумента.Свойство("КонтактныеДанные") Тогда
		
		Контакты = МодульКода("Saby_ТНВыгрузкаСервер").КонтактыЮрЛица(ДанныеДокумента.КонтактныеДанные, Роль);
		Если ЗначениеЗаполнено(Контакты.Телефоны) Тогда
			СтруктураДанных.Контакты.Вставить("Телефон", Контакты.Телефоны);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контакты.ЭлектроннаяПочта) Тогда
			СтруктураДанных.Контакты.Вставить("ЭлектроннаяПочта", Контакты.ЭлектроннаяПочта);
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат СтруктураДанных;
	
КонецФункции

Функция ОбщийШаблонЮрЛица(ИмяМетаданных) Экспорт
		
	// Название
	СтруктураНазвание = Новый Структура;
	СтруктураНазвание.Вставить("Полное", "");	
		
	// Реквизиты
	СтруктураРеквизиты = Новый Структура;	
	
	// Контакты	
	СтруктураКонтакты = Новый Структура;
		
	// Общая структура
	Структура = Новый Структура;           	
	Структура.Вставить("Название",      СтруктураНазвание);
	Структура.Вставить("Реквизиты",     СтруктураРеквизиты);
	Структура.Вставить("Контакты",      СтруктураКонтакты);
	Структура.Вставить("Идентификатор", "");

	Если ИмяМетаданных = "Saby_ТранспортнаяНакладная" Тогда
	    Структура.Вставить("Адрес", ШаблонЮрАдрес());
	Иначе 	
		Структура.Вставить("Адрес", МодульКода("Saby_ТНОбщегоНазначенияСервер").ОбщийШаблонАдреса(Истина));
	КонецЕсли;	
		
	Возврат Структура;
	
КонецФункции

Процедура ОсновныеДанныеЮрЛицаИзДокумента(СтруктураДанных, СтрокаДанные, ЗаполнитьКодФилиала) Экспорт
	
	Если СтрокаДанные.ЮрФизЛицо = ЗначениеМетаданных("Saby_ЮрФизЛицо.ЮрЛицоНеРезидент") Тогда
		
		// Не резидент
		// *- не полный 		
		ИнЛицо              = ШаблонИностранногоЛица();		
		ИнЛицо.Наименование = СтруктураДанных.Название.Полное;
		
		Если ЗначениеЗаполнено(СтрокаДанные.АдресСтруктура) Тогда  
			
			АдресСтруктурой = МодульКода("УправлениеКонтактнойИнформациейСлужебный").СтрокуJSONВСтруктуру(СтрокаДанные.АдресСтруктура);
			Если АдресСтруктурой.Свойство("country") Тогда 
				ИнЛицо.Страна = АдресСтруктурой.country;
			КонецЕсли; 
			
		КонецЕсли;
			
		СтруктураДанных.Реквизиты.Вставить("ИностранноеЛицо", ИнЛицо);
		
	ИначеЕсли СтрокаДанные.ЮрФизЛицо = ЗначениеМетаданных("Saby_ЮрФизЛицо.ИндивидуальныйПредприниматель") Тогда 
		
		// ИП
		ИП = ШаблонЮрЛицаИП();				
		ИП.ИНН = СтрокаДанные.ИНН; 		
		ЗаполнитьФИО(СтруктураДанных, СтрокаДанные, ИП, Истина);
		
		ДобавитьКодФилиала(ИП, СтрокаДанные, ЗаполнитьКодФилиала);
		
		СтруктураДанных.Реквизиты.Вставить("ИП", ИП); 
		
	ИначеЕсли СтрокаДанные.ЮрФизЛицо = ЗначениеМетаданных("Saby_ЮрФизЛицо.ФизЛицо") Тогда 
		
		// ФЛ
		ФЛ = ШаблонФизЛицо();
		ФЛ.ИНН = СтрокаДанные.ИНН;		
		ЗаполнитьФИО(СтруктураДанных, СтрокаДанные, ФЛ, Ложь);
		
		ДобавитьКодФилиала(ФЛ, СтрокаДанные, ЗаполнитьКодФилиала);
		
		СтруктураДанных.Реквизиты.Вставить("ФЛ", ФЛ);
		
	Иначе 
				
		// ЮрЛицо		
		ЮЛ = ШаблонЮЛ();				
		ЮЛ.ИНН = СтрокаДанные.ИНН;
		ЮЛ.КПП = СтрокаДанные.КПП;
		
		Если Не ЗначениеЗаполнено(СтруктураДанных.Название.Полное) Тогда
			
			ЮЛ.Название.Полное              = СтрокаДанные.НаименованиеОрганизации;
	    	СтруктураДанных.Название.Полное = СтрокаДанные.НаименованиеОрганизации;
			
		Иначе
			ЮЛ.Название.Полное = СтруктураДанных.Название.Полное;
		КонецЕсли;
		
		ЮЛ.Наименование = ЮЛ.Название.Полное;
		
		ДобавитьКодФилиала(ЮЛ, СтрокаДанные, ЗаполнитьКодФилиала);
		
		СтруктураДанных.Реквизиты.Вставить("ЮЛ", ЮЛ);
		
	КонецЕсли;		
	
	// ToDo:  адрес не полный, не хватает структуры КИ
	Если СтруктураДанных.Адрес.Свойство("Юридический") Тогда  
		СтруктураДанных.Адрес.Юридический.Текст = СтрокаДанные.Адрес;
	Иначе
		СтруктураДанных.Адрес.АдресТекст = СтрокаДанные.Адрес;
	КонецЕсли;
	
	СтруктураДанных.Идентификатор = СтрокаДанные.ИдентификаторЭДО;
	
КонецПроцедуры

Функция ШаблонФактАдрес() Экспорт
	
	Структура = Новый Структура; 
	Структура.Вставить("Фактический", МодульКода("Saby_ТНОбщегоНазначенияСервер").ОбщийШаблонАдреса());
		
	Возврат Структура;
	
КонецФункции

Функция ШаблонИностранногоЛица() Экспорт
	
	СтруктураИнЛицо = Новый Структура;
	СтруктураИнЛицо.Вставить("Страна",               "");
	СтруктураИнЛицо.Вставить("Наименование",         "");
	СтруктураИнЛицо.Вставить("ИныеСведения",         "");
	СтруктураИнЛицо.Вставить("ИдентификацияСтатуса", 2); // 1 - ФЛ, 2 - ЮЛ
	
	СтруктураИнЛицо.Вставить("ИдентифицирующийДокумент", Новый Структура);
	СтруктураИнЛицо.ИдентифицирующийДокумент.Вставить("Вид",        "");
	СтруктураИнЛицо.ИдентифицирующийДокумент.Вставить("Номер",      "");
	СтруктураИнЛицо.ИдентифицирующийДокумент.Вставить("ДатаВыдачи", "");
	
	Возврат СтруктураИнЛицо;
	
КонецФункции

Функция КонтактыЮрЛица(КонтактныеДанные, Роль) Экспорт
			
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Роль);  
	Отбор.Вставить("Тип",  ЗначениеМетаданных("ТипыКонтактнойИнформации.Телефон"));
		
	// Телефоны 
	МассивТелефонов = Новый Массив; 	
	НайденныеСтроки = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").НайтиСтрокиУниверсально(КонтактныеДанные, Отбор);
	
	Для Каждого Строка Из НайденныеСтроки Цикл   
		
		Если Не ЗначениеЗаполнено(Строка.Значение) Тогда 
			Продолжить;
		КонецЕсли;
		
		СтруктураТелефон = Новый Структура;
		СтруктураТелефон.Вставить("Значение", Строка.Значение);
		
		МассивТелефонов.Добавить(СтруктураТелефон);
		
	КонецЦикла;	
	
	МассивЭлектроннаяПочта = Новый Массив;
	Отбор.Вставить("Тип",  ЗначениеМетаданных("ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	
	НайденныеСтроки = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").НайтиСтрокиУниверсально(КонтактныеДанные, Отбор);
	Для Каждого Строка Из НайденныеСтроки Цикл 
		
		Если Не ЗначениеЗаполнено(Строка.Значение) Тогда 
			Продолжить;
		КонецЕсли;
		
		СтруктураЭлектроннаяПочта = Новый Структура;
		СтруктураЭлектроннаяПочта.Вставить("Значение", Строка.Значение);
		
		МассивЭлектроннаяПочта.Добавить(СтруктураЭлектроннаяПочта);
		
	КонецЦикла;
	
	Структура = Новый Структура;
	Структура.Вставить("Телефоны",         МассивТелефонов);
	Структура.Вставить("ЭлектроннаяПочта", МассивЭлектроннаяПочта);
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти // ЮрЛицаИнтерфейс

#Область ГрузИнтерфейс

Функция ШаблонПараметровГруза() Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("КоличествоПаллет",   0);
	РезультатФункции.Вставить("КоличествоМест",     0);
	РезультатФункции.Вставить("Плотность",          0);
	РезультатФункции.Вставить("Объем",              0);
    РезультатФункции.Вставить("Высота",             0);
	РезультатФункции.Вставить("Длина",              0);
	РезультатФункции.Вставить("Ширина",             0);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьОпасныйГрузДляВыгрузки(ОпасныеГрузыИзДокумента, ОпасныеГрузы, ЭтоВО) Экспорт
	
	Для Каждого Опасный Из ОпасныеГрузыИзДокумента Цикл 
		
		ОпасныйСтруктура = ШаблонОпасногоГруза();
		ЗаполнитьЗначенияСвойств(ОпасныйСтруктура, Опасный);
		
		ОпасныйСтруктура.НаименованиеТехническое       = Опасный.ТехническоеНаименование;
		ОпасныйСтруктура.НаименованиеОтгрузочное       = Опасный.Наименование;
		Если ЭтоВО Тогда
			ОпасныйСтруктура.ВзрывчатыйМассаНетто          = Опасный.МассаНеттоВзрывчатый;
			ОпасныйСтруктура.ВзрывчатыйМассаНеттоДляВсех   = Опасный.МассаНеттоВзрывчатыйВсего;
			ОпасныйСтруктура.ПроцентныйСоставСмеси         = Опасный.ПроцентСмеси;
			ОпасныйСтруктура.ТемператураАварийная          = Опасный.АварийнаяТемпература;
			ОпасныйСтруктура.ТемператураКонтрольная        = Опасный.КонтрольнаяТемпература;
			ОпасныйСтруктура.Описание                      = Опасный.Комментарий;
			ОпасныйСтруктура.ФизХимФорма                   = Опасный.ФизИХимФорма;
			ОпасныйСтруктура.РадиоактивныйМаксАктивность   = Опасный.МаксАктивность;
			ОпасныйСтруктура.РадиоактивныйПолнаяАктивность = Опасный.ПолнаяАктивность;
			ОпасныйСтруктура.РадиоактивныйРадионуклид      = Опасный.НазваниеРадионуклида;
			ОпасныйСтруктура.УпаковкаКатегория             = Опасный.КатегорияУпаковки;
		КонецЕсли;
		
		ОпасныйСтруктура.Вставить(
			"Класс", МодульКода("Перечисления.Saby_КлассыОпасностиГрузов").КодПоКлассуОпасностиГруза(Опасный.Класс));
		ОпасныйСтруктура.Вставить(
			"УпаковкаГруппа", МодульКода("Перечисления.Saby_ГруппыУпаковки").КодПоГруппеУпаковки(Опасный.ГруппаУпаковкиЗначение));
		ОпасныйСтруктура.Вставить(
			"КодОграниченияПроездТуннеля",
			МодульКода("Перечисления.Saby_КодыОграниченийПроездаЧерезТуннели").КодПоОграничениюПроезда(
				Опасный.ОграничениеПроездаЧерезТуннели));
			
		// единичное значение опасного груза	
		Если ТипЗнч(ОпасныеГрузы) = Тип("Структура") Тогда
			ОпасныеГрузы.Вставить("ОпасныйГруз", ОпасныйСтруктура);
		Иначе 					
			ОпасныеГрузы.Добавить(ОпасныйСтруктура);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ШаблонОпасногоГруза() Экспорт
	
    ОпасныйГруз = Новый Структура;
	ОпасныйГруз.Вставить("НаименованиеТехническое");
	ОпасныйГруз.Вставить("НаименованиеОтгрузочное");
	ОпасныйГруз.Вставить("ИндексБезопасности");
    ОпасныйГруз.Вставить("ОпознавательныйЗнак");
	ОпасныйГруз.Вставить("ВзрывчатыйМассаНетто");
	ОпасныйГруз.Вставить("ВзрывчатыйМассаНеттоДляВсех");
	ОпасныйГруз.Вставить("ПроцентныйСоставСмеси");
	ОпасныйГруз.Вставить("ДатаИстеченияУдержания");
	ОпасныйГруз.Вставить("ТемператураАварийная");
	ОпасныйГруз.Вставить("ТемператураКонтрольная");
	ОпасныйГруз.Вставить("НомерООН");
	ОпасныйГруз.Вставить("Описание");
	ОпасныйГруз.Вставить("Класс");
	ОпасныйГруз.Вставить("КлассификационныйКод");
	ОпасныйГруз.Вставить("ЗнакОпасности");
	ОпасныйГруз.Вставить("КодОграниченияПроездТуннеля");
	ОпасныйГруз.Вставить("ФизХимФорма");
	ОпасныйГруз.Вставить("РадиоактивныйМаксАктивность");
	ОпасныйГруз.Вставить("РадиоактивныйПолнаяАктивность");
	ОпасныйГруз.Вставить("РадиоактивныйРадионуклид");
	ОпасныйГруз.Вставить("УпаковкаКатегория");
	ОпасныйГруз.Вставить("УпаковкаГруппа");
	ОпасныйГруз.Вставить("ТранспортныйИндекс"); 
	
	Возврат ОпасныйГруз;
	
КонецФункции

#КонецОбласти // ГрузИнтерфейс

Процедура ЗаполнитьТелефоныОтветственного(СтрокаОтветственного, СтруктураОтветственного) Экспорт
	
	Если Не ЗначениеЗаполнено(СтрокаОтветственного.Телефоны) Тогда
		Возврат;
	КонецЕсли;
	
	МассивТелефоны = ЗначениеИзСтрокиВнутр(СтрокаОтветственного.Телефоны);
				
	ТелефоныНаВыгрузку = Новый Массив;
	Для Каждого Телефон Из МассивТелефоны Цикл
		
		СтруктураТелефон = Новый Структура;
		СтруктураТелефон.Вставить("Значение", Телефон);
		ТелефоныНаВыгрузку.Добавить(СтруктураТелефон);
		
	КонецЦикла;
				
	СтруктураОтветственного.Телефон = ТелефоныНаВыгрузку;
	
КонецПроцедуры

#Область ДокументыЭПДИнтерфейс

Функция ПодстановкаДокументаПоСсылке(СсылкаНаДокумент) Экспорт
	
	МассивДокументовЭПД = Новый Массив;
	СтруктураДокументаЭПД = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").СтруктураДокументаЭПД();
	СтруктураДокументаЭПД.Ссылка = СсылкаНаДокумент;
	МассивДокументовЭПД.Добавить(СтруктураДокументаЭПД);
	
	ЗаполнитьДанныеДокументовЭПД(МассивДокументовЭПД);
	
	Возврат ПодстановкаДокумента(СтруктураДокументаЭПД);
	
КонецФункции

Функция ПодстановкаДокумента(СтруктураДокументаЭПД) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Номер",                  СтруктураДокументаЭПД.Номер);
	РезультатФункции.Вставить("Дата",                   ЗначениеДатыВремяДляВыгрузки(СтруктураДокументаЭПД.Дата, Истина));
	РезультатФункции.Вставить("Наименование",           СтруктураДокументаЭПД.Наименование);
	РезультатФункции.Вставить("Идентификатор",          СтруктураДокументаЭПД.ИД);
	РезультатФункции.Вставить("ДополнительныеСведения", СтруктураДокументаЭПД.ДопСведения);
	РезультатФункции.Вставить("Стороны",                Новый Массив);
	
	Для Каждого СтруктураЮрЛица Из СтруктураДокументаЭПД.ДанныеЮрЛиц Цикл
		
		ПодстановкаСтороны = Новый Структура;
		ПодстановкаСтороны.Вставить("Наименование", СтруктураЮрЛица.НаименованиеОрганизации);
		
		Если СтруктураЮрЛица.ЮрФизЛицо = ЗначениеМетаданных("Saby_ЮрФизЛицо.ЮрЛицо") Тогда
			
			ПодстановкаСтороны.Вставить("ЮЛ", Новый Структура);
			ПодстановкаСтороны.ЮЛ.Вставить("ИНН", СтруктураЮрЛица.ИНН);
			
		ИначеЕсли СтруктураЮрЛица.ЮрФизЛицо = ЗначениеМетаданных("Saby_ЮрФизЛицо.ЮрЛицоНеРезидент") Тогда
			
			СтруктураИнЛица = МодульКода("Saby_ТНВыгрузкаСервер").ШаблонИностранногоЛица();
			СтруктураИнЛица.Страна       = СокрЛП(СтруктураЮрЛица.СтранаРегистрации);
			СтруктураИнЛица.Наименование = СтруктураЮрЛица.НаименованиеОрганизации;
			
			ПодстановкаСтороны.Вставить("ИностранноеЛицо", СтруктураИнЛица);				
			
		Иначе  
			
			ПодстановкаСтороны.Вставить("ФЛ", Новый Структура);
			ПодстановкаСтороны.ФЛ.Вставить("ИНН", СтруктураЮрЛица.ИНН);
			
		КонецЕсли;
		
		РезультатФункции.Стороны.Добавить(ПодстановкаСтороны);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьДанныеДокументовЭПД(МассивДокументовЭПД) Экспорт
	
	Если МассивДокументовЭПД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСсылок = Новый ТаблицаЗначений;
	ТаблицаСсылок.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.Saby_ДокументыЭПД"));
	ТаблицаСсылок.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	
	Для Индекс = 0 По МассивДокументовЭПД.ВГраница() Цикл
		СтрокаТаблицы = ТаблицаСсылок.Добавить();
		СтрокаТаблицы.Ссылка = МассивДокументовЭПД[Индекс].Ссылка;
		СтрокаТаблицы.Индекс = Индекс;
	КонецЦикла;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСсылок.Ссылка КАК Ссылка,
	|	ТаблицаСсылок.Индекс КАК Индекс
	|ПОМЕСТИТЬ СсылкиНаДокументы
	|ИЗ
	|	&ТаблицаСсылок КАК ТаблицаСсылок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СсылкиНаДокументы.Ссылка КАК Ссылка,
	|	СсылкиНаДокументы.Индекс КАК Индекс,
	|	Saby_ДокументыЭПД.Наименование КАК Наименование,
	|	Saby_ДокументыЭПД.Тип КАК Тип,
	|	Saby_ДокументыЭПД.Номер КАК Номер,
	|	Saby_ДокументыЭПД.Дата КАК Дата,
	|	Saby_ДокументыЭПД.ИД КАК ИД,
	|	Saby_ДокументыЭПД.ДопСведения КАК ДопСведения,
	|	Saby_ДокументыЭПД.ДанныеЮрЛиц.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Сторона КАК Сторона,
	|		Роль КАК Роль,
	|		ИНН КАК ИНН,
	|		КПП КАК КПП,
	|		ОГРН КАК ОГРН,
	|		ЮрФизЛицо КАК ЮрФизЛицо,
	|		СтруктураФИО КАК СтруктураФИО,
	|		Адрес КАК Адрес,
	|		АдресСтруктура КАК АдресСтруктура,
	|		СтранаРегистрации КАК СтранаРегистрации,
	|		КодФилиала КАК КодФилиала,
	|		НаименованиеОрганизации КАК НаименованиеОрганизации,
	|		КлючСтроки КАК КлючСтроки
	|	) КАК ДанныеЮрЛиц,
	|	НЕ Saby_ДокументыЭПД.Ссылка ЕСТЬ NULL КАК Заполнена
	|ИЗ
	|	СсылкиНаДокументы КАК СсылкиНаДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Saby_ДокументыЭПД КАК Saby_ДокументыЭПД
	|		ПО СсылкиНаДокументы.Ссылка = Saby_ДокументыЭПД.Ссылка";
	
	ЗапросДанных.УстановитьПараметр("ТаблицаСсылок", ТаблицаСсылок);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		
		СтруктураДокументаЭПД = МассивДокументовЭПД[ВыборкаДанных.Индекс];
		СтруктураДокументаЭПД.Заполнена = ВыборкаДанных.Заполнена;
		Если Не СтруктураДокументаЭПД.Заполнена Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураДокументаЭПД, ВыборкаДанных, , "ДанныеЮрЛиц");
		
		ВыборкаСторон = ВыборкаДанных.ДанныеЮрЛиц.Выбрать();
		Пока ВыборкаСторон.Следующий() Цикл
			СтруктураЮрЛица = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ШаблонДанныхЮрЛица();
			ЗаполнитьЗначенияСвойств(СтруктураЮрЛица, ВыборкаСторон);
			СтруктураДокументаЭПД.ДанныеЮрЛиц.Добавить(СтруктураЮрЛица);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ДокументыЭПДИнтерфейс

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Процедура ВыгрузитьДокумент(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат)
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	МодульТНОбщегоНазначенияСервер.ЗаполнитьПараметрыВыгрузки(ПараметрыВыгрузки);
	
	ЗаполнитьСтруктуруДокументаСПроверкойФЛК(ПараметрыВыгрузки, Результат);
		
	Если Не ЗначениеЗаполнено(ПараметрыВыгрузки.СтруктураДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВыгрузкаНаКлиенте Тогда
		Результат.Выполнение.НаКлиенте = Истина;
		
		ОбщиеПараметрыВыгрузки.ОбъектОбработки = Неопределено;
		ОбщиеПараметрыВыгрузки.ТранспортБлокли = Неопределено;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПараметрыВыгрузки",      ПараметрыВыгрузки);
		СтруктураПараметров.Вставить("ОбщиеПараметрыВыгрузки", ОбщиеПараметрыВыгрузки);
		
		Результат.Выполнение.Параметры.Добавить(СтруктураПараметров);
	Иначе
		ВыполнитьВыгрузку(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат);
	КонецЕсли;
	
	Если Не ПараметрыВыгрузки.ОтрицательныйПереход И Не ПараметрыВыгрузки.ДинамическийТитул Тогда
				
		ПараметрыСтатус = МодульТНОбщегоНазначенияСервер.ПараметрыЗаписиРегистраСостояний();
		ПараметрыСтатус.ИД           = ПараметрыВыгрузки.ИдентификаторСБИС;
		ПараметрыСтатус.АктивныйЭтап = ПараметрыВыгрузки.Этап;
		ПараметрыСтатус.Ссылка       = ПараметрыВыгрузки.Ссылка;
		
		МодульТНОбщегоНазначенияСервер.ОбновитьДанныеСостояния(ПараметрыСтатус);
		
	КонецЕсли;
	
КонецПроцедуры

#Область Транспорт

Функция СтрокаАвтотранспорта(ТранспортныеСредства)
	
	РезультатФункции = Неопределено;
	
	Если Не ЗначениеЗаполнено(ТранспортныеСредства) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Автомобиль = ЗначениеМетаданных("Saby_ВидыТС.Автомобиль");
	
	Для Каждого СтрокаТранспорта Из ТранспортныеСредства Цикл
		
		Если СтрокаТранспорта.Вид <> Автомобиль Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатФункции = СтрокаТранспорта;
		
		Прервать;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция РеквизитыТранспортногоСредства(ТС)
	
	// ToDo: 1 общий запрос данных по всем ТС
	
	СсылкаТС = Справочники.ТранспортныеСредства.СоздатьЭлемент();
	Если МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ЕстьРеквизитИлиСвойство(СсылкаТС, "РегистрационныйЗнак") Тогда
		ИмяРеквизитаРегЗнак = "РегистрационныйЗнак";
	Иначе 
		ИмяРеквизитаРегЗнак = "Код";
	КонецЕсли;
	
	Если ТипЗнч(СсылкаТС.Тип) = Тип("Строка") Тогда
		ИмяРеквизитаТип = "Тип";
	Иначе 
		ИмяРеквизитаТип = "Тип.Наименование";
	КонецЕсли;	
	
	Массив = Новый Массив; 
	Массив.Добавить(ИмяРеквизитаРегЗнак); // РегНомер
	Массив.Добавить(ИмяРеквизитаТип);
	Массив.Добавить("Марка"); 
	Массив.Добавить("ГрузоподъемностьВТоннах");
	Массив.Добавить("ВместимостьВКубическихМетрах");
	Массив.Добавить("НомерСТС");
	Массив.Добавить("VIN"); 
	Массив.Добавить("ТипВладения");
	Массив.Добавить("ДокументыПодтверждающиеВладение");
	
	Результат = МодульКода("Saby_ТНОбщегоНазначенияСервер").ЗначенияРеквизитовОбъекта(ТС, Массив);
	Результат.Вставить("ИмяРеквизитаРегЗнак", ИмяРеквизитаРегЗнак);
	Результат.Вставить("ИмяРеквизитаТип", ИмяРеквизитаТип);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеДляПодстановокТС(ДляПутевогоЛиста)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("СтруктураТС",       Новый Структура);
	РезультатФункции.Вставить("СоответствиеПолей", Новый Соответствие);
	
	РезультатФункции.СтруктураТС.Вставить("UUID",     "");
	РезультатФункции.СтруктураТС.Вставить("РегНомер", "");
	РезультатФункции.СтруктураТС.Вставить("Тип",      "");
	РезультатФункции.СтруктураТС.Вставить("Марка",    "");
	
	Если ДляПутевогоЛиста Тогда
		РезультатФункции.СтруктураТС.Вставить("Модель",           "");
		РезультатФункции.СтруктураТС.Вставить("ИнвентарныйНомер", "");
	Иначе
		РезультатФункции.СтруктураТС.Вставить("НомерСТС",         "");
		РезультатФункции.СтруктураТС.Вставить("VIN",              "");
		РезультатФункции.СтруктураТС.Вставить("ТипВладения",      "");
		РезультатФункции.СтруктураТС.Вставить("Грузоподъемность", 0);
		РезультатФункции.СтруктураТС.Вставить("Вместимость",      0);
	КонецЕсли;
	
	РезультатФункции.СоответствиеПолей.Вставить("РегНомер", "РегистрационныйНомер");
	РезультатФункции.СоответствиеПолей.Вставить("VIN",      "ВИН");
	РезультатФункции.СоответствиеПолей.Вставить("UUID",     "Идентификатор");
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДобавитьПодстановкиОснованийВладения(ДанныеТитула, СтруктураТС, СтрокаТС)
	
	Если Не МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ЕстьРеквизитИлиСвойство(СтрокаТС, "ОснованияВладения")
		Или Не ЗначениеЗаполнено(СтрокаТС.ОснованияВладения) Тогда
		Возврат;
	КонецЕсли;
		
	МассивДокументовЭПД = Новый Массив;
	
	Если ДанныеТитула.ЭтоВО Тогда 
		
		// сделаем отбор строк документов ЭПД по ключу ТС
		Отбор = Новый Структура;
		Отбор.Вставить("КлючСтроки_ТранспортногоСредства", СтрокаТС.КлючСтроки); 
		
		НайденныеСтроки = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").НайтиСтрокиУниверсально(ДанныеТитула.ДокументыЭПД, Отбор);
		Для Каждого СтрокаЭПД Из НайденныеСтроки Цикл 
			МассивДокументовЭПД.Добавить(СтрокаЭПД);
		КонецЦикла;	
		
	Иначе
		
		// Идентификаторы ссылок на документы ЭПД
		МассивОснованийВладения = ЗначениеИзСтрокиВнутр(СтрокаТС.ОснованияВладения); 
		
		Для Каждого СсылкаНаДокументЭПД Из МассивОснованийВладения Цикл
			СтруктураДокументаЭПД = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").СтруктураДокументаЭПД();
			СтруктураДокументаЭПД.Ссылка = СсылкаНаДокументЭПД.Ссылка;
			МассивДокументовЭПД.Добавить(СтруктураДокументаЭПД);
		КонецЦикла;
		
		Если МассивДокументовЭПД.Количество() > 0 И ТипЗнч(МассивДокументовЭПД[0].Тип) <> Тип("Строка") Тогда
			ЗаполнитьДанныеДокументовЭПД(МассивДокументовЭПД);
		КонецЕсли;
		
	КонецЕсли;
		
	СтруктураТС.Вставить("ОснованиеВладения", Новый Массив);
	Для Каждого СтруктураДокументаЭПД Из МассивДокументовЭПД Цикл
		СтруктураТС.ОснованиеВладения.Добавить(ПодстановкаДокумента(СтруктураДокументаЭПД));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Транспорт

#Область Водители

Функция СтруктураПодстановкиВодителя()
	
	ДанныеВодителя = Новый Структура;
	
	ДанныеВодителя.Вставить("Имя",          "");
	ДанныеВодителя.Вставить("Фамилия",      "");
	ДанныеВодителя.Вставить("Отчество",     "");
	ДанныеВодителя.Вставить("ИНН",          "");
	ДанныеВодителя.Вставить("СведенияПЭП" , "");
	ДанныеВодителя.Вставить("ПутевойЛист",  Новый Структура); // документ ТрН
	ДанныеВодителя.Вставить("Телефон",      Новый Массив);
	
	ДанныеВодителя.Вставить("ВУ", Новый Структура);
	ДанныеВодителя.ВУ.Вставить("Номер",      "");
	ДанныеВодителя.ВУ.Вставить("Серия",      "");
	ДанныеВодителя.ВУ.Вставить("ДатаВыдачи", "");
	
	Возврат ДанныеВодителя;
	
КонецФункции

Функция ПодстановкиПутевыхЛистов(ПутевыеЛисты, ДокументыЭПД)
	 	
	РезультатФункции = Новый Соответствие;	
	Если ПутевыеЛисты.Количество() = 0 Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
    ДокументыЭПДВодителей = ПутевыеЛистыВодителей(ПутевыеЛисты, ДокументыЭПД);
	
	Если ТипЗнч(ДокументыЭПДВодителей[0].Ссылка) <> Тип("Строка") Тогда
		ЗаполнитьДанныеДокументовЭПД(ДокументыЭПДВодителей);
	КонецЕсли;
	
	Для Каждого СтруктураДокументаЭПД Из ДокументыЭПДВодителей Цикл
		РезультатФункции.Вставить(СтруктураДокументаЭПД.Ссылка, ПодстановкаДокумента(СтруктураДокументаЭПД));
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПутевыеЛистыВодителей(ПутевыеЛисты, ДокументыЭПД)
	
	ДокументыЭПДВодителей = Новый Массив;
	
	Для Каждого СтрокаЛисты Из ПутевыеЛисты Цикл
		
		СтруктураДокументаЭПД = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").СтруктураДокументаЭПД();
		
		Если ЗначениеЗаполнено(ДокументыЭПД)
			И ЗначениеЗаполнено(СтрокаЛисты.КлючСтроки_ДокументыЭПД) Тогда
			
			// найдем связанную строку ЭПД для выгрузки данных	
		    СтрокаЭПД = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ПоискДокументаЭПДПоКлючу(
							ДокументыЭПД, СтрокаЛисты.КлючСтроки_ДокументыЭПД);
			
			ЗаполнитьЗначенияСвойств(СтруктураДокументаЭПД, СтрокаЭПД);
			
		Иначе	
			ЗаполнитьЗначенияСвойств(СтруктураДокументаЭПД, СтрокаЛисты);
		КонецЕсли;	
		
		СтруктураДокументаЭПД.Вставить("Ссылка", СтрокаЛисты.Документ);
		
		ДокументыЭПДВодителей.Добавить(СтруктураДокументаЭПД);
		
	КонецЦикла;
	
	Возврат ДокументыЭПДВодителей;
	
КонецФункции

Процедура ЗаполнитьПутевыеЛистыВодителя(ПодстановкаВодителя, ПодстановкиПутевыхЛистов, СтрокаВодителя, ПутевыеЛисты)
	
	Отбор = Новый Структура;
	Отбор.Вставить("КлючСтроки_ОтветственныеЛица", СтрокаВодителя.КлючСтроки);
	
	НайденныеПутевыеЛисты = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").НайтиСтрокиУниверсально(ПутевыеЛисты, Отбор);
	Если НайденныеПутевыеЛисты.Количество() Тогда
		
		МассивПутевыхЛистов = Новый Массив;
		Для Каждого ПутевойЛист Из НайденныеПутевыеЛисты Цикл
			МассивПутевыхЛистов.Добавить(ПодстановкиПутевыхЛистов.Получить(ПутевойЛист.Документ));
		КонецЦикла;
		
		ПодстановкаВодителя.Вставить("ПутевойЛист", МассивПутевыхЛистов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Водители

#Область ЮрЛица

Функция ШаблонЮЛ()
	
	СтруктураЮЛ = Новый Структура;
		
	Наименование = Новый Структура;
	Наименование.Вставить("Полное", "");
	
	СтруктураЮЛ.Вставить("Название", Наименование);
	
	СтруктураЮЛ.Вставить("ИНН", "");
	СтруктураЮЛ.Вставить("КПП", "");
	
	// может перейдем в дальнейшем на него по всем форматам
	СтруктураЮЛ.Вставить("Наименование", "");
	
	Возврат СтруктураЮЛ;
	
КонецФункции

Функция ШаблонФизЛицо()
	
	СтруктураФизЛицо = Новый Структура;
	СтруктураФизЛицо.Вставить("ИНН",           "");
	СтруктураФизЛицо.Вставить("ИныеСведения",  "");
	СтруктураФизЛицо.Вставить("Фамилия",       "");
	СтруктураФизЛицо.Вставить("Имя",           "");
	СтруктураФизЛицо.Вставить("Отчество",      "");
	
	Возврат СтруктураФизЛицо;
	
КонецФункции

Функция ШаблонЮрЛицаИП()
	
	// ИП
	СтруктураИП = Новый Структура;
	СтруктураИП.Вставить("ИНН",                "");
	СтруктураИП.Вставить("ОГРН",               "");
	СтруктураИП.Вставить("ИныеСведения",       "");
	СтруктураИП.Вставить("Фамилия",            "");
	СтруктураИП.Вставить("Имя",                "");
	СтруктураИП.Вставить("Отчество",           "");

	Возврат СтруктураИП;
	
КонецФункции

Функция ШаблонЮрАдрес()
	
	Структура = Новый Структура;
	Структура.Вставить("Юридический", МодульКода("Saby_ТНОбщегоНазначенияСервер").ОбщийШаблонАдреса(Истина));
	
	Возврат Структура;
		
КонецФункции

Процедура ДобавитьКодФилиала(СтруктураЮрЛица, СтрокаДанные, ЗаполнитьКодФилиала)
	
	Если Не ЗаполнитьКодФилиала Или Не ЗначениеЗаполнено(СтрокаДанные.КодФилиала) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЮрЛица.Вставить("КодФилиала", СтрокаДанные.КодФилиала);
	
КонецПроцедуры

Процедура ЗаполнитьФИО(СтруктураДанных, СтрокаДанные, СтруктураЮрЛица, ЭтоИП)
	
	Если Не ЗначениеЗаполнено(СтрокаДанные.СтруктураФИО) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураФИО = ЗначениеИзСтрокиВнутр(СтрокаДанные.СтруктураФИО);
	ЗаполнитьЗначенияСвойств(СтруктураЮрЛица, СтруктураФИО);
	
	Если ЭтоИП Тогда
		Префикс = "ИП ";
	Иначе
		Префикс = "";
	КонецЕсли;
	
	СтруктураДанных.Название.Полное = Префикс + МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ПредставлениеФИО(СтруктураФИО);
	
КонецПроцедуры

#КонецОбласти // ЮрЛица

Функция ОписаниеТипаСсылки(СсылкаНаОбъект)
	
	ИмяТипа = СсылкаНаОбъект.Метаданные().ПолноеИмя();
	ИмяТипа = СтрЗаменить(ИмяТипа, "Справочник", "СправочникСсылка");
	ИмяТипа = СтрЗаменить(ИмяТипа, "Документ", "ДокументСсылка");
	
	Возврат Новый ОписаниеТипов(ИмяТипа);
	
КонецФункции

// Выполняет выгрузку документов Эпд в регламентном задании.
//
// Параметры:
//  context_params - Структура - параметры подключения к онлайн 
//  ТипДокумента - Строка - тип документа подсистемы ЭПД
//  МассивДокументов - Массив - массив из ДокументСсылка<ДокументЭПД>
//
Процедура ВыгрузитьПоРегламенту(context_params, ТипДокумента, МассивДокументов = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(context_params) Тогда
		Возврат;
	КонецЕсли;
		
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст = 
	"ВЫБРАТЬ
	|	ДокументЭПД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ_СсылкаНаНужныйДокумент КАК ДокументЭПД
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Saby_Состояние КАК Saby_Состояние
	|		ПО ДокументЭПД.Ссылка = Saby_Состояние.Объект
	|ГДЕ
	|	ДокументЭПД.Направление = &НаправлениеИсходящий
	|	И НЕ ДокументЭПД.ПометкаУдаления
	|	И ЕСТЬNULL(Saby_Состояние.UID, """") = """"
	|	И ДокументЭПД.Ссылка В(&МассивДокументов)";
	
	ЗапросДанных.УстановитьПараметр("НаправлениеИсходящий", ЗначениеМетаданных("Saby_Направление.Исходящий"));
	
	ЗапросДанных.Текст = СтрЗаменить(ЗапросДанных.Текст, "_СсылкаНаНужныйДокумент", "." + ТипДокумента);
	
	Если МассивДокументов <> Неопределено Тогда
		ЗапросДанных.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Иначе
		ЗапросДанных.Текст = СтрЗаменить(
			ЗапросДанных.Текст,
			"И ДокументЭПД.Ссылка В(&МассивДокументов)",
			"");
	КонецЕсли;
		
	РезультатЗапроса = ЗапросДанных.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДанных = РезультатЗапроса.Выбрать();
	
	ДанныеДляВыгрузки = Новый Массив;
	Пока ВыборкаДанных.Следующий() Цикл
		ПараметрыКоманды = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ПараметрыВыгрузки(ВыборкаДанных.Ссылка);
		ДанныеДляВыгрузки.Добавить(ПараметрыКоманды);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	
	МодульКода("Saby_ТНВыгрузкаСервер").РезультатВыгрузкиДокументов(ДанныеДляВыгрузки, context_params, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область include_etrn_base_CommonModule_ТНВыгрузкаСервер_ВзаимодействиеСОнлайном
#КонецОбласти // include_etrn_base_CommonModule_ТНВыгрузкаСервер_ВзаимодействиеСОнлайном

#Область include_etrn_base_CommonModule_ОпределениеМодуляКода
#КонецОбласти // include_etrn_base_CommonModule_ОпределениеМодуляКода

#Область include_etrn_base_CommonModule_ОпределениеМодуляКодаКлиентСервер
#КонецОбласти // include_etrn_base_CommonModule_ОпределениеМодуляКодаКлиентСервер

#Область include_etrn_base_CommonModule_ЗначениеМетаданных
#КонецОбласти // include_etrn_base_CommonModule_ЗначениеМетаданных

#Область include_etrn_base_CommonModule_ВыполнениеФункцииНаСервере
#КонецОбласти // include_etrn_base_CommonModule_ВыполнениеФункцииНаСервере

#Область include_etrn_base_CommonModule_ОбъектОбработки
#КонецОбласти // include_etrn_base_CommonModule_ОбъектОбработки

