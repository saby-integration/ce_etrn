
#Область ПрограммныйИнтерфейс

#Область Универсальные_методы

// Возвращает синоним метаданных
//
// Возвращаемое значение:
//   Строка - синоним метаданных
//
Функция ИмяКонфигурации() Экспорт
	Возврат Метаданные.Синоним;
КонецФункции

// Запускает выполнение функции в фоновом задании, если это возможно.
//
// Параметры:
//  СтруктураПараметров - Структура - все параметры, необходимые для запуска функции через длительную операцию.
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы, 
//    во временное хранилище которой надо поместить результат выполнения процедуры.
//
// Возвращаемое значение:
//   Структура - см. ДлительныеОперации.ВыполнитьФункцию
//
Функция ДлительнаяОперация(СтруктураПараметров, УникальныйИдентификаторФормы) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификаторФормы);
	
	ИмяКоманды = СтруктураПараметров.ИмяКоманды;
	
	Наименование = НаименованиеДлительнойОперации(ИмяКоманды);
	
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Наименование;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	
	Если ИмяКоманды = "ВыгрузитьВСбис" Или ИмяКоманды = "ЗагрузитьВСбисДинамическийТитул" Тогда
		
		ИмяФункции = "Saby_ТНВыгрузкаСервер.РезультатВыгрузкиДокументов";
		
		Возврат ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполнения,
			ИмяФункции, 
			СтруктураПараметров.МассивДокументов,
			СтруктураПараметров.context_params,
			СтруктураПараметров.ДопПараметры);
			
	ИначеЕсли ИмяКоманды = "ОбновитьДокументИзСбис" Тогда
		
		ИмяФункции = "Saby_ТНЗагрузкаСервер.ЗагрузкаДокументовПоИзменениям";
		
		Возврат ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполнения,
			ИмяФункции, 
			СтруктураПараметров);
			
	ИначеЕсли ИмяКоманды = "ПрочитатьДокумент" Или ИмяКоманды = "ОбновитьАктивныйЭтап" Тогда
		
		ИмяФункции = "Saby_ТНЗагрузкаСервер.РезультатЗагрузкиДокументов";
		
		Возврат ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполнения,
			ИмяФункции,  
			СтруктураПараметров.МассивДокументов,
			СтруктураПараметров.context_params,
			СтруктураПараметров.ДопПараметры);
			
	ИначеЕсли ИмяКоманды = "АктуальныйСтатусВерсии" Тогда 		
					
		ИмяФункции = "Saby_ТНОбщегоНазначенияСервер.СтатусВерсииРасширения";
		
		Возврат ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполнения, 
			ИмяФункции);
						
	Иначе 
		
		Возврат Неопределено;
			
	КонецЕсли;
		
КонецФункции

// Преобразует исходную строку в число без вызова исключений.
//
// Параметры:
//   Значение - Строка - строка, которую необходимо привести к числу.
//                       Например, "10", "+10", "010", вернет 10;
//                                 "(10)", "-10",вернет -10;
//                                 "10,2", "10.2",вернет 10.2;
//                                 "000", " ", "",вернет 0;
//                                 "10текст", вернет Неопределено.
//
// Возвращаемое значение:
//   Число, Неопределено - полученное число, либо Неопределено, если строка не является числом.
//
Функция ЧислоИзСтроки(Значение) Экспорт
	
	Значение  = СтрЗаменить(Значение, " ", "");
	Если СтрНачинаетсяС(Значение, "(") Тогда
		Значение = СтрЗаменить(Значение, "(", "-");
		Значение = СтрЗаменить(Значение, ")", "");
	КонецЕсли;
	
	СтрокаБезНулей = СтрЗаменить(Значение, "0", "");
	Если ПустаяСтрока(СтрокаБезНулей) Или СтрокаБезНулей = "-" Тогда
		Возврат 0;
	КонецЕсли;
	
	ТипЧисло  = Новый ОписаниеТипов("Число");
	Результат = ТипЧисло.ПривестиЗначение(Значение);
	
	Возврат ?(Результат <> 0 И Не ПустаяСтрока(СтрокаБезНулей), Результат, Неопределено);
	
КонецФункции

// Получает значение перечисления ЮрФизЛицо универсально для всех конфигураций
//
// Параметры:
//  ИмяЗначения - Строка - имя значения в перечислении
//
// Возвращаемое значение:
//   ПеречислениеСсылка - значение перечисления
//
Функция ЗначениеЮрФизЛицаКонфигурации(ИмяЗначения) Экспорт

	НетЮрФизЛица = Метаданные.Перечисления.Найти("ЮрФизЛицо") = Неопределено;
	Если НетЮрФизЛица Тогда
		
		// "Бухгалтерия предприятия, редакция 3.0"
		ИмяПеречисления = "ЮридическоеФизическоеЛицо";
		Если ИмяЗначения = "ЮрЛицо" Тогда 
			ИмяЗначения = "ЮридическоеЛицо";
		Иначе
			ИмяЗначения = "ФизическоеЛицо";
		КонецЕсли;
			
	Иначе
		ИмяПеречисления = "ЮрФизЛицо";
	КонецЕсли;
	
	Значение = Перечисления[ИмяПеречисления][ИмяЗначения];
	
	Возврат Значение;

КонецФункции

// Получает имя метаданных документа в конфигурации
//
// Параметры:
//  ДокументСсылка  - ДокументСсылка - ссылка на любой документ конфигурации
//
// Возвращаемое значение:
//   Строка - имя метаданных документа в конфигурации
//
Функция ИмяМетаданныхДокумента(ДокументСсылка) Экспорт
	
	ТипЗначения = ТипЗнч(ДокументСсылка);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		 ИмяДокумента = ДокументСсылка.Метаданные().Имя; 
	Иначе 
		 ИмяДокумента = "";
	КонецЕсли;
	
	Возврат ИмяДокумента;
	
КонецФункции

// Преобразует строку таблицы значений в структуру.
// Свойства структуры и их значения совпадают с колонками переданной строки.
//
// Параметры:
//  СтрокаТаблицыЗначений - СтрокаТаблицыЗначений - строка для преобразования
//  МассивКолонокИсключений - Массив - колонки для исключения
//
// Возвращаемое значение:
//  Структура - преобразованная строка таблицы значений.
//
Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений, МассивКолонокИсключений = Неопределено) Экспорт
	
	Структура = Новый Структура;
	Для Каждого Колонка Из СтрокаТаблицыЗначений.Владелец().Колонки Цикл 
		
		Если МассивКолонокИсключений <> Неопределено Тогда
			
			Если МассивКолонокИсключений.Найти(Колонка.Имя) = Неопределено Тогда 
				Структура.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
			КонецЕсли;
				
		Иначе 	
			Структура.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

// Записывает информацию в журнал регистрации с уровнем Ошибка
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - ссылка к которой будет привязано сообщение
//  Описание - Строка - имя события журнала регистрации
//  Текст - Строка - комментарий журнала регистрации
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(Ссылка, Описание, Текст) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(
		Описание,
		УровеньЖурналаРегистрации.Ошибка,
		, // ОбъектМетаданных - ссылка на элемент справичника или документ
		Ссылка,
		Текст,
    	РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
КонецПроцедуры

// Десериализация значений из строки в значение
// Параметры:
//	Строка - Строка - сереиализованное значение
//
// Возвращаемое значение:
//	Значение - значение любого типа, полученное после десериализации
//
Функция ДесериализоватьЗначение(Знач Строка) Экспорт
	
	Если Не ЗначениеЗаполнено(Строка) Тогда 
		Значение = Новый Структура;
	Иначе 	
	    Значение = ЗначениеИзСтрокиВнутр(Строка);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Сериализация произвольных значений
// Параметры:
//	Значение - ЛюбойТип - значение для сериализации
//
// Возвращаемое значение:
//	Строка - сериализованное значение
// 
Функция СериализоватьЗначение(Знач Значение) Экспорт
	
	Если Не ЗначениеЗаполнено(Значение) Тогда 
		СтрокаЗначения = "";
	Иначе 
		СтрокаЗначения = ЗначениеВСтрокуВнутр(Значение);
	КонецЕсли;
			
	Возврат СтрокаЗначения;
		
КонецФункции

// Заполнение реквизитов формы из источника
// Параметры: 
//	Форма - ФормаКлиентскогоПриложения - форма для заполнения реквизитов
//  ДанныеЗаполнения - Структура - данные для заполнения реквизитов
//  Исключения - Массив - реквизиты исключения
//
Процедура ЗаполнитьРеквизитыФормы(Форма, ДанныеЗаполнения, Исключения = Неопределено) Экспорт	
	
	Если Исключения = Неопределено Тогда
		Исключения = Новый Массив;
	КонецЕсли;	
	
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	ТипТаблицаЗначений = Новый ОписаниеТипов("ТаблицаЗначений");	
		
	Для Каждого РеквизитФормы Из РеквизитыФормы Цикл 		
			
		Если ДанныеЗаполнения.Свойство(РеквизитФормы.Имя) Тогда
			
			Если Исключения.Найти(РеквизитФормы.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеИсточник = ДанныеЗаполнения[РеквизитФормы.Имя];	
			Если РеквизитФормы.ТипЗначения = ТипТаблицаЗначений Тогда 
				ЗаполнитьТаблицуЗначений(Форма, ДанныеЗаполнения, РеквизитФормы, ЗначениеИсточник);								
			Иначе
				Форма[РеквизитФормы.Имя] = ЗначениеИсточник;
			КонецЕсли;
			
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

// Очистка значений всех реквизитов формы
// Параметры: 
//	Форма - ФормаКлиентскогоПриложения - форма для очистки реквизитов
//  РеквизитыИсключения - Массив - реквизиты для исключения очистки
//
Процедура ОчиститьРеквизитыФормы(Форма, РеквизитыИсключения = Неопределено) Экспорт
	
	Если РеквизитыИсключения = Неопределено Тогда 
		РеквизитыИсключения = Новый Массив;
	КонецЕсли;
	
	Для Каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл
		Если РеквизитыИсключения.Найти(РеквизитФормы.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Форма[РеквизитФормы.Имя]) = Тип("ДанныеФормыКоллекция") Тогда
			Форма[РеквизитФормы.Имя].Очистить();
		Иначе
			Форма[РеквизитФормы.Имя] = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Очистка указанных реквизитов объекта
// Параметры:
// 	ОбъектОчистки - Объект - объект для очистки, может быть документ или справочник  
//	РеквизитыДляОчистки - Массив - реквизиты объекта для очистки 
//
Процедура ОчисткаРеквизитовОбъекта(ОбъектОчистки, РеквизитыДляОчистки) Экспорт
		
	Если Не ЗначениеЗаполнено(РеквизитыДляОчистки) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяРеквизита Из РеквизитыДляОчистки Цикл
		
		ЭтоТаблица = СтрНайти(ТипЗнч(ОбъектОчистки[ИмяРеквизита]), "табличная часть"); 
		
		Если ЗначениеЗаполнено(ЭтоТаблица) Тогда
			ОбъектОчистки[ИмяРеквизита].Очистить();
		Иначе
			ОбъектОчистки[ИмяРеквизита] = "";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает новую структуру, где присутствуют только заполненные значения
//
// Параметры:
//  ИсходнаяСтруктура - Структура - структура для исключения пустых значений
//
// Возвращаемое значение:
//   Структура - новая структура без пустых вложений
//
Функция СтруктураБезПустыхЗначений(ИсходнаяСтруктура) Экспорт
	
	РезультатФункции = Новый Структура;
	
	Для Каждого КлючЗначение Из ИсходнаяСтруктура Цикл
		Если ЗначениеЗаполнено(КлючЗначение.Значение)
			Или ТипЗнч(КлючЗначение.Значение) = Тип("Массив") Тогда
			РезультатФункции.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Удаление свойств из структуры
// 
// Параметры:
//  Структура - Структура - структура из которой требуется удалить свойства 
//  Элементы - Массив - элементы для удаления
//
Процедура УдалитьСвойстваИзСтруктуры(Структура, Элементы) Экспорт
	
	Для Каждого ЭлементМассива Из Элементы Цикл
		Если Структура.Свойство(ЭлементМассива) Тогда
			Структура.Удалить(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти // Универсальные_методы

#Область КонтактнаяИнформация

// Преобразует контактную информацию из формата стандартной контактной информации в формат обмена в виде JSON.
//
// Параметры:
//  ЗначениеКИ - Структура - данные контактной информации из базы
//
// Возвращаемое значение:
//   Строка - JSON строка с адресом в формате, готовым для обмена.
//
Функция АдресВФорматеОбмена(ЗначениеКИ) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗначениеКИ) Тогда
		Возврат "";
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ЗначениеКИ);
	ИсходнаяСтруктура = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	СтруктураАдреса = ОбщийШаблонАдреса();
	СтруктураАдреса.Типовой = ЗначениеКИ;
	
	ИсходнаяСтруктура.Свойство("city", 			СтруктураАдреса.Структура.Город);
	ИсходнаяСтруктура.Свойство("houseNumber", 	СтруктураАдреса.Структура.Дом);
	ИсходнаяСтруктура.Свойство("ZIPcode", 		СтруктураАдреса.Структура.Индекс);
	ИсходнаяСтруктура.Свойство("street", 		СтруктураАдреса.Структура.Улица);
	
	ОбработатьЭлементАдресаКвартиры(ИсходнаяСтруктура, СтруктураАдреса);
	
	ОбработатьЭлементАдресаЗдания(ИсходнаяСтруктура, СтруктураАдреса);
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ЗначениеКИ);
	СтруктураАдреса.Структура.КодРегиона = 		СведенияОбАдресе.КодРегиона;
	СтруктураАдреса.Структура.НаселенныйПункт = СведенияОбАдресе.НаселенныйПункт;
	СтруктураАдреса.Структура.Район = 			СведенияОбАдресе.Район;
	
	ИсходнаяСтруктура.Свойство("value", 		СтруктураАдреса.Текст);
	ИсходнаяСтруктура.Свойство("countryCode", 	СтруктураАдреса.КодСтраны);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураАдреса);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Переопределяемая процедура под свою конфигурацию
// 
// Параметры:
// 	СсылкаИлиОбъект - ДокументОбъект - ссылка или объект-владелец контактной информации
// 	ВидИлиТипКИ - СправочникСсылка.ВидыКонтактнойИнформации - отбор по виду контактной информации.
//              - ПеречислениеСсылка.ТипыКонтактнойИнформации - отбор по типу контактной информации.
//  Дата - Дата - дата среза КИ
//  ТолькоПредставление - Булево - получение только представления, без значения полей
//
// Возвращаемое значение:
//  Структура - данные КИ объекта, в зависимости от типа/вида
//
Функция КонтактнаяИнформацияОбъекта(СсылкаИлиОбъект, ВидИлиТипКИ = Неопределено,
		Дата = Неопределено, ТолькоПредставление = Ложь) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	КонтрактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		СсылкаИлиОбъект, 
		ВидИлиТипКИ, 
		Дата, 
		ТолькоПредставление);
	
	// Обработка возвращаем одиночное значение
	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("Значение",  "");
	СтруктураАдреса.Вставить("Структура", "");
	
	Если НЕ ТолькоПредставление И АдресКонтрагентаИлиОрганизации(ВидИлиТипКИ) Тогда
		
		Если КонтрактнаяИнформация.Количество() Тогда
			
			СтрокаКИ = КонтрактнаяИнформация[0];
			СтруктураАдреса.Значение  = СтрокаКИ.Представление;
			СтруктураАдреса.Структура = СтрокаКИ.Значение;
			
		КонецЕсли;
		
		Возврат СтруктураАдреса;
		
	Иначе
		Возврат КонтрактнаяИнформация;
	КонецЕсли;
	
КонецФункции

// Получает основные виды контактной информации, используемые в данной конфигурации
//
// Параметры:
//  Ссылка - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - ссылка на справочник,
//    к которому привязана контактная информация.
//
// Возвращаемое значение:
//   Структура - структура со значениями справочника ВидыКонтактнойИнформации
//
Функция ВидыКонтактнойИнформации(Ссылка) Экспорт 
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		
		ВидКИАдресЮр        = "ЮрАдресОрганизации";
		ВидТелефон          = "ТелефонОрганизации";
		ВидЭлектроннаяПочта = "EmailОрганизации";
		ВидКИАдресФакт      = "ФактАдресОрганизации";
		
	Иначе
		
		ВидКИАдресЮр   = "ЮрАдресКонтрагента";
		ВидТелефон     = "ТелефонКонтрагента";
		ВидКИАдресФакт = "ФактАдресКонтрагента";
		
		ИменаПредопределенных = Метаданные.Справочники.ВидыКонтактнойИнформации.ПолучитьИменаПредопределенных();
		Если ИменаПредопределенных.Найти("EmailКонтрагенты") <> Неопределено Тогда  
			ВидЭлектроннаяПочта = "EmailКонтрагенты"; // "Бухгалтерия предприятия, редакция 3.0"
		Иначе 
			ВидЭлектроннаяПочта = "EmailКонтрагента";
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураКИ = Новый Структура;
	СтруктураКИ.Вставить("АдресЮр",          Справочники.ВидыКонтактнойИнформации[ВидКИАдресЮр]);
	СтруктураКИ.Вставить("Телефон",          Справочники.ВидыКонтактнойИнформации[ВидТелефон]);
	СтруктураКИ.Вставить("ЭлектроннаяПочта", Справочники.ВидыКонтактнойИнформации[ВидЭлектроннаяПочта]);
	СтруктураКИ.Вставить("АдресФакт",        Справочники.ВидыКонтактнойИнформации[ВидКИАдресФакт]);
	
	Возврат СтруктураКИ;
	
КонецФункции

// Получает все варианты видов контактной информации для разных владельцев контактной информации
//
// Возвращаемое значение:
//   Массив - массив структур. Состав струкутры см. ВидыКонтактнойИнформации()
//
Функция МассивВидовКонтактнойИнформации() Экспорт
	
	РезультатФункции = Новый Массив;
	
	СтруктураВидовКИ = ВидыКонтактнойИнформации(Справочники.Организации.ПустаяСсылка());
	
	РезультатФункции.Добавить(СтруктураВидовКИ.АдресЮр);
	РезультатФункции.Добавить(СтруктураВидовКИ.Телефон);
	РезультатФункции.Добавить(СтруктураВидовКИ.ЭлектроннаяПочта);
	РезультатФункции.Добавить(СтруктураВидовКИ.АдресФакт);
	
	СтруктураВидовКИ = ВидыКонтактнойИнформации(Справочники.Контрагенты.ПустаяСсылка());
	
	РезультатФункции.Добавить(СтруктураВидовКИ.АдресЮр);
	РезультатФункции.Добавить(СтруктураВидовКИ.Телефон);
	РезультатФункции.Добавить(СтруктураВидовКИ.ЭлектроннаяПочта);
	РезультатФункции.Добавить(СтруктураВидовКИ.АдресФакт);
	
	Возврат РезультатФункции;
	
КонецФункции

// Получение значения в формате строки JSON.
//
// Параметры:
//  Данные			 - Произвольный - значение записи JSON.
//  ПараметрыЗаписи	 - ПараметрыЗаписиJSON  - параметры записи JSON.
// 
// Возвращаемое значение:
//  Строка - значение в строке JSON.
//
Функция ЗначениеВJSON(Данные, ПараметрыЗаписи = Неопределено) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#Область ДанныеЮрЛиц

// Обновляет данные юр. лиц и контактную информацию на форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, на которой выводятся данные юр. лиц
//  Роли - Строка - роли юр. лиц, разделенных запятыми, по которым осуществляется обновление.
//    Каждая рольв строке должна соответсвовать имени из перечисления Saby_РолиКонтрагентов.
//  Реквизит - Строка - имя реквизита объекта для заполнения данных
//
Процедура ОбновитьДанныеЮрЛиц(Форма, Роли, Реквизит = "") Экспорт
	
	ФормаОбъект = Saby_ТНОбщегоНазначенияКлиентСервер.ФормаОбъект(Форма);
	
	ТаблицаЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.ТаблицаЮрЛиц(Форма, Роли, ФормаОбъект, Реквизит);
	
	МассивРолей = Saby_ТНОбщегоНазначенияКлиентСервер.ВыгрузитьКолонкуЮрЛиц(ТаблицаЮрЛиц, "Роль");
	МассивЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.ВыгрузитьКолонкуЮрЛиц(ТаблицаЮрЛиц, "Ссылка");
	
	ОчиститьДанныеЮрЛицПоРолям(МассивРолей, ФормаОбъект.ДанныеЮрЛиц);
	ОчиститьДанныеЮрЛицПоРолям(МассивРолей, ФормаОбъект.КонтактныеДанные);
	
	ТаблицаКИ = КонтактнаяИнформацияИзБазы(МассивЮрЛиц);
	
	ЗаполнитьДанныеЮрЛиц(ФормаОбъект, ТаблицаЮрЛиц, ТаблицаКИ);
	ЗаполнитьКонтактныеДанные(ФормаОбъект, ТаблицаЮрЛиц, ТаблицаКИ);
	
	ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ("", ТаблицаЮрЛиц, ТаблицаКИ);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьАдресаПогрузкиДоставки(Форма, ДопПараметры);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(Форма, ДопПараметры);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьКодФилиала(Форма, ДопПараметры);
	
КонецПроцедуры

// Возвращает выборку данных юрлиц
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, на которой выводятся данные юр. лиц
//  Роли - Строка - роли юр. лиц, разделенных запятыми, по которым осуществляется обновление.
//    Каждая рольв строке должна соответсвовать имени из перечисления Saby_РолиКонтрагентов.
//  ТаблицаЮрЛиц - ТаблицаЗначений - данные по юрлицам
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса - выборка данных юрлиц
//
Функция ВыборкаДанныхЮрЛиц(Форма, Роли, ТаблицаЮрЛиц = Неопределено) Экспорт
	
	Если ТаблицаЮрЛиц = Неопределено Тогда
		ФормаОбъект = Saby_ТНОбщегоНазначенияКлиентСервер.ФормаОбъект(Форма);
		ТаблицаЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.ТаблицаЮрЛиц(Форма, Роли, ФормаОбъект);
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.ВыгрузитьКолонкуЮрЛиц(ТаблицаЮрЛиц, "Ссылка");
	
	МассивТиповСсылок = Новый Массив;
	МассивТиповСсылок.Добавить(Тип("СправочникСсылка.Организации"));
	МассивТиповСсылок.Добавить(Тип("СправочникСсылка.Контрагенты"));
	
	ОписаниеТипаРоли = Новый ОписаниеТипов("ПеречислениеСсылка.Saby_РолиКонтрагентов");
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(МассивТиповСсылок));
	ТаблицаДанных.Колонки.Добавить("Роль",   ОписаниеТипаРоли);
	
	Для Каждого СтруктураДанных Из ТаблицаЮрЛиц Цикл
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.Ссылка = СтруктураДанных.Ссылка;
		СтрокаДанных.Роль   = СтруктураДанных.Роль;
	КонецЦикла;
	
	ПолучитьДанныеЮрЛицИзБазы(МассивЮрЛиц, МенеджерВременныхТаблиц);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЮрЛиц.Ссылка КАК Ссылка,
	|	ТаблицаЮрЛиц.Роль КАК Роль
	|ПОМЕСТИТЬ ДанныеТаблицыЮрЛиц
	|ИЗ
	|	&ТаблицаЮрЛиц КАК ТаблицаЮрЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТаблицыЮрЛиц.Ссылка КАК Ссылка,
	|	ДанныеТаблицыЮрЛиц.Роль КАК Роль,
	|	ДанныеЮрЛицИзБазы.ИНН КАК ИНН,
	|	ДанныеЮрЛицИзБазы.КПП КАК КПП,
	|	ДанныеЮрЛицИзБазы.СтранаРегистрации КАК СтранаРегистрации,
	|	ДанныеЮрЛицИзБазы.ОГРН КАК ОГРН,
	|	ДанныеЮрЛицИзБазы.ЮрФизЛицо КАК ЮрФизЛицо,
	|	ДанныеЮрЛицИзБазы.Наименование КАК Наименование,
	|	ДанныеЮрЛицИзБазы.Наименование КАК НаименованиеОрганизации,
	|	ДанныеЮрЛицИзБазы.КодФилиала КАК КодФилиала
	|ИЗ
	|	ДанныеТаблицыЮрЛиц КАК ДанныеТаблицыЮрЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЮрЛицИзБазы КАК ДанныеЮрЛицИзБазы
	|		ПО ДанныеТаблицыЮрЛиц.Ссылка = ДанныеЮрЛицИзБазы.Ссылка";

	ЗапросДанных.УстановитьПараметр("ТаблицаЮрЛиц", ТаблицаДанных);

	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат ВыборкаДанных;
	
КонецФункции

// Возвращает массив структур, содержащмй контактную информацию нескольких объектов. 
//
// Параметры:
//    МассивЮрЛиц - Массив - владельцы контактной информации.
//
// Возвращаемое значение:
//  Массив - содержит структуры контактной информации. Каждая структура содержит следующие ключи
//   * Ссылка           - ЛюбаяСсылка - владелец контактной информации.
//   * Вид              - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации.
//   * Тип              - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//   * Значение         - Строка - контактная информация во внутреннем формате JSON.
//   * Представление    - Строка - представление контактной информации.
//
Функция КонтактнаяИнформацияИзБазы(МассивЮрЛиц) Экспорт
	
	ОтборКИ = УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
	ОтборКИ.ВидыКонтактнойИнформации = МассивВидовКонтактнойИнформации();
	ОтборКИ.Дата                     = ТекущаяДатаСеанса();
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(МассивЮрЛиц, ОтборКИ);
	
	РезультатФункции = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаКИ Цикл
		СтруктураКИ = Новый Структура("Ссылка,Вид,Тип,Значение,Представление");
		ЗаполнитьЗначенияСвойств(СтруктураКИ, СтрокаТаблицы);
		СтруктураКИ.Ссылка = СтрокаТаблицы.Объект;
		
		РезультатФункции.Добавить(СтруктураКИ);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Читает строковое значение JSON в структуру на сервере, так как чтение JSON не доступно в вэб клиенте.
//
// Параметры:
//  СтрокаJSON - Строка - строка с валидным JSON для чтения
//
// Возвращаемое значение:
//   Структура - прочитанные данные JSON
//
Функция ПрочитатьJSONДляВебКлиента(СтрокаJSON) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	РезультатФункции = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат РезультатФункции;
	
КонецФункции

// Записывает новое значение дополнительного свойства
//
// Параметры:
//  ОбъектВладелец - СправочникСсылка - ссылка на владельца дополнительного свойства
//  ИмяСвойства - Строка - наименование свойства для заполнения
//  ЗначениеСвойства - Произвольный - значение дополнительного свойства
//
Процедура ЗаписатьДополнительноеСведение(ОбъектВладелец, ИмяСвойства, ЗначениеСвойства) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектВладелец) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаСвойство = СсылкаНаДополнительноеСвойство(ИмяСвойства);
	
	МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект   = ОбъектВладелец;
	МенеджерЗаписи.Свойство = СсылкаНаСвойство;
	МенеджерЗаписи.Значение = ЗначениеСвойства;
	
	МенеджерЗаписи.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает признак наличия организации в справочнике организаций по ИНН и КПП.
//
// Параметры:
//  ИНН - Строка - ИНН организации
//  КПП - Строка - КПП организации
//
// Возвращаемое значение:
//   Булево - признак наличия организации в базе
//
Функция ОрганизацияПрисутствуетВБазе(ИНН, КПП) Экспорт
	
	Результат = ОрганизацияКонтрагент(ИНН, КПП);
	
	Возврат Результат.Ссылка <> Неопределено И Результат.ЭтоОрганизация;
	
КонецФункции

// Возвращает ссылку на организацию или контрагента из базы
//
// Параметры:
//  ИНН - Строка - ИНН строкой
//  КПП - Строка - КПП строкой
//  Наименование - Строка - наименование организации
//
// Возвращаемое значение:
//   Структура - структура найденного юр лица
//
Функция ОрганизацияКонтрагент(ИНН, КПП, Наименование = Неопределено) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Ссылка",         Неопределено);
	РезультатФункции.Вставить("ЭтоОрганизация", Ложь);
	
	МассивЗапросов = Новый Массив;
	
	МассивЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка,
		|	1 КАК Порядок,
		|	ИСТИНА КАК ЭтоОрганизация
		|ПОМЕСТИТЬ НайденныеЮрЛица
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ИНН = &ИНН
		|	И Организации.КПП = &КПП");
	
	МассивЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	2 КАК Порядок,
		|	ЛОЖЬ КАК ЭтоОрганизация
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И Контрагенты.КПП = &КПП");
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		МассивЗапросов.Добавить(
			"ВЫБРАТЬ
			|	Организации.Ссылка КАК Ссылка,
			|	3 КАК Порядок,
			|	ИСТИНА КАК ЭтоОрганизация
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Наименование = &Наименование");
		
		МассивЗапросов.Добавить(
			"ВЫБРАТЬ
			|	Контрагенты.Ссылка КАК Ссылка,
			|	4 КАК Порядок,
			|	ЛОЖЬ КАК ЭтоОрганизация
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Наименование = &Наименование");
	КонецЕсли;
	
	РазделительОбъединение = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанных.УстановитьПараметр("ИНН",          ИНН);
	ЗапросДанных.УстановитьПараметр("КПП",          КПП);
	ЗапросДанных.УстановитьПараметр("Наименование", Наименование);
	ЗапросДанных.Текст = СтрСоединить(МассивЗапросов, РазделительОбъединение);
	Если Не ЗначениеЗаполнено(КПП) Тогда
		ЗапросДанных.Текст = СтрЗаменить(ЗапросДанных.Текст, "Организации.КПП = &КПП", "ИСТИНА");
		ЗапросДанных.Текст = СтрЗаменить(ЗапросДанных.Текст, "Контрагенты.КПП = &КПП", "ИСТИНА");
	КонецЕсли;
	ЗапросДанных.Выполнить();
	
	ЗапросДанных.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НайденныеЮрЛица.Ссылка КАК Ссылка,
	|	НайденныеЮрЛица.ЭтоОрганизация КАК ЭтоОрганизация
	|ИЗ
	|	НайденныеЮрЛица КАК НайденныеЮрЛица
	|
	|УПОРЯДОЧИТЬ ПО
	|	НайденныеЮрЛица.Порядок";
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РезультатФункции, ВыборкаДанных);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ДанныеЮрЛиц

// см. УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации
//
// Параметры:
//    ТипКонтактнойИнформации - ПеречислениеСсылка.ТипыКонтактнойИнформации
//                            - Строка - тип контактной информации,
//                            - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации для
//                              заполнения свойства НастройкиПроверки.
//
// Возвращаемое значение:
//   Структура - см. УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации
//
Функция ПараметрыВидаКонтактнойИнформации(Знач ТипКонтактнойИнформации) Экспорт
	Возврат УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ТипКонтактнойИнформации);
КонецФункции

// Преобразует представление контактной информации во внутренний формат JSON.
//
// Для адресов, введенных в свободной форме, корректное преобразование не гарантируется.
//
//  Параметры:
//      Значение - Строка  - контактная информация в формате JSON 
//      ТипКонтактнойИнформации - ПеречислениеСсылка.ТипыКонтактнойИнформации
//
// Возвращаемое значение:
//      Строка - контактная информация в виде JSON.
//
Функция КонтактнаяИнформацияПоПредставлению(Значение, ТипКонтактнойИнформации) Экспорт
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Значение, ТипКонтактнойИнформации);
КонецФункции

// Установим значения в списках выбора типов КИ в колонке таблицы формы
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - источник вызова 
//  МассивЭлементов - Массив - элементы для заполнения списка выбора 
//
Процедура УстановкаСпискаДоступныхТиповКИ(Форма, МассивЭлементов) Экспорт
	
	// Типы КИ
	СписокЗначенийКИ = Новый СписокЗначений;
	СписокЗначенийКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон, "Телефон");
	СписокЗначенийКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "Адрес электронной почты");
			
	Для Каждого ЭлементФормы Из МассивЭлементов Цикл
		
		Форма.Элементы[ЭлементФормы].СписокВыбора.Очистить();
		
		Для Каждого ЭлементСписка Из СписокЗначенийКИ Цикл  
		   Форма.Элементы[ЭлементФормы].СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	   КонецЦикла;		
	КонецЦикла;
	   
КонецПроцедуры

#КонецОбласти // КонтактнаяИнформация

#Область ОбщиеСбис

// Получает параметры СБИС объекта документа из базы.
//
// Параметры:
//  ОбъектДок - ДокументОбъект - объект документа для получения параметров.
//    Например в качестве параметра может передаваться ДокументОбъект.Saby_ТранспортнаяНакладная.
//
// Возвращаемое значение:
//   Структура - имеет всегда фиксированны набор ключей
//       * ИД - Строка - новый текст запроса. 
//       * АктивныйЭтап - Строка - новый текст запроса.
//       * Состояние - Строка - новый текст запроса.
//
Функция ТекущийТитулИИДДокумента(ОбъектДок) Экспорт
	
	// признаки для расчета состояния
	ДОЗавершенУспешно      = 7;
	ДОЗавершенОтрицательно = 9;
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ИД",                     "");
	РезультатФункции.Вставить("АктивныйЭтап",           Неопределено);
	РезультатФункции.Вставить("Состояние",              Неопределено);
	РезультатФункции.Вставить("ДОЗавершенПоложительно", Ложь);
	РезультатФункции.Вставить("ДОЗавершенОтрицательно", Ложь);
	
	Если Не ЗначениеЗаполнено(ОбъектДок.Ссылка) Тогда 
		Возврат РезультатФункции;
	КонецЕсли;
	
	Данные = ДанныеСостоянияОбъекта(ОбъектДок.Ссылка);	
	Если Данные <> Неопределено Тогда 
		
		РезультатФункции.ИД           = Данные.UID;
		РезультатФункции.АктивныйЭтап = Данные.АктивныйЭтап;
		РезультатФункции.Состояние    = Данные.Состояние;
				
		Если ЗначениеЗаполнено(Данные.Состояние) Тогда
						
			КодСостояния = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Состояние, "ИдентификаторСБИС");
			
			РезультатФункции.ДОЗавершенПоложительно = (КодСостояния = ДОЗавершенУспешно);
	        РезультатФункции.ДОЗавершенОтрицательно = (КодСостояния = ДОЗавершенОтрицательно);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Получает идентификатор загруженного документа в СБИС
//
// Параметры:
//  Ссылка - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на документ для получения идентификатора.
//
// Возвращаемое значение:
//   Строка - идентификатор документа.
//
Функция ИдентификаторВСбис(Ссылка) Экспорт
	
	// ToDo: Вынести в общий модуль. Получение уид и активного этапа. Использовать еще при создани дока 
	Выборка = ДанныеСостоянияОбъекта(Ссылка);
	Если Выборка <> Неопределено Тогда
		УИД = Выборка.UID;
	Иначе 
		УИД = "";
	КонецЕсли;
	
	Возврат УИД;
	
КонецФункции

// Возвращает ссылку на документ ЭТрН по идентификатору СБИС
//
// Параметры:
//  ИдСбис - Строка - идентификатор документа в СБИС
//
// Возвращаемое значение:
//   ДокументСсылка.Saby_ТранспортнаяНакладная - Ссылка на документ. Если не найден, то Неопределено
//
Функция ДокументПоИдентификаторуСбис(ИдСбис) Экспорт
	
	СсылкаДокВБазе = Неопределено;
	
    Аккаунт = АвторизованныйАккаунтСтрокой();
	
	ВыборкаСостояния = РегистрыСведений.Saby_Состояние.ПрочитатьПоUID(ИДСбис, , Аккаунт);
	Если ВыборкаСостояния.Следующий() Тогда
		СсылкаДокВБазе = ВыборкаСостояния.Объект;
	КонецЕсли;

	Возврат СсылкаДокВБазе;
	
КонецФункции

// Очищает отметки и связанные с ними таблицы документа.
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для зачистки отметок.
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - тип титула для зачистки отметок.
//  ЗначениеРоли - ПеречислениеСсылка.Saby_РолиКонтрагентов - роль контрагента для зачистки отметок.
//
Процедура ЗачисткаОтметокШтрафовАктов(ОбъектДок, Титул, ЗначениеРоли) Экспорт
	
	Если Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(ОбъектДок, "Ссылка")
		И Не ЗначениеЗаполнено(ОбъектДок.Ссылка) Тогда
		Возврат;
	КонецЕсли;
		
	ОтметкиДляУдаления = Новый Массив;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Титул);
	Отбор.Вставить("Роль", ЗначениеРоли);
	
	ОтметкиТитула = ОбъектДок.Отметки.НайтиСтроки(Отбор);
	
	Соответствие = Новый Соответствие;
	Для Каждого Строка Из ОтметкиТитула Цикл
		Соответствие.Вставить(Строка.КлючСтроки, "");
		ОтметкиДляУдаления.Добавить(Строка);
	КонецЦикла;
	
	ЗачиститьШтрафы(ОбъектДок, Соответствие);
	
	ЗачиститьАкты(ОбъектДок, Соответствие);
	
	Для Каждого Отметка Из ОтметкиДляУдаления Цикл
		ОбъектДок.Отметки.Удалить(Отметка);
	КонецЦикла;	   
	
КонецПроцедуры

#Область ДатаВремя

// Преобразовывает дату, полученную с онлайна, в тип дата.
//
// Параметры:
//  ДатаВходящая - Строка - дата в виде строки, полученная с онлайна.
//
// Возвращаемое значение:
//   Дата - значение даты
//
Функция ПреобразоватьСтрокуВДату(ДатаВходящая) Экспорт
	
	Если ТипЗнч(ДатаВходящая) = Тип("Дата") Тогда
		Возврат ДатаВходящая;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаВходящая) Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	// ранее 24.01.2023 12.00.00
	// 15.03.2022T00:00:00+01:00
	// 15.03.2022T00:00:00-01:00	
	// 2023-02-02 07:33:30 
	// 2023-02-02
	// 2023.01.03
	ФорматБезСмещения = Ложь;
		
	ЕстьВремя = (СтрНайти(ДатаВходящая, "T") > 0); 	
	
	ЧислоДвоеточийВДате = 2;
	
	// часть дат может приходить в старом формате
	Если Не ЕстьВремя Тогда
		
		ЧислоТочекВДате = 4;
		
		Если СтрЧислоВхождений(ДатаВходящая, ".") = ЧислоТочекВДате
			Или СтрЧислоВхождений(ДатаВходящая, ":") = ЧислоДвоеточийВДате Тогда
			ЕстьВремя = Истина;
			ФорматБезСмещения = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Если ЕстьВремя Тогда
		
		Если ФорматБезСмещения Тогда 
			Разделитель = " ";
		Иначе 
			Разделитель = "T";			
		КонецЕсли;
		
		МассивЧастейДаты = СтрРазделить(ДатаВходящая, Разделитель);		
		ЧастьДата  = МассивЧастейДаты[0];
		ЧастьВремя = МассивЧастейДаты[1];
		
	Иначе
		
		ЧастьДата = ДатаБезВремениВСтандартномФормате(ДатаВходящая);		
		
	КонецЕсли;
				
	МассивДат = СтрРазделить(ЧастьДата, ".", Ложь);
	
	МассивИтог = Новый Массив;
	МассивИтог.Добавить(МассивДат[2]); 
	МассивИтог.Добавить(МассивДат[1]);
	МассивИтог.Добавить(МассивДат[0]); 		
	
	СмещениеВСекундах = Неопределено;
	
	ДобавитьВремяВМассивДаты(МассивИтог, ЧастьВремя, ЕстьВремя, ФорматБезСмещения, СмещениеВСекундах);
	
	ДатаСтрокой = СтрСоединить(МассивИтог, "");
	
	Возврат ?(ЗначениеЗаполнено(СмещениеВСекундах), Дата(ДатаСтрокой) - СмещениеВСекундах, Дата(ДатаСтрокой)); 
	
КонецФункции	

// Преобразовывает дату, полученную с онлайна, в тип дата.
//
// Параметры:
//  ВремяВходящее - Строка - дата в виде строки, полученная с онлайна.
//
// Возвращаемое значение:
//   Время - значение времени
//
Функция ПреобразоватьСтрокуВоВремя(ВремяВходящее) Экспорт
	
	Если ТипЗнч(ВремяВходящее) = Тип("Дата") Тогда
		Возврат ВремяВходящее;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяВходящее) Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	// 00:00:00+01:00
	// 00:00:00-01:00
	// может быть +/-
	Если СтрНайти(ВремяВходящее, "+") > 0 Тогда
		РазделительСмещение = "+";  
	Иначе 
		РазделительСмещение = "-";
	КонецЕсли;
				
	МассивВремени = СтрРазделить(ВремяВходящее, РазделительСмещение);
	Время         = МассивВремени[0];
	
	ПервыйМесяц = "01";
	ПервоеЧисло = "01";
	
	МассивИтог = Новый Массив;  	
	МассивИтог.Добавить("0001"); 
	МассивИтог.Добавить(ПервыйМесяц);
	МассивИтог.Добавить(ПервоеЧисло); 		
		
	ДобавитьВремяВМассивДаты(МассивИтог, Время, Истина, Истина, 0);
	
	ДатаСтрокой = СтрСоединить(МассивИтог, "");
	
	Возврат Дата(ДатаСтрокой); 

КонецФункции
	
#КонецОбласти // ДатаВремя

// Возвращает структуру адреса в формате обмена со СБИС
// Параметры:
//  Выгрузка - Белево - признак того что адрес будет использован для выгрузки в онлайн
//
// Возвращаемое значение:
//   Структура - структура адреса в формате обмена
//
Функция ОбщийШаблонАдреса(Выгрузка = Ложь) Экспорт
	
	Структура = Новый Структура;
	
	// из-за различий формата
	Структура.Вставить("Текст",     "");
	Структура.Вставить("АдресТекст","");
	
	Структура.Вставить("GLN",       "");
	Структура.Вставить("КодГАР",    "");
	Структура.Вставить("КодСтраны", "643");
	
	Координаты = Новый Структура;
	Координаты.Вставить("Широта",  ""); 
	Координаты.Вставить("Долгота", "");
	
	Структура.Вставить("Координаты", Координаты); 
	
	Если Не Выгрузка Тогда 
		
		СтруктураАдрес = Новый Структура;
		
		СтруктураАдрес.Вставить("Индекс",          "");
		СтруктураАдрес.Вставить("КодРегиона",      "");
		СтруктураАдрес.Вставить("Район",           "");
		СтруктураАдрес.Вставить("Город",           "");
		СтруктураАдрес.Вставить("НаселенныйПункт", "");
		СтруктураАдрес.Вставить("Улица",           "");
		СтруктураАдрес.Вставить("Дом",             "");
		СтруктураАдрес.Вставить("Корпус",          "");
		СтруктураАдрес.Вставить("Квартира",        "");
		
		Структура.Вставить("Структура", СтруктураАдрес);
		
		Структура.Вставить("Типовой", 	"");
		
	КонецЕсли; 
	 
	Возврат Структура;
		
КонецФункции

// Получает ставку НДС либо в виде представления, либо в виде кода.
//
// Параметры:
//  Значение - Строка - или код с онлайна или представление ставки НДС
//  Загрузка - Булево - назначение использования функции. Истина - для загрузки, ложь - для выгрузки.
//
// Возвращаемое значение:
//   Строка - если Загрузка = Истина, то возвращает представление ставки НДС
//            если Загрузка = Ложь, то возвращает код ставки НДС, который используется на онлайне.
//
Функция ЗначениеСтавкиНДС(Значение, Загрузка = Ложь) Экспорт
    
    Параметры = ПараметрыСоответствия();
    Параметры.ИмяПеречисления = "";
    Параметры.ПоискПоЗначению = Не Загрузка;

    ДополнитьСоответствие(Параметры, "1", "без НДС"); 
    ДополнитьСоответствие(Параметры, "2", "0%");
    ДополнитьСоответствие(Параметры, "3", "10%");              
    ДополнитьСоответствие(Параметры, "4", "20%");               
    
    Ставка = Параметры.Соответствие.Получить(Значение);
    
    Если Загрузка 
        И Ставка = Неопределено Тогда 
        
        Ставка = Параметры.Соответствие.Получить("без НДС");       
    КонецЕсли;
    
    Возврат Ставка;
    
КонецФункции

// Обновляем надпись строки ответственного
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма для обновления реквизитов
//	Реквизит - Строка - имя реквизита обновления
//	Значение - Строка - сериализорванное значение, для получения структуры
//	         - Структура - готовая структура
//
Процедура ОбновитьОтветственногоНаФорме(Форма, Реквизит, Значение) Экспорт
	
	Форма[Реквизит] = "";
	Если ЗначениеЗаполнено(Значение) Тогда
		
		Если ТипЗнч(Значение) <> Тип("Структура") Тогда 
			Структура = ДесериализоватьЗначение(Значение);
		Иначе 
			Структура = Значение;
		КонецЕсли;
			
		ФИО = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеФИО(Структура);
		Форма[Реквизит] = ФИО;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма[Реквизит]) Тогда
		Форма[Реквизит] = "Заполнить"; 
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отбор по роли в таблице ответственных лиц для визуального отображения необходимых ответственных
//
// Параметры:
//  ТаблицаОтветственных - ТаблицаФормы - таблица формы для установки отбора по роли
//  Роль - Строка,Перечисление.Saby_РолиОтветственных - роль, по которой необходимо установить отбор
//
Процедура УстановитьОтборТаблицыОтветственных(ТаблицаОтветственных, Роль) Экспорт
	
	Если ТипЗнч(Роль) = Тип("Строка") Тогда
		РольСсылка = ПредопределенноеЗначение("Перечисление.Saby_РолиОтветственных." + Роль);
	Иначе
		РольСсылка = Роль;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", РольСсылка);
	
	ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
	ТаблицаОтветственных.ОтборСтрок = ОтборСтрок;
	
КонецПроцедуры

// Дозаполняет дополнительные параметры выгрузки на основании уже заполненных данных в параметрах выгрузки
//
// Параметры:
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//
Процедура ЗаполнитьПараметрыВыгрузки(ПараметрыВыгрузки) Экспорт
	
	ИдентификаторСБИС = "";
	Этап = ПараметрыВыгрузки.Этап;
	ДанныеСостояния = ДанныеСостоянияОбъекта(ПараметрыВыгрузки.Ссылка);
	Если ДанныеСостояния <> Неопределено Тогда
		ИдентификаторСБИС = ДанныеСостояния.UID;
		Если Не ЗначениеЗаполнено(Этап) Тогда
			Этап = ДанныеСостояния.АктивныйЭтап;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыгрузки.ИмяМетаданных = ПараметрыВыгрузки.Ссылка.Метаданные().Имя;
	
	МенеджерТитулов = Документы[ПараметрыВыгрузки.ИмяМетаданных].МенеджерТитулов();
	
	ТипТитула = МенеджерТитулов.ЗначениеПоПредставлению(Этап);
	Если ТипТитула.Пустая() Тогда
		ТипТитула = МенеджерТитулов.ПервыйТитул();
	КонецЕсли;
	
	ПредставленияТитула = МенеджерТитулов.ПредставленияТитула(ТипТитула);
	
	ПараметрыВыгрузки.Этап              = ПредставленияТитула.Представление;
	ПараметрыВыгрузки.ТипТитула         = ТипТитула;
	ПараметрыВыгрузки.КодТитула         = ПредставленияТитула.КодТитула;
	ПараметрыВыгрузки.ДинамическийТитул = МенеджерТитулов.ЭтоДинамическийТитул(ТипТитула);
	ПараметрыВыгрузки.ИдентификаторСБИС = ИдентификаторСБИС;
		
	ПараметрыВыгрузки.ПараметрыДляАПИ = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыДокументаДляАПИ(
		ПараметрыВыгрузки.ИмяМетаданных);
	
КонецПроцедуры

// Формирует структуру для накопления результата выгрузки или загрузки данных в/из СБИС
//
// ВАЖНО!!! Данная структура ожидается в модуле Saby_ТНОбщегоНазначенияКлиент
//   при обработке результата длительной операции в функции ОбработатьРезультатКоманды.
//   Поэтому при изменении структуры обязательно нужно проверить модуль Saby_ТНОбщегоНазначенияКлиент.
//
// Параметры:
//  Всего - Число - общее количество обрабатываемых документов.
//
// Возвращаемое значение:
//   Структура - данные для накопления результатов выгрузки или загрузки
//
Функция РезультатВзаимодействияСоСБИС(Всего) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Итог", Новый Структура);
	
	РезультатФункции.Итог.Вставить("Успех",      Ложь);
	РезультатФункции.Итог.Вставить("Количество", 0);
	РезультатФункции.Итог.Вставить("Всего",      Всего);
	
	РезультатФункции.Вставить("Ошибки",   Новый Соответствие);
	РезультатФункции.Вставить("Успешные", Новый Массив);
	
	Возврат РезультатФункции;
	
КонецФункции

// Сброс статуса "не просмотрен" у документа
// Параметры:
//  СписокДокументов - Массив - документы для обработки
//
Процедура СбросСтатусаНеПросмотрено(Знач СписокДокументов) Экспорт
	
	Для Каждого Документ Из СписокДокументов Цикл
		ДанныеСостояния = ДанныеСостоянияОбъекта(Документ);	
		Если ДанныеСостояния = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыСостояния = ПараметрыЗаписиРегистраСостояний();
		ПараметрыСостояния.ИД           = ДанныеСостояния.UID;
		ПараметрыСостояния.АктивныйЭтап = СокрЛП(ДанныеСостояния.АктивныйЭтап);
		ПараметрыСостояния.Ссылка       = Документ;
		ПараметрыСостояния.Состояние    = ДанныеСостояния.Состояние;
				
		ОбновитьДанныеСостояния(ПараметрыСостояния);
		
	КонецЦикла;
	
	РегистрыСведений.Saby_ДанныеТитулов.Просмотреть(СписокДокументов);
	
КонецПроцедуры

// Возвращает дату последней успешной загрузки.
//
// Параметры:
//  ИмяМетаданных - Строка - имя метаданных документа
//
// Возвращаемое значение:
//   Дата - дата последней успешной загрузки.
//
Функция ПоследнееУспешноЗагруженноеИзменение(ИмяМетаданных) Экспорт
	
	ДатаЗагрузки = Неопределено;
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(Saby_ТранспортнаяНакладная.ДатаИзменения) КАК ДатаИзменения
	|ИЗ
	|	Документ.Saby_ТранспортнаяНакладная КАК Saby_ТранспортнаяНакладная";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Saby_ТранспортнаяНакладная", ИмяМетаданных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.ДатаИзменения) Тогда 
			ДатаЗагрузки = Выборка.ДатаИзменения;              
		КонецЕсли;
	КонецЕсли;	
			
	Возврат ДатаЗагрузки;
	
КонецФункции

// Заполняет документ на основании другого документа с помощью ИНИ.
//
// Параметры:
//  Объект - ДокументОбъект - объект документа расширения для заполнения.
//  ДокументОснование - ДокументСсылка - ссылка на документ основание.
//  
//
// Возвращаемое значение:
//   Структура - результат заполнения на основании ИНИ
//
Функция ЗаполнитьНаОснованииINI(Объект, ДокументОснование) Экспорт
	
	ПараметрыЗаполнения = ПараметрыЗаполненияНаОснованииINI(Объект);
	
	ПерваяИтерация = Истина;
	
	ОснованияДляЗаполнения = ДанныеОснованийДляЗаполненияНаОснованииINI(
		ДокументОснование, ПараметрыЗаполнения.МенеджерДокумента.ШаблонИмениINI());
		
	Для Каждого СтруктураОснования Из ОснованияДляЗаполнения Цикл
		
		ПараметрыЗаполнения.ini_name             = СтруктураОснования.ini_name;
		ПараметрыЗаполнения.Основание            = СтруктураОснования.Основание;
		ПараметрыЗаполнения.ЭтоВыбранныйДокумент = СтруктураОснования.Основание = ДокументОснование;
		ПараметрыЗаполнения.ЭтоПервоеОснование   = ПерваяИтерация;
		ПараметрыЗаполнения.РольКонтрагента      = СтруктураОснования.РольКонтрагента;
		
		РезультатФункции = РезультатЗаполненияНаОснованииINI(ПараметрыЗаполнения);
		
		Если РезультатФункции.Ошибка Тогда
			ЗаписатьОшибкуВЖурналРегистрации(
				Объект.Ссылка,
				"Заполнение не выполнено",
				РезультатФункции.ТекстСообщения);
			Прервать;
		КонецЕсли;
		
		ДобавитьОснованияДляЗаполнения(ПараметрыЗаполнения, ОснованияДляЗаполнения, РезультатФункции);
		
		ПерваяИтерация = Ложь;
		
	КонецЦикла;
	
	Если РезультатФункции.Ошибка Тогда 					
		РезультатФункции.Вставить("ТекстЗаголовка", "Ошибка");		
		РезультатФункции.Вставить("Картинка",       БиблиотекаКартинок["Saby_Ошибка32"]); 		
	Иначе                                                        		
		РезультатФункции.Вставить("ТекстЗаголовка", "Выполнено");
		РезультатФункции.Вставить("Картинка",       БиблиотекаКартинок["Saby_Успешно32"]);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции	

// Возвращат структуру основания для заполнения из INI
//
// Параметры:
//  Основание - Ссылка - ссылка на основание заполнения
//  РольКонтрагента - ПеречислениСсылка.Saby_РолиКонтрагентов - роль контрагента для заполнения
//
// Возвращаемое значение:
//   Структура - структура с данными основания
//
Функция СтруктураОснования(Основание, РольКонтрагента) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Основание",       Основание);
	РезультатФункции.Вставить("РольКонтрагента", РольКонтрагента);
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает соответстивие данных юр лица из ИНИ
//
// Параметры:
//  ДанныеИзИНИ - Соответствие - данные загруженные из документа основания через ИНИ
//
// Возвращаемое значение:
//   Соответствие - структура данных юрлица
//
Функция ДанныеЮрЛицаИзИНИ(ДанныеИзИНИ) Экспорт
	
	РезультатФункции = Новый Соответствие;
	РезультатФункции.Вставить("Контакты",  ДанныеИзИНИ["Контакты"]);
	РезультатФункции.Вставить("Адрес",     ДанныеИзИНИ["Адрес"]);
	РезультатФункции.Вставить("Реквизиты", ДанныеИзИНИ["Реквизиты"]);
	РезультатФункции.Вставить("Название",  ДанныеИзИНИ["Название"]);
	
	Возврат РезультатФункции;
	
КонецФункции

// Получает актуальный статус версии расширения
//
// Возвращаемое значение:
//   Структура - данные о актуальности установленной версии расширения
//
Функция СтатусВерсииРасширения() Экспорт
	
	СтатусВерсии = Неопределено;
		
	context_params = Saby_Core.ПроверитьНаличиеПараметровПодключения();
	Если Не ЗначениеЗаполнено(context_params) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// context_params.service - может быть стоит проверять только боевой сервер
	
	ОбъектОбработки = Обработки.SABY.Создать();
	СтатусВерсии    = ОбъектОбработки.ПолучитьСтатусВерсии(Ложь, СтатусВерсии);
	
	Возврат СтатусВерсии;
	
КонецФункции

// Формируем структуру параметров для обновления статусов
//
// Возвращаемое значение:
//   Структура - шаблон для записи в регистр
//
Функция ПараметрыЗаписиРегистраСостояний() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИД",           "");
	Параметры.Вставить("АктивныйЭтап", "");
	Параметры.Вставить("Ссылка",       "");
	Параметры.Вставить("Состояние",    Справочники.Saby_СостоянияОбъектов.ПустаяСсылка());
	Параметры.Вставить("СбисИД",       ""); 

	Возврат Параметры;
	
КонецФункции

// Определяет доступность титула по данным текщих этапов документа
//
// Параметры:
//  ТекущиеЭтапы - ДанныеФормыКоллекция - таблица с данными о текущих этапах
//  ТипТитула - ПеречислениеСсылка.Saby_ТипТитула - тип титула документа
//  ДОЗавершен - Булево - Истина - если документооборот завершен.
//
// Возвращаемое значение:
//   Булево - этап доступен
//
Функция ТипТитулаДоступенУчастнику(ТекущиеЭтапы, ТипТитула, ДОЗавершен) Экспорт
	
	Если ТекущиеЭтапы.Количество() = 0 Тогда
		Возврат Перечисления[ТипТитула.Метаданные().Имя].ЭтоПервыйТитул(ТипТитула) И Не ДОЗавершен;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипТитула", ТипТитула);
	Отбор.Вставить("Доступен",  Истина);
	
	НайденныеСтроки = ТекущиеЭтапы.НайтиСтроки(Отбор);
	
	Возврат НайденныеСтроки.Количество() > 0;
	
КонецФункции

#КонецОбласти // ОбщиеСбис 

#Область ОбработкаОшибок

// Обновляет данные по ошибкам ФЛК в форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма на которой необходимо обновить реквизиты и элементы ошибок.
//  ДополнительныеПараметры - Структура - дополнительные параметры необходимы
//    для указания доп параметров получения ошибок ФЛК.
//  Ошибки - Структура - состав структуры см. Saby_ТранспортнаяНакладная.ДобавитьОшибкуПользователю
//
Процедура ОбновитьДанныеПоОшибкам(Форма, ДополнительныеПараметры, Ошибки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		
		ПараметрыВыгрузки = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки(ДополнительныеПараметры.Ссылка);
		ЗаполнитьЗначенияСвойств(ПараметрыВыгрузки, ДополнительныеПараметры);
		ЗаполнитьПараметрыВыгрузки(ПараметрыВыгрузки);
		Результат = РезультатВзаимодействияСоСБИС(0);
		Saby_ТНВыгрузкаСервер.ЗаполнитьСтруктуруДокументаСПроверкойФЛК(ПараметрыВыгрузки, Результат, Истина);
		
		Ошибки = Результат.Ошибки[ПараметрыВыгрузки.Ссылка];
	КонецЕсли;
	
	Если Ошибки = Неопределено Тогда
		Форма.КоличествоОшибок = 0;
		Форма.ТаблицаОшибок.Очистить();
	Иначе
		Форма.КоличествоОшибок = Ошибки.СписокОшибок.Количество();
		
		Форма.ТаблицаОшибок.Очистить();
		Для Каждого СтруктураОшибки Из Ошибки.СписокОшибок Цикл
			СтрокаТаблицыОшибок = Форма.ТаблицаОшибок.Добавить();
			СтрокаТаблицыОшибок.Ошибка          = СтруктураОшибки.ТекстДляОднойОшибки;
			Если СтруктураОшибки.Свойство("РеквизитОбъекта") Тогда
				СтрокаТаблицыОшибок.РеквизитОбъекта = СтруктураОшибки.РеквизитОбъекта;
				СтрокаТаблицыОшибок.ЭлементФормы    = СтруктураОшибки.ЭлементФормы;
				СтрокаТаблицыОшибок.ИндексСтроки    = СтруктураОшибки.ИндексСтроки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьВнешнийВидЭлементовОшибок(Форма);
	
КонецПроцедуры

// Обновляет реквизиты формы, связанные с отображением ошибок.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, реквизиты которой необходимо обновить.
//
Процедура ОбновитьВнешнийВидЭлементовОшибок(Форма) Экспорт
	
	ЕстьОшибки = Форма.КоличествоОшибок <> 0;
	
	Форма.Элементы.ФормаПоказатьСкрытьОшибки.Видимость = ЕстьОшибки;
	Форма.Элементы.ГруппаОшибки.Видимость              = ЕстьОшибки И Форма.Элементы.ФормаПоказатьСкрытьОшибки.Пометка;
	
	КоличествоОшибокСтрокой = Формат(Форма.КоличествоОшибок, "ЧДЦ=0; ЧГ=");
	
	Если ЕстьОшибки Тогда
		ШаблонЗаголовкаКнопкиПоказа = "Ошибки (%1)";
		Форма.Элементы.ФормаПоказатьСкрытьОшибки.Заголовок = СтрШаблон(
			ШаблонЗаголовкаКнопкиПоказа,
			КоличествоОшибокСтрокой);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработкаОшибок

#Область ПроверкаФЛК

// Возвращает результат выполнения форматно-логического контроля
//
// Параметры:
//  ДанныеДокумента - Структура - структура данных документа
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//
// Возвращаемое значение:
//   Структура,Неопределено - структура ошибок
//
Функция РезультатФЛК(ДанныеДокумента, ПараметрыВыгрузки) Экспорт
	
	РезультатФункции = Неопределено;
	
	Если Не ПараметрыВыгрузки.ВыполнитьФЛК Или ДанныеДокумента = Неопределено Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	ДокументМенеджер = Документы[ПараметрыВыгрузки.ИмяМетаданных];
	
	ПараметрыПроверкиРеквизитов = ДокументМенеджер.ПараметрыПроверкиРеквизитов(ДанныеДокумента, ПараметрыВыгрузки);
	ПараметрыПроверкиРеквизитов.Вставить("ДокументМенеджер", ДокументМенеджер);
	
	ПроверитьЗаполненНеЗаполнен(
		ДанныеДокумента, ПараметрыПроверкиРеквизитов, РезультатФункции);
	
	ДокументМенеджер.ВыполнитьДополнительныеПроверкиФЛК(
		ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, РезультатФункции);
	
	Возврат РезультатФункции;
	
КонецФункции

// Добавляет новую ошибку в структуру ошибок
//
// Параметры:
//  Ошибки - Структура,Неопределено - структура для добаления ошибки
//  ПолеОшибки - Строка - полное наименование поля реквизита на форме
//  ТекстДляОднойОшибки - Строка - описание ошибки
//  РеквизитОбъекта - Строка - наименование реквизита объект
//  ЭлементФормы - Строка - наименование реквизита формы для его выделения
//  ИндексСтроки - Число - индекс строки таблицы, в которой найдена ошибка.
//
Процедура ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстДляОднойОшибки, РеквизитОбъекта = "",
		ЭлементФормы = "", ИндексСтроки = 0) Экспорт
	
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Структура;
		Ошибки.Вставить("СписокОшибок", Новый Массив);
		Ошибки.Вставить("ГруппыОшибок", Новый Соответствие);
	КонецЕсли;
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("ПолеОшибки",          ПолеОшибки);
	Ошибка.Вставить("ТекстДляОднойОшибки", ТекстДляОднойОшибки);
	Ошибка.Вставить("РеквизитОбъекта",     РеквизитОбъекта);
	Ошибка.Вставить("ЭлементФормы",        ЭлементФормы);
	Ошибка.Вставить("ИндексСтроки",        ИндексСтроки);
	
	Ошибки.СписокОшибок.Добавить(Ошибка);
	
КонецПроцедуры

// Проверяет заполнение реквизита автомобиля
//
// Параметры:
//  ДанныеДокумента - Структура - структура данных документа
//  Ошибки - Массив - массив для накопления ошибок
//  СоответствиеРеквизитовОшибок - Соответствие - соответствие реквизитов формы и объекта.
//
Процедура ПроверитьЗаполнениеТранспортногоСредства(ДанныеДокумента, Ошибки, СоответствиеРеквизитовОшибок) Экспорт
	
	Автомобиль = Перечисления.Saby_ВидыТС.Автомобиль;
	
	НайденнаяСтрока = ДанныеДокумента.ТранспортныеСредства.Найти(Автомобиль, "Вид");
	Если НайденнаяСтрока = Неопределено Тогда
		
		СтруктураДанныхОшибки = СоответствиеРеквизитовОшибок.Получить("ТранспортныеСредства");
		ДобавитьОшибкуПользователю(
			Ошибки,
			"ТранспортноеСредствоСтрокой",
			СтруктураДанныхОшибки.Ошибка,
			СтруктураДанныхОшибки.РеквизитОбъекта,
			"ТранспортноеСредствоСтрокой");
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение документов подтверждающих владение транспортным средством
//
// Параметры:
//  ДанныеДокумента - Структура - структура данных документа
//  Ошибки - Массив - массив для накопления ошибок
//  СоответствиеРеквизитовОшибок - Соответствие - соответствие реквизитов формы и объекта.
//
Процедура ПроверитьЗаполнениеТипаВладения(ДанныеДокумента, Ошибки, СоответствиеРеквизитовОшибок) Экспорт
	
	Для Каждого СтрокаТС Из ДанныеДокумента.ТранспортныеСредства Цикл
		
		Если Не Перечисления.Saby_ТипыВладенияТС.ТребуетПодтвержденияВладения(СтрокаТС.ТипВладения) Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьОшибки = Ложь;
		
		Если Не ЗначениеЗаполнено(СтрокаТС.ОснованияВладения) Тогда
			ЕстьОшибки = Истина;
		Иначе
			ОснованияВладения = ЗначениеИзСтрокиВнутр(СтрокаТС.ОснованияВладения);
			
			Если ОснованияВладения.Количество() = 0 Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьОшибкуТипаВладения(СтрокаТС, Ошибки, СоответствиеРеквизитовОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает соответствие имен реквизитов и структур данных для отображения ошибки ФЛК.
//
// Параметры:
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//
// Возвращаемое значение:
//   Соответствие - ключами являются имена реквизитов, а значениями структура данных по ошибке.
//     Структура данных состоит из
//       * РеквизитОбъекта - Строка - имя реквизита объекта
//       * ЭлементФормы - Строка - имя элемента формы, в котором выводится реквизит.
//       * Ошибка - Строка - описание ошибки понятное для пользователя.
//
Функция СоответствиеРеквизитовОшибок(ПараметрыВыгрузки) Экспорт
	
	РезультатФункции = Новый Соответствие;
	
	ТабДокОшибок = Документы[ПараметрыВыгрузки.ИмяМетаданных].ПолучитьМакет("ФЛК");
	
	НомерСтроки = 2;
	Пока ЗначениеЗаполнено(ТабДокОшибок.Область(НомерСтроки, 1).Текст) Цикл
		
		РеквизитОбъекта = СокрЛП(ТабДокОшибок.Область(НомерСтроки, 1, НомерСтроки, 1).Текст);
		ЭлементФормы    = СокрЛП(ТабДокОшибок.Область(НомерСтроки, 2, НомерСтроки, 2).Текст);
		Ошибка          = СокрЛП(ТабДокОшибок.Область(НомерСтроки, 3, НомерСтроки, 3).Текст);
		
		СтруктураДанныхОшибки = Новый Структура;
		СтруктураДанныхОшибки.Вставить("РеквизитОбъекта", РеквизитОбъекта);
		СтруктураДанныхОшибки.Вставить("ЭлементФормы",    ЭлементФормы);
		СтруктураДанныхОшибки.Вставить("Ошибка",          Ошибка);
		
		РезультатФункции.Вставить(РеквизитОбъекта, СтруктураДанныхОшибки);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Проверяет наличие контактных данных по указанным параметрам
//
// Параметры:
//  ДанныеДокумента - Структура - структура данных документа
//  Роль - Строка - роль контрагента строкой
//  Тип - Строка - тип контактной информации строкой
//  Ошибки - Массив - массив ошибок
//  СоответствиеРеквизитовОшибок - Соответствие - соответствие реквизитов формы и объекта.
//
Процедура ПроверитьКонтактныеДанные(ДанныеДокумента, Роль, Тип, Ошибки, СоответствиеРеквизитовОшибок) Экспорт
	
	Если Не ЗначениеЗаполнено(Роль) Тогда
		РольСсылка = Перечисления.Saby_РолиКонтрагентов.ПустаяСсылка();
	Иначе
		РольСсылка = Перечисления.Saby_РолиКонтрагентов[Роль];
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", РольСсылка);
	Отбор.Вставить("Тип",  Перечисления.ТипыКонтактнойИнформации[Тип]);
	
	ИмяРеквизита = Роль + "_" + Тип;
	
	СтруктураДанныхОшибки = СоответствиеРеквизитовОшибок.Получить(ИмяРеквизита);
	
	НайденныеСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ДанныеДокумента.КонтактныеДанные, Отбор);	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(
			Ошибки, 
			ИмяРеквизита, 
			СтруктураДанныхОшибки.Ошибка,
			СтруктураДанныхОшибки.РеквизитОбъекта,
			СтруктураДанныхОшибки.ЭлементФормы);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак необходимости проверки реквизитов водителя
//
// Параметры:
//  СтрокаТЧ - СтрокаТаблицыЗначений - строка таблицы, в которой проверяются реквизиты
//  ИмяРеквизита - Строка - имя текущего проверяемого реквизита
//
// Возвращаемое значение:
//   Булево - Истина, если реквизит необходимо проверять
//
Функция ПроверятьРеквизитВодителя(СтрокаТЧ, ИмяРеквизита) Экспорт
	
	Если ИмяРеквизита = "Серия" Или ИмяРеквизита = "Номер" Или ИмяРеквизита = "ДатаВыдачи" Тогда
		Возврат Не ЗначениеЗаполнено(СтрокаТЧ.ИНН);
	ИначеЕсли ИмяРеквизита = "ИНН" Тогда
		Возврат Не ЗначениеЗаполнено(СтрокаТЧ.Серия)
			Или Не ЗначениеЗаполнено(СтрокаТЧ.Номер)
			Или Не ЗначениеЗаполнено(СтрокаТЧ.ДатаВыдачи);
	Иначе
		Возврат ИмяРеквизита = "Фамилия" Или ИмяРеквизита = "Имя";
	КонецЕсли;
	
КонецФункции

#КонецОбласти // ПроверкаФЛК

#Область ЛентаИнтерфейс

// Перерисовывает визуализацию ленты сверху документа
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для отрисовки ленты
//  ОбновитьДанные - Булево - признак необходимости перечитать данные из регистра ДанныеТитулов
//
Процедура ОбновитьЛенту(Форма, ОбновитьДанные = Истина) Экспорт
	
	Если ОбновитьДанные Тогда
		ОбновитьДанныеЛенты(Форма);
	КонецЕсли;
	
	ОчиститьЛенту(Форма);
	
	ДобавитьКнопку(Форма, "ЛентаВлево");
	
	ВыведеноТитулов = 0;
	Для Каждого СтрокаЛенты Из Форма.Лента Цикл
		
		Если ВыведеноТитулов = РазмерЛентыВТитулах() Тогда
			Прервать;
		КонецЕсли;
		
		Если Не СтрокаЛенты.Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыведеноТитулов = 0 И Форма.Лента[0] <> СтрокаЛенты Тогда
			ДобавитьДекорациюЛинию(Форма, СтрокаЛенты, 2, "НачальнаяЛиния");
		Иначе
			Если ВыведеноТитулов > 0 Тогда
				ДобавитьДекорациюЛинию(Форма, СтрокаЛенты);
			КонецЕсли;
		КонецЕсли;
		ДобавитьДекорациюТитул(Форма, СтрокаЛенты);
		ВыведеноТитулов = ВыведеноТитулов + 1;
		
	КонецЦикла;
	
	Если Не Форма.Лента[Форма.Лента.Количество() - 1].Видимость Тогда
		ДобавитьДекорациюЛинию(Форма, СтрокаЛенты, 2, "КонечнаяЛиния");
	КонецЕсли;
	
	ДобавитьКнопку(Форма, "ЛентаВправо");
	
	ДобавитьПодсказку(Форма);
	
КонецПроцедуры

// Сдвигает отображаемые титулы, когда их больше чем РазмерЛентыВТитулах()
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма с лентой
//  Вправо - Булево - признак направления сдвига
//
Процедура СдвинутьЛенту(Форма, Вправо = Истина) Экспорт
	
	Если Вправо Тогда
		СдвинутьЛентуВправо(Форма.Лента);
	Иначе
		СдвинутьЛентуВлево(Форма.Лента);
	КонецЕсли;
	
	ОбновитьЛенту(Форма, Ложь);
	
КонецПроцедуры

#КонецОбласти // ЛентаИнтерфейс

// Ограничение документов оснований в зависимости от типа заполняемого документа
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма на которой необходимо ограничение
//
Процедура ОграничитьТипыДокументовОснований(Форма) Экспорт
	
	ИмяДокумента = ИмяМетаданныхДокумента(Форма.Объект.Ссылка);
	
	МассивТипов = Документы[ИмяДокумента].ТипыДляЗаполненияНаОсновании();
	
	ТипДокументаОснования = ТипЗнч(Форма.ДокументОснование);
	
	Если ЗначениеЗаполнено(Форма.ДокументОснование) И МассивТипов.Найти(ТипДокументаОснования) = Неопределено Тогда
		МассивТипов.Добавить(ТипДокументаОснования);
	КонецЕсли;
	
	Форма.ТипыОснований.ЗагрузитьЗначения(МассивТипов);
		
КонецПроцедуры

// Формируем строковое представление автомобилей документа
// Параметры:
// 	ОбъектДок - ДокуметОбъект - источник таблицы с транспортными средствами     
// Возвращаемое значение:
//  Строка - представление транспортного средства
//
Функция ТранспортныеСредстваСтрокой(ОбъектДок) Экспорт
		
    СтрокиАвто = Saby_ТНОбщегоНазначенияКлиентСервер.ПолучитьСтрокиТС(
		ОбъектДок.ТранспортныеСредства,
		Перечисления.Saby_ВидыТС.Автомобиль);
	
	МассивНаименований = Новый Массив;
	Для Каждого СтрокаАвто Из СтрокиАвто Цикл
		МассивНаименований.Добавить(СтрокаАвто.РегистрационныйНомер);
	КонецЦикла;
	
	АвтоСтрокой = СтрСоединить(МассивНаименований, ", ");
	
	Возврат АвтоСтрокой;
	
КонецФункции

// Получение из регистра состояний активного этапа
//
// Параметры:
// 	СсылкаНаДокумент - ДокументСсылка - ссылка на документ для поиска
//
// Возвращаемое значение:
//  Строка - активный этап строкой
//
Функция АктивныйЭтапСтрокой(Знач СсылкаНаДокумент) Экспорт
	
	РезультатФункции = "";
	
	ДанныеСостояния = ДанныеСостоянияОбъекта(СсылкаНаДокумент);
	Если ДанныеСостояния <> Неопределено Тогда
		РезультатФункции = ДанныеСостояния.АктивныйЭтап;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Изменяет признак не просмотренного документа
//
// Параметры:
// 	СсылкаНаДокумент - ДокументСсылка - ссылка на документ для поиска
//
Процедура УбратьПризнакНеПросмотрен(Знач СсылкаНаДокумент) Экспорт
	
	ДанныеСостояния = ДанныеСостоянияОбъекта(СсылкаНаДокумент);	
	Если ДанныеСостояния = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИД",           ДанныеСостояния.UID);
	Параметры.Вставить("АктивныйЭтап", ДанныеСостояния.АктивныйЭтап);
	Параметры.Вставить("Ссылка",       СсылкаНаДокумент);
	Параметры.Вставить("Состояние",    ДанныеСостояния.Состояние);
	Параметры.Вставить("Аккаунт",      ДанныеСостояния.Аккаунт);
	Параметры.Вставить("СбисИД",       ""); // сброс "Не просмотрен"
	
	ОбновитьДанныеСостояния(Параметры);
	
КонецПроцедуры

#Область ДатаВремяНаФорме

// Дополнение массива реквизитов объекта и его составных частей на форме
// реквизитов формы, отдельно хранящее время и дату
// Параметры:
//  Массив - Массив - исходный массив для дополнения новыми записями 
//  РевизитОбъекта - Строка - ревизит объекта  
//	РеквизитДата - Строка - реквизит формы с датой
//	РеквизитВремя - Строка - реквизит формы с временем
//
Процедура ДобавитьРеквизитВМассивДатаВремя(Массив, РевизитОбъекта, РеквизитДата = "", РеквизитВремя = "") Экспорт
	
	Если Не ЗначениеЗаполнено(РеквизитДата) Тогда
		РеквизитДата = СтрЗаменить(РевизитОбъекта, "ДатаВремя", "Дата");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеквизитВремя) Тогда 
		РеквизитВремя = СтрЗаменить(РевизитОбъекта, "ДатаВремя", "Время");	
	КонецЕсли;
		
	Структура = Новый Структура;
	Структура.Вставить("РеквизитОбъекта", РевизитОбъекта);
	Структура.Вставить("РеквизитДата",    РеквизитДата);
	Структура.Вставить("РеквизитВремя",   РеквизитВремя);
	
	Массив.Добавить(Структура);
	
КонецПроцедуры

// Разбор реквизита объекта на составные части в реквизиты формы (дата и время отдельно)
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма источник вызова  
//	МассивРеквизитов - Массив - реквизиты объекта и формы для разбора
//
Процедура РазложитьДатуВремяПоРеквизитам(Форма, МассивРеквизитов) Экспорт
	
	Объект = Форма.Объект;
	
	Для Каждого ЭлементМассива Из МассивРеквизитов Цикл
		
		РеквизитОбъекта = Объект[ЭлементМассива.РеквизитОбъекта];
		
		Форма[ЭлементМассива.РеквизитДата]  = РеквизитОбъекта;	 
		Форма[ЭлементМассива.РеквизитВремя] = РеквизитОбъекта;
		
	КонецЦикла;
	
КонецПроцедуры

// Сборка даты реквизита объекта из составных частей в реквизитов формы (дата и время отдельно)
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма источник вызова  
//	МассивРеквизитов - Массив - реквизиты объекта и формы для сборки
//  ТекущийОбъект - ДокументОбъект - объект документа
//
Процедура СобратьДатуВремяПоРеквизитам(Форма, МассивРеквизитов, ТекущийОбъект = Неопределено) Экспорт
	
	Если ТекущийОбъект <> Неопределено Тогда
		Объект = ТекущийОбъект;
	Иначе
		Объект = Форма.Объект;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивРеквизитов Цикл
		
		РеквизитОбъекта = ЭлементМассива.РеквизитОбъекта;
		
		Если Не ЗначениеЗаполнено(Форма[ЭлементМассива.РеквизитДата]) Тогда
			Объект[РеквизитОбъекта] = "";
			Продолжить;
		КонецЕсли;
		
		ДатаСтрока  = Формат(Форма[ЭлементМассива.РеквизитДата],  "ДФ=yyyyMMdd");
		ВремяСтрока = Формат(Форма[ЭлементМассива.РеквизитВремя], "ДФ=HHmmss");
		
		ДатаИВремя = Дата(ДатаСтрока + ВремяСтрока);	
 
		Объект[РеквизитОбъекта] = ДатаИВремя;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ДатаВремяНаФорме

#Область АктивныйЭтапНаФорме

// Отображение на форме данных по активному этапу документа и состоянию
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма на которой необходимо показать данные
//
Процедура ОтобразитьНаФормеСбисЭтапИСостояние(Форма) Экспорт
		
	ДанныеЭтапа = АктивныйЭтапДокумента(Форма.Объект.Ссылка);	
	
	Форма.АктивныйЭтапСтрокой               = ДанныеЭтапа.АктивныйЭтап;
	Форма.Элементы.КартинкаСтатус.Подсказка = ДанныеЭтапа.Состояние;
	Форма.ИндексКартинки                    = ДанныеЭтапа.ИндексКартинки;
	Форма.Состояние                         = ДанныеЭтапа.Состояние;
	
	ДОЗавершенОтрицательно = 5;
	ДОЗавершенПоложительно = 6;
	ДОСОшибкой             = 3;
	
	Форма.Элементы.АктивныйЭтап.Видимость = ЗначениеЗаполнено(ДанныеЭтапа.АктивныйЭтап);
	
	Если Форма.Элементы.Найти("КомментарийУведомление") <> Неопределено Тогда 
		Форма.Элементы.КомментарийУведомление.Видимость = (Форма.ИндексКартинки = ДОЗавершенОтрицательно)
			Или ЗначениеЗаполнено(Форма.Объект.КомментарийУведомление);
	КонецЕсли;
	
	ТекущийТитул = Перечисления.Saby_ТипТитулаЭтрН.ЗначениеПоПредставлению(ДанныеЭтапа.АктивныйЭтап);
	
	// проверка на динамический это титул или нет
	ЭтоДТ = Перечисления.Saby_ТипТитулаЭтрН.ЭтоДинамическийТитул(ТекущийТитул);  
	
	Видимость   = Истина;
	Доступность = Ложь;
	Если Форма.ИндексКартинки = ДОСОшибкой Тогда  
		
		Доступность = Истина;
		Картинка    = БиблиотекаКартинок.Saby_СостояниеОшибка;
		
	// ДО завершен положительно	
	ИначеЕсли Форма.ИндексКартинки = ДОЗавершенПоложительно Тогда		
		Картинка = БиблиотекаКартинок.Saby_СостояниеЗавершеноПоложительно;
		
	// ДО завершен отрицательно	
	ИначеЕсли Форма.ИндексКартинки = ДОЗавершенОтрицательно Тогда		
		Картинка = БиблиотекаКартинок.Saby_СостояниеЗавершеноОтрицательно;	
		
	Иначе
		
		Картинка     = Новый Картинка();
		Видимость    = Ложь;
		Доступность  = Не ЭтоДТ; // выгрузка в сбис на ДТ не доступна 
		
	КонецЕсли;
	
	Форма.Элементы.КартинкаСтатус.Картинка         = Картинка;
	Форма.Элементы.ФормаВыгрузитьВСбис.Доступность = Доступность;
	Форма.Элементы.КартинкаСтатус.Видимость        = Видимость;
	
КонецПроцедуры

#КонецОбласти 

#Область РеглементныеЗадания

// Запуск регламентного задания по ключу
//
// Параметры:
//   Ключ - Строка - ключ для регламентного задания
//
Процедура ВыполнитьРегламентноеЗаданиеЭПД(Ключ) Экспорт
		
	Если Ключ = "Saby_Загрузка ЭПД" Тогда
		Saby_ТНЗагрузкаСервер.ЗагрузитьДокументыЭПДПоРегламентномуЗаданию();
	ИначеЕсли Ключ = "Saby_Выгрузка ЭПД" Тогда
		Saby_ТНВыгрузкаСервер.ВыгрузитьДокументыЭПДПоРегламентномуЗаданию();
	Иначе 
		Возврат;
	КонецЕсли;
			
КонецПроцедуры

// Добавление регламентных заданий подсистемы ЭПД
//
// Параметры:
//   МассивЗаданий - Массив - данные по регламентным заданиям, которые нужно дополнить новыми значениями
//
Процедура ДобавитьРегламентныеЗаданияЭПД(МассивЗаданий) Экспорт 
		
	ИменаФоновыхЗаднийЭПД = Новый Массив;
	ИменаФоновыхЗаднийЭПД.Добавить("Загрузка ЭПД");            
	ИменаФоновыхЗаднийЭПД.Добавить("Выгрузка ЭПД");    
	
	Для Каждого ФоновоеЗаданиеЭПД Из ИменаФоновыхЗаднийЭПД Цикл
		
		Ключ = "Saby_" + ФоновоеЗаданиеЭПД;
		
		ИнфоОЗадании = Новый Структура;
		ИнфоОЗадании.Вставить("Наименование", ФоновоеЗаданиеЭПД);
		ИнфоОЗадании.Вставить("Ключ",         Ключ);
		ИнфоОЗадании.Вставить("Расписание",   Неопределено);
		МассивЗаданий.Добавить(ИнфоОЗадании);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Возвращает структуру из всех значений перечисления.
// Параметры:
// 	ИмяМетаданных - Строка - имя метаданных перечисления
//
// Возвращаемое значение:
//   Структура - структура всех значений указанных в перечислении.
//     * КлючСтруктуры - Строка - имя перечисления как оно задано в конфигураторе
//     * ЗначениеСтруктуры - ПеречислениеСсылка - ссылка на соответствующее значение.
//
Функция ВсеЗначенияПеречисления(ИмяМетаданных) Экспорт
	
	РезультатФункции = Новый Структура;
													  
	Для Каждого ЗначениеПеречисления Из Перечисления[ИмяМетаданных] Цикл
		ИмяЗначения = xmlСтрока(ЗначениеПеречисления);
		РезультатФункции.Вставить(ИмяЗначения, ЗначениеПеречисления);
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает структуру из всех титулов перечисления.
// Параметры:
// 	ИмяМетаданных - Строка - имя метаданных перечисления
//
// Возвращаемое значение:
//   Соответствие - соответствие всех значений в перечислении.
//     * Ключ - Строка - синоним 
//     * Значение - Строка - имя перечисления как оно задано в конфигураторе.
//
Функция ВсеЗначенияПеречисленияПоСинониму(ИмяМетаданных) Экспорт
	
	РезультатФункции = Новый Соответствие;
													  
	Для Каждого ЗначениеПеречисления Из Перечисления[ИмяМетаданных] Цикл
		ИмяЗначения = xmlСтрока(ЗначениеПеречисления);
		РезультатФункции.Вставить(СокрЛП(ЗначениеПеречисления), ИмяЗначения);
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

// Получает данные указанного водителя, включая водительское удостоверение.
//
// Параметры:
//  Водитель - СправочникСсылка.ФизическиеЛица - ссылка на водителя для получения данных.
//
// Возвращаемое значение:
//   Структура - см. ФиоИВУФизЛиц + "ВУ"
//
Функция ДанныеВодителяПоСсылке(Водитель) Экспорт

	Массив = Новый Массив;
	Массив.Добавить(Водитель);
	
	ДанныеВодителей = ФиоИВУФизЛиц(Массив);	
			
	Структура = ДанныеВодителей.Получить(Водитель);	
	
	ВодительскоеУдостоверение = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеВУ(Структура);
	Структура.Вставить("ВУ", ВодительскоеУдостоверение); 
	
	Возврат Структура;
	
КонецФункции

// Получает справочные данные с онлайна.
//
// Параметры:
//  ИмяСправочника - Строка - наименование справочника, который необходимо получить с онлайна.
//
// Возвращаемое значение:
//   Массив - данные зависят от справочника, получаемого с онлайна.
//
Функция СправочникСОнлайна(ИмяСправочника) Экспорт
	
	ОбъектОбработки = Обработки.SABY.Создать();
	
	context_params = Saby_Core.ПроверитьНаличиеПараметровПодключения();
	
	ПараметрыМетода = Новый Структура();
	ПараметрыМетода.Вставить("Сортировка", null);
	ПараметрыМетода.Вставить("Навигация",  null);
	ПараметрыМетода.Вставить("ДопПоля",    Новый Массив);
	ПараметрыМетода.Вставить("Фильтр",     Новый Структура());
	
	ПараметрыМетода.Фильтр.Вставить("s", Новый Массив);
	ПараметрыМетода.Фильтр.Вставить("f", 0);
	ПараметрыМетода.Фильтр.Вставить("d", Новый Массив);
	ПараметрыМетода.Фильтр.Вставить("_type", "record");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("n", "Справочник");
	СтруктураПараметров.Вставить("t", "Строка");
	
	ПараметрыМетода.Фильтр.s.Добавить(СтруктураПараметров);
	
	ПараметрыМетода.Фильтр.d.Добавить(ИмяСправочника);
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("protocol",  6);
	
	result = ОбъектОбработки.local_helper_exec_method(
		context_params,
		"Классификаторы.ПолучитьСправочникЦеликом",
		ПараметрыМетода,
		Истина,
		ДопПараметры,
		context_params.api_url + "/service/?srv=1");
		
	Результат = result.Получить("result");
	
	Возврат Результат["d"];
	
КонецФункции

// Записывает строку JSON в указанный файл.
// Напрямую нигде не вызывается, а используется при отладке, когда онлайн возвращает большой JSON,
// который не помещается в табло.
//
// Параметры:
//  ИмяФайла - Строка - полный путь к файлу для записи.
//  СтрокаJSON - Строка - строка в формате JSON
//
// Возвращаемое значение:
//   Булево - всегда Истина.
//
Функция ЗаписатьJSONВФайл(ИмяФайла, СтрокаJSON) Экспорт
	
	Запись = Новый ЗаписьJSON();
	Запись.ОткрытьФайл(ИмяФайла);
	Запись.ЗаписатьБезОбработки(СтрокаJSON);
	Запись.Закрыть();
	
	Возврат Истина;
	
КонецФункции

// Получает таблицу значений из менеджера временных таблиц.
// Напрямую не вызывается, но используется для отладки запросов с менеджером временных таблиц.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц
//  ИмяТаблицы - Строка - имя таблицы из менеджера временных таблиц
//
// Возвращаемое значение:
//   ТаблицаЗначений - талица данных из менеджера временных таблиц
//
Функция ПолучитьТаблицуМенеджераВременныхТаблиц(МенеджерВременныхТаблиц, ИмяТаблицы) Экспорт
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанных.Текст = СтрЗаменить("ВЫБРАТЬ * ИЗ &ИмяТаблицы", "&ИмяТаблицы", ИмяТаблицы);
	
	Возврат ЗапросДанных.Выполнить().Выгрузить();
	
КонецФункции

// Получает ссылку на объект информационной базы по навигационной ссылке.
//
// Параметры:
//  НавигационнаяСсылка - Строка - навигационная ссылка на объект информационной базы.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на объект информационной базы
//
Функция СсылкаПоНавигационнойСсылке(НавигационнаяСсылка) Экспорт
	
	РезультатФункции = Неопределено;
	
	ПрефиксМетаданных = "e1cib/data/";
	ПрефиксСсылки     = "?ref=";
	
	ПозицияМетаданных     = СтрНайти(НавигационнаяСсылка, ПрефиксМетаданных) + СтрДлина(ПрефиксМетаданных);
    ПозицияПрефиксаСсылки = СтрНайти(НавигационнаяСсылка, ПрефиксСсылки);
	
	Если ПозицияПрефиксаСсылки <> 0 Тогда
		ПозицияСсылки         = ПозицияПрефиксаСсылки + СтрДлина(ПрефиксСсылки);
		
		ИдентификаторСсылки   = Сред(НавигационнаяСсылка, ПозицияСсылки);
		
		ПредставлениеТипа     = Сред(НавигационнаяСсылка, ПозицияМетаданных, ПозицияПрефиксаСсылки - ПозицияМетаданных);
		ПустаяСсылка          = ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка");
		
	    ШаблонЗначения = ЗначениеВСтрокуВнутр(ПустаяСсылка);
	    ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", ИдентификаторСсылки);
	    РезультатФункции = ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
		
		Если Не СсылкаСуществует(РезультатФункции) Тогда
			РезультатФункции = ПустаяСсылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Проверяет физическое наличие записи в информационной базе данных о переданном значении ссылки.
//
// Параметры:
//  ПроверяемаяСсылка - ЛюбаяСсылка - значение любой ссылки информационной базы данных.
// 
// Возвращаемое значение:
//  Булево - Истина, если существует.
//
Функция СсылкаСуществует(ПроверяемаяСсылка) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	&ИмяТаблицы КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ПроверяемаяСсылка.Метаданные().ПолноеИмя());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ПроверяемаяСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Получает значение из соответствия по указанному пути, учитывая вложенность.
// Например: ДанныеСоответствия(Вложение, "1110339.Файл.Документ.ДатИнфГО") получит данные по ключу ДатИнфГО,
//           учитывая вложенность. Если какого-либо ключа не существует, вернется значение Неопределено.
//
// Параметры:
//  Соответствие - Соответствие - соответствие данные которого нужно получить
//  Путь - Строка - имена ключей через точку
//  ЗначениеПоУмолчанию - Произвольный - значение, которое нужно присвоить в случае незаполненного значения.
//
// Возвращаемое значение:
//   Произвольный - значение полученное из соответствия с учетом вложенности.
//
Функция ДанныеСоответствия(Соответствие, Путь, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	РезультатФункции = ПоискРезультатаВКоллекции(Соответствие, Путь);
	
	Если РезультатФункции = Неопределено Тогда
		РезультатФункции = ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Получает значение из структуры по указанному пути, учитывая вложенность.
// Например: ДанныеСоответствия(Вложение, "1110339.Файл.Документ.ДатИнфГО") получит данные по ключу ДатИнфГО,
//           учитывая вложенность. Если какого-либо ключа не существует, вернется значение Неопределено.
//
// Параметры:
//  Структура - Структура - структура данные которой нужно получить
//  Путь - Строка - имена ключей через точку
//  ЗначениеПоУмолчанию - Произвольный - значение, которое нужно присвоить в случае незаполненного значения.
//
// Возвращаемое значение:
//   Произвольный - значение полученное из соответствия с учетом вложенности.
//
Функция ДанныеСтруктуры(Структура, Путь, ЗначениеПоУмолчанию = Неопределено) Экспорт	
	
	РезультатФункции = ПоискРезультатаВКоллекции(Структура, Путь);
	
	Если РезультатФункции = Неопределено Тогда
		РезультатФункции = ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Получает данные печатной формы документа с онлайна.
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на документ ЭТрН
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор формы,
//    в хранилище которой будет помещены двоичные данные.
//
// Возвращаемое значение:
//   Структура - структура данных печатной формы полученной с онлайна.
//     * АдресДвоичныхДанных - Строка - адрес двоичных данных печатной формы
//     * СсылкаНаПрисоединенныйФайл - СправочникСсылка.Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы - ссылка на
//       справочник с присоединенным файлом печатной формы.
//     * ОписаниеОшибки - Строка - описание ошибки получения печтаной формы с онлайна.
//     * СписокДокументов - Массив - данные документов с ошибкой.
//
Функция ДанныеПечатнойФормыДляОткрытия(СсылкаНаДокумент, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("АдресДвоичныхДанных",        Неопределено);
	РезультатФункции.Вставить("СсылкаНаПрисоединенныйФайл", Неопределено);
	РезультатФункции.Вставить("ОписаниеОшибки",             "");
	РезультатФункции.Вставить("СписокДокументов",           Неопределено);
	
	Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		РезультатФункции.ОписаниеОшибки = "Документ еще ни разу не сохранен. Печатная форма недоступна.";
		Возврат РезультатФункции;
	КонецЕсли;
	
	ПараметрыЗагрузки = Saby_ТНЗагрузкаСервер.ПараметрыЗагрузкиПечатнойФормыИзСбис(
		СсылкаНаДокумент, , УникальныйИдентификаторФормы);
	
	Если Не ЗначениеЗаполнено(ПараметрыЗагрузки.УИДСбис) Тогда
		РезультатФункции.ОписаниеОшибки = "Документ не выгружен в СБИС. Печатная форма недоступна.";
		РезультатФункции.СписокДокументов = ПараметрыЗагрузки.СписокДокументов;
		Возврат РезультатФункции;
	КонецЕсли;
	
	ХранитьПечатныеФормыВБД = Константы.Saby_ХранитьПечатныеФормыВБД.Получить();
	
	Если ХранитьПечатныеФормыВБД Тогда
		
		СсылкаНаПрисоединенныйФайл = Saby_ТНЗагрузкаСервер.ЗагрузитьПечатнуюФормуДокументаИзСбис(
			ПараметрыЗагрузки,
			,
			ХранитьПечатныеФормыВБД);

		Если Не ЗначениеЗаполнено(СсылкаНаПрисоединенныйФайл) Тогда
			РезультатФункции.ОписаниеОшибки = "Не удалось получить печатную форму из СБИС.";
		Иначе
			РезультатФункции.СсылкаНаПрисоединенныйФайл = СсылкаНаПрисоединенныйФайл;
		КонецЕсли;
		
	Иначе
		
		АдресДвоичныхДанныхФайла = Saby_ТНЗагрузкаСервер.АдресДвоичныхДанныхФайла(ПараметрыЗагрузки);
		Если Не ЗначениеЗаполнено(АдресДвоичныхДанныхФайла) Тогда
			РезультатФункции.ОписаниеОшибки = "Не удалось получить печатную форму из СБИС.";
		Иначе
			РезультатФункции.АдресДвоичныхДанных = АдресДвоичныхДанныхФайла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Получает все необходимые данные физ лиц для обмена с онлайном.
//
// Параметры:
//  МассивФизлиц - Массив - массив из ссылок СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение:
//   Соответствие - ключами соответствия являются ссылки на ФизЛицо, а значениями - структура данных физлица.
//     Структура данных физлица содержит:
//       * Фамилия - Строка
//       * Имя - Строка
//       * Отчество - Строка
//       * ИНН - Строка
//       * Номер - Строка - номер водительского удостоверения
//       * Серия - Строка - серия водительского удостоверения
//       * ДатаВыдачи - Дата - дата выдачи водительского удостоверения
//       * Телефоны - Строка
//
Функция ФиоИВУФизЛиц(МассивФизлиц) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПолучитьДанныеФизлиц(МассивФизлиц, МенеджерВременныхТаблиц);
	ПолучитьВУФизлиц(МассивФизлиц, МенеджерВременныхТаблиц);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Телефон          = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ЭлектроннаяПочта = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	
	ЗапросДанных.УстановитьПараметр("Телефон",          Телефон);
	ЗапросДанных.УстановитьПараметр("ЭлектроннаяПочта", ЭлектроннаяПочта);
	
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	РеквизитыФизлиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РеквизитыФизлиц.Наименование КАК Наименование,
	|	РеквизитыФизлиц.ИНН КАК ИНН,
	|	РеквизитыФизлиц.Фамилия КАК Фамилия,
	|	РеквизитыФизлиц.Имя КАК Имя,
	|	РеквизитыФизлиц.Отчество КАК Отчество,
	|	ЕСТЬNULL(ВУФизлиц.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ВУФизлиц.Серия, """") КАК Серия,
	|	ЕСТЬNULL(ВУФизлиц.ДатаВыдачи, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаВыдачи
	|ИЗ
	|	РеквизитыФизлиц КАК РеквизитыФизлиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВУФизлиц КАК ВУФизлиц
	|		ПО РеквизитыФизлиц.ФизическоеЛицо = ВУФизлиц.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТелефоныЭлектроннаяПочтаФизлиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТелефоныЭлектроннаяПочтаФизлиц.Представление КАК Представление
	|ИЗ
	|	ТелефоныЭлектроннаяПочтаФизлиц КАК ТелефоныЭлектроннаяПочтаФизлиц
	|ГДЕ 
	|   ТелефоныЭлектроннаяПочтаФизлиц.Тип = &Телефон 
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТелефоныЭлектроннаяПочтаФизлиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТелефоныЭлектроннаяПочтаФизлиц.Представление КАК Представление
	|ИЗ
	|	ТелефоныЭлектроннаяПочтаФизлиц КАК ТелефоныЭлектроннаяПочтаФизлиц
	|ГДЕ
    |   ТелефоныЭлектроннаяПочтаФизлиц.Тип = &ЭлектроннаяПочта
	|
	|";
	
	РезультатЗапроса        = ЗапросДанных.ВыполнитьПакет();
	Выборка                 = РезультатЗапроса[0].Выбрать();
	ВыборкаТелефоны         = РезультатЗапроса[1].Выбрать();
	ВыборкаЭлектроннаяПочта = РезультатЗапроса[2].Выбрать();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	Соответствие = Новый Соответствие;
	Пока Выборка.Следующий() Цикл 
		
		ВыборкаТелефоны.Сбросить();
		ВыборкаЭлектроннаяПочта.Сбросить();
		
		Если ПустаяСтрока(Выборка.Фамилия) Тогда
			ИсточникФИО = ФИОИзСтроки(Выборка.Наименование);						
		Иначе			
			ИсточникФИО = Выборка;			
		КонецЕсли;
				
		Структура = Новый Структура;
		Структура.Вставить("Фамилия",    ИсточникФИО.Фамилия);
		Структура.Вставить("Имя",        ИсточникФИО.Имя);
		Структура.Вставить("Отчество",   ИсточникФИО.Отчество);
		Структура.Вставить("ИНН",        Выборка.ИНН);
		Структура.Вставить("Номер",      Выборка.Номер);
		Структура.Вставить("Серия",      Выборка.Серия);
		Структура.Вставить("ДатаВыдачи", Выборка.ДатаВыдачи);
		
	    Отбор = Новый Структура;
		Отбор.Вставить("ФизическоеЛицо", Выборка.ФизическоеЛицо);
		
		МассивТелефонов	= Новый Массив;		
		Пока ВыборкаТелефоны.НайтиСледующий(Отбор) Цикл
			МассивТелефонов.Добавить(ВыборкаТелефоны.Представление);
		КонецЦикла;
				
		МассивЭлектроннаяПочта = Новый Массив;
		Пока ВыборкаЭлектроннаяПочта.НайтиСледующий(Отбор) Цикл
			МассивЭлектроннаяПочта.Добавить(ВыборкаЭлектроннаяПочта.Представление);
		КонецЦикла;
		
		Структура.Вставить("Телефоны",         ЗначениеВСтрокуВнутр(МассивТелефонов));
		Структура.Вставить("ЭлектроннаяПочта", ЗначениеВСтрокуВнутр(МассивЭлектроннаяПочта));
		
		Соответствие.Вставить(Выборка.ФизическоеЛицо, Структура);
		
	КонецЦикла;

	Возврат Соответствие;
	
КонецФункции

// Преобразует ФИО из строки в структуру
// Параметры:
//  СтрокаФИО - Строка - ФИО строкой
// Возвращаемое значение:
//  Структура - Фамилия, Имя, Отчество полученные из строки
//
Функция ФИОИзСтроки(СтрокаФИО) Экспорт
	
	ЧастиФИО = СтрРазделить(СтрокаФИО, " ", Ложь);
	
	ПозицияИмя      = 1;
	ПозицияОтчество = 2;
	
	Фамилия  = ?(ЧастиФИО.Количество(),                   ЧастиФИО[0], "");
	Имя      = ?(ЧастиФИО.Количество() > ПозицияИмя,      ЧастиФИО[1], "");
	Отчество = ?(ЧастиФИО.Количество() > ПозицияОтчество, ЧастиФИО[2], "");

	Структура = Новый Структура;
	Структура.Вставить("Фамилия",  Фамилия);
	Структура.Вставить("Имя",      Имя);
	Структура.Вставить("Отчество", Отчество);
	
	Возврат Структура;
		
КонецФункции

// Возвращает структуру синонимов доступных баз
//
// Возвращаемое значение:
//   Структура - значениями являются синонимы конфигураций
//
Функция ДоступныеКонфигурации() Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Бух3", "Бухгалтерия предприятия, редакция 3.0");
	РезультатФункции.Вставить("ЕРП",  "1С:ERP Управление предприятием 2");
	РезультатФункции.Вставить("КА",   "1С:Комплексная автоматизация 2");
	РезультатФункции.Вставить("УТ",   "Управление торговлей, редакция 11");
	РезультатФункции.Вставить("УАТ",  "Управление автотранспортом Проф, редакция 2.2");
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ЭтоДоступнаяКонфигурация(СинонимКонфигурации, ДоступныеКонфигурации) Экспорт
	
	РезультатФункции = Ложь;
	
	Для Каждого КлючЗначение Из ДоступныеКонфигурации Цикл
		Если КлючЗначение.Значение = СинонимКонфигурации Тогда
			РезультатФункции = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает с структуру данных транспортного средства
//
// Возвращаемое значение:
//   Структура - см. в самой функции
//
Функция СтруктураДанныхТранспортногоСредства() Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Вид",                  Перечисления.Saby_ВидыТС.ПустаяСсылка());
	РезультатФункции.Вставить("РегистрационныйНомер", "");
	РезультатФункции.Вставить("ИнвентарныйНомер",     "");
	РезультатФункции.Вставить("Тип",                  "");
	РезультатФункции.Вставить("Марка",                "");
	РезультатФункции.Вставить("Модель",               "");
	РезультатФункции.Вставить("ВИН",                  "");
	РезультатФункции.Вставить("НомерСТС",             "");
	РезультатФункции.Вставить("Грузоподъемность",     0);
	РезультатФункции.Вставить("Вместимость",          0);
	РезультатФункции.Вставить("ТипВладения",          Перечисления.Saby_ТипыВладенияТС.ПустаяСсылка());
	РезультатФункции.Вставить("ОснованияВладения",    "");
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает с структуру данных ответственного лица
//
// Возвращаемое значение:
//   Структура - см. в самой функции
//
Функция СтруктураДанныхОтветственногоЛица() Экспорт

	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Роль",                  Перечисления.Saby_РолиОтветственных.ПустаяСсылка());
	РезультатФункции.Вставить("Фамилия",               "");
	РезультатФункции.Вставить("Имя",                   "");
	РезультатФункции.Вставить("Отчество",              "");
	РезультатФункции.Вставить("ИНН",                   "");
	РезультатФункции.Вставить("Серия",                 "");
	РезультатФункции.Вставить("Номер",                 "");
	РезультатФункции.Вставить("ДатаВыдачи",            "");
	РезультатФункции.Вставить("ДатаОкончанияДействия", "");
	РезультатФункции.Вставить("Телефоны",              "");
	РезультатФункции.Вставить("ЭлектроннаяПочта",      "");
	РезультатФункции.Вставить("Должность",             "");

	Возврат РезультатФункции;
		
КонецФункции 

// Обновляет декорацию с ошибкой
// Параметры:
//  Форма - Форма - источник вызова
//  ПараметрыВыделенияДекорации - Структура - параметры выделения
//
Процедура ОбновитьДекорацию(Форма, Знач ПараметрыВыделенияДекорации) Экспорт
	
	Для Каждого ИмяДекорации Из ПараметрыВыделенияДекорации.Выделить Цикл
		Форма.Элементы[ИмяДекорации].ЦветРамки = ЦветаСтиля.ЦветАктивности;
		Форма.Элементы[ИмяДекорации].Подсказка = "Необходимо заполнить";
	КонецЦикла;
	
	Для Каждого ИмяДекорации Из ПараметрыВыделенияДекорации.ОтменитьВыделение Цикл
		Форма.Элементы[ИмяДекорации].ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
		Форма.Элементы[ИмяДекорации].Подсказка = "";
	КонецЦикла;
	
КонецПроцедуры

#Область ПолучениеДанныхПоСсылке

// Возвращает все необходимые реквизиты транспортных средств из базы
//
// Параметры:
//  МассивСсылокТС - Массив - массив ссылок на транспортные средства
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц с таблицей ТаблицаТранспортныхСредств
//
// Возвращаемое значение:
//   Соответствие - соответствие структур реквизитов по ссылкам на транспортные средства.
//     * Ключ - СправочникСсылка - ссылка на транспортное средство
//     * Значение - Структура - см. функцию СтруктураДанныхТранспортногоСредства()
//
Функция РеквизитыТранспортныхСредств(МассивСсылокТС, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Если МассивСсылокТС = Неопределено И МенеджерВременныхТаблиц = Неопределено Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	ИмяКонфигурации = ИмяКонфигурации();
	ДоступныеКонфигурации = ДоступныеКонфигурации();
	
	Если ИмяКонфигурации = ДоступныеКонфигурации.УАТ Тогда
		Возврат ДанныеТранспортныхСредствИзКонфигурацииУАТ(МассивСсылокТС, МенеджерВременныхТаблиц);
	Иначе
		Возврат ДанныеТранспортныхСредствИзДругихКонфигураций(МассивСсылокТС, МенеджерВременныхТаблиц);
	КонецЕсли;
	
КонецФункции

#КонецОбласти // ПолучениеДанныхПоСсылке

#Область Заполнение_С_Контролем

Функция ПараметрыСвойстваСКонтролем(Приемник, Источник) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Приемник",  Приемник);
	Параметры.Вставить("Источник",  Источник);
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗаполнитьСвойствоСКонтролем(Параметры, ИмяРеквизита, ИмяСвойства = "", ВЧисло = Ложь) Экспорт
	
	Приемник = Параметры.Приемник; 
	Источник = Параметры.Источник;  
	
	Если ПустаяСтрока(ИмяСвойства) Тогда 
		ИмяСвойства = ИмяРеквизита;
	КонецЕсли;
		
	// Проверка На значениение заполнено не совсем корректно, так как данные могут затираться
	Если Источник[ИмяСвойства] <> Неопределено Тогда
		Если ВЧисло Тогда
			Приемник[ИмяРеквизита] = ЧислоИзСтроки(Источник[ИмяСвойства]);
		Иначе                                             		
			Приемник[ИмяРеквизита] = Источник[ИмяСвойства]; 		
		КонецЕсли;	                                      
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Заполнение_С_Контролем

#Область ПроцедурыОбновления

// Операции для выполнения перехода на версию 23.6200 с более ранней версии.
//
// Возвращаемое значение:
//   Структура - структура результат перехода.
//
Функция РезультатПереходаНа236200() Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ОК",             Истина);
	РезультатФункции.Вставить("ОписаниеОшибки", "");
	
	ИмяКонфигурации = ИмяКонфигурации();
	ДоступныеКонфигурации = ДоступныеКонфигурации();
	
	Если ИмяКонфигурации <> ДоступныеКонфигурации.УАТ Тогда
		РезультатФункции = ПеренестиДанныеТранспортныхСредствВДокумент();
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Операции для выполнения перехода на версию 24.2160 с более ранней версии.
//
// Возвращаемое значение:
//   Структура - структура результат перехода.
//
Функция РезультатПереходаНа242160() Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ОК",             Истина);
	РезультатФункции.Вставить("ОписаниеОшибки", "");
	
	РезультатПереносаСторон = Справочники.Saby_ДокументыЭПД.ПеренестиДанныеСторонНепосредственноВДокумент();
	
	РезультатФункции.ОК = РезультатФункции.ОК И РезультатПереносаСторон.ОК;
	РезультатФункции.ОписаниеОшибки = РезультатФункции.ОписаниеОшибки + РезультатПереносаСторон.ОписаниеОшибки;
	
	РезультатЗаполненияРолиВодителя = Документы.Saby_ТранспортнаяНакладная.ЗаполнитьРольВодителяВоВсехДокументах();
	
	РезультатФункции.ОК = РезультатФункции.ОК И РезультатЗаполненияРолиВодителя.ОК;
	РезультатФункции.ОписаниеОшибки = РезультатФункции.ОписаниеОшибки + РезультатЗаполненияРолиВодителя.ОписаниеОшибки;
	
	РезультатПереносаОтветственного = Документы.Saby_ТранспортнаяНакладная.ПеренестиОтветственногоВТабличнуюЧасть();
	
	РезультатФункции.ОК = РезультатФункции.ОК И РезультатПереносаОтветственного.ОК;
	РезультатФункции.ОписаниеОшибки = РезультатФункции.ОписаниеОшибки + РезультатПереносаОтветственного.ОписаниеОшибки;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ПроцедурыОбновления

// Возвращает общие параметры для загрузки и выгрузки
//
// Параметры:
//  context_params - Структура - параметры подключения к СБИС
//
// Возвращаемое значение:
//   Структура - основные параметры используемые для выгрузки и загрузки
//
Функция ОбщиеПараметрыВыгрузкиЗагрузки(context_params) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("context_params",  context_params);
	РезультатФункции.Вставить("ОбъектОбработки", Обработки.SABY.Создать());
	
	РезультатФункции.Вставить("ЗагружатьПечатнуюФорму", Константы.Saby_ХранитьПечатныеФормыВБД.Получить());
	
	Возврат РезультатФункции;
	
КонецФункции

// Извлекает текстовое представление ошибки из json-структуры ошибки полученной от СБИС
//
// Параметры:
//  Описание - Строка - json с описанием ошибки, полученной от СБИС
//
// Возвращаемое значение:
//   Строка - описание ошибки
//
Функция ПричинаОшибки(Описание) Экспорт
	
	Попытка
		Структура = ЗначениеИзСтрокиВнутр(Описание);
	Исключение
		// может прийти не десеарилизуемая строка
		Возврат Описание;
	КонецПопытки;
    	
	Если ТипЗнч(Структура.detail) = Тип("Строка") Тогда 
		ПодробноеОписание = Структура.detail;		
	ИначеЕсли ЗначениеЗаполнено(Структура.detail) Тогда  
		ПодробноеОписание = Структура.detail["error"]["details"];
	Иначе
		ПодробноеОписание = "";
	КонецЕсли;	
	
	ТекстОшибки = Структура.message + ?(ПустаяСтрока(ПодробноеОписание), "", " - " + ПодробноеОписание);
	
	Возврат ТекстОшибки; 
	
КонецФункции	

// Обновляет данные в регистре Saby_Состояние по документу.
//
// Параметры:
//  Параметры - Структура - данные для записи
//
Процедура ОбновитьДанныеСостояния(Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.ИД) Тогда
		Возврат;
	КонецЕсли;	                                                       
	
	Если Не Параметры.Свойство("Аккаунт") 
		Или Не ЗначениеЗаполнено(Параметры.Аккаунт) Тогда 
		
		Аккаунт = АвторизованныйАккаунтСтрокой();
		
	Иначе	
		
		Аккаунт = Параметры.Аккаунт;
		
	КонецЕсли;
	
	РегистрыСведений.Saby_Состояние.ОбновитьПоUID(
		Параметры.ИД, , 
		Аккаунт, 
		СокрЛП(Параметры.АктивныйЭтап), 
		Параметры.Состояние, 
		Параметры.Ссылка, , ,
		Параметры.СбисИД);	
		
КонецПроцедуры

// Считывает данные из регистра Saby_Состояние по документу.
//
// Параметры:
//  Ссылка - ДокументСсылка - документ для получения данных
// 
// Возвращаемое значение:
//   Выборка - найденная из регистра запись или неопределенно
//
Функция ДанныеСостоянияОбъекта(Ссылка) Экспорт
	
	Аккаунт = АвторизованныйАккаунтСтрокой();
	Данные = РегистрыСведений.Saby_Состояние.ПрочитатьПоОбъекту(Ссылка, , Аккаунт);
	
	Возврат Данные;
	
КонецФункции

// Записывает ошибки загрузки документов в журнал регистрации.
//
// Параметры:
//  СписокДокументов - Соответствие - ошибки по документам
//
Процедура ЗаписьОшибокВЖурналРегистрации(СписокДокументов) Экспорт
	
	Если ТипЗнч(СписокДокументов) <> Тип("Соответствие") Тогда
		Возврат; 
	КонецЕсли;
		
	Если СписокДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОшибкиДокумента Из СписокДокументов Цикл   
		
		МассивОшибок = ОписанияОшибок(ОшибкиДокумента.Значение.СписокОшибок);
		
		Описание = "Не выгружен документ " + СокрЛП(ОшибкиДокумента.Ключ);
		Текст    = СтрСоединить(МассивОшибок, Символы.ПС);
		
		ЗаписатьОшибкуВЖурналРегистрации(ОшибкиДокумента.Ключ, Описание, Текст);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРеквизитыИзБД(СтруктураДанных, СсылкаНаДокумент,
		ПсевдонимыРеквизитов, ТекстЗапросаРеквизитов) Экспорт
		
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаРеквизитов);
	
	НужныеКолонки = Новый Соответствие;
	Для Каждого ПсевдонимРеквизита Из ПсевдонимыРеквизитов Цикл
		НужныеКолонки.Вставить(ПсевдонимРеквизита, Истина);
	КонецЦикла;
	
	Колонки = СхемаЗапроса.ПакетЗапросов[0].Колонки;
	
	ИндексКолонки = 0;
	Пока ИндексКолонки < Колонки.Количество() Цикл
		
		Псевдоним = Колонки[ИндексКолонки].Псевдоним;
		
		Если НужныеКолонки[Псевдоним] = Неопределено Тогда
			Колонки.Удалить(ИндексКолонки);
		Иначе
			ИндексКолонки = ИндексКолонки + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	ЗапросДанных.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	МассивДанных = ОбщегоНазначения.ТаблицаЗначенийВМассив(ЗапросДанных.Выполнить().Выгрузить());
	
	СтруктураДанных.Вставить("Реквизиты", МассивДанных[0]);
	
КонецПроцедуры

Процедура ДобавитьТаблицыИзБД(СтруктураДанных, СсылкаНаДокумент, Таблицы,
		ШаблонЗапросаТаблиц, НестандартныеЗапросыТаблиц) Экспорт
	
	МассивЗапросов = Новый Массив;
	
	ЗапросДанных = Новый Запрос;
	
	Для Каждого ИмяТаблицы Из Таблицы Цикл
		
		ТекстЗапроса = НестандартныеЗапросыТаблиц.Получить(ИмяТаблицы);
		Если ТекстЗапроса = Неопределено Тогда
			ТекстЗапроса = СтрШаблон(ШаблонЗапросаТаблиц, ИмяТаблицы);
		КонецЕсли;
		
		МассивЗапросов.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	РазделительЗапросов = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ЗапросДанных.Текст = СтрСоединить(МассивЗапросов, РазделительЗапросов);
	ЗапросДанных.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Результат = ЗапросДанных.ВыполнитьПакет();
	Индекс = 0;
	Пока Индекс < Таблицы.Количество() Цикл
		СтруктураДанных.Вставить(Таблицы[Индекс], Результат[Индекс].Выгрузить());
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция РеквизитыДокументовСбис(МассивДокументов) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивДокументов);
	
	Запрос.Текст =	
	"ВЫБРАТЬ
	|	ДокументыЭПД.Наименование КАК Наименование,
	|	ДокументыЭПД.Номер КАК Номер,
	|	ДокументыЭПД.Дата КАК Дата,
	|	ДокументыЭПД.Дата КАК ДатаВремя,
	|	ДокументыЭПД.ДопСведения КАК ДополнительныеСведения,
	|	ДокументыЭПД.Ссылка КАК Ссылка,
	|	ДокументыЭПД.Тип КАК Тип
	|ИЗ
	|	Справочник.Saby_ДокументыЭПД КАК ДокументыЭПД
	|ГДЕ
	|	ДокументыЭПД.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыЭПДДанныеЮрЛиц.Ссылка КАК Ссылка,
	|	ДокументыЭПДДанныеЮрЛиц.НаименованиеОрганизации КАК Наименование,
	|	ДокументыЭПДДанныеЮрЛиц.ИНН КАК ИНН,
	|	ДокументыЭПДДанныеЮрЛиц.КПП КАК КПП,
	|	ДокументыЭПДДанныеЮрЛиц.СтранаРегистрации КАК Страна,
	|	ДокументыЭПДДанныеЮрЛиц.ОГРН КАК ОГРН,
	|	ДокументыЭПДДанныеЮрЛиц.ЮрФизЛицо КАК ЮрФизЛицо
	|ИЗ
	|	Справочник.Saby_ДокументыЭПД.ДанныеЮрЛиц КАК ДокументыЭПДДанныеЮрЛиц
	|ГДЕ
	|	ДокументыЭПДДанныеЮрЛиц.Ссылка В(&МассивСсылок)";
	
	ИмяКонфигурации = ИмяКонфигурации();
	ДоступныеКонфигурации = ДоступныеКонфигурации();
	
	Если ИмяКонфигурации = ДоступныеКонфигурации.УАТ Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"ДокументыЭПДСтороны.Сторона.РегистрационныйНомер",
			"&ПустаяСтрока");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументов = РезультатЗапроса[0].Выбрать();
	РеквизитыСторон   = РезультатЗапроса[1].Выгрузить();
				
	Соответствие = Новый Соответствие;
	
	КолонкиИсключения = Новый Массив;
	КолонкиИсключения.Добавить("Ссылка");	
	
	Пока ВыборкаДокументов.Следующий() Цикл 
		
		ПараметрыСтроки = СтрокаТаблицыЗначенийВСтруктуру(
			ВыборкаДокументов, КолонкиИсключения);
		ПараметрыСтроки.Дата = Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(ПараметрыСтроки.Дата, Истина);
		
		// добавим стороны документа                   
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", ВыборкаДокументов.Ссылка);
		
		МассивСторон = Новый Массив;                 
				
		НайденныеСтроки = РеквизитыСторон.НайтиСтроки(Отбор);
		Для Каждого Сторона Из НайденныеСтроки Цикл
			
			ПараметрыСтороны = Новый Структура;
			ПараметрыСтороны.Вставить("Наименование", Сторона.Наименование);
									
			// наименование органа исполнительной власти выдавшего документ
			// пока не храним это значение			
			Если Сторона.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ЮрЛицо 
				Или Сторона.ЮрФизЛицо = ЗначениеЮрФизЛицаКонфигурации("ЮрЛицо") Тогда
				
				ПараметрыСтороны.Вставить("ЮЛ", Новый Структура);
				ПараметрыСтороны.ЮЛ.Вставить("ИНН", Сторона.ИНН);
				
			ИначеЕсли Сторона.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ЮрЛицоНеРезидент 
				Или Сторона.ЮрФизЛицо = ЗначениеЮрФизЛицаКонфигурации("ЮрЛицоНеРезидент") Тогда 
				
			    СтруктураИнЛица = Saby_ТНВыгрузкаСервер.ШаблонИностранногоЛица();
				
				// Поиск будет только по наименованию				
				СтруктураИнЛица.Страна       = СокрЛП(Сторона.Страна);
				СтруктураИнЛица.Наименование = Сторона.Наименование;
				
				ПараметрыСтороны.Вставить("ИностранноеЛицо", СтруктураИнЛица);				
				
			Иначе  
				
				// Физ или ИП
				ПараметрыСтороны.Вставить("ФЛ", Новый Структура);
				ПараметрыСтороны.ФЛ.Вставить("ИНН", Сторона.ИНН);
				
			КонецЕсли;
			
			МассивСторон.Добавить(ПараметрыСтороны);
			
		КонецЦикла;
		
		ПараметрыСтроки.Вставить("Стороны", МассивСторон);
		
		Соответствие.Вставить(ВыборкаДокументов.Ссылка, ПараметрыСтроки);
				
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

Процедура ДозаполнитьНовыеЭлементыДаннымиСОнлайна(ТекстЗапроса, МенеджерСправочника) Экспорт
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст = ТекстЗапроса;
	
	ЗапросДанных.УстановитьПараметр("Идентификатор", МенеджерСправочника.ИдентификаторДозаполнения());
	
	МассивНаименований = Новый Массив;
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		Наименование = МенеджерСправочника.ПреобразоватьНаименование(ВыборкаДанных.Наименование);
		МассивНаименований.Добавить(Наименование);
	КонецЦикла;
	
	Если МассивНаименований.Количество() > 0 Тогда
		
		МенеджерСправочника.ЗагрузитьСОнлайна(МассивНаименований);
		
		ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
		Пока ВыборкаДанных.Следующий() Цикл
			ОбъектСправочника = ВыборкаДанных.Ссылка.ПолучитьОбъект();
			ОбъектСправочника.Идентификатор = "";
			ОбъектСправочника.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураПредставленияТитула(ТипТитула, КодТитула, ИмяПодстановки = "") Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("КодТитула",      КодТитула);
	РезультатФункции.Вставить("ИмяПодстановки", ИмяПодстановки);
	
	Имя           = "";
	Представление = "";
	Если Не ТипТитула.Пустая() Тогда
		МетаданныеПеречисления = ТипТитула.Метаданные();
		ИндексТипа = Перечисления[МетаданныеПеречисления.Имя].Индекс(ТипТитула);
		МетаданныеПеречисления = МетаданныеПеречисления.ЗначенияПеречисления[ИндексТипа];
		Имя           = МетаданныеПеречисления.Имя;
		Представление = МетаданныеПеречисления.Синоним;
	КонецЕсли;
	
	РезультатФункции.Вставить("Имя",           Имя);
	РезультатФункции.Вставить("Представление", Представление);
	
	Возврат РезультатФункции;
	
КонецФункции

// Установка отбора в динамическом списке по аккаунту
//  Параметры:
// 	 Список - ДинамическийСписок - список для установки отбора
//
Процедура УстановитьПараметрАккаунтаВСписке(Список) Экспорт
	
	Аккаунт = АвторизованныйАккаунтСтрокой();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список,
		"Аккаунт",
		Аккаунт);
	
КонецПроцедуры

// Найдем ответсвенного по роли или идентификатору строки
// Параметры:
// 	ОтветственныеЛица   - ТаблицаЗначений - ответсвенные лица документа ЭПД  
// 	РольСтрокой         - Строка          - представление роли из перечисления "Saby_РолиОтветственных"  
//  ИдентификаторСтроки - Число           - идентификатор строки ТаблицыЗначений
//   
// Возвращаемое значение:
// 	СтрокаТаблицыЗначений - строка с нужной ролью
//
Функция СтруктураОтветственного(Знач ОтветственныеЛица, Знач РольСтрокой, Знач ИдентификаторСтроки = Неопределено) Экспорт
	
	РезультатФункции   = Saby_ТНОбщегоНазначенияКлиентСервер.СтруктураОтветственногоЛица();
	
	ЭтоТаблицаЗначений = ТипЗнч(ОтветственныеЛица) = Тип("ТаблицаЗначений");
	
	Если ИдентификаторСтроки = Неопределено Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Роль", ПредопределенноеЗначение("Перечисление.Saby_РолиОтветственных." + РольСтрокой));
		
		НайденныеСтроки = ОтветственныеЛица.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ЗаполнитьЗначенияСвойств(РезультатФункции, НайденныеСтроки[0]);
			Если ЭтоТаблицаЗначений Тогда
				ИдентификаторСтроки = НайденныеСтроки[0].КлючСтроки;
			Иначе	
				ИдентификаторСтроки = НайденныеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
			
			РезультатФункции.ИдентификаторСтроки = ИдентификаторСтроки;
			
		Иначе
			РезультатФункции.Роль = СтруктураПоиска.Роль;
		КонецЕсли;
		
	Иначе
		
		Если ЭтоТаблицаЗначений Тогда
			СтрокаОтветственного = ОтветственныеЛица[ИдентификаторСтроки];
		Иначе 
			СтрокаОтветственного = ОтветственныеЛица.НайтиПоИдентификатору(ИдентификаторСтроки);
		КонецЕсли;
	
		ЗаполнитьЗначенияСвойств(РезультатФункции, СтрокаОтветственного);
		РезультатФункции.ИдентификаторСтроки = ИдентификаторСтроки;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция АвторизованныйАккаунтСтрокой() Экспорт
	
	Аккаунт = "";
	context_params = Saby_Core.ПроверитьНаличиеПараметровПодключения();
	Если context_params <> Неопределено Тогда
		Аккаунт = context_params.account;
	КонецЕсли;
	
	Возврат Аккаунт;
	
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеАдресов

Процедура ОбработатьЭлементАдресаКвартиры(ИсходнаяСтруктура, СтруктураАдреса)
	
	Если ИсходнаяСтруктура.Свойство("apartments") Тогда
		Для Каждого Данные Из ИсходнаяСтруктура.apartments Цикл
			Если Данные.type = "Г" Тогда
				СтруктураАдреса.Структура.Город = Данные.number;
			ИначеЕсли Данные.type = "Ул" Тогда
				СтруктураАдреса.Структура.Улица = Данные.number;
			ИначеЕсли Данные.type = "Квартира" Тогда
				СтруктураАдреса.Структура.Квартира = Данные.number;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьЭлементАдресаЗдания(ИсходнаяСтруктура, СтруктураАдреса)
	
	Если ИсходнаяСтруктура.Свойство("buildings") Тогда
		Для Каждого Данные Из ИсходнаяСтруктура.buildings Цикл
			Если Данные.type = "Корпус" Тогда
				СтруктураАдреса.Структура.Корпус = Данные.number;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ЗаполнениеАдресов

Функция НаименованиеДлительнойОперации(Ключ)
	Наименование = Новый Соответствие;
	Наименование.Вставить("ВыгрузитьВСбис", НСтр("ru = 'Загрузка документов в СБИС';
			                 					|en = 'Download documents to SBIS'"));
	Наименование.Вставить("ОбновитьДокументИзСбис", НСтр("ru = 'Синхронизация документов со СБИС';
			                 							|en = 'Document synchronization to SBIS'"));
	Возврат Наименование.Получить(Ключ);	
КонецФункции

#Область ФизЛица

Процедура ПолучитьДанныеФизлиц(МассивФизлиц, МенеджерВременныхТаблиц)
	
	НоваяЗапись = Справочники.ФизическиеЛица.СоздатьЭлемент();
	ЕстьФИО = Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(НоваяЗапись, "Фамилия");
	
	ТелефонЭлектроннаяПочта = Новый Массив;
	ТелефонЭлектроннаяПочта.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ТелефонЭлектроннаяПочта.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.УстановитьПараметр("МассивФизлиц",            МассивФизлиц);
	ЗапросДанных.УстановитьПараметр("ТелефонЭлектроннаяПочта", ТелефонЭлектроннаяПочта);
	
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ЕстьФИО Тогда
		ЗапросДанных.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВложенныйЗапрос.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВложенныйЗапрос.Фамилия КАК Фамилия,
		|	ВложенныйЗапрос.Имя КАК Имя,
		|	ВложенныйЗапрос.Отчество КАК Отчество,
		|	ВложенныйЗапрос.Порядок КАК Порядок
		|ПОМЕСТИТЬ ФИОФизлиц
		|ИЗ
		|	(ВЫБРАТЬ
		|		ФИОФизическихЛицСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
		|		ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
		|		ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
		|		ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество,
		|		1 КАК Порядок
		|	ИЗ
		|		РегистрСведений.ФИОФизическихЛиц.СрезПоследних(, ФизическоеЛицо В (&МассивФизлиц)) КАК ФИОФизическихЛицСрезПоследних
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ФизическиеЛица.Ссылка,
		|		ФизическиеЛица.Фамилия,
		|		ФизическиеЛица.Имя,
		|		ФизическиеЛица.Отчество,
		|		2
		|	ИЗ
		|		Справочник.ФизическиеЛица КАК ФизическиеЛица
		|	ГДЕ
		|		ФизическиеЛица.Ссылка В (&МассивФизлиц)) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Порядок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо";
	Иначе
		ЗапросДанных.Текст =
		"ВЫБРАТЬ
		|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
		|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
		|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
		|ПОМЕСТИТЬ ФИОФизлиц
		|ИЗ
		|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(, ФизическоеЛицо В (&МассивФизлиц)) КАК ФИОФизическихЛицСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо";
	КонецЕсли;
	
	ЗапросДанных.Выполнить();
	
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
	|	ФизическиеЛица.Наименование КАК Наименование,
	|	ФизическиеЛица.ИНН КАК ИНН,
	|	ЕСТЬNULL(ФИОФизлиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(ФИОФизлиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(ФИОФизлиц.Отчество, """") КАК Отчество
	|ПОМЕСТИТЬ РеквизитыФизлиц
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФИОФизлиц КАК ФИОФизлиц
	|		ПО (ФИОФизлиц.ФизическоеЛицо = ФизическиеЛица.Ссылка)
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&МассивФизлиц)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК ФизическоеЛицо,
	|   ФизическиеЛицаКонтактнаяИнформация.Тип КАК Тип,
	|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Представление
	|ПОМЕСТИТЬ ТелефоныЭлектроннаяПочтаФизлиц
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка В (&МассивФизлиц)
	|	И ФизическиеЛицаКонтактнаяИнформация.Тип В (&ТелефонЭлектроннаяПочта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ФИОФизлиц";
	
	ЗапросДанных.Выполнить();
	
КонецПроцедуры

Процедура ПолучитьВУФизлиц(МассивФизлиц, МенеджерВременныхТаблиц)
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.УстановитьПараметр("МассивФизлиц", МассивФизлиц);
	ЗапросДанных.УстановитьПараметр(
		"ВодительскоеУдостоверение", Справочники.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение);
	
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо КАК ФизическоеЛицо,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи
	|ПОМЕСТИТЬ ВУФизлиц
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|			,
	|			Физлицо В (&МассивФизлиц)
	|				И ВидДокумента = &ВодительскоеУдостоверение) КАК ДокументыФизическихЛицСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо";
	
	ЗапросДанных.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область ЮрЛица

Процедура ЗаполнитьДанныеЮрЛиц(ФормаОбъект, ТаблицаЮрЛиц, ТаблицаКИ = Неопределено)
	
	ВыборкаДанных = ВыборкаДанныхЮрЛиц(ФормаОбъект, "", ТаблицаЮрЛиц);
	Пока ВыборкаДанных.Следующий() Цикл
		СтрокаДанныхЮрЛиц = ФормаОбъект.ДанныеЮрЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныхЮрЛиц, ВыборкаДанных, , "ЮрФизЛицо");
		СтрокаДанныхЮрЛиц.ЮрФизЛицо    = Перечисления.Saby_ЮрФизЛицо[ВыборкаДанных.ЮрФизЛицо];
		СтрокаДанныхЮрЛиц.СтруктураФИО = СтруктураФИОСтрокой(СтрокаДанныхЮрЛиц.ЮрФизЛицо, ВыборкаДанных.Наименование);
		
		Если ТаблицаКИ <> Неопределено Тогда
			
			ВидыКИ = ВидыКонтактнойИнформации(ВыборкаДанных.Ссылка);
			
			Адрес = Saby_ТНОбщегоНазначенияКлиентСервер.ПолучитьКИ(ТаблицаКИ, ВыборкаДанных.Ссылка, ВидыКИ.АдресЮр);
			
			СтрокаДанныхЮрЛиц.Адрес          = Адрес.Представление;
			СтрокаДанныхЮрЛиц.АдресСтруктура = Адрес.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКонтактныеДанные(ФормаОбъект, ТаблицаЮрЛиц, ТаблицаКИ)
	
	Для Каждого СтрокаЮрЛица Из ТаблицаЮрЛиц Цикл
		
		ВидыКИ = ВидыКонтактнойИнформации(СтрокаЮрЛица.Ссылка);
		
		МассивКИ = Saby_ТНОбщегоНазначенияКлиентСервер.ПолучитьКИ(ТаблицаКИ, СтрокаЮрЛица.Ссылка, ВидыКИ.Телефон, Ложь);
		МассивКИЭлектроннаяПочта = Saby_ТНОбщегоНазначенияКлиентСервер.ПолучитьКИ(
			ТаблицаКИ, СтрокаЮрЛица.Ссылка, ВидыКИ.ЭлектроннаяПочта, Ложь);
		
		Для Каждого СтруктураКИ Из МассивКИЭлектроннаяПочта Цикл
			МассивКИ.Добавить(СтруктураКИ);
		КонецЦикла;
		
		Для Каждого СтруктураКИ Из МассивКИ Цикл
			СтрокаКонтактныхДанных = ФормаОбъект.КонтактныеДанные.Добавить();
			СтрокаКонтактныхДанных.Роль      = СтрокаЮрЛица.Роль;
			СтрокаКонтактныхДанных.Тип       = СтруктураКИ.Тип;
			СтрокаКонтактныхДанных.Значение  = СтруктураКИ.Представление;
			СтрокаКонтактныхДанных.Структура = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
				СтрокаКонтактныхДанных.Значение, СтрокаКонтактныхДанных.Тип);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДанныеЮрЛицИзБазы(МассивЮрЛиц, МенеджерВременныхТаблиц)
	
	ИмяКонфигурации = ИмяКонфигурации();
	ДоступныеКонфигурации = ДоступныеКонфигурации();
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ИмяКонфигурации = ДоступныеКонфигурации.ЕРП Тогда
		
		ЗапросДанных.Текст =
		"ВЫБРАТЬ
		|	ДополнительныеСведения.Объект КАК Ссылка,
		|	ДополнительныеСведения.Значение КАК Значение
		|ПОМЕСТИТЬ ДопСведения
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект В(&МассивЮрЛиц)
		|	И ДополнительныеСведения.Свойство.Наименование = &ИмяСвойстваКодФилиала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП,
		|	Контрагенты.СтранаРегистрации.Наименование КАК СтранаРегистрации,
		|	Контрагенты.РегистрационныйНомер КАК ОГРН,
		|	ВЫБОР
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
		|			ТОГДА ""ЮрЛицо""
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ТОГДА ""ИндивидуальныйПредприниматель""
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
		|			ТОГДА ""ЮрЛицоНеРезидент""
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
		|			ТОГДА ""ИндивидуальныйПредприниматель""
		|	КОНЕЦ КАК ЮрФизЛицо,
		|	ЕСТЬNULL(ДопСведения.Значение, """") КАК КодФилиала
		|ПОМЕСТИТЬ ДанныеЮрЛицИзБазы
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДопСведения КАК ДопСведения
		|		ПО Контрагенты.Ссылка = ДопСведения.Ссылка
		|ГДЕ
		|	Контрагенты.Ссылка В(&МассивЮрЛиц)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Организации.Наименование,
		|	Организации.ИНН,
		|	Организации.КПП,
		|	Организации.СтранаРегистрации.Наименование,
		|	Организации.ОГРН,
		|	ВЫБОР
		|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
		|			ТОГДА ""ЮрЛицо""
		|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ТОГДА ""ИндивидуальныйПредприниматель""
		|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
		|			ТОГДА ""ЮрЛицоНеРезидент""
		|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
		|			ТОГДА ""ИндивидуальныйПредприниматель""
		|	КОНЕЦ КАК ЮрФизЛицо,
		|	ЕСТЬNULL(ДопСведения.Значение, """")
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДопСведения КАК ДопСведения
		|		ПО Организации.Ссылка = ДопСведения.Ссылка
		|ГДЕ
		|	Организации.Ссылка В(&МассивЮрЛиц)";
		
	Иначе
		
		ЗапросДанных.Текст =
		"ВЫБРАТЬ
		|	ДополнительныеСведения.Объект КАК Ссылка,
		|	ДополнительныеСведения.Значение КАК Значение
		|ПОМЕСТИТЬ ДопСведения
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект В(&МассивЮрЛиц)
		|	И ДополнительныеСведения.Свойство.Наименование = &ИмяСвойстваКодФилиала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП,
		|	Контрагенты.СтранаРегистрации.Наименование КАК СтранаРегистрации,
		|	Контрагенты.РегистрационныйНомер КАК ОГРН,
		|	ВЫБОР
		|		КОГДА Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
		|			ТОГДА ""ЮрЛицо""
		|		КОГДА Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|			ТОГДА ""ИндивидуальныйПредприниматель""
		|	КОНЕЦ КАК ЮрФизЛицо,
		|	ЕСТЬNULL(ДопСведения.Значение, """") КАК КодФилиала
		|ПОМЕСТИТЬ ДанныеЮрЛицИзБазы
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДопСведения КАК ДопСведения
		|		ПО Контрагенты.Ссылка = ДопСведения.Ссылка
		|ГДЕ
		|	Контрагенты.Ссылка В(&МассивЮрЛиц)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Организации.Наименование,
		|	Организации.ИНН,
		|	Организации.КПП,
		|	Организации.СтранаРегистрации.Наименование,
		|	Организации.ОГРН,
		|	ВЫБОР
		|		КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
		|			ТОГДА ""ЮрЛицо""
		|		КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|			ТОГДА ""ИндивидуальныйПредприниматель""
		|	КОНЕЦ,
		|	ЕСТЬNULL(ДопСведения.Значение, """")
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДопСведения КАК ДопСведения
		|		ПО Организации.Ссылка = ДопСведения.Ссылка
		|ГДЕ
		|	Организации.Ссылка В(&МассивЮрЛиц)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДопСведения";
		
		Если ИмяКонфигурации = ДоступныеКонфигурации.УАТ Тогда
			ЗапросДанных.Текст = СтрЗаменить(ЗапросДанных.Текст, "Контрагенты.РегистрационныйНомер", "&ПустаяСтрока");
		КонецЕсли;
		
		Если ИмяКонфигурации = ДоступныеКонфигурации.Бух3 Тогда
			ЗапросДанных.Текст = СтрЗаменить(
				ЗапросДанных.Текст,
				"	ВЫБОР
				|		КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
				|			ТОГДА ""ЮрЛицо""
				|		КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
				|			ТОГДА ""ФизЛицо""
				|	КОНЕЦ",
				"	ВЫБОР
				|		КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
				|			ТОГДА ""ЮрЛицо""
				|			ИНАЧЕ ""ИндивидуальныйПредприниматель""
				|	КОНЕЦ");
			ЗапросДанных.Текст = СтрЗаменить(
				ЗапросДанных.Текст,
				"	ВЫБОР
				|		КОГДА Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
				|			ТОГДА ""ЮрЛицо""
				|		КОГДА Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
				|			ТОГДА ""ИндивидуальныйПредприниматель""
				|	КОНЕЦ",
				"	ВЫБОР
				|		КОГДА Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
				|			ТОГДА ""ЮрЛицо""
				|			ИНАЧЕ ""ИндивидуальныйПредприниматель""
				|	КОНЕЦ");
		КонецЕсли;
		
	КонецЕсли;
	
	ЗапросДанных.УстановитьПараметр("ПустаяСтрока", "");
	ЗапросДанных.УстановитьПараметр("МассивЮрЛиц",  МассивЮрЛиц);
	
	ЗапросДанных.УстановитьПараметр(
		"ИмяСвойстваКодФилиала",
		Saby_ТНОбщегоНазначенияКлиентСервер.ИмяСвойстваКодФилиала());
	
	ЗапросДанных.Выполнить();
	
КонецПроцедуры

Функция СтруктураФИОСтрокой(ЮрФизЛицо, Наименование)
	
	РезультатФункции = "";
	
	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.Saby_ЮрФизЛицо.ФизЛицо")
		Или ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.Saby_ЮрФизЛицо.ИндивидуальныйПредприниматель") Тогда
		
		МассивФИО = СтрРазделить(Наименование, " ");
		
		СтруктураФИО = Новый Структура;
		СтруктураФИО.Вставить("Фамилия",  ДанныеЭлементаМассива(МассивФИО, 0));
		СтруктураФИО.Вставить("Имя",      ДанныеЭлементаМассива(МассивФИО, 1));
		СтруктураФИО.Вставить("Отчество", ДанныеЭлементаМассива(МассивФИО, 2));
		
		ФИОСтрокой = ЗначениеВСтрокуВнутр(СтруктураФИО);
		
		РезультатФункции = ФИОСтрокой;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеЭлементаМассива(Массив, НомерЭлемента)
	
	Попытка 
		Значение = Массив[НомерЭлемента];
	Исключение	
	    Значение = "";
	КонецПопытки;
	
	Возврат Значение;

КонецФункции

Процедура ОчиститьДанныеЮрЛицПоРолям(Роли, ТаблицаДляОчистки)
	
	ИндексСтроки = 0;
	Пока ИндексСтроки < ТаблицаДляОчистки.Количество() Цикл
		
		СтрокаДанных = ТаблицаДляОчистки[ИндексСтроки];
		
		Если Роли.Найти(СтрокаДанных.Роль) <> Неопределено Тогда
			ТаблицаДляОчистки.Удалить(ИндексСтроки);
		Иначе
			ИндексСтроки = ИндексСтроки + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СсылкаНаДополнительноеСвойство(ИмяСвойства)
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Наименование = &ИмяСвойства";
	
	ЗапросДанных.УстановитьПараметр("ИмяСвойства", ИмяСвойства);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		Возврат ВыборкаДанных.Ссылка;
	КонецЕсли;
	
	Строка8 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(8, ДопустимаяДлина.Переменная));
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	Свойство.Наименование              = ИмяСвойства;
	Свойство.Заголовок                 = ИмяСвойства;
	Свойство.ИдентификаторДляФормул    = ИмяСвойства;
	Свойство.ТипЗначения               = Строка8;
	Свойство.Виден                     = Истина;
	Свойство.Доступен                  = Истина;
	Свойство.ЭтоДополнительноеСведение = Истина;
		
	Свойство.Записать();
	
	Возврат Свойство.Ссылка;
	
КонецФункции

#КонецОбласти

Функция ПараметрыСоответствия()
	
	Соответствие = Новый Соответствие;

	Структура = Новый Структура;         
	Структура.Вставить("Соответствие",    Соответствие);
	Структура.Вставить("ИмяПеречисления", "");
	Структура.Вставить("ПоискПоЗначению", Ложь);
	
	Возврат Структура;
	
КонецФункции

Процедура ДополнитьСоответствие(Параметры, ИмяЗначения, Значение)
	
	Соответствие    = Параметры.Соответствие;
	ИмяПеречисления = Параметры.ИмяПеречисления;
	
	Если ЗначениеЗаполнено(ИмяПеречисления) Тогда 
		ЗначениеПеречисления = Перечисления[ИмяПеречисления][ИмяЗначения]; 
	Иначе 
		ЗначениеПеречисления = ИмяЗначения;
	КонецЕсли;
	
	Если Параметры.ПоискПоЗначению Тогда 
		Соответствие.Вставить(Значение, ЗначениеПеречисления);
	Иначе 
		Соответствие.Вставить(ЗначениеПеречисления, Значение);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗачиститьШтрафы(ОбъектДок, КлючиОтметокДляУдаления)
	
	Если Не Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(ОбъектДок, "Штрафы") Тогда
		Возврат;
	КонецЕсли;
	
	ИндексШтрафы = ОбъектДок.Штрафы.Количество() - 1;
	Пока ИндексШтрафы >= 0 Цикл
				
		СтрокаШтраф = ОбъектДок.Штрафы[ИндексШтрафы];
			
		ЕстьСтрока = КлючиОтметокДляУдаления.Получить(СтрокаШтраф.КлючСтроки_Отметки);
		Если ЕстьСтрока <> Неопределено Тогда
			ОбъектДок.Штрафы.Удалить(СтрокаШтраф);
		КонецЕсли;
		
		ИндексШтрафы = ИндексШтрафы - 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗачиститьАкты(ОбъектДок, КлючиОтметокДляУдаления)
	
	Если Не Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(ОбъектДок, "Акты") Тогда
		Возврат;
	КонецЕсли;
	
	ИндексАкты = ОбъектДок.Акты.Количество() - 1;
	Пока ИндексАкты >= 0 Цикл
				
		СтрокаАкт = ОбъектДок.Акты[ИндексАкты];
			
		ЕстьСтрока = КлючиОтметокДляУдаления.Получить(СтрокаАкт.КлючСтроки_Отметки);
		Если ЕстьСтрока <> Неопределено  Тогда
			ОбъектДок.Акты.Удалить(СтрокаАкт);
		КонецЕсли;
		
		ИндексАкты = ИндексАкты - 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВремяВМассивДаты(МассивИтог, ЧастьВремя, ЕстьВремя, ФорматБезСмещения, СмещениеВСекундах)
	
	Если Не ЕстьВремя Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоДвоеточийВДате = 2;
	
	Если ФорматБезСмещения Тогда 
		
		Время = ЧастьВремя;    
		Если СтрЧислоВхождений(ЧастьВремя, ":") = ЧислоДвоеточийВДате Тогда
			РазделительВремя = ":";
		Иначе
			РазделительВремя = ".";
		КонецЕсли;
		
	Иначе 
		
		// может быть +/-
		Если СтрНайти(ЧастьВремя, "+") > 0 Тогда
			РазделительСмещение = "+";  
		Иначе 
			РазделительСмещение = "-";
		КонецЕсли;
				
		МассивВремени = СтрРазделить(ЧастьВремя, РазделительСмещение);
		Время         = МассивВремени[0];
		Смещение      = МассивВремени[1];
		
		РазделительВремя = ":";
		
		СмещениеВходящее = Дата("00010101" + СтрЗаменить(Смещение, РазделительВремя, ""));
		СмещениеСеанса   = Дата("00010101") + СмещениеСтандартногоВремени(ЧасовойПоясСеанса());
		
		СмещениеВСекундах = СмещениеВходящее - СмещениеСеанса;
		
	КонецЕсли;
	
	ЧастиВремени = СтрРазделить(Время, РазделительВремя);		
	МассивИтог.Добавить(ЧастиВремени[0]); 
	МассивИтог.Добавить(ЧастиВремени[1]);
	МассивИтог.Добавить(ЧастиВремени[2]); 		
	
КонецПроцедуры

Функция ДатаБезВремениВСтандартномФормате(ДатаВходящая)
	
	// старый формат
	// 2023-02-02
	// 2023.01.03
	
	Если СтрНайти(ДатаВходящая, "-") <> 0 Тогда
		МассивЧастейДаты = СтрРазделить(ДатаВходящая, "-");
	Иначе
		МассивЧастейДаты = СтрРазделить(ДатаВходящая, ".");
	КонецЕсли;
	
	// формат может быть перевернут 03.01.2023
	КоличествоСимволовГод = 4;
	ФорматПеревернут = СтрДлина(МассивЧастейДаты[0]) = КоличествоСимволовГод;
	
	Если ФорматПеревернут Тогда
		КоличествоУдалить = МассивЧастейДаты.Количество();
		МассивЧастейДаты.Добавить(МассивЧастейДаты[2]);
		МассивЧастейДаты.Добавить(МассивЧастейДаты[1]);
		МассивЧастейДаты.Добавить(МассивЧастейДаты[0]);
		Пока КоличествоУдалить <> 0 Цикл
			МассивЧастейДаты.Удалить(0);
			КоличествоУдалить = КоличествоУдалить - 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтрСоединить(МассивЧастейДаты, ".");
	
КонецФункции

#Область ПолучениеДанныхПоСсылкеИзБазы

Функция ДанныеТранспортныхСредствИзКонфигурацииУАТ(МассивСсылокТС, МенеджерВременныхТаблиц)
	
	РезультатФункции = Новый Соответствие;
	Если МассивСсылокТС = Неопределено И МенеджерВременныхТаблиц = Неопределено Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	ОчиститьМенеджерВременныхТаблиц = Ложь;
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		ОчиститьМенеджерВременныхТаблиц = Истина;
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗапросДанных = Новый Запрос;
		ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ЗапросДанных.Текст = 
		"ВЫБРАТЬ
		|	уатТС.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаТранспортныхСредств
		|ИЗ
		|	Справочник.уатТС КАК уатТС
		|ГДЕ
		|	уатТС.Ссылка В(&МассивСсылокТС)";
		ЗапросДанных.УстановитьПараметр("МассивСсылокТС", МассивСсылокТС);
		ЗапросДанных.Выполнить();
	КонецЕсли;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ТранспортныеСредства.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ТранспортныеСредства.Ссылка.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Автотранспорт) ТОГДА ЗНАЧЕНИЕ(Перечисление.Saby_ВидыТС.Автомобиль)
	|		КОГДА ТранспортныеСредства.Ссылка.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Прицеп) ТОГДА ЗНАЧЕНИЕ(Перечисление.Saby_ВидыТС.Прицеп)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Saby_ВидыТС.ПустаяСсылка)
	|	КОНЕЦ КАК Вид,
	|	ТранспортныеСредства.Ссылка.ГосударственныйНомер КАК РегистрационныйНомер,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ТранспортныеСредства.Ссылка.ТипТС) КАК Тип,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ТранспортныеСредства.Ссылка.Марка) КАК Марка,
	|	ТранспортныеСредства.Ссылка.VIN КАК ВИН,
	|	ЕСТЬNULL(РегистрСведенийуатДокументыТС.Серия, """") + ЕСТЬNULL(РегистрСведенийуатДокументыТС.Номер, """") КАК НомерСТС,
	|	ТранспортныеСредства.Ссылка.Грузоподъемность КАК Грузоподъемность,
	|	ТранспортныеСредства.Ссылка.ПолезныйРазмерВысота / 1000 * ТранспортныеСредства.Ссылка.ПолезныйРазмерДлина / 1000 * ТранспортныеСредства.Ссылка.ПолезныйРазмерШирина / 1000 КАК Вместимость,
	|	ВЫБОР
	|		КОГДА ТранспортныеСредства.Ссылка.ТипВладенияТС = ЗНАЧЕНИЕ(Перечисление.уатТипыВладенияТС.Собственность) ТОГДА ЗНАЧЕНИЕ(Перечисление.Saby_ТипыВладенияТС.Собственность)
	|		КОГДА ТранспортныеСредства.Ссылка.ТипВладенияТС = ЗНАЧЕНИЕ(Перечисление.уатТипыВладенияТС.СовместнаяСобственностьСупругов) ТОГДА ЗНАЧЕНИЕ(Перечисление.Saby_ТипыВладенияТС.СовместнаяСобственностьСупругов)
	|		КОГДА ТранспортныеСредства.Ссылка.ТипВладенияТС = ЗНАЧЕНИЕ(Перечисление.уатТипыВладенияТС.Аренда) ТОГДА ЗНАЧЕНИЕ(Перечисление.Saby_ТипыВладенияТС.Аренда)
	|		КОГДА ТранспортныеСредства.Ссылка.ТипВладенияТС = ЗНАЧЕНИЕ(Перечисление.уатТипыВладенияТС.Лизинг) ТОГДА ЗНАЧЕНИЕ(Перечисление.Saby_ТипыВладенияТС.Лизинг)
	|		КОГДА ТранспортныеСредства.Ссылка.ТипВладенияТС = ЗНАЧЕНИЕ(Перечисление.уатТипыВладенияТС.БезвозмездноеПользование) ТОГДА ЗНАЧЕНИЕ(Перечисление.Saby_ТипыВладенияТС.БезвозмездноеПользование)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Saby_ТипыВладенияТС.ПустаяСсылка)
	|	КОНЕЦ КАК ТипВладения
	|ИЗ
	|	ТаблицаТранспортныхСредств КАК ТранспортныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатРегистрационныеДокументы КАК РегистрСведенийуатДокументыТС
	|		ПО ТранспортныеСредства.Ссылка = РегистрСведенийуатДокументыТС.ВладелецДокументов
	|			И РегистрСведенийуатДокументыТС.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|			И РегистрСведенийуатДокументыТС.ДатаОкончания <= &ТекущаяДата
	|			И ВидДокумента = ЗНАЧЕНИЕ(Справочник.уатВидыДокументов.СТС)";
	
	ЗапросДанных.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		СтруктураТС = СтруктураДанныхТранспортногоСредства();
		ЗаполнитьЗначенияСвойств(СтруктураТС, ВыборкаДанных);
		РезультатФункции.Вставить(ВыборкаДанных.Ссылка, СтруктураТС);
	КонецЦикла;
	
	Если ОчиститьМенеджерВременныхТаблиц Тогда
		МенеджерВременныхТаблиц.Закрыть();
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеТранспортныхСредствИзДругихКонфигураций(МассивСсылокТС, МенеджерВременныхТаблиц = Неопределено)
	
	РезультатФункции = Новый Соответствие;
	Если МассивСсылокТС = Неопределено И МенеджерВременныхТаблиц = Неопределено Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	ЕстьВид = Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(
		Справочники.ТранспортныеСредства.ПустаяСсылка(), "Вид");
	
	Если Не ЕстьВид Тогда
		Возврат ДанныеТранспортныхСредствИзДругихКонфигурацийБезРасширения(МассивСсылокТС);
	КонецЕсли;
	
	ОчиститьМенеджерВременныхТаблиц = Ложь;
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		ОчиститьМенеджерВременныхТаблиц = Истина;
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗапросДанных = Новый Запрос;
		ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ЗапросДанных.Текст = 
		"ВЫБРАТЬ
		|	ТранспортныеСредства.Ссылка КАК Ссылка,
		|	ТранспортныеСредства.Вид КАК Вид
		|ПОМЕСТИТЬ ТаблицаТранспортныхСредств
		|ИЗ
		|	Справочник.ТранспортныеСредства КАК ТранспортныеСредства
		|ГДЕ
		|	ТранспортныеСредства.Ссылка В(&МассивСсылокТС)";
		ЗапросДанных.УстановитьПараметр("МассивСсылокТС", МассивСсылокТС);
		ЗапросДанных.Выполнить();
	КонецЕсли;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ТранспортныеСредства.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ТранспортныеСредства.Ссылка.Вид = ЗНАЧЕНИЕ(Перечисление.Saby_ВидыТС.ПустаяСсылка)
	|		ТОГДА ТранспортныеСредства.Вид
	|		ИНАЧЕ ТранспортныеСредства.Ссылка.Вид
	|	КОНЕЦ КАК Вид,
	|	ТранспортныеСредства.Ссылка.Код КАК РегистрационныйНомер,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ТранспортныеСредства.Ссылка.Тип) КАК Тип,
	|	ТранспортныеСредства.Ссылка.Марка КАК Марка,
	|	ТранспортныеСредства.Ссылка.VIN КАК ВИН,
	|	ТранспортныеСредства.Ссылка.НомерСТС КАК НомерСТС,
	|	ТранспортныеСредства.Ссылка.ГрузоподъемностьВТоннах КАК Грузоподъемность,
	|	ТранспортныеСредства.Ссылка.ВместимостьВКубическихМетрах КАК Вместимость,
	|	ТранспортныеСредства.Ссылка.ТипВладения КАК ТипВладения,
	|	ТранспортныеСредства.Ссылка.ДокументыПодтверждающиеВладение.(
	|		ДокументВладения КАК ДокументВладения
	|	) КАК ОснованияВладения
	|ИЗ
	|	ТаблицаТранспортныхСредств КАК ТранспортныеСредства";
	
	ЕстьРегистрационныйЗнак = Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(
		Справочники.ТранспортныеСредства.ПустаяСсылка(), "РегистрационныйЗнак");
	
	Если ЕстьРегистрационныйЗнак Тогда
		ЗапросДанных.Текст = СтрЗаменить(
			ЗапросДанных.Текст,
			"ТранспортныеСредства.Ссылка.Код",
			"ТранспортныеСредства.Ссылка.РегистрационныйЗнак");
	КонецЕсли;
		
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		СтруктураТС = СтруктураДанныхТранспортногоСредства();
		ЗаполнитьЗначенияСвойств(СтруктураТС, ВыборкаДанных, , "ОснованияВладения");
		ВыборкаОснованийВладения = ВыборкаДанных.ОснованияВладения.Выбрать();
		МассивОснований = Новый Массив;
		Пока ВыборкаОснованийВладения.Следующий() Цикл
			МассивОснований.Добавить(ВыборкаОснованийВладения.ДокументВладения);
		КонецЦикла;
		Если МассивОснований.Количество() > 0 Тогда
			СтруктураТС.ОснованияВладения = ЗначениеВСтрокуВнутр(МассивОснований);
		КонецЕсли;
		РезультатФункции.Вставить(ВыборкаДанных.Ссылка, СтруктураТС);
	КонецЦикла;
	
	Если ОчиститьМенеджерВременныхТаблиц Тогда
		МенеджерВременныхТаблиц.Закрыть();
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеТранспортныхСредствИзДругихКонфигурацийБезРасширения(МассивСсылокТС)
	
	РезультатФункции = Новый Соответствие;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.УстановитьПараметр("МассивСсылокТС", МассивСсылокТС);
	
	ЗапросДанных.Текст = 
	"ВЫБРАТЬ *
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|ГДЕ
	|	ТранспортныеСредства.Ссылка В(&МассивСсылокТС)";		
	
	ПустаяСсылка = Справочники.ТранспортныеСредства.ПустаяСсылка();
	
	ЕстьРегистрационныйЗнак = Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(
		ПустаяСсылка, "РегистрационныйЗнак");
			
	ЕстьГрузоподъемность = Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(
		ПустаяСсылка, "ГрузоподъемностьВТоннах");
			
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		
		СтруктураТС = СтруктураДанныхТранспортногоСредства();		
		ЗаполнитьЗначенияСвойств(СтруктураТС, ВыборкаДанных);
		
		Если ЗначениеЗаполнено(СтруктураТС.Тип) Тогда
			СтруктураТС.Тип = СокрЛП(СтруктураТС.Тип);
		КонецЕсли;	
		
		Если ЕстьГрузоподъемность Тогда 
			СтруктураТС.Грузоподъемность = ВыборкаДанных.ГрузоподъемностьВТоннах; 
			СтруктураТС.Вместимость      = ВыборкаДанных.ВместимостьВКубическихМетрах;
		КонецЕсли;	
		
		Если ЕстьРегистрационныйЗнак Тогда			
			СтруктураТС.РегистрационныйНомер = ВыборкаДанных.РегистрационныйЗнак;
		Иначе 
			СтруктураТС.РегистрационныйНомер = ВыборкаДанных.Код;
		КонецЕсли;
				
		РезультатФункции.Вставить(ВыборкаДанных.Ссылка, СтруктураТС);
		
	КонецЦикла;
		
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ПолучениеДанныхПоСсылкеИзБазы

#Область ДействияПриОбновлении

Функция ПеренестиДанныеТранспортныхСредствВДокумент()
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ОК",             Истина);
	РезультатФункции.Вставить("ОписаниеОшибки", "");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.ТранспортноеСредство КАК ТранспортноеСредство,
	|	ВложенныйЗапрос.Вид КАК Вид
	|ПОМЕСТИТЬ ТранспортныеСредстваИзДокументов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Saby_ТранспортнаяНакладная.Ссылка КАК Ссылка,
	|		Saby_ТранспортнаяНакладная.Отправитель_ТранспортноеСредство КАК ТранспортноеСредство,
	|		ЗНАЧЕНИЕ(Перечисление.Saby_ВидыТС.Автомобиль) КАК Вид
	|	ИЗ
	|		Документ.Saby_ТранспортнаяНакладная КАК Saby_ТранспортнаяНакладная
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Saby_ТранспортнаяНакладная.ТранспортныеСредства КАК Saby_ТранспортнаяНакладнаяТранспортныеСредства
	|			ПО (Saby_ТранспортнаяНакладнаяТранспортныеСредства.Ссылка = Saby_ТранспортнаяНакладная.Ссылка)
	|				И Saby_ТранспортнаяНакладная.Отправитель_ТранспортноеСредство = Saby_ТранспортнаяНакладнаяТранспортныеСредства.Прицеп
	|	ГДЕ
	|		Saby_ТранспортнаяНакладная.Отправитель_ТранспортноеСредство <> ЗНАЧЕНИЕ(Справочник.ТранспортныеСредства.ПустаяСсылка)
	|		И Saby_ТранспортнаяНакладнаяТранспортныеСредства.Прицеп ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Saby_ТранспортнаяНакладнаяТранспортныеСредства.Ссылка,
	|		Saby_ТранспортнаяНакладнаяТранспортныеСредства.Прицеп,
	|		ЗНАЧЕНИЕ(Перечисление.Saby_ВидыТС.Прицеп)
	|	ИЗ
	|		Документ.Saby_ТранспортнаяНакладная.ТранспортныеСредства КАК Saby_ТранспортнаяНакладнаяТранспортныеСредства
	|	ГДЕ
	|		Saby_ТранспортнаяНакладнаяТранспортныеСредства.Прицеп <> ЗНАЧЕНИЕ(Справочник.ТранспортныеСредства.ПустаяСсылка)
	|		И Saby_ТранспортнаяНакладнаяТранспортныеСредства.Вид = ЗНАЧЕНИЕ(Перечисление.Saby_ВидыТС.ПустаяСсылка)) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТранспортныеСредстваИзДокументов.ТранспортноеСредство КАК Ссылка,
	|	ТранспортныеСредстваИзДокументов.Вид КАК Вид
	|ПОМЕСТИТЬ ТаблицаТранспортныхСредств
	|ИЗ
	|	ТранспортныеСредстваИзДокументов КАК ТранспортныеСредстваИзДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТранспортныеСредстваИзДокументов.Ссылка КАК Ссылка,
	|	ТранспортныеСредстваИзДокументов.ТранспортноеСредство КАК ТранспортноеСредство
	|ИЗ
	|	ТранспортныеСредстваИзДокументов КАК ТранспортныеСредстваИзДокументов
	|ИТОГИ ПО
	|	Ссылка";
		
	ВыборкаПоДокументам = ЗапросДанных.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Не ВыборкаПоДокументам.Следующий() Тогда
		Возврат РезультатФункции;
	Иначе
		ВыборкаПоДокументам.Сбросить();
	КонецЕсли;
	
	РеквизитыТранспортныхСредств = РеквизитыТранспортныхСредств(Неопределено, МенеджерВременныхТаблиц);
	
	ОписанияОшибок = Новый Массив;
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		ОбъектДокумента = ВыборкаПоДокументам.Ссылка.ПолучитьОбъект();
		
		ОбъектДокумента.ТранспортныеСредства.Очистить();
		
		ВыборкаПоТранспортнымСредствам = ВыборкаПоДокументам.Выбрать();
		Пока ВыборкаПоТранспортнымСредствам.Следующий() Цикл
			РеквизитыТС = РеквизитыТранспортныхСредств.Получить(ВыборкаПоТранспортнымСредствам.ТранспортноеСредство);
			НоваяСтрокаТС = ОбъектДокумента.ТранспортныеСредства.Добавить();
			НоваяСтрокаТС.Прицеп = ВыборкаПоТранспортнымСредствам.ТранспортноеСредство;
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТС, РеквизитыТС);
		КонецЦикла;
		
		Попытка
			ОбъектДокумента.Записать();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			РезультатФункции.ОК = Ложь;
			ОписанияОшибок.Добавить(ИнформацияОбОшибке.Описание);
		КонецПопытки;
		
	КонецЦикла;
	
	Если Не РезультатФункции.ОК Тогда
		РезультатФункции.ОписаниеОшибки = СтрСоединить(ОписанияОшибок, Символы.ПС);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ДействияПриОбновлении

Функция АдресКонтрагентаИлиОрганизации(ВидИлиТипКИ)
	
	Возврат ВидИлиТипКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации
		Или ВидИлиТипКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации
		Или ВидИлиТипКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента
		Или ВидИлиТипКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	
КонецФункции

#Область ФЛК

// Проверяет заполненность реквизитов документа.
//
// Параметры:
//  ДанныеДокумента - Структура - структура реквизитов и табличных часте документа
//  ПараметрыПроверкиРеквизитов - Структура - структура параметров для проверки реквизитов на заполненность
//    Для реквизитов табличных частей реквизиты указываются через точку. Сначала имя табличной части а потом реквизит.
//  Ошибки - Массив - массив структур ошибок. Расхождения по реквизитам.
//
Процедура ПроверитьЗаполненНеЗаполнен(ДанныеДокумента, ПараметрыПроверкиРеквизитов, Ошибки)
	
	Перем ПроверяемыеРеквизитыТЧ;
	
	ТабличныеЧасти = Новый Структура;
	
	// Проверка реквизитов объекта и заполнение структуры по реквизитам табличных частей.
	Для Каждого Реквизит Из ПараметрыПроверкиРеквизитов.ПроверяемыеРеквизиты Цикл
		
		ПозицияТочки = СтрНайти(Реквизит, ".");
		
		Если ПозицияТочки > 0 Тогда 
			// В случае если указан реквизит табличной части			
			ПроверкаРеквизитаТабличнойЧасти(Реквизит, ПроверяемыеРеквизитыТЧ, ПозицияТочки, ТабличныеЧасти);				
		Иначе 
			// В случае если указан реквизит объекта
			ПроверкаРеквизитаОбъекта(Реквизит, ДанныеДокумента, ПараметрыПроверкиРеквизитов, Ошибки);
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверитьЗаполненНеЗаполненРеквизитТЧ(ДанныеДокумента, ПараметрыПроверкиРеквизитов, Ошибки, ТабличныеЧасти);
	
	ПараметрыПроверкиРеквизитов.ПроверяемыеРеквизиты.Очистить();
	
КонецПроцедуры

Процедура ПроверитьЗаполненНеЗаполненРеквизитТЧ(ДанныеДокумента, ПараметрыПроверкиРеквизитов, Ошибки, ТабличныеЧасти)
	
	// Проверка реквизитов в табличных частях
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		ИмяТабличнойЧасти = ТабличнаяЧасть.Ключ;
		ТЧ = ДанныеДокумента[ИмяТабличнойЧасти];
		МассивРеквизитов = ТабличнаяЧасть.Значение;
		
		// Цикл по всем строкам табличной части.
		Для ИндексСтроки = 0 По ТЧ.Количество() - 1 Цикл
			
			ИмяТЧ = ПараметрыПроверкиРеквизитов.ДокументМенеджер.ИмяТЧДокумента(
				ИмяТабличнойЧасти, ТЧ[ИндексСтроки], ДанныеДокумента);
			
			// Цикл по всем проверяемым реквизитам для текущей табличной части.
			Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
				
				ПроверятьРеквизитТЧДокумента = ПараметрыПроверкиРеквизитов.ДокументМенеджер.ПроверятьРеквизитТЧДокумента(
					ТЧ[ИндексСтроки], ИмяТЧ, ИмяРеквизита, ДанныеДокумента);
				
				Если Не ПроверятьРеквизитТЧДокумента Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураДанныхОшибки = ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам.Получить(ИмяТЧ + "." + ИмяРеквизита);
				
				Если Не ЗначениеЗаполнено(ТЧ[ИндексСтроки][ИмяРеквизита]) Тогда
					
					ПолеОшибки = СтрШаблон(
						"Объект.%1",
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, ИндексСтроки + 1, ИмяРеквизита));

					ДобавитьОшибкуПользователю(
						Ошибки,
						ПолеОшибки,
						СтруктураДанныхОшибки.Ошибка,
						СтруктураДанныхОшибки.РеквизитОбъекта,
						СтруктураДанныхОшибки.ЭлементФормы,
						ИндексСтроки);
					
				КонецЕсли;
					
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаРеквизитаТабличнойЧасти(Реквизит, ПроверяемыеРеквизитыТЧ, ПозицияТочки, ТабличныеЧасти)
	
	ДлинаСтроки       = СтрДлина(Реквизит);
	ИмяТабличнойЧасти = Лев(Реквизит, ПозицияТочки - 1);
	ИмяРеквизита      = Прав(Реквизит, ДлинаСтроки - ПозицияТочки);
	
	// Сохранение проверяемого реквизита табличной части в структуру
	Если НЕ ТабличныеЧасти.Свойство(ИмяТабличнойЧасти, ПроверяемыеРеквизитыТЧ) Тогда
		ПроверяемыеРеквизитыТЧ = Новый Массив;
		ТабличныеЧасти.Вставить(ИмяТабличнойЧасти, ПроверяемыеРеквизитыТЧ);
	КонецЕсли;
	
	ПроверяемыеРеквизитыТЧ.Добавить(ИмяРеквизита);
	
КонецПроцедуры

Процедура ПроверкаРеквизитаОбъекта(Реквизит, ДанныеДокумента, ПараметрыПроверкиРеквизитов, Ошибки)
	
	Если Не ПараметрыПроверкиРеквизитов.ДокументМенеджер.ПроверятьРеквизитДокумента(Реквизит, ДанныеДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеДокумента.Реквизиты.Свойство(Реквизит) Тогда
		ЗначениеРеквизитаЗаполнено = ЗначениеЗаполнено(ДанныеДокумента.Реквизиты[Реквизит]);
	Иначе
		ЗначениеРеквизитаЗаполнено = ЗначениеЗаполнено(ДанныеДокумента[Реквизит]);
	КонецЕсли;
	
	Если Не ЗначениеРеквизитаЗаполнено Тогда
		
		СтруктураДанныхОшибки = ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам.Получить(Реквизит);
		
		ДобавитьОшибкуПользователю(
			Ошибки,
			СтрШаблон("Объект.%1", Реквизит),
			СтруктураДанныхОшибки.Ошибка,
			СтруктураДанныхОшибки.РеквизитОбъекта,
			СтруктураДанныхОшибки.ЭлементФормы);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ДобавитьОшибкуТипаВладения(СтрокаТС, Ошибки, СоответствиеРеквизитовОшибок)
	
	Если СтрокаТС.Вид = Перечисления.Saby_ВидыТС.Автомобиль Тогда
		СтруктураДанныхОшибки = СоответствиеРеквизитовОшибок.Получить("ТранспортноеСредствоДокумент");
		ДобавитьОшибкуПользователю(
			Ошибки,
			"ТранспортноеСредствоСтрокой",
			СтруктураДанныхОшибки.Ошибка,
			СтруктураДанныхОшибки.РеквизитОбъекта,
			СтруктураДанныхОшибки.ЭлементФормы);
	Иначе
		СтруктураДанныхОшибки = СоответствиеРеквизитовОшибок.Получить("Прицепы.ПрицепДокумент");
		ДобавитьОшибкуПользователю(
			Ошибки,
			СтрШаблон("Объект.ТранспортныеСредства[%1]", СтрокаТС.НомерСтроки),
			СтруктураДанныхОшибки.Ошибка,
			СтруктураДанныхОшибки.РеквизитОбъекта,
			СтруктураДанныхОшибки.ЭлементФормы,
			СтрокаТС.НомерСтроки - 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ФЛК

Функция ОписанияОшибок(СписокОшибок)

	РезультатФункции = Новый Массив;

	Для Каждого СтруктураОшибки Из СписокОшибок Цикл

		РезультатФункции.Добавить(СтруктураОшибки.ТекстДляОднойОшибки);

	КонецЦикла;

	Возврат РезультатФункции;

КонецФункции

#Область Лента

Процедура ОбновитьДанныеЛенты(Форма)
	
	Форма.Лента.Очистить();
	
	ИмяМетаданных = Saby_ТНОбщегоНазначенияКлиентСервер.ИмяМетаданныхПоФорме(Форма);
	
	ТекущиеЭтапыДокумента = Документы[ИмяМетаданных].ТекущиеЭтапыДокумента(Форма);
	ДанныеДляЛенты = РегистрыСведений.Saby_ДанныеТитулов.ДанныеДляЛенты(
		Форма.Объект.Ссылка, ИмяМетаданных, ТекущиеЭтапыДокумента);
	
	КоличествоВидимость = РазмерЛентыВТитулах();
	
	Для Каждого СтруктураДанных Из ДанныеДляЛенты Цикл
		
		СтрокаЛенты = Форма.Лента.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЛенты, СтруктураДанных);
		
		ЗаполнитьПризнакТекущегоЭтапа(Форма, ИмяМетаданных, СтрокаЛенты);
		
		ЗаполнитьНаименованиеТитула(СтрокаЛенты, ИмяМетаданных);
		
		СтрокаЛенты.Видимость = КоличествоВидимость > 0;
		КоличествоВидимость   = КоличествоВидимость - 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеТитула(СтрокаСобытия, ИмяМетаданных)
	
	МенеджерТитулов = Документы[ИмяМетаданных].МенеджерТитулов();
	
	ПредставленияТитула = МенеджерТитулов.ПредставленияТитула(СтрокаСобытия.ТипТитула);	
	СтрокаСобытия.НаименованиеТитула = ПредставленияТитула.Имя;
	
КонецПроцедуры

Процедура СдвинутьНаСтроку(Лента, СтрокаЛенты)
	
	КоличествоВидимость = РазмерЛентыВТитулах();
	
	ИндексСтроки = Лента.Индекс(СтрокаЛенты);
	
	Индекс = Лента.Количество() - 1;
	Пока Индекс >= 0 Цикл
		СтрокаЛенты = Лента[Индекс];
		Если Индекс <= ИндексСтроки Тогда
			СтрокаЛенты.Видимость = КоличествоВидимость > 0;
			КоличествоВидимость   = КоличествоВидимость - 1;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура СдвинутьЛентуВправо(Лента)
	
	Если Лента.Количество() <= РазмерЛентыВТитулах() Или Лента[Лента.Количество() - 1].Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Для ИндексНачала = 0 По Лента.Количество() - 1 Цикл
		Если Лента[ИндексНачала].Видимость Тогда
			Лента[ИндексНачала].Видимость = Ложь;
			ИндексНачала = ИндексНачала + 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПоследнийИндекс = Мин(ИндексНачала + РазмерЛентыВТитулах() - 1, Лента.Количество() - 1);
	
	Для Индекс = ИндексНачала По ПоследнийИндекс Цикл
		Лента[Индекс].Видимость = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура СдвинутьЛентуВлево(Лента)
	
	Если Лента.Количество() <= РазмерЛентыВТитулах() Или Лента[0].Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Для ИндексНачала = 0 По Лента.Количество() - 1 Цикл
		Если Лента[ИндексНачала].Видимость Тогда
			ИндексНачала = ИндексНачала - 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПоследнийИндекс = Мин(ИндексНачала + РазмерЛентыВТитулах() - 1, Лента.Количество() - 1);
	
	Для Индекс = ИндексНачала По Лента.Количество() - 1 Цикл
		Лента[Индекс].Видимость = Индекс <= ПоследнийИндекс;
	КонецЦикла;
	
КонецПроцедуры

Функция РазмерЛентыВТитулах()
	
	Возврат 6;
	
КонецФункции

Процедура ЗаполнитьПризнакТекущегоЭтапа(Форма, ИмяМетаданных, СтрокаЛенты)
	
	ДокументооборотЗавершен = Saby_ТНОбщегоНазначенияКлиентСервер.ДокументооборотЗавершен(Форма);
	ТекущиеЭтапы            = Документы[ИмяМетаданных].ТекущиеЭтапыДокумента(Форма);
	МенеджерТитулов         = Документы[ИмяМетаданных].МенеджерТитулов();
	
	Если ТекущиеЭтапы.Количество() = 0 Тогда
		ЕстьТитулВТекущихЭтапах = МенеджерТитулов.ЭтоПервыйТитул(СтрокаЛенты.ТипТитула);
	Иначе
		ЕстьТитулВТекущихЭтапах = Не ЗначениеЗаполнено(СтрокаЛенты.ИдентификаторТитула)
			И ТекущиеЭтапы.Найти(СтрокаЛенты.ТипТитула) <> Неопределено;
	КонецЕсли;
	
	Если СтрокаЛенты.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.ИзменениеСтоимости
		Или СтрокаЛенты.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.СогласованиеСтоимости Тогда
		СтрокаЛенты.ТекущийТитул = ЕстьТитулВТекущихЭтапах;
	Иначе
		СтрокаЛенты.ТекущийТитул = Не ДокументооборотЗавершен И ЕстьТитулВТекущихЭтапах;
	КонецЕсли;
	
КонецПроцедуры

#Область Отрисовка

Процедура ОчиститьЛенту(Форма)
	
	Пока Форма.Элементы.ГруппаЛента.ПодчиненныеЭлементы.Количество() <> 0 Цикл
		Форма.Элементы.Удалить(Форма.Элементы.ГруппаЛента.ПодчиненныеЭлементы.Получить(0));
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКнопку(Форма, ИмяКоманды)
	
	Если Форма.Лента.Количество() = 0 Или Форма.Лента.Количество() <= РазмерЛентыВТитулах() Тогда
		Возврат;
	КонецЕсли;
		
	КнопкаФормы = Форма.Элементы.Добавить("Кнопка" + ИмяКоманды, Тип("КнопкаФормы"), Форма.Элементы.ГруппаЛента);
	КнопкаФормы.РастягиватьПоВертикали = Истина;
	КнопкаФормы.ИмяКоманды = ИмяКоманды;
	КнопкаФормы.Отображение = ОтображениеКнопки.Картинка;
	КнопкаФормы.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
	
КонецПроцедуры

Процедура ДобавитьДекорациюЛинию(Форма, СтрокаЛенты = Неопределено, Ширина = 3, ИмяДекорации = "ДекорацияЛиния")
	
	Серая   = Истина;
	Красная = Ложь;
	
	ПолноеИмяДекорации = ИмяДекорации;
	Если СтрокаЛенты <> Неопределено Тогда
		ПолноеИмяДекорации = ПолноеИмяДекорации + Формат(СтрокаЛенты.ПолучитьИдентификатор(), "ЧДЦ=0; ЧГ=");
		Серая   = Не ЗначениеЗаполнено(СтрокаЛенты.Период) И Не СтрокаЛенты.ТекущийТитул;
		Красная = Форма.ТитулОтрицательноЗавершен(СтрокаЛенты);
	КонецЕсли;
	
	ДекорацияФормы = Форма.Элементы.Добавить(ПолноеИмяДекорации, Тип("ДекорацияФормы"), Форма.Элементы.ГруппаЛента);
	ДекорацияФормы.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	ДекорацияФормы.РастягиватьПоГоризонтали = Ложь;
	ДекорацияФормы.Ширина = Ширина;
	ДекорацияФормы.Рамка = Форма.Элементы.Стили.Рамка;
	
	Если Красная Тогда
		ДекорацияФормы.ЦветРамки = ЦветаСтиля.ЦветОсобогоТекста;
	ИначеЕсли Серая Тогда
		ДекорацияФормы.ЦветРамки = ЦветаСтиля.ЦветРамкиКнопки;
	Иначе
		ДекорацияФормы.ЦветРамки = WebЦвета.ЖелтоЗеленый;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДекорациюТитул(Форма, СтрокаЛенты)
	
	ИдентификаторСтроки = Формат(СтрокаЛенты.ПолучитьИдентификатор(), "ЧДЦ=0; ЧН=0; ЧГ=");
	ДекорацияФормы = Форма.Элементы.Добавить(
		"Титул_" + ИдентификаторСтроки,
		Тип("ДекорацияФормы"),
		Форма.Элементы.ГруппаЛента);
		
	МассивДанныхПодсказки = Новый Массив;
	ПериодСтрокой = ?(ЗначениеЗаполнено(СтрокаЛенты.Период), Формат(СтрокаЛенты.Период, "ДФ='dd.MM.yyyy ЧЧ:мм'"), "");
	
	Если Форма.ТитулОтрицательноЗавершен(СтрокаЛенты) Тогда
		ЦветТитула = ЦветаСтиля.ЦветОсобогоТекста;
		МассивДанныхПодсказки.Добавить("Красный");
	Иначе
		ЦветТитула = WebЦвета.ТемноЗеленый;
		МассивДанныхПодсказки.Добавить("Зеленый");
	КонецЕсли;
	
	Если СтрокаЛенты.ТекущийТитул Тогда
		Картинка = БиблиотекаКартинок.Saby_ТекущийТитул;
		МассивДанныхПодсказки.Добавить("Saby_ТекущийТитул");
	ИначеЕсли ЗначениеЗаполнено(СтрокаЛенты.ИдентификаторТитула) Тогда
		Картинка = БиблиотекаКартинок.Saby_АктивныйТитул;
		МассивДанныхПодсказки.Добавить("Saby_АктивныйТитул");
	Иначе
		Картинка = БиблиотекаКартинок.Saby_НеактивныйТитул;
		ЦветТитула = ЦветаСтиля.ЦветРамкиКнопки;
		МассивДанныхПодсказки[0] = "Серый";
		МассивДанныхПодсказки.Добавить("Saby_НеактивныйТитул");
	КонецЕсли;
	
	ФорматированнаяСтрока = Новый ФорматированнаяСтрока(
		Новый ФорматированнаяСтрока(Картинка, , , , "Ссылка"),
		Символы.ПС,
		Новый ФорматированнаяСтрока(СтрокаЛенты.Представление, ШрифтыСтиля.ОбычныйШрифтТекста, ЦветТитула),
		Символы.ПС,
		Новый ФорматированнаяСтрока(ПериодСтрокой, ШрифтыСтиля.МелкийШрифтТекста, WebЦвета.Серый));
		
	МассивДанныхПодсказки.Добавить(СтрокаЛенты.Представление);
	Если ЗначениеЗаполнено(ПериодСтрокой) Тогда
		МассивДанныхПодсказки.Добавить(ПериодСтрокой);
	КонецЕсли;
		
	ДекорацияФормы.Заголовок               = ФорматированнаяСтрока;
	ДекорацияФормы.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	ДекорацияФормы.Ширина                  = ШиринаПоТитулу(СтрокаЛенты.ТипТитула);
	
	ДекорацияФормы.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	ДекорацияФормы.Подсказка            = СтрСоединить(МассивДанныхПодсказки, "/");
	
	ДекорацияФормы.УстановитьДействие("ОбработкаНавигационнойСсылки", "ДекорацияТитулОбработкаНавигационнойСсылки");
	
КонецПроцедуры

Функция ШиринаПоТитулу(ТипТитула) Экспорт
	
	РезультатФункции = 10;
	
	Если ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.Переадресовка
		Или ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.Переадресовка Тогда
		
		РезультатФункции = 12;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДобавитьПодсказку(Форма)
	
	ДекорацияФормы = Форма.Элементы.Добавить("ПодсказкаЛенты", Тип("ДекорацияФормы"), Форма.Элементы.ГруппаЛента);
	ДекорацияФормы.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	ДекорацияФормы.Подсказка = "При нажатии на картинку, происходит переход к данным выбранного титула";
	
КонецПроцедуры

#КонецОбласти // Отрисовка

#КонецОбласти // Лента

Процедура ЗаполнитьТаблицуЗначений(Форма, ДанныеЗаполнения, РеквизитФормы, ЗначениеИсточник)
	
	Форма[РеквизитФормы.Имя].Очистить();
	
	Если Не ЗначениеЗаполнено(ЗначениеИсточник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеИсточник) = Тип("Массив") Тогда
		Массив = ЗначениеИсточник;
	Иначе
		Массив = ЗначениеИзСтрокиВнутр(ЗначениеИсточник);
	КонецЕсли;
	
	Для Каждого Значение Из Массив Цикл 
		
		НС = Форма[РеквизитФормы.Имя].Добавить();
		
		ЕстьОдноименныйРеквизит = Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(НС, РеквизитФормы.Имя);
		
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			
			Если ЕстьОдноименныйРеквизит Тогда 
				ИмяКолонки = РеквизитФормы.Имя;
			Иначе 
				ИмяКолонки = Лев(РеквизитФормы.Имя, СтрДлина(РеквизитФормы.Имя) - 1);
			КонецЕсли;
			
			НС[ИмяКолонки] = Значение;
			
		Иначе
			
			// Структура
			Для Каждого КлючЗначение Из Значение Цикл
				НС[КлючЗначение.Ключ] = КлючЗначение.Значение;
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция АктивныйЭтапДокумента(Ссылка)
	
	ИндексКартинки = 0;
	АктивныйЭтап   = "";
	
	ДанныеСостояния = ДанныеСостоянияОбъекта(Ссылка);
	Если ДанныеСостояния <> Неопределено Тогда 	
		
		АктивныйЭтап = ДанныеСостояния.АктивныйЭтап;
		
		Состояние = ДанныеСостояния.Состояние;
				
		Если ЗначениеЗаполнено(Состояние) Тогда
			ИндексКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Состояние, "ИндексКартинки");			
		КонецЕсли;	
			
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("АктивныйЭтап",   АктивныйЭтап);
	Структура.Вставить("ИндексКартинки", ИндексКартинки);	
	Структура.Вставить("Состояние",      СокрЛП(Состояние));
	
	Возврат Структура;
	
КонецФункции

#Область ЗаполнениеНаОснованииINI

Функция ПараметрыЗаполненияНаОснованииINI(Объект)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ini_name",             "");
	РезультатФункции.Вставить("Объект",               Объект);
	РезультатФункции.Вставить("ИмяМетаданных",        ИмяМетаданныхДокумента(Объект.Ссылка));
	РезультатФункции.Вставить("МенеджерДокумента",    Документы[РезультатФункции.ИмяМетаданных]);
	РезультатФункции.Вставить("Основание",            Неопределено);
	РезультатФункции.Вставить("ЭтоВыбранныйДокумент", Ложь);
	РезультатФункции.Вставить("ЭтоПервоеОснование",   Ложь);
	РезультатФункции.Вставить("ТранспортБлокли",      Обработки.SABY.Создать());
	РезультатФункции.Вставить("context_params",       Saby_Core.ПроверитьНаличиеПараметровПодключения());
	РезультатФункции.Вставить("РольКонтрагента",      Перечисления.Saby_РолиКонтрагентов.ПустаяСсылка());
	РезультатФункции.Вставить("ЗапретЗаполнения",     Новый Соответствие);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция РезультатЗаполненияНаОснованииINI(ПараметрыЗаполнения)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ТекстСообщения", "");
	РезультатФункции.Вставить("Ошибка",         Ложь);
	РезультатФункции.Вставить("НовыеОснования", Новый Массив);
	
	ConnectionId = Неопределено; 
	Если ПараметрыЗаполнения.context_params = Неопределено Тогда 
		
		РезультатФункции.ТекстСообщения = "Нет входа в учетную запись!";
		РезультатФункции.Ошибка = Истина;
		Возврат РезультатФункции;
		
	КонецЕсли;
	
	ПараметрыЗаполнения.context_params.Свойство("ConnectionId", ConnectionId);
	
	ПараметрыВызова	= Новый Соответствие();
	ПараметрыВызова.Вставить("params",          ПараметрыЗаполнения.context_params);
	ПараметрыВызова.Вставить("commands_result", Новый Массив);
	ПараметрыВызова.Вставить("endpoint",        "");
	ПараметрыВызова.Вставить("operation_uuid",  СокрЛП(Новый УникальныйИдентификатор));
	ПараметрыВызова.Вставить("ini_name",        ПараметрыЗаполнения.ini_name);
	ПараметрыВызова.Вставить("connection_uuid", ConnectionId);
	ПараметрыВызова.Вставить("ref",             ПараметрыЗаполнения.Основание);
	
	Попытка
		XMLИниФайл = ПараметрыЗаполнения.ТранспортБлокли.Load_ini(ПараметрыЗаполнения.ini_name, ПараметрыВызова);		
	Исключение
		XMLИниФайл = Неопределено;
	КонецПопытки;
	 	
	Если Не (ТипЗнч(XMLИниФайл) = Тип("Строка") И Врег(Лев(XMLИниФайл, 4)) = "<XML") Тогда
		РезультатФункции.ТекстСообщения = "Не найдена INI для данного типа документа";
		РезультатФункции.Ошибка = Истина; 
		Возврат РезультатФункции;
	КонецЕсли;	
	
	Результат = ПараметрыЗаполнения.ТранспортБлокли.API_BLOCKLY_RUN(ПараметрыВызова);
	
	Если Результат.status <> "complete" Тогда
		РезультатФункции.ТекстСообщения = "Ошибка расчета INI. Данные не получены";
		РезультатФункции.Ошибка = Истина;
		Возврат РезультатФункции;
	КонецЕсли;
	
	ДанныеИзИНИ = Результат.data;
	
	Saby_ТНОбщегоНазначенияКлиентСервер.ВосстановитьИерархию(ДанныеИзИНИ);
	
	ПараметрыЗаполнения.МенеджерДокумента.СформироватьНовыеОснования(РезультатФункции, ДанныеИзИНИ);
	ПараметрыЗаполнения.МенеджерДокумента.ДополнитьПодстановки(ДанныеИзИНИ, ПараметрыЗаполнения);
	
	МенеджерТитулов = ПараметрыЗаполнения.МенеджерДокумента.МенеджерТитулов();
	
	ПервыйТитул = МенеджерТитулов.ПервыйТитул();
	ПредставленияТитула = МенеджерТитулов.ПредставленияТитула(ПервыйТитул);
	
	МассивПодстановок = Новый Массив;
	МассивПодстановок.Добавить(ДанныеИзИНИ);
	
	Подстановки = Новый Соответствие;
	ПодстановкаПервогоТитула = Новый Соответствие;
	ПодстановкаПервогоТитула.Вставить(ПредставленияТитула.ИмяПодстановки, МассивПодстановок);
	Подстановки.Вставить("Подстановки", ПодстановкаПервогоТитула);
	
	ПараметрыЗагрузки = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыЗагрузки();
	ПараметрыЗагрузки.ДанныеДокумента          = Подстановки;
	ПараметрыЗагрузки.Ссылка                   = ПараметрыЗаполнения.Объект.Ссылка;
	ПараметрыЗагрузки.ИдСбис                   = Неопределено;
	ПараметрыЗагрузки.ИзДокумента              = Истина;
	ПараметрыЗагрузки.ЭтоЗаполнениеСПомощьюINI = Истина;
	ПараметрыЗагрузки.ИмяМетаданных            = ПараметрыЗаполнения.ИмяМетаданных;
	
	ПараметрыЗаполненияНаОсновании = Новый Структура;
	ПараметрыЗаполненияНаОсновании.Вставить("РольКонтрагента", ПараметрыЗаполнения.РольКонтрагента);
	ПараметрыЗагрузки.ПараметрыОснования = ПараметрыЗаполненияНаОсновании;
	
	Если ПараметрыЗаполнения.ЭтоВыбранныйДокумент Тогда
		ПараметрыЗагрузки.ДокументОснование = ПараметрыЗаполнения.Основание; 
	КонецЕсли;
	
	Saby_ТНЗагрузкаСервер.ЗагрузкаДанныхДокумента(ПараметрыЗагрузки);
	
	УстановитьЗапретЗаполнения(ПараметрыЗаполнения);
	
	РезультатФункции.ТекстСообщения = "Заполнение на основании завершено";
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеОснованийДляЗаполненияНаОснованииINI(ДокументОснование, ШаблонИмениINI)
	
	ОписаниеТипаОснования = Новый ОписаниеТипов;
	ОписаниеТипаОснования = Новый ОписаниеТипов(ОписаниеТипаОснования, Справочники.ТипВсеСсылки().Типы());
	ОписаниеТипаОснования = Новый ОписаниеТипов(ОписаниеТипаОснования, Документы.ТипВсеСсылки().Типы());
	
	ОписаниеТипаИмениИНИ = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(128, ДопустимаяДлина.Переменная));
	ОписаниеТипаРолейКонтрагентов = Новый ОписаниеТипов("ПеречислениеСсылка.Saby_РолиКонтрагентов");
	
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("Основание",       ОписаниеТипаОснования);
	РезультатФункции.Колонки.Добавить("ini_name",        ОписаниеТипаИмениИНИ);
	РезультатФункции.Колонки.Добавить("РольКонтрагента", ОписаниеТипаРолейКонтрагентов);
	
	ИмяМетаданных = ИмяМетаданныхДокумента(ДокументОснование);
	
	СтруктураОснования = РезультатФункции.Добавить();
	СтруктураОснования.Основание = ДокументОснование;
	СтруктураОснования.ini_name  = СтрШаблон(ШаблонИмениINI, ИмяМетаданных);
	
	ЕстьТранспортнаяНакладнаяВКонфигурации = Метаданные.Документы.Найти("ТранспортнаяНакладная") <> Неопределено;
	Если ЕстьТранспортнаяНакладнаяВКонфигурации Тогда
		
		ЭтоТранспортнаяНакладная = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ТранспортнаяНакладная");
		
		Если ЭтоТранспортнаяНакладная Тогда
			ЗапросДанных = Новый Запрос;
			ЗапросДанных.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование КАК Ссылка
			|ИЗ
			|	Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
			|ГДЕ
			|	ТранспортнаяНакладнаяДокументыОснования.Ссылка = &ДокументОснование
			|	И НЕ ТранспортнаяНакладнаяДокументыОснования.Ссылка.ПометкаУдаления";
			
			ЗапросДанных.УстановитьПараметр("ДокументОснование", ДокументОснование);
			
			ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
			Если ВыборкаДанных.Следующий() Тогда
				
				ИмяМетаданных = ИмяМетаданныхДокумента(ВыборкаДанных.Ссылка);
				
				СтруктураОснования = РезультатФункции.Вставить(0);
				СтруктураОснования.Основание = ВыборкаДанных.Ссылка;
				СтруктураОснования.ini_name  = СтрШаблон(ШаблонИмениINI, ИмяМетаданных);
				
			КонецЕсли;
		Иначе
			ЗапросДанных = Новый Запрос;
			ЗапросДанных.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТранспортнаяНакладнаяДокументыОснования.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
			|ГДЕ
			|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование = &ДокументОснование
			|	И НЕ ТранспортнаяНакладнаяДокументыОснования.Ссылка.ПометкаУдаления";
			
			ЗапросДанных.УстановитьПараметр("ДокументОснование", ДокументОснование);
			
			ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
			Если ВыборкаДанных.Следующий() Тогда
				
				СтруктураОснования = РезультатФункции.Добавить();
				СтруктураОснования.Основание = ВыборкаДанных.Ссылка;
				СтруктураОснования.ini_name  = СтрШаблон(ШаблонИмениINI, "ТранспортнаяНакладная");
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура УстановитьЗапретЗаполнения(ПараметрыЗаполнения)
	
	Если ПараметрыЗаполнения.ИмяМетаданных = "Saby_ТранспортнаяНакладная" Тогда
		ПараметрыЗаполнения.МенеджерДокумента.УстановитьЗапретЗаполнения(ПараметрыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОснованияДляЗаполнения(ПараметрыЗаполнения, ОснованияДляЗаполнения, РезультатФункции)
	
	ИмяИНИ = ПараметрыЗаполнения.МенеджерДокумента.ШаблонИмениINI();
	ИмяИНИ = СтрШаблон(ИмяИНИ, "ДанныеКонтрагентаОрганизации");
	
	Если Не РезультатФункции.Свойство("НовыеОснования") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("РольКонтрагента");
	
	Для Каждого НовоеОснование Из РезультатФункции.НовыеОснования Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, НовоеОснование);
		НайденныеСтроки = ОснованияДляЗаполнения.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтруктураОснования = НайденныеСтроки[0];
		Иначе
			СтруктураОснования = ОснованияДляЗаполнения.Добавить();
		КонецЕсли;
		
		СтруктураОснования.Основание       = НовоеОснование.Основание;
		СтруктураОснования.ini_name        = ИмяИНИ;
		СтруктураОснования.РольКонтрагента = НовоеОснование.РольКонтрагента;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ЗаполнениеНаОснованииINI

Функция ПоискРезультатаВКоллекции(Коллекция, Путь)
	
	РезультатФункции = Неопределено;
	Если Не ЗначениеЗаполнено(Коллекция) 
		Или Не ЗначениеЗаполнено(Путь) Тогда
		Возврат РезультатФункции;
	Иначе
		РезультатФункции = Коллекция;		
	КонецЕсли;	
	
	ЭтоСтруктура = ТипЗнч(Коллекция) = Тип("Структура");
	Ошибка       = Ложь;
	
	МассивРеквизитов = СтрРазделить(Путь, ".");
	Для Каждого ТекущийРеквизит Из МассивРеквизитов Цикл
				
		// Поиск в структуре имеет отличия
		Если ЭтоСтруктура Тогда
			Если РезультатФункции.Свойство(ТекущийРеквизит) Тогда
				РезультатФункции = РезультатФункции[ТекущийРеквизит];
			Иначе	
				Ошибка = Истина;
			КонецЕсли;
			
		Иначе 			
			// Соответствие				
			РезультатФункции = РезультатФункции[ТекущийРеквизит];
			Ошибка           = (РезультатФункции = Неопределено); 		
		КонецЕсли;	
		
		Если Ошибка Тогда
			РезультатФункции = Неопределено;
			Прервать;			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
