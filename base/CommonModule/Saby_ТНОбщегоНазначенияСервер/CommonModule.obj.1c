
#Область ПрограммныйИнтерфейс 

Функция ИмяКонфигурации() Экспорт
	Возврат Метаданные.Синоним;
КонецФункции

#Область Загрузка_Выгрузка

Функция ДанныеДляВыгрузки(Ссылка, ДопПараметры = Неопределено) Экспорт
	
	ТекущийЭтап = Неопределено;
	
	Данные = ТекущийТитулИИДДокумента(Ссылка);
	Если ЗначениеЗаполнено(Данные) Тогда
		
		ИДСбис = Данные["ИД"];
		Этап   = Данные["АктивныйЭтап"];
		
		Если ДопПараметры <> Неопределено И ДопПараметры.Свойство("Этап") Тогда
			Этап = ДопПараметры.Этап;
		КонецЕсли;
		
		ТекущийЭтап = ТитулПоПредставлению(Этап);
		
	КонецЕсли;
	
	Если ДопПараметры <> Неопределено И ДопПараметры.Свойство("ДанныеТитула") Тогда
		ДанныеТитула = ДопПараметры.ДанныеТитула;
	Иначе
		ДанныеТитула = ЗначенияРеквизитовТранспортнойНакладной(ТекущийЭтап, Ссылка);
	КонецЕсли;
	
    СтруктураВложения = ВложениеНаВыгрузку(ТекущийЭтап, ДанныеТитула);
	Если ЗначениеЗаполнено(СтруктураВложения) Тогда
		
		Вложение = Новый Структура;
		Вложение.Вставить("Тип",         "ЭТрН");
		Вложение.Вставить("Подтип",      СтруктураВложения.Титул);
		Вложение.Вставить("Подстановка", СтруктураВложения.Вложение);
		
		//Вложение.Вставить("ПодверсияФормата", "");
		//Вложение.Вставить("ВерсияФормата",  "5.01");
		
		ДокументСтруктура = Новый Структура;
		Если ЗначениеЗаполнено(ИДСбис) Тогда
			ДокументСтруктура.Вставить("Идентификатор", ИДСбис);
		КонецЕсли;
		
		МассивВложений = Новый Массив;
		МассивВложений.Добавить(Вложение);
		ДокументСтруктура.Вставить("Вложение", МассивВложений);
		
	Иначе
		ДокументСтруктура = Новый Структура;
	КонецЕсли;
	
	Возврат ДокументСтруктура;
	
КонецФункции

Функция ЗагрузкаДанныхДокумента(Параметры) Экспорт
	
	ИДСбис = Параметры.ИдСбис;
	Данные = Параметры.Данные;
	
	Если Параметры.Свойство("Ссылка") Тогда
		СсылкаДокВБазе = Параметры.Ссылка;
	Иначе
		СсылкаДокВБазе = Неопределено;
	КонецЕсли;
	
	ИзДокумента = Параметры.Свойство("ИзДокумента") И Параметры.ИзДокумента;
	
	// Поиск есть ли в базе 1С уже такой документ
	Если Не ЗначениеЗаполнено(СсылкаДокВБазе) Тогда
		СсылкаДокВБазе = ДокументПоИдентификаторуСбис(ИдСбис);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДокВБазе) Тогда
		
		// нашли документ в базе
		ОбъектДок = СсылкаДокВБазе.ПолучитьОбъект();
		
	Иначе
		
		// документа нет. создадим новый
		ОбъектДок = Документы.Saby_ТранспортнаяНакладная.СоздатьДокумент();
		ОбъектДок.НомерСбис   = Данные["Номер"];
		ОбъектДок.Комментарий = Данные["Название"];
		
	КонецЕсли;
	
	ЭтоЗаполнениеСПомощьюINI = Ложь;
	Если Параметры.Свойство("ЭтоЗаполнениеСПомощьюINI") Тогда
		ЭтоЗаполнениеСПомощьюINI = Параметры.ЭтоЗаполнениеСПомощьюINI;
	КонецЕсли;
	
	ЭтоПервоеОснование = Ложь;
	Если Параметры.Свойство("ЭтоПервоеОснование") Тогда
		ЭтоПервоеОснование = Параметры.ЭтоПервоеОснование;
	КонецЕсли;
	
	Если Параметры.Свойство("ДокументОснование") Тогда
		УстановитьДокументОснование(ОбъектДок, Параметры.ДокументОснование);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДок.Направление) Тогда
		Направление = Данные["Направление"];
		ОбъектДок.Направление = Перечисления.Saby_Направление[Направление];
	КонецЕсли;
	
	Подстановки = Данные["Подстановки"];
	
	// Нет подстановок для загрузки
	Если Не ЗначениеЗаполнено(Подстановки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущийТитул     = Неопределено;
	ТекущееСостояние = Неопределено;
	
	// Если условие ложно, то грузятся все титулы документа.
	Если Не ИзДокумента Или Параметры.Свойство("ТекущийТитул") Тогда
		
		СостояниеВБазе = ТекущийТитулИИДДокумента(ОбъектДок);
		Если ЗначениеЗаполнено(СостояниеВБазе) Тогда
			
			ТекущийТитул     = СостояниеВБазе["АктивныйЭтап"];
			ТекущееСостояние = СостояниеВБазе["Состояние"];
			
		КонецЕсли;
		
		Если Параметры.Свойство("ТекущийТитул") Тогда
			ТекущийТитул = Параметры.ТекущийТитул;
		КонецЕсли;
		
	КонецЕсли;
	
	// Состояние
	Если ЗначениеЗаполнено(Данные["Состояние"]) Тогда
		КодСостояния = ЧислоИзСтроки(Данные["Состояние"]["Код"]);
		Состояние    = Справочники.Saby_СостоянияОбъектов.ПолучитьСтатусДокументаСБИС(КодСостояния);
	Иначе
		Состояние = Неопределено;
	КонецЕсли;
	
	МассивТитулов = ТитулыДляЗагрузки(ТекущийТитул, ТекущееСостояние, Параметры);
	
	ДанныеДляОчисткиПоТитулам = РеквизитыДляОчисткиПоТитулам(ОбъектДок, МассивТитулов, Параметры);
	
	ДопПараметрыЗагрузкиВложения = ДопПараметрыЗагрузкиВложения(Параметры);
	ДопПараметрыЗагрузкиВложения.Просмотрено = Параметры.Свойство("ТекущийТитул");
	Если ЭтоЗаполнениеСПомощьюINI Тогда 
		ДопПараметрыЗагрузкиВложения.ЗагрузкаСОнлайна = Ложь;
	КонецЕсли;
	ДопПараметрыЗагрузкиВложения.События = Данные["Событие"];
	
	УведомлениеОУточнении = Перечисления.Saby_ТипТитулаЭтрН.УведомлениеОУточнении;
	
	ЗагруженныйТитул = Неопределено;
	Для Каждого Титул Из МассивТитулов Цикл
		
		ТитулСтрокой = ЗначениеТитула(Титул);
		
		Если Титул = УведомлениеОУточнении Тогда
			Префикс = "УведУточ_";
		Иначе
			Префикс = "ЭТрН_";
		КонецЕсли;
		
		Вложения = Подстановки[Префикс + ТитулСтрокой];
		
		Если ЗначениеЗаполнено(Вложения) Тогда
			Попытка
				
				Если Не ЭтоЗаполнениеСПомощьюINI Или ЭтоПервоеОснование Тогда
					ОчисткаДанныхПередЗагрузкой(ОбъектДок, Титул, ДанныеДляОчисткиПоТитулам);
				КонецЕсли;
				
				ЗагрузкаВложения(Вложения, Титул, ОбъектДок, ДопПараметрыЗагрузкиВложения);
				ЗагруженныйТитул = СокрЛП(Титул);
				
			Исключение
				
				// если не смогли загрузить какое то вложение
				// то запишем данные, чтобы при след. попытке начиначинать не с начала
				Если ЗначениеЗаполнено(ЗагруженныйТитул) Тогда
					СсылкаНаДокумент = СохранитьДокумент(ОбъектДок, ИДСбис, ЗагруженныйТитул, Состояние, ИзДокумента);
				КонецЕсли;
				
				ПодробнаяИнформацияОбОшибке = ИнформацияОбОшибке();
				Текст    = ПодробнаяИнформацияОбОшибке.Описание;
				Описание = "Не загружен документ SABY: " + ОбъектДок.НомерСбис + ", титул " + ТитулСтрокой;
				
				ЗаписатьОшибкуВЖурналРегистрации(СсылкаНаДокумент, Описание, Текст);
				
				Возврат СсылкаНаДокумент;
				
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ИзДокумента Тогда
		СобытиеДата = Данные["Событие"][0]["ДатаВремя"];
		ОбъектДок.ДатаИзменения = ПреобразоватьСтрокуВДату(СобытиеДата);
	КонецЕсли;
	
	ЗагрузитьДополнительныеДействия(ОбъектДок, Данные["ДопДействия"]);
	
	// Загрузка прошла успешно или не производилась. Возьмем последний этап
	ТекущиеЭтапы = Данные["ТекущиеЭтапы"];
	Если ЗначениеЗаполнено(ТекущиеЭтапы) Тогда
		ЗагруженныйТитул = ТекущиеЭтапы[ТекущиеЭтапы.ВГраница()]["Наименование"];
	Иначе
		ЗагруженныйТитул = "";
	КонецЕсли;
	
	Возврат СохранитьДокумент(ОбъектДок, ИДСбис, ЗагруженныйТитул, Состояние, ИзДокумента);
	
КонецФункции

Функция ШаблонДанныхТС() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Название",          "");
	Структура.Вставить("НомерСТС",          "");
	Структура.Вставить("VIN",               "");
	Структура.Вставить("РегНомер",          "");
	Структура.Вставить("ТипВладения",       "");
	Структура.Вставить("Тип",               "");
	Структура.Вставить("Марка",             "");
	Структура.Вставить("Грузоподъемность",  0);
	Структура.Вставить("Вместимость",       0);
	//Структура.Вставить("ОснованиеВладения", Новый Массив);
	
	Возврат Структура;
	
КонецФункции

Функция ШаблонДанныхВодителя() Экспорт
	
	ДанныеВодителя = Новый Структура;
	
	ДанныеВодителя.Вставить("Имя",          "");
	ДанныеВодителя.Вставить("Фамилия",      "");
	ДанныеВодителя.Вставить("Отчество",     "");
	ДанныеВодителя.Вставить("ИНН",          "");
	ДанныеВодителя.Вставить("СведенияПЭП" , "");
	ДанныеВодителя.Вставить("ПутевойЛист",  Новый Структура); // документ ТрН
	ДанныеВодителя.Вставить("Телефон",      Новый Массив);
	
	ДанныеВодителя.Вставить("ВУ", Новый Структура);
	ДанныеВодителя.ВУ.Вставить("Номер",      "");
	ДанныеВодителя.ВУ.Вставить("Серия",      "");
	ДанныеВодителя.ВУ.Вставить("ДатаВыдачи", "");
	
	Возврат ДанныеВодителя;
	
КонецФункции

// Документы Сбис....
Функция ТСИПрицепыИзБазы(ТС) Экспорт
	
	// Формируем новый массив
	Прицепы = ТС["Прицеп"];
	Если ЗначениеЗаполнено(Прицепы) Тогда
		СЗ = Новый СписокЗначений;
		СЗ.ЗагрузитьЗначения(Прицепы);
		МассивТС = СЗ.ВыгрузитьЗначения();
	Иначе
		МассивТС = Новый Массив;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТС) Тогда
		МассивТС.Добавить(ТС);
	КонецЕсли;
	
	// Если ТС и прицепов нет
	Если Не МассивТС.Количество() Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	МассивVIN = Новый Массив;
	МассивСТС = Новый Массив;
	МассивРН  = Новый Массив;
	
	Для Каждого Элемент Из МассивТС Цикл
		
		ВИН = Элемент["VIN"];
		Если ЗначениеЗаполнено(ВИН) Тогда
			МассивVIN.Добавить(ВИН);
		КонецЕсли;
		
		НомерСТС = Элемент["НомерСТС"];
		Если ЗначениеЗаполнено(НомерСТС) Тогда
			МассивСТС.Добавить(НомерСТС);
		КонецЕсли;
		
		РегНомер = РегНомерБезЛишнихСимволов(Элемент["РегНомер"]);
		Если ЗначениеЗаполнено(РегНомер) Тогда
			МассивРН.Добавить(РегНомер);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивVIN", МассивVIN);
	Запрос.УстановитьПараметр("МассивСТС", МассивСТС);
	Запрос.УстановитьПараметр("МассивРН",  МассивРН);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТранспортныеСредства.Ссылка КАК Ссылка,
	|	ТранспортныеСредства.Код КАК РегНомер,
	|	ТранспортныеСредства.VIN КАК VIN,
	|	ТранспортныеСредства.НомерСТС КАК НомерСТС
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|ГДЕ
	|	ТранспортныеСредства.Код В(&МассивРН)
    |
	|ОБЪЕДИНИТЬ ВСЕ
    |
	|ВЫБРАТЬ
	|	ТранспортныеСредства.Ссылка,
	|	ТранспортныеСредства.Код,
	|	ТранспортныеСредства.VIN,
	|	ТранспортныеСредства.НомерСТС
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|ГДЕ
	|	ТранспортныеСредства.VIN В(&МассивVIN)
    |
	|ОБЪЕДИНИТЬ ВСЕ
    |
	|ВЫБРАТЬ
	|	ТранспортныеСредства.Ссылка,
	|	ТранспортныеСредства.Код,
	|	ТранспортныеСредства.VIN,
	|	ТранспортныеСредства.НомерСТС
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|ГДЕ
	|	ТранспортныеСредства.НомерСТС В(&МассивСТС)
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВТ.РегНомер) КАК РегНомер,
	|	МАКСИМУМ(ВТ.VIN) КАК VIN,
	|	МАКСИМУМ(ВТ.НомерСТС) КАК НомерСТС
	|ИЗ
	|	ВТ КАК ВТ
    |
	|СГРУППИРОВАТЬ ПО
	|   ВТ.Ссылка";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	//Результат.Индексы.Добавить("VIN");
	//Результат.Индексы.Добавить("НомерСТС");
	Результат.Индексы.Добавить("РегНомер");
	
	Возврат Результат;
	
КонецФункции

// Разбор JSON по автомобилям и прицепам
//
Функция ТСИлиПрицепПослеЗагрузки(ТС, ДанныеВсехТС, ЭтоПрицеп = Ложь) Экспорт
	
	// Поиск
    Ссылка = Неопределено;
	Если Не ЗначениеЗаполнено(ТС["РегНомер"]) Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	// 1. VIN
	Если ЗначениеЗаполнено(ТС["VIN"]) Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("VIN", ТС["VIN"]);
		
		НайденныеСтроки = ДанныеВсехТС.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() Тогда
			Ссылка = НайденныеСтроки[0].Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	// 2. Попытка по Номер СТС
	Если ЗначениеЗаполнено(ТС["НомерСТС"])
		И Не ЗначениеЗаполнено(Ссылка) Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("НомерСТС", ТС["НомерСТС"]);
		
		НайденныеСтроки = ДанныеВсехТС.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() Тогда
			Ссылка = НайденныеСтроки[0].Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	// 3. Попытка по РегНомер
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("РегНомер", РегНомерБезЛишнихСимволов(ТС["РегНомер"]));
		
		НайденныеСтроки = ДанныеВсехТС.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() Тогда
			Ссылка = НайденныеСтроки[0].Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		
		// Создадим новую запись в БД
		Ссылка = НовоеТСПрицеп(ТС, ЭтоПрицеп);
		
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции 

#КонецОбласти // Загрузка_Выгрузка 

#Область КонтактнаяИнформация

Функция АдресВФорматеОбмена(ЗначениеКИ) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗначениеКИ) Тогда
		Возврат "";
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ЗначениеКИ);
	ИсходнаяСтруктура = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	СтруктураАдреса = ОбщийШаблонАдреса();
	СтруктураАдреса.Типовой = ЗначениеКИ;
	
	ИсходнаяСтруктура.Свойство("city", 			СтруктураАдреса.Структура.Город);
	ИсходнаяСтруктура.Свойство("houseNumber", 	СтруктураАдреса.Структура.Дом);
	ИсходнаяСтруктура.Свойство("ZIPcode", 		СтруктураАдреса.Структура.Индекс);
	ИсходнаяСтруктура.Свойство("street", 		СтруктураАдреса.Структура.Улица);
	Если ИсходнаяСтруктура.Свойство("apartments") Тогда
		Для Каждого Данные Из ИсходнаяСтруктура.apartments Цикл
			Если Данные.type = "Г" Тогда
				СтруктураАдреса.Структура.Город = Данные.number;
			ИначеЕсли Данные.type = "Ул" Тогда
				СтруктураАдреса.Структура.Улица = Данные.number;
			ИначеЕсли Данные.type = "Квартира" Тогда
				СтруктураАдреса.Структура.Квартира = Данные.number;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИсходнаяСтруктура.Свойство("buildings") Тогда
		Для Каждого Данные Из ИсходнаяСтруктура.buildings Цикл
			Если Данные.type = "Корпус" Тогда
				СтруктураАдреса.Структура.Корпус = Данные.number;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ЗначениеКИ);
	СтруктураАдреса.Структура.КодРегиона = 		СведенияОбАдресе.КодРегиона;
	СтруктураАдреса.Структура.НаселенныйПункт = СведенияОбАдресе.НаселенныйПункт;
	СтруктураАдреса.Структура.Район = 			СведенияОбАдресе.Район;
	
	ИсходнаяСтруктура.Свойство("value", 		СтруктураАдреса.Текст);
	ИсходнаяСтруктура.Свойство("countryCode", 	СтруктураАдреса.КодСтраны);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураАдреса);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Переопределяемая процедура под свою конфигурацию
// 
Функция КонтактнаяИнформацияОбъекта(СсылкаИлиОбъект, ВидИлиТипКИ = Неопределено, Дата = Неопределено, ТолькоПредставление = Ложь) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	КонтрактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		СсылкаИлиОбъект, 
		ВидИлиТипКИ, 
		Дата, 
		ТолькоПредставление
	);
	
	// Обработка возвращаем одиночное значение
	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("Значение",  "");
	СтруктураАдреса.Вставить("Структура", "");
	
	Если НЕ ТолькоПредставление
		И ВидИлиТипКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации
		Или ВидИлиТипКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации
		Или ВидИлиТипКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента
		Или ВидИлиТипКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
		
		Если КонтрактнаяИнформация.Количество() Тогда
			
			СтрокаКИ = КонтрактнаяИнформация[0];
			СтруктураАдреса.Значение  = СтрокаКИ.Представление;
			СтруктураАдреса.Структура = СтрокаКИ.Значение;
			
		КонецЕсли;
		
		Возврат СтруктураАдреса;
		
	Иначе
		Возврат КонтрактнаяИнформация;
	КонецЕсли;
	
КонецФункции

Функция ВидыКонтактнойИнформации(Ссылка) Экспорт 
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		
		ВидКИАдресЮр   = "ЮрАдресОрганизации";
		ВидТелефон     = "ТелефонОрганизации";
		ВидЕмайл       = "EmailОрганизации";
		ВидКИАдресФакт = "ФактАдресОрганизации";
		
	Иначе
		
		ВидКИАдресЮр   = "ЮрАдресКонтрагента";
		ВидТелефон     = "ТелефонКонтрагента";
		ВидКИАдресФакт = "ФактАдресКонтрагента";
		
		ИменаПредопределенных = Метаданные.Справочники.ВидыКонтактнойИнформации.ПолучитьИменаПредопределенных();
		Если ИменаПредопределенных.Найти("EmailКонтрагенты") <> Неопределено Тогда  
			ВидЕмайл = "EmailКонтрагенты"; // "Бухгалтерия предприятия, редакция 3.0"
		Иначе 
			ВидЕмайл = "EmailКонтрагента";
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураКИ = Новый Структура;
	СтруктураКИ.Вставить("АдресЮр",   Справочники.ВидыКонтактнойИнформации[ВидКИАдресЮр]);
	СтруктураКИ.Вставить("Телефон",   Справочники.ВидыКонтактнойИнформации[ВидТелефон]);
	СтруктураКИ.Вставить("Емайл",     Справочники.ВидыКонтактнойИнформации[ВидЕмайл]);
	СтруктураКИ.Вставить("АдресФакт", Справочники.ВидыКонтактнойИнформации[ВидКИАдресФакт]);
	
	Возврат СтруктураКИ;
	
КонецФункции

Функция МассивВидовКонтактнойИнформации() Экспорт
	
	РезультатФункции = Новый Массив;
	
	СтруктураВидовКИ = ВидыКонтактнойИнформации(Справочники.Организации.ПустаяСсылка());
	
	РезультатФункции.Добавить(СтруктураВидовКИ.АдресЮр);
	РезультатФункции.Добавить(СтруктураВидовКИ.Телефон);
	РезультатФункции.Добавить(СтруктураВидовКИ.Емайл);
	РезультатФункции.Добавить(СтруктураВидовКИ.АдресФакт);
	
	СтруктураВидовКИ = ВидыКонтактнойИнформации(Справочники.Контрагенты.ПустаяСсылка());
	
	РезультатФункции.Добавить(СтруктураВидовКИ.АдресЮр);
	РезультатФункции.Добавить(СтруктураВидовКИ.Телефон);
	РезультатФункции.Добавить(СтруктураВидовКИ.Емайл);
	РезультатФункции.Добавить(СтруктураВидовКИ.АдресФакт);
	
	Возврат РезультатФункции;
	
КонецФункции

// Получение значения в формате строки JSON.
//
// Параметры:
//  Данные			 - Произвольный - значение записи JSON.
//  ПараметрыЗаписи	 - ПараметрыЗаписиJSON  - параметры записи JSON.
// 
// Возвращаемое значение:
//  Строка - значение в строке JSON.
//
Функция ЗначениеВJSON(Данные, ПараметрыЗаписи = Неопределено) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ФиоИВУФизЛиц(МассивФизлиц)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПолучитьДанныеФизлиц(МассивФизлиц, МенеджерВременныхТаблиц);
	ПолучитьВУФизлиц(МассивФизлиц, МенеджерВременныхТаблиц);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	РеквизитыФизлиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РеквизитыФизлиц.Наименование КАК Наименование,
	|	РеквизитыФизлиц.ИНН КАК ИНН,
	|	РеквизитыФизлиц.Фамилия КАК Фамилия,
	|	РеквизитыФизлиц.Имя КАК Имя,
	|	РеквизитыФизлиц.Отчество КАК Отчество,
	|	ЕСТЬNULL(ВУФизлиц.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ВУФизлиц.Серия, """") КАК Серия,
	|	ЕСТЬNULL(ВУФизлиц.ДатаВыдачи, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаВыдачи
	|ИЗ
	|	РеквизитыФизлиц КАК РеквизитыФизлиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВУФизлиц КАК ВУФизлиц
	|		ПО РеквизитыФизлиц.ФизическоеЛицо = ВУФизлиц.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТелефоныФизлиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТелефоныФизлиц.Представление КАК Представление
	|ИЗ
	|	ТелефоныФизлиц КАК ТелефоныФизлиц";
	
	РезультатЗапроса = ЗапросДанных.ВыполнитьПакет();
	Выборка          = РезультатЗапроса[0].Выбрать();
	ВыборкаТелефоны  = РезультатЗапроса[1].Выбрать();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	Соответствие = Новый Соответствие;
	Пока Выборка.Следующий() Цикл 
		
		ВыборкаТелефоны.Сбросить();
		
		Если ПустаяСтрока(Выборка.Фамилия) Тогда
			ЧастиФИО = СтрРазделить(Выборка.Наименование, " ", Ложь);
			Фамилия  = ?(ЧастиФИО.Количество(),     ЧастиФИО[0], "");
			Имя      = ?(ЧастиФИО.Количество() > 1, ЧастиФИО[1], "");
			Отчество = ?(ЧастиФИО.Количество() > 2, ЧастиФИО[2], "");
		Иначе 
			Фамилия  = Выборка.Фамилия;
			Имя      = Выборка.Имя;
			Отчество = Выборка.Отчество;
		КонецЕсли;
				
		Структура = Новый Структура;
		Структура.Вставить("Фамилия",      Фамилия);
		Структура.Вставить("Имя",          Имя);
		Структура.Вставить("Отчество",     Отчество);
		Структура.Вставить("ИНН",          Выборка.ИНН);
		Структура.Вставить("НомерВУ",      Выборка.Номер);
		Структура.Вставить("СерияВУ",      Выборка.Серия);
		Структура.Вставить("ДатаВыдачиВУ", Выборка.ДатаВыдачи);
		
		// Телефоны
		МассивТелефонов	= Новый Массив;
		
		Отбор = Новый Структура;
		Отбор.Вставить("ФизическоеЛицо", Выборка.ФизическоеЛицо);
		Пока ВыборкаТелефоны.НайтиСледующий(Отбор) Цикл
			МассивТелефонов.Добавить(ВыборкаТелефоны.Представление);
		КонецЦикла;
		
		Структура.Вставить("Телефоны", ЗначениеВСтрокуВнутр(МассивТелефонов));
		
		Соответствие.Вставить(Выборка.ФизическоеЛицо, Структура);
		
	КонецЦикла;

	Возврат Соответствие;
	
КонецФункции

Процедура ПолучитьДанныеФизлиц(МассивФизлиц, МенеджерВременныхТаблиц)
	
	НоваяЗапись = Справочники.ФизическиеЛица.СоздатьЭлемент();
	ЕстьФИО = ЕстьРеквизитИлиСвойство("Фамилия", НоваяЗапись);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.УстановитьПараметр("МассивФизлиц", МассивФизлиц);
	ЗапросДанных.УстановитьПараметр("Телефон",      Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ЕстьФИО Тогда
		ЗапросДанных.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВложенныйЗапрос.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВложенныйЗапрос.Фамилия КАК Фамилия,
		|	ВложенныйЗапрос.Имя КАК Имя,
		|	ВложенныйЗапрос.Отчество КАК Отчество,
		|	ВложенныйЗапрос.Порядок КАК Порядок
		|ПОМЕСТИТЬ ФИОФизлиц
		|ИЗ
		|	(ВЫБРАТЬ
		|		ФИОФизическихЛицСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
		|		ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
		|		ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
		|		ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество,
		|		1 КАК Порядок
		|	ИЗ
		|		РегистрСведений.ФИОФизическихЛиц.СрезПоследних(, ФизическоеЛицо В (&МассивФизлиц)) КАК ФИОФизическихЛицСрезПоследних
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ФизическиеЛица.Ссылка,
		|		ФизическиеЛица.Фамилия,
		|		ФизическиеЛица.Имя,
		|		ФизическиеЛица.Отчество,
		|		2
		|	ИЗ
		|		Справочник.ФизическиеЛица КАК ФизическиеЛица
		|	ГДЕ
		|		ФизическиеЛица.Ссылка В (&МассивФизлиц)) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Порядок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо";
	Иначе
		ЗапросДанных.Текст =
		"ВЫБРАТЬ
		|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
		|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
		|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
		|ПОМЕСТИТЬ ФИОФизлиц
		|ИЗ
		|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(, ФизическоеЛицо В (&МассивФизлиц)) КАК ФИОФизическихЛицСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо";
	КонецЕсли;
	
	ЗапросДанных.Выполнить();
	
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
	|	ФизическиеЛица.Наименование КАК Наименование,
	|	ФизическиеЛица.ИНН КАК ИНН,
	|	ЕСТЬNULL(ФИОФизлиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(ФИОФизлиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(ФИОФизлиц.Отчество, """") КАК Отчество
	|ПОМЕСТИТЬ РеквизитыФизлиц
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФИОФизлиц КАК ФИОФизлиц
	|		ПО (ФИОФизлиц.ФизическоеЛицо = ФизическиеЛица.Ссылка)
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&МассивФизлиц)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК ФизическоеЛицо,
	|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Представление
	|ПОМЕСТИТЬ ТелефоныФизлиц
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка В (&МассивФизлиц)
	|	И ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ФИОФизлиц";
	
	ЗапросДанных.Выполнить();
	
КонецПроцедуры

Процедура ПолучитьВУФизлиц(МассивФизлиц, МенеджерВременныхТаблиц)
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.УстановитьПараметр("МассивФизлиц", МассивФизлиц);
	ЗапросДанных.УстановитьПараметр(
		"ВодительскоеУдостоверение", Справочники.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение
	);
	
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо КАК ФизическоеЛицо,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи
	|ПОМЕСТИТЬ ВУФизлиц
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|			,
	|			Физлицо В (&МассивФизлиц)
	|				И ВидДокумента = &ВодительскоеУдостоверение) КАК ДокументыФизическихЛицСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо";
	
	ЗапросДанных.Выполнить();
	
КонецПроцедуры

#Область ДанныеЮрЛиц

Процедура ОбновитьДанныеЮрЛиц(Форма, Роли) Экспорт
	
	ФормаОбъект = Saby_ТНОбщегоНазначенияКлиентСервер.ФормаОбъект(Форма);
	
	ТаблицаЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.ТаблицаЮрЛиц(Роли, ФормаОбъект);
	
	МассивРолей = Saby_ТНОбщегоНазначенияКлиентСервер.ВыгрузитьКолонкуЮрЛиц(ТаблицаЮрЛиц, "Роль");
	МассивЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.ВыгрузитьКолонкуЮрЛиц(ТаблицаЮрЛиц, "Ссылка");
	
	Saby_ТНОбщегоНазначенияКлиентСервер.ОчиститьДанныеЮрЛицПоРолям(МассивРолей, ФормаОбъект.ДанныеЮрЛиц);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОчиститьДанныеЮрЛицПоРолям(МассивРолей, ФормаОбъект.КонтактныеДанные);
	
	ТаблицаКИ = КонтактнаяИнформацияИзБазы(МассивЮрЛиц);
	
	ЗаполнитьДанныеЮрЛиц(ФормаОбъект, ТаблицаЮрЛиц, ТаблицаКИ);
	ЗаполнитьКонтактныеДанные(ФормаОбъект, ТаблицаЮрЛиц, ТаблицаКИ);
	
	ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ("", ТаблицаЮрЛиц, ТаблицаКИ);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьАдресаПогрузкиДоставки(Форма, ДопПараметры);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(Форма, ДопПараметры);
	
КонецПроцедуры

Процедура ПолучитьДанныеЮрЛицИзБазы(МассивЮрЛиц, МенеджерВременныхТаблиц)
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ИмяКонфигурации() = "1С:ERP Управление предприятием 2" Тогда
		
		ЗапросДанных.Текст =
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП,
		|	Контрагенты.СтранаРегистрации.Наименование КАК СтранаРегистрации,
		|	Контрагенты.РегистрационныйНомер КАК ОГРН,
		|	ВЫБОР
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
		|			ТОГДА ""ЮрЛицо""
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ТОГДА ""ФизЛицо""
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
		|			ТОГДА ""ЮрЛицоНеРезидент""
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
		|			ТОГДА ""ИндивидуальныйПредприниматель""
		|	КОНЕЦ КАК ЮрФизЛицо
		|ПОМЕСТИТЬ ДанныеЮрЛицИзБазы
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка В(&МассивЮрЛиц)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Организации.Наименование,
		|	Организации.ИНН,
		|	Организации.КПП,
		|	Организации.СтранаРегистрации.Наименование,
		|	Организации.ОГРН,
		|	ВЫБОР
		|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
		|			ТОГДА ""ЮрЛицо""
		|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ТОГДА ""ФизЛицо""
		|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
		|			ТОГДА ""ЮрЛицоНеРезидент""
		|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
		|			ТОГДА ""ИндивидуальныйПредприниматель""
		|	КОНЕЦ КАК ЮрФизЛицо
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивЮрЛиц)";
		
	Иначе
		
		ЗапросДанных.Текст =
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП,
		|	Контрагенты.СтранаРегистрации.Наименование КАК СтранаРегистрации,
		|	Контрагенты.РегистрационныйНомер КАК ОГРН,
		|	ВЫБОР
		|		КОГДА Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
		|			ТОГДА ""ЮрЛицо""
		|		КОГДА Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|			ТОГДА ""ФизЛицо""
		|	КОНЕЦ КАК ЮрФизЛицо
		|ПОМЕСТИТЬ ДанныеЮрЛицИзБазы
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка В(&МассивЮрЛиц)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Организации.Наименование,
		|	Организации.ИНН,
		|	Организации.КПП,
		|	Организации.СтранаРегистрации.Наименование,
		|	Организации.ОГРН,
		|	ВЫБОР
		|		КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
		|			ТОГДА ""ЮрЛицо""
		|		КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|			ТОГДА ""ФизЛицо""
		|	КОНЕЦ
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивЮрЛиц)";
		
	КонецЕсли;
	
	ЗапросДанных.УстановитьПараметр("МассивЮрЛиц", МассивЮрЛиц);
	
	ЗапросДанных.Выполнить();
	
КонецПроцедуры

Функция КонтактнаяИнформацияИзБазы(МассивЮрЛиц) Экспорт
	
	ОтборКИ = УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
	ОтборКИ.ВидыКонтактнойИнформации = Saby_ТНОбщегоНазначенияСервер.МассивВидовКонтактнойИнформации();
	ОтборКИ.Дата                     = ТекущаяДатаСеанса();
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(МассивЮрЛиц, ОтборКИ);
	
	РезультатФункции = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаКИ Цикл
		СтруктураКИ = Новый Структура("Ссылка,Вид,Тип,Значение,Представление");
		ЗаполнитьЗначенияСвойств(СтруктураКИ, СтрокаТаблицы);
		СтруктураКИ.Ссылка = СтрокаТаблицы.Объект;
		
		РезультатФункции.Добавить(СтруктураКИ);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьДанныеЮрЛиц(ФормаОбъект, ТаблицаЮрЛиц, ТаблицаКИ = Неопределено)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.ВыгрузитьКолонкуЮрЛиц(ТаблицаЮрЛиц, "Ссылка");
	
	МассивТиповСсылок = Новый Массив;
	МассивТиповСсылок.Добавить(Тип("СправочникСсылка.Организации"));
	МассивТиповСсылок.Добавить(Тип("СправочникСсылка.Контрагенты"));
	
	ОписаниеТипаРоли = Новый ОписаниеТипов("ПеречислениеСсылка.Saby_РолиКонтрагентов");
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(МассивТиповСсылок));
	ТаблицаДанных.Колонки.Добавить("Роль", ОписаниеТипаРоли);
	
	Для Каждого СтруктураДанных Из ТаблицаЮрЛиц Цикл
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.Ссылка = СтруктураДанных.Ссылка;
		СтрокаДанных.Роль   = СтруктураДанных.Роль;
	КонецЦикла;
	
	ПолучитьДанныеЮрЛицИзБазы(МассивЮрЛиц, МенеджерВременныхТаблиц);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЮрЛиц.Ссылка КАК Ссылка,
	|	ТаблицаЮрЛиц.Роль КАК Роль
	|ПОМЕСТИТЬ ДанныеТаблицыЮрЛиц
	|ИЗ
	|	&ТаблицаЮрЛиц КАК ТаблицаЮрЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТаблицыЮрЛиц.Ссылка КАК Ссылка,
	|	ДанныеТаблицыЮрЛиц.Роль КАК Роль,
	|	ДанныеЮрЛицИзБазы.ИНН КАК ИНН,
	|	ДанныеЮрЛицИзБазы.КПП КАК КПП,
	|	ДанныеЮрЛицИзБазы.СтранаРегистрации КАК СтранаРегистрации,
	|	ДанныеЮрЛицИзБазы.ОГРН КАК ОГРН,
	|	ДанныеЮрЛицИзБазы.ЮрФизЛицо КАК ЮрФизЛицо,
	|	ДанныеЮрЛицИзБазы.Наименование КАК Наименование
	|ИЗ
	|	ДанныеТаблицыЮрЛиц КАК ДанныеТаблицыЮрЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЮрЛицИзБазы КАК ДанныеЮрЛицИзБазы
	|		ПО ДанныеТаблицыЮрЛиц.Ссылка = ДанныеЮрЛицИзБазы.Ссылка";

	ЗапросДанных.УстановитьПараметр("ТаблицаЮрЛиц", ТаблицаДанных);

	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		СтрокаДанныхЮрЛиц = ФормаОбъект.ДанныеЮрЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныхЮрЛиц, ВыборкаДанных, , "ЮрФизЛицо");
		СтрокаДанныхЮрЛиц.ЮрФизЛицо    = Перечисления.Saby_ЮрФизЛицо[ВыборкаДанных.ЮрФизЛицо];
		СтрокаДанныхЮрЛиц.СтруктураФИО = СтруктураФИОСтрокой(СтрокаДанныхЮрЛиц.ЮрФизЛицо, ВыборкаДанных.Наименование);
		
		Если ТаблицаКИ <> Неопределено Тогда
			
			ВидыКИ = Saby_ТНОбщегоНазначенияСервер.ВидыКонтактнойИнформации(ВыборкаДанных.Ссылка);
			
			Адрес = Saby_ТНОбщегоНазначенияКлиентСервер.ПолучитьКИ(ТаблицаКИ, ВыборкаДанных.Ссылка, ВидыКИ.АдресЮр);
			
			СтрокаДанныхЮрЛиц.Адрес          = Адрес.Представление;
			СтрокаДанныхЮрЛиц.АдресСтруктура = Адрес.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКонтактныеДанные(ФормаОбъект, ТаблицаЮрЛиц, ТаблицаКИ)
	
	Для Каждого СтрокаЮрЛица Из ТаблицаЮрЛиц Цикл
		
		ВидыКИ = Saby_ТНОбщегоНазначенияСервер.ВидыКонтактнойИнформации(СтрокаЮрЛица.Ссылка);
		
		МассивКИ = Saby_ТНОбщегоНазначенияКлиентСервер.ПолучитьКИ(ТаблицаКИ, СтрокаЮрЛица.Ссылка, ВидыКИ.Телефон, Ложь);
		МассивКИЕмайлы = Saby_ТНОбщегоНазначенияКлиентСервер.ПолучитьКИ(ТаблицаКИ, СтрокаЮрЛица.Ссылка, ВидыКИ.Емайл, Ложь);
		
		Для Каждого СтруктураКИ Из МассивКИЕмайлы Цикл
			МассивКИ.Добавить(СтруктураКИ);
		КонецЦикла;
		
		Для Каждого СтруктураКИ Из МассивКИ Цикл
			СтрокаКонтактныхДанных = ФормаОбъект.КонтактныеДанные.Добавить();
			СтрокаКонтактныхДанных.Роль      = СтрокаЮрЛица.Роль;
			СтрокаКонтактныхДанных.Тип       = СтруктураКИ.Тип;
			СтрокаКонтактныхДанных.Значение  = СтруктураКИ.Представление;
			СтрокаКонтактныхДанных.Структура = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
				СтрокаКонтактныхДанных.Значение, СтрокаКонтактныхДанных.Тип
			);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураФИОСтрокой(ЮрФизЛицо, Наименование) Экспорт
	
	РезультатФункции = "";
	
	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.Saby_ЮрФизЛицо.ФизЛицо")
		Или ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.Saby_ЮрФизЛицо.ИндивидуальныйПредприниматель") Тогда
		
		МассивФИО = СтрРазделить(Наименование, " ");
		
		СтруктураФИО = Новый Структура;
		СтруктураФИО.Вставить("Фамилия",  Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЭлементаМассива(МассивФИО, 0));
		СтруктураФИО.Вставить("Имя",      Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЭлементаМассива(МассивФИО, 1));
		СтруктураФИО.Вставить("Отчество", Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЭлементаМассива(МассивФИО, 2));
		
		ФИОСтрокой = ЗначениеВСтрокуВнутр(СтруктураФИО);
		
		РезультатФункции = ФИОСтрокой;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПрочитатьJSONДляВебКлиента(СтрокаJSON) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	РезультатФункции = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ДанныеЮрЛиц

Функция ПараметрыВидаКонтактнойИнформации(Знач ТипКонтактнойИнформации) Экспорт
	Возврат УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ТипКонтактнойИнформации);
КонецФункции

Функция КонтактнаяИнформацияПоПредставлению(Значение, ТипКонтактнойИнформации) Экспорт
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Значение, ТипКонтактнойИнформации);
КонецФункции

#КонецОбласти // КонтактнаяИнформация

#Область РегламентныеЗадания

Процедура ВыгрузкаЭТрН(МассивДокументов = Неопределено) Экспорт
	
	context_params = Saby_Core.ПроверитьНаличиеПараметровПодключения();
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст = 
	"ВЫБРАТЬ
	|	Saby_ТранспортнаяНакладная.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Saby_ТранспортнаяНакладная КАК Saby_ТранспортнаяНакладная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Saby_Состояние КАК Saby_Состояние
	|		ПО Saby_ТранспортнаяНакладная.Ссылка = Saby_Состояние.Объект
	|ГДЕ
	|	Saby_ТранспортнаяНакладная.Направление = ЗНАЧЕНИЕ(Перечисление.Saby_Направление.Исходящий)
	|	И НЕ Saby_ТранспортнаяНакладная.ПометкаУдаления
	|	И ЕСТЬNULL(Saby_Состояние.UID, """") = """"
	|	И Saby_ТранспортнаяНакладная.Ссылка В(&МассивДокументов)";
	
	Если МассивДокументов <> Неопределено Тогда
		ЗапросДанных.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Иначе
		ЗапросДанных.Текст = СтрЗаменить(
			ЗапросДанных.Текст,
			"И Saby_ТранспортнаяНакладная.Ссылка В(&МассивДокументов)",
			""
		);
	КонецЕсли;
		
	РезультатЗапроса = ЗапросДанных.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СписокДокументов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Документы.Saby_ТранспортнаяНакладная.ЗаписатьДокументВСбис(СписокДокументов, context_params);
	
КонецПроцедуры 

Процедура ЗагрузкаЭТрН(Начало = Неопределено, Окончание = Неопределено) Экспорт
	
	context_params = Saby_Core.ПроверитьНаличиеПараметровПодключения();
        
    СтруктураПараметров = Новый Структура;
                
    СтруктураПараметров.Вставить("МассивДокументов", Неопределено);
    СтруктураПараметров.Вставить("context_params",   context_params);
    СтруктураПараметров.Вставить("Источник",         Неопределено);
    СтруктураПараметров.Вставить("ДопПараметры",     Новый Структура);
	
	Если Начало <> Неопределено И Окончание <> Неопределено Тогда
		СтруктураПараметров.ДопПараметры.Вставить("Начало",    Начало);
		СтруктураПараметров.ДопПараметры.Вставить("Окончание", Окончание);
	Иначе
		ДатаОбновления = Документы.Saby_ТранспортнаяНакладная.ПоследнееУспешноЗагруженноеИзменение();
		ТекДата = ТекущаяДатаСеанса();
		Если ТекДата < ДатаОбновления Тогда
			ДатаОбновления = ТекДата;
		КонецЕсли;
		
		СтруктураПараметров.ДопПараметры.Вставить("Начало",    ДатаОбновления);
		СтруктураПараметров.ДопПараметры.Вставить("Окончание", КонецДня(ТекущаяДатаСеанса()));
	КонецЕсли;
    
    РезультатЗагрузки = Документы.Saby_ТранспортнаяНакладная.ЗагрузкаДокументовПоИзменениям(СтруктураПараметров);
	
КонецПроцедуры 

#КонецОбласти // РегламентныеЗадания

#Область Универсальные_методы

Функция ДлительнаяОперация(СтруктураПараметров, УникальныйИдентификаторФормы) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификаторФормы);
	
	ИмяКоманды = СтруктураПараметров.ИмяКоманды;
	
	Наименование = НаименованиеДлительнойОперации(ИмяКоманды);
	
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Наименование;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	
	Если ИмяКоманды = "ЗагрузитьВСбис" Тогда
		
		ИмяФункции = "Документы.Saby_ТранспортнаяНакладная.ЗаписатьДокументВСбис";
		
		Возврат
		ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполнения,
			ИмяФункции, 
			СтруктураПараметров.МассивДокументов,
			СтруктураПараметров.context_params,
			СтруктураПараметров.ДопПараметры
		);
			
	ИначеЕсли ИмяКоманды = "ОбновитьДокументИзСбис" Тогда
		
		ИмяФункции = "Документы.Saby_ТранспортнаяНакладная.ЗагрузкаДокументовПоИзменениям";
		
		Возврат
		ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполнения,
			ИмяФункции, 
			СтруктураПараметров);
			
	ИначеЕсли ИмяКоманды = "ПрочитатьДокумент" Тогда
		
		ИмяФункции = "Документы.Saby_ТранспортнаяНакладная.ПрочитатьДокументИзСбис";
		
		Возврат
		ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполнения,
			ИмяФункции,  
			СтруктураПараметров.МассивДокументов,
			СтруктураПараметров.context_params,
			СтруктураПараметров.ДопПараметры
		);
			
	ИначеЕсли ИмяКоманды = "ОбновитьАктивныйЭтап" Тогда
		
		ИмяФункции = "Документы.Saby_ТранспортнаяНакладная.ОбновитьАктивныйЭтапИзСбис";
		
		//ТекущийТитул = Неопределено;
		//Если СтруктураПараметров.ДопПараметры <> Неопределено
		//	И СтруктураПараметров.ДопПараметры.Свойство("ТекущийТитул") Тогда
		//	ТекущийТитул = СтруктураПараметров.ДопПараметры.ТекущийТитул;
		//КонецЕсли;
		
		Возврат
		ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполнения,
			ИмяФункции,  
			СтруктураПараметров.МассивДокументов,
			СтруктураПараметров.context_params,
			СтруктураПараметров.ДопПараметры
		);
			
	Иначе 
		
		Возврат Неопределено;
			
	КонецЕсли;
		
КонецФункции

// Возвращает дату в виде отформатированной строки с учетом смещения. 
// Аналог ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением, только с возможностью указать формат даты.
//
// Параметры:
//  ЛокальнаяДата	 - Дата	 	 - Дата
//  ФорматнаяСтрока	 - Строка	 - Форматная строка 
// 
// Возвращаемое значение:
//  Строка - Отформатированная дата с учетом смещения
//
Функция ФорматЛокальнойДатыСоСмещением(ЛокальнаяДата, ФорматнаяСтрока = "ДФ=ггггММддЧЧммсс") Экспорт
	
	Если Не ЗначениеЗаполнено(ЛокальнаяДата) Тогда 
		Возврат "";
	КонецЕсли;
		
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Смещение = СмещениеСтандартногоВремени(ЧасовойПоясСеанса());
	#Иначе
		Смещение = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().СмещениеСтандартногоВремени;
	#КонецЕсли
	
	ПредставлениеСмещения = "";
	Если Смещение > 0 Тогда
		ПредставлениеСмещения = "+";
	ИначеЕсли Смещение < 0 Тогда
		ПредставлениеСмещения = "-";
		Смещение = - Смещение;
	КонецЕсли; 
	
	Если Смещение <> 0 Тогда
		ПредставлениеСмещения = ПредставлениеСмещения + Формат('00010101' + Смещение, "ДФ=HH:mm");
	Иначе 
		ПредставлениеСмещения = "+00:00";
	КонецЕсли;
	
	Возврат Формат(ЛокальнаяДата, ФорматнаяСтрока) + ПредставлениеСмещения;
	
КонецФункции

Функция ЧислоИзСтроки(Значение) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Значение);
	
КонецФункции

Функция ЗначениеЮрФизЛицаКонфигурации(ИмяЗначения) Экспорт

	НетЮрФизЛица = Метаданные.Перечисления.Найти("ЮрФизЛицо") = Неопределено;
	Если НетЮрФизЛица Тогда
		
		// "Бухгалтерия предприятия, редакция 3.0"
		ИмяПеречисления = "ЮридическоеФизическоеЛицо";
		Если ИмяЗначения = "ЮрЛицо" Тогда 
			ИмяЗначения = "ЮридическоеЛицо";
		Иначе
			ИмяЗначения = "ФизическоеЛицо";
		КонецЕсли;
			
	Иначе
		ИмяПеречисления = "ЮрФизЛицо";
	КонецЕсли;
	
	Значение = Перечисления[ИмяПеречисления][ИмяЗначения];
	
	Возврат Значение;

КонецФункции

Функция ИмяМетаданныхДокумента(ДокументСсылка) Экспорт
	
	ТипЗначения = ТипЗнч(ДокументСсылка);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		 ИмяДокумента = ДокументСсылка.Метаданные().Имя; 
	Иначе 
		 ИмяДокумента = "";
	КонецЕсли;
	
	Возврат ИмяДокумента;
	
КонецФункции

Функция ЕстьРеквизитИлиСвойство(Имя, Объект) Экспорт
	
	УИД = Новый УникальныйИдентификатор();
	ВременнаяСтруктура = Новый Структура(Имя, УИД);
	ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Объект);
	
	Возврат ВременнаяСтруктура[Имя] <> УИД;
	
КонецФункции

// Преобразует строку таблицы значений в структуру.
// Свойства структуры и их значения совпадают с колонками переданной строки.
//
// Параметры:
//  СтрокаТаблицыЗначений - СтрокаТаблицыЗначений
//  МассивКолонокИсключений - Массив, колонки для исключения 
//
// Возвращаемое значение:
//  Структура - преобразованная строка таблицы значений.
//
Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений, МассивКолонокИсключений = Неопределено) Экспорт
	
	Структура = Новый Структура;
	Для каждого Колонка Из СтрокаТаблицыЗначений.Владелец().Колонки Цикл 
		
		Если МассивКолонокИсключений <> Неопределено Тогда
			
			Если МассивКолонокИсключений.Найти(Колонка.Имя) = Неопределено Тогда 
				Структура.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
			КонецЕсли;
				
		Иначе 	
			Структура.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Процедура ЗаписатьОшибкуВЖурналРегистрации(Ссылка, Описание, Текст) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(
		Описание,
		УровеньЖурналаРегистрации.Ошибка,
		, // ОбъектМетаданных - ссылка на элемент справичника или документ
		Ссылка,
		Текст,
    	РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
	);
	
КонецПроцедуры

Функция ПолучитьТаблицуМенеджераВременныхТаблиц(МенеджерВременныхТаблиц, ИмяТаблицы)
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанных.Текст = СтрЗаменить("ВЫБРАТЬ * ИЗ &ИмяТаблицы", "&ИмяТаблицы", ИмяТаблицы);
	
	Возврат ЗапросДанных.Выполнить().Выгрузить();
	
КонецФункции

Функция ДанныеСоответствия(Соответствие, Путь)
	
	РезультатФункции = Соответствие;
	
	МассивРеквизитов = СтрРазделить(Путь, ".");
	Для Каждого ТекущийРеквизит Из МассивРеквизитов Цикл
		Если Не ЗначениеЗаполнено(РезультатФункции) Тогда
			Прервать;
		КонецЕсли;
		РезультатФункции = РезультатФункции[ТекущийРеквизит];
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // Универсальные_методы

#Область ОбщиеСбис

Функция ИдентификаторВСбис(Ссылка) Экспорт
	
	//ToDo: Вынести в общий модуль. Получение уид и активного этапа. Использовать еще при создани дока 
	Выборка = РегистрыСведений.Saby_Состояние.ПрочитатьПоОбъекту(Ссылка);
	Если Выборка <> Неопределено Тогда
		УИД = Выборка.UID;
	Иначе 
		УИД = "";
	КонецЕсли;
	
	Возврат УИД;
	
КонецФункции

Функция ДокументПоИдентификаторуСбис(ИдСбис) Экспорт
	
	СсылкаДокВБазе = Неопределено;
	
	ВыборкаСостояния = РегистрыСведений.Saby_Состояние.ПрочитатьПоUID(ИДСбис);
	Если ВыборкаСостояния.Следующий() Тогда
		СсылкаДокВБазе = ВыборкаСостояния.Объект;
	КонецЕсли;

	Возврат СсылкаДокВБазе;
	
КонецФункции

Функция ЗначениеТитула(Значение, Загрузка = Ложь) Экспорт
	
	Параметры = ПараметрыСоответствия();
	Параметры.ИмяПеречисления = "Saby_ТипТитулаЭтрН";
	Параметры.ПоискПоЗначению = Загрузка ;
	
	// Основные титулы
	ДополнитьСоответствие(Параметры, "Погрузка",                 "1110339");
	ДополнитьСоответствие(Параметры, "ПолучениеГруза",           "1110340");
	ДополнитьСоответствие(Параметры, "ПриемкаГруза",             "1110341");
	ДополнитьСоответствие(Параметры, "ВыдачаГруза",              "1110342");
	// Динамические титулы
	ДополнитьСоответствие(Параметры, "Переадресовка",            "1110343");
	ДополнитьСоответствие(Параметры, "ПереадресовкаУведомление", "1167009");
	ДополнитьСоответствие(Параметры, "ЗаменаВодителяТС",         "1110344");
	ДополнитьСоответствие(Параметры, "ИзменениеСтоимости",       "1110345");
	ДополнитьСоответствие(Параметры, "СогласованиеСтоимости",    "1110346");
	// Отрицательное завершение ДО
	ДополнитьСоответствие(Параметры, "УведомлениеОУточнении",    "1115113");
	
	Возврат Параметры.Соответствие.Получить(Значение);
	
КонецФункции

Функция ТитулПоПредставлению(Текст) Экспорт
	
	Соответствие = Новый Соответствие;
	
	// Основные титулы
	Соответствие.Вставить("Погрузка",                           Перечисления.Saby_ТипТитулаЭтрН.Погрузка);
	Соответствие.Вставить("Получение груза",                    Перечисления.Saby_ТипТитулаЭтрН.ПолучениеГруза);
	Соответствие.Вставить("Приемка груза",                      Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза);
	Соответствие.Вставить("Выдача груза",                       Перечисления.Saby_ТипТитулаЭтрН.ВыдачаГруза);
	// Динамические титулы
	Соответствие.Вставить("Переадресовка",                      Перечисления.Saby_ТипТитулаЭтрН.Переадресовка);
	Соответствие.Вставить("Замена водителей/ТС",                Перечисления.Saby_ТипТитулаЭтрН.ЗаменаВодителяТС);
	Соответствие.Вставить("Изменение стоимости",                Перечисления.Saby_ТипТитулаЭтрН.ИзменениеСтоимости);
	Соответствие.Вставить("Согласование стоимости",             Перечисления.Saby_ТипТитулаЭтрН.СогласованиеСтоимости);
	Соответствие.Вставить("Согласовать стоимость",              Перечисления.Saby_ТипТитулаЭтрН.СогласованиеСтоимости);
	Соответствие.Вставить("Уведомление о переадресовке",        Перечисления.Saby_ТипТитулаЭтрН.ПереадресовкаУведомление);
	// Отрицательное завершение ДО
	Соответствие.Вставить("Уведомление о требовании уточнений", Перечисления.Saby_ТипТитулаЭтрН.УведомлениеОУточнении);
	
	Возврат Соответствие.Получить(Текст);
	
КонецФункции

Функция КодТитула(КодТитулаОнлайна) Экспорт
	
	РезультатФункции = КодТитулаОнлайна;
	РезультатФункции = СтрЗаменить(РезультатФункции, "УведУточ_", "");
	РезультатФункции = СтрЗаменить(РезультатФункции, "ЭТрН_",     "");
	Возврат РезультатФункции;
	
КонецФункции

Функция ЭтоДинамическийТитул(Титул) Экспорт
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.Переадресовка,            Истина);
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.ЗаменаВодителяТС,         Истина);
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.ИзменениеСтоимости,       Истина);
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.СогласованиеСтоимости,    Истина);
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.ПереадресовкаУведомление, Истина);
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.УведомлениеОУточнении,    Истина);
	
	ЭтоДинамТитул = Ложь;
	Если ЗначениеЗаполнено(Титул) Тогда 
		ЭтоДинамТитул = (Соответствие.Получить(Титул) = Истина);
	КонецЕсли;
	
    Возврат ЭтоДинамТитул;
	
КонецФункции

Процедура ЗачисткаОтметокШтрафовАктов(ОбъектДок, Титул, ЗначениеРоли) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектДок, "Ссылка")
		И Не ЗначениеЗаполнено(ОбъектДок.Ссылка) Тогда
		Возврат;
	КонецЕсли;
		
	ОтметкиДляУдаления = Новый Массив;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Титул);
	Отбор.Вставить("Роль", ЗначениеРоли);
	
	ОтметкиТитула = ОбъектДок.Отметки.НайтиСтроки(Отбор);
	
	Соответствие = Новый Соответствие;
	Для Каждого Строка Из ОтметкиТитула Цикл
		Соответствие.Вставить(Строка.КлючСтроки, "");
		ОтметкиДляУдаления.Добавить(Строка);
	КонецЦикла;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектДок, "Штрафы") Тогда
		// Штрафы и Акты ... ошибка при установке отбора по ключу отметки в цикле....
		// придется обегать все. При больших объемах можно уйти на запрос
		ИндексШтрафы = ОбъектДок.Штрафы.Количество() - 1;
		Пока ИндексШтрафы >= 0 Цикл
					
			СтрокаШтраф = ОбъектДок.Штрафы[ИндексШтрафы];
				
			ЕстьСтрока = Соответствие.Получить(СтрокаШтраф.КлючСтроки_Отметки);
			Если ЕстьСтрока <> Неопределено  Тогда
				ОбъектДок.Штрафы.Удалить(СтрокаШтраф);
			КонецЕсли;
			
			ИндексШтрафы = ИндексШтрафы - 1;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектДок, "Акты") Тогда
		ИндексАкты = ОбъектДок.Акты.Количество() - 1;
		Пока ИндексАкты >= 0 Цикл
					
			СтрокаАкт = ОбъектДок.Акты[ИндексАкты];
				
			ЕстьСтрока = Соответствие.Получить(СтрокаАкт.КлючСтроки_Отметки);
			Если ЕстьСтрока <> Неопределено  Тогда
				ОбъектДок.Акты.Удалить(СтрокаАкт);
			КонецЕсли;
			
			ИндексАкты = ИндексАкты - 1;
			
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Отметка Из ОтметкиДляУдаления Цикл
		ОбъектДок.Отметки.Удалить(Отметка);
	КонецЦикла;	   
	
КонецПроцедуры

#КонецОбласти // ОбщиеСбис 

#Область ОбработкаОшибок

Процедура ОбновитДанныеПоОшибкам(Форма, Ошибки = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		Ошибки = Документы.Saby_ТранспортнаяНакладная.ОшибкиФЛК(Форма.Объект.Ссылка, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Ошибки = Неопределено Тогда
		Форма.КоличествоОшибок = 0;
		Форма.ТаблицаОшибок.Очистить();
	Иначе
		Форма.КоличествоОшибок = Ошибки.СписокОшибок.Количество();
		
		Форма.ТаблицаОшибок.Очистить();
		Для Каждого СтруктураОшибки Из Ошибки.СписокОшибок Цикл
			СтрокаТаблицыОшибок = Форма.ТаблицаОшибок.Добавить();
			СтрокаТаблицыОшибок.Ошибка          = СтруктураОшибки.ТекстДляОднойОшибки;
			Если СтруктураОшибки.Свойство("РеквизитОбъекта") Тогда
				СтрокаТаблицыОшибок.РеквизитОбъекта = СтруктураОшибки.РеквизитОбъекта;
				СтрокаТаблицыОшибок.ЭлементФормы    = СтруктураОшибки.ЭлементФормы;
				СтрокаТаблицыОшибок.ИндексСтроки    = СтруктураОшибки.ИндексСтроки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьВнешнийВидЭлементовОшибок(Форма);
	
КонецПроцедуры

Процедура ОбновитьВнешнийВидЭлементовОшибок(Форма) Экспорт
	
	ЕстьОшибки = Форма.КоличествоОшибок <> 0;
	
	Форма.Элементы.ФормаПоказатьСкрытьОшибки.Видимость = ЕстьОшибки;
	Форма.Элементы.ГруппаОшибки.Видимость              = ЕстьОшибки И Форма.Элементы.ФормаПоказатьСкрытьОшибки.Пометка;
	
	КоличествоОшибокСтрокой = Формат(Форма.КоличествоОшибок, "ЧДЦ=0; ЧГ=");
	
	Если ЕстьОшибки Тогда
		ШаблонЗаголовкаКнопкиПоказа = "Ошибки (%1)";
		Форма.Элементы.ФормаПоказатьСкрытьОшибки.Заголовок = СтрШаблон(
			ШаблонЗаголовкаКнопкиПоказа,
			КоличествоОшибокСтрокой
		);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработкаОшибок

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

#Область ВыгрузитьДокументВJson

// Титул "1110339" Грузоотправитель погрузка
//
Функция ТитулПогрузка(ДанныеДокумента)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
		
	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;
	
	// Отдельно вынесены общие данные документа
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("Номер", РеквизитыОбъекта.Номер);
	СтруктураДокумента.Вставить("Дата",	 ЗначениеДатыВремяДляВыгрузки(РеквизитыОбъекта.Дата, Истина));
		
	ОбщаяСтруктура.Вставить("Документ", СтруктураДокумента);
	
	// Получим данные по всем вложенным документам 
	СопроводительныеДокументы = ВложенныеДокументы(ДанныеДокумента);
	
	// Данные по участникам документооборота
	ОбщаяСтруктура.Вставить("Грузоотправитель", ДанныеЮрЛица("Отправитель", ДанныеДокумента));
	ОбщаяСтруктура.Вставить("Грузополучатель",  ДанныеЮрЛица("Получатель",  ДанныеДокумента));
	ОбщаяСтруктура.Вставить("Грузоперевозчик",  ДанныеЮрЛица("Перевозчик",  ДанныеДокумента));
	
	Если ЗначениеЗаполнено(РеквизитыОбъекта.Составитель) Тогда
		ОбщаяСтруктура.Вставить("Файл",             Новый Структура);
		ОбщаяСтруктура.Файл.Вставить("Составитель", ДанныеСоставителя(ДанныеДокумента));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыОбъекта.Заказчик) Тогда 
		ОбщаяСтруктура.Вставить("Заказчик", ДанныеЮрЛица("Заказчик", ДанныеДокумента));	
	КонецЕсли;
	
	// Дополнительные документы 
	Если ЗначениеЗаполнено(СопроводительныеДокументы.РасчетПеревозки) Тогда 
		ОбщаяСтруктура.Грузоотправитель.Вставить("ОснованиеРасчета", СопроводительныеДокументы.РасчетПеревозки); // пока не заполняем
	КонецЕсли;
		
	// Адреса доставки/погрузки
	ОбщаяСтруктура.Вставить("ПунктВыгрузки", ПунктВыгрузки(РеквизитыОбъекта));
	ОбщаяСтруктура.Вставить("ПунктПогрузки", ПунктПогрузки(РеквизитыОбъекта));
	
	// Условия перевозки, переехали из погрузки... нужен тест подставновки после выноса
	ИнциаторПодтверждение = СопроводительныеДокументы.ИнциаторПодтверждение;
	УсловияПеревозки      = УсловияПеревозки(ДанныеДокумента, ИнциаторПодтверждение);
	
	ОбщаяСтруктура.Вставить("УсловияПеревозки", УсловияПеревозки);
	
	// Погрузка
	Погрузка = ДанныеПогрузки(ДанныеДокумента, 
		СопроводительныеДокументы.ОснованиеОтгрузки, СопроводительныеДокументы.ОснованиеПолномочий);
	
	ОбщаяСтруктура.Вставить("Погрузка", Погрузка);
	
	// - удалим из общей структуры сопр. документов
	СопроводительныеДокументы.Удалить("РасчетПеревозки");
	//СопроводительныеДокументы.Удалить("УслугиПеревозки");
	СопроводительныеДокументы.Удалить("ОснованиеОтгрузки");
	СопроводительныеДокументы.Удалить("ОснованиеПолномочий");
	
	// Сопроводительные документы
	ОбщаяСтруктура.Вставить("СопроводительныеДокументы", СопроводительныеДокументы);
	
	// Транспорт и все с ним связанное 
	ОбщаяСтруктура.Вставить("ТранспортноеСредство", ТранспортНаВыгрузку(РеквизитыОбъекта.Отправитель_ТранспортноеСредство));
	
	ОбщаяСтруктура.ТранспортноеСредство.Вставить("Прицеп",      ПрицепыНаВыгрузку(ДанныеДокумента.Прицепы));
	ОбщаяСтруктура.ТранспортноеСредство.Вставить("СпецУсловия", СпецУсловия(ДанныеДокумента.СпецРазрешения));
	
	ОбщаяСтруктура.Вставить("Водители", ВодителиНаВыгрузку(ДанныеДокумента.Водители, ДанныеДокумента.ПутевыеЛисты));
	
	// Отметки, штрафы, акты
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Перечисления.Saby_ТипТитулаЭтрН.Погрузка);
	
	ОбщаяСтруктура.Вставить("Отметки", ОтметкиПоТитулу(ДанныеДокумента, Отбор));
	
	// Груз
	ОбщаяСтруктура.Вставить("Груз", ДанныеГруза(ДанныеДокумента));
	
	// Заявка на перевозку
	ОбщаяСтруктура.Вставить("ЗаявкаНаПеревозку", ЗаявкаНаПеревозку(РеквизитыОбъекта));
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110340" Перевозчик приемка груза 
Функция ТитулПриемкаГруза(ДанныеДокумента)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
    Замечания = Новый Структура;
	
	ПриемкаДата = СтруктураВремя(РеквизитыОбъекта.Перевозчик_ПриемкаДатаВремя);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяПостановки", ПриемкаДата, Истина);
	
	ПрибылДата = СтруктураВремя(РеквизитыОбъекта.Перевозчик_ПриемкаДатаВремяПрибыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяПрибытия", ПрибылДата, Истина);
	
	УбылДата = СтруктураВремя(РеквизитыОбъекта.Перевозчик_ПриемкаДатаВремяУбыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяУбытия", УбылДата, Истина);
	
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ВыполненныеРаботы", РеквизитыОбъекта.Перевозчик_ЗамечанияПоПогрузочнымРаботам);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "КоличествоМест",    РеквизитыОбъекта.Перевозчик_ПогрузкаЗамечанияПоКоличеству);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "МассаГруза",        РеквизитыОбъекта.Перевозчик_ПогрузкаЗамечанияПоМассе);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "СостояниеГруза",    РеквизитыОбъекта.Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза);
	
	Погрузка = Новый Структура;
	Погрузка.Вставить("ЗамечанияПеревозчика", Замечания);
	
	ОбщаяСтруктура = Новый Структура;
	ОбщаяСтруктура.Вставить("Погрузка", Погрузка);
	
	// Отметки, штрафы, акты
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Перечисления.Saby_ТипТитулаЭтрН.ПолучениеГруза);
	
	ОбщаяСтруктура.Вставить("Отметки", ОтметкиПоТитулу(ДанныеДокумента, Отбор));
		
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110341" Грузополучатель получение груза
//
Функция ТитулПолучениеГруза(ДанныеДокумента)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
    ОбщаяСтруктура = Новый Структура;
	
	ПрибылДата = СтруктураВремя(РеквизитыОбъекта.Выгрузка_ДатаВремяПрибыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(ОбщаяСтруктура, "ДатаВремяПрибытия", ПрибылДата, Истина);
	
	УбылДата = СтруктураВремя(РеквизитыОбъекта.Выгрузка_ДатаВремяУбыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(ОбщаяСтруктура, "ДатаВремяУбытия", УбылДата, Истина);
			
	Груз = Новый Структура;
	
	Масса = Новый Структура;
	Масса.Вставить("Брутто",           РеквизитыОбъекта.Выгрузка_МассаБрутто);
	Масса.Вставить("Нетто",            РеквизитыОбъекта.Выгрузка_МассаНетто);
	Масса.Вставить("МетодОпределения", ЗначениеМетодаОпределенияМассы(РеквизитыОбъекта.Выгрузка_МассаМетодРасчета)); 
	
	Груз.Вставить("Масса", Масса);
	
	Груз.Вставить("КоличествоМест", РеквизитыОбъекта.Выгрузка_КоличествоМест);
	Груз.Вставить("Объем",          РеквизитыОбъекта.Выгрузка_Объем);

	Состояние = Новый Структура;
	ДобавитьСвойствоВСтруктуруСКонтролем(Состояние, "Общее", РеквизитыОбъекта.Выгрузка_Состояние);
	
	ДобавитьСвойствоВСтруктуруСКонтролем(ОбщаяСтруктура, "Состояние", Состояние);
	ДобавитьСвойствоВСтруктуруСКонтролем(Груз,           "Состояние", Состояние);
	
	ОбщаяСтруктура.Вставить("Груз", Груз);
	
	// Груз - пока игнорим.... хз надо ли мне выгружать
	// КоличествоМест
	// КоличествоПаллет
	// МассаБрутто
	// МассаНетто
	// Наименование
	// Объем
	// Плотность
	// Состояние
	
	// Отметки, штрафы, акты
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза);
	
	Итог = Новый Структура;
	Итог.Вставить("Выгрузка",      ОбщаяСтруктура);
	Итог.Вставить("Отметки",       ОтметкиПоТитулу(ДанныеДокумента, Отбор));
	Итог.Вставить("ПунктВыгрузки", ПунктВыгрузки(РеквизитыОбъекта));
	
	Возврат Итог;
	
КонецФункции

// Титул "1110342" Выдача груза перевозчиком
//
Функция ТитулВыдачаГруза(ДанныеДокумента)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	Замечания = Новый Структура;
	
	ПостановкаДата = СтруктураВремя(РеквизитыОбъекта.Перевозчик_ВыгрузкаДатаВремя);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяПостановки", ПостановкаДата, Истина);
	
	ПрибылДата = СтруктураВремя(РеквизитыОбъекта.Перевозчик_ВыгрузкаДатаВремяПрибыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяПрибытия", ПрибылДата, Истина); 
	
	УбылДата = СтруктураВремя(РеквизитыОбъекта.Перевозчик_ВыгрузкаДатаВремяУбыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяУбытия", УбылДата, Истина);
	
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ВыполненныеРаботы", РеквизитыОбъекта.Перевозчик_ЗамечанияПоРазгрузочнымРаботам);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "СостояниеГруза",    РеквизитыОбъекта.Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза);
	
	СтруктураЗамечаний = Новый Структура;
	СтруктураЗамечаний.Вставить("ЗамечанияПеревозчика", Замечания);
	
	// Отметки, штрафы, акты
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Перечисления.Saby_ТипТитулаЭтрН.ВыдачаГруза);
	Отметки = ОтметкиПоТитулу(ДанныеДокумента, Отбор);
	
	ОбщаяСтруктура = Новый Структура;
	ОбщаяСтруктура.Вставить("Выгрузка", СтруктураЗамечаний);
	ОбщаяСтруктура.Вставить("Отметки",  Отметки);
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110343" Перевозчик переадресовка
//
Функция ТитулПереадресовка(ДанныеТитула)

	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;
	
	// Пункт выгрузки
	ОбщаяСтруктура.Вставить("ПунктВыгрузки", ПунктВыгрузки(ДанныеТитула));
	
	// Грузополучатель
	ОбщаяСтруктура.Вставить("Грузополучатель",  ДанныеЮрЛица("Получатель", ДанныеТитула));
	
	ОбщаяСтруктура.Вставить("Причина", ДанныеТитула.Причина);
	
	Переадресовка = Новый Структура;
	Переадресовка.Вставить("ДатаВремя", СтруктураВремя(ДанныеТитула.Переадресовка_ДатаВремя,,Истина));
	
	// Отметки
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Перечисления.Saby_ТипТитулаЭтрН.Переадресовка);
	
	ОбщаяСтруктура.Вставить("Отметки", ОтметкиПоТитулу(ДанныеТитула, Отбор));
		
	// Основание
	Основание = ДанныеТитула.ПереадресовкаНаОсновании;
	Если ЗначениеЗаполнено(Основание) Тогда  
		
		ДанныеДок = РеквизитыОдиночногоДокументаЭТрН(Основание);
		
		Переадресовка.Вставить("Основание", Новый Структура);
			
		ДанныеДок.Вставить("ДатаВремя", СтруктураВремя(ДанныеДок.ДатаВремя,,Истина)); // меняем формат даты
		Переадресовка.Основание.Вставить("Документ", ДанныеДок);
		
	КонецЕсли;
	
	ОбщаяСтруктура.Вставить("Переадресовка", Переадресовка);
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1167009" Уведомление о переадресовке
//
Функция ТитулУведомлениеОПереадресовке(ДанныеТитула)

	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;
	
	// Пункт выгрузки
	ОбщаяСтруктура.Вставить("ПунктВыгрузки", ПунктВыгрузки(ДанныеТитула));
	
	// Грузополучатель
	Если ЗначениеЗаполнено(ДанныеТитула.Получатель) Тогда 
		ОбщаяСтруктура.Вставить("Грузополучатель", ДанныеЮрЛица("Получатель", ДанныеТитула));
	КонецЕсли;
	
	Уведомление = Новый Структура;	
	Уведомление.Вставить("Причина", ДанныеТитула.Причина);
	
	Если ЗначениеЗаполнено(ДанныеТитула.ОтправительУведомления) Тогда 
		ОтправительУведомления = ОтправительУведомления(ДанныеТитула.ОтправительУведомления);
		Уведомление.Вставить("Отправитель", ОтправительУведомления);
	КонецЕсли;
	
	// Основание
	Основание = ДанныеТитула.ПереадресовкаНаОсновании;
	Если ЗначениеЗаполнено(Основание) Тогда 
		
	    ДанныеДокумента = РеквизитыОдиночногоДокументаЭТрН(Основание);
		
		// делаем костыль по перехода на формат 5.02
		//Отгрузка = Новый Массив;
		//Отгрузка.Добавить(ДанныеДокумента);
		
		СопроводительныеДокументы = Новый Структура;
		СопроводительныеДокументы.Вставить("Отгрузка", ДанныеДокумента); //Отгрузка);
		
		ОбщаяСтруктура.Вставить("СопроводительныеДокументы", СопроводительныеДокументы);
		
	КонецЕсли;
		
	Переадресовка = Новый Структура;
	Переадресовка.Вставить("Уведомление", Уведомление);
	
	ОбщаяСтруктура.Вставить("Переадресовка", Переадресовка);
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110344" Перевозчик замена водителя 
//
Функция ТитулЗаменаВодителя(ДанныеТитула)
	
	МассивДокументов = Новый Массив();
	
	ОснованиеЗамены = ДанныеТитула.ЗаменаВодителейТС_НаОсновании;
	Если ЗначениеЗаполнено(ОснованиеЗамены)
		И ТипЗнч(ОснованиеЗамены) = Тип("СправочникСсылка.Saby_ДокументыТрН") Тогда
		МассивДокументов.Добавить(ОснованиеЗамены);
	КонецЕсли;
	
	ОснованиеПередачиГрузаТС = ДанныеТитула.ОснованиеПередачиГрузаТС;
	Если ЗначениеЗаполнено(ОснованиеПередачиГрузаТС) Тогда
		МассивДокументов.Добавить(ОснованиеПередачиГрузаТС);
	КонецЕсли;
	
    ДанныеДокументов = РеквизитыДокументовСбис(МассивДокументов);
	
	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;
	
	// Водители + основание передачи....
	Если ЗначениеЗаполнено(ДанныеТитула.Водители) Тогда 
		Водители = ВодителиНаВыгрузку(ДанныеТитула.Водители, ДанныеТитула.ПутевыеЛисты);
		ОбщаяСтруктура.Вставить("Водители", Водители);
	КонецЕсли;
	
	// Транспорт и все с ним связанное
	Если ЗначениеЗаполнено(ДанныеТитула.Отправитель_ТранспортноеСредство) Тогда
		Транспорт = ТранспортНаВыгрузку(ДанныеТитула.Отправитель_ТранспортноеСредство);
		ОбщаяСтруктура.Вставить("ТранспортноеСредство", Транспорт);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеТитула.СпецРазрешения) Тогда
		СпецУсловия = СпецУсловия(ДанныеТитула.СпецРазрешения);
		Если Не ОбщаяСтруктура.Свойство("ТранспортноеСредство") Тогда
			ОбщаяСтруктура.Вставить("ТранспортноеСредство", Новый Структура);
		КонецЕсли;
		ОбщаяСтруктура.ТранспортноеСредство.Вставить("СпецУсловия", СпецУсловия); 
	КонецЕсли;

	Если ЗначениеЗаполнено(ОснованиеПередачиГрузаТС) Тогда
		
		ДанныеДокументаПередачи = ДанныеДокументов.Получить(ОснованиеПередачиГрузаТС);
		
		ДокументПередачи = Новый Структура; 
		ДокументПередачи.Вставить("ПередачаГруза", ДанныеДокументаПередачи);
		
		Если Не ОбщаяСтруктура.Свойство("ТранспортноеСредство") Тогда
			ОбщаяСтруктура.Вставить("ТранспортноеСредство", Новый Структура);
		КонецЕсли;
		ОбщаяСтруктура.ТранспортноеСредство.Вставить("Документ", ДокументПередачи);
		
	КонецЕсли;
	
	// Прицепы
	Если ЗначениеЗаполнено(ДанныеТитула.Прицепы) Тогда 
		Прицепы = ПрицепыНаВыгрузку(ДанныеТитула.Прицепы);
		Если Не ОбщаяСтруктура.Свойство("ТранспортноеСредство") Тогда
			ОбщаяСтруктура.Вставить("ТранспортноеСредство", Новый Структура);
		КонецЕсли;
		ОбщаяСтруктура.ТранспортноеСредство.Вставить("Прицеп", Прицепы);
	КонецЕсли;
	
	// Отметки
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Перечисления.Saby_ТипТитулаЭтрН.ЗаменаВодителяТС);
	
	ОбщаяСтруктура.Вставить("Отметки", ОтметкиПоТитулу(ДанныеТитула, Отбор));
	
	// Основание
	Если ЗначениеЗаполнено(ОснованиеЗамены) Тогда  
		
		ДанныеОснования = Новый Структура;
		
		Если ТипЗнч(ОснованиеЗамены) = Тип("Строка") Тогда 
			ДанныеОснования.Вставить("Текст", ОснованиеЗамены);
		Иначе 	
					
			ДанныеДок = ДанныеДокументов.Получить(ОснованиеЗамены);
			ДанныеДок.Удалить("Тип");
			ДанныеДок.Удалить("Ссылка");
			
			ДанныеОснования.Вставить("Документ", ДанныеДок);
			
		КонецЕсли;
		
		ЗаменаВодителяТС = Новый Структура;
		ЗаменаВодителяТС.Вставить("Основание", ДанныеОснования);
		ЗаменаВодителяТС.Вставить("ДатаВремя", СтруктураВремя(ДанныеТитула.ДатаВремяЗамены, , Истина));
		
		ОбщаяСтруктура.Вставить("ЗаменаВодителяТС", ЗаменаВодителяТС);
		
	КонецЕсли;
		
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110345" Изменение стоимости 
//
Функция ТитулИзменениеСтоимости(ДанныеТитула)
	
	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;

    Перевозчик = Новый Структура;
	Перевозчик.Вставить("Название", Новый Структура);
	Перевозчик.Название.Вставить("Полное", СокрЛП(ДанныеТитула.Перевозчик));
	
	Если ЗначениеЗаполнено(ДанныеТитула.РасчетныйСчетПеревозчик) Тогда 		
		ДанныеБанкСчета = РеквизитыБанковскогоСчета(ДанныеТитула.РасчетныйСчетПеревозчик);		
	Иначе 	
				
		ДанныеБанкСчета = Новый Структура;
		ДанныеБанкСчета.Вставить("НомерСчета", ДанныеТитула.НомерСчетаПеревозчик);
		ДанныеБанкСчета.Вставить("Банк",       Новый Структура);
		
		// Банк
		ДанныеБанкСчета.Банк.Вставить("Наименование", Новый Структура);
		ДанныеБанкСчета.Банк.Наименование.Вставить("Полное", ДанныеТитула.БанкНазваниеПеревозчик);

		ДанныеБанкСчета.Банк.Вставить("БИК",     ДанныеТитула.БанкБИКПеревозчик);
		ДанныеБанкСчета.Банк.Вставить("КоррСчет",ДанныеТитула.БанкКоррСчетПеревозчик);
		
	КонецЕсли;
	
	Перевозчик.Вставить("Реквизиты", Новый Структура);
	Перевозчик.Реквизиты.Вставить("Банковские", ДанныеБанкСчета);
	
	ОбщаяСтруктура.Вставить("Грузоперевозчик", Перевозчик);
	
	СтруктураСтоимости = Новый Структура;	
	СтруктураСтоимости.Вставить("ВключаяНДС",  ДанныеТитула.Сумма); 
	СтруктураСтоимости.Вставить("БезНДС",      ДанныеТитула.СуммаБезНДС);     
	СтруктураСтоимости.Вставить("Расчет",      ДанныеТитула.Условия);	
		
	// рубль по умолчанию. RUB - символьный код. 
	// добавить валюту. реквизит документа. Наименование - символьный код
	СтруктураСтоимости.Вставить("Валюта", Новый Структура);
	СтруктураСтоимости.Валюта.Вставить("Код",          "643");
	СтруктураСтоимости.Валюта.Вставить("Наименование", "Российский рубль"); 

	// Налог
	СтруктураСтоимости.Вставить("Налог", Новый Структура);
	СтруктураСтоимости.Налог.Вставить("Ставка", ЗначениеСтавкиНДС(ДанныеТитула.Ставка)); 
    СтруктураСтоимости.Налог.Вставить("Сумма",  ДанныеТитула.СуммаНДС);
	
	ОбщаяСтруктура.Вставить("СтоимостьПеревозки", СтруктураСтоимости);
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110346" Согласование стоимости 
//
Функция ТитулСогласованиеСтоимости(ДанныеТитула)

	// Собираем общую структуру документа	
	ОбщаяСтруктура = Новый Структура; 
	
	Грузоотправитель = Новый Структура;
	Грузоотправитель.Вставить("Название", Новый Структура);
	Грузоотправитель.Название.Вставить("Полное", СокрЛП(ДанныеТитула.Отправитель));
	
	Если ЗначениеЗаполнено(ДанныеТитула.РасчетныйСчет) Тогда 		
		ДанныеБанкСчета = РеквизитыБанковскогоСчета(ДанныеТитула.РасчетныйСчет);		
	Иначе 	
						
		ДанныеБанкСчета = Новый Структура;
		ДанныеБанкСчета.Вставить("НомерСчета", ДанныеТитула.НомерСчета);
		ДанныеБанкСчета.Вставить("Банк",       Новый Структура);
		
		// Банк
		ДанныеБанкСчета.Банк.Вставить("Наименование", Новый Структура);
		ДанныеБанкСчета.Банк.Наименование.Вставить("Полное", ДанныеТитула.БанкНазвание);

		ДанныеБанкСчета.Банк.Вставить("БИК",     ДанныеТитула.БанкБИК);
		ДанныеБанкСчета.Банк.Вставить("КоррСчет",ДанныеТитула.БанкКоррСчет);
		
	КонецЕсли;
		
	Грузоотправитель.Вставить("Реквизиты", Новый Структура);
	Грузоотправитель.Реквизиты.Вставить("Банковские", ДанныеБанкСчета);
		
	ОбщаяСтруктура.Вставить("Грузоотправитель", Грузоотправитель);
		
	// из формы
	Если ДанныеТитула.ТипПлательщик <> "Отправитель" Тогда 
		
		ИнойПлательщик = Новый Структура;
		
		ИнойПлательщик.Вставить("Название", Новый Структура);
		ИнойПлательщик.Название.Вставить("Полное", СокрЛП(ДанныеТитула.Плательщик));
		
		// Основание                                          
		Основание = ДанныеТитула.ОснованиеОплаты;
		Если ЗначениеЗаполнено(Основание) Тогда 
			
			ДанныеДокумента = РеквизитыОдиночногоДокументаЭТрН(Основание);
			
			ИнойПлательщик.Вставить("Основание", ДанныеДокумента);
						
		КонецЕсли;
		
		ОбщаяСтруктура.Вставить("ИнойПлательщик", ИнойПлательщик); 		
		
	КонецЕсли;
		
	Возврат ОбщаяСтруктура;
	
КонецФункции

Функция ЗначенияРеквизитовТранспортнойНакладной(ТекущийЭтап, Ссылка, ДопДанные = Неопределено) Экспорт
	
	Если ДопДанные = Неопределено Тогда
		ДополнительныеДанные = ДопДанные;
	Иначе
		ДополнительныеДанные = ДопДанные.Получить(ТекущийЭтап);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийЭтап) Или ТекущийЭтап = ЗначениеТитула("1110339", Истина) Тогда
		
		Возврат ВыгрузкаДанныеПогрузка(Ссылка, ДополнительныеДанные);
				
	ИначеЕсли ТекущийЭтап = ЗначениеТитула("1110340", Истина) Тогда
		
		Возврат ВыгрузкаДанныеПриемкаГруза(Ссылка, ДополнительныеДанные);
		
	ИначеЕсли ТекущийЭтап = ЗначениеТитула("1110341", Истина) Тогда
		
		Возврат ВыгрузкаДанныеПолучениеГруза(Ссылка, ДополнительныеДанные);
		
	ИначеЕсли ТекущийЭтап = ЗначениеТитула("1110342", Истина) Тогда    
		
		Возврат ВыгрузкаДанныеВыдачаГруза(Ссылка, ДополнительныеДанные);  
				
	Иначе 	
		
		Возврат Неопределено;
		
	КонецЕсли;
		
КонецФункции

Функция ВыгрузкаДанныеПогрузка(Ссылка, ДопДанные)
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Номер");
	Реквизиты.Добавить("Дата");
	Реквизиты.Добавить("Отправитель_СопроводительнаяВедомость");
	Реквизиты.Добавить("Заказчик_Договор");
	Реквизиты.Добавить("Отгрузка_НаОснованииДокумент");
	Реквизиты.Добавить("Отгрузка_ОтветственныйНаОсновании");
	Реквизиты.Добавить("ИнициаторПереадресацииПодтверждение");
	Реквизиты.Добавить("Отправитель");
	Реквизиты.Добавить("Получатель");
	Реквизиты.Добавить("Перевозчик");
	Реквизиты.Добавить("Составитель");
	Реквизиты.Добавить("Заказчик");
	Реквизиты.Добавить("РасчетПеревозки");
	Реквизиты.Добавить("Отправитель_ДоставитьДо");
	Реквизиты.Добавить("АдресДоставкиЗначение");
	Реквизиты.Добавить("Отправитель_АдресДоставки");
	Реквизиты.Добавить("Погрузка_ДатаВремя");
	Реквизиты.Добавить("Погрузка_Адрес");
	Реквизиты.Добавить("АдресПогрузкиЗначение");
	Реквизиты.Добавить("Отправитель_ТемператураОт");
	Реквизиты.Добавить("Отправитель_ТемператураДо");
	Реквизиты.Добавить("Отправитель_ВлажностьОт");
	Реквизиты.Добавить("Отправитель_ВлажностьДо");
	Реквизиты.Добавить("ИнициаторПереадресации");
	Реквизиты.Добавить("Отправитель_НормыПеревозки");
	Реквизиты.Добавить("Отправитель_ОграничениеСкорости");
	Реквизиты.Добавить("Отправитель_Пломба");
	Реквизиты.Добавить("Отправитель_ДоставитьСрок");
	Реквизиты.Добавить("Отправитель_ПерегрузкаЗапрешена");
	Реквизиты.Добавить("Владелец_Тип");
	Реквизиты.Добавить("Отгрузчик");
	Реквизиты.Добавить("ВладелецОбъекта");
	Реквизиты.Добавить("Владелец_НеизвестенПричина");
	Реквизиты.Добавить("Погрузка_КоличествоМест");
	Реквизиты.Добавить("Погрузка_Масса");
	Реквизиты.Добавить("Погрузка_МассаМетодРасчета");
	Реквизиты.Добавить("Погрузка_Состояние");
	Реквизиты.Добавить("Погрузка_ДатаВремяПрибыл");
	Реквизиты.Добавить("Погрузка_ДатаВремяУбыл");
	Реквизиты.Добавить("Отгрузка_ОтветственныйДолжность");
	Реквизиты.Добавить("Отгрузка_Ответственный");
	Реквизиты.Добавить("Отправитель_ТранспортноеСредство");
	Реквизиты.Добавить("Отправитель_ЗаявкаДата");
	Реквизиты.Добавить("Отправитель_ЗаявкаНомер");
	Реквизиты.Добавить("Отправитель_Экспедитор");
	Реквизиты.Добавить("Составитель_НаОснованииДокумент");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("СопроводительныеДокументы");
	Таблицы.Добавить("ДанныеЮрЛиц");
	Таблицы.Добавить("КонтактныеДанные");
	Таблицы.Добавить("Прицепы");
	Таблицы.Добавить("СпецРазрешения");
	Таблицы.Добавить("Водители");
	Таблицы.Добавить("ПутевыеЛисты");
	Таблицы.Добавить("Отметки");
	Таблицы.Добавить("Акты");
	Таблицы.Добавить("Штрафы");
	Таблицы.Добавить("Грузы");
	Таблицы.Добавить("Контейнеры");
	Таблицы.Добавить("Маркировки");
	Таблицы.Добавить("СведенияГосСистем");
	Таблицы.Добавить("ОпасныеГрузы");
	
	ДобавитьДополнительныеДанные(ДопДанные, Реквизиты, Таблицы);
	
	Возврат ДанныеИзБД(Ссылка, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеПриемкаГруза(Ссылка, ДопДанные)
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Перевозчик_ПриемкаДатаВремя");
	Реквизиты.Добавить("Перевозчик_ПриемкаДатаВремяПрибыл");
	Реквизиты.Добавить("Перевозчик_ПриемкаДатаВремяУбыл");
	Реквизиты.Добавить("Перевозчик_ЗамечанияПоПогрузочнымРаботам");
	Реквизиты.Добавить("Перевозчик_ПогрузкаЗамечанияПоКоличеству");
	Реквизиты.Добавить("Перевозчик_ПогрузкаЗамечанияПоМассе");
	Реквизиты.Добавить("Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("Отметки");
	Таблицы.Добавить("Акты");
	Таблицы.Добавить("Штрафы");
	
	ДобавитьДополнительныеДанные(ДопДанные, Реквизиты, Таблицы);
	
	Возврат ДанныеИзБД(Ссылка, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеПолучениеГруза(Ссылка, ДопДанные)
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Выгрузка_ДатаВремяПрибыл");
	Реквизиты.Добавить("Выгрузка_ДатаВремяУбыл");
	Реквизиты.Добавить("Выгрузка_МассаБрутто");
	Реквизиты.Добавить("Выгрузка_МассаНетто");
	Реквизиты.Добавить("Выгрузка_МассаМетодРасчета");
	Реквизиты.Добавить("Выгрузка_КоличествоМест");
	Реквизиты.Добавить("Выгрузка_Объем");
	Реквизиты.Добавить("Выгрузка_Состояние");
	Реквизиты.Добавить("Отправитель_ДоставитьДо");
	Реквизиты.Добавить("АдресДоставкиЗначение");
	Реквизиты.Добавить("Отправитель_АдресДоставки");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("Отметки");
	Таблицы.Добавить("Акты");
	Таблицы.Добавить("Штрафы");
	
	ДобавитьДополнительныеДанные(ДопДанные, Реквизиты, Таблицы);
	
	Возврат ДанныеИзБД(Ссылка, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеВыдачаГруза(Ссылка, ДопДанные)
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Перевозчик_ВыгрузкаДатаВремя");
	Реквизиты.Добавить("Перевозчик_ВыгрузкаДатаВремяПрибыл");
	Реквизиты.Добавить("Перевозчик_ВыгрузкаДатаВремяУбыл");
	Реквизиты.Добавить("Перевозчик_ЗамечанияПоРазгрузочнымРаботам");
	Реквизиты.Добавить("Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("Отметки");
	Таблицы.Добавить("Акты");
	Таблицы.Добавить("Штрафы");
	
	ДобавитьДополнительныеДанные(ДопДанные, Реквизиты, Таблицы);
	
	Возврат ДанныеИзБД(Ссылка, Реквизиты, Таблицы);
	
КонецФункции

Процедура ДобавитьДополнительныеДанные(ДопДанные, Реквизиты, Таблицы)
	
	Если ДопДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопДанные.Свойство("Реквизиты") Тогда
		Для Каждого Реквизит Из ДопДанные.Реквизиты Цикл
			Реквизиты.Добавить(Реквизит);
		КонецЦикла;
	КонецЕсли;
	
	Если ДопДанные.Свойство("Таблицы") Тогда
		Для Каждого Таблица Из ДопДанные.Таблицы Цикл
			Таблицы.Добавить(Таблица);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеИзБД(Ссылка, Реквизиты, Таблицы)
	
	РезультатФункции = Новый Структура;
	
	// Ссылка всегда должна быть
	Реквизиты.Добавить("Ссылка");
	
	ДобавитьРеквизитыИзБД(РезультатФункции, Ссылка, Реквизиты);
	
	ДобавитьТаблицыИзБД(РезультатФункции, Ссылка, Таблицы);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДобавитьРеквизитыИзБД(СтруктураДанных, Ссылка, ПсевдонимыРеквизитов)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(
		"ВЫБРАТЬ
		|	Saby_ТН.Ссылка КАК Ссылка,
		|	Saby_ТН.Номер КАК Номер,
		|	Saby_ТН.Дата КАК Дата,
		|	Saby_ТН.ВладелецОбъекта КАК ВладелецОбъекта,
		|	Saby_ТН.Владелец_НеизвестенПричина КАК Владелец_НеизвестенПричина,
		|	Saby_ТН.Владелец_Тип КАК Владелец_Тип,
		|	Saby_ТН.Выгрузка_ДатаВремя КАК Выгрузка_ДатаВремя,
		|	Saby_ТН.Выгрузка_ДатаВремяПрибыл КАК Выгрузка_ДатаВремяПрибыл,
		|	Saby_ТН.Выгрузка_ДатаВремяУбыл КАК Выгрузка_ДатаВремяУбыл,
		|	Saby_ТН.Выгрузка_КоличествоМест КАК Выгрузка_КоличествоМест,
		|	Saby_ТН.Выгрузка_МассаБрутто КАК Выгрузка_МассаБрутто,
		|	Saby_ТН.Выгрузка_МассаНетто КАК Выгрузка_МассаНетто,
		|	Saby_ТН.Выгрузка_МассаМетодРасчета КАК Выгрузка_МассаМетодРасчета,
		|	Saby_ТН.Выгрузка_Состояние КАК Выгрузка_Состояние,
		|	Saby_ТН.Отправитель КАК Отправитель,
		|	Saby_ТН.Отправитель_АдресДоставки КАК Отправитель_АдресДоставки,
		|	Saby_ТН.Отправитель_ВлажностьДо КАК Отправитель_ВлажностьДо,
		|	Saby_ТН.Отправитель_ВлажностьОт КАК Отправитель_ВлажностьОт,
		|	Saby_ТН.Отправитель_ДоставитьДо КАК Отправитель_ДоставитьДо,
		|	Saby_ТН.Отправитель_ДоставитьСрок КАК Отправитель_ДоставитьСрок,
		|	Saby_ТН.Отправитель_ЗаявкаДата КАК Отправитель_ЗаявкаДата,
		|	Saby_ТН.Отправитель_ЗаявкаНомер КАК Отправитель_ЗаявкаНомер,
		|	Saby_ТН.ИнициаторПереадресации КАК ИнициаторПереадресации,
		|	Saby_ТН.ИнициаторПереадресацииПодтверждение КАК ИнициаторПереадресацииПодтверждение,
		|	Saby_ТН.Отправитель_НормыПеревозки КАК Отправитель_НормыПеревозки,
		|	Saby_ТН.Отправитель_ОграничениеСкорости КАК Отправитель_ОграничениеСкорости,
		|	Saby_ТН.Отправитель_ПерегрузкаЗапрешена КАК Отправитель_ПерегрузкаЗапрешена,
		|	Saby_ТН.Отправитель_Пломба КАК Отправитель_Пломба,
		|	Saby_ТН.Отправитель_СопроводительнаяВедомость КАК Отправитель_СопроводительнаяВедомость,
		|	Saby_ТН.Отправитель_ТемператураДо КАК Отправитель_ТемператураДо,
		|	Saby_ТН.Отправитель_ТемператураОт КАК Отправитель_ТемператураОт,
		|	Saby_ТН.Отправитель_ТранспортноеСредство КАК Отправитель_ТранспортноеСредство,
		|	Saby_ТН.Отправитель_Экспедитор КАК Отправитель_Экспедитор,
		|	Saby_ТН.Получатель КАК Получатель,
		|	Saby_ТН.Комментарий КАК Комментарий,
		|	Saby_ТН.Отгрузка_НаОснованииДокумент КАК Отгрузка_НаОснованииДокумент,
		|	Saby_ТН.Отгрузчик КАК Отгрузчик,
		|	Saby_ТН.Отгрузка_Ответственный КАК Отгрузка_Ответственный,
		|	Saby_ТН.Отгрузка_ОтветственныйНаОсновании КАК Отгрузка_ОтветственныйНаОсновании,
		|	Saby_ТН.Отгрузка_ОтветственныйДолжность КАК Отгрузка_ОтветственныйДолжность,
		|	Saby_ТН.Перевозчик КАК Перевозчик,
		|	Saby_ТН.Перевозчик_ВыгрузкаДатаВремя КАК Перевозчик_ВыгрузкаДатаВремя,
		|	Saby_ТН.Перевозчик_ВыгрузкаДатаВремяПрибыл КАК Перевозчик_ВыгрузкаДатаВремяПрибыл,
		|	Saby_ТН.Перевозчик_ВыгрузкаДатаВремяУбыл КАК Перевозчик_ВыгрузкаДатаВремяУбыл,
		|	Saby_ТН.Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза КАК Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза,
		|	Saby_ТН.Перевозчик_ЗамечанияПоПогрузочнымРаботам КАК Перевозчик_ЗамечанияПоПогрузочнымРаботам,
		|	Saby_ТН.Перевозчик_ЗамечанияПоРазгрузочнымРаботам КАК Перевозчик_ЗамечанияПоРазгрузочнымРаботам,
		|	Saby_ТН.Перевозчик_ПогрузкаЗамечанияПоКоличеству КАК Перевозчик_ПогрузкаЗамечанияПоКоличеству,
		|	Saby_ТН.Перевозчик_ПогрузкаЗамечанияПоМассе КАК Перевозчик_ПогрузкаЗамечанияПоМассе,
		|	Saby_ТН.Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза КАК Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза,
		|	Saby_ТН.Перевозчик_ПриемкаДатаВремя КАК Перевозчик_ПриемкаДатаВремя,
		|	Saby_ТН.Перевозчик_ПриемкаДатаВремяПрибыл КАК Перевозчик_ПриемкаДатаВремяПрибыл,
		|	Saby_ТН.Перевозчик_ПриемкаДатаВремяУбыл КАК Перевозчик_ПриемкаДатаВремяУбыл,
		|	Saby_ТН.Погрузка_Адрес КАК Погрузка_Адрес,
		|	Saby_ТН.Погрузка_ДатаВремя КАК Погрузка_ДатаВремя,
		|	Saby_ТН.Погрузка_ДатаВремяПрибыл КАК Погрузка_ДатаВремяПрибыл,
		|	Saby_ТН.Погрузка_ДатаВремяУбыл КАК Погрузка_ДатаВремяУбыл,
		|	Saby_ТН.Погрузка_КоличествоМест КАК Погрузка_КоличествоМест,
		|	Saby_ТН.Погрузка_Масса КАК Погрузка_Масса,
		|	Saby_ТН.Погрузка_МассаМетодРасчета КАК Погрузка_МассаМетодРасчета,
		|	Saby_ТН.Погрузка_Состояние КАК Погрузка_Состояние,
		|	Saby_ТН.Приемка_МассаБрутто КАК Приемка_МассаБрутто,
		|	Saby_ТН.Приемка_МассаНетто КАК Приемка_МассаНетто,
		|	Saby_ТН.Выгрузка_Объем КАК Выгрузка_Объем,
		|	Saby_ТН.Приемка_КоличествоМест КАК Приемка_КоличествоМест,
		|	Saby_ТН.Направление КАК Направление,
		|	Saby_ТН.Заказчик КАК Заказчик,
		|	Saby_ТН.Заказчик_Договор КАК Заказчик_Договор,
		|	Saby_ТН.Представление КАК Представление,
		|	Saby_ТН.Валюта КАК Валюта,
		|	Saby_ТН.ДатаИзменения КАК ДатаИзменения,
		|	Saby_ТН.АдресДоставкиЗначение КАК АдресДоставкиЗначение,
		|	Saby_ТН.АдресПогрузкиЗначение КАК АдресПогрузкиЗначение,
		|	Saby_ТН.ЗаменаВодителейТС_НаОсновании КАК ЗаменаВодителейТС_НаОсновании,
		|	Saby_ТН.Составитель КАК Составитель,
		|	Saby_ТН.Составитель_НаОснованииДокумент КАК Составитель_НаОснованииДокумент,
		|	Saby_ТН.Отправитель_ТранспортноеСредство.ТипВладения КАК ТипВладенияТС
		|ИЗ
		|	Документ.Saby_ТранспортнаяНакладная КАК Saby_ТН
		|ГДЕ
		|	Saby_ТН.Ссылка = &Ссылка"
	);
	
	НужныеКолонки = Новый Соответствие;
	Для Каждого ПсевдонимРеквизита Из ПсевдонимыРеквизитов Цикл
		НужныеКолонки.Вставить(ПсевдонимРеквизита, Истина);
	КонецЦикла;
	
	Колонки = СхемаЗапроса.ПакетЗапросов[0].Колонки;
	
	ИндексКолонки = 0;
	Пока ИндексКолонки < Колонки.Количество() Цикл
		
		Псевдоним = Колонки[ИндексКолонки].Псевдоним;
		
		Если НужныеКолонки[Псевдоним] = Неопределено Тогда
			Колонки.Удалить(ИндексКолонки);
		Иначе
			ИндексКолонки = ИндексКолонки + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	ЗапросДанных.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивДанных = ОбщегоНазначения.ТаблицаЗначенийВМассив(ЗапросДанных.Выполнить().Выгрузить());
	
	СтруктураДанных.Вставить("Реквизиты", МассивДанных[0]);
	
КонецПроцедуры

Процедура ДобавитьТаблицыИзБД(СтруктураДанных, Ссылка, Таблицы)
	
	МассивЗапросов = Новый Массив;
	
	УниверсальныйШаблонЗапроса =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Документ.Saby_ТранспортнаяНакладная.%1 КАК ТЧТранспортнойНакладной
	|ГДЕ
	|	ТЧТранспортнойНакладной.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Для Каждого ИмяТаблицы Из Таблицы Цикл
		
		Если ИмяТаблицы = "Грузы" Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Saby_ТН_Грузы.Ссылка КАК СсылкаДокумент,
			|	Saby_ТН_Грузы.НомерСтроки КАК НомерСтроки,
			|	Saby_ТН_Грузы.Тип КАК Тип,
			|	Saby_ТН_Грузы.Наименование КАК Наименование,
			|	Saby_ТН_Грузы.Заказчик КАК Заказчик,
			|	Saby_ТН_Грузы.Состояние КАК Состояние,
			|	Saby_ТН_Грузы.Количество КАК КоличествоМест,
			|	Saby_ТН_Грузы.Количество КАК Количество,
			|	Saby_ТН_Грузы.МассаБрутто КАК МассаБрутто,
			|	Saby_ТН_Грузы.Объем КАК Объем,
			|	Saby_ТН_Грузы.СпособУпаковки КАК Упаковка,
			|	Saby_ТН_Грузы.СпособУпаковки КАК СпособУпаковки,
			|	Saby_ТН_Грузы.ВидТары КАК ВидТары,
			|	Saby_ТН_Грузы.МассаНетто КАК МассаНетто,
			|	Saby_ТН_Грузы.Длина КАК Длина,
			|	Saby_ТН_Грузы.Ширина КАК Ширина,
			|	Saby_ТН_Грузы.Высота КАК Высота,
			|	Saby_ТН_Грузы.КоличествоПаллет КАК КоличествоПаллет,
			|	Saby_ТН_Грузы.Стоимость КАК СтоимостьВключаяНДС,
			|	Saby_ТН_Грузы.Плотность КАК Плотность,
			|	Saby_ТН_Грузы.КлючСтроки КАК КлючСтроки,
			|	Saby_ТН_Грузы.Валюта КАК Валюта,
			|	Saby_ТН_Грузы.НаименованиеГосСистемы КАК НаименованиеГосСистемы,
			|	Saby_ТН_Грузы.УчетнаяЕдиницаГосСистемы КАК УчетнаяЕдиницаГосСистемы,
			|	Saby_ТН_Грузы.ИнаяИнформацияГосСистемы КАК ИнаяИнформацияГосСистемы,
			|	ЕСТЬNULL(Saby_ТН_Грузы.ВидТары.Код, """") КАК ТараКод,
			|	ЕСТЬNULL(Saby_ТН_Грузы.Валюта.Код, """") КАК ВалютаКод
			|ИЗ
			|	Документ.Saby_ТранспортнаяНакладная.Грузы КАК Saby_ТН_Грузы
			|ГДЕ
			|	Saby_ТН_Грузы.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
		ИначеЕсли ИмяТаблицы = "ОпасныеГрузы" Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Saby_ТН_ОпаснГрузы.Ссылка КАК СсылкаДокумент,
			|	Saby_ТН_ОпаснГрузы.НомерСтроки КАК НомерСтроки,
			|	Saby_ТН_ОпаснГрузы.КлючСтроки_Грузы КАК КлючСтроки_Грузы,
			|	Saby_ОпасныеГрузы.Ссылка КАК ОпасныйГруз,
			|	Saby_ОпасныеГрузы.Наименование КАК НаименованиеОтгрузочное,
			|	Saby_ОпасныеГрузы.НомерООН КАК НомерООН,
			|	Saby_ОпасныеГрузы.ТехническоеНаименование КАК НаименованиеТехническое,
			|	Saby_ОпасныеГрузы.Комментарий КАК Комментарий,
			|	Saby_ОпасныеГрузы.Класс КАК Класс,
			|	Saby_ОпасныеГрузы.КлассификационныйКод КАК КлассификационныйКод,
			|	Saby_ОпасныеГрузы.ГруппаУпаковкиЗначение КАК ГруппаУпаковки,
			|	Saby_ОпасныеГрузы.ЗнакОпасности КАК ЗнакОпасности,
			|	Saby_ОпасныеГрузы.ОграничениеПроездаЧерезТуннели КАК КодОграниченияПроездТуннеля,
			|	Saby_ОпасныеГрузы.НазваниеРадионуклида КАК НазваниеРадионуклида,
			|	Saby_ОпасныеГрузы.ФизИХимФорма КАК ФизХимФорма,
			|	Saby_ОпасныеГрузы.МаксАктивность КАК РадиоактивныйМаксАктивность,
			|	Saby_ОпасныеГрузы.КатегорияУпаковки КАК КатегорияУпаковки,
			|	Saby_ОпасныеГрузы.ТранспортныйИндекс КАК ТранспортныйИндекс,
			|	Saby_ОпасныеГрузы.ИндексБезопасности КАК ИндексБезопасности,
			|	Saby_ОпасныеГрузы.ОпознавательныйЗнак КАК ОпознавательныйЗнак,
			|	Saby_ОпасныеГрузы.ПолнаяАктивность КАК РадиоактивныйПолнаяАктивность,
			|	Saby_ОпасныеГрузы.МассаНеттоВзрывчатый КАК МассаНеттоВзрывчатый,
			|	Saby_ОпасныеГрузы.МассаНеттоВзрывчатыйВсего КАК МассаНеттоВзрывчатыйВсего,
			|	Saby_ОпасныеГрузы.ПроцентСмеси КАК ПроцентСмеси,
			|	Saby_ОпасныеГрузы.ДатаИстеченияУдержания КАК ДатаИстеченияУдержания,
			|	Saby_ОпасныеГрузы.КонтрольнаяТемпература КАК ТемператураКонтрольная,
			|	Saby_ОпасныеГрузы.АварийнаяТемпература КАК ТемператураАварийная,
			|	Saby_ОпасныеГрузы.Представление КАК Представление
			|ИЗ
			|	Документ.Saby_ТранспортнаяНакладная.ОпасныеГрузы КАК Saby_ТН_ОпаснГрузы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Saby_ОпасныеГрузы КАК Saby_ОпасныеГрузы
			|		ПО Saby_ТН_ОпаснГрузы.ОпасныйГруз = Saby_ОпасныеГрузы.Ссылка
			|ГДЕ
			|	Saby_ТН_ОпаснГрузы.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	КлючСтроки_Грузы";
			
		ИначеЕсли ИмяТаблицы = "ДокументыПодтверждающиеВладение" Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТранспортныеСредстваДокументыПодтверждающиеВладение.Ссылка КАК ТранспортноеСредство,
			|	ТранспортныеСредстваДокументыПодтверждающиеВладение.ДокументВладения КАК ДокументВладения
			|ИЗ
			|	Справочник.ТранспортныеСредства.ДокументыПодтверждающиеВладение КАК ТранспортныеСредстваДокументыПодтверждающиеВладение
			|ГДЕ
			|	ТранспортныеСредстваДокументыПодтверждающиеВладение.Ссылка В
			|			(ВЫБРАТЬ
			|				Saby_ТранспортнаяНакладная.Отправитель_ТранспортноеСредство КАК ТранспортноеСредство
			|			ИЗ
			|				Документ.Saby_ТранспортнаяНакладная КАК Saby_ТранспортнаяНакладная
			|			ГДЕ
			|				Saby_ТранспортнаяНакладная.Ссылка = &Ссылка
			|		
			|			ОБЪЕДИНИТЬ ВСЕ
			|		
			|			ВЫБРАТЬ
			|				Saby_ТранспортнаяНакладнаяПрицепы.Прицеп
			|			ИЗ
			|				Документ.Saby_ТранспортнаяНакладная.Прицепы КАК Saby_ТранспортнаяНакладнаяПрицепы
			|			ГДЕ
			|				Saby_ТранспортнаяНакладнаяПрицепы.Ссылка = &Ссылка)";
			
		ИначеЕсли ИмяТаблицы = "Прицепы" Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Saby_ТранспортнаяНакладнаяПрицепы.Ссылка КАК Ссылка,
			|	Saby_ТранспортнаяНакладнаяПрицепы.НомерСтроки КАК НомерСтроки,
			|	Saby_ТранспортнаяНакладнаяПрицепы.Прицеп КАК Прицеп,
			|	Saby_ТранспортнаяНакладнаяПрицепы.Прицеп.ТипВладения КАК ТипВладенияТС
			|ИЗ
			|	Документ.Saby_ТранспортнаяНакладная.Прицепы КАК Saby_ТранспортнаяНакладнаяПрицепы
			|ГДЕ
			|	Saby_ТранспортнаяНакладнаяПрицепы.Ссылка = &Ссылка";
			
		Иначе
			
			ТекстЗапроса = СтрШаблон(УниверсальныйШаблонЗапроса, ИмяТаблицы);
			
		КонецЕсли;
		
		МассивЗапросов.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	РазделительЗапросов = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст = СтрСоединить(МассивЗапросов, РазделительЗапросов);
	ЗапросДанных.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = ЗапросДанных.ВыполнитьПакет();
	Индекс = 0;
	Пока Индекс < Таблицы.Количество() Цикл
		СтруктураДанных.Вставить(Таблицы[Индекс], Результат[Индекс].Выгрузить());
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

#Область ЮрЛица

Функция ДанныеЮрЛица(РольСтрокой, ДанныеДокумента)
	    	
	Если ДанныеДокумента.Свойство("Реквизиты") Тогда 
		РеквизитыОбъекта = ДанныеДокумента.Реквизиты; 
	Иначе 
		РеквизитыОбъекта = ДанныеДокумента;
	КонецЕсли;
	
	// если пустое значение вернем пустую структуру
	Если Не ЗначениеЗаполнено(РеквизитыОбъекта[РольСтрокой]) Тогда 
		Возврат Новый Структура;
	КонецЕсли;		
	
	СтруктураДанных = ОбщийШаблонЮрЛица();
	
	Роль = Перечисления.Saby_РолиКонтрагентов[РольСтрокой];
	Если Роль = Перечисления.Saby_РолиКонтрагентов.Отправитель Тогда
		// не входит в общую структуру
		СтруктураДанных.Вставить("Экспедитор", Число(РеквизитыОбъекта.Отправитель_Экспедитор));
	КонецЕсли;
	
	СтруктураДанных.Название.Полное = СокрЛП(РеквизитыОбъекта[РольСтрокой]);	
		
	// Данные из документа
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Роль);
	
	НайденныеСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ДанныеДокумента.ДанныеЮрЛиц, Отбор);
	Если НайденныеСтроки.Количество() Тогда 		
		СтрокаДанные = НайденныеСтроки[0];
		ОсновныеДанныеЮрЛицаИзДокумента(СтрокаДанные, СтруктураДанных);		
	КонецЕсли;
	 						
	Контакты = КонтактыЮрЛица(ДанныеДокумента.КонтактныеДанные, Роль);
	Если ЗначениеЗаполнено(Контакты.Телефоны) Тогда 
		СтруктураДанных.Контакты.Вставить("Телефон", Контакты.Телефоны);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакты.Емейлы) Тогда 
		СтруктураДанных.Контакты.Вставить("ЭлектроннаяПочта", Контакты.Емейлы);
	КонецЕсли;
		
	Возврат СтруктураДанных;

КонецФункции

Функция ОбщийШаблонЮрЛица()
		
	// Название
	СтруктураНазвание = Новый Структура;
	СтруктураНазвание.Вставить("Полное", "");	
		
	// Реквизиты
	СтруктураРеквизиты = Новый Структура;	
	
	// Контакты	
	СтруктураКонтакты = Новый Структура;
		
	// Общая структура
	Структура = Новый Структура;           	
	//Структура.Вставить("Идентификатор", "");
	Структура.Вставить("Название",      СтруктураНазвание);	  		
	Структура.Вставить("Реквизиты",     СтруктураРеквизиты);
	Структура.Вставить("Адрес",         ШаблонЮрАдрес());
    Структура.Вставить("Контакты",      СтруктураКонтакты);
	
	Возврат Структура;
	
КонецФункции

Функция ШаблонЮЛ()
	
	СтруктураЮЛ = Новый Структура;
		
	Наименование = Новый Структура;
	Наименование.Вставить("Полное", "");
	
	СтруктураЮЛ.Вставить("Название", Наименование);
	СтруктураЮЛ.Вставить("ИНН",      "");
	СтруктураЮЛ.Вставить("КПП",      "");
	
	Возврат СтруктураЮЛ;
	
КонецФункции

Функция ШаблонФизЛицо()
	
	СтруктураФизЛицо = Новый Структура;
	СтруктураФизЛицо.Вставить("ИНН",           "");
	СтруктураФизЛицо.Вставить("ИныеСведения",  "");
	СтруктураФизЛицо.Вставить("Фамилия",       "");
	СтруктураФизЛицо.Вставить("Имя",           "");
	СтруктураФизЛицо.Вставить("Отчество",      "");
	
	Возврат СтруктураФизЛицо;
	
КонецФункции

Функция ШаблонЮрЛицаИП()
	
	// ИП
	СтруктураИП = Новый Структура;
	СтруктураИП.Вставить("ИНН",                "");
	СтруктураИП.Вставить("ОГРН",               "");
	СтруктураИП.Вставить("ИныеСведения",       "");
	СтруктураИП.Вставить("Фамилия",            "");
	СтруктураИП.Вставить("Имя",                "");
	СтруктураИП.Вставить("Отчество",           "");

	Возврат СтруктураИП;
	
КонецФункции

Функция ШаблонИностранногоЛица()
	
	СтруктураИнЛицо = Новый Структура;
	//СтруктураИнЛицо.Вставить("Идентификатор",        "");
	СтруктураИнЛицо.Вставить("Страна",               "");
	СтруктураИнЛицо.Вставить("Наименование",         "");
	СтруктураИнЛицо.Вставить("ИныеСведения",         "");
	СтруктураИнЛицо.Вставить("ИдентификацияСтатуса", 2); // 1 - ФЛ, 2 - ЮЛ
	
	СтруктураИнЛицо.Вставить("ИдентифицирующийДокумент", Новый Структура);
	СтруктураИнЛицо.ИдентифицирующийДокумент.Вставить("Вид",        "");
	СтруктураИнЛицо.ИдентифицирующийДокумент.Вставить("Номер",      "");
	СтруктураИнЛицо.ИдентифицирующийДокумент.Вставить("ДатаВыдачи", "");
	
	Возврат СтруктураИнЛицо;
	
КонецФункции

Функция ШаблонЮрАдрес()
	
	Структура = Новый Структура;
	Структура.Вставить("Юридический", ОбщийШаблонАдреса());
	
	Возврат Структура;
		
КонецФункции

Функция ШаблонФактАдрес()
	
	Структура = Новый Структура; 
	Структура.Вставить("Фактический", ОбщийШаблонАдреса());
		
	Возврат Структура;
	
КонецФункции

Процедура ОсновныеДанныеЮрЛицаИзДокумента(СтрокаДанные, СтруктураДанных)
		
	Если СтрокаДанные.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		
		// Не резидент
		// *- не полный 		
		ИнЛицо              = ШаблонИностранногоЛица();		
		ИнЛицо.Наименование = СтруктураДанных.Название.Полное;
		
		Если ЗначениеЗаполнено(СтрокаДанные.АдресСтруктура) Тогда  
			
			АдресСтруктурой = УправлениеКонтактнойИнформациейСлужебный.СтрокуJSONВСтруктуру(СтрокаДанные.АдресСтруктура);			
			Если АдресСтруктурой.Свойство("country") Тогда 
				ИнЛицо.Страна = АдресСтруктурой.country;
			КонецЕсли; 
			
		КонецЕсли;
			
		СтруктураДанных.Реквизиты.Вставить("ИностранноеЛицо", ИнЛицо);
		
	ИначеЕсли СтрокаДанные.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда 
		
		// ИП
		ИП = ШаблонЮрЛицаИП();				
		ИП.ИНН = СтрокаДанные.ИНН; 		
		Если ЗначениеЗаполнено(СтрокаДанные.СтруктураФИО) Тогда 		
			СтруктураФИО = ЗначениеИзСтрокиВнутр(СтрокаДанные.СтруктураФИО);
			ЗаполнитьЗначенияСвойств(ИП, СтруктураФИО);			
		КонецЕсли;
				
		СтруктураДанных.Реквизиты.Вставить("ИП", ИП); 
		
	ИначеЕсли СтрокаДанные.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ФизЛицо Тогда 
		
		// ФЛ
		ФЛ = ШаблонФизЛицо();
		ФЛ.ИНН = СтруктураДанных.Реквизиты.ИНН;		
		Если ЗначениеЗаполнено(СтрокаДанные.СтруктураФИО) Тогда 		
			СтруктураФИО = ЗначениеИзСтрокиВнутр(СтрокаДанные.СтруктураФИО);
			ЗаполнитьЗначенияСвойств(ФЛ, СтруктураФИО);			
		КонецЕсли;
		
		СтруктураДанных.Реквизиты.Вставить("ФЛ", ФЛ);
		
	Иначе 
				
		// ЮрЛицо		
		ЮЛ = ШаблонЮЛ();				
		ЮЛ.ИНН = СтрокаДанные.ИНН;
		ЮЛ.КПП = СтрокаДанные.КПП;
		
	    ЮЛ.Название.Полное = СтруктураДанных.Название.Полное; 
		
		СтруктураДанных.Реквизиты.Вставить("ЮЛ", ЮЛ);
		
	КонецЕсли;		
	
	// ToDo:  адрес не полный, не хватает структуры КИ
	СтруктураДанных.Адрес.Юридический.Текст = СтрокаДанные.Адрес;  
	
КонецПроцедуры

Функция ДанныеСоставителя(ДанныеДокумента)
	
	РезультатФункции = Новый Структура;
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	Если Не ЗначениеЗаполнено(РеквизитыОбъекта.Составитель)
		Или Не ЗначениеЗаполнено(РеквизитыОбъекта.Составитель_НаОснованииДокумент) Тогда
		
		Возврат РезультатФункции;
		
	КонецЕсли;
	
	РезультатФункции.Вставить(
		"Наименование",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыОбъекта.Составитель, "Наименование")
	);
	
	Основание = РеквизитыОбъекта.Составитель_НаОснованииДокумент;
	Если ЗначениеЗаполнено(Основание) Тогда
		
		Массив = Новый Массив();
		Массив.Добавить(Основание);
		
		ДанныеДокументов = РеквизитыДокументовСбис(Массив);
		
		ДанныеДок = ДанныеДокументов.Получить(Основание);
		ДанныеДок.Удалить("Тип");
		ДанныеДок.Удалить("Ссылка");
		
		РезультатФункции.Вставить("Основание", Новый Структура);
		РезультатФункции.Основание.Вставить("Документ", ДанныеДок);
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ЮрЛица 

#Область Груз

Функция ДанныеГруза(ДанныеДокумента)
	
	ДанныеГруза = Новый Массив;
		
	Для Каждого Строка Из ДанныеДокумента.Грузы Цикл 
		
		ПараметрыСтроки = ШаблонПозицииГруза();		
		ЗаполнитьЗначенияСвойствГруза(ПараметрыСтроки, Строка);
				
		// обработаем данные строки и перейдем к связанным данным		
		СвязанныеДанные = СвязанныеДанныеСГрузом(ДанныеДокумента, Строка.КлючСтроки);
		
		Если СвязанныеДанные.Контейнеры.Номер.Количество()  Тогда 							
			ПараметрыСтроки.Вставить("Контейнер", СвязанныеДанные.Контейнеры);			
		КонецЕсли;
		
		Если СвязанныеДанные.Маркировки.Количество() Тогда 
			ПараметрыСтроки.Вставить("Маркировка",  СвязанныеДанные.Маркировки);
		КонецЕсли;
		
		Если СвязанныеДанные.ОпасныеГрузы.Количество() Тогда 
			ПараметрыСтроки.Вставить("ОпасныйГруз", СвязанныеДанные.ОпасныеГрузы);  		
		КонецЕсли;
		
		Если СвязанныеДанные.СведенияГосСистем.Количество() Тогда 
			
			СведенияГИС = Новый Структура;           
			// заполним по данным строки 
			СведенияГИС.Вставить("Наименование",     Строка.НаименованиеГосСистемы);
			СведенияГИС.Вставить("УчетнаяЕдиница",   Строка.УчетнаяЕдиницаГосСистемы);
			СведенияГИС.Вставить("ДругаяИнформация", Строка.ИнаяИнформацияГосСистемы);
			СведенияГИС.Вставить("Идентификатор",    СвязанныеДанные.СведенияГосСистем);
			
			ПараметрыСтроки.Вставить("СведенияГИС", СведенияГИС);
			
			ПараметрыСтроки.УчетГИС = Истина;
			
		КонецЕсли;
			
		// Дозаполним данные	
		//ПараметрыСтроки.ТараКод            = Строка.ВидТарыКод;
		//ПараметрыСтроки.Упаковка           = Строка.СпособУпаковки;
		//ПараметрыСтроки.ВалютаКод          = "643";
	    //ПараметрыСтроки.ВалютаНаименование = "Российский рубль"; 
		
		ДанныеГруза.Добавить(ПараметрыСтроки);
		
	КонецЦикла;
	
	СтруктураСтоимости = Новый Структура;	
	СтруктураСтоимости.Вставить("Всего",  ДанныеДокумента.Грузы.Итог("СтоимостьВключаяНДС")); // СтоимостьВсего
	СтруктураСтоимости.Вставить("Валюта", Новый Структура);
	
	// рубль по умолчанию. RUB - символьный код. 
	// добавить валюту. реквизит документа. Наименование - символьный код
	СтруктураСтоимости.Валюта.Вставить("Код",          "643");
	СтруктураСтоимости.Валюта.Вставить("Наименование", "Российский рубль"); 
	
	СтруктураГруза = Новый Структура; 
	СтруктураГруза.Вставить("ИнформационноеПоле", Новый Структура);	
	СтруктураГруза.Вставить("Позиция",            ДанныеГруза);
	СтруктураГруза.Вставить("Стоимость",          СтруктураСтоимости);
		
	Возврат СтруктураГруза;
	
КонецФункции

// Поиск и заполнение данных по связанным табличным частям
// Возвращаемое значение: 
// Структура 
Функция СвязанныеДанныеСГрузом(ДанныеДокумента, КлючСтроки)
		
	Контейнеры = Новый Структура;
	Контейнеры.Вставить("Номер",      Новый Массив);
	Контейнеры.Вставить("Количество", 0);
	
	Маркировки        = Новый Массив;
	ОпасныеГрузы      = Новый Массив;	
	СведенияГосСистем = Новый Массив;	
		
	Отбор = Новый Структура;
	Отбор.Вставить("КлючСтроки_Грузы", КлючСтроки);
	
	// Контейнеры
	НайденныеСтроки = ДанныеДокумента.Контейнеры.НайтиСтроки(Отбор);
	Для Каждого Контейнер Из НайденныеСтроки Цикл 
		
		Структура = Новый Структура;
		Структура.Вставить("Значение", Контейнер.Номер);		
		Контейнеры.Номер.Добавить(Структура); 
		
		Контейнеры.Количество = Контейнеры.Количество + Контейнер.Количество;
		
	КонецЦикла;	
	// -
	
	// Маркировка
	НайденныеСтроки = ДанныеДокумента.Маркировки.НайтиСтроки(Отбор);
	Для Каждого Маркировка Из НайденныеСтроки Цикл 		
		Маркировки.Добавить(Новый Структура("Значение", Маркировка.Значение));				
	КонецЦикла;
	// -
	
	// Опасный груз	
	НайденныеСтроки = ДанныеДокумента.ОпасныеГрузы.НайтиСтроки(Отбор);
	Для Каждого Опасный Из НайденныеСтроки Цикл 
		
		ОпасныйСтруктура = ШаблонОпасногоГруза();
		ЗаполнитьЗначенияСвойств(ОпасныйСтруктура, Опасный);
						
		ОпасныйСтруктура.Вставить("Класс",                       ЗначениеКлассОпасности(Опасный.Класс));
		ОпасныйСтруктура.Вставить("УпаковкаГруппа",              ЗначениеГруппыУпаковки(Опасный.ГруппаУпаковки));
		ОпасныйСтруктура.Вставить("КодОграниченияПроездТуннеля", ЗначениеОграниченияТуннели(Опасный.КодОграниченияПроездТуннеля));
				
		ОпасныеГрузы.Добавить(ОпасныйСтруктура);
				
	КонецЦикла;	
	// -
	
	// ГосСистемы
	НайденныеСтроки = ДанныеДокумента.СведенияГосСистем.НайтиСтроки(Отбор);
	Для Каждого Сведения Из НайденныеСтроки Цикл 		
		СведенияГосСистем.Добавить(Новый Структура("Значение", Сведения.Идентификатор));			
	КонецЦикла;
	// -
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Контейнеры",        Контейнеры);
	СтруктураДанных.Вставить("Маркировки",        Маркировки);
	СтруктураДанных.Вставить("ОпасныеГрузы",      ОпасныеГрузы);
	СтруктураДанных.Вставить("СведенияГосСистем", СведенияГосСистем);
	
	Возврат СтруктураДанных;
		
КонецФункции

Функция ШаблонПозицииГруза()  
	
	СтруктураГруза = Новый Структура;
	СтруктураГруза.Вставить("Наименование",       "");
	СтруктураГруза.Вставить("КодНоменклатуры",    "");
	СтруктураГруза.Вставить("Состояние",          "");
	СтруктураГруза.Вставить("Упаковка",           "");
	СтруктураГруза.Вставить("ТараКод",            "");
	
	СтруктураГруза.Вставить("УчетГИС",            Ложь);
	СтруктураГруза.Вставить("ДопИнформация",      "");
	СтруктураГруза.Вставить("Заказчик",           Новый Структура);
	
	// Параметры
	ПараметрыГруза = Новый Структура;
	ПараметрыГруза.Вставить("КоличествоПаллет",   0);
	ПараметрыГруза.Вставить("КоличествоМест",     0);
	ПараметрыГруза.Вставить("Плотность",          0);
	ПараметрыГруза.Вставить("Объем",              0);
    ПараметрыГруза.Вставить("Высота",             0);
	ПараметрыГруза.Вставить("Длина",              0);
	ПараметрыГруза.Вставить("Ширина",             0);
	
	Масса = Новый Структура; 
	Масса.Вставить("Нетто",  0);
	Масса.Вставить("Брутто", 0);	
	ПараметрыГруза.Вставить("Масса", Масса);
	
	СтруктураГруза.Вставить("Параметры", ПараметрыГруза);
	
	// Стоимость
	Стоимость = Новый Структура;
	
	Валюта = Новый Структура;		
	Валюта.Вставить("Код",          "");
	Валюта.Вставить("Наименование", "");
	
	Стоимость.Вставить("Валюта",     Валюта);	
	Стоимость.Вставить("ВключаяНДС", 0);
		
	СтруктураГруза.Вставить("Стоимость", Стоимость);
	
	Возврат СтруктураГруза;
	
КонецФункции

Процедура ЗаполнитьЗначенияСвойствГруза(ПараметрыСтроки, Строка)
	
	// Заполнили что смогли 
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, Строка);
	
	// Параметры             
	Параметры = ПараметрыСтроки.Параметры;
	ЗаполнитьЗначенияСвойств(Параметры, Строка);
	Параметры.Масса.Нетто  = Строка.МассаНетто; 
	Параметры.Масса.Брутто = Строка.МассаБрутто;	
	
	// Стоимость
	ПараметрыСтроки.Стоимость.ВключаяНДС = Строка.СтоимостьВключаяНДС;
	Если ЗначениеЗаполнено(Строка.ВалютаКод) Тогда 
		ПараметрыСтроки.Стоимость.Валюта.Код = Строка.ВалютаКод; 
		// Наименование может меняться - Рубль, Рубль РФ...
	Иначе 
		ПараметрыСтроки.Стоимость.Валюта.Код          = "643";
		ПараметрыСтроки.Стоимость.Валюта.Наименование = "Российский рубль";
	КонецЕсли;
	
КонецПроцедуры
	
Функция ШаблонОпасногоГруза()
	
    ОпасныйГруз = Новый Структура;
	ОпасныйГруз.Вставить("НаименованиеТехническое");
	ОпасныйГруз.Вставить("НаименованиеОтгрузочное");
	ОпасныйГруз.Вставить("ИндексБезопасности");
    ОпасныйГруз.Вставить("ОпознавательныйЗнак");
	ОпасныйГруз.Вставить("ВзрывчатыйМассаНетто");
	ОпасныйГруз.Вставить("ВзрывчатыйМассаНеттоДляВсех");
	ОпасныйГруз.Вставить("ПроцентныйСоставСмеси");
	ОпасныйГруз.Вставить("ДатаИстеченияУдержания");
	ОпасныйГруз.Вставить("ТемператураАварийная");
	ОпасныйГруз.Вставить("ТемператураКонтрольная");
	ОпасныйГруз.Вставить("НомерООН");
	ОпасныйГруз.Вставить("Описание");
	ОпасныйГруз.Вставить("Класс");
	ОпасныйГруз.Вставить("КлассификационныйКод");
	ОпасныйГруз.Вставить("ЗнакОпасности");
	ОпасныйГруз.Вставить("КодОграниченияПроездТуннеля");
	ОпасныйГруз.Вставить("ФизХимФорма");
	ОпасныйГруз.Вставить("РадиоактивныйМаксАктивность");
	ОпасныйГруз.Вставить("РадиоактивныйПолнаяАктивность");
	ОпасныйГруз.Вставить("РадиоактивныйРадионуклид");
	ОпасныйГруз.Вставить("УпаковкаКатегория");
	ОпасныйГруз.Вставить("УпаковкаГруппа");
	ОпасныйГруз.Вставить("ТранспортныйИндекс"); 
	
	Возврат ОпасныйГруз;
	
КонецФункции

#КонецОбласти // Груз 

#Область СопроводительныеДокументы

Функция ВложенныеДокументы(ДанныеДокумента)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	// Все сопроводительные документы    	
	ТЗ_СопрДокументы      = ДанныеДокумента.СопроводительныеДокументы;
	СопрВедомость         = РеквизитыОбъекта.Отправитель_СопроводительнаяВедомость;
	ДоговорПеревозки      = РеквизитыОбъекта.Заказчик_Договор;
	ОтгрузкаОснование     = РеквизитыОбъекта.Отгрузка_НаОснованииДокумент;
	ОснованиеПолномочий   = РеквизитыОбъекта.Отгрузка_ОтветственныйНаОсновании;
	ИнциаторПодтверждение = РеквизитыОбъекта.ИнициаторПереадресацииПодтверждение;
	
	КГрузу       = Новый Массив;
	КТрН         = Новый Массив;
	ПередачиЦенн = Новый Массив;
	
	// получаем данные всех документов за 1 раз
	Массив = Новый Массив;	
	ДополнитьМассивВложеннымиДокументами(СопрВедомость,         Массив);
	ДополнитьМассивВложеннымиДокументами(ДоговорПеревозки,      Массив);
	ДополнитьМассивВложеннымиДокументами(ТЗ_СопрДокументы,      Массив, "СопроводительныйДокумент");
	ДополнитьМассивВложеннымиДокументами(ОтгрузкаОснование,     Массив);
	ДополнитьМассивВложеннымиДокументами(ОснованиеПолномочий,   Массив);
	ДополнитьМассивВложеннымиДокументами(ИнциаторПодтверждение, Массив);
	
	УдаляемыеКолонки = Новый Массив;
	УдаляемыеКолонки.Добавить("Ссылка");
	УдаляемыеКолонки.Добавить("Тип");
	
	// Обработка полученных данных 	
	Соответствие = РеквизитыДокументовСбис(Массив);
	Для Каждого Строка Из ТЗ_СопрДокументы Цикл   
		
		Данные = Соответствие.Получить(Строка.СопроводительныйДокумент);
		
		СтруктураДокумента = ОбщегоНазначения.СкопироватьРекурсивно(Данные);
		УдалитьСвойстваИзСтруктуры(СтруктураДокумента, УдаляемыеКолонки);
		
		Если Данные.Тип = Перечисления.Saby_ТипыДокумента.КГрузу Тогда
			КГрузу.Добавить(СтруктураДокумента);
		ИначеЕсли Данные.Тип = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей Тогда
		    ПередачиЦенн.Добавить(СтруктураДокумента);					
		Иначе 	
			// Общие к Транспортной накладной 
		    КТрН.Добавить(СтруктураДокумента);				
		КонецЕсли; 
		
	КонецЦикла;	
			
	Структура = Новый Структура;
	Структура.Вставить("РасчетПеревозки",          Новый Структура);
	Структура.Вставить("ДоговорНаУслугиПеревозки", ДанныеВложенногоДокумента(Соответствие, ДоговорПеревозки));
	Структура.Вставить("ТранспортнаяНакладная",    КТрН);   // *
	Структура.Вставить("Груз",                     КГрузу); // *
	Структура.Вставить("Отгрузка",                 ПередачиЦенн); // *
	Структура.Вставить("Ведомость",                ДанныеВложенногоДокумента(Соответствие, СопрВедомость));
	Структура.Вставить("ОснованиеОтгрузки",        ДанныеВложенногоДокумента(Соответствие, ОтгрузкаОснование));
	Структура.Вставить("ОснованиеПолномочий",      ДанныеВложенногоДокумента(Соответствие, ОснованиеПолномочий));
	Структура.Вставить("ИнциаторПодтверждение",    ДанныеВложенногоДокумента(Соответствие, ИнциаторПодтверждение));
	
    Возврат Структура;

КонецФункции

Процедура ДополнитьМассивВложеннымиДокументами(Источник, Массив, ИмяКолонки = "")
	
	Если ТипЗнч(Источник) = Тип("ТаблицаЗначений") Тогда
		
		Для Каждого Строка Из Источник Цикл
			Если ЗначениеЗаполнено(Строка[ИмяКолонки]) Тогда 
				Массив.Добавить(Строка[ИмяКолонки]);   
			КонецЕсли;			
		КонецЦикла;
					
	Иначе 
		
		Если ЗначениеЗаполнено(Источник) Тогда 
			Массив.Добавить(Источник);
		КонецЕсли;
				
	КонецЕсли;
			
КонецПроцедуры

Функция ДанныеВложенногоДокумента(Соответствие, Ключ)
	
	Структура = Новый Структура;
	
	// если данные есть в документе - они есть в соответствии
	Если ЗначениеЗаполнено(Ключ) Тогда 
		Структура = Соответствие.Получить(Ключ);
		Если ЗначениеЗаполнено(Структура) Тогда 
			Структура.Удалить("Ссылка");
			Структура.Удалить("Тип");    
		КонецЕсли;	
	КонецЕсли;
 
	Возврат Структура;
	
КонецФункции

#КонецОбласти // СопроводительныеДокументы  

#Область Транспорт

Функция ТранспортНаВыгрузку(ТС)
		
	Структура = ШаблонДанныхТС();
	Если Не ЗначениеЗаполнено(ТС) Тогда 
		Возврат Структура;
	КонецЕсли;
		
	// ToDo: 1 общий запрос данных по всем ТС
	
	СсылкаТС = Справочники.ТранспортныеСредства.СоздатьЭлемент();
	Если ЕстьРеквизитИлиСвойство("РегистрационныйЗнак", СсылкаТС) Тогда 
		ИмяРеквизитаРегЗнак = "РегистрационныйЗнак";
	Иначе 
		ИмяРеквизитаРегЗнак = "Код";
	КонецЕсли;
	
	Если ТипЗнч(СсылкаТС.Тип) = Тип("Строка") Тогда
		ИмяРеквизитаТип = "Тип";
	Иначе 
		ИмяРеквизитаТип = "Тип.Наименование";
	КонецЕсли;	
	
	Массив = Новый Массив; 
	Массив.Добавить(ИмяРеквизитаРегЗнак); // РегНомер
	Массив.Добавить(ИмяРеквизитаТип);
	Массив.Добавить("Марка"); 
	Массив.Добавить("ГрузоподъемностьВТоннах");
	Массив.Добавить("ВместимостьВКубическихМетрах");
	//Массив.Добавить("ГосударственныйНомерПрицепа");
	Массив.Добавить("НомерСТС");
	Массив.Добавить("VIN"); 
	Массив.Добавить("ТипВладения");
	Массив.Добавить("ДокументыПодтверждающиеВладение");
	
	РеквизитыТС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТС, Массив);
	ЗаполнитьЗначенияСвойств(Структура, РеквизитыТС);
	
	Структура.РегНомер         = РеквизитыТС[ИмяРеквизитаРегЗнак];
	Структура.НомерСТС         = РеквизитыТС.НомерСТС;
	
	ЗначениеТипа = РеквизитыТС[СтрЗаменить(ИмяРеквизитаТип, ".", "")];
	
	Структура.Тип              = ?(ЗначениеЗаполнено(ЗначениеТипа), ЗначениеТипа, "");
	Структура.ТипВладения      = ЗначениеТипВладенияТС(РеквизитыТС.ТипВладения);
	Структура.Грузоподъемность = РеквизитыТС.ГрузоподъемностьВТоннах;
	Структура.Вместимость      = РеквизитыТС.ВместимостьВКубическихМетрах;
		
	МассивДокументов = РеквизитыТС.ДокументыПодтверждающиеВладение.Выгрузить().ВыгрузитьКолонку("ДокументВладения");	
	Если МассивДокументов.Количество() Тогда 
		
		Если РеквизитыТС.ТипВладения = Перечисления.Saby_ТипыВладенияТС.Аренда
			Или РеквизитыТС.ТипВладения = Перечисления.Saby_ТипыВладенияТС.Лизинг 
			Или РеквизитыТС.ТипВладения = Перечисления.Saby_ТипыВладенияТС.БезвозмездноеПользование Тогда 
			
			ДанныеДокументов = РеквизитыДокументовСбис(МассивДокументов); 
			
			ОснованияВладения = Новый Массив;
			Для Каждого ДокВладения Из МассивДокументов Цикл
				
				Если Не ЗначениеЗаполнено(ДокВладения) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеДок = ДанныеДокументов.Получить(ДокВладения);
				ДанныеДок.Удалить("Тип");
				
				ОснованияВладения.Добавить(ДанныеДок);
				
			КонецЦикла;
			
			Структура.Вставить("ОснованиеВладения", ОснованияВладения);
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Структура;
	
КонецФункции

Функция ВодителиНаВыгрузку(Водители, ПутевыеЛисты)
	
	МассивВодителей    = Новый Массив;
	МассивДанных       = Новый Массив;
	ДокументыВодителей = Новый Массив;
	ДанныеДокументов   = Неопределено;
	
	Для Каждого Строка Из Водители Цикл 		

		Если ЗначениеЗаполнено(Строка.Водитель) Тогда 
			
			МассивВодителей.Добавить(Строка.Водитель);		
			Если ЕстьРеквизитИлиСвойство("ОснованиеПередачиГруза", Строка)
				И ЗначениеЗаполнено(Строка.ОснованиеПередачиГруза) Тогда
				ДокументыВодителей.Добавить(Строка.ОснованиеПередачиГруза);
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЦикла;
	
	// Путевые листы
	Для Каждого СтрокаЛисты Из ПутевыеЛисты Цикл 				
		
		Если ЗначениеЗаполнено(СтрокаЛисты.Документ) Тогда 			
			ДокументыВодителей.Добавить(СтрокаЛисты.Документ);			
		КонецЕсли;	
		
	КонецЦикла;
		
	Если ДокументыВодителей.Количество() Тогда  
		ДанныеДокументов = РеквизитыДокументовСбис(ДокументыВодителей);
	КонецЕсли;
		
	// получение данных по ВУ водителей. хранятся в типовом РС ДокументыФизЛиц
	//ДанныеВодителей = ФиоИВУФизЛиц(МассивВодителей); 
		
	Для Каждого Строка Из Водители Цикл 
			
		ДанныеВодителя = ШаблонДанныхВодителя();			
		ЗаполнитьЗначенияСвойств(ДанныеВодителя, Строка); 
			
		ДанныеВодителя.ВУ.Номер      = Строка.НомерВУ;
		ДанныеВодителя.ВУ.Серия      = Строка.СерияВУ;
		ДанныеВодителя.ВУ.ДатаВыдачи = ЗначениеДатыВремяДляВыгрузки(Строка.ДатаВыдачиВУ, Истина);	
		
		// Телефоны
		Если ЗначениеЗаполнено(Строка.Телефоны) Тогда
			
			МассивТелефоны = ЗначениеИзСтрокиВнутр(Строка.Телефоны);
						
			ТелефоныНаВыгрузку = Новый Массив;
			Для Каждого Телефон Из МассивТелефоны Цикл
				
				СтруктураТелефон = Новый Структура;
				СтруктураТелефон.Вставить("Значение", Телефон);
				ТелефоныНаВыгрузку.Добавить(СтруктураТелефон);
				
			КонецЦикла;
						
			ДанныеВодителя.Телефон = ТелефоныНаВыгрузку;
			
		КонецЕсли;
		
		// Основания передачи
		Если ЕстьРеквизитИлиСвойство("ОснованиеПередачиГруза", Строка)
			И ЗначениеЗаполнено(Строка.ОснованиеПередачиГруза) Тогда 
			Основание = ДанныеДокументов.Получить(Строка.ОснованиеПередачиГруза);
			ДанныеВодителя.Вставить("ОснованиеПередачиГруза", Основание);
		КонецЕсли;
		
		// Путевые листы
		Отбор = Новый Структура;
		Отбор.Вставить("КлючСтроки_Водители", Строка.КлючСтроки);
		
		НайденныеПутевыеЛисты = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ПутевыеЛисты, Отбор);
		Если НайденныеПутевыеЛисты.Количество() Тогда 
			
			МассивПутевыхЛистов = Новый Массив;
			Для Каждого ПутевойЛист Из НайденныеПутевыеЛисты Цикл 
				ДанныеЛиста = ДанныеДокументов.Получить(ПутевойЛист.Документ);
				МассивПутевыхЛистов.Добавить(ДанныеЛиста);
			КонецЦикла;
			
			ДанныеВодителя.Вставить("ПутевойЛист", МассивПутевыхЛистов);
			
		КонецЕсли;
		// -
		
		МассивДанных.Добавить(ДанныеВодителя);
		
	КонецЦикла;
	
	Структура = Новый Структура;
	Структура.Вставить("Водитель", МассивДанных);
	
	Возврат Структура;
	
КонецФункции	

Функция ПрицепыНаВыгрузку(ТЗ_Прицепы)
	
	МассивПрицепы = Новый Массив;
	
	Для Каждого Строка Из ТЗ_Прицепы Цикл
		
		ДанныеПрицепа = ТранспортНаВыгрузку(Строка.Прицеп);		
		МассивПрицепы.Добавить(ДанныеПрицепа);
		
	КонецЦикла;
	
	Возврат МассивПрицепы;
	
КонецФункции

Функция СпецУсловия(ТЗ_СпецРазрешения)
		
	МассивУсловий = Новый Массив;   
	
	КолонкиИсключения = Новый Массив;
	КолонкиИсключения.Добавить("ИД");
	
	Для Каждого Строка Из ТЗ_СпецРазрешения Цикл
		
		Если ТипЗнч(Строка) <> Тип("Структура") Тогда 
			ПараметрыСтроки = СтрокаТаблицыЗначенийВСтруктуру(Строка, КолонкиИсключения);
		Иначе 
			ПараметрыСтроки = Строка;
		КонецЕсли;
		
		СтруктураУсловия = Новый Структура;
		СтруктураУсловия.Вставить("Маршрут", Новый Структура);
		СтруктураУсловия.Вставить("СпецРазрешение", ПараметрыСтроки); 
		
		МассивУсловий.Добавить(СтруктураУсловия);
		
	КонецЦикла; 
	
	Возврат МассивУсловий;
	
КонецФункции

#КонецОбласти // Транспорт 

#Область Отметки

Функция ОтметкиПоТитулу(ДанныеДокумента, Отбор = Неопределено)
	
	Отметки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ДанныеДокумента.Отметки, Отбор);
	
	КолонкиИсключение = Новый Массив;
	КолонкиИсключение.Добавить("НомерСтроки");
	КолонкиИсключение.Добавить("Этап");
	КолонкиИсключение.Добавить("Роль");
	КолонкиИсключение.Добавить("КлючСтроки"); 
	
	МассивОтметок = Новый Массив;
	
	Для Каждого Строка Из Отметки Цикл  
		
		АктыИШтрафы = АктыИШтрафы(Строка.КлючСтроки, ДанныеДокумента);
		
		Отметка = Новый Структура;
		Отметка.Вставить("ДатаВремя",  СтруктураВремя(Строка.ДатаВремя));
		Отметка.Вставить("Описание",  Строка.Описание);
		
		Если АктыИШтрафы.АктыВзвешивания.Количество() Тогда 
			Отметка.Вставить("АктыВзвешивания", АктыИШтрафы.АктыВзвешивания);
		КонецЕсли;
			
		Если АктыИШтрафы.АктыКоммерческие.Количество() Тогда 
			Отметка.Вставить("Акты", АктыИШтрафы.АктыКоммерческие); 
		КонецЕсли;
		
		Если АктыИШтрафы.Штраф.Количество() Тогда 
			Отметка.Вставить("Штрафы", АктыИШтрафы.Штраф);		
		КонецЕсли;
		
		// не используется
		//Отметка.Вставить("ИнформационноеПоле", Новый Структура);
		
		МассивОтметок.Добавить(Отметка);
		
	КонецЦикла;
	
	СтруктураОтметок = Новый Структура;
	СтруктураОтметок.Вставить("Отметка", МассивОтметок);
	
	Возврат СтруктураОтметок;
	
КонецФункции

Функция АктыИШтрафы(КлючСтроки, ДанныеДокумента)
	
	МассивАкты    = Новый Массив; 
	МассивАктыКом = Новый Массив;
    МассивШтрафы  = Новый Массив;
			
	КолонкиИсключение = Новый Массив;
	КолонкиИсключение.Добавить("НомерСтроки");
	КолонкиИсключение.Добавить("КлючСтроки_Отметки");
	
	Отбор = Новый Структура;
	Отбор.Вставить("КлючСтроки_Отметки", КлючСтроки);
	
	МассивАктовРасчет = Новый Массив;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента, "Акты") Тогда
	
		НайденныеСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ДанныеДокумента.Акты, Отбор);
		Для Каждого Строка Из НайденныеСтроки Цикл 		
			МассивАктовРасчет.Добавить(Строка.Документ);	
		КонецЦикла;
		
		ДанныеДокументов = РеквизитыДокументовСбис(МассивАктовРасчет);
		Для Каждого Док Из МассивАктовРасчет Цикл
			
			ДанныеАкта = ДанныеДокументов.Получить(Док);
			Если ДанныеАкта.Тип = Перечисления.Saby_ТипыДокумента.АктВзвешивания Тогда 
			    МассивАкты.Добавить(ДанныеАкта);
			Иначе 
				МассивАктыКом.Добавить(ДанныеАкта);
			КонецЕсли;
						
			ДанныеАкта.Удалить("Тип");
			ДанныеАкта.Удалить("Ссылка");
					
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента, "Штрафы") Тогда
	
	    НайденныеСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ДанныеДокумента.Штрафы, Отбор);
			
		Для Каждого Строка Из НайденныеСтроки Цикл 
			
			Штраф = Новый Структура;
			Штраф.Вставить("Итог",       Строка.Сумма); 
			Штраф.Вставить("Количество", Строка.Количество);
			Штраф.Вставить("Расчет",     Строка.Расчет);
			
			Штраф.Вставить("Валюта", Новый Структура);
			Штраф.Валюта.Вставить("Итог",    Строка.Сумма);
			Штраф.Валюта.Вставить("КодОКВ",  "643");
			Штраф.Валюта.Вставить("НаимОКВ", "Российский рубль");
			
			// ToDo: Курс не реализован 
			////Штраф.Валюта.Вставить("Курс", Новый Структура);
			////Штраф.Валюта.Курс.Вставить("Дата", );
			////Штраф.Валюта.Курс.Вставить("Значение", );
				
			МассивШтрафы.Добавить(Штраф);               
			
		КонецЦикла;
		
	КонецЕсли;
	
	Структура = Новый Структура; 
	Структура.Вставить("АктыКоммерческие", МассивАктыКом);
	Структура.Вставить("АктыВзвешивания",  МассивАкты);
	Структура.Вставить("Штраф",            МассивШтрафы);
		
	Возврат Структура;
	
КонецФункции

#КонецОбласти // Отметки

#Область Этапы

Функция УсловияПеревозки(ДанныеДокумента, ИнциаторПодтверждение)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	// Условия перевозки
    СтруктураУсловия = Новый Структура;
		
	// Климатический режим
	СтруктураКлимат = Новый Структура;
	СтруктураКлимат.Вставить("Температура", Новый Структура);
	СтруктураКлимат.Температура.Вставить("Минимальная",  РеквизитыОбъекта.Отправитель_ТемператураОт);
	СтруктураКлимат.Температура.Вставить("Максимальная", РеквизитыОбъекта.Отправитель_ТемператураДо);
	
	СтруктураКлимат.Вставить("Влажность", Новый Структура);
	СтруктураКлимат.Влажность.Вставить("Минимальная",  РеквизитыОбъекта.Отправитель_ВлажностьОт);
	СтруктураКлимат.Влажность.Вставить("Максимальная", РеквизитыОбъекта.Отправитель_ВлажностьДо);
	
	СтруктураУсловия.Вставить("КлиматическийРежим", СтруктураКлимат);
	// - 
	
	СтруктураУсловия.Вставить("Маршрут", Новый Структура); // нет данных для заполнения
    // СтруктураУсловия.Маршрут.Вставить("Машиночитаемый", "");
	// СтруктураУсловия.Маршрут.Вставить("Текст", "");
	
	// Переадресовка                          
	Переадресовка = Новый Структура;	
	Переадресовка.Вставить("Контакты", Новый Структура);	
	// - Другой
	
	Роль = РеквизитыОбъекта.ИнициаторПереадресации;
	
	Контакты = КонтактыЮрЛица(ДанныеДокумента.КонтактныеДанные, Роль);
	Если ЗначениеЗаполнено(Контакты.Телефоны) Тогда 
		Переадресовка.Контакты.Вставить("Телефон", Контакты.Телефоны);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакты.Емейлы) Тогда 
		Переадресовка.Контакты.Вставить("ЭлектроннаяПочта", Контакты.Емейлы);
	КонецЕсли;
		
	// документ подтверждения полномочий 
	Если ЗначениеЗаполнено(ИнциаторПодтверждение) Тогда 
		Переадресовка.Вставить("ПодтверждениеПолномочий", ИнциаторПодтверждение);	
	КонецЕсли;
		
	Переадресовка.Вставить("КтоПереадресует", 
	 	ЗначениеИнициатораПереадресации(РеквизитыОбъекта.ИнициаторПереадресации));
	
	СтруктураУсловия.Вставить("Переадресовка", Переадресовка); 
	// - 
		
	СтруктураУсловия.Вставить("ИнформационноеПоле",  Новый Структура); // источника информации нет 
	СтруктураУсловия.Вставить("Нормы",               РеквизитыОбъекта.Отправитель_НормыПеревозки);
	СтруктураУсловия.Вставить("ОграничениеСкорости", РеквизитыОбъекта.Отправитель_ОграничениеСкорости);	
	СтруктураУсловия.Вставить("Пломба",              РеквизитыОбъекта.Отправитель_Пломба);
    СтруктураУсловия.Вставить("СрокДоставки",        РеквизитыОбъекта.Отправитель_ДоставитьСрок);

	СтруктураУсловия.Вставить("ПерегрузкаЗапрещена", 
		ЗначениеПерегрузкаЗапрещена(РеквизитыОбъекта.Отправитель_ПерегрузкаЗапрешена));
	
	Возврат СтруктураУсловия;
	
КонецФункции

Функция ДанныеПогрузки(ДанныеДокумента, ОснованиеОтгрузки, ОснованиеПолномочий) 
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
    Структура = Новый Структура;
		
	// ВладелецОбъекта
	ВладелецПункта = Новый Структура;	
	Если РеквизитыОбъекта.Владелец_Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.Отправитель Тогда
		
		ВладелецПункта.Вставить("Грузоотправитель", ДанныеЮрЛица("Отгрузчик", ДанныеДокумента));		
		
	Иначе
		
		ДругойВладелец = Новый Структура;
		ДругойВладелец.Вставить("Контрагент", ДанныеЮрЛица("ВладелецОбъекта", ДанныеДокумента));
		ВладелецПункта.Вставить("Другой",     ДругойВладелец);
		
	КонецЕсли;	
		
	ВладелецПункта.Вставить("Тип", ЗначениеВладельцаОбъекта(РеквизитыОбъекта.Владелец_Тип));
	
	Если РеквизитыОбъекта.Владелец_Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.Неизвестен Тогда 
		Причина = СокрЛП(РеквизитыОбъекта.Владелец_НеизвестенПричина);		
	Иначе 
		Причина = "";
	КонецЕсли;
		
	ВладелецПункта.Вставить("ПочемуНеизвестен", Причина);	
		
	Структура.Вставить("ВладелецПункта", ВладелецПункта);
	// -
	
	// Груз
	Груз = Новый Структура;
	Груз.Вставить("Масса",          Новый Структура);
	Груз.Вставить("Состояние",      Новый Структура);
	Груз.Вставить("КоличествоМест", РеквизитыОбъекта.Погрузка_КоличествоМест);
	
	Груз.Масса.Вставить("Брутто",           РеквизитыОбъекта.Погрузка_Масса);
	Груз.Масса.Вставить("МетодОпределения", ЗначениеМетодаОпределенияМассы(РеквизитыОбъекта.Погрузка_МассаМетодРасчета)); 
	
	// Остояние кузова и упаковки нет на данный момент
	Груз.Состояние.Вставить("Кузова",   "");
	Груз.Состояние.Вставить("Тары",     СокрЛП(РеквизитыОбъекта.Погрузка_Состояние));
	Груз.Состояние.Вставить("Упаковки", "");
	
	Структура.Вставить("Груз", Груз); 
	//-
			
	// Кто делает погрузку	
    КтоПогружает = ЛицоОтгрузки(ДанныеДокумента, ОснованиеОтгрузки, ОснованиеПолномочий);
		
	Структура.Вставить("КтоПогружает",       КтоПогружает);
	Структура.Вставить("ДатаВремяПрибытия",  СтруктураВремя(РеквизитыОбъекта.Погрузка_ДатаВремяПрибыл));
	Структура.Вставить("ДатаВремяУбытия",    СтруктураВремя(РеквизитыОбъекта.Погрузка_ДатаВремяУбыл));
	Структура.Вставить("ИнформационноеПоле", Новый Структура); // нет источника
			
	Возврат Структура;
	
КонецФункции

Функция ЛицоОтгрузки(ДанныеДокумента, ОснованиеОтгрузки, ОснованиеПолномочий)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	Тип = 1;	
	Если ЗначениеЗаполнено(РеквизитыОбъекта.Отгрузчик) 
		И РеквизитыОбъекта.Отправитель <> РеквизитыОбъекта.Отгрузчик Тогда
		
		Тип = 2; 
		
	КонецЕсли;
	
	// Грузоотправитель - если тип 1 то должен заполнится сам
	
	Другой = Новый Структура;	
	Если Тип = 2 Тогда 
		
		Другой.Вставить("Контрагент", ДанныеЮрЛица("Отгрузчик", ДанныеДокумента));
		
		Если ЗначениеЗаполнено(ОснованиеОтгрузки) Тогда 
			Другой.Вставить("ДокументОснование", ОснованиеОтгрузки);       
		КонецЕсли;
			
		Работник = Новый Структура;
		//Работник.Вставить("ИныеСведения", "");
		Работник.Вставить("Должность", СокрЛП(РеквизитыОбъекта.Отгрузка_ОтветственныйДолжность));
		
		Ответственный = РеквизитыОбъекта.Отгрузка_Ответственный;
		Если ЗначениеЗаполнено(Ответственный) Тогда
			
			Массив = Новый Массив;
			Массив.Добавить(Ответственный);
			
			ДанныеОтветственного = ФиоИВУФизЛиц(Массив).Получить(Ответственный);
						
			Работник.Вставить("Фамилия",  ДанныеОтветственного.Фамилия);
			Работник.Вставить("Имя",      ДанныеОтветственного.Имя);
			Работник.Вставить("Отчество", ДанныеОтветственного.Отчество);
			
		КонецЕсли;
			
		СтруктураОснПолномочий = Новый Структура;
		Если ЗначениеЗаполнено(ОснованиеПолномочий) Тогда 		 
			СтруктураОснПолномочий.Вставить("Документ", ОснованиеПолномочий); 			
		Иначе 
			СтруктураОснПолномочий.Вставить("ДолжностныеОбязанности", "Должностные обязанности");
		КонецЕсли;
					
		Работник.Вставить("ОснованиеПолномочий", СтруктураОснПолномочий); 
						
		Другой.Вставить("Работник", Работник);
						
	КонецЕсли;
	
	// ОснованиеДоступа
    Структура = Новый Структура;	
	Структура.Вставить("Тип",              Тип);
	Структура.Вставить("Другой",           Другой);
	Структура.Вставить("ОснованиеДоступа", "");
		
	Возврат Структура;
	
КонецФункции

Функция КонтактыЮрЛица(КонтактныеДанные, Роль)
			
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Роль);  
	Отбор.Вставить("Тип",  Перечисления.ТипыКонтактнойИнформации.Телефон);
		
	// Телефоны 
	МассивТелефонов = Новый Массив; 	
	НайденныеСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(КонтактныеДанные, Отбор);
	
	Для Каждого Строка Из НайденныеСтроки Цикл   
		
		Если Не ЗначениеЗаполнено(Строка.Значение) Тогда 
			Продолжить;
		КонецЕсли;
		
		СтруктураТелефон = Новый Структура;
		СтруктураТелефон.Вставить("Значение", Строка.Значение);
		
		МассивТелефонов.Добавить(СтруктураТелефон);
		
	КонецЦикла;	
	
	// Емейлы
	МассивЕмейл = Новый Массив;
	Отбор.Вставить("Тип",  Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	НайденныеСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(КонтактныеДанные, Отбор);
	Для Каждого Строка Из НайденныеСтроки Цикл 
		
		Если Не ЗначениеЗаполнено(Строка.Значение) Тогда 
			Продолжить;
		КонецЕсли;
		
		СтруктураЕмейл = Новый Структура;
		СтруктураЕмейл.Вставить("Значение", Строка.Значение);
		
		МассивЕмейл.Добавить(СтруктураЕмейл);
		
	КонецЦикла;
	
	Структура = Новый Структура;
	Структура.Вставить("Телефоны", МассивТелефонов);
	Структура.Вставить("Емейлы",   МассивЕмейл);
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти // Этапы

#Область ПунктыПогрузкиВыгрузки

Функция ПунктПогрузки(РеквизитыОбъекта)

	СтруктураПункта = ШаблонПункта(РеквизитыОбъекта.Погрузка_ДатаВремя);
	
	// ToDo: структуру из АдресПогрузкиЗначение 
	СтруктураПункта.Адрес.Фактический.Текст = РеквизитыОбъекта.Погрузка_Адрес;
		
	Возврат СтруктураПункта;
	
КонецФункции

Функция ПунктВыгрузки(РеквизитыОбъекта)
	
	СтруктураПункта = ШаблонПункта(РеквизитыОбъекта.Отправитель_ДоставитьДо);
	
	ЗаполнитьСтруктуруАресаИзСтроки(СтруктураПункта.Адрес.Фактический, РеквизитыОбъекта.АдресДоставкиЗначение);
	СтруктураПункта.Адрес.Фактический.Текст = РеквизитыОбъекта.Отправитель_АдресДоставки;
		
	Возврат СтруктураПункта;
	
КонецФункции

Функция ШаблонПункта(ДатаВремя)
	
	Структура = Новый Структура;
	
	СтруктураДатаВремя = СтруктураВремя(ДатаВремя);	
	Структура.Вставить("ДатаВремя", СтруктураДатаВремя); 
	
	Структура.Вставить("Адрес", ШаблонФактАдрес());
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти // ПунктыПогрузкиВыгрузки

Функция РеквизитыДокументовСбис(МассивДокументов)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивДокументов);
	
	Запрос.Текст =	
	"ВЫБРАТЬ
	|	ДокументыТрН.Наименование КАК Наименование,
	|	ДокументыТрН.Номер КАК Номер,
	|	ДокументыТрН.Дата КАК Дата,
	|	ДокументыТрН.Дата КАК ДатаВремя,
	|	ДокументыТрН.ДопСведения КАК ДополнительныеСведения,
	|	ДокументыТрН.Ссылка КАК Ссылка,
	|	ДокументыТрН.Тип КАК Тип
	|ИЗ
	|	Справочник.Saby_ДокументыТрН КАК ДокументыТрН
	|ГДЕ
	|	ДокументыТрН.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыТрНСтороны.Ссылка КАК Ссылка,
	|	ДокументыТрНСтороны.Сторона КАК Сторона,
	|	ДокументыТрНСтороны.Сторона.Наименование КАК Наименование,
	|	ДокументыТрНСтороны.Сторона.ИНН КАК ИНН,
	|	ДокументыТрНСтороны.Сторона.КПП КАК КПП,
	|	ДокументыТрНСтороны.Сторона.СтранаРегистрации КАК Страна, 
	|   ВЫБОР 
	|   КОГДА ТИПЗНАЧЕНИЯ(Сторона) = ТИП(Справочник.Организации) ТОГДА
	|       Сторона.ОГРН
	|   КОГДА ТИПЗНАЧЕНИЯ(Сторона) = ТИП(Справочник.Контрагенты) ТОГДА  
	|       Сторона.РегистрационныйНомер
	|   ИНАЧЕ
	|       """"
	|   КОНЕЦ КАК ОГРН,
	|	ЕСТЬNULL(ДокументыТрНСтороны.Сторона.ЮрФизЛицо, ДокументыТрНСтороны.Сторона.ЮридическоеФизическоеЛицо) КАК ЮрФизЛицо
	|ИЗ
	|	Справочник.Saby_ДокументыТрН.Стороны КАК ДокументыТрНСтороны
	|ГДЕ
	|	ДокументыТрНСтороны.Ссылка В(&МассивСсылок)";
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументов = РезультатЗапроса[0].Выбрать();
	РеквизитыСторон   = РезультатЗапроса[1].Выгрузить();
				
	Соответствие = Новый Соответствие;
	
	КолонкиИсключения = Новый Массив;
	КолонкиИсключения.Добавить("Ссылка");
	//КолонкиИсключения.Добавить("Тип");	
	
	Пока ВыборкаДокументов.Следующий() Цикл 
		
		ПараметрыСтроки = СтрокаТаблицыЗначенийВСтруктуру(ВыборкаДокументов, КолонкиИсключения);	
		ПараметрыСтроки.Дата = ЗначениеДатыВремяДляВыгрузки(ПараметрыСтроки.Дата, Истина);
		
		// добавим стороны документа                   
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", ВыборкаДокументов.Ссылка);
		
		МассивСторон = Новый Массив;                 
				
		НайденныеСтроки = РеквизитыСторон.НайтиСтроки(Отбор);
		Для Каждого Сторона Из НайденныеСтроки Цикл
			
			ПараметрыСтороны = Новый Структура;
			ПараметрыСтороны.Вставить("Наименование", Сторона.Наименование);
									
			// наименование органа исполнительной власти выдавшего документ
			// пока не храним это значение			
			Если Сторона.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ЮрЛицо 
				Или Сторона.ЮрФизЛицо = Saby_ТНОбщегоНазначенияСервер.ЗначениеЮрФизЛицаКонфигурации("ЮрЛицо") Тогда
				
				ПараметрыСтороны.Вставить("ЮЛ", Новый Структура);
				ПараметрыСтороны.ЮЛ.Вставить("ИНН", Сторона.ИНН);
				
			ИначеЕсли Сторона.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ЮрЛицоНеРезидент 
				Или Сторона.ЮрФизЛицо = Saby_ТНОбщегоНазначенияСервер.ЗначениеЮрФизЛицаКонфигурации("ЮрЛицоНеРезидент") Тогда 
				
			    СтруктураИнЛица = ШаблонИностранногоЛица();
				
				// Поиск будет только по наименованию
				//ПараметрыСтороны.ИННЮЛ  = Сторона.ИНН;
				
				СтруктураИнЛица.Страна       = СокрЛП(Сторона.Страна);
				СтруктураИнЛица.Наименование = Сторона.Наименование;
				
				ПараметрыСтороны.Вставить("ИностранноеЛицо", СтруктураИнЛица);				
				
			Иначе  
				
				// Физ или ИП
				ПараметрыСтороны.Вставить("ФЛ", Новый Структура);
				ПараметрыСтороны.ФЛ.Вставить("ИНН", Сторона.ИНН);
				
			КонецЕсли;
			
			МассивСторон.Добавить(ПараметрыСтороны);
			
		КонецЦикла;
		
		ПараметрыСтроки.Вставить("Стороны", МассивСторон);
		
		Соответствие.Вставить(ВыборкаДокументов.Ссылка, ПараметрыСтроки);
				
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

Функция ЗаявкаНаПеревозку(РеквизитыОбъекта)
	
	Структура = Новый Структура;
	Структура.Вставить("Дата",            РеквизитыОбъекта.Отправитель_ЗаявкаДата);
	Структура.Вставить("ПорядковыйНомер", ЗначениеДатыВремяДляВыгрузки(РеквизитыОбъекта.Отправитель_ЗаявкаНомер, Истина));
	
    Возврат Структура;
	
КонецФункции

Функция ОтправительУведомления(СтруктураОтправителя)
	
	РезультатФункции = Новый Структура;
	
	Данные = ДанныеВодителяПоСсылке(СтруктураОтправителя.Отправитель);
	
	РезультатФункции.Вставить("Фамилия",  Данные.Фамилия);
	РезультатФункции.Вставить("Имя",      Данные.Имя);
	РезультатФункции.Вставить("Отчество", Данные.Отчество);
	
	МассивТелефонов = Новый Массив;
	СтруктураТелефон = Новый Структура;
	СтруктураТелефон.Вставить("Значение", СтруктураОтправителя.Телефон);
	МассивТелефонов.Добавить(СтруктураТелефон);
	
	МассивЭлектроннойПочты = Новый Массив;
	СтруктураЭлектроннойПочты = Новый Структура;
	СтруктураЭлектроннойПочты.Вставить("Значение", СтруктураОтправителя.ЭлектроннаяПочта);
	МассивЭлектроннойПочты.Добавить(СтруктураЭлектроннойПочты);
	
	Контакты = Новый Структура;
	Контакты.Вставить("Телефон",          МассивТелефонов);
	Контакты.Вставить("ЭлектроннаяПочта", МассивЭлектроннойПочты);
	//Контакты.Вставить("Другой",           "");
	
	РезультатФункции.Вставить("Контакты", Контакты);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ВложениеНаВыгрузку(ТекущийЭтап, ДанныеТитула)
		
	// Это черновик
	Если Не ЗначениеЗаполнено(ТекущийЭтап) Или ТекущийЭтап = ЗначениеТитула("1110339", Истина) Тогда
		
		НовыйТитул = "1110339";
		СтруктураВложения = ТитулПогрузка(ДанныеТитула);
				
	ИначеЕсли ТекущийЭтап = ЗначениеТитула("1110340", Истина) Тогда
		
		НовыйТитул = "1110340";
		СтруктураВложения = ТитулПриемкаГруза(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ЗначениеТитула("1110341", Истина) Тогда
		
		НовыйТитул = "1110341";
		СтруктураВложения = ТитулПолучениеГруза(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ЗначениеТитула("1110342", Истина) Тогда    
		
		НовыйТитул = "1110342";
		СтруктураВложения = ТитулВыдачаГруза(ДанныеТитула);  
		
	ИначеЕсли ТекущийЭтап = ЗначениеТитула("1110343", Истина) Тогда	
		
		НовыйТитул = "1110343"; // активно после 1110340 и до подписания 1110341
		СтруктураВложения = ТитулПереадресовка(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ЗначениеТитула("1167009", Истина) Тогда		
		
		НовыйТитул = "1167009"; // активно после 1110340 и до подписания 1110341
		СтруктураВложения = ТитулУведомлениеОПереадресовке(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ЗначениеТитула("1110344", Истина) Тогда		
		
		НовыйТитул = "1110344"; // активно после 1110340 и до подписания 1110341
		СтруктураВложения = ТитулЗаменаВодителя(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ЗначениеТитула("1110345", Истина) Тогда		
		
		НовыйТитул = "1110345"; // активно после 1110342 
		СтруктураВложения = ТитулИзменениеСтоимости(ДанныеТитула);

	ИначеЕсли ТекущийЭтап = ЗначениеТитула("1110346", Истина) Тогда		
		
		НовыйТитул = "1110346"; // активно после 1110342 
		СтруктураВложения = ТитулСогласованиеСтоимости(ДанныеТитула);
		
	Иначе 	
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
	Структура = Новый Структура;
	Структура.Вставить("Титул",    НовыйТитул);
	Структура.Вставить("Вложение", СтруктураВложения);
		
	Возврат Структура;

КонецФункции

#КонецОбласти // ВыгрузитьДокументВJson

#Область ЗагрузитьДокументИзJson
	
Функция ТекущийТитулИИДДокумента(ОбъектДок)

	Если Не ЗначениеЗаполнено(ОбъектДок.Ссылка) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Данные = РегистрыСведений.Saby_Состояние.ПрочитатьПоОбъекту(ОбъектДок.Ссылка);	
	Если Данные <> Неопределено Тогда 
		
		Соответствие = Новый Соответствие;
		Соответствие.Вставить("ИД",           Данные.UID);
		Соответствие.Вставить("АктивныйЭтап", Данные.АктивныйЭтап);
		Соответствие.Вставить("Состояние",    Данные.Состояние);
		
		Возврат Соответствие;
		
	Иначе 
		Возврат Неопределено;		
	КонецЕсли;
		
КонецФункции

#Область Титулы

// Титул "1110339"
//
Процедура ЗагрузкаТитулПогрузка(ОбъектДок, Вложения, Титул, ДопПараметры)
		
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеПогрузка = ДанныеПогрузка(ОбъектДок, Вложения, Титул, ДопПараметры);
		РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеПогрузка, ОбъектДок);
	КонецЕсли;
	
	Если ДопПараметры.ТолькоАктивныйЭтап Тогда
		Возврат;
	КонецЕсли;
	
	// Тилул одиночный
	СтруктураДок = Вложения[0];
	Если Не ЗначениеЗаполнено(СтруктураДок) Тогда 
		Возврат;
	КонецЕсли;	
	
	// основные данные и участники документа	
	// - Документ
	ЗаполнитьДанныеШапкиДокумента(ОбъектДок, СтруктураДок);
	
	ЗаполнитьУчастникаДокумента("Отправитель", СтруктураДок["Грузоотправитель"], ОбъектДок, ОбъектДок["Отправитель"]);
	ЗаполнитьУчастникаДокумента("Получатель",  СтруктураДок["Грузополучатель"],  ОбъектДок, ОбъектДок["Получатель"]);
	ЗаполнитьУчастникаДокумента("Перевозчик",  СтруктураДок["Грузоперевозчик"],  ОбъектДок, ОбъектДок["Перевозчик"]);
	ЗаполнитьУчастникаДокумента("Заказчик",    СтруктураДок["Заказчик"],         ОбъектДок, ОбъектДок["Заказчик"]);
	ЗаполнитьУчастникаДокумента("Отгрузчик",   СтруктураДок["Отгрузчик"],        ОбъектДок, ОбъектДок.Отправитель);
	
	ЗаполнитьСоставителя(ДанныеСоответствия(СтруктураДок, "Файл.Составитель"), ОбъектДок);
	
	// Экспедитор
	ОбъектДок.Отправитель_Экспедитор = ЗначениеЗаполнено(ОбъектДок["Заказчик"])
		И ОбъектДок["Отправитель"] <> ОбъектДок["Заказчик"];
	
	// Пункт погрузки/выгрузки
	ЗаполнитьПунктыПогрузкиВыдачи(
		СтруктураДок["ПунктПогрузки"],
		СтруктураДок["ПунктВыгрузки"],
		ОбъектДок
	);
	
	// Условия перевозки
	ЗаполнитьУсловияПеревозки(ОбъектДок, СтруктураДок["УсловияПеревозки"]);
	
	// СопроводительныеДокументы
	// СопроводВедомость, Договор перевозки, Документы к грузу, К Трн, Передачи ценностей 
	ЗаполнитьДанныеДокументовТрН(ОбъектДок, СтруктураДок["СопроводительныеДокументы"]);
	
	// ТранспортноеСредство и прицепы
	// Водители и СпецРазрешения
	СтруктураТС = Новый Структура;
	ДанныеТСПрицеповСпецРазрешений(СтруктураТС, СтруктураДок["ТранспортноеСредство"]);
	ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, СтруктураТС);
	
	ЗаполнитьДанныеВодителей(ОбъектДок, ДанныеВодителей(СтруктураДок["Водители"], ДопПараметры));
			
	// Погрузка
	ЗапонитьДанныеПогрузки(ОбъектДок, СтруктураДок["Погрузка"]);
	
	// Груз, опасный груз, контейнеры, гос системы, маркировка 
	ЗаполнитьДанныеПоГрузам(ОбъектДок, СтруктураДок["Груз"]);
	
	// Отметки по всем титулам, акты и штрафы 
	ЗаполнитьДанныеПоОтметкамДокумента(ОбъектДок, СтруктураДок["Отметки"], Титул);
	
КонецПроцедуры

// Титул "1110340"
//
Процедура ЗагрузкаТитулПолучениеГруза(ОбъектДок, Вложения, Титул, ДопПараметры)  
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПолучениеГруза = ДанныеПолучениеГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеПолучениеГруза, ОбъектДок);
	
	Если ДопПараметры.ТолькоАктивныйЭтап Тогда
		Возврат;
	КонецЕсли;
	
	// Одиночный титул 
	Данные = Вложения[0];	
	
	Погрузка = Данные["Погрузка"];			
	Если ЗначениеЗаполнено(Погрузка) Тогда 
		
		// !!! наименования
		Замечания = Погрузка["ЗамечанияПеревозчика"];
		
		ДатаПостановки = Замечания["ДатаВремяПостановки"];
		Если ЗначениеЗаполнено(ДатаПостановки) Тогда 
			ОбъектДок.Перевозчик_ПриемкаДатаВремя = ПреобразоватьСтрокуВДату(ДатаПостановки["Значение"]);			
		КонецЕсли;
			
		ДатаПрибытия = Замечания["ДатаВремяПрибытия"];
		Если ЗначениеЗаполнено(ДатаПрибытия) Тогда 
			ОбъектДок.Перевозчик_ПриемкаДатаВремяПрибыл = ПреобразоватьСтрокуВДату(ДатаПрибытия["Значение"]);
		КонецЕсли;
			
		ДатаУбытия = Замечания["ДатаВремяУбытия"];
		Если ЗначениеЗаполнено(ДатаУбытия) Тогда 
			ОбъектДок.Перевозчик_ПриемкаДатаВремяУбыл = ПреобразоватьСтрокуВДату(ДатаУбытия["Значение"]);
		КонецЕсли;
		
		Параметры = ПараметрыСвойстваСКонтролем(ОбъектДок, Замечания);
		ЗаполнитьСвойствоСКонтролем(Параметры, "Перевозчик_ЗамечанияПоПогрузочнымРаботам",     "ВыполненныеРаботы");
		ЗаполнитьСвойствоСКонтролем(Параметры, "Перевозчик_ПогрузкаЗамечанияПоКоличеству",     "КоличествоМест");
		ЗаполнитьСвойствоСКонтролем(Параметры, "Перевозчик_ПогрузкаЗамечанияПоМассе",          "МассаГруза");
		ЗаполнитьСвойствоСКонтролем(Параметры, "Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза", "СостояниеГруза");
		
	КонецЕсли;
	
	// Отметки по всем титулам, акты и штрафы 
	ЗаполнитьДанныеПоОтметкамДокумента(ОбъектДок, Данные["Отметки"], Титул);
			
КонецПроцедуры

// Титул "1110341"
//
Процедура ЗагрузкаТитулПриемкаГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПриемкаГруза = ДанныеПриемкаГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ДанныеТитула = ДанныеПриемкаГруза[ДанныеПриемкаГруза.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, СтруктураБезПустыхЗначений(ДанныеТитула.ДляДокумента), , "Отметки");
		
		ЗаполнитьДанныеПоОтметкам(ОбъектДок, ДанныеТитула.ДляДокумента.Отметки, ДанныеТитула.Титул);
		
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеПриемкаГруза, ОбъектДок);
			
КонецПроцедуры

// Титул "1110342"
//
Процедура ЗагрузкаТитулВыдачаГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеВыдачаГруза = ДанныеВыдачаГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ДанныеТитула = ДанныеВыдачаГруза[ДанныеВыдачаГруза.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента, , "Отметки");
		
		ЗаполнитьДанныеПоОтметкам(ОбъектДок, ДанныеТитула.ДляДокумента.Отметки, ДанныеТитула.Титул);
		
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеВыдачаГруза, ОбъектДок);
	
КонецПроцедуры

// Титул "1110343"
//
Процедура ЗагрузкаТитулПереадресовка(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеПереадресовка = ДанныеПереадресовка(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе
		ДанныеПереадресовка = Вложения;
	КонецЕсли;
	ДанныеТитула = ДанныеПереадресовка[ДанныеПереадресовка.ВГраница()];
	
	ЗаполнитьЗначенияСвойств(
		ОбъектДок,
		СтруктураБезПустыхЗначений(ДанныеТитула.ДляДокумента),
		,
		"Отметки,ДанныеЮрЛиц,КонтактныеДанные"
	);
	
	ЗаполнитьДанныеПоОтметкам(ОбъектДок, ДанныеТитула.ДляДокумента.Отметки, ДанныеТитула.Титул);
	
	ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
		ОбъектДок,
		ДанныеТитула.ДляДокумента,
		Перечисления.Saby_РолиКонтрагентов["Получатель"],
		Истина
	);
	
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеПереадресовка, ОбъектДок);
	
КонецПроцедуры

// Титул "1167009"
//
Процедура ЗагрузкаТитулУведомлениеОПереадресовке(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеУведомлениеОПереадресовке = ДанныеУведомлениеОПереадресовке(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе 
		ДанныеУведомлениеОПереадресовке = Вложения;
	КонецЕсли;
	
	Если Не ДопПараметры.ЗагрузкаСОнлайна Тогда
		
		ДанныеТитула = ДанныеУведомлениеОПереадресовке[ДанныеУведомлениеОПереадресовке.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента, , "Отметки,ДанныеЮрЛиц,КонтактныеДанные");
		
		ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок,
			ДанныеТитула.ДляДокумента,
			Перечисления.Saby_РолиКонтрагентов["Получатель"],
			Истина
		);
		
		// КИ Оформителя
		ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок,
			ДанныеТитула.ДляДокумента,
			Перечисления.Saby_РолиКонтрагентов.ПустаяСсылка(),
			Истина
		);
							
	КонецЕсли;
	
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеУведомлениеОПереадресовке, ОбъектДок);
	
КонецПроцедуры	

// Титул "1110344"
//
Процедура ЗагрузкаТитулЗаменаВодителяТС(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеЗаменаВодителяТС = ДанныеЗаменаВодителяТС(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе
		ДанныеЗаменаВодителяТС = Вложения;
	КонецЕсли;
	
	Для Каждого ДанныеТитула Из ДанныеЗаменаВодителяТС Цикл
		ЗаполнитьЗначенияСвойств(
			ОбъектДок,
			СтруктураБезПустыхЗначений(ДанныеТитула.ДляДокумента),
			,
			"Отметки,Водители,Прицепы,СпецРазрешения"
		);
		
		ЗаполнитьДанныеПоОтметкам(ОбъектДок, ДанныеТитула.ДляДокумента.Отметки, ДанныеТитула.Титул);
		
		ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, ДанныеТитула.ДляДокумента, Истина);
		
		ЗаполнитьДанныеВодителей(ОбъектДок, ДанныеТитула.ДляДокумента.Водители, Истина);
	КонецЦикла;
	
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеЗаменаВодителяТС, ОбъектДок); 
	
КонецПроцедуры

// Титул "1110345"
//	
Процедура ЗагрузкаТитулИзменениеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры)  
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеИзменения = ДанныеИзменениеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе
		
		ДанныеИзменения = Вложения;		
		ДанныеТитула    = ДанныеИзменения[ДанныеИзменения.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
		
	КонецЕсли;
	 
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеИзменения, ОбъектДок);
	
КонецПроцедуры

// Титул "1110346"
//
Процедура ЗагрузкаТитулСогласованиеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеСогласования = ДанныеСогласованиеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе
		
		ДанныеСогласования = Вложения;
		ДанныеТитула       = ДанныеСогласования[ДанныеСогласования.ВГраница()]; 
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
		
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеСогласования, ОбъектДок);
	
КонецПроцедуры

// Титул "1115113"
//
Процедура ЗагрузкаТитулУведомленияОУточнении(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеУведомлениеОУточнении = ДанныеУведомлениеОУточнении(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе 
		ДанныеУведомлениеОУточнении = Вложения;
	КонецЕсли;
	
	ДанныеТитула = ДанныеУведомлениеОУточнении[ДанныеУведомлениеОУточнении.ВГраница()];
	
	ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
	
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеУведомлениеОУточнении, ОбъектДок);
	
КонецПроцедуры
	
#КонецОбласти // Титулы

#Область ДанныеОсновныхТитулов

Функция ДанныеПогрузка(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения
	);
	
	КодТитула = ЗначениеТитула(Титул);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(Вложение, ОбъектДок.Ссылка, Титул, КодТитула, Истина);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеПолучениеГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения
	);
	
	КодТитула = ЗначениеТитула(Титул);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(Вложение, ОбъектДок.Ссылка, Титул, КодТитула, Истина);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеПриемкаГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения
	);
	
	КодТитула = ЗначениеТитула(Титул);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		Выгрузка = Вложение["Выгрузка"];	 	
		Если ЗначениеЗаполнено(Выгрузка) Тогда 
			
			ДатаПрибытия = Выгрузка["ДатаВремяПрибытия"];
			Если ЗначениеЗаполнено(ДатаПрибытия) Тогда			
				ДляДокумента.Вставить("Выгрузка_ДатаВремяПрибыл", ПреобразоватьСтрокуВДату(ДатаПрибытия["Значение"]));
			КонецЕсли;
		
			ДатаУбытия = Выгрузка["ДатаВремяУбытия"];
			Если ЗначениеЗаполнено(ДатаУбытия) Тогда 
				ДляДокумента.Вставить("Выгрузка_ДатаВремяУбыл", ПреобразоватьСтрокуВДату(ДатаУбытия["Значение"]));
			КонецЕсли;
			
			ГрузВыгрузка = Выгрузка["Груз"];
			Если ЗначениеЗаполнено(ГрузВыгрузка) Тогда 
				
				Масса = ГрузВыгрузка["Масса"];
				Если ЗначениеЗаполнено(Масса) Тогда 
					
					ДляДокумента.Вставить("Выгрузка_МассаБрутто", ЧислоИзСтроки(Масса["Брутто"]));
					ДляДокумента.Вставить("Выгрузка_МассаНетто", ЧислоИзСтроки(Масса["Нетто"]));
					
					ДляДокумента.Вставить(
						"Выгрузка_МассаМетодРасчета", ЗначениеМетодаОпределенияМассы(Масса["МетодОпределения"], Истина)
					);

				КонецЕсли;					
										
				ДляДокумента.Вставить("Выгрузка_КоличествоМест", ЧислоИзСтроки(ГрузВыгрузка["КоличествоМест"]));
				ДляДокумента.Вставить("Выгрузка_Объем", ЧислоИзСтроки(ГрузВыгрузка["Объем"]));
				
				Состояние = ГрузВыгрузка["Состояние"];
				Если ЗначениеЗаполнено(Состояние) Тогда 
					ДляДокумента.Вставить("Выгрузка_Состояние", Состояние["Общее"]);
				КонецЕсли;		
				
				//Параметры = ПараметрыСвойстваСКонтролем(ОбъектДок, Выгрузка);
				//ЗаполнитьСвойствоСКонтролем(Параметры, "Погрузка_ЗамечанияПоПогрузочнымРаботам", "ВыполненныеРаботы");
				//ЗаполнитьСвойствоСКонтролем(Параметры, "Погрузка_ЗамечанияПоКоличеству",         "КоличествоМест");
				//ЗаполнитьСвойствоСКонтролем(Параметры, "Погрузка_ЗамечанияПоМассе",              "МассаГруза");
				//ЗаполнитьСвойствоСКонтролем(Параметры, "Погрузка_ЗамечанияПоСостояниюГруз",      "СостояниеГруза");
				
			КонецЕсли;
					
		КонецЕсли;
		
		// Куда это грузим.......... та же структура
		// ПунктВыгрузки????????
		// ToDo: уточнить куда грузим
		
		// Груз - пока игнорим.... хз надо ли мне выгружать
		////КоличествоМест
		////КоличествоПаллет
		////МассаБрутто
		////МассаНетто
		////Наименование
		////Объем
		////Плотность
		////Состояние
		
		ДляДокумента.Вставить("Отметки", ДанныеПоОтметкам(Вложение["Отметки"], Титул));
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(Вложение, ОбъектДок.Ссылка, Титул, КодТитула, Истина);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеВыдачаГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения
	);
	
	КодТитула = ЗначениеТитула(Титул);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		Выгрузка = Вложение["Выгрузка"]; 		
		Если ЗначениеЗаполнено(Выгрузка) Тогда 
			
			Замечания = Выгрузка["ЗамечанияПеревозчика"];
			
			ДатаПостановки = Замечания["ДатаВремяПостановки"];
			Если ЗначениеЗаполнено(ДатаПостановки) Тогда 
				ДляДокумента.Вставить("Перевозчик_ВыгрузкаДатаВремя", ПреобразоватьСтрокуВДату(ДатаПостановки["Значение"]));
			КонецЕсли;
					
			ДатаПрибытия = Замечания["ДатаВремяПрибытия"];
			Если ЗначениеЗаполнено(ДатаПрибытия) Тогда 
				ДляДокумента.Вставить("Перевозчик_ВыгрузкаДатаВремяПрибыл", ПреобразоватьСтрокуВДату(ДатаПрибытия["Значение"]));
			КонецЕсли;
			
			ДатаУбытия = Замечания["ДатаВремяУбытия"];
			Если ЗначениеЗаполнено(ДатаУбытия) Тогда 
				ДляДокумента.Вставить("Перевозчик_ВыгрузкаДатаВремяУбыл", ПреобразоватьСтрокуВДату(ДатаУбытия["Значение"]));
			КонецЕсли;
			
			ВыполненныеРаботы = Замечания["ВыполненныеРаботы"];
			Если ВыполненныеРаботы <> Неопределено Тогда
				ДляДокумента.Вставить("Перевозчик_ЗамечанияПоРазгрузочнымРаботам", ВыполненныеРаботы);
			КонецЕсли;
			
			СостояниеГруза = Замечания["СостояниеГруза"];
			Если СостояниеГруза <> Неопределено Тогда
				ДляДокумента.Вставить("Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза", СостояниеГруза);
			КонецЕсли;
			
		КонецЕсли;
		
		ДляДокумента.Вставить("Отметки", ДанныеПоОтметкам(Вложение["Отметки"], Титул));
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(Вложение, ОбъектДок.Ссылка, Титул, КодТитула, Истина);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ДанныеОсновныхТитулов

#Область ДанныеДинамическихТитулов

// Титул "1110343"
//
Функция ДанныеПереадресовка(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения
	);
	
	КодТитула = ЗначениеТитула(Титул);
	
	РольКонтрагентаПолучатель = Перечисления.Saby_РолиКонтрагентов["Получатель"];
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ЗаполнитьПунктыПогрузкиВыдачи(
			Неопределено, 
			Вложение["ПунктВыгрузки"], 
			Неопределено,
			ДляДокумента
		);

		ДляДокумента.Вставить("Отметки",          ДанныеПоОтметкам(Вложение["Отметки"], Титул));
		
		ДляДокумента.Вставить("Получатель",       ПолучитьЮрЛицо(Вложение["Грузополучатель"]));
		ДляДокумента.Вставить("ДанныеЮрЛиц",      ДанныеЮрЛиц(Вложение["Грузополучатель"], РольКонтрагентаПолучатель));
		ДляДокумента.Вставить("КонтактныеДанные", КонтактнаяИнформация(Вложение["Грузополучатель"], РольКонтрагентаПолучатель));
				
		Основание = ДанныеСоответствия(Вложение, "Переадресовка.Основание.Документ");
		Если ЗначениеЗаполнено(Основание) Тогда 
			
			Тип = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей;
			ОснованиеСсылка = ЗагрузитьОдиночныйДокументЭТрН(Основание, Тип);				

			ДляДокумента.Вставить("ПереадресовкаНаОсновании", ОснованиеСсылка);
						
		КонецЕсли;
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(Вложение, ОбъектДок.Ссылка, Титул, КодТитула, ДопПараметры.Просмотрено);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Титул "1167009"
//
Функция ДанныеУведомлениеОПереадресовке(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения
	);
	
	КодТитула = ЗначениеТитула(Титул);
	
	РольКонтрагентаПолучатель = Перечисления.Saby_РолиКонтрагентов.Получатель;
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ЗаполнитьПунктыПогрузкиВыдачи(
			Неопределено, 
			Вложение["ПунктВыгрузки"], 
			Неопределено,
			ДляДокумента
		);

		ДляДокумента.Вставить("Отметки", ДанныеПоОтметкам(Вложение["Отметки"], Титул));
		
		Грузополучатель = Вложение["Грузополучатель"];
		ДляДокумента.Вставить("Получатель",       ПолучитьЮрЛицо(Грузополучатель));
		ДляДокумента.Вставить("ДанныеЮрЛиц",      ДанныеЮрЛиц(Грузополучатель, РольКонтрагентаПолучатель));
		ДляДокумента.Вставить("КонтактныеДанные", КонтактнаяИнформация(Грузополучатель, РольКонтрагентаПолучатель));
		
		СопроводительныеДокументы = Вложение["СопроводительныеДокументы"];
		Если ЗначениеЗаполнено(СопроводительныеДокументы) Тогда
			
			Основание = СопроводительныеДокументы["Отгрузка"];
			
			Тип = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей;
			ОснованиеСсылка = ЗагрузитьОдиночныйДокументЭТрН(Основание, Тип);				
				
			ДляДокумента.Вставить("ПереадресовкаНаОсновании", ОснованиеСсылка);
			
		КонецЕсли;	
		
		Переадресовка = Вложение["Переадресовка"];
		Если ЗначениеЗаполнено(Переадресовка) Тогда
			
			Причина = Переадресовка["Уведомление"]["Причина"];
			ДляДокумента.Вставить("Причина", Причина);
			
			Оформитель = Переадресовка["Уведомление"]["Отправитель"];
			Если ЗначениеЗаполнено(Оформитель) Тогда 
				
				Массив = Новый Массив;
				Массив.Добавить(Оформитель["Фамилия"]);
				Массив.Добавить(Оформитель["Имя"]);
				Массив.Добавить(Оформитель["Отчество"]);
				
				Наименование = СтрСоединить(Массив, " ");
				
				СсылкаФЛ = Справочники.ФизическиеЛица.НайтиПоНаименованию(Наименование, Истина);
				Если Не ЗначениеЗаполнено(СсылкаФЛ) Тогда
					// Создадим новое ФЛ
					Оформил = НовоеФизЛицо(Оформитель, Наименование, Ложь);
				Иначе 
					Оформил = СсылкаФЛ;
				КонецЕсли;
				
				ДляДокумента.Вставить("Оформил", Оформил);
				
				// Контрактные данные Оформителя
				Оформитель.Вставить("Ссылка", Оформил);
				
				ПустаяРоль = Перечисления.Saby_РолиКонтрагентов.ПустаяСсылка();
				ОформилКонтактныеДанные = КонтактнаяИнформация(Оформитель, ПустаяРоль);
				Для Каждого СтрокаКИ Из ОформилКонтактныеДанные Цикл
					ДляДокумента.КонтактныеДанные.Добавить(СтрокаКИ);
				КонецЦикла;				
					
			КонецЕсли; 
			
		КонецЕсли;
				
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(Вложение, ОбъектДок.Ссылка, Титул, КодТитула, ДопПараметры.Просмотрено);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Титул "1110344"
//
Функция ДанныеЗаменаВодителяТС(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения
	);
	
	КодТитула = ЗначениеТитула(Титул);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ДляДокумента.Вставить(
			"ДатаВремяЗамены",
			ПреобразоватьСтрокуВДату(Вложение["ЗаменаВодителяТС"]["ДатаВремя"]["Значение"])
		);
		
		ДанныеТСПрицеповСпецРазрешений(ДляДокумента, Вложение["ТранспортноеСредство"]);
		
		ДляДокумента.Вставить("Водители", ДанныеВодителей(Вложение["Водители"], ДопПараметры));

		ДляДокумента.Вставить("Отметки",  ДанныеПоОтметкам(Вложение["Отметки"], Титул));
		
		ПричинаЗамены = Вложение["ЗаменаВодителяТС"]["Основание"]["Текст"];
		Если Не ЗначениеЗаполнено(ПричинаЗамены) Тогда
			ПричинаЗамены = "";
		КонецЕсли;
		ДляДокумента.Вставить("ПричинаЗамены", ПричинаЗамены);
		
		Основание = Вложение["ЗаменаВодителяТС"]["Основание"]["Документ"];
		Если ЗначениеЗаполнено(Основание) Тогда 
			Тип = Перечисления.Saby_ТипыДокумента.КТранспортнойНакладной;
			ДокументЗамены = ЗагрузитьОдиночныйДокументЭТрН(Основание, Тип);
			ДляДокумента.Вставить("ДокументЗамены", ДокументЗамены);
		КонецЕсли;
		
		// пока не требуется:
	    // - Водители.Документ
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(Вложение, ОбъектДок.Ссылка, Титул, КодТитула, ДопПараметры.Просмотрено);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Титул "1110345"
//
Функция ДанныеИзменениеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения
	);
	
	КодТитула = ЗначениеТитула(Титул);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;		
		ДляДокумента.Вставить("Перевозчик", ОбъектДок.Перевозчик);
		
		Грузоперевозчик = Вложение["Грузоперевозчик"];
		Если ЗначениеЗаполнено(Грузоперевозчик)
			И ЗначениеЗаполнено(Грузоперевозчик["Реквизиты"]) Тогда 
			
			БанкРеквизиты = Грузоперевозчик["Реквизиты"]["Банковские"];
			
			// получим или создадим расчетный счет
			РасчетныйСчет = РасчетныйСчетПоРеквизитам(БанкРеквизиты, ОбъектДок.Перевозчик);	
			Если Не ЗначениеЗаполнено(РасчетныйСчет) Тогда 
				
				НомерСчетаПеревозчик = БанкРеквизиты["НомерСчета"];
				ДляДокумента.Вставить("НомерСчетаПеревозчик", НомерСчетаПеревозчик);
				
				Банк = БанкРеквизиты["Банк"];
				Если ЗначениеЗаполнено(Банк) Тогда 
					
					НаименованиеБанк = Банк["Наименование"];
					Если ЗначениеЗаполнено(НаименованиеБанк) Тогда
						БанкНазваниеПеревозчик = НаименованиеБанк["Полное"];
					КонецЕсли;
				
					БанкБИКПеревозчик      = Банк["БИК"];
					БанкКоррСчетПеревозчик = Банк["КоррСчет"]; 
					
					ДляДокумента.Вставить("БанкНазваниеПеревозчик", БанкНазваниеПеревозчик);
					ДляДокумента.Вставить("БанкБИКПеревозчик",      БанкБИКПеревозчик);
					ДляДокумента.Вставить("БанкКоррСчетПеревозчик", БанкКоррСчетПеревозчик);
					
				КонецЕсли;
				
			Иначе 
				ДляДокумента.Вставить("РасчетныйСчетПеревозчик", РасчетныйСчет);				
			КонецЕсли;
										
		КонецЕсли;
				
		Стоимость = Вложение["СтоимостьПеревозки"]; 
		Если ЗначениеЗаполнено(Стоимость) Тогда 
			
			Если ЗначениеЗаполнено(Стоимость["Налог"]) Тогда 	
				СтавкаНДС = ЗначениеСтавкиНДС(Стоимость["Налог"]["Ставка"], Истина);
			Иначе 
				СтавкаНДС = "без НДС";
			КонецЕсли;
		
			ДляДокумента.Вставить("Сумма",       Стоимость["ВключаяНДС"]);
			ДляДокумента.Вставить("Условия",     Стоимость["Расчет"]);
			ДляДокумента.Вставить("СуммаБезНДС", Стоимость["БезНДС"]);			
			ДляДокумента.Вставить("Ставка",      СтавкаНДС);
				
		КонецЕсли;
				
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(
		    Вложение, 
			ОбъектДок.Ссылка, 
			Титул, 
			КодТитула, 
			ДопПараметры.Просмотрено);
		
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
	
    	РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;

КонецФункции

// Титул "1110346"
//
Функция ДанныеСогласованиеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры)

	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
	ОбъектДок.Ссылка, Титул, Вложения
	);
	
	КодТитула = ЗначениеТитула(Титул);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;			
		ДляДокумента.Вставить("Отправитель", ОбъектДок.Отправитель);		
		
		ИнойПлательщик = Вложение["ИнойПлательщик"];
		Если ЗначениеЗаполнено(ИнойПлательщик) Тогда
			
			Плательщик = КонтрагентОрганизацияПоНаименованию(ИнойПлательщик["Название"]["Полное"]);	
			
			Основание = ИнойПлательщик["Основание"]; 			
			Если ЗначениеЗаполнено(Основание) Тогда 
				
				Тип = Перечисления.Saby_ТипыДокумента.ОснованиеОплатыПеревозки;
				ОснованиеСсылка = ЗагрузитьОдиночныйДокументЭТрН(Основание, Тип);				
				
				ДляДокумента.Вставить("ОснованиеОплаты", ОснованиеСсылка);
				
			КонецЕсли;
			
		Иначе 	
			Плательщик = ОбъектДок.Отправитель;			
		КонецЕсли;
		
		ДляДокумента.Вставить("Плательщик", Плательщик);
				
		Грузоотправитель = Вложение["Грузоотправитель"];
		Если ЗначениеЗаполнено(Грузоотправитель) 
			И ЗначениеЗаполнено(Грузоотправитель["Реквизиты"]) Тогда 
			
			БанкРеквизиты = Грузоотправитель["Реквизиты"]["Банковские"];
			
			// получим или создадим расчетный счет
			РасчетныйСчет = РасчетныйСчетПоРеквизитам(БанкРеквизиты, ОбъектДок.Отправитель);			
			Если Не ЗначениеЗаполнено(РасчетныйСчет) Тогда 
				
				НомерСчета = БанкРеквизиты["НомерСчета"];
				ДляДокумента.Вставить("НомерСчета", НомерСчета);
				
				Банк = БанкРеквизиты["Банк"];
				Если ЗначениеЗаполнено(Банк) Тогда 
					
					НаименованиеБанк = Банк["Наименование"];
					Если ЗначениеЗаполнено(НаименованиеБанк) Тогда						
						БанкНазвание = НаименованиеБанк["Полное"]; 
					КонецЕсли;
				
					БанкБИК      = Банк["БИК"];
					БанкКоррСчет = Банк["КоррСчет"]; 
					
					ДляДокумента.Вставить("БанкНазвание", БанкНазвание);
					ДляДокумента.Вставить("БанкБИК",      БанкБИК);
					ДляДокумента.Вставить("БанкКоррСчет", БанкКоррСчет);
					
				КонецЕсли;
				
			Иначе	
				ДляДокумента.Вставить("РасчетныйСчет", РасчетныйСчет);			
			КонецЕсли;		 
			
		КонецЕсли;
					
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(
			Вложение, 
			ОбъектДок.Ссылка, 
			Титул, 
			КодТитула, 
			ДопПараметры.Просмотрено);
		
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);		
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Титул "1115113"
//
Функция ДанныеУведомлениеОУточнении(ОбъектДок, Вложения, Титул, ДопПараметры)

	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения
	);
	
	КодТитула = ЗначениеТитула(Титул);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		Если Вложение["ПрошлыйТитул"] = Неопределено Тогда
			ОбъектДок.ЗаполнитьПрошлыйТитулДляВложения(Вложение, Титул, КодТитула);
		КонецЕсли;
		
		ДляДокумента.Вставить("Представление", Вложение["ПрошлыйТитул"].Представление);
		
		ПричинаОтказа = Вложение["СведенияОбУточнении"];
		Если ЗначениеЗаполнено(ПричинаОтказа) Тогда
			ДляДокумента.Вставить("КомментарийУведомление", "Комментарий: " + ПричинаОтказа["ТекстУведУточ"]);
		КонецЕсли;
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(
			Вложение, ОбъектДок.Ссылка, Титул, КодТитула, ДопПараметры.Просмотрено, Вложение["ПрошлыйТитул"].Тип
		);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;

КонецФункции // ДанныеУведомлениеОУточнении()

#КонецОбласти // ДанныеДинамическихТитулов

Функция ДанныеДляРегистраТитулов(Вложение, СсылкаНаДокумент, Титул, КодТитула, Просмотрено = Ложь, ТипТитулаОтказа = Неопределено)
	
	Если Вложение["ЗагруженВРегистр"] Тогда
		ДляРегистра = Неопределено;
	Иначе
		ДляРегистра = Новый Структура;
		ДляРегистра.Вставить("СсылкаНаДокумент",    СсылкаНаДокумент);
		ДляРегистра.Вставить("ТипТитула",           Титул);
		ДляРегистра.Вставить("ИдентификаторТитула", ИдентификаторВложения(Вложение, КодТитула));
		ДляРегистра.Вставить("Период",              ДатаВложения(Вложение, Титул));
		ДляРегистра.Вставить("Просмотрено",         Просмотрено);
		Если ТипТитулаОтказа = Неопределено Тогда
			ДляРегистра.Вставить("ТипТитулаОтказа", Перечисления.Saby_ТипТитулаЭтрН.ПустаяСсылка());
		Иначе
			ДляРегистра.Вставить("ТипТитулаОтказа", ТипТитулаОтказа);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДляРегистра;
	
КонецФункции

Процедура ЗаполнитьДанныеШапкиДокумента(ОбъектДок, ИсходнаяСтруктура)
	
	Документ = ИсходнаяСтруктура["Документ"];
	
	Если ЗначениеЗаполнено(Документ) Тогда 
		
		ДатаДокумента = ИсходнаяСтруктура["Документ"]["Дата"];
		
		Если ЗначениеЗаполнено(ДатаДокумента) Тогда
			
			ОбъектДок.Дата = ПреобразоватьСтрокуВДату(ДатаДокумента);
			
			Если ОбъектДок.Дата = НачалоДня(ТекущаяДатаСеанса()) Тогда 
				ОбъектДок.Дата = ТекущаяДатаСеанса();
			КонецЕсли;
			
		Иначе
			ОбъектДок.Дата = ТекущаяДатаСеанса();
		КонецЕсли; 
		
	КонецЕсли;
		
	// Дата/Номер Заявки
	Если ЗначениеЗаполнено(ИсходнаяСтруктура["ЗаявкаНаПеревозку"]) Тогда		
		ОбъектДок.Отправитель_ЗаявкаНомер = ИсходнаяСтруктура["ЗаявкаНаПеревозку"]["ПорядковыйНомер"];
		ОбъектДок.Отправитель_ЗаявкаДата  = ПреобразоватьСтрокуВДату(ИсходнаяСтруктура["ЗаявкаНаПеревозку"]["Дата"]);		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапонитьДанныеПогрузки(ОбъектДок, Погрузка)
	
	Если Не ЗначениеЗаполнено(Погрузка) Тогда 
		Возврат;
	КонецЕсли;
								
	// Дата/время 
	ВремяПрибытия = Погрузка["ДатаВремяПрибытия"];
	ВремяУбытия   = Погрузка["ДатаВремяУбытия"];
	
	Если ЗначениеЗаполнено(ВремяПрибытия) Тогда  
		ОбъектДок.Погрузка_ДатаВремяПрибыл = ПреобразоватьСтрокуВДату(ВремяПрибытия["Значение"]); 
	Иначе 
		ОбъектДок.Погрузка_ДатаВремяПрибыл = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВремяУбытия) Тогда 
		ОбъектДок.Погрузка_ДатаВремяУбыл = ПреобразоватьСтрокуВДату(ВремяУбытия["Значение"]);
	Иначе 	
		ОбъектДок.Погрузка_ДатаВремяУбыл = ""; 
	КонецЕсли;
	
	// Груз    
	Груз = Погрузка["Груз"];
	Если ЗначениеЗаполнено(Груз) Тогда 
						
		Масса = Груз["Масса"];
		Если ЗначениеЗаполнено(Масса) Тогда 			
			ОбъектДок.Погрузка_Масса             = Масса["Брутто"];
			ОбъектДок.Погрузка_МассаМетодРасчета = ЗначениеМетодаОпределенияМассы(Масса["МетодОпределения"], Истина);			
		КонецЕсли;
				
		ОбъектДок.Погрузка_КоличествоМест = ЧислоИзСтроки(Груз["КоличествоМест"]);
		
		// Состояние
		Массив = Новый Массив;
		
		Состояние = Груз["Состояние"];
		Если ЗначениеЗаполнено(Состояние) Тогда 
			
			Тара = Состояние["Тары"];
			Если ЗначениеЗаполнено(Тара) Тогда 
				Массив.Добавить(Тара);    
			КонецЕсли;
			
			Кузов = Состояние["Кузова"]; 
			Если ЗначениеЗаполнено(Кузов) Тогда		
				Массив.Добавить(Кузов);
			КонецЕсли;
			
			Упаковка = Состояние["Упаковки"];
			Если ЗначениеЗаполнено(Упаковка) Тогда 
				Массив.Добавить(Упаковка);
			КонецЕсли;  
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектДок.Погрузка_Состояние = СокрЛП(СтрСоединить(Массив, " ")); 
	
	// Кто погружает
	ЗаполнитьДанныеКтоПогружает(ОбъектДок, Погрузка["КтоПогружает"]);
	
	// Владелец пункта
	Владелец = Погрузка["ВладелецПункта"]; 
	
	Если ЗначениеЗаполнено(Владелец) Тогда 
		
		Тип = ЗначениеВладельцаОбъекта(Владелец["Тип"], Истина);
		
		ОбъектДок.Владелец_Тип = Тип;
		
		Если Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.Отправитель Тогда 		
			
			ОбъектДок.ВладелецОбъекта = ОбъектДок.Отправитель;		
			// нет своих КИ... возможно скопировать из грузоотправителя
			
		ИначеЕсли Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.ДругоеЮрЛицо Тогда 
			
			Контрагент = Владелец["Другой"]["Контрагент"];
			Роль = Перечисления.Saby_РолиКонтрагентов.ВладелецОбъекта;
			
			ЗаполнитьУчастникаДокумента("ВладелецОбъекта", Контрагент, ОбъектДок);
			
		Иначе 
			// Неизввестен 
			Параметры = ПараметрыСвойстваСКонтролем(ОбъектДок, Владелец);
			ЗаполнитьСвойствоСКонтролем(Параметры, "Владелец_НеизвестенПричина","ПочемуНеизвестен");
		КонецЕсли;    
	КонецЕсли;
			
КонецПроцедуры

#Область ЗагрузкаДанныхЮрЛиц

Процедура ЗаполнитьУчастникаДокумента(ИмяРеквизита, Данные, ОбъектДок, ЗначениеПоУмолчанию = Неопределено)
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
		ОбъектДок[ИмяРеквизита] = ЗначениеПоУмолчанию;
		Возврат;
	КонецЕсли;
		
	ЗначениеПеречисления = Перечисления.Saby_РолиКонтрагентов[ИмяРеквизита]; 
	
	ОбъектДок[ИмяРеквизита] = ПолучитьЮрЛицо(Данные);	
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ДанныеЮрЛиц",      ДанныеЮрЛиц(Данные, ЗначениеПеречисления));
	СтруктураДанных.Вставить("КонтактныеДанные", КонтактнаяИнформация(Данные, ЗначениеПеречисления));
	
	ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
	    ОбъектДок,
		СтруктураДанных,
		ЗначениеПеречисления
	);
		
КонецПроцедуры

Функция ПолучитьЮрЛицо(ДанныеЮрЛица, ЭтоСтронаДокумента = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоСтронаДокумента Тогда
		ЮрЛицо = Справочники.Saby_СторонаДокумента.ПустаяСсылка();
	Иначе	
		ЮрЛицо = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ДанныеЮрЛица = Неопределено Тогда 
		Возврат ЮрЛицо;
	КонецЕсли;
		
	ИНН = "";
	КПП = "";
			
	// Если ЭтоСтронаДокумента Тогда 		
		// ИНН = ?(ЗначениеЗаполнено(ДанныеЮрЛица["ИННЮЛ"]), ДанныеЮрЛица["ИННЮЛ"], ДанныеЮрЛица["ИННФЛ"]);		
	// Иначе
	
	Если ЭтоСтронаДокумента Тогда
		Реквизиты = ДанныеЮрЛица;
	Иначе		
		Реквизиты = ДанныеЮрЛица["Реквизиты"];
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Реквизиты) Тогда		
		Возврат ЮрЛицо;    				
	КонецЕсли;
					
	ЭтоИП     = ЗначениеЗаполнено(Реквизиты["ИП"]);
	ЭтоЮЛ     = ЗначениеЗаполнено(Реквизиты["ЮЛ"]);
	ЭтоИнЛицо = ЗначениеЗаполнено(Реквизиты["ИностранноеЛицо"]);
	ЭтоФЛ     = ЗначениеЗаполнено(Реквизиты["ФЛ"]);
	
	Если ЭтоЮЛ Тогда
		
		ИНН = Реквизиты["ЮЛ"]["ИНН"];
		Если Не ЭтоСтронаДокумента Тогда 
			КПП = Реквизиты["ЮЛ"]["КПП"];  
		КонецЕсли;
		
	ИначеЕсли ЭтоИП Тогда
		ИНН = Реквизиты["ИП"]["ИНН"];
	ИначеЕсли ЭтоИнЛицо Тогда 
		// ИНН нет
		// ищем по наименованию
		
	ИначеЕсли ЗначениеЗаполнено(Реквизиты["ИНН"]) Тогда
		ИНН = Реквизиты["ИНН"];	
	Иначе 
		// Физ лицо... но нельзя указать в поле...
		// ДанныеЮрЛица.Реквизиты.Свойство("ФЛ")
		ИНН = Реквизиты["ФЛ"]["ИНН"];
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ИНН) Тогда		
		Возврат ЮрЛицо;		
	КонецЕсли;
	
	// Дополним исходную структуру данных новыми значениями			
	ДанныеЮрЛица.Вставить("ИНН",       ИНН); 
	ДанныеЮрЛица.Вставить("КПП",       КПП);
	ДанныеЮрЛица.Вставить("ЭтоИП",     ЭтоИП);
	ДанныеЮрЛица.Вставить("ЭтоЮЛ",     ЭтоЮЛ);
	ДанныеЮрЛица.Вставить("ЭтоИнЛицо", ЭтоИнЛицо);
	ДанныеЮрЛица.Вставить("ЭтоФЛ",     ЭтоФЛ);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН",          ИНН);
	Запрос.УстановитьПараметр("КПП",          КПП);
	Запрос.УстановитьПараметр("ПоискСтороны", ЭтоСтронаДокумента);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	1 КАК Порядок
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН
	|	И ВЫБОР
	|			КОГДА &КПП = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Организации.КПП = &КПП
	|		КОНЕЦ
    |
	|ОБЪЕДИНИТЬ ВСЕ
    |
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	2
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты	
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И ВЫБОР
	|			КОГДА &КПП = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Контрагенты.КПП = &КПП
	|		КОНЕЦ
    |
	|ОБЪЕДИНИТЬ ВСЕ
    |
	|ВЫБРАТЬ
	|	Saby_СторонаДокумента.Ссылка,
	|	3
	|ИЗ
	|	Справочник.Saby_СторонаДокумента КАК Saby_СторонаДокумента
	|ГДЕ
	|	Saby_СторонаДокумента.ИНН = &ИНН
	|   И &ПоискСтороны = ИСТИНА 
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_Данные.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
    |
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Данные.Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		// нашли юр.лицо. Организация, Контрагент
		ЮрЛицо = Выборка.Ссылка; 		
	Иначе
		
		Если ЭтоСтронаДокумента Тогда        
			ЮрЛицо = НоваяСторонаДокумента(ДанныеЮрЛица); 
		Иначе 	
			ЮрЛицо = НовыйКонтагент(ДанныеЮрЛица);
		КонецЕсли;
	
	КонецЕсли;	
	
	ДанныеЮрЛица.Вставить("Ссылка", ЮрЛицо);
	
	Возврат ЮрЛицо;
		
КонецФункции

Функция НовыйКонтагент(ДанныеЮрЛица)
	
	УстановитьПривилегированныйРежим(Истина);
	
    ЭтоИП     = ДанныеЮрЛица["ЭтоИП"];
	ЭтоЮЛ     = ДанныеЮрЛица["ЭтоЮЛ"];
	ЭтоИнЛицо = ДанныеЮрЛица["ЭтоИнЛицо"];
	ЭтоФЛ     = ДанныеЮрЛица["ЭтоФЛ"];
		
	// создаем контрагента...
	// по основным участникам документа
	НовоеЮрЛицо = Справочники.Контрагенты.СоздатьЭлемент();
	
    ЕстьРеквизитПарнер = ОбщегоНазначения.ЕстьРеквизитОбъекта("Партнер", НовоеЮрЛицо.Метаданные());
	Если ЕстьРеквизитПарнер Тогда
		НовоеЮрЛицо.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.НеизвестныйПартнер");
	КонецЕсли;
	
	// пока не работаем с иностранными лицами
	НовоеЮрЛицо.СтранаРегистрации  = Справочники.СтраныМира.Россия;
	
	НовоеЮрЛицо.ИНН = ДанныеЮрЛица["ИНН"];
	НовоеЮрЛицо.КПП = ДанныеЮрЛица["КПП"];
	
	Информация = ДанныеЮрЛица["Реквизиты"]["Информация"];
	Если ЗначениеЗаполнено(Информация) Тогда
		НовоеЮрЛицо.ДополнительнаяИнформация = Информация;
	КонецЕсли;	
	
	 // в БП3 реквизит называется иначе	 
	Если ЕстьРеквизитИлиСвойство("ЮрФизЛицо", НовоеЮрЛицо) Тогда
		ИмяРеквизитаЮрФизЛицо = "ЮрФизЛицо";
	Иначе 
	    ИмяРеквизитаЮрФизЛицо = "ЮридическоеФизическоеЛицо";	
	КонецЕсли;
	
	НовоеЮрЛицо[ИмяРеквизитаЮрФизЛицо] = ЗначениеЮрФизЛицо(ДанныеЮрЛица);
	
	Если ЭтоЮЛ Тогда 
		
		РеквизитыЮЛ = ДанныеЮрЛица["Реквизиты"]["ЮЛ"];
		
		НовоеЮрЛицо.Наименование       = РеквизитыЮЛ["Название"]["Полное"];
		НовоеЮрЛицо.НаименованиеПолное = РеквизитыЮЛ["Название"]["Полное"];
		//НовоеЮрЛицо.ЮрФизЛицо          = Перечисления.ЮрФизЛицо.ЮрЛицо;		 		
				
	ИначеЕсли ЭтоИП Тогда 
		
		РеквизитыИП = ДанныеЮрЛица["Реквизиты"]["ИП"];
		
		МассивНазвания = Новый Массив;
		МассивНазвания.Добавить(РеквизитыИП["Фамилия"]);
		МассивНазвания.Добавить(РеквизитыИП["Имя"]);
		МассивНазвания.Добавить(РеквизитыИП["Отчество"]);
		
		Название = СтрСоединить(МассивНазвания, " ");				 
		
		НовоеЮрЛицо.РегистрационныйНомер = РеквизитыИП["ОГРН"];
		НовоеЮрЛицо.Наименование         = Название;
		НовоеЮрЛицо.НаименованиеПолное   = Название;
		//НовоеЮрЛицо.ЮрФизЛицо            = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
		
		//НовоеЮрЛицо.ДополнительнаяИнформация = ДанныеЮрЛица.ИП.ИныеСведения;
		
	ИначеЕсли ЭтоФЛ Тогда
		
		РеквизитыФЛ = ДанныеЮрЛица["Реквизиты"]["ФЛ"];
		
		МассивНазвания = Новый Массив;
		МассивНазвания.Добавить(РеквизитыФЛ["Фамилия"]);
		МассивНазвания.Добавить(РеквизитыФЛ["Имя"]);
		МассивНазвания.Добавить(РеквизитыФЛ["Отчество"]);
		
		Название = СтрСоединить(МассивНазвания, " ");				 
		
		НовоеЮрЛицо.ИНН                = РеквизитыФЛ["ИНН"];
		НовоеЮрЛицо.Наименование       = Название;
		НовоеЮрЛицо.НаименованиеПолное = Название;				 
		//НовоеЮрЛицо.ЮрФизЛицо          = Перечисления.ЮрФизЛицо.ФизЛицо;
		
		//НовоеЮрЛицо.ДополнительнаяИнформация = ДанныеЮрЛица.ФЛ.ИныеСведения;
		
	Иначе 
		
		// Иностранное лицо				 
		НовоеЮрЛицо.Наименование      = ДанныеЮрЛица.ИностранноеЛицо.Наименование;
		НовоеЮрЛицо.СтранаРегистрации = Справочники.СтраныМира.НайтиПоНаименованию(ДанныеЮрЛица.ИностранноеЛицо.Страна);	
		//НовоеЮрЛицо.ЮрФизЛицо         = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
		
		//НовоеЮрЛицо.ДополнительнаяИнформация = ДанныеЮрЛица.ИностранноеЛицо.ИныеСведения;
		
		// ToDo: возможно это нужно где то хранить 
		// "Статус":         ???
		// "ВидДокумента":   ???
		// "НомерДокумента": ???
		// "ДатаДокумента":  ???
		
	КонецЕсли;	
	
	ДатаДействуетС = НачалоДня(ТекущаяДатаСеанса());
	ВидыКИ         = ВидыКонтактнойИнформации(НовоеЮрЛицо.Ссылка);
		
	// Юр адрес
	// или заполнена структура данных... 	                
	Адрес = ДанныеЮрЛица["Адрес"];
	Если ЗначениеЗаполнено(Адрес) Тогда 
				
		ЮрАдрес = ПреобразоватьСтруктуруАдреса(Адрес["Юридический"]);
		Если ЮрАдрес <> Неопределено Тогда 
			
			АдресКИ = НовоеЮрЛицо.КонтактнаяИнформация.Добавить();
			АдресКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Адрес;
			АдресКИ.Вид           = ВидыКИ.АдресЮр;
			АдресКИ.Страна        = Справочники.СтраныМира.Россия; 					
			АдресКИ.ЗначенияПолей = ЮрАдрес.АдресСтруктурой;		
			АдресКИ.Представление = ЮрАдрес.АдресСтрокой;
			
			Если ЕстьРеквизитИлиСвойство("ДействуетС", АдресКИ) Тогда   
				АдресКИ.ДействуетС = ДатаДействуетС;
			КонецЕсли;
					
		КонецЕсли;
		
	КонецЕсли;
	
	Контакты = ДанныеЮрЛица["Контакты"];
	Если ЗначениеЗаполнено(Контакты) Тогда 
		
		// Телефоны                                        	
		Телефоны = Контакты["Телефон"];
		Если ЗначениеЗаполнено(Телефоны) Тогда  
			Для Каждого Телефон Из Телефоны Цикл 
				
				ТелефонКИ = НовоеЮрЛицо.КонтактнаяИнформация.Добавить();
				ТелефонКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Телефон;
				ТелефонКИ.Вид           = ВидыКИ.Телефон; 				
				ТелефонКИ.Представление = Телефон["Значение"];
				ТелефонКИ.НомерТелефона = Телефон["Значение"];
				
				Если ЕстьРеквизитИлиСвойство("ДействуетС", ТелефонКИ) Тогда
					ТелефонКИ.ДействуетС = ДатаДействуетС;
				КонецЕсли;
									
			КонецЦикла;	
		КонецЕсли;
		
		// Электронная почта  
		Почты = Контакты["ЭлектроннаяПочта"];
		Если ЗначениеЗаполнено(Почты) Тогда  
			Для Каждого ЭлПочта Из Почты Цикл 
				
				ЭлПочтаКИ = НовоеЮрЛицо.КонтактнаяИнформация.Добавить();
				ЭлПочтаКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				ЭлПочтаКИ.Вид           = ВидыКИ.Емайл; 				
				ЭлПочтаКИ.Представление = ЭлПочта["Значение"];
				
				Если ЕстьРеквизитИлиСвойство("ДействуетС", ЭлПочтаКИ) Тогда
					ЭлПочтаКИ.ДействуетС = ДатаДействуетС;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	НовоеЮрЛицо.Записать();
	
	Возврат НовоеЮрЛицо.Ссылка;
	
КонецФункции

Функция ПреобразоватьСтруктуруАдреса(ДанныеАдреса)
	
	СтруктураАдреса = Неопределено;
	
	Текст = ДанныеАдреса["Текст"];
	Адрес = ДанныеАдреса["Структура"];
	
	Если ЗначениеЗаполнено(Текст) 
		Или ЗначениеЗаполнено(Адрес) Тогда
		
		Если ТипЗнч(Адрес) <> Тип("Строка") Тогда 
			СтруктураJS = ЗначениеВJSON(Адрес);
		Иначе 
			СтруктураJS = Адрес;
		КонецЕсли;
	
		// есть представление
		Если ЗначениеЗаполнено(Текст) Тогда	
			Представление = Текст;			
		Иначе 
			Если ТипЗнч(Адрес) = Тип("Строка") Тогда
				Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(Адрес);
			Иначе
				// есть только структура данных. сформируем представление по структуре
				Представление = ПредставлениеАдресаИзСоответствия(Адрес); 
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("АдресСтрокой",    Представление);
		СтруктураАдреса.Вставить("АдресСтруктурой", СтруктураJS);
		
	КонецЕсли;	
	
	Возврат СтруктураАдреса;
	
КонецФункции

Функция ПредставлениеАдресаИзСоответствия(Соответствие)
	
	Структура = Новый Структура;
	Для Каждого Элемент Из Соответствие Цикл 
		Структура.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
		
	Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(Структура);
	
	Возврат Представление;
	
КонецФункции

Функция НоваяСторонаДокумента(ДанныеЮрЛица)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сторона = Справочники.Saby_СторонаДокумента.СоздатьЭлемент();
	
	Сторона.ИНН = ДанныеЮрЛица["ИНН"];
		
	Сторона.ЮрФизЛицо = ЗначениеЮрФизЛицо(ДанныеЮрЛица);
	Если ДанныеЮрЛица["ЭтоИнЛицо"] Тогда 
		
		Сторона.Наименование    = ДанныеЮрЛица["ИностранноеЛицо"]["Наименование"];
		Сторона.ЮрФизЛицо       = Перечисления.Saby_ЮрФизЛицо.ЮрЛицоНеРезидент;
		
	Иначе 
		
		Сторона.Наименование = СокрЛП(Сторона.ЮрФизЛицо) + " " + Сторона.ИНН;
		Если СтрДлина(СокрЛП(Сторона.ИНН)) = 12 Тогда
			Сторона.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ИндивидуальныйПредприниматель;
		Иначе 
			Сторона.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ЮрЛицо;
		КонецЕсли;
		
	КонецЕсли;	
		
	Сторона.Записать();
	
	Возврат Сторона.Ссылка;
	
КонецФункции
	
Функция ЗначениеЮрФизЛицо(ДанныеЮрЛица)
	
	ЕстьЮрФизЛицо = Метаданные.Перечисления.Найти("ЮрФизЛицо") <> Неопределено;
	Если ЕстьЮрФизЛицо Тогда		
		
		Если ДанныеЮрЛица["ЭтоИП"] Тогда 
			ИмяЗначения = "ИндивидуальныйПредприниматель";
		ИначеЕсли ДанныеЮрЛица["ЭтоИнЛицо"] Тогда 
			ИмяЗначения = "ЮрЛицоНеРезидент";
		ИначеЕсли ДанныеЮрЛица["ЭтоФЛ"] Тогда 
			ИмяЗначения = "ФизЛицо";
		Иначе 
			// ЮЛ
			ИмяЗначения = "ЮрЛицо";
		КонецЕсли;
				
	Иначе 
		
		// "Бухгалтерия предприятия, редакция 3.0"
		Если ДанныеЮрЛица["ЭтоИП"] Тогда 
			ИмяЗначения = "ФизическоеЛицо";
		Иначе 
			// ЮЛ
			ИмяЗначения = "ЮридическоеЛицо";
		КонецЕсли;
		
	КонецЕсли;
	
	Значение = ЗначениеЮрФизЛицаКонфигурации(ИмяЗначения);
	
	Возврат Значение;

КонецФункции

Функция ДанныеЮрЛиц(ДанныеЮрЛицаСОнлайна, Роль)
	
	РезультатФункции = Новый Массив;
	
	Если ДанныеЮрЛицаСОнлайна = Неопределено Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	// для иностранных возможно доп проверка
	Если Не ЗначениеЗаполнено(ДанныеЮрЛицаСОнлайна["Ссылка"]) Тогда   
		Возврат РезультатФункции;
	КонецЕсли;
	
	СтруктураДанныхЮрЛица = Новый Структура;
	
	ЭтоИП     = ДанныеЮрЛицаСОнлайна["ЭтоИП"];
	ЭтоЮЛ     = ДанныеЮрЛицаСОнлайна["ЭтоЮЛ"];
	ЭтоИнЛицо = ДанныеЮрЛицаСОнлайна["ЭтоИнЛицо"];
	ЭтоФЛ     = ДанныеЮрЛицаСОнлайна["ЭтоФЛ"];
	
	СтруктураДанныхЮрЛица.Вставить("Роль", Роль);
	СтруктураДанныхЮрЛица.Вставить("ИНН", ДанныеЮрЛицаСОнлайна["ИНН"]);
	СтруктураДанныхЮрЛица.Вставить("КПП", ДанныеЮрЛицаСОнлайна["КПП"]);
	
	// Адрес 
	Адрес = ДанныеЮрЛицаСОнлайна["Адрес"];
	Если ЗначениеЗаполнено(Адрес) Тогда
		
		ЮрАдрес = Адрес["Юридический"];
		Если ЗначениеЗаполнено(ЮрАдрес) Тогда
			
			СтруктураАдрес = ПреобразоватьСтруктуруАдреса(ЮрАдрес);
			Если ЗначениеЗаполнено(СтруктураАдрес) Тогда
				СтруктураДанныхЮрЛица.Вставить("Адрес", СтруктураАдрес.АдресСтрокой);
				СтруктураДанныхЮрЛица.Вставить("АдресСтруктура", СтруктураАдрес.АдресСтруктурой);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Реквизиты
	Если ЭтоЮл Тогда
		СтруктураДанныхЮрЛица.Вставить("ЮрФизЛицо", Перечисления.Saby_ЮрФизЛицо.ЮрЛицо);
	ИначеЕсли ЭтоФЛ Тогда
		
		СтруктураДанныхЮрЛица.Вставить("ЮрФизЛицо", Перечисления.Saby_ЮрФизЛицо.ФизЛицо);
		
		РеквизитыФЛ = ДанныеЮрЛицаСОнлайна["Реквизиты"]["ФЛ"];
		
		СтруктураФИО = Новый Структура;
		СтруктураФИО.Вставить("Фамилия",  РеквизитыФЛ["Фамилия"]);
		СтруктураФИО.Вставить("Имя",      РеквизитыФЛ["Имя"]);
		СтруктураФИО.Вставить("Отчество", РеквизитыФЛ["Отчество"]);
		
		ФИОСтрокой = ЗначениеВСтрокуВнутр(СтруктураФИО);	
		
		СтруктураДанныхЮрЛица.Вставить("СтруктураФИО", ФИОСтрокой);
		
	ИначеЕсли ЭтоИП Тогда  
		
		СтруктураДанныхЮрЛица.Вставить("ЮрФизЛицо", Перечисления.Saby_ЮрФизЛицо.ИндивидуальныйПредприниматель);
		
		РеквизитыИП = ДанныеЮрЛицаСОнлайна["Реквизиты"]["ИП"];
				
		СтруктураДанныхЮрЛица.Вставить("ОГРН", РеквизитыИП["ОГРН"]);
				
		СтруктураФИО = Новый Структура;
		СтруктураФИО.Вставить("Фамилия",  РеквизитыИП["Фамилия"]);
		СтруктураФИО.Вставить("Имя",      РеквизитыИП["Имя"]);
		СтруктураФИО.Вставить("Отчество", РеквизитыИП["Отчество"]);
		
		ФИОСтрокой = ЗначениеВСтрокуВнутр(СтруктураФИО);
				
		СтруктураДанныхЮрЛица.Вставить("СтруктураФИО", ФИОСтрокой);
				
	Иначе		
		
		// Иностаранное юр лицо				
		СтруктураДанныхЮрЛица.Вставить("ЮрФизЛицо", Перечисления.Saby_ЮрФизЛицо.ЮрЛицоНеРезидент);
		// ??? возможно в контрагенте достаточно 
		Страна = ДанныеЮрЛицаСОнлайна["Реквизиты"]["ИностранноеЛицо"]["Страна"];
		Если ЗначениеЗаполнено(Страна) Тогда 
			СтруктураДанныхЮрЛица.Вставить("СтранаРегистрации", СокрЛП(Страна));
		КонецЕсли;
			
	КонецЕсли;
	
	РезультатФункции.Добавить(СтруктураДанныхЮрЛица);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция КонтактнаяИнформация(ДанныеЮрЛицаСОнлайна, Роль)
	
	РезультатФункции = Новый Массив;
	
	Если ДанныеЮрЛицаСОнлайна = Неопределено Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	// для иностранных возможно доп проверка
	Если Не ЗначениеЗаполнено(ДанныеЮрЛицаСОнлайна["Ссылка"]) Тогда   
		Возврат РезультатФункции;
	КонецЕсли;
	
	СтруктураКонтактнойИнформации = Новый Структура;
	
	// Телефоны 
	Контакты = ДанныеЮрЛицаСОнлайна["Контакты"];
	Если Не ЗначениеЗаполнено(Контакты) Тогда 
		Возврат РезультатФункции;
	КонецЕсли;
		
	Телефоны = Контакты["Телефон"];
	Если ЗначениеЗаполнено(Телефоны) Тогда 
		Для Каждого Телефон Из Телефоны Цикл 				
			
			Если Не ЗначениеЗаполнено(Телефон["Значение"]) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураКонтактнойИнформации = Новый Структура;
			СтруктураКонтактнойИнформации.Вставить("Роль",     Роль);
			СтруктураКонтактнойИнформации.Вставить("Тип",      Перечисления.ТипыКонтактнойИнформации.Телефон);
			СтруктураКонтактнойИнформации.Вставить("Значение", Телефон["Значение"]);
			
			РезультатФункции.Добавить(СтруктураКонтактнойИнформации);
			
		КонецЦикла;	
	КонецЕсли;
	
	// Электронная почта
	Почты = Контакты["ЭлектроннаяПочта"];
	Если ЗначениеЗаполнено(Почты) Тогда 
		Для Каждого ЭлПочта Из Почты Цикл 				
			
			Если Не ЗначениеЗаполнено(ЭлПочта["Значение"]) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураКонтактнойИнформации = Новый Структура;
			СтруктураКонтактнойИнформации.Вставить("Роль",     Роль);
			СтруктураКонтактнойИнформации.Вставить("Тип",      Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			СтруктураКонтактнойИнформации.Вставить("Значение", ЭлПочта["Значение"]);
			
			РезультатФункции.Добавить(СтруктураКонтактнойИнформации);
			
		КонецЦикла; 
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(ОбъектДок, СтруктураДанных, Роль, ДинамическийТитул = Ложь)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Роль);
	
	Если ДинамическийТитул И ЗначениеЗаполнено(СтруктураДанных.ДанныеЮрЛиц) Тогда
		СтрокиДляУдаления = ОбъектДок.ДанныеЮрЛиц.НайтиСтроки(Отбор);
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			ОбъектДок.ДанныеЮрЛиц.Удалить(СтрокаДляУдаления);
		КонецЦикла;
	КонецЕсли;
	Для Каждого СтруктураДанныхЮрЛица Из СтруктураДанных.ДанныеЮрЛиц Цикл
		Если СтруктураДанныхЮрЛица.Роль <> Роль Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДанныхЮрЛиц = ОбъектДок.ДанныеЮрЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныхЮрЛиц, СтруктураДанныхЮрЛица);
	КонецЦикла;
	
	Если ДинамическийТитул И ЗначениеЗаполнено(СтруктураДанных.КонтактныеДанные) Тогда
		СтрокиДляУдаления = ОбъектДок.КонтактныеДанные.НайтиСтроки(Отбор);
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			ОбъектДок.КонтактныеДанные.Удалить(СтрокаДляУдаления);
		КонецЦикла;
	КонецЕсли;
	Для Каждого СтруктураКонтактныхДанных Из СтруктураДанных.КонтактныеДанные Цикл
		Если СтруктураКонтактныхДанных.Роль <> Роль Тогда
			Продолжить;
		КонецЕсли;
		СтрокаКонтактныхДанных = ОбъектДок.КонтактныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКонтактныхДанных, СтруктураКонтактныхДанных);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСоставителя(СоставительСОнлайна, ОбъектДок)
	
	Если СоставительСОнлайна = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоставительСсылка = Справочники.Организации.НайтиПоНаименованию(СоставительСОнлайна["Наименование"], Истина);
	ОбъектДок.Составитель = ?(Не СоставительСсылка.Пустая(), СоставительСсылка, СоставительСОнлайна["Наименование"]);
	
	Основание = СоставительСОнлайна["Основание"]["Документ"];
	Если ЗначениеЗаполнено(Основание) Тогда 
		
		Тип = Перечисления.Saby_ТипыДокумента.СоставительНаОсновании;	
		ОснованиеСсылка = ЗагрузитьОдиночныйДокументЭТрН(Основание, Тип);
				
		ОбъектДок.Составитель_НаОснованииДокумент = ОснованиеСсылка;
		
	КонецЕсли;
	
КонецПроцедуры

Функция КонтрагентОрганизацияПоНаименованию(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	1 КАК Порядок
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	2
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование = &Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_Данные.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Данные.Порядок";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		// нашли юр.лицо. Организация, Контрагент
		ЮрЛицо = Выборка.Ссылка; 		
	Иначе
		ЮрЛицо = Наименование;		
	КонецЕсли;	

	Возврат ЮрЛицо;
	
КонецФункции

#КонецОбласти // ЗагрузкаДанныхЮрЛиц

Процедура ЗаполнитьПунктыПогрузкиВыдачи(ПунктПогрузки, ПунктВыгрузки, ОбъектДок, СтруктураДанных = Неопределено)
	
	Если СтруктураДанных = Неопределено Тогда
		СтруктураДанных = Новый Структура;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПунктПогрузки) Тогда 
		
		АдресФактПогрузка = ПунктПогрузки["Адрес"]["Фактический"];
		Если ЗначениеЗаполнено(АдресФактПогрузка) Тогда 
						
			ДанныеАдресаПогрузка = ПреобразоватьСтруктуруАдреса(АдресФактПогрузка);
			Если ЗначениеЗаполнено(ДанныеАдресаПогрузка) Тогда 
				СтруктураДанных.Вставить("Погрузка_Адрес", ДанныеАдресаПогрузка.АдресСтрокой);
				СтруктураДанных.Вставить("АдресПогрузкиЗначение", ДанныеАдресаПогрузка.АдресСтруктурой);
			КонецЕсли;
						
		КонецЕсли;
		
		Если Не ПунктПогрузки["ДатаВремя"] = Неопределено Тогда
			СтруктураДанных.Вставить("Погрузка_ДатаВремя", ПреобразоватьСтрокуВДату(ПунктПогрузки["ДатаВремя"]["Значение"]));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПунктВыгрузки) Тогда 
		
		АдресФактВыгрузка = ПунктВыгрузки["Адрес"]["Фактический"];
		Если ЗначениеЗаполнено(АдресФактВыгрузка) Тогда 
			
			ДанныеАдресаВыгрузка = ПреобразоватьСтруктуруАдреса(АдресФактВыгрузка);
			Если ЗначениеЗаполнено(ДанныеАдресаВыгрузка) Тогда
				СтруктураДанных.Вставить("Отправитель_АдресДоставки", ДанныеАдресаВыгрузка.АдресСтрокой);
				СтруктураДанных.Вставить("АдресДоставкиЗначение", ДанныеАдресаВыгрузка.АдресСтруктурой);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПунктВыгрузки["ДатаВремя"] = Неопределено Тогда
			СтруктураДанных.Вставить(
				"Отправитель_ДоставитьДо",
				ПреобразоватьСтрокуВДату(ПунктВыгрузки["ДатаВремя"]["Значение"])
			);
			СтруктураДанных.Вставить("Выгрузка_ДатаВремя", СтруктураДанных.Отправитель_ДоставитьДо);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбъектДок <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ОбъектДок, СтруктураДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУсловияПеревозки(ОбъектДок, УсловияПеревозки)
	
	Если УсловияПеревозки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
			
	Параметры = ПараметрыСвойстваСКонтролем(ОбъектДок, УсловияПеревозки);
	
	ЗаполнитьСвойствоСКонтролем(Параметры, "Отправитель_НормыПеревозки",      "Нормы"); 	
	ЗаполнитьСвойствоСКонтролем(Параметры, "Отправитель_ПерегрузкаЗапрешена", "ПерегрузкаЗапрещена", Истина);	
	ЗаполнитьСвойствоСКонтролем(Параметры, "Отправитель_Пломба",              "Пломба");
	ЗаполнитьСвойствоСКонтролем(Параметры, "Отправитель_ДоставитьСрок",       "СрокДоставки");
	ЗаполнитьСвойствоСКонтролем(Параметры, "Отправитель_ОграничениеСкорости", "ОграничениеСкорости");
	
	// Климатический режим
	КлиматическийРежим = УсловияПеревозки["КлиматическийРежим"]; 
	Если ЗначениеЗаполнено(КлиматическийРежим) Тогда  
		
		Температура = КлиматическийРежим["Температура"]; 
		Если ЗначениеЗаполнено(Температура) Тогда 
			Параметры.Источник = Температура;
			ЗаполнитьСвойствоСКонтролем(Параметры, "Отправитель_ТемператураОт", "Минимальная",  Истина);
			ЗаполнитьСвойствоСКонтролем(Параметры, "Отправитель_ТемператураДо", "Максимальная", Истина);
		КонецЕсли;
		
		Влажность = КлиматическийРежим["Влажность"];
		Если ЗначениеЗаполнено(Влажность) Тогда
			Параметры.Источник = Влажность;
			ЗаполнитьСвойствоСКонтролем(Параметры, "Отправитель_ВлажностьОт", "Минимальная",  Истина);
			ЗаполнитьСвойствоСКонтролем(Параметры, "Отправитель_ВлажностьДо", "Максимальная", Истина);
		КонецЕсли;
				
	КонецЕсли;
	
	// Маршрут
	// ToDo: сейчас маршрутов нет даже в метаданных 
	
	// переадресация       
	Переадресовка = УсловияПеревозки["Переадресовка"];
	Если ЗначениеЗаполнено(Переадресовка) Тогда 
		
		ОбъектДок.ИнициаторПереадресации = 
			ЗначениеИнициатораПереадресации(Переадресовка["КтоПереадресует"], Истина);  
			
		Подтверждение = Переадресовка["ПодтверждениеПолномочий"];
		Если ЗначениеЗаполнено(Подтверждение) Тогда 
			
			Тип = Перечисления.Saby_ТипыДокумента.ПравоПереадресации;				
			ПодтверждениеСсылка = ЗагрузитьОдиночныйДокументЭТрН(Подтверждение, Тип);
						
			ОбъектДок.ИнициаторПереадресацииПодтверждение = ПодтверждениеСсылка;
			
		КонецЕсли;
			
	КонецЕсли;
	
	// ToDo: нет заполнения по этим полям 
	// - Контакты - либо грузоотправителя или грузополучателя 
	// - ПодтверждениеПолномочий
		
КонецПроцедуры

Процедура ЗаполнитьДанныеКтоПогружает(ОбъектДок, КтоПогружает)
	
	Если КтоПогружает = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
    // Документы владения
	ТЗ = ТаблицаДокументовТрН();
	НомерСтроки = 0;
		
	// Кто погружает
	// Грузоотправитель или другой 
	Если КтоПогружает["Тип"] = "2" Тогда		
		
			// другое юр лицо  
		Контрагент = КтоПогружает["Другой"]["Контрагент"];
		Роль = Перечисления.Saby_РолиКонтрагентов.Отгрузчик;
		
		ЗаполнитьУчастникаДокумента("Отгрузчик", Контрагент, ОбъектДок);		
		
		// ДокументОснование 
		ДокументОснование = КтоПогружает["Другой"]["ДокументОснование"];
		Если ЗначениеЗаполнено(ДокументОснование) Тогда 			
			НС = ТЗ.Добавить();
			Тип = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей;
			ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, ДокументОснование, Тип, НомерСтроки);  			
		КонецЕсли;
		
		// Работник          
		Работник = КтоПогружает["Другой"]["Работник"];
		Если ЗначениеЗаполнено(Работник) Тогда 
			
			Работник = КтоПогружает["Другой"]["Работник"];
			
			Массив = Новый Массив;
			Массив.Добавить(Работник["Фамилия"]);
			Массив.Добавить(Работник["Имя"]);
			Массив.Добавить(Работник["Отчество"]);
			
			Наименование = СтрСоединить(Массив, " ");
			
			СсылкаФЛ = Справочники.ФизическиеЛица.НайтиПоНаименованию(Наименование, Истина);
			Если Не ЗначениеЗаполнено(СсылкаФЛ) Тогда
				// Создадим новое ФЛ
				Объектдок.Отгрузка_Ответственный = НовоеФизЛицо(Работник, Наименование, Ложь);
			Иначе 
				Объектдок.Отгрузка_Ответственный = СсылкаФЛ;
			КонецЕсли;
			
			// Должность
			Если ЗначениеЗаполнено(Работник["Должность"]) Тогда				
				Объектдок.Отгрузка_ОтветственныйДолжность = Работник["Должность"];								
			КонецЕсли;						
			
			// Основание полномочий
			Если ЗначениеЗаполнено(Работник["ОснованиеПолномочий"]) Тогда 
				
				ДокПолномочий = Работник["ОснованиеПолномочий"]["Документ"];
				Если ЗначениеЗаполнено(ДокПолномочий) Тогда
					
					НС = ТЗ.Добавить();
					Тип = Перечисления.Saby_ТипыДокумента.ОтветственныйНаОсновании;
					ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, ДокПолномочий, Тип, НомерСтроки); 
					
				Иначе 
					ОбъектДок.Отгрузка_ОтветственныйНаОсновании = Работник["ОснованиеПолномочий"]["ДолжностныеОбязанности"]; 
				КонецЕсли;			
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе 	
		
		// Грузооправитель
		ОбъектДок.Отгрузчик = ОбъектДок.Отправитель;		
		// нет своих КИ... возможно скопировать из грузоотправителя
			
	КонецЕсли;	
	
	// - ОснованиеДоступа	
	//// Если ЗначениеЗаполнено(КтоПогружает["ОснованиеДоступа"]) Тогда 
	////	
	////	НС = ТЗ.Добавить();
	////	Тип = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей;
	////	ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, КтоПогружает["ОснованиеДоступа"]["Документ"], Тип, НомерСтроки);  
	////	
	//// КонецЕсли;
	
	// Получим ссылки на существующие и новые документы
	Если ТЗ.Количество() Тогда 
		
		СоответствиеДокументов = НайтиСоздатьДокументТрН(ТЗ);
		
		// Заполняем данные
		Для Каждого СтрокаДок Из ТЗ Цикл 
			
			ДокументОснования = СоответствиеДокументов.Получить(СтрокаДок.НомерСтроки);
			Если СтрокаДок.ТипДок = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей Тогда 
				ОбъектДок.Отгрузка_НаОснованииДокумент = ДокументОснования;
			ИначеЕсли СтрокаДок.ТипДок = Перечисления.Saby_ТипыДокумента.ОтветственныйНаОсновании Тогда 	
				ОбъектДок.Отгрузка_ОтветственныйНаОсновании = ДокументОснования; 
			КонецЕсли;
					
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ЗагрузкаТСиВодители

Процедура ДанныеТСПрицеповСпецРазрешений(ДляДокумента, СтруктураТССОнлайна)
	
	ДляДокумента.Вставить("Отправитель_ТранспортноеСредство", Справочники.ТранспортныеСредства.ПустаяСсылка());
	ДляДокумента.Вставить("Прицепы",                          Новый Массив);
	ДляДокумента.Вставить("СпецРазрешения",                   Новый Массив);
	
	Если Не ЗначениеЗаполнено(СтруктураТССОнлайна) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВсехТС = ТСИПрицепыИзБазы(СтруктураТССОнлайна);
	
	ДляДокумента.Вставить(
		"Отправитель_ТранспортноеСредство",
		ТСИлиПрицепПослеЗагрузки(СтруктураТССОнлайна, ДанныеВсехТС)
	);
	
	ДляДокумента.Вставить("Прицепы",        ДанныеПрицепов(СтруктураТССОнлайна["Прицеп"], ДанныеВсехТС));
	ДляДокумента.Вставить("СпецРазрешения", ДанныеСпецРазрешений(СтруктураТССОнлайна["СпецУсловия"]));
	
	Документ = СтруктураТССОнлайна["Документ"];
	Если ЗначениеЗаполнено(Документ) Тогда
		ОснованиеПередачиГруза = Документ["ПередачаГруза"];
		Если ЗначениеЗаполнено(ОснованиеПередачиГруза) Тогда
			Тип = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей;
			ОснованиеПередачиГрузаТС = ЗагрузитьОдиночныйДокументЭТрН(ОснованиеПередачиГруза, Тип);
			ДляДокумента.Вставить("ОснованиеПередачиГрузаТС", ОснованиеПередачиГрузаТС);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеПрицепов(ПрицепыСОнлайна, ДанныеВсехТС)
	
	РезультатФункции = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ПрицепыСОнлайна) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Для Каждого Прицеп Из ПрицепыСОнлайна Цикл
		
		СсылкаПрицеп = ТСИлиПрицепПослеЗагрузки(Прицеп, ДанныеВсехТС, Истина);			
		Если Не ЗначениеЗаполнено(СсылкаПрицеп) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПрицепа = Новый Структура;
		СтруктураПрицепа.Вставить("Прицеп", СсылкаПрицеп);
		
		РезультатФункции.Добавить(СтруктураПрицепа);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеСпецРазрешений(СпецУсловияСОнлайна)
	
	РезультатФункции = Новый Массив;
	
	Если Не ЗначениеЗаполнено(СпецУсловияСОнлайна) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Для Каждого Условие Из СпецУсловияСОнлайна Цикл   
	
		СпецРазрешение = Условие["СпецРазрешение"];	
		Если ЗначениеЗаполнено(СпецРазрешение) Тогда
			
			СтруктураСпецРазрешения = Новый Структура;
			СтруктураСпецРазрешения.Вставить("Номер", СпецРазрешение["Номер"]);
			СтруктураСпецРазрешения.Вставить("Срок",  СпецРазрешение["Срок"]);
			СтруктураСпецРазрешения.Вставить("Дата",  ПреобразоватьСтрокуВДату(СпецРазрешение["Дата"]));
			
			РезультатФункции.Добавить(СтруктураСпецРазрешения);
			
		КонецЕсли;
		
		// - Маршрут не обрабатывается
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, СтруктураТС, ДинамическийТитул = Ложь)
	
	Если СтруктураТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураТС.Свойство("Отправитель_ТранспортноеСредство") Тогда
		Если ЗначениеЗаполнено(СтруктураТС.Отправитель_ТранспортноеСредство) Тогда
			ОбъектДок.Отправитель_ТранспортноеСредство = СтруктураТС.Отправитель_ТранспортноеСредство;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураТС.Свойство("Прицепы") Тогда
		Если ДинамическийТитул И ЗначениеЗаполнено(СтруктураТС.Прицепы) Тогда
			ОбъектДок.Прицепы.Очистить();
		КонецЕсли;
		Для Каждого СтруктураПрицепа Из СтруктураТС.Прицепы Цикл
			СтрокаПрицепа = ОбъектДок.Прицепы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПрицепа, СтруктураПрицепа);
		КонецЦикла;
	КонецЕсли;

	Если СтруктураТС.Свойство("СпецРазрешения") Тогда 
		Если ДинамическийТитул И ЗначениеЗаполнено(СтруктураТС.СпецРазрешения) Тогда
			ОбъектДок.СпецРазрешения.Очистить();
		КонецЕсли;
		Для Каждого СтруктураСпецРазрешения Из СтруктураТС.СпецРазрешения Цикл
			СтрокаСпецРазрешения = ОбъектДок.СпецРазрешения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСпецРазрешения, СтруктураСпецРазрешения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеВодителей(ВодителиСОнлайна, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ВодителиСОнлайна) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Для Каждого Водитель Из ВодителиСОнлайна["Водитель"] Цикл 
				
		ДанныеВодителя = ДанныеВодителяДляЗагрузки(Водитель);		
		СсылкаВодитель = СсылкаНаВодителяПослеЗагрузки(ДанныеВодителя, Водитель); 
		Если Не ЗначениеЗаполнено(СсылкаВодитель) Тогда
			// пока выходим, но потом можно игнорить ссылку и брать только простые данные 
			Продолжить;
		Иначе
			
			// Получим данные из справочника
			Если Не ДопПараметры.ЗагрузкаСОнлайна Тогда				
				ДанныеВодителя = ДанныеВодителяПоСсылке(СсылкаВодитель);								
			КонецЕсли;
			
		КонецЕсли;
						
		ДанныеВодителя.Вставить("Водитель", СсылкаВодитель);
		
		ПутевыеЛисты = Новый Массив;
		
		Если ЗначениеЗаполнено(Водитель["ПутевойЛист"]) Тогда
			
			// Создадим новый или найдем существующий путевой лист...				
			ТЗ = ТаблицаДокументовТрН();
			
			НомерСтроки = 0;
			
			ДокументыТрН(
				Водитель["ПутевойЛист"], 
				ТЗ, 
				Перечисления.Saby_ТипыДокумента.ПутевойЛист,
			    НомерСтроки);
				
			// Получим ссылки на существующие и новые документы
			СоответствиеДокументов = НайтиСоздатьДокументТрН(ТЗ);
			
		    // Заполняем данные по документам
			Для Каждого СтрокаДок Из ТЗ Цикл 
				
				СсылкаДок = СоответствиеДокументов.Получить(СтрокаДок.НомерСтроки);
				
				// кидаем все в общий список			
				СтруктураПутевогоЛиста = Новый Структура;
				СтруктураПутевогоЛиста.Вставить("Документ", СсылкаДок);
				
				ПутевыеЛисты.Добавить(СтруктураПутевогоЛиста);
				
			КонецЦикла;				
		
		КонецЕсли;
		
		ДанныеВодителя.Вставить("ПутевыеЛисты", ПутевыеЛисты);
		
		РезультатФункции.Добавить(ДанныеВодителя);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьДанныеВодителей(ОбъектДок, Водители, ДинамическийТитул = Ложь)
	
	КлючСтроки = 1;
	
	Если ДинамическийТитул Тогда
		Если ЗначениеЗаполнено(Водители) Тогда
			ОбъектДок.Водители.Очистить();
		КонецЕсли;
	КонецЕсли;
		
	Для Каждого СтруктураВодителя Из Водители Цикл 
		
		СтрокаВодителя = ОбъектДок.Водители.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВодителя, СтруктураВодителя);
		СтрокаВодителя.КлючСтроки = КлючСтроки;
		
		Если ДинамическийТитул И ЗначениеЗаполнено(СтруктураВодителя.ПутевыеЛисты) Тогда
			СтруктураПоиска = Новый Структура("КлючСтроки_Водители", КлючСтроки);
			СтрокиПутевыхЛистов = ОбъектДок.ПутевыеЛисты.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаПутевогоЛиста Из СтрокиПутевыхЛистов Цикл
				ОбъектДок.ПутевыеЛисты.Удалить(СтрокаПутевогоЛиста);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтруктураПутевогоЛиста Из СтруктураВодителя.ПутевыеЛисты Цикл 
			СтрокаПутевогоЛиста = ОбъектДок.ПутевыеЛисты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПутевогоЛиста, СтруктураПутевогоЛиста);
			СтрокаПутевогоЛиста.КлючСтроки_Водители = КлючСтроки;
		КонецЦикла;				
			
		КлючСтроки = КлючСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовоеТСПрицеп(ТС, ЭтоПрицеп)
	
	УстановитьПривилегированныйРежим(Истина);
		
	ОбъектТС = Справочники.ТранспортныеСредства.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ОбъектТС, ТС);
	
	РегНомер = РегНомерБезЛишнихСимволов(ТС["РегНомер"]);
	
	Если ЕстьРеквизитИлиСвойство("РегистрационныйЗнак", ОбъектТС) Тогда
		ОбъектТС.РегистрационныйЗнак = РегНомер;
		ОбъектТС.УстановитьНовыйКод();
	Иначе 	
		ОбъектТС.Код = РегНомер;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ТС["Название"]) Тогда 
		ОбъектТС.Наименование = ТС["Название"];
	Иначе 
		ОбъектТС.Наименование = ВРег(ТС["РегНомер"]) + ?(ЗначениеЗаполнено(ОбъектТС.Марка), " " + ОбъектТС.Марка, "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТС["ТипВладения"]) Тогда 
		ОбъектТС.ТипВладения = ЗначениеТипВладенияТС(ТС["ТипВладения"], Истина);
	Иначе 
		ОбъектТС.ТипВладения = ЗначениеТипВладенияТС(1); // собственность
	КонецЕсли;
	
	Параметры = ПараметрыСвойстваСКонтролем(ОбъектТС, ТС);
	
	ЗаполнитьСвойствоСКонтролем(Параметры, "ГрузоподъемностьВТоннах",      "Грузоподъемность", Истина);
	ЗаполнитьСвойствоСКонтролем(Параметры, "ВместимостьВКубическихМетрах", "Вместимость",      Истина);
	ЗаполнитьСвойствоСКонтролем(Параметры, "Марка",                        "Марка");
	ЗаполнитьСвойствоСКонтролем(Параметры, "НомерСТС",                     "НомерСТС");
	ЗаполнитьСвойствоСКонтролем(Параметры, "VIN",                          "VIN");
	
	Если ЭтоПрицеп Тогда 
		ОбъектТС.Вид = Перечисления.Saby_ВидыТС.Прицеп;
	Иначе
		ОбъектТС.Вид = Перечисления.Saby_ВидыТС.Автомобиль;
	КонецЕсли;
	
	Тип = ТС["Тип"];
	Если ЗначениеЗаполнено(Тип) Тогда 
		
		Если ТипЗнч(ОбъектТС.Тип) = Тип("Строка") Тогда
			ОбъектТС.Тип = Тип;
		Иначе 	
			
			// Ссылка на справочник			
			СсылкаТипТС = Справочники.ТипыТранспортныхСредств.НайтиПоНаименованию(Тип, Истина);
			Если Не ЗначениеЗаполнено(СсылкаТипТС) Тогда 
				
				// Создадим новую запись
				ТипТС = Справочники.ТипыТранспортныхСредств.СоздатьЭлемент();
				ТипТС.Наименование = Тип;
				
				ТипТС.Записать();			
				
				СсылкаТипТС = ТипТС.Ссылка; 
				
			КонецЕсли;
			
			ОбъектТС.Тип = СсылкаТипТС;
			
		КонецЕсли;	
				 		
	КонецЕсли;	
	
	// Документы владения
	ТЗ = ТаблицаДокументовТрН();
	
	// Подготовка данных для поиска всех документов владения ТС 
	НомерСтроки = 0; 
	
	ОснованиеВладения = ТС["ОснованиеВладения"];
	Если ЗначениеЗаполнено(ОснованиеВладения) Тогда  
		
		Для Каждого ДокументВладения Из ОснованиеВладения Цикл
			
			НС = ТЗ.Добавить();
			Тип = Перечисления.Saby_ТипыДокумента.ПодтверждениеВладения;
			ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, ДокументВладения, Тип, НомерСтроки);
 			
		КонецЦикла;
		
		// Получим ссылки на существующие и новые документы
		СоответствиеДокументов = НайтиСоздатьДокументТрН(ТЗ);
		
		// Заполняем данные
		Для Каждого СтрокаДок Из ТЗ Цикл 
			
			НС = ОбъектТС.ДокументыПодтверждающиеВладение.Добавить();
			НС.ДокументВладения = СоответствиеДокументов.Получить(СтрокаДок.НомерСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбъектТС.Записать();
	
	Возврат ОбъектТС.Ссылка;
	
КонецФункции

Функция НовоеФизЛицо(Данные, Наименование, Водитель = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектФЛ = Справочники.ФизическиеЛица.СоздатьЭлемент();
	ОбъектФЛ.Наименование = Наименование;
	
	// В УТ11 нет реквизитов
	Если ЕстьРеквизитИлиСвойство("ФИО", ОбъектФЛ) Тогда  
		
		ОбъектФЛ.ФИО          = Наименование;		
		ОбъектФЛ.Фамилия      = Данные["Фамилия"];
		ОбъектФЛ.Имя          = Данные["Имя"];
		ОбъектФЛ.Отчество     = Данные["Отчество"];
		
	КонецЕсли;
		
	// Телефоны                             
	Телефоны = Данные["Телефон"]; 
	Если Водитель И ЗначениеЗаполнено(Телефоны) Тогда 
		
		Для Каждого Телефон Из Телефоны Цикл 
			
			НС = ОбъектФЛ.КонтактнаяИнформация.Добавить();
			НС.Тип           = Перечисления.ТипыКонтактнойИнформации.Телефон;
			НС.Вид           = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
			НС.Представление = Телефон["Значение"];
			НС.НомерТелефона = Телефон["Значение"];
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбъектФЛ.Записать();
	
	Ссылка = ОбъектФЛ.Ссылка; 
	Если Не Водитель Тогда
		// не нужна дальнейшая обработка
		Возврат Ссылка;
	КонецЕсли;
	
	// История ФИО
	Если ЗначениеЗаполнено(Данные["Фамилия"]) Тогда 
		
		МенеджерЗаписи = РегистрыСведений.ФИОФизическихЛиц.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Активность     = Истина;
		МенеджерЗаписи.Период         = ТекущаяДатаСеанса();
		МенеджерЗаписи.ФизическоеЛицо = Ссылка;
		МенеджерЗаписи.Фамилия        = Данные["Фамилия"];
		МенеджерЗаписи.Имя            = Данные["Имя"];
		МенеджерЗаписи.Отчество       = Данные["Отчество"];
		
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
		
	// ВУ                   
	ВУ = Данные["ВУ"];
	Если ЗначениеЗаполнено(ВУ) Тогда 
		
		МенеджерЗаписи = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Активность   = Истина;
		МенеджерЗаписи.Период       = ТекущаяДатаСеанса();
		МенеджерЗаписи.Физлицо      = Ссылка;
		МенеджерЗаписи.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение;		
		МенеджерЗаписи.Серия        = ВУ["Серия"];		
		МенеджерЗаписи.Номер        = ВУ["Номер"];                    
		
		Если ЗначениеЗаполнено(ВУ["ДатаВыдачи"]) Тогда 
			МенеджерЗаписи.ДатаВыдачи = ПреобразоватьСтрокуВДату(ВУ["ДатаВыдачи"]);
		КонецЕсли;
		
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция СсылкаНаВодителяПослеЗагрузки(Данные, Водитель)
	
	Ссылка = Неопределено;
	
	Если Не ЗначениеЗаполнено(Данные.Наименование) Тогда
		Возврат Ссылка;
	КонецЕсли;
			
	// 1. По ИНН
	Если ЗначениеЗаполнено(Данные.ИНН) Тогда
		Ссылка = Справочники.ФизическиеЛица.НайтиПоРеквизиту("ИНН", Данные.ИНН);
	КонецЕсли;
	
	// 2. Поиск по Номеру ВУ
	Если Не ЗначениеЗаполнено(Ссылка)
		И ЗначениеЗаполнено(Данные.НомерВУ) Тогда
				
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номер", Данные.НомерВУ);
		Запрос.УстановитьПараметр("Вид",   Справочники.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение);
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументыФизическихЛицСрезПоследних.Физлицо КАК Физлицо
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			,
		|			ВидДокумента = &Вид
		|				И Номер = &Номер) КАК ДокументыФизическихЛицСрезПоследних";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Ссылка = Выборка.Физлицо;
		КонецЦикла;
		
	КонецЕсли;
	
	// 3. По наименованию
	Если Не ЗначениеЗаполнено(Ссылка) Тогда		
		Ссылка = Справочники.ФизическиеЛица.НайтиПоНаименованию(Данные.Наименование, Истина);
	КонецЕсли;
	
	// 4. Создадим водителя
	Если Не ЗначениеЗаполнено(Ссылка) Тогда		
		Ссылка = НовоеФизЛицо(Водитель, Данные.Наименование);
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция ДанныеВодителяДляЗагрузки(Водитель)
	
	ДанныеВодителя = Новый Структура;
	ДанныеВодителя.Вставить("Фамилия",      "");
	ДанныеВодителя.Вставить("Имя",          "");
	ДанныеВодителя.Вставить("Отчество",     "");
	ДанныеВодителя.Вставить("ИНН",          "");
	ДанныеВодителя.Вставить("СерияВУ",      "");
	ДанныеВодителя.Вставить("НомерВУ",      "");
	ДанныеВодителя.Вставить("ДатаВыдачиВУ", "");
	ДанныеВодителя.Вставить("Телефон",      Новый Массив);	
	ДанныеВодителя.Вставить("Телефоны",     "");
	
	Параметры = ПараметрыСвойстваСКонтролем(ДанныеВодителя, Водитель);	
	ЗаполнитьСвойствоСКонтролем(Параметры, "Фамилия");
	ЗаполнитьСвойствоСКонтролем(Параметры, "Имя");
	ЗаполнитьСвойствоСКонтролем(Параметры, "Отчество");
	ЗаполнитьСвойствоСКонтролем(Параметры, "ИНН");
	ЗаполнитьСвойствоСКонтролем(Параметры, "Телефон");
	
	ВУ = Водитель["ВУ"];
	Если ЗначениеЗаполнено(ВУ) Тогда 
		Параметры.Источник = ВУ;
		ЗаполнитьСвойствоСКонтролем(Параметры, "СерияВУ", "Серия");
		ЗаполнитьСвойствоСКонтролем(Параметры, "НомерВУ", "Номер");
		ЗаполнитьСвойствоСКонтролем(Параметры, "ДатаВыдачиВУ", "ДатаВыдачи");
		Если ЗначениеЗаполнено(ДанныеВодителя.ДатаВыдачиВУ) Тогда 
			ДанныеВодителя.ДатаВыдачиВУ = ПреобразоватьСтрокуВДату(ДанныеВодителя.ДатаВыдачиВУ); 
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Водитель["ФИО"]) Тогда
		Наименование = Водитель["ФИО"];
	Иначе
		
		Массив = Новый Массив;
		Массив.Добавить(ДанныеВодителя.Фамилия);
		Массив.Добавить(ДанныеВодителя.Имя);
	    Массив.Добавить(ДанныеВодителя.Отчество);
		
		Наименование = СокрЛП(СтрСоединить(Массив, " "));
		
	КонецЕсли;
	
	ДанныеВодителя.Вставить("Наименование", Наименование);
	Если ЗначениеЗаполнено(ДанныеВодителя.Телефон) Тогда
		
		МассивТелефонов = Новый Массив;
		Для Каждого Телефон Из ДанныеВодителя.Телефон Цикл  
			МассивТелефонов.Добавить(Телефон["Значение"]);
		КонецЦикла;
		
		ДанныеВодителя.Телефоны = ЗначениеВСтрокуВнутр(МассивТелефонов);
		
	КонецЕсли;
		
	Возврат ДанныеВодителя;
	
КонецФункции

#КонецОбласти // ЗагрузкаТСиВодители

#Область ЗагрузкаДокументыТрН

Функция НайтиСоздатьДокументТрН(ТЗДокументы)
	
	Если Не ЗначениеЗаполнено(ТЗДокументы) Тогда 
		Возврат Неопределено;
	КонецЕсли;
		
	НайденныеДокументы = НайтиДокументыТрН(ТЗДокументы);
	Для Каждого СтрокаДок Из ТЗДокументы Цикл 						
		
		Ссылка = НайденныеДокументы.Получить(СтрокаДок.НомерСтроки);
		Если Не ЗначениеЗаполнено(Ссылка) Тогда 
			НовыйДок = НовыйДокументТрН(СтрокаДок);
			НайденныеДокументы.Вставить(СтрокаДок.НомерСтроки, НовыйДок);
		КонецЕсли;
			
	КонецЦикла;	

	Возврат НайденныеДокументы;
	
КонецФункции

Функция ТаблицаДокументовТрН()
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номер",        Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная)));
	ТЗ.Колонки.Добавить("Дата",         Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТЗ.Колонки.Добавить("ТипДок",       Новый ОписаниеТипов("ПеречислениеСсылка.Saby_ТипыДокумента"));
	ТЗ.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная))); 
	ТЗ.Колонки.Добавить("Стороны",      Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная))); 	
	ТЗ.Колонки.Добавить("НомерСтроки",  Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Любой)));
		
	Возврат ТЗ;
	
КонецФункции

Функция НайтиДокументыТрН(ТЗ)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ", ТЗ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.Номер КАК Номер,
	|	ТЗ.Дата КАК Дата,
	|	ТЗ.ТипДок КАК ТипДок,
	|	ТЗ.НомерСтроки КАК НомерСтроки,
	|	ТЗ.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номер,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Номер КАК Номер,
	|	ВТ.Дата КАК Дата,
	|	ВТ.ТипДок КАК Тип,
	|	ВТ.Наименование КАК Наименование,
	|	ВТ.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(ЕСТЬNULL(Saby_ДокументыТрН.Ссылка, НЕОПРЕДЕЛЕНО)) КАК Ссылка
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Saby_ДокументыТрН КАК Saby_ДокументыТрН
	|		ПО ВТ.Номер = Saby_ДокументыТрН.Номер
	|			И ВТ.Дата = Saby_ДокументыТрН.Дата
	|			И ВТ.ТипДок = Saby_ДокументыТрН.Тип
	|			И ВТ.Наименование = Saby_ДокументыТрН.Наименование
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Номер,
	|	ВТ.Дата,
	|	ВТ.ТипДок,
	|	ВТ.Наименование,
	|	ВТ.НомерСтроки";	

	Выборка = Запрос.Выполнить().Выбрать();
	
	Соответствие = Новый Соответствие;
	Пока Выборка.Следующий() Цикл 				
		Соответствие.Вставить(Выборка.НомерСтроки, Выборка.Ссылка);		
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

Функция НовыйДокументТрН(Данные)
	
	УстановитьПривилегированныйРежим(Истина);
		
	ОбъектДокТрН = Справочники.Saby_ДокументыТрН.СоздатьЭлемент();	
	ЗаполнитьЗначенияСвойств(ОбъектДокТрН, Данные);
		
	Стороны = ЗначениеИзСтрокиВнутр(Данные.Стороны);
	
	Если ЗначениеЗаполнено(Стороны) Тогда 
		Для Каждого Сторона Из Стороны Цикл
			НС = ОбъектДокТрН.Стороны.Добавить();
			НС.Сторона = ПолучитьЮрЛицо(Сторона, Истина);		
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокТрН.Наименование) Тогда 
		ОбъектДокТрН.Наименование = "№" + Данные.Номер + " от " + Данные.Дата;
	КонецЕсли;	
			
	ОбъектДокТрН.Тип = Данные.ТипДок;
	
	ОбъектДокТрН.Записать();
	
	Возврат ОбъектДокТрН.Ссылка;
	
КонецФункции

Процедура ЗаполнитьДанныеДокументовТрН(ОбъектДок, ДанныеДокументов)
	
	Если Не ЗначениеЗаполнено(ДанныеДокументов) Тогда 
		Возврат;
	КонецЕсли;
		
	ТЗ = ТаблицаДокументовТрН();
		
	СопроводВедомость = ДанныеДокументов["Ведомость"];
	Груз              = ДанныеДокументов["Груз"]; 
	Отгрузка          = ДанныеДокументов["Отгрузка"]; 	
	ТранспНакладная   = ДанныеДокументов["ТранспортнаяНакладная"];
	ДоговорПеревозки  = ДанныеДокументов["ДоговорНаУслугиПеревозки"];
	
	// ToDo: когда-нибудь понадобится. Сделана заготовка в формате под будущий функционал... 
	// Расчет перевозки пока не нужен
	
	НомерСтроки = 0;
		
	// СопроводительнаяВедомость
	Если ЗначениеЗаполнено(СопроводВедомость) Тогда 
		НС = ТЗ.Добавить();
		Тип = Перечисления.Saby_ТипыДокумента.СопроводительнаяВедомость;
		ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, СопроводВедомость, Тип, НомерСтроки);
	КонецЕсли;
	
	// УслугиПеревозки
	Если ЗначениеЗаполнено(ДоговорПеревозки) Тогда 
		НС = ТЗ.Добавить();	
		Тип = Перечисления.Saby_ТипыДокумента.ДоговорПеревозки;
		ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, ДоговорПеревозки, Тип, НомерСтроки);
	КонецЕсли;
	
	// Груз	
	ДокументыТрН(
		Груз, 
		ТЗ, 
		Перечисления.Saby_ТипыДокумента.КГрузу,
		НомерСтроки);
	
	// Отгрузка - Передача ценностей	
	ДокументыТрН(
		Отгрузка, 
		ТЗ, 
		Перечисления.Saby_ТипыДокумента.ПередачиЦенностей,
		НомерСтроки);	
	
	// ТрН	
	ДокументыТрН(
		ТранспНакладная, 
		ТЗ, 
		Перечисления.Saby_ТипыДокумента.КТранспортнойНакладной,
		НомерСтроки);	
	
	// За 1 раз
	// Получим ссылки на существующие и новые документы
	СоответствиеДокументов = НайтиСоздатьДокументТрН(ТЗ);
	
	// Заполняем данные по документам
	Для Каждого СтрокаДок Из ТЗ Цикл 
		
		СсылкаДок = СоответствиеДокументов.Получить(СтрокаДок.НомерСтроки);
						
		Если СтрокаДок.ТипДок = Перечисления.Saby_ТипыДокумента.СопроводительнаяВедомость Тогда 
			
			ОбъектДок.Отправитель_СопроводительнаяВедомость = СсылкаДок; 
			
		ИначеЕсли СтрокаДок.ТипДок = Перечисления.Saby_ТипыДокумента.ДоговорПеревозки Тогда 
			
			ОбъектДок.Заказчик_Договор = СсылкаДок;
			
		Иначе 	
			
			// кидаем все в общий список			
			НСДок = ОбъектДок.СопроводительныеДокументы.Добавить();
			НСДок.СопроводительныйДокумент = СсылкаДок;
			
		КонецЕсли;
					
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(Строка, Данные, Тип, НомерСтроки = 0)
	
	НомерСтроки = НомерСтроки + 1;
	
	Строка.Наименование = СокрЛП(Данные["Наименование"]);
	Строка.Номер        = СокрЛП(Данные["Номер"]);
	Строка.Дата         = ПреобразоватьСтрокуВДату(Данные["Дата"]);
	Строка.ТипДок       = Тип;
	Строка.Стороны      = ЗначениеВСтрокуВнутр(Данные["Стороны"]);
	Строка.НомерСтроки  = НомерСтроки;
	
КонецПроцедуры	

Процедура ДокументыТрН(Массив, ТЗ, Тип, НомерСтроки)
	
	Если Не ЗначениеЗаполнено(Массив) Тогда 
		Возврат;
	КонецЕсли;
		
	Для Каждого Док Из Массив Цикл  
		НС = ТЗ.Добавить();	
		ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, Док, Тип, НомерСтроки);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти // ЗагрузкаДокументыТрН

// + Виды Упаковки

#Область ЗагрузкаГруза

Процедура ЗаполнитьДанныеПоГрузам(ОбъектДок, ДанныеГруз)
	
	Если Не ЗначениеЗаполнено(ДанныеГруз) Тогда
		Возврат;
	КонецЕсли;
		
	Стоимость = ДанныеГруз["Стоимость"];
	Если ЗначениеЗаполнено(Стоимость) Тогда
		Валюта = Стоимость["Валюта"];
		Если ЗначениеЗаполнено(Валюта) Тогда 
			ОбъектДок.Валюта = Справочники.Валюты.НайтиПоКоду(Валюта["Код"]);
		Иначе 
			ОбъектДок.Валюта = Справочники.Валюты.НайтиПоКоду("643");
		КонецЕсли;
	КонецЕсли;
	
	МаксКлюч = 1; 
	
	Позиции = ДанныеГруз["Позиция"];	
	Если ЗначениеЗаполнено(Позиции) Тогда 
							
		Для Каждого Груз Из Позиции Цикл 
			
			НС = ОбъектДок.Грузы.Добавить();				
			
			НС.КлючСтроки = МаксКлюч; 
			//НС.Валюта     = ОбъектДок.Валюта;
			
			Параметры = ПараметрыСвойстваСКонтролем(НС, Груз);
			ЗаполнитьСвойствоСКонтролем(Параметры, "СпособУпаковки", "Упаковка");				
			ЗаполнитьСвойствоСКонтролем(Параметры, "Примечание",     "ДопИнформация");
			ЗаполнитьСвойствоСКонтролем(Параметры, "Состояние");
			ЗаполнитьСвойствоСКонтролем(Параметры, "Наименование"); 
			
			// Параметры груза
			ПараметрыГруза = Груз["Параметры"];
			Если ЗначениеЗаполнено(ПараметрыГруза) Тогда
				
				Параметры.Источник = ПараметрыГруза;
				
				ЗаполнитьСвойствоСКонтролем(Параметры, "Количество",      "КоличествоМест", Истина);
				ЗаполнитьСвойствоСКонтролем(Параметры, "КоличествоПаллет",, Истина);
				
				ЗаполнитьСвойствоСКонтролем(Параметры, "Длина",,  Истина);
				ЗаполнитьСвойствоСКонтролем(Параметры, "Высота",, Истина);
				ЗаполнитьСвойствоСКонтролем(Параметры, "Ширина",, Истина);
				ЗаполнитьСвойствоСКонтролем(Параметры, "Объем",,  Истина);
				
				МассаГруза = ПараметрыГруза["Масса"];
				Если ЗначениеЗаполнено(МассаГруза) Тогда 
					
					Параметры.Источник = МассаГруза; 
					ЗаполнитьСвойствоСКонтролем(Параметры, "МассаБрутто", "Брутто");
					ЗаполнитьСвойствоСКонтролем(Параметры, "МассаНетто",  "Нетто");
					
				КонецЕсли;					
				
			КонецЕсли;
			
			Стоимость = Груз["Стоимость"];
			Если ЗначениеЗаполнено(Стоимость) Тогда 					
				
				НС.Стоимость = ЧислоИзСтроки(Стоимость["ВключаяНДС"]);
				Валюта = Стоимость["Валюта"];
				Если ЗначениеЗаполнено(Валюта) Тогда 
					НС.Валюта = Справочники.Валюты.НайтиПоКоду(Валюта["Код"]);
				Иначе 
					НС.Валюта = Справочники.Валюты.НайтиПоКоду("643");
				КонецЕсли;
				
			КонецЕсли;
			
			// ЗаполнитьСвойствоСКонтролем(Параметры, "КодНоменклатуры"
			// "УчетГИС"
			
			ТараКод = Груз["ТараКод"];
			Если ЗначениеЗаполнено(ТараКод) Тогда															
				НС.ВидТары = НайтиСоздатьВидУпаковки(ТараКод);  			
			КонецЕсли;		
			
			Контейнеры = Груз["Контейнер"];
			Если ЗначениеЗаполнено(Контейнеры) Тогда 
				
				НС.Тип = Перечисления.Saby_ТипГруза.Контейнер;
				
				// Контейнеры
				Для Каждого Контейнер Из Контейнеры Цикл						
					Для Каждого СтрокаКонт Из Контейнер["Номер"] Цикл								
						
						НСКонт = ОбъектДок.Контейнеры.Добавить();
						НСКонт.Номер            = СтрокаКонт["Значение"];
						НСКонт.КлючСтроки_Грузы = МаксКлюч;
						
						Если ЗначениеЗаполнено(Контейнер["Количество"]) Тогда 
							НСКонт.Количество = ЧислоИзСтроки(Контейнер["Количество"]);
						Иначе 
							НСКонт.Количество = 1;
						КонецЕсли;	
						
					КонецЦикла;						
				КонецЦикла;
				
			Иначе			
				НС.Тип = Перечисления.Saby_ТипГруза.Груз;			
			КонецЕсли;
			
			// Маркировки
			Маркировка = Груз["Маркировка"];
			Если ЗначениеЗаполнено(Маркировка) Тогда
				Для Каждого СтрокаМарк Из Маркировка Цикл
					
					НСМарк = ОбъектДок.Маркировки.Добавить();
					НСМарк.Значение         = СтрокаМарк["Значение"]; 
					НСМарк.КлючСтроки_Грузы = МаксКлюч;
					
				КонецЦикла;
			КонецЕсли;
			
			// Опасные грузы 
			ОпасныйГруз = Груз["ОпасныйГруз"]; 			
			Если ЗначениеЗаполнено(ОпасныйГруз) Тогда 
				Для Каждого СтрокаОпасн Из ОпасныйГруз Цикл
					
					ОпасныйГруз = ОпасныйГруз(СтрокаОпасн);
					Если Не ЗначениеЗаполнено(ОпасныйГруз) Тогда 
						Продолжить;
					КонецЕсли;
					
					НСОпаснГр = ОбъектДок.ОпасныеГрузы.Добавить();
					НСОпаснГр.КлючСтроки_Грузы = МаксКлюч; 
					НСОпаснГр.ОпасныйГруз      = ОпасныйГруз(СтрокаОпасн);
					
				КонецЦикла;				 
			КонецЕсли;
			
			// Сведения гос систем 
			СведенияГИС = Груз["СведенияГИС"];
			Если ЗначениеЗаполнено(СведенияГИС) Тогда  
				
				// пишем в Груз
				НС.НаименованиеГосСистемы   = СведенияГИС["Наименование"]; 
				НС.УчетнаяЕдиницаГосСистемы = СведенияГИС["УчетнаяЕдиница"];
				НС.ИнаяИнформацияГосСистемы = СведенияГИС["ДругаяИнформация"];
				
				Для Каждого СтрокаГос Из СведенияГИС["Идентификатор"] Цикл	
										
					НСГос = ОбъектДок.СведенияГосСистем.Добавить();					
					НСГос.КлючСтроки_Грузы = МаксКлюч;
					НСГос.Идентификатор    = СтрокаГос["Значение"];
					
				КонецЦикла;	
				
			КонецЕсли;
			
			МаксКлюч = МаксКлюч + 1;
			
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиСоздатьВидУпаковки(Код)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаВидУпаковки = Справочники.Saby_ВидыУпаковки.НайтиПоКоду(Код);
	Если Не ЗначениеЗаполнено(СсылкаВидУпаковки) Тогда 		
		
		ОбъектВидУпаковки = Справочники.Saby_ВидыУпаковки.СоздатьЭлемент();
		ОбъектВидУпаковки.Код          = Код;
		ОбъектВидУпаковки.Наименование = Код;
		
		ОбъектВидУпаковки.Записать();
		
		СсылкаВидУпаковки  = ОбъектВидУпаковки.Ссылка;
		
	КонецЕсли;
	
	Возврат СсылкаВидУпаковки;
	
КонецФункции
	
Функция ОпасныйГруз(СтрокаОпасн)
	
	СсылкаОГ = Справочники.Saby_ОпасныеГрузы.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(СтрокаОпасн) 
		Или Не ЗначениеЗаполнено(СтрокаОпасн["Наименование"]) Тогда 
		Возврат СсылкаОГ;
	КонецЕсли;	
			
	// поиск существующей записи 
	Наименование = СтрокаОпасн["Наименование"];
	
	// 1 поиск по наименованию
	СсылкаОГ = Справочники.Saby_ОпасныеГрузы.НайтиПоНаименованию(Наименование["Отгрузочное"]); 
	// 2 поиск по тех наименованию
	Если Не ЗначениеЗаполнено(СсылкаОГ) Тогда 
		СсылкаОГ = Справочники.Saby_ОпасныеГрузы.НайтиПоРеквизиту("ТехническоеНаименование",Наименование["Техническое"]); 
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаОГ) Тогда 
		
		ОбъектОГ = Справочники.Saby_ОпасныеГрузы.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ОбъектОГ, СтрокаОпасн); 
		
		ОбъектОГ.УстановитьНовыйКод();
		ОбъектОГ.Наименование            = Наименование["Отгрузочное"];
		ОбъектОГ.ПолноеНаименование      = Наименование["Отгрузочное"];
		ОбъектОГ.ТехническоеНаименование = Наименование["Техническое"];
		
		Если ЗначениеЗаполнено(СтрокаОпасн["Класс"]) Тогда
			ОбъектОГ.Класс = ЗначениеКлассОпасности(СтрокаОпасн["Класс"], Истина);
		КонецЕсли;
		
		Упаковка = СтрокаОпасн["Упаковка"];
		Если ЗначениеЗаполнено(Упаковка) Тогда
			
			ОбъектОГ.ГруппаУпаковки         = Упаковка["Группа"];
			ОбъектОГ.КатегорияУпаковки      = Упаковка["Категория"];
			ОбъектОГ.ГруппаУпаковкиЗначение = ЗначениеГруппыУпаковки(Упаковка["Группа"], Истина);
			
		КонецЕсли;
				
		// приходит вобще не то...
		// Ограничение = СтрокаОпасн["КодОграничения"];
		// Если ЗначениеЗаполнено(Ограничение) Тогда 
		//	
		//	 ОбъектОГ.ОграничениеПроездаЧерезТуннели = 
		//		Перечисления.Saby_КодыОграниченийПроездаЧерезТуннели[Ограничение["ПроездТуннеля"]];
		//	
		// КонецЕсли;
		
		Температура = СтрокаОпасн["Температура"];
		Если ЗначениеЗаполнено(Температура) Тогда 
			
			ОбъектОГ.КонтрольнаяТемпература = Температура["Контрольная"];
			ОбъектОГ.АварийнаяТемпература   = Температура["Аварийная"];
			
		КонецЕсли;		
		
		Радиоактивный = СтрокаОпасн["Радиоактивный"];
		Если ЗначениеЗаполнено(Радиоактивный) Тогда
			
			ОбъектОГ.НазваниеРадионуклида = Радиоактивный["Радионуклид"];
			ОбъектОГ.ПолнаяАктивность     = Радиоактивный["ПолнаяАктивность"];
			ОбъектОГ.МаксАктивность       = Радиоактивный["МаксАктивность"];
			
		КонецЕсли;		
		
		Взрывчатый = СтрокаОпасн["Взрывчатый"];
		Если ЗначениеЗаполнено(Взрывчатый) Тогда 
			
			ОбъектОГ.МассаНеттоВзрывчатый      = Взрывчатый["МассаНетто"];
			ОбъектОГ.МассаНеттоВзрывчатыйВсего = Взрывчатый["МассаНеттоДляВсех"];
						
		КонецЕсли;		
		
		Параметры = ПараметрыСвойстваСКонтролем(ОбъектОГ, СтрокаОпасн);
		ЗаполнитьСвойствоСКонтролем(Параметры, "НомерООН",            "НомерООН");
		ЗаполнитьСвойствоСКонтролем(Параметры, "ФизИХимФорма",        "ФизХимФорма");
		ЗаполнитьСвойствоСКонтролем(Параметры, "ТранспортныйИндекс",  "ТранспортныйИндекс"); 	
		ЗаполнитьСвойствоСКонтролем(Параметры, "ЗнакОпасности",       "ЗнакОпасности");	
		ЗаполнитьСвойствоСКонтролем(Параметры, "ИндексБезопасности",  "ИндексБезопасности");
		ЗаполнитьСвойствоСКонтролем(Параметры, "ОпознавательныйЗнак", "ОпознавательныйЗнак");
		ЗаполнитьСвойствоСКонтролем(Параметры, "ПроцентСмеси",        "ПроцентныйСоставСмеси");
		ЗаполнитьСвойствоСКонтролем(Параметры, "Комментарий",         "Описание");
		ЗаполнитьСвойствоСКонтролем(Параметры, "КлассификационныйКод","КлассификационныйКод"); 
		
		ОбъектОГ.Записать();
		
		СсылкаОГ = ОбъектОГ.Ссылка;
		
	КонецЕсли;
	
	Возврат СсылкаОГ;
	
КонецФункции

#КонецОбласти // ЗагрузкаГруза

#Область ЗагрузкаОтметок

Функция ДанныеПоОтметкам(ОтметкиСОнлайна, Титул)
	
	РезультатФункции = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ОтметкиСОнлайна) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	ЗначениеРоли = ЗначениеРолиПоТекущемуТитулу(Титул);
	
	Для Каждого Отметка Из ОтметкиСОнлайна["Отметка"] Цикл
		
		СтруктураОтметки = Новый Структура;
		
		СтруктураОтметки.Вставить("Описание",  Отметка["Описание"]);
		СтруктураОтметки.Вставить("ДатаВремя", ПреобразоватьСтрокуВДату(Отметка["ДатаВремя"]["Значение"]));
		СтруктураОтметки.Вставить("Этап",      Титул);
		СтруктураОтметки.Вставить("Роль",      ЗначениеРоли);

		СтруктураОтметки.Вставить("Штрафы",    ДанныеШтрафовПоОтметкам(Отметка["Штрафы"]));
		СтруктураОтметки.Вставить("Акты",      ДанныеАктовПоОтметкам(Отметка["АктыВзвешивания"], Отметка["Акты"]));
		
		РезультатФункции.Добавить(СтруктураОтметки);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеШтрафовПоОтметкам(ШтрафыСОнлайна)
	
	РезультатФункции = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ШтрафыСОнлайна) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Для Каждого Штраф Из ШтрафыСОнлайна Цикл 
		
		СтруктураШтрафа = Новый Структура;
		// ToDo:  Валюта 
		СтруктураШтрафа.Вставить("Количество", Штраф["Количество"]);
		СтруктураШтрафа.Вставить("Сумма",      Штраф["Итог"]);
		СтруктураШтрафа.Вставить("Расчет",     Штраф["Расчет"]);
		
		РезультатФункции.Добавить(СтруктураШтрафа);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеАктовПоОтметкам(АктыВзвешиванияСОнлайна, АктыКоммерческиеСОнлайна)
	
	РезультатФункции = Новый Массив;
	
	НомерСтроки = 0;
		
	ТаблицаАктов = ТаблицаДокументовТрН();
	
	ДокументыТрН(
		АктыВзвешиванияСОнлайна, 
		ТаблицаАктов, 
		Перечисления.Saby_ТипыДокумента.АктВзвешивания,
	    НомерСтроки);
	
	ДокументыТрН(
		АктыКоммерческиеСОнлайна, 
		ТаблицаАктов, 
		Перечисления.Saby_ТипыДокумента.АктКоммерческий,
	    НомерСтроки);
	
	// Получим ссылки на существующие и новые документы СправочникСсылка.Saby_ДокументыТрН
	СоответствиеДокументов = НайтиСоздатьДокументТрН(ТаблицаАктов);
	
	Для Каждого СтрокаАкта Из ТаблицаАктов Цикл
		
		СсылкаНаСправочник = СоответствиеДокументов.Получить(СтрокаАкта.НомерСтроки);
		
		СтруктураАкта = Новый Структура;
		СтруктураАкта.Вставить("Документ", СсылкаНаСправочник);
		
		РезультатФункции.Добавить(СтруктураАкта);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьДанныеПоОтметкам(ОбъектДок, Отметки, Титул)
	
	КлючСтроки   = МаксимальныйКлючОтметки(ОбъектДок.Отметки);
	ЗначениеРоли = ЗначениеРолиПоТекущемуТитулу(Титул);
	
	ЗачисткаОтметокШтрафовАктов(ОбъектДок, Титул, ЗначениеРоли);
	
	Для Каждого СтруктураОтметки Из Отметки Цикл
		
		СтрокаОтметки = ОбъектДок.Отметки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОтметки, СтруктураОтметки);
		СтрокаОтметки.КлючСтроки = КлючСтроки;
		
		Для Каждого СтруктураШтрафа Из СтруктураОтметки.Штрафы Цикл
			СтрокаШтрафа = ОбъектДок.Штрафы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаШтрафа, СтруктураШтрафа);
			СтрокаШтрафа.КлючСтроки_Отметки = КлючСтроки;
		КонецЦикла;
		
		Для Каждого СтруктураАкта Из СтруктураОтметки.Акты Цикл
			СтрокаАкта = ОбъектДок.Акты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаАкта, СтруктураАкта);
			СтрокаАкта.КлючСтроки_Отметки = КлючСтроки;
		КонецЦикла;
		
		КлючСтроки = КлючСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоОтметкамДокумента(ОбъектДок, Отметки, Титул)
	
	// ToDo: Возможно понадобится фильтр по этапам...
	// очистка отметок и штрафов
	
	Если Не ЗначениеЗаполнено(Отметки) Тогда 
		Возврат;
	КонецЕсли;
		
	МаксКлюч = МаксимальныйКлючОтметки(ОбъектДок.Отметки);
		
	ЗначениеРоли = ЗначениеРолиПоТекущемуТитулу(Титул);
	
	// Находим строки В отметках к текущему титулу
	// чистим отметки штрафы и акты	       	
	ЗачисткаОтметокШтрафовАктов(ОбъектДок, Титул, ЗначениеРоли);
	
	Для Каждого Отметка Из Отметки["Отметка"] Цикл
		
		НС = ОбъектДок.Отметки.Добавить();
		
		НС.Описание   = Отметка["Описание"];
		НС.ДатаВремя  = ПреобразоватьСтрокуВДату(Отметка["ДатаВремя"]["Значение"]);		
		НС.КлючСтроки = МаксКлюч;		
		НС.Этап       = Титул;
		НС.Роль       = ЗначениеРоли;
		
		// Штрафы           
		Штрафы = Отметка["Штрафы"];
		Если ЗначениеЗаполнено(Штрафы) Тогда 
			Для Каждого Штраф Из Штрафы Цикл 
				
				НСШтраф = ОбъектДок.Штрафы.Добавить();
				// ToDo:  Валюта 				
				НСШтраф.Количество = Штраф["Количество"];
				НСШтраф.Сумма      = Штраф["Итог"];
				НСШтраф.Расчет     = Штраф["Расчет"];
				
				НСШтраф.КлючСтроки_Отметки = МаксКлюч; 
				
			КонецЦикла;
		КонецЕсли;
			
		НомерСтроки = 0;
		
		ТЗ = ТаблицаДокументовТрН();
		
		// Акты взвешивания  		
		ДокументыТрН(
			Отметка["АктыВзвешивания"], 
			ТЗ, 
			Перечисления.Saby_ТипыДокумента.АктВзвешивания,
		    НомерСтроки);
		
		// Акты коммерческие
		ДокументыТрН(
			Отметка["Акты"], 
			ТЗ, 
			Перечисления.Saby_ТипыДокумента.АктКоммерческий,
		    НомерСтроки);
		
		// Получим ссылки на существующие и новые документы
		СоответствиеДокументов = НайтиСоздатьДокументТрН(ТЗ);
		
		// Заполняем данные по документам
		Для Каждого СтрокаДок Из ТЗ Цикл 
			
			СсылкаДок = СоответствиеДокументов.Получить(СтрокаДок.НомерСтроки);
			
			// кидаем все в общий список			
			НСДок = ОбъектДок.Акты.Добавить();
			НСДок.КлючСтроки_Отметки = МаксКлюч;
			НСДок.Документ           = СсылкаДок;
			
		КонецЦикла;
		
		МаксКлюч = МаксКлюч + 1;
		
	КонецЦикла;
		
КонецПроцедуры

Функция МаксимальныйКлючОтметки(Отметки)
	
	// брать из последней записи будет не корректно
	МаксНомер = 0;
	Для Каждого Отметка Из Отметки Цикл
		МаксНомер = Макс(МаксНомер, Отметка.КлючСтроки); 
	КонецЦикла;	
	
	Возврат МаксНомер + 1;
	
КонецФункции	

Функция ЗначениеРолиПоТекущемуТитулу(Титул)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.Погрузка, 
		Перечисления.Saby_РолиКонтрагентов.Отправитель);
	
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.ПолучениеГруза, 
		Перечисления.Saby_РолиКонтрагентов.Перевозчик);
	
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза, 
		Перечисления.Saby_РолиКонтрагентов.Получатель);	 		
	
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.ВыдачаГруза, 	
		Перечисления.Saby_РолиКонтрагентов.Перевозчик);
		
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.Переадресовка, 
		Перечисления.Saby_РолиКонтрагентов.Перевозчик);
		
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.ПереадресовкаУведомление, 
		Перечисления.Saby_РолиКонтрагентов.Отправитель);
		
	Возврат Соответствие.Получить(Титул);	
		
КонецФункции

#КонецОбласти // ЗагрузкаОтметок

Функция ДопПараметрыЗагрузкиВложения(Параметры = Неопределено) Экспорт
	
	ТолькоАктивныйЭтап = Параметры <> Неопределено И Параметры.Свойство("ТолькоАктивныйЭтап") И Параметры.ТолькоАктивныйЭтап;
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ЗагрузкаСОнлайна",   Истина);
	РезультатФункции.Вставить("Просмотрено",        Ложь);
	РезультатФункции.Вставить("ТолькоАктивныйЭтап", ТолькоАктивныйЭтап);
	РезультатФункции.Вставить("События",            Неопределено);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗагрузкаВложения(Вложения, Титул, ОбъектДок, ДопПараметры) Экспорт
	
	// Основные титулы
	Если Титул = Перечисления.Saby_ТипТитулаЭтрН.Погрузка Тогда 
		
		ЗагрузкаТитулПогрузка(ОбъектДок, Вложения, Титул, ДопПараметры); 
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ПолучениеГруза Тогда 
				
		ЗагрузкаТитулПолучениеГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза Тогда
		
		ЗагрузкаТитулПриемкаГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ВыдачаГруза Тогда
		
		ЗагрузкаТитулВыдачаГруза(ОбъектДок, Вложения, Титул, ДопПараметры); 		
		
	// Динамические титулы	
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.Переадресовка Тогда
		
		ЗагрузкаТитулПереадресовка(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ПереадресовкаУведомление Тогда 	
						
		ЗагрузкаТитулУведомлениеОПереадресовке(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ЗаменаВодителяТС Тогда 	
		
		ЗагрузкаТитулЗаменаВодителяТС(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ИзменениеСтоимости Тогда 	
				
		ЗагрузкаТитулИзменениеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.СогласованиеСтоимости Тогда	
		
		ЗагрузкаТитулСогласованиеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	// Отрицательное завершение ДО	
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.УведомлениеОУточнении Тогда
		
		ЗагрузкаТитулУведомленияОУточнении(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	КонецЕсли;
			
КонецПроцедуры

Функция СохранитьДокумент(ОбъектДок, ИД, АктивныйЭтап, Состояние, ИзДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ОбъектДок.Ссылка) Тогда 
			
			ОбъектДок.УстановитьНовыйНомер();
			Если Не ЗначениеЗаполнено(ОбъектДок.Дата) Тогда 
				ОбъектДок.Дата = ТекущаяДатаСеанса(); 				
			КонецЕсли;
			
		КонецЕсли;		
		
		ОбъектДок.Записать();
		
		Ссылка = ОбъектДок.Ссылка;
		
		// выкручиваемся через SbisId
		// больше писать не куда...
		Если Не ИзДокумента Тогда			
			Просмотрен = "Не просмотрен";  			
		Иначе 
			Просмотрен = "";
		КонецЕсли;
		
		РегистрыСведений.Saby_Состояние.ОбновитьПоUID(ИД, СокрЛП(АктивныйЭтап), Состояние, Ссылка,,,Просмотрен);
		
	Исключение		
		Ссылка = Неопределено;		
	КонецПопытки;	
	
	Возврат Ссылка;
	
КонецФункции

Функция ТитулыДляЗагрузки(ЭтапСтрокой, ТекущееСостояние, Параметры)
	
	ТолькоАктивныйЭтап = Параметры.Свойство("ТолькоАктивныйЭтап") И Параметры.ТолькоАктивныйЭтап;
	
	Этап = ТитулПоПредставлению(ЭтапСтрокой);
	
	Если ЗначениеЗаполнено(ТекущееСостояние) Тогда  
	   КодСостояния = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущееСостояние, "ИдентификаторСБИС");  
	КонецЕсли;   
	
	// Основные титулы
	Погрузка                 = ЗначениеТитула("1110339", Истина);
	ПолучениеГруза           = ЗначениеТитула("1110340", Истина);
	ПриемкаГруза             = ЗначениеТитула("1110341", Истина);
	ВыдачаГруза              = ЗначениеТитула("1110342", Истина);	
	// Динамические титулы
	Переадресовка            = ЗначениеТитула("1110343", Истина);
	ЗаменаВодителиТС         = ЗначениеТитула("1110344", Истина);
	ПереадресовкаУведомление = ЗначениеТитула("1167009", Истина);
	ИзменениеСтоимости       = ЗначениеТитула("1110345", Истина);
	СогласованиеСтоимости    = ЗначениеТитула("1110346", Истина);	
	// Отрицательное завершение ДО
	УведомлениеОУточнении    = ЗначениеТитула("1115113", Истина);
	
    МассивТитуловДляЗагрузки = Новый Массив;
	
	Если КодСостояния = 7 // ДО завершен успешно
		Или КодСостояния = 9 Тогда // ДО завершен отрицательно
		
		Если ТолькоАктивныйЭтап Тогда
			МассивТитуловДляЗагрузки.Добавить(Этап);
		Иначе
			МассивТитуловДляЗагрузки.Добавить(ВыдачаГруза);
			// - стоимость может быть изменена уже после завершения ДО
			// исключение из общей схемы
			МассивТитуловДляЗагрузки.Добавить(ИзменениеСтоимости);
			МассивТитуловДляЗагрузки.Добавить(СогласованиеСтоимости);
		КонецЕсли;
		
		МассивТитуловДляЗагрузки.Добавить(УведомлениеОУточнении);
		
		Возврат МассивТитуловДляЗагрузки;	
		
	КонецЕсли;	
	
	// Если динамический титул, то всегда читаем только его.
	// Никакие дополнительные данные не нужны, так как его считываем сразу после отправки, когда основные титулы загружены.
	Если ЭтоДинамическийТитул(Этап) Тогда
		
		МассивТитуловДляЗагрузки.Добавить(Этап);
		МассивТитуловДляЗагрузки.Добавить(УведомлениеОУточнении);
		
		Возврат МассивТитуловДляЗагрузки;
		
	КонецЕсли;
	
	Если ТолькоАктивныйЭтап Тогда
		
		Если Этап = Неопределено Тогда // В регистре состояния нет данных о текущем этапе, при этом документооборот не завершен.
			МассивТитуловДляЗагрузки.Добавить(Погрузка);
		Иначе
			МассивТитуловДляЗагрузки.Добавить(Этап);
			МассивТитуловДляЗагрузки.Добавить(УведомлениеОУточнении);
		КонецЕсли;
		
	Иначе
		
		МассивТитуловДляЗагрузки.Добавить(Погрузка);
		МассивТитуловДляЗагрузки.Добавить(ПолучениеГруза);
		МассивТитуловДляЗагрузки.Добавить(ПриемкаГруза);
		МассивТитуловДляЗагрузки.Добавить(ВыдачаГруза);
		
		МассивТитуловДляЗагрузки.Добавить(Переадресовка);
		МассивТитуловДляЗагрузки.Добавить(ЗаменаВодителиТС);
		МассивТитуловДляЗагрузки.Добавить(ПереадресовкаУведомление);
		МассивТитуловДляЗагрузки.Добавить(ИзменениеСтоимости);
		МассивТитуловДляЗагрузки.Добавить(СогласованиеСтоимости);
		
		МассивТитуловДляЗагрузки.Добавить(УведомлениеОУточнении);
		
	КонецЕсли;
	
	Возврат МассивТитуловДляЗагрузки;

КонецФункции

Процедура ЗагрузитьДополнительныеДействия(ОбъектДок, ДопДействия)
	
	Если ЗначениеЗаполнено(ОбъектДок.Ссылка) Тогда 
		ОбъектДок.ДоступныеДействия.Очистить();	  
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДопДействия) Тогда 
		Возврат; 
	КонецЕсли;
	
	Для Каждого Действие Из ДопДействия Цикл 
		
		Значение = ЗначениеДопДействия(Действие["Название"]);
		Если ЗначениеЗаполнено(Значение) Тогда 
			НС = ОбъектДок.ДоступныеДействия.Добавить();
			НС.Действие = Значение;
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры

Функция ЗначениеДопДействия(Действие)
	
	Если Действие = "Уведомление о переадресовке" Тогда 
		Значение = Перечисления.Saby_ДоступныеДействия.УведомлениеОПереадресовке;
	ИначеЕсли Действие = "Изменить стоимость" Тогда
		Значение = Перечисления.Saby_ДоступныеДействия.ИзменитьСтоимость;
	ИначеЕсли Действие = "Согласовать стоимость" Тогда	
		Значение = Перечисления.Saby_ДоступныеДействия.СогласоватьСтоимость;
	ИначеЕсли Действие = "Замена водителей/ТС" Тогда
		Значение = Перечисления.Saby_ДоступныеДействия.ЗаменаВодителяТС;
	ИначеЕсли Действие = "Переадресовка" Тогда 	 
		Значение = Перечисления.Saby_ДоступныеДействия.Переадресовка;
	Иначе
		// не нашли соотвествия
		Значение = Неопределено;
	КонецЕсли;
	 		 
	Возврат Значение;
	
КонецФункции

Процедура ЗагрузитьДанныеДинамическогоТитула(ОбъектФормы, СсылкаНаДокумент, ИдентификаторТитула) Экспорт
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Saby_ДанныеТитулов.Данные КАК Данные,
	|	Saby_ДанныеТитулов.ТипТитула КАК Титул
	|ИЗ
	|	РегистрСведений.Saby_ДанныеТитулов КАК Saby_ДанныеТитулов
	|ГДЕ
	|	Saby_ДанныеТитулов.СсылкаНаДокумент = &СсылкаНаДокумент
	|	И Saby_ДанныеТитулов.ИдентификаторТитула = &ИдентификаторТитула";
	
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент",    СсылкаНаДокумент);
	ЗапросДанных.УстановитьПараметр("ИдентификаторТитула", ИдентификаторТитула);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ДляДокумента", ЗначениеИзСтрокиВнутр(ВыборкаДанных.Данные));
		СтруктураДанных.Вставить("Титул",        ВыборкаДанных.Титул);
		
		ДанныеТитула = Новый Массив;
		ДанныеТитула.Добавить(СтруктураДанных);
		
		ДопПараметрыЗагрузкиВложения = ДопПараметрыЗагрузкиВложения();
		ДопПараметрыЗагрузкиВложения.ЗагрузкаСОнлайна = Ложь;
		
		ЗагрузкаВложения(ДанныеТитула, ВыборкаДанных.Титул, ОбъектФормы, ДопПараметрыЗагрузкиВложения);
		
		МассивСсылокНаДокумент = Новый Массив;
		МассивСсылокНаДокумент.Добавить(СсылкаНаДокумент);
		
		МассивТитулов = Новый Массив;
		МассивТитулов.Добавить(ИдентификаторТитула);
		РегистрыСведений.Saby_ДанныеТитулов.Просмотреть(МассивСсылокНаДокумент, МассивТитулов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ЗагрузитьДокументИзJson

#Область КонвертацияПеречислений

Функция ПараметрыСоответствия()
	
	Соответствие = Новый Соответствие;

	Структура = Новый Структура;         
	Структура.Вставить("Соответствие",    Соответствие);
	Структура.Вставить("ИмяПеречисления", "");
	Структура.Вставить("ПоискПоЗначению", Ложь);
	
	Возврат Структура;
	
КонецФункции

Процедура ДополнитьСоответствие(Параметры, ИмяЗначения, Значение)
	
	Соответствие    = Параметры.Соответствие;
	ИмяПеречисления = Параметры.ИмяПеречисления;
	
	Если ЗначениеЗаполнено(ИмяПеречисления) Тогда 
		ЗначениеПеречисления = Перечисления[ИмяПеречисления][ИмяЗначения]; 
	Иначе 
		ЗначениеПеречисления = ИмяЗначения;
	КонецЕсли;
	
	Если Параметры.ПоискПоЗначению Тогда 
		Соответствие.Вставить(Значение, ЗначениеПеречисления);
	Иначе 
		Соответствие.Вставить(ЗначениеПеречисления, Значение);
	КонецЕсли;
		
КонецПроцедуры

Функция ЗначениеМетодаОпределенияМассы(Значение, Загрузка = Ложь)
		
	Параметры = ПараметрыСоответствия();
	Параметры.ИмяПеречисления = "Saby_МетодОпределенияМассы";
	Параметры.ПоискПоЗначению = Загрузка;

	ДополнитьСоответствие(Параметры, "ВзвешиваниеПоОбщейМассе", "1"); 
	ДополнитьСоответствие(Параметры, "ВзвешиваниеПоосно",       "2");
	ДополнитьСоответствие(Параметры, "Расчетный",               "3");
	
	Возврат Параметры.Соответствие.Получить(Значение);
	
КонецФункции

Функция ЗначениеВладельцаОбъекта(Значение, Загрузка = Ложь)
	
	Параметры = ПараметрыСоответствия();
	Параметры.ИмяПеречисления = "Saby_ВладелецОбъектаОтгрузки";
	Параметры.ПоискПоЗначению = Загрузка;
	                      
	ДополнитьСоответствие(Параметры, "Отправитель",  "1");
	ДополнитьСоответствие(Параметры, "ДругоеЮрЛицо", "2");
	ДополнитьСоответствие(Параметры, "Неизвестен",   "3");
	
	Возврат Параметры.Соответствие.Получить(Значение);
	
КонецФункции

Функция ЗначениеИнициатораПереадресации(Значение, Загрузка = Ложь)
	
	Параметры = ПараметрыСоответствия();
	Параметры.ИмяПеречисления = "Saby_РолиКонтрагентов";
	Параметры.ПоискПоЗначению = Загрузка;
	                      
	ДополнитьСоответствие(Параметры, "Отправитель", "1");
	ДополнитьСоответствие(Параметры, "Получатель",  "2");
	
	Инициатор = Параметры.Соответствие.Получить(Значение);
	Если Загрузка 
		И Инициатор = Неопределено Тогда 
		
		Инициатор = Параметры.Соответствие.Получить("1");
		
	КонецЕсли;
		
	Возврат Инициатор;
	
КонецФункции

Функция ЗначениеТипВладенияТС(Значение, Загрузка = Ложь)
	
	Параметры = ПараметрыСоответствия();
	Параметры.ИмяПеречисления = "Saby_ТипыВладенияТС";
	Параметры.ПоискПоЗначению = Загрузка;
	
	ДополнитьСоответствие(Параметры, "Собственность",                   "1");
	ДополнитьСоответствие(Параметры, "СовместнаяСобственностьСупругов", "2");
	ДополнитьСоответствие(Параметры, "Аренда",                          "3");
	ДополнитьСоответствие(Параметры, "Лизинг",                          "4");
	ДополнитьСоответствие(Параметры, "БезвозмездноеПользование",        "5"); 
	
	// по умолчанию
	ТипВладения = Параметры.Соответствие.Получить(Значение);
	Если ТипВладения = Неопределено Тогда 
		Если Загрузка Тогда   
			ТипВладения = Параметры.Соответствие.Получить(1);
		Иначе 	
			ТипВладения = 1; 
		КонецЕсли;		
	КонецЕсли;
		
	Возврат ТипВладения;
	
КонецФункции

Функция ЗначениеОграниченияТуннели(Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда 
		Возврат "";
	КонецЕсли;
		
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(Перечисления.Saby_КодыОграниченийПроездаЧерезТуннели.B,      "B");
	Соответствие.Вставить(Перечисления.Saby_КодыОграниченийПроездаЧерезТуннели.B1000C, "B1000C");
	Соответствие.Вставить(Перечисления.Saby_КодыОграниченийПроездаЧерезТуннели.B_D,    "B_D");
	Соответствие.Вставить(Перечисления.Saby_КодыОграниченийПроездаЧерезТуннели.B_E,    "B_E");
	Соответствие.Вставить(Перечисления.Saby_КодыОграниченийПроездаЧерезТуннели.C,      "C");
	Соответствие.Вставить(Перечисления.Saby_КодыОграниченийПроездаЧерезТуннели.C5000D, "C5000D");
	Соответствие.Вставить(Перечисления.Saby_КодыОграниченийПроездаЧерезТуннели.C_D,    "C_D");
	Соответствие.Вставить(Перечисления.Saby_КодыОграниченийПроездаЧерезТуннели.C_E,    "C_E");
	Соответствие.Вставить(Перечисления.Saby_КодыОграниченийПроездаЧерезТуннели.D,      "D");
	Соответствие.Вставить(Перечисления.Saby_КодыОграниченийПроездаЧерезТуннели.D_E,    "D_E");
	Соответствие.Вставить(Перечисления.Saby_КодыОграниченийПроездаЧерезТуннели.E,      "E");

	Возврат Соответствие.Получить(Значение);
	
КонецФункции

Функция ЗначениеКлассОпасности(Значение, Загрузка = Ложь)
	
	Параметры = ПараметрыСоответствия();
	Параметры.ИмяПеречисления = "Saby_КлассыОпасностиГрузов";
	Параметры.ПоискПоЗначению = Загрузка;
	
	ДополнитьСоответствие(Параметры, "Класс1",   "1");
	ДополнитьСоответствие(Параметры, "Класс2",   "2");
	ДополнитьСоответствие(Параметры, "Класс3",   "3");
	ДополнитьСоответствие(Параметры, "Класс4_1", "4.1");
	ДополнитьСоответствие(Параметры, "Класс4_2", "4.2");
	ДополнитьСоответствие(Параметры, "Класс4_3", "4.3");
	ДополнитьСоответствие(Параметры, "Класс5_1", "5.1");
	ДополнитьСоответствие(Параметры, "Класс5_2", "5.2");
	ДополнитьСоответствие(Параметры, "Класс6_1", "6.1");
	ДополнитьСоответствие(Параметры, "Класс6_2", "6.2");
	ДополнитьСоответствие(Параметры, "Класс7",   "7");
	ДополнитьСоответствие(Параметры, "Класс8",   "8");
	ДополнитьСоответствие(Параметры, "Класс9",   "9");
	
	Класс = Параметры.Соответствие.Получить(Значение);
	
	Возврат Класс;
	
КонецФункции

Функция ЗначениеПерегрузкаЗапрещена(Значение)	
	Возврат ?(Значение, 1, 0);	
КонецФункции

Функция ЗначениеГруппыУпаковки(Значение, Загрузка = Ложь)

	Параметры = ПараметрыСоответствия();
	Параметры.ИмяПеречисления = "Saby_ГруппыУпаковки";
	Параметры.ПоискПоЗначению = Загрузка;
	
	ДополнитьСоответствие(Параметры, "Группа1", "I");
	ДополнитьСоответствие(Параметры, "Группа2", "II");
	ДополнитьСоответствие(Параметры, "Группа3", "III");
	
	Группа = Параметры.Соответствие.Получить(Значение);
	
	Возврат Группа;
	
КонецФункции

#КонецОбласти // КонвертацияПеречислений

#Область ДатаВремя

Функция СтруктураВремя(ДатаВремя, БезВремени = Ложь, СоСмещением = Истина)
		
	Значение = ЗначениеДатыВремяДляВыгрузки(ДатаВремя, БезВремени, СоСмещением);
	
	Если Не БезВремени И СтрНайти(Значение, "+") > 0 Тогда 
		ЕстьЧасовойПояс = 1;
	Иначе 
		ЕстьЧасовойПояс = 0;
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("ЕстьЧасовойПояс", ЕстьЧасовойПояс); // 0 нет, 1 - есть
	Структура.Вставить("Значение",        Значение);
	
	Возврат Структура;
	
КонецФункции

Функция ЗначениеДатыВремяДляВыгрузки(ДатаВремя, БезВремени = Ложь, СоСмещением = Истина)
	
	Если БезВремени Тогда 
		Значение = Формат(ДатаВремя, "ДФ='dd.MM.yyyy'");
	Иначе
		ФорматДатаВремя = "ДФ=dd.MM.yyyyTHH:mm:ss; ДП=";
		Если СоСмещением Тогда
			Значение = ФорматЛокальнойДатыСоСмещением(ДатаВремя, ФорматДатаВремя);
		Иначе
			Значение = Формат(ДатаВремя, ФорматДатаВремя);
		КонецЕсли;
	КонецЕсли;

	Возврат Значение;
	
КонецФункции

Функция ПреобразоватьСтрокуВДату(ДатаВходящая)
	
	Если Не ЗначениеЗаполнено(ДатаВходящая) Тогда            
		Возврат "";
	КонецЕсли;	
	
	// ранее 24.01.2023 12.00.00
	// 15.03.2022T00:00:00+01:00
	// 15.03.2022T00:00:00-01:00	
	// 2023-02-02 07:33:30 
	// 2023-02-02
	ФорматБезСмещения = Ложь;
		
	ЕстьВремя = (СтрНайти(ДатаВходящая, "T") > 0); 	
	// часть дат может приходить в старом формате
	Если Не ЕстьВремя Тогда 
		Если СтрЧислоВхождений(ДатаВходящая, ".") = 4 Тогда
			ЕстьВремя = Истина;
			ФорматБезСмещения = Истина;
		ИначеЕсли СтрЧислоВхождений(ДатаВходящая, ":") = 2 Тогда
			ЕстьВремя = Истина;
			ФорматБезСмещения = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Если ЕстьВремя Тогда
		
		Если ФорматБезСмещения Тогда 
			Разделитель = " ";
		Иначе 
			Разделитель = "T";			
		КонецЕсли;
		
		МассивЧастейДаты = СтрРазделить(ДатаВходящая, Разделитель);		
		ЧастьДата  = МассивЧастейДаты[0];
		ЧастьВремя = МассивЧастейДаты[1];
		
	Иначе
		
		// старый формат
		// 2023-02-02
		Если СтрЧислоВхождений(ДатаВходящая, "-") = 2 Тогда
			ДатаСтрокой = СтрЗаменить(ДатаВходящая, "-", "");
			Возврат Дата(ДатаСтрокой);
		Иначе 				
			ЧастьДата  = ДатаВходящая;
		КонецЕсли;		
		
	КонецЕсли;
				
	МассивДат = СтрРазделить(ЧастьДата, ".", Ложь);
	
	МассивИтог = Новый Массив;
	МассивИтог.Добавить(МассивДат[2]); 
	МассивИтог.Добавить(МассивДат[1]);
	МассивИтог.Добавить(МассивДат[0]); 		
	
	СмещениеВСекундах = Неопределено;
	
	Если ЕстьВремя Тогда
		
		Если ФорматБезСмещения Тогда 
			
			Время = ЧастьВремя;    
			Если СтрЧислоВхождений(ЧастьВремя, ":") = 2 Тогда
				РазделительВремя = ":";
			Иначе
				РазделительВремя = ".";
			КонецЕсли;
			
		Иначе 
			
			// может быть +/-
			Если СтрНайти(ЧастьВремя, "+") > 0 Тогда
				РазделительСмещение = "+";  
			Иначе 
				РазделительСмещение = "-";
			КонецЕсли;
					
			МассивВремени = СтрРазделить(ЧастьВремя, РазделительСмещение);
			Время         = МассивВремени[0];
			Смещение      = МассивВремени[1];
			
			РазделительВремя = ":";
			
			СмещениеВходящее = Дата("00010101" + СтрЗаменить(Смещение, РазделительВремя, ""));
			СмещениеСеанса = Дата("00010101") + СмещениеСтандартногоВремени(ЧасовойПоясСеанса());
			
			СмещениеВСекундах = СмещениеВходящее - СмещениеСеанса;
			
		КонецЕсли;
		
		ЧастиВремени = СтрРазделить(Время, РазделительВремя);		
		МассивИтог.Добавить(ЧастиВремени[0]); 
		МассивИтог.Добавить(ЧастиВремени[1]);
		МассивИтог.Добавить(ЧастиВремени[2]); 		

	КонецЕсли;
	
	ДатаСтрокой = СтрСоединить(МассивИтог, "");
	
	Возврат ?(ЗначениеЗаполнено(СмещениеВСекундах), Дата(ДатаСтрокой) - СмещениеВСекундах, Дата(ДатаСтрокой)); 
	
КонецФункции	

Функция ДатаВложения(СтруктураВложения, Титул) Экспорт
	
	РезультатФункции = Дата(1, 1, 1, 0, 0, 0);
	
	Если Титул = Перечисления.Saby_ТипТитулаЭтрН.Погрузка Тогда
		
		РезультатФункции = ПреобразоватьСтрокуВДату(
			СтруктураВложения["1110339"]["Файл"]["Документ"]["ДатИнфГО"]
				+ " "
				+ СтруктураВложения["1110339"]["Файл"]["Документ"]["ВрИнфГО"]
		);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ПолучениеГруза Тогда
		
		РезультатФункции = ПреобразоватьСтрокуВДату(
			СтруктураВложения["1110340"]["Файл"]["Документ"]["ДатИнфПрвПрием"]
				+ " "
				+ СтруктураВложения["1110340"]["Файл"]["Документ"]["ВрИнфПрвПрием"]
		);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза Тогда
		
		РезультатФункции = ПреобразоватьСтрокуВДату(
			СтруктураВложения["1110341"]["Файл"]["Документ"]["ДатИнфГП"]
				+ " "
				+ СтруктураВложения["1110341"]["Файл"]["Документ"]["ВрИнфГП"]
		);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ВыдачаГруза Тогда
		
		РезультатФункции = ПреобразоватьСтрокуВДату(
			СтруктураВложения["1110342"]["Файл"]["Документ"]["ДатИнфПрвВыд"]
				+ " "
				+ СтруктураВложения["1110342"]["Файл"]["Документ"]["ВрИнфПрвВыд"]
		);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.Переадресовка Тогда
		
		РезультатФункции = ПреобразоватьСтрокуВДату(
			СтруктураВложения["1110343"]["Файл"]["Документ"]["ДатаИнфПА"]
				+ " "
				+ СтруктураВложения["1110343"]["Файл"]["Документ"]["ВрИнфПА"]
		);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ПереадресовкаУведомление Тогда
		
		РезультатФункции = ПреобразоватьСтрокуВДату(
			СтруктураВложения["1167009"]["Файл"]["Документ"]["ДатаУвПА"]
				+ " "
				+ СтруктураВложения["1167009"]["Файл"]["Документ"]["ВрУвПА"]
		);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ЗаменаВодителяТС Тогда
		
		РезультатФункции = ПреобразоватьСтрокуВДату(
			СтруктураВложения["1110344"]["Файл"]["Документ"]["ДатИнфЗамен"]
				+ " "
				+ СтруктураВложения["1110344"]["Файл"]["Документ"]["ВрИнфЗамен"]
		);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.СогласованиеСтоимости Тогда
		
		РезультатФункции = ПреобразоватьСтрокуВДату(
			СтруктураВложения["1110346"]["Файл"]["Документ"]["ДатПУДИнфГО"]
				+ " "
				+ СтруктураВложения["1110346"]["Файл"]["Документ"]["ВрПУДИнфГО"]
		);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ИзменениеСтоимости Тогда
		
		РезультатФункции = ПреобразоватьСтрокуВДату(
			СтруктураВложения["1110345"]["Файл"]["Документ"]["ДатПУДИнфПрв"]
				+ " "
				+ СтруктураВложения["1110345"]["Файл"]["Документ"]["ВрПУДИнфПрв"]
		);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.УведомлениеОУточнении Тогда
		
		РезультатФункции = ПреобразоватьСтрокуВДату(
			СтруктураВложения["Документ"]["Данные"]["ДатаПол"]
				+ " "
				+ СтруктураВложения["Документ"]["Данные"]["ВремяПол"]
		);
		
    Иначе 	
		
		РезультатФункции = Неопределено;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ДатаВремя

#Область Заполнение_С_Контролем

Функция ПараметрыСвойстваСКонтролем(Приемник, Источник)
	
	Параметры = Новый Структура;
	Параметры.Вставить("Приемник",  Приемник);
	Параметры.Вставить("Источник",  Источник);
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗаполнитьСвойствоСКонтролем(Параметры, ИмяРеквизита, ИмяСвойства = "", ВЧисло = Ложь)
	
	Приемник = Параметры.Приемник; 
	Источник = Параметры.Источник;  
	
	Если ПустаяСтрока(ИмяСвойства) Тогда 
		ИмяСвойства = ИмяРеквизита;
	КонецЕсли;
		
	// Проверка На значениение заполнено не совсем корректно, так как данные могут затираться
	Если Источник[ИмяСвойства] <> Неопределено Тогда
		Если ВЧисло Тогда
			Приемник[ИмяРеквизита] = ЧислоИзСтроки(Источник[ИмяСвойства]);
		Иначе                                             		
			Приемник[ИмяРеквизита] = Источник[ИмяСвойства]; 		
		КонецЕсли;	                                      
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСвойствоВСтруктуруСКонтролем(Структура, ИмяСвойства, Данные, ЭтоВремя = Ложь)
	
	ЗаполнитьСвойство = Ложь;
	
	Если ЭтоВремя Тогда 		
		
		Если ЗначениеЗаполнено(Данные.Значение) Тогда		
			ЗаполнитьСвойство = Истина; 
		КонецЕсли;
			
	ИначеЕсли ЗначениеЗаполнено(Данные) Тогда   	
				
		ЗаполнитьСвойство = Истина;
		
	КонецЕсли; 	
	
	Если ЗаполнитьСвойство Тогда 
		Структура.Вставить(ИмяСвойства, Данные);		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти // Заполнение_С_Контролем

#Область ЗаполнениеАдресов

// Заполняет структуру адреса для подстановок
//
// Параметры:
//  СтруктураАдреса - Структура - ОбщийШаблонАдреса())
//  АдресЗначение - Строка - результат выполнения ЗначениеВJSON(ОбщийШаблонАдреса())
//
// Возвращаемое значение:
//   Структура - ОбщийШаблонАдреса()
//
Процедура ЗаполнитьСтруктуруАресаИзСтроки(СтруктураАдреса, АдресЗначение)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(АдресЗначение);  		
	СтруктураАдресаИзСтроки = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Если СтруктураАдресаИзСтроки <> Неопределено Тогда
		ЗаполнитьСтруктуруАдреса(СтруктураАдреса, СтруктураАдресаИзСтроки);
		
		СтруктураАдреса.Структура.Вставить("КодСтраны", СтруктураАдреса.КодСтраны);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруАдреса(Приемник, Источник)
	
	Для Каждого КлючЗначение Из Приемник Цикл
		
		ЗначениеИзИсточника = Неопределено;
		
		Если Не Источник.Свойство(КлючЗначение.Ключ, ЗначениеИзИсточника) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура") Тогда
			ЗаполнитьСтруктуруАдреса(КлючЗначение.Значение, ЗначениеИзИсточника);
		Иначе
			Приемник.Вставить(КлючЗначение.Ключ, ЗначениеИзИсточника);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбщийШаблонАдреса()
	
	Структура = Новый Структура;
	
	Структура.Вставить("Текст",     "");
	Структура.Вставить("GLN",       "");
	Структура.Вставить("КодГАР",    "");
	Структура.Вставить("КодСтраны", "643");
	
	Координаты = Новый Структура;
	Координаты.Вставить("Широта", ""); 
	Координаты.Вставить("Долгота","");
	
	Структура.Вставить("Координаты", Координаты); 
	
	СтруктураАдрес = Новый Структура;
		
	СтруктураАдрес.Вставить("Индекс",          "");
	СтруктураАдрес.Вставить("КодРегиона",      "");
	СтруктураАдрес.Вставить("Район",           "");
	СтруктураАдрес.Вставить("Город",           "");
	СтруктураАдрес.Вставить("НаселенныйПункт", "");
	СтруктураАдрес.Вставить("Улица",           "");
	СтруктураАдрес.Вставить("Дом",             "");
	СтруктураАдрес.Вставить("Корпус",          "");
	СтруктураАдрес.Вставить("Квартира",        "");
	
	Структура.Вставить("Структура", СтруктураАдрес);
	Структура.Вставить("Типовой", 	"");
	
	Возврат Структура;
		
КонецФункции

#КонецОбласти // ЗаполнениеАдресов

Процедура УдалитьСвойстваИзСтруктуры(Структура, Массив)
	
	Для Каждого ЭлементМассива Из Массив Цикл
		Структура.Удалить(ЭлементМассива);	
	КонецЦикла;
		
КонецПроцедуры

Функция НаименованиеДлительнойОперации(Ключ)
	Наименование = Новый Соответствие;
	Наименование.Вставить("ЗагрузитьВСбис", НСтр("ru = 'Загрузка документов в СБИС';
			                 					|en = 'Download documents to SBIS'"));
	Наименование.Вставить("ОбновитьДокументИзСбис", НСтр("ru = 'Синхронизация документов со СБИС';
			                 							|en = 'Document synchronization to SBIS'"));
	Возврат Наименование.Получить(Ключ);	
КонецФункции

Процедура УстановитьДокументОснование(ОбъектДок, ДокументОснование)
	
	ОбъектДок.ДокументОснование_ОбъектМетаданных = ИмяМетаданныхДокумента(ДокументОснование);
	Если ЗначениеЗаполнено(ОбъектДок.ДокументОснование_ОбъектМетаданных) Тогда 
		ОбъектДок.ДокументОснование_Идентификатор = ДокументОснование.УникальныйИдентификатор();
	Иначе
		ОбъектДок.ДокументОснование_Идентификатор = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчисткаДанныхПередЗагрузкой(ОбъектДок, Титул, ДанныеДляОчистки)
	
	Если ОбъектДок.Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	РеквизитыДляОчистки = ДанныеДляОчистки.РеквизитыДляОчистки.Получить(Титул);
	Если РеквизитыДляОчистки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяРеквизита Из РеквизитыДляОчистки Цикл
		
		Если ДанныеДляОчистки.ТабличныеЧасти[ИмяРеквизита] <> Неопределено Тогда
			ОбъектДок[ИмяРеквизита].Очистить();
		Иначе
			ОбъектДок[ИмяРеквизита] = "";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РеквизитыДляОчисткиПоТитулам(ОбъектДок, МассивТитулов, Параметры)
	
	ТолькоАктивныйЭтап = Параметры.Свойство("ТолькоАктивныйЭтап") И Параметры.ТолькоАктивныйЭтап;
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("РеквизитыДляОчистки", Новый Соответствие);
	РезультатФункции.Вставить("ТабличныеЧасти", Новый Соответствие);
	
	Если ТолькоАктивныйЭтап Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Для Каждого ТабличнаяЧасть Из ОбъектДок.Метаданные().ТабличныеЧасти Цикл
		РезультатФункции.ТабличныеЧасти.Вставить(ТабличнаяЧасть.Имя, Истина);
	КонецЦикла;
	
	Для Каждого Титул Из МассивТитулов Цикл
		
		МассивРеквизитов = Новый Массив;
		Если Титул = Перечисления.Saby_ТипТитулаЭтрН.Погрузка Тогда // 1110339
			
			МассивРеквизитов.Добавить("Отправитель");
			МассивРеквизитов.Добавить("Получатель");
			МассивРеквизитов.Добавить("ДанныеЮрЛиц");
			МассивРеквизитов.Добавить("КонтактныеДанные");
			
			// ЗаполнитьПунктыПогрузкиВыдачи
			МассивРеквизитов.Добавить("Погрузка_Адрес");
			МассивРеквизитов.Добавить("АдресПогрузкиЗначение");
			МассивРеквизитов.Добавить("Погрузка_ДатаВремя");
			МассивРеквизитов.Добавить("Отправитель_АдресДоставки");
			МассивРеквизитов.Добавить("АдресДоставкиЗначение");
			МассивРеквизитов.Добавить("Отправитель_ДоставитьДо");
			МассивРеквизитов.Добавить("Выгрузка_ДатаВремя");
			
			// ЗаполнитьДанныеДокументовТрН
			МассивРеквизитов.Добавить("СопроводительныеДокументы");
			
			// ЗаполнитьДанныеТСИПрицеповДокумента
			МассивРеквизитов.Добавить("Отправитель_ТранспортноеСредство");
			МассивРеквизитов.Добавить("Прицепы");
			МассивРеквизитов.Добавить("СпецРазрешения");
			
			// ЗаполнитьДанныеВодителей
			МассивРеквизитов.Добавить("Водители");
			МассивРеквизитов.Добавить("ПутевыеЛисты");
			
			// ЗаполнитьДанныеПоГрузам
			МассивРеквизитов.Добавить("Грузы");
			МассивРеквизитов.Добавить("Контейнеры");
			МассивРеквизитов.Добавить("Маркировки");
			МассивРеквизитов.Добавить("ОпасныеГрузы");
			МассивРеквизитов.Добавить("СведенияГосСистем");
			
		КонецЕсли;
		
		Если МассивРеквизитов.Количество() > 0 Тогда
			РезультатФункции.РеквизитыДляОчистки.Вставить(Титул, МассивРеквизитов);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеПечатнойФормыЭТрНДляОткрытия(СсылкаНаДокумент, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("АдресДвоичныхДанных",        Неопределено);
	РезультатФункции.Вставить("СсылкаНаПрисоединенныйФайл", Неопределено);
	РезультатФункции.Вставить("ОписаниеОшибки",             "");
	РезультатФункции.Вставить("СписокДокументов",           Неопределено);
	
	Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		РезультатФункции.ОписаниеОшибки = "Документ еще ни разу не сохранен. Печатная форма недоступна.";
		Возврат РезультатФункции;
	КонецЕсли;
	
	ПараметрыЗагрузки = Документы.Saby_ТранспортнаяНакладная.ПараметрыЗагрузкиПечатнойФормыИзСбис(
		СсылкаНаДокумент, , УникальныйИдентификаторФормы
	);
	
	Если Не ЗначениеЗаполнено(ПараметрыЗагрузки.УИДСбис) Тогда
		РезультатФункции.ОписаниеОшибки = "Документ не выгружен в СБИС. Печатная форма недоступна.";
		РезультатФункции.СписокДокументов = ПараметрыЗагрузки.СписокДокументов;
		Возврат РезультатФункции;
	КонецЕсли;
	
	ХранитьПечатныеФормыВБД = Константы.Saby_ХранитьПечатныеФормыВБД.Получить();
	
	Если ХранитьПечатныеФормыВБД Тогда
		
		СсылкаНаПрисоединенныйФайл = Документы.Saby_ТранспортнаяНакладная.ЗагрузитьПечатнуюФормуДокументаИзСбис(
			ПараметрыЗагрузки,
			,
			ХранитьПечатныеФормыВБД
		);
		Если Не ЗначениеЗаполнено(СсылкаНаПрисоединенныйФайл) Тогда
			РезультатФункции.ОписаниеОшибки = "Не удалось получить печатную форму из СБИС.";
		Иначе
			РезультатФункции.СсылкаНаПрисоединенныйФайл = СсылкаНаПрисоединенныйФайл;
		КонецЕсли;
		
	Иначе
		
		АдресДвоичныхДанныхФайлаЭТрН = Документы.Saby_ТранспортнаяНакладная.АдресДвоичныхДанныхФайлаЭТрН(ПараметрыЗагрузки);
		Если Не ЗначениеЗаполнено(АдресДвоичныхДанныхФайлаЭТрН) Тогда
			РезультатФункции.ОписаниеОшибки = "Не удалось получить печатную форму из СБИС.";
		Иначе
			РезультатФункции.АдресДвоичныхДанных = АдресДвоичныхДанныхФайлаЭТрН;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ИдентификаторВложения(СтруктураВложения, КодТитула) Экспорт
	
	Если КодТитула = "1115113" Тогда
		ИдФайл = СтруктураВложения["Документ"]["Данные"]["ИдФайл"];
	Иначе
		ИдФайл = СтруктураВложения[КодТитула]["Файл"]["ИдФайл"];
	КонецЕсли;
	
	РезультатФункции = Прав(ИдФайл, 36);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СтруктураБезПустыхЗначений(ИсходнаяСтруктура)
	
	РезультатФункции = Новый Структура;
	
	Для Каждого КлючЗначение Из ИсходнаяСтруктура Цикл
		Если ЗначениеЗаполнено(КлючЗначение.Значение)
			Или ТипЗнч(КлючЗначение.Значение) = Тип("Массив") Тогда
			РезультатФункции.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ЗагрузитьОдиночныйДокументЭТрН(Данные, Тип)
	
	ТЗ = ТаблицаДокументовТрН();
	НС = ТЗ.Добавить();
		
	ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, Данные, Тип); 
	
	СоответствиеДокументов = НайтиСоздатьДокументТрН(ТЗ);
	
	Возврат СоответствиеДокументов.Получить(1);
	
КонецФункции

Функция РеквизитыОдиночногоДокументаЭТрН(Ссылка)
	
	Массив = Новый Массив();
	Массив.Добавить(Ссылка);
	
	ДанныеДокументов = РеквизитыДокументовСбис(Массив);
	
	ДанныеДок = ДанныеДокументов.Получить(Ссылка);
	ДанныеДок.Удалить("Тип");
	ДанныеДок.Удалить("Ссылка");
	
	Возврат ДанныеДок;

КонецФункции

Функция РегНомерБезЛишнихСимволов(РегНомер)
	
	РегНомер = СтрЗаменить(РегНомер, " ", "");
	РегНомер = СокрЛП(РегНомер);
	РегНомер = ВРег(РегНомер);
	
	Возврат РегНомер;
	
КонецФункции

#Область БанковскиеСчета

Функция РасчетныйСчетПоРеквизитам(БанкРеквизиты, Владелец)
	
	 НомерСчета = СокрЛП(БанкРеквизиты["НомерСчета"]); 
	
	 ЕстьСправочникБанкСчета = Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено;
	 
	 Если ЕстьСправочникБанкСчета Тогда 
		 
		 ТестЗапроса = 
		 "ВЫБРАТЬ
		 |	БанковскиеСчета.Ссылка КАК Ссылка
		 |ИЗ
		 |	Справочник.БанковскиеСчета КАК БанковскиеСчета
		 |ГДЕ
		 |	БанковскиеСчета.Владелец = &Владелец
		 |	И БанковскиеСчета.НомерСчета = &НомерСчета
		 |";
		 
	 Иначе 
		 
		 ТестЗапроса = 
		 "ВЫБРАТЬ
		 |	БанковскиеСчетаОрганизаций.Ссылка КАК Ссылка
		 |ИЗ
		 |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		 |ГДЕ
		 |	БанковскиеСчетаОрганизаций.Владелец = &Владелец
		 |	И БанковскиеСчетаОрганизаций.НомерСчета = &НомерСчета
		 |
		 |ОБЪЕДИНИТЬ ВСЕ
		 |
		 |ВЫБРАТЬ
		 |	БанковскиеСчетаКонтрагентов.Ссылка
		 |ИЗ
		 |	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		 |ГДЕ
		 |	БанковскиеСчетаКонтрагентов.Владелец = &Владелец
		 |	И БанковскиеСчетаКонтрагентов.НомерСчета = &НомерСчета";
		 		 	 
	 КонецЕсли;
	 
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("Владелец",   Владелец);
	 Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	 
	 Запрос.Текст = ТестЗапроса;
	 
	 Выборка = Запрос.Выполнить().Выбрать();
	 Если Выборка.Следующий() Тогда 
		 // нашли
		 РасчетныйСчет = Выборка.Ссылка;
	 Иначе 
		 РасчетныйСчет = Неопределено;
	 КонецЕсли;
	 
	 Возврат РасчетныйСчет;
	
КонецФункции

Функция РеквизитыБанковскогоСчета(БанковскийСчет)
	
	Структура = Новый Структура;
	Структура.Вставить("НомерСчета", "");
	Структура.Вставить("Банк",       Новый Структура);
	
	// Банк
	Структура.Банк.Вставить("Наименование", Новый Структура);
	Структура.Банк.Наименование.Вставить("Полное", "");
	
	Структура.Банк.Вставить("БИК",     "");
	Структура.Банк.Вставить("КоррСчет","");
		
	ЕстьСправочникБанкСчета = Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено;
		 
	Если ЕстьСправочникБанкСчета Тогда 
		
		// нет корр счета в стандратном получении данных счета
		ИмяСправочника = "БанковскиеСчета";		
		РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет, "НомерСчета, Банк.Наименование, Банк.Код, Банк.КоррСчет");
		
		Если ЗначениеЗаполнено(РеквизитыСчета) Тогда
			
			Структура.Банк.Наименование.Полное = РеквизитыСчета.БанкНаименование;
			
			Структура.НомерСчета    = РеквизитыСчета.НомерСчета;
			Структура.Банк.БИК      = РеквизитыСчета.БанкКод;
			Структура.Банк.КоррСчет = РеквизитыСчета.БанкКоррСчет;
			
		КонецЕсли;		
		
	Иначе 
		
		Если ТипЗнч(БанковскийСчет) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда 
			
			ИмяСправочника = "БанковскиеСчетаОрганизаций";
			РеквизитыСчета = Справочники[ИмяСправочника].ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет); 
		
		Иначе 
		
			ИмяСправочника = "БанковскиеСчетаКонтрагентов";
			РеквизитыСчета = Справочники[ИмяСправочника].ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет);
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыСчета) Тогда
			
			Если РеквизитыСчета.Свойство("БИКБанка") Тогда 
				ИмяБик = "БИКБанка"; 
			Иначе 
				ИмяБик = "БИК";
			КонецЕсли;
			
			Структура.Банк.Наименование.Полное = РеквизитыСчета.Банк;
			
			Структура.НомерСчета    = РеквизитыСчета.НомерСчета;
			Структура.Банк.БИК      = РеквизитыСчета[ИмяБик];
			Структура.Банк.КоррСчет = РеквизитыСчета.КоррСчет;
			
		КонецЕсли;
				
	КонецЕсли;	
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти // БанковскиеСчета

Функция ЗначениеСтавкиНДС(Значение, Загрузка = Ложь) Экспорт
    
    Параметры = ПараметрыСоответствия();
    Параметры.ИмяПеречисления = "";
    Параметры.ПоискПоЗначению = Не Загрузка;

    ДополнитьСоответствие(Параметры, "1", "без НДС"); 
    ДополнитьСоответствие(Параметры, "2", "0%");
    ДополнитьСоответствие(Параметры, "3", "10%");              
    ДополнитьСоответствие(Параметры, "4", "20%");               
    
    Ставка = Параметры.Соответствие.Получить(Значение);
    
    Если Загрузка 
        И Ставка = Неопределено Тогда 
        
        Ставка = Параметры.Соответствие.Получить("без НДС");       
    КонецЕсли;
    
    Возврат Ставка;
    
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область СлужебныйПрограммныйИнтерфейс

Функция ДанныеВодителяПоСсылке(Водитель) Экспорт

	Массив = Новый Массив;
	Массив.Добавить(Водитель);
	
	ДанныеВодителей = ФиоИВУФизЛиц(Массив);	
			
	Структура = ДанныеВодителей.Получить(Водитель);	
	
	ВодительскоеУдостоверение = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеВУ(Структура);
	Структура.Вставить("ВУСтрокой", ВодительскоеУдостоверение); 
	
	Возврат Структура;
	
КонецФункции

Функция СправочникСОнлайна(ИмяСправочника) Экспорт
	
	ОбъектОбработки = Обработки.SABY.Создать();
	
	context_params = Saby_Core.ПроверитьНаличиеПараметровПодключения();
	
	ПараметрыМетода = Новый Структура();
	ПараметрыМетода.Вставить("Сортировка", null);
	ПараметрыМетода.Вставить("Навигация",  null);
	ПараметрыМетода.Вставить("ДопПоля",    Новый Массив);
	ПараметрыМетода.Вставить("Фильтр",     Новый Структура());
	
	//ПараметрыМетода.Фильтр.Вставить("Справочник", "КБК для ЕССС");
	ПараметрыМетода.Фильтр.Вставить("s", Новый Массив);
	ПараметрыМетода.Фильтр.Вставить("f", 0);
	ПараметрыМетода.Фильтр.Вставить("d", Новый Массив);
	ПараметрыМетода.Фильтр.Вставить("_type", "record");
	
	СтруктураS = Новый Структура;
	СтруктураS.Вставить("n", "Справочник");
	СтруктураS.Вставить("t", "Строка");
	
	ПараметрыМетода.Фильтр.s.Добавить(СтруктураS);
	
	ПараметрыМетода.Фильтр.d.Добавить(ИмяСправочника);
	
	ПараметрыВыполнения = Новый Структура();
	ПараметрыВыполнения.Вставить("url",       context_params.api_url + "/service/?srv=1");
	ПараметрыВыполнения.Вставить("method",    "Классификаторы.ПолучитьСправочникЦеликом");
	ПараметрыВыполнения.Вставить("params",    ПараметрыМетода);
	ПараметрыВыполнения.Вставить("auto_auth", Истина);
	ПараметрыВыполнения.Вставить("protocol",  6);
	
	result = ОбъектОбработки.local_helper_exec_method(context_params, ПараметрыВыполнения);
	Результат = result.Получить("result");
	
	Возврат Результат["d"];
	
КонецФункции

Функция ЗаписатьJSONВФайл(ИмяФайла, СтрокаJSON) Экспорт
	
	Запись = Новый ЗаписьJSON();
	Запись.ОткрытьФайл(ИмяФайла);
	Запись.ЗаписатьБезОбработки(СтрокаJSON);
	Запись.Закрыть();
	
	Возврат Истина;
	
КонецФункции

Функция СсылкаПоНавигационнойСсылке(НавигационнаяСсылка) Экспорт
	
	ПрефиксМетаданных = "e1cib/data/";
	ПрефиксСсылки     = "?ref=";
	
	ПозицияМетаданных     = Найти(НавигационнаяСсылка, ПрефиксМетаданных) + СтрДлина(ПрефиксМетаданных);
    ПозицияПрефиксаСсылки = Найти(НавигационнаяСсылка, ПрефиксСсылки);
	ПозицияСсылки         = ПозицияПрефиксаСсылки + СтрДлина(ПрефиксСсылки);
	
	ИдентификаторСсылки   = Сред(НавигационнаяСсылка, ПозицияСсылки);
	
	ПредставлениеТипа     = Сред(НавигационнаяСсылка, ПозицияМетаданных, ПозицияПрефиксаСсылки - ПозицияМетаданных);
	ПустаяСсылка          = ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка");
	
    ШаблонЗначения = ЗначениеВСтрокуВнутр(ПустаяСсылка);
    ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", ИдентификаторСсылки);
    Ссылка = ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
	
	Если Не ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
		Ссылка = ПустаяСсылка;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
