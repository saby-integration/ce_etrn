
#Область ПрограммныйИнтерфейс

// Получает данные документа для выгрузки в формате подстановок
//
// Параметры:
//  Ссылка - ДокументСсылка.Saby_ТранспортнаяНакладная - документ для выгрузки
//  ДопПараметры - Структура - дополнительные параметры выгрузки
//
// Возвращаемое значение:
//   Структура - структура данных для выгрузки в формате подстановок.
//     * Идентификатор - Строка - идентификатор документа СБИС
//     * Вложение - Массив - массив структур вложений в формате подстановок.
//
Функция ДанныеДляВыгрузки(Ссылка, ДопПараметры = Неопределено) Экспорт
	
	ТекущийЭтап = Неопределено;
	
	Данные = Saby_ТНОбщегоНазначенияСервер.ТекущийТитулИИДДокумента(Ссылка);
	Если ЗначениеЗаполнено(Данные.ИД) Тогда
		
		ИДСбис = Данные.ИД;
		Этап   = Данные.АктивныйЭтап;
		
		Если ДопПараметры <> Неопределено И ДопПараметры.Свойство("Этап") Тогда
			Этап = ДопПараметры.Этап;
		КонецЕсли;
		
		ТекущийЭтап = Перечисления.Saby_ТипТитулаЭтрН.ЗначениеПоПредставлению(Этап);
		
	КонецЕсли;
	
	Если ДопПараметры <> Неопределено И ДопПараметры.Свойство("ДанныеТитула") Тогда
		ДанныеТитула = ДопПараметры.ДанныеТитула;
	Иначе
		ДанныеТитула = ЗначенияРеквизитовТранспортнойНакладной(ТекущийЭтап, Ссылка);
	КонецЕсли;
	
    СтруктураВложения = ВложениеНаВыгрузку(ТекущийЭтап, ДанныеТитула);
	Если ЗначениеЗаполнено(СтруктураВложения) Тогда
		
		Вложение = Новый Структура;
		Вложение.Вставить("Тип",         "ЭТрН");
		Вложение.Вставить("Подтип",      СтруктураВложения.Титул);
		Вложение.Вставить("Подстановка", СтруктураВложения.Вложение);
		
		// Регламент для документа. Ошибка на онлайн с подстановкой иного регламента
		Регламент = Новый Структура;		
		Регламент.Вставить("Название", "Транспортная накладная");
		Вложение.Вставить("Регламент", Регламент);		
		
		// обход ошибки с не верной подстановкой организации
		ЗаполнитьНашуОрганизацию(Вложение);
		
		ДокументСтруктура = Новый Структура;
		Если ЗначениеЗаполнено(ИДСбис) Тогда
			ДокументСтруктура.Вставить("Идентификатор", ИДСбис);
		КонецЕсли;
		
		МассивВложений = Новый Массив;
		МассивВложений.Добавить(Вложение);
		ДокументСтруктура.Вставить("Вложение", МассивВложений);
		
	Иначе
		ДокументСтруктура = Новый Структура;
	КонецЕсли;
	
	Возврат ДокументСтруктура;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

// Получает необходимые для выгрузки этапа реквизиты документа из БД
//
// Параметры:
//  ТекущийЭтап - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - этап, по которому определяются необходимые реквизиты.
//  Ссылка - ДокументСсылка.Saby_ТранспортнаяНакладная - документ для получения значений реквизитов.
//  ДопДанные - Соответствие - соответствие типа титула и дополнительных реквизитов, которые необходимо получить.
//    * Ключ - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - тип титула для получения дополнительных реквизитов.
//    * Значение - Структура - структура дополнительных реквизитов для получения
//      * Реквизиты - Массив - массив имен реквизитов
//      * Таблицы - Массив - массив имен табличных частей
//
// Возвращаемое значение:
//   Структура - ключами структуры являются имена реквизитов, а значениями соответственно значения реквизитов.
//     В случае табличных частей значением является ТаблицаЗначений
//
Функция ЗначенияРеквизитовТранспортнойНакладной(ТекущийЭтап, Ссылка, ДопДанные = Неопределено) Экспорт
	
	Если ДопДанные = Неопределено Тогда
		ДополнительныеДанные = ДопДанные;
	Иначе
		ДополнительныеДанные = ДопДанные.Получить(ТекущийЭтап);
	КонецЕсли;
	
	ТипыТитулов = Перечисления.Saby_ТипТитулаЭтрН.ВсеТипыТитулов();
	
	Если Не ЗначениеЗаполнено(ТекущийЭтап) Или ТекущийЭтап = ТипыТитулов.Погрузка Тогда
		
		Возврат ВыгрузкаДанныеПогрузка(Ссылка, ДополнительныеДанные);
				
	ИначеЕсли ТекущийЭтап = ТипыТитулов.ПолучениеГруза Тогда
		
		Возврат ВыгрузкаДанныеПолучениеГруза(Ссылка, ДополнительныеДанные);
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов.ПриемкаГруза Тогда
		
		Возврат ВыгрузкаДанныеПриемкаГруза(Ссылка, ДополнительныеДанные);
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов.ВыдачаГруза Тогда    
		
		Возврат ВыгрузкаДанныеВыдачаГруза(Ссылка, ДополнительныеДанные);  
				
	Иначе 	
		
		Возврат Неопределено;
		
	КонецЕсли;
		
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

#Область ВыгрузитьДокументВJson

Функция ВложениеНаВыгрузку(ТекущийЭтап, ДанныеТитула)
	
	ТипыТитулов = Перечисления.Saby_ТипТитулаЭтрН.ВсеТипыТитулов();
	
	Если Не ЗначениеЗаполнено(ТекущийЭтап) Или ТекущийЭтап = ТипыТитулов.Погрузка Тогда
		
		СтруктураВложения = ТитулПогрузка(ДанныеТитула);
				
	ИначеЕсли ТекущийЭтап = ТипыТитулов.ПолучениеГруза Тогда
		
		СтруктураВложения = ТитулПолучениеГруза(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов.ПриемкаГруза Тогда
		
		СтруктураВложения = ТитулПриемкаГруза(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов.ВыдачаГруза Тогда    
		
		СтруктураВложения = ТитулВыдачаГруза(ДанныеТитула);  
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов.Переадресовка Тогда	
		
		СтруктураВложения = ТитулПереадресовка(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов.ПереадресовкаУведомление Тогда		
		
		СтруктураВложения = ТитулУведомлениеОПереадресовке(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов.ЗаменаВодителяТС Тогда		
		
		СтруктураВложения = ТитулЗаменаВодителя(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов.ИзменениеСтоимости Тогда		
		
		СтруктураВложения = ТитулИзменениеСтоимости(ДанныеТитула);

	ИначеЕсли ТекущийЭтап = ТипыТитулов.СогласованиеСтоимости Тогда
		
		СтруктураВложения = ТитулСогласованиеСтоимости(ДанныеТитула);
		
	Иначе 	
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
	ПредставленияТитула = Перечисления.Saby_ТипТитулаЭтрН.ПредставленияТитула(ТекущийЭтап);
	
	Структура = Новый Структура;
	Структура.Вставить("Титул",    ПредставленияТитула.КодТитула);
	Структура.Вставить("Вложение", СтруктураВложения);
		
	Возврат Структура;

КонецФункции

// Титул "1110339" Грузоотправитель погрузка
//
// Параметры:
// 	ДанныеДокумента - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
Функция ТитулПогрузка(ДанныеДокумента)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
		
	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;
	
	// Отдельно вынесены общие данные документа
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("Номер", РеквизитыОбъекта.Номер);
	СтруктураДокумента.Вставить("Дата",	 ЗначениеДатыВремяДляВыгрузки(РеквизитыОбъекта.Дата, Истина));
		
	ОбщаяСтруктура.Вставить("Документ", СтруктураДокумента);
	
	// Получим данные по всем вложенным документам 
	СопроводительныеДокументы = ВложенныеДокументы(ДанныеДокумента);
	
	// Данные по участникам документооборота
	ОбщаяСтруктура.Вставить("Грузоотправитель", ДанныеЮрЛица("Отправитель", ДанныеДокумента));
	ОбщаяСтруктура.Вставить("Грузополучатель",  ДанныеЮрЛица("Получатель",  ДанныеДокумента));
	ОбщаяСтруктура.Вставить("Грузоперевозчик",  ДанныеЮрЛица("Перевозчик",  ДанныеДокумента));
	
	Если ЗначениеЗаполнено(РеквизитыОбъекта.Составитель) Тогда
		ОбщаяСтруктура.Вставить("Файл",             Новый Структура);
		ОбщаяСтруктура.Файл.Вставить("Составитель", ДанныеСоставителя(ДанныеДокумента));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыОбъекта.Заказчик) Тогда 
		ОбщаяСтруктура.Вставить("Заказчик", ДанныеЮрЛица("Заказчик", ДанныеДокумента));	
	КонецЕсли;
	
	// Дополнительные документы 
	Если ЗначениеЗаполнено(СопроводительныеДокументы.РасчетПеревозки) Тогда 
		ОбщаяСтруктура.Грузоотправитель.Вставить("ОснованиеРасчета", СопроводительныеДокументы.РасчетПеревозки);
	КонецЕсли;
		
	// Адреса доставки/погрузки
	ОбщаяСтруктура.Вставить("ПунктВыгрузки", ПунктВыгрузки(РеквизитыОбъекта));
	ОбщаяСтруктура.Вставить("ПунктПогрузки", ПунктПогрузки(РеквизитыОбъекта));
	
	// Условия перевозки, переехали из погрузки... нужен тест подставновки после выноса
	ИнициаторПодтверждение = СопроводительныеДокументы.ИнициаторПодтверждение;
	УсловияПеревозки      = УсловияПеревозки(ДанныеДокумента, ИнициаторПодтверждение);
	
	ОбщаяСтруктура.Вставить("УсловияПеревозки", УсловияПеревозки);
	
	// Погрузка
	Погрузка = ДанныеПогрузки(ДанныеДокумента, 
		СопроводительныеДокументы.ОснованиеОтгрузки, СопроводительныеДокументы.ОснованиеПолномочий);
	
	ОбщаяСтруктура.Вставить("Погрузка", Погрузка);
	
	// - удалим из общей структуры сопр. документов
	СопроводительныеДокументы.Удалить("РасчетПеревозки");
	СопроводительныеДокументы.Удалить("ОснованиеОтгрузки");
	СопроводительныеДокументы.Удалить("ОснованиеПолномочий");
	
	// Сопроводительные документы
	ОбщаяСтруктура.Вставить("СопроводительныеДокументы", СопроводительныеДокументы);
	
	// Транспорт и все с ним связанное 
	ОбщаяСтруктура.Вставить(
		"ТранспортноеСредство", ТранспортНаВыгрузку(ДанныеДокумента.ТранспортныеСредства));
	
	ОбщаяСтруктура.ТранспортноеСредство.Вставить("Прицеп",      ПрицепыНаВыгрузку(ДанныеДокумента.ТранспортныеСредства));
	ОбщаяСтруктура.ТранспортноеСредство.Вставить("СпецУсловия", СпецУсловия(ДанныеДокумента.СпецРазрешения));
	
	ОбщаяСтруктура.Вставить("Водители", ВодителиНаВыгрузку(ДанныеДокумента.Водители, ДанныеДокумента.ПутевыеЛисты));
	
	// Отметки, штрафы, акты
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Перечисления.Saby_ТипТитулаЭтрН.Погрузка);
	
	ОбщаяСтруктура.Вставить("Отметки", ОтметкиПоТитулу(ДанныеДокумента, Отбор));
	
	// Груз
	ОбщаяСтруктура.Вставить("Груз", ДанныеГруза(ДанныеДокумента));
	
	// Заявка на перевозку
	ОбщаяСтруктура.Вставить("ЗаявкаНаПеревозку", ЗаявкаНаПеревозку(РеквизитыОбъекта));
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110340" Перевозчик приемка груза
//
// Параметры:
// 	ДанныеДокумента - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
Функция ТитулПолучениеГруза(ДанныеДокумента)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
    Замечания = Новый Структура;
	
	ПриемкаДата = СтруктураВремя(РеквизитыОбъекта.Перевозчик_ПриемкаДатаВремя);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяПостановки", ПриемкаДата, Истина);
	
	ПрибылДата = СтруктураВремя(РеквизитыОбъекта.Перевозчик_ПриемкаДатаВремяПрибыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяПрибытия", ПрибылДата, Истина);
	
	УбылДата = СтруктураВремя(РеквизитыОбъекта.Перевозчик_ПриемкаДатаВремяУбыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяУбытия", УбылДата, Истина);
	
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ВыполненныеРаботы", 
		РеквизитыОбъекта.Перевозчик_ЗамечанияПоПогрузочнымРаботам);
		
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "КоличествоМест",
		РеквизитыОбъекта.Перевозчик_ПогрузкаЗамечанияПоКоличеству);
		
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "МассаГруза",
		РеквизитыОбъекта.Перевозчик_ПогрузкаЗамечанияПоМассе);
		
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "СостояниеГруза",
		РеквизитыОбъекта.Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза);
	
	Погрузка = Новый Структура;
	Погрузка.Вставить("ЗамечанияПеревозчика", Замечания);
	
	ОбщаяСтруктура = Новый Структура;
	ОбщаяСтруктура.Вставить("Погрузка", Погрузка);
	
	// Отметки, штрафы, акты
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Перечисления.Saby_ТипТитулаЭтрН.ПолучениеГруза);
	
	ОбщаяСтруктура.Вставить("Отметки", ОтметкиПоТитулу(ДанныеДокумента, Отбор));
		
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110341" Грузополучатель получение груза
//
// Параметры:
// 	ДанныеДокумента - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулПриемкаГруза(ДанныеДокумента)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
    ОбщаяСтруктура = Новый Структура;
	
	ПрибылДата = СтруктураВремя(РеквизитыОбъекта.Выгрузка_ДатаВремяПрибыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(ОбщаяСтруктура, "ДатаВремяПрибытия", ПрибылДата, Истина);
	
	УбылДата = СтруктураВремя(РеквизитыОбъекта.Выгрузка_ДатаВремяУбыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(ОбщаяСтруктура, "ДатаВремяУбытия", УбылДата, Истина);
			
	Груз = Новый Структура;
	
	Масса = Новый Структура;
	Масса.Вставить("Брутто",           РеквизитыОбъекта.Выгрузка_МассаБрутто);
	Масса.Вставить("Нетто",            РеквизитыОбъекта.Выгрузка_МассаНетто);
	Масса.Вставить(
		"МетодОпределения",
		Перечисления.Saby_МетодОпределенияМассы.КодПоЗначению(РеквизитыОбъекта.Выгрузка_МассаМетодРасчета));
	
	Груз.Вставить("Масса", Масса);
	
	Груз.Вставить("КоличествоМест", РеквизитыОбъекта.Выгрузка_КоличествоМест);
	Груз.Вставить("Объем",          РеквизитыОбъекта.Выгрузка_Объем);

	Состояние = Новый Структура;
	ДобавитьСвойствоВСтруктуруСКонтролем(Состояние, "Общее", РеквизитыОбъекта.Выгрузка_Состояние);
	
	ДобавитьСвойствоВСтруктуруСКонтролем(ОбщаяСтруктура, "Состояние", Состояние);
	ДобавитьСвойствоВСтруктуруСКонтролем(Груз,           "Состояние", Состояние);
	
	ОбщаяСтруктура.Вставить("Груз", Груз);
	
	// Груз - пока игнорим.... хз надо ли мне выгружать
	// КоличествоМест
	// КоличествоПаллет
	// МассаБрутто
	// МассаНетто
	// Наименование
	// Объем
	// Плотность
	// Состояние
	
	// Отметки, штрафы, акты
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза);
	
	Итог = Новый Структура;
	Итог.Вставить("Выгрузка",      ОбщаяСтруктура);
	Итог.Вставить("Отметки",       ОтметкиПоТитулу(ДанныеДокумента, Отбор));
	Итог.Вставить("ПунктВыгрузки", ПунктВыгрузки(РеквизитыОбъекта));
	
	Возврат Итог;
	
КонецФункции

// Титул "1110342" Выдача груза перевозчиком
//
// Параметры:
// 	ДанныеДокумента - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулВыдачаГруза(ДанныеДокумента)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	Замечания = Новый Структура;
	
	ПостановкаДата = СтруктураВремя(РеквизитыОбъекта.Перевозчик_ВыгрузкаДатаВремя);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяПостановки", ПостановкаДата, Истина);
	
	ПрибылДата = СтруктураВремя(РеквизитыОбъекта.Перевозчик_ВыгрузкаДатаВремяПрибыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяПрибытия", ПрибылДата, Истина); 
	
	УбылДата = СтруктураВремя(РеквизитыОбъекта.Перевозчик_ВыгрузкаДатаВремяУбыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяУбытия", УбылДата, Истина);
	
	ДобавитьСвойствоВСтруктуруСКонтролем(
		Замечания, "ВыполненныеРаботы", РеквизитыОбъекта.Перевозчик_ЗамечанияПоРазгрузочнымРаботам);
	ДобавитьСвойствоВСтруктуруСКонтролем(
		Замечания, "СостояниеГруза",    РеквизитыОбъекта.Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза);
	
	СтруктураЗамечаний = Новый Структура;
	СтруктураЗамечаний.Вставить("ЗамечанияПеревозчика", Замечания);
	
	// Отметки, штрафы, акты
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Перечисления.Saby_ТипТитулаЭтрН.ВыдачаГруза);
	Отметки = ОтметкиПоТитулу(ДанныеДокумента, Отбор);
	
	ОбщаяСтруктура = Новый Структура;
	ОбщаяСтруктура.Вставить("Выгрузка", СтруктураЗамечаний);
	ОбщаяСтруктура.Вставить("Отметки",  Отметки);
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110343" Перевозчик переадресовка
//
// Параметры:
// 	ДанныеТитула - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулПереадресовка(ДанныеТитула)

	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;
	
	// Пункт выгрузки
	ОбщаяСтруктура.Вставить("ПунктВыгрузки", ПунктВыгрузки(ДанныеТитула));
	
	// Грузополучатель
	ОбщаяСтруктура.Вставить("Грузополучатель",  ДанныеЮрЛица("Получатель", ДанныеТитула));
	
	ОбщаяСтруктура.Вставить("Причина", ДанныеТитула.Причина);
	
	Переадресовка = Новый Структура;
	Переадресовка.Вставить("ДатаВремя", СтруктураВремя(ДанныеТитула.Переадресовка_ДатаВремя, , Истина));
	
	// Отметки
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Перечисления.Saby_ТипТитулаЭтрН.Переадресовка);
	
	ОбщаяСтруктура.Вставить("Отметки", ОтметкиПоТитулу(ДанныеТитула, Отбор));
		
	// Основание
	Основание = ДанныеТитула.ПереадресовкаНаОсновании;
	Если ЗначениеЗаполнено(Основание) Тогда  
		
		ДанныеДок = РеквизитыОдиночногоДокументаЭТрН(Основание);
		
		Переадресовка.Вставить("Основание", Новый Структура);
			
		ДанныеДок.Вставить("ДатаВремя", СтруктураВремя(ДанныеДок.ДатаВремя, , Истина)); // меняем формат даты
		Переадресовка.Основание.Вставить("Документ", ДанныеДок);
		
	КонецЕсли;
	
	ОбщаяСтруктура.Вставить("Переадресовка", Переадресовка);
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1167009" Уведомление о переадресовке
//
// Параметры:
// 	ДанныеТитула - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулУведомлениеОПереадресовке(ДанныеТитула)

	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;
	
	// Пункт выгрузки
	ОбщаяСтруктура.Вставить("ПунктВыгрузки", ПунктВыгрузки(ДанныеТитула));
	
	// Грузополучатель
	Если ЗначениеЗаполнено(ДанныеТитула.Получатель) Тогда 
		ОбщаяСтруктура.Вставить("Грузополучатель", ДанныеЮрЛица("Получатель", ДанныеТитула));
	КонецЕсли;
	
	Уведомление = Новый Структура;	
	Уведомление.Вставить("Причина", ДанныеТитула.Причина);
	
	Если ЗначениеЗаполнено(ДанныеТитула.ОформилСтруктура) Тогда
		Оформил = Оформил(ДанныеТитула.ОформилСтруктура);
		Уведомление.Вставить("Отправитель", Оформил);
	КонецЕсли;
	
	// Основание
	Основание = ДанныеТитула.ПереадресовкаНаОсновании;
	Если ЗначениеЗаполнено(Основание) Тогда 
		
	    ДанныеДокумента = РеквизитыОдиночногоДокументаЭТрН(Основание);
				
		СопроводительныеДокументы = Новый Структура;
		СопроводительныеДокументы.Вставить("Отгрузка", ДанныеДокумента);
		
		ОбщаяСтруктура.Вставить("СопроводительныеДокументы", СопроводительныеДокументы);
		
	КонецЕсли;
		
	Переадресовка = Новый Структура;
	Переадресовка.Вставить("Уведомление", Уведомление);
	
	ОбщаяСтруктура.Вставить("Переадресовка", Переадресовка);
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110344" Перевозчик замена водителя 
//
// Параметры:
// 	ДанныеТитула - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулЗаменаВодителя(ДанныеТитула)
	
	МассивДокументов = Новый Массив();
	
	ОснованиеЗамены = ДанныеТитула.ЗаменаВодителейТС_НаОсновании;
	Если ЗначениеЗаполнено(ОснованиеЗамены)
		И ТипЗнч(ОснованиеЗамены) = Тип("СправочникСсылка.Saby_ДокументыТрН") Тогда
		МассивДокументов.Добавить(ОснованиеЗамены);
	КонецЕсли;
	
	ОснованиеПередачиГрузаТС = ДанныеТитула.ОснованиеПередачиГрузаТС;
	Если ЗначениеЗаполнено(ОснованиеПередачиГрузаТС) Тогда
		МассивДокументов.Добавить(ОснованиеПередачиГрузаТС);
	КонецЕсли;
	
    ДанныеДокументов = РеквизитыДокументовСбис(МассивДокументов);
	
	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;
	ОбщаяСтруктура.Вставить("ТранспортноеСредство", Новый Структура);
	
	// Водители + основание передачи....
	Если ЗначениеЗаполнено(ДанныеТитула.Водители) Тогда 
		Водители = ВодителиНаВыгрузку(ДанныеТитула.Водители, ДанныеТитула.ПутевыеЛисты);
		ОбщаяСтруктура.Вставить("Водители", Водители);
	КонецЕсли;
	
	// Транспорт и все с ним связанное
	Транспорт = ТранспортНаВыгрузку(ДанныеТитула.ТранспортныеСредства);
	Если ЗначениеЗаполнено(Транспорт.РегНомер) Тогда
		ОбщаяСтруктура.ТранспортноеСредство = Транспорт;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеТитула.СпецРазрешения) Тогда
		СпецУсловия = СпецУсловия(ДанныеТитула.СпецРазрешения);
		ОбщаяСтруктура.ТранспортноеСредство.Вставить("СпецУсловия", СпецУсловия); 
	КонецЕсли;

	Если ЗначениеЗаполнено(ОснованиеПередачиГрузаТС) Тогда
		
		ДанныеДокументаПередачи = ДанныеДокументов.Получить(ОснованиеПередачиГрузаТС);
		
		ДокументПередачи = Новый Структура; 
		ДокументПередачи.Вставить("ПередачаГруза", ДанныеДокументаПередачи);
		
		ОбщаяСтруктура.ТранспортноеСредство.Вставить("Документ", ДокументПередачи);
		
	КонецЕсли;
	
	// Прицепы
	Прицепы = ПрицепыНаВыгрузку(ДанныеТитула.ТранспортныеСредства);
	Если Прицепы.Количество() > 0 Тогда
		ОбщаяСтруктура.ТранспортноеСредство.Вставить("Прицеп", Прицепы);
	КонецЕсли;
	
	// Отметки
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Перечисления.Saby_ТипТитулаЭтрН.ЗаменаВодителяТС);
	
	ОбщаяСтруктура.Вставить("Отметки", ОтметкиПоТитулу(ДанныеТитула, Отбор));
	
	// Основание
	Если ЗначениеЗаполнено(ОснованиеЗамены) Тогда  
		
		ДанныеОснования = Новый Структура;
		
		Если ТипЗнч(ОснованиеЗамены) = Тип("Строка") Тогда 
			ДанныеОснования.Вставить("Текст", ОснованиеЗамены);
		Иначе 	
					
			ДанныеДок = ДанныеДокументов.Получить(ОснованиеЗамены);
			ДанныеДок.Удалить("Тип");
			ДанныеДок.Удалить("Ссылка");
			
			ДанныеОснования.Вставить("Документ", ДанныеДок);
			
		КонецЕсли;
		
		ЗаменаВодителяТС = Новый Структура;
		ЗаменаВодителяТС.Вставить("Основание", ДанныеОснования);
		ЗаменаВодителяТС.Вставить("ДатаВремя", СтруктураВремя(ДанныеТитула.ДатаВремяЗамены, , Истина));
		
		ОбщаяСтруктура.Вставить("ЗаменаВодителяТС", ЗаменаВодителяТС);
		
	КонецЕсли;
		
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110345" Изменение стоимости 
//
// Параметры:
// 	ДанныеТитула - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулИзменениеСтоимости(ДанныеТитула)
	
	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;

    Перевозчик = Новый Структура;
	Перевозчик.Вставить("Название", Новый Структура);
	Перевозчик.Название.Вставить("Полное", СокрЛП(ДанныеТитула.Перевозчик));
	
	ПоРасчетномуСчету = ДанныеТитула.Свойство("РасчетныйСчетПеревозчик") 
		И ЗначениеЗаполнено(ДанныеТитула.РасчетныйСчетПеревозчик);
	
	Если ПоРасчетномуСчету Тогда		
		ДанныеБанкСчета = РеквизитыБанковскогоСчета(ДанныеТитула.РасчетныйСчетПеревозчик);		
	Иначе 	
				
		ДанныеБанкСчета = Новый Структура;
		ДанныеБанкСчета.Вставить("НомерСчета", ДанныеТитула.НомерСчетаПеревозчик);
		ДанныеБанкСчета.Вставить("Банк",       Новый Структура);
		
		// Банк
		ДанныеБанкСчета.Банк.Вставить("Наименование", Новый Структура);
		ДанныеБанкСчета.Банк.Наименование.Вставить("Полное", ДанныеТитула.БанкНазваниеПеревозчик);

		ДанныеБанкСчета.Банк.Вставить("БИК",      ДанныеТитула.БанкБИКПеревозчик);
		ДанныеБанкСчета.Банк.Вставить("КоррСчет", ДанныеТитула.БанкКоррСчетПеревозчик);
		
	КонецЕсли;
	
	Перевозчик.Вставить("Реквизиты", Новый Структура);
	Перевозчик.Реквизиты.Вставить("Банковские", ДанныеБанкСчета);
	
	ОбщаяСтруктура.Вставить("Грузоперевозчик", Перевозчик);
	
	СтруктураСтоимости = Новый Структура;	
	СтруктураСтоимости.Вставить("ВключаяНДС",  ДанныеТитула.Сумма); 
	СтруктураСтоимости.Вставить("БезНДС",      ДанныеТитула.СуммаБезНДС);     
	СтруктураСтоимости.Вставить("Расчет",      ДанныеТитула.Условия);	
		
	// рубль по умолчанию. RUB - символьный код. 
	// добавить валюту. реквизит документа. Наименование - символьный код
	СтруктураСтоимости.Вставить("Валюта", Новый Структура);
	СтруктураСтоимости.Валюта.Вставить("Код",          "643");
	СтруктураСтоимости.Валюта.Вставить("Наименование", "Российский рубль"); 

	// Налог
	СтруктураСтоимости.Вставить("Налог", Новый Структура);
	СтруктураСтоимости.Налог.Вставить("Ставка", Saby_ТНОбщегоНазначенияСервер.ЗначениеСтавкиНДС(ДанныеТитула.Ставка));
    СтруктураСтоимости.Налог.Вставить("Сумма",  ДанныеТитула.СуммаНДС);
	
	ОбщаяСтруктура.Вставить("СтоимостьПеревозки", СтруктураСтоимости);
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110346" Согласование стоимости 
//
// Параметры:
// 	ДанныеТитула - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулСогласованиеСтоимости(ДанныеТитула)

	// Собираем общую структуру документа	
	ОбщаяСтруктура = Новый Структура; 
	
	КлючПолногоНаименования = "Полное";
	
	Грузоотправитель = Новый Структура;
	Грузоотправитель.Вставить("Название", Новый Структура);
	Грузоотправитель.Название.Вставить(КлючПолногоНаименования, СокрЛП(ДанныеТитула.Отправитель));
	
	ПоРасчетномуСчету = ДанныеТитула.Свойство("РасчетныйСчет") 
		И ЗначениеЗаполнено(ДанныеТитула.РасчетныйСчет);
	
	Если ПоРасчетномуСчету Тогда 				
		ДанныеБанкСчета = РеквизитыБанковскогоСчета(ДанныеТитула.РасчетныйСчет);		
	Иначе 	
						
		ДанныеБанкСчета = Новый Структура;
		ДанныеБанкСчета.Вставить("НомерСчета", ДанныеТитула.НомерСчета);
		ДанныеБанкСчета.Вставить("Банк",       Новый Структура);
		
		// Банк
		ДанныеБанкСчета.Банк.Вставить("Наименование", Новый Структура);
		ДанныеБанкСчета.Банк.Наименование.Вставить(КлючПолногоНаименования, ДанныеТитула.БанкНазвание);

		ДанныеБанкСчета.Банк.Вставить("БИК",      ДанныеТитула.БанкБИК);
		ДанныеБанкСчета.Банк.Вставить("КоррСчет", ДанныеТитула.БанкКоррСчет);
		
	КонецЕсли;
		
	Грузоотправитель.Вставить("Реквизиты", Новый Структура);
	Грузоотправитель.Реквизиты.Вставить("Банковские", ДанныеБанкСчета);
		
	ОбщаяСтруктура.Вставить("Грузоотправитель", Грузоотправитель);
		
	// из формы
	Если ДанныеТитула.ТипПлательщик <> "Отправитель" Тогда 
		
		ИнойПлательщик = Новый Структура;
		
		ИнойПлательщик.Вставить("Название", Новый Структура);
		ИнойПлательщик.Название.Вставить(КлючПолногоНаименования, СокрЛП(ДанныеТитула.Плательщик));
		
		// Основание                                          
		Основание = ДанныеТитула.ОснованиеОплаты;
		Если ЗначениеЗаполнено(Основание) Тогда 
			
			ДанныеДокумента = РеквизитыОдиночногоДокументаЭТрН(Основание);
			
			ИнойПлательщик.Вставить("Основание", ДанныеДокумента);
						
		КонецЕсли;
		
		ОбщаяСтруктура.Вставить("ИнойПлательщик", ИнойПлательщик); 		
		
	КонецЕсли;
		
	Возврат ОбщаяСтруктура;
	
КонецФункции

Функция ВыгрузкаДанныеПогрузка(Ссылка, ДопДанные)
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Номер");
	Реквизиты.Добавить("Дата");
	Реквизиты.Добавить("Отправитель_СопроводительнаяВедомость");
	Реквизиты.Добавить("Заказчик_Договор");
	Реквизиты.Добавить("Отгрузка_НаОснованииДокумент");
	Реквизиты.Добавить("Отгрузка_ОтветственныйНаОсновании");
	Реквизиты.Добавить("ИнициаторПереадресацииПодтверждение");
	Реквизиты.Добавить("Отправитель");
	Реквизиты.Добавить("Получатель");
	Реквизиты.Добавить("Перевозчик");
	Реквизиты.Добавить("Составитель");
	Реквизиты.Добавить("Заказчик");
	Реквизиты.Добавить("РасчетПеревозки");
	Реквизиты.Добавить("Отправитель_ДоставитьДо");
	Реквизиты.Добавить("АдресДоставкиЗначение");
	Реквизиты.Добавить("Отправитель_АдресДоставки");
	Реквизиты.Добавить("Погрузка_ДатаВремя");
	Реквизиты.Добавить("Погрузка_Адрес");
	Реквизиты.Добавить("АдресПогрузкиЗначение");
	Реквизиты.Добавить("Отправитель_ТемператураОт");
	Реквизиты.Добавить("Отправитель_ТемператураДо");
	Реквизиты.Добавить("Отправитель_ВлажностьОт");
	Реквизиты.Добавить("Отправитель_ВлажностьДо");
	Реквизиты.Добавить("ИнициаторПереадресации");
	Реквизиты.Добавить("Отправитель_НормыПеревозки");
	Реквизиты.Добавить("Отправитель_ОграничениеСкорости");
	Реквизиты.Добавить("Отправитель_Пломба");
	Реквизиты.Добавить("Отправитель_ДоставитьСрок");
	Реквизиты.Добавить("Отправитель_ПерегрузкаЗапрещена");
	Реквизиты.Добавить("Владелец_Тип");
	Реквизиты.Добавить("Отгрузчик");
	Реквизиты.Добавить("ВладелецОбъекта");
	Реквизиты.Добавить("Владелец_НеизвестенПричина");
	Реквизиты.Добавить("Погрузка_КоличествоМест");
	Реквизиты.Добавить("Погрузка_Масса");
	Реквизиты.Добавить("Погрузка_МассаМетодРасчета");
	Реквизиты.Добавить("Погрузка_Состояние");
	Реквизиты.Добавить("Погрузка_ДатаВремяПрибыл");
	Реквизиты.Добавить("Погрузка_ДатаВремяУбыл");
	Реквизиты.Добавить("Отгрузка_ОтветственныйДолжность");
	Реквизиты.Добавить("Отгрузка_ОтветственныйСтруктура");
	Реквизиты.Добавить("Отправитель_ЗаявкаДата");
	Реквизиты.Добавить("Отправитель_ЗаявкаНомер");
	Реквизиты.Добавить("Отправитель_Экспедитор");
	Реквизиты.Добавить("Составитель_НаОснованииДокумент");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("СопроводительныеДокументы");
	Таблицы.Добавить("ДанныеЮрЛиц");
	Таблицы.Добавить("КонтактныеДанные");
	Таблицы.Добавить("ТранспортныеСредства");
	Таблицы.Добавить("СпецРазрешения");
	Таблицы.Добавить("Водители");
	Таблицы.Добавить("ПутевыеЛисты");
	Таблицы.Добавить("Отметки");
	Таблицы.Добавить("Акты");
	Таблицы.Добавить("Штрафы");
	Таблицы.Добавить("Грузы");
	Таблицы.Добавить("Контейнеры");
	Таблицы.Добавить("Маркировки");
	Таблицы.Добавить("СведенияГосСистем");
	Таблицы.Добавить("ОпасныеГрузы");
	
	ДобавитьДополнительныеДанные(ДопДанные, Реквизиты, Таблицы);
	
	Возврат ДанныеИзБД(Ссылка, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеПолучениеГруза(Ссылка, ДопДанные)
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Перевозчик_ПриемкаДатаВремя");
	Реквизиты.Добавить("Перевозчик_ПриемкаДатаВремяПрибыл");
	Реквизиты.Добавить("Перевозчик_ПриемкаДатаВремяУбыл");
	Реквизиты.Добавить("Перевозчик_ЗамечанияПоПогрузочнымРаботам");
	Реквизиты.Добавить("Перевозчик_ПогрузкаЗамечанияПоКоличеству");
	Реквизиты.Добавить("Перевозчик_ПогрузкаЗамечанияПоМассе");
	Реквизиты.Добавить("Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("Отметки");
	Таблицы.Добавить("Акты");
	Таблицы.Добавить("Штрафы");
	
	ДобавитьДополнительныеДанные(ДопДанные, Реквизиты, Таблицы);
	
	Возврат ДанныеИзБД(Ссылка, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеПриемкаГруза(Ссылка, ДопДанные)
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Выгрузка_ДатаВремяПрибыл");
	Реквизиты.Добавить("Выгрузка_ДатаВремяУбыл");
	Реквизиты.Добавить("Выгрузка_МассаБрутто");
	Реквизиты.Добавить("Выгрузка_МассаНетто");
	Реквизиты.Добавить("Выгрузка_МассаМетодРасчета");
	Реквизиты.Добавить("Выгрузка_КоличествоМест");
	Реквизиты.Добавить("Выгрузка_Объем");
	Реквизиты.Добавить("Выгрузка_Состояние");
	Реквизиты.Добавить("Отправитель_ДоставитьДо");
	Реквизиты.Добавить("АдресДоставкиЗначение");
	Реквизиты.Добавить("Отправитель_АдресДоставки");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("Отметки");
	Таблицы.Добавить("Акты");
	Таблицы.Добавить("Штрафы");
	
	ДобавитьДополнительныеДанные(ДопДанные, Реквизиты, Таблицы);
	
	Возврат ДанныеИзБД(Ссылка, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеВыдачаГруза(Ссылка, ДопДанные)
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Перевозчик_ВыгрузкаДатаВремя");
	Реквизиты.Добавить("Перевозчик_ВыгрузкаДатаВремяПрибыл");
	Реквизиты.Добавить("Перевозчик_ВыгрузкаДатаВремяУбыл");
	Реквизиты.Добавить("Перевозчик_ЗамечанияПоРазгрузочнымРаботам");
	Реквизиты.Добавить("Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("Отметки");
	Таблицы.Добавить("Акты");
	Таблицы.Добавить("Штрафы");
	
	ДобавитьДополнительныеДанные(ДопДанные, Реквизиты, Таблицы);
	
	Возврат ДанныеИзБД(Ссылка, Реквизиты, Таблицы);
	
КонецФункции

Процедура ДобавитьДополнительныеДанные(ДопДанные, Реквизиты, Таблицы)
	
	Если ДопДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопДанные.Свойство("Реквизиты") Тогда
		Для Каждого Реквизит Из ДопДанные.Реквизиты Цикл
			Реквизиты.Добавить(Реквизит);
		КонецЦикла;
	КонецЕсли;
	
	Если ДопДанные.Свойство("Таблицы") Тогда
		Для Каждого Таблица Из ДопДанные.Таблицы Цикл
			Таблицы.Добавить(Таблица);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеИзБД(Ссылка, Реквизиты, Таблицы)
	
	РезультатФункции = Новый Структура;
	
	// Ссылка всегда должна быть
	Реквизиты.Добавить("Ссылка");
	
	ДобавитьРеквизитыИзБД(РезультатФункции, Ссылка, Реквизиты);
	
	ДобавитьТаблицыИзБД(РезультатФункции, Ссылка, Таблицы);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДобавитьРеквизитыИзБД(СтруктураДанных, Ссылка, ПсевдонимыРеквизитов)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(
		"ВЫБРАТЬ
		|	Saby_ТН.Ссылка КАК Ссылка,
		|	Saby_ТН.Номер КАК Номер,
		|	Saby_ТН.Дата КАК Дата,
		|	Saby_ТН.ВладелецОбъекта КАК ВладелецОбъекта,
		|	Saby_ТН.Владелец_НеизвестенПричина КАК Владелец_НеизвестенПричина,
		|	Saby_ТН.Владелец_Тип КАК Владелец_Тип,
		|	Saby_ТН.Выгрузка_ДатаВремя КАК Выгрузка_ДатаВремя,
		|	Saby_ТН.Выгрузка_ДатаВремяПрибыл КАК Выгрузка_ДатаВремяПрибыл,
		|	Saby_ТН.Выгрузка_ДатаВремяУбыл КАК Выгрузка_ДатаВремяУбыл,
		|	Saby_ТН.Выгрузка_КоличествоМест КАК Выгрузка_КоличествоМест,
		|	Saby_ТН.Выгрузка_МассаБрутто КАК Выгрузка_МассаБрутто,
		|	Saby_ТН.Выгрузка_МассаНетто КАК Выгрузка_МассаНетто,
		|	Saby_ТН.Выгрузка_МассаМетодРасчета КАК Выгрузка_МассаМетодРасчета,
		|	Saby_ТН.Выгрузка_Состояние КАК Выгрузка_Состояние,
		|	Saby_ТН.Отправитель КАК Отправитель,
		|	Saby_ТН.Отправитель_АдресДоставки КАК Отправитель_АдресДоставки,
		|	Saby_ТН.Отправитель_ВлажностьДо КАК Отправитель_ВлажностьДо,
		|	Saby_ТН.Отправитель_ВлажностьОт КАК Отправитель_ВлажностьОт,
		|	Saby_ТН.Отправитель_ДоставитьДо КАК Отправитель_ДоставитьДо,
		|	Saby_ТН.Отправитель_ДоставитьСрок КАК Отправитель_ДоставитьСрок,
		|	Saby_ТН.Отправитель_ЗаявкаДата КАК Отправитель_ЗаявкаДата,
		|	Saby_ТН.Отправитель_ЗаявкаНомер КАК Отправитель_ЗаявкаНомер,
		|	Saby_ТН.ИнициаторПереадресации КАК ИнициаторПереадресации,
		|	Saby_ТН.ИнициаторПереадресацииПодтверждение КАК ИнициаторПереадресацииПодтверждение,
		|	Saby_ТН.Отправитель_НормыПеревозки КАК Отправитель_НормыПеревозки,
		|	Saby_ТН.Отправитель_ОграничениеСкорости КАК Отправитель_ОграничениеСкорости,
		|	Saby_ТН.Отправитель_ПерегрузкаЗапрещена КАК Отправитель_ПерегрузкаЗапрещена,
		|	Saby_ТН.Отправитель_Пломба КАК Отправитель_Пломба,
		|	Saby_ТН.Отправитель_СопроводительнаяВедомость КАК Отправитель_СопроводительнаяВедомость,
		|	Saby_ТН.Отправитель_ТемператураДо КАК Отправитель_ТемператураДо,
		|	Saby_ТН.Отправитель_ТемператураОт КАК Отправитель_ТемператураОт,
		|	Saby_ТН.Отправитель_Экспедитор КАК Отправитель_Экспедитор,
		|	Saby_ТН.Получатель КАК Получатель,
		|	Saby_ТН.Комментарий КАК Комментарий,
		|	Saby_ТН.Отгрузка_НаОснованииДокумент КАК Отгрузка_НаОснованииДокумент,
		|	Saby_ТН.Отгрузчик КАК Отгрузчик,
		|	Saby_ТН.Отгрузка_ОтветственныйСтруктура КАК Отгрузка_ОтветственныйСтруктура,
		|	Saby_ТН.Отгрузка_ОтветственныйНаОсновании КАК Отгрузка_ОтветственныйНаОсновании,
		|	Saby_ТН.Отгрузка_ОтветственныйДолжность КАК Отгрузка_ОтветственныйДолжность,
		|	Saby_ТН.Перевозчик КАК Перевозчик,
		|	Saby_ТН.Перевозчик_ВыгрузкаДатаВремя КАК Перевозчик_ВыгрузкаДатаВремя,
		|	Saby_ТН.Перевозчик_ВыгрузкаДатаВремяПрибыл КАК Перевозчик_ВыгрузкаДатаВремяПрибыл,
		|	Saby_ТН.Перевозчик_ВыгрузкаДатаВремяУбыл КАК Перевозчик_ВыгрузкаДатаВремяУбыл,
		|	Saby_ТН.Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза КАК Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза,
		|	Saby_ТН.Перевозчик_ЗамечанияПоПогрузочнымРаботам КАК Перевозчик_ЗамечанияПоПогрузочнымРаботам,
		|	Saby_ТН.Перевозчик_ЗамечанияПоРазгрузочнымРаботам КАК Перевозчик_ЗамечанияПоРазгрузочнымРаботам,
		|	Saby_ТН.Перевозчик_ПогрузкаЗамечанияПоКоличеству КАК Перевозчик_ПогрузкаЗамечанияПоКоличеству,
		|	Saby_ТН.Перевозчик_ПогрузкаЗамечанияПоМассе КАК Перевозчик_ПогрузкаЗамечанияПоМассе,
		|	Saby_ТН.Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза КАК Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза,
		|	Saby_ТН.Перевозчик_ПриемкаДатаВремя КАК Перевозчик_ПриемкаДатаВремя,
		|	Saby_ТН.Перевозчик_ПриемкаДатаВремяПрибыл КАК Перевозчик_ПриемкаДатаВремяПрибыл,
		|	Saby_ТН.Перевозчик_ПриемкаДатаВремяУбыл КАК Перевозчик_ПриемкаДатаВремяУбыл,
		|	Saby_ТН.Погрузка_Адрес КАК Погрузка_Адрес,
		|	Saby_ТН.Погрузка_ДатаВремя КАК Погрузка_ДатаВремя,
		|	Saby_ТН.Погрузка_ДатаВремяПрибыл КАК Погрузка_ДатаВремяПрибыл,
		|	Saby_ТН.Погрузка_ДатаВремяУбыл КАК Погрузка_ДатаВремяУбыл,
		|	Saby_ТН.Погрузка_КоличествоМест КАК Погрузка_КоличествоМест,
		|	Saby_ТН.Погрузка_Масса КАК Погрузка_Масса,
		|	Saby_ТН.Погрузка_МассаМетодРасчета КАК Погрузка_МассаМетодРасчета,
		|	Saby_ТН.Погрузка_Состояние КАК Погрузка_Состояние,
		|	Saby_ТН.Приемка_МассаБрутто КАК Приемка_МассаБрутто,
		|	Saby_ТН.Приемка_МассаНетто КАК Приемка_МассаНетто,
		|	Saby_ТН.Выгрузка_Объем КАК Выгрузка_Объем,
		|	Saby_ТН.Приемка_КоличествоМест КАК Приемка_КоличествоМест,
		|	Saby_ТН.Направление КАК Направление,
		|	Saby_ТН.Заказчик КАК Заказчик,
		|	Saby_ТН.Заказчик_Договор КАК Заказчик_Договор,
		|	Saby_ТН.Представление КАК Представление,
		|	Saby_ТН.Валюта КАК Валюта,
		|	Saby_ТН.ДатаИзменения КАК ДатаИзменения,
		|	Saby_ТН.АдресДоставкиЗначение КАК АдресДоставкиЗначение,
		|	Saby_ТН.АдресПогрузкиЗначение КАК АдресПогрузкиЗначение,
		|	Saby_ТН.ЗаменаВодителейТС_НаОсновании КАК ЗаменаВодителейТС_НаОсновании,
		|	Saby_ТН.Составитель КАК Составитель,
		|	Saby_ТН.Составитель_НаОснованииДокумент КАК Составитель_НаОснованииДокумент
		|ИЗ
		|	Документ.Saby_ТранспортнаяНакладная КАК Saby_ТН
		|ГДЕ
		|	Saby_ТН.Ссылка = &Ссылка");
	
	НужныеКолонки = Новый Соответствие;
	Для Каждого ПсевдонимРеквизита Из ПсевдонимыРеквизитов Цикл
		НужныеКолонки.Вставить(ПсевдонимРеквизита, Истина);
	КонецЦикла;
	
	Колонки = СхемаЗапроса.ПакетЗапросов[0].Колонки;
	
	ИндексКолонки = 0;
	Пока ИндексКолонки < Колонки.Количество() Цикл
		
		Псевдоним = Колонки[ИндексКолонки].Псевдоним;
		
		Если НужныеКолонки[Псевдоним] = Неопределено Тогда
			Колонки.Удалить(ИндексКолонки);
		Иначе
			ИндексКолонки = ИндексКолонки + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	ЗапросДанных.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивДанных = ОбщегоНазначения.ТаблицаЗначенийВМассив(ЗапросДанных.Выполнить().Выгрузить());
	
	СтруктураДанных.Вставить("Реквизиты", МассивДанных[0]);
	
КонецПроцедуры

Процедура ДобавитьТаблицыИзБД(СтруктураДанных, Ссылка, Таблицы)
	
	МассивЗапросов = Новый Массив;
	
	УниверсальныйШаблонЗапроса =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Документ.Saby_ТранспортнаяНакладная.%1 КАК ТЧТранспортнойНакладной
	|ГДЕ
	|	ТЧТранспортнойНакладной.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Для Каждого ИмяТаблицы Из Таблицы Цикл
		
		Если ИмяТаблицы = "Грузы" Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Saby_ТН_Грузы.Ссылка КАК СсылкаДокумент,
			|	Saby_ТН_Грузы.НомерСтроки КАК НомерСтроки,
			|	Saby_ТН_Грузы.Тип КАК Тип,
			|	Saby_ТН_Грузы.Наименование КАК Наименование,
			|	Saby_ТН_Грузы.Заказчик КАК Заказчик,
			|	Saby_ТН_Грузы.Состояние КАК Состояние,
			|	Saby_ТН_Грузы.Количество КАК КоличествоМест,
			|	Saby_ТН_Грузы.Количество КАК Количество,
			|	Saby_ТН_Грузы.МассаБрутто КАК МассаБрутто,
			|	Saby_ТН_Грузы.Объем КАК Объем,
			|	Saby_ТН_Грузы.СпособУпаковки КАК Упаковка,
			|	Saby_ТН_Грузы.СпособУпаковки КАК СпособУпаковки,
			|	Saby_ТН_Грузы.ВидТары КАК ВидТары,
			|	Saby_ТН_Грузы.МассаНетто КАК МассаНетто,
			|	Saby_ТН_Грузы.Длина КАК Длина,
			|	Saby_ТН_Грузы.Ширина КАК Ширина,
			|	Saby_ТН_Грузы.Высота КАК Высота,
			|	Saby_ТН_Грузы.КоличествоПаллет КАК КоличествоПаллет,
			|	Saby_ТН_Грузы.Стоимость КАК СтоимостьВключаяНДС,
			|	Saby_ТН_Грузы.Плотность КАК Плотность,
			|	Saby_ТН_Грузы.КлючСтроки КАК КлючСтроки,
			|	Saby_ТН_Грузы.Валюта КАК Валюта,
			|	Saby_ТН_Грузы.НаименованиеГосСистемы КАК НаименованиеГосСистемы,
			|	Saby_ТН_Грузы.УчетнаяЕдиницаГосСистемы КАК УчетнаяЕдиницаГосСистемы,
			|	Saby_ТН_Грузы.ИнаяИнформацияГосСистемы КАК ИнаяИнформацияГосСистемы,
			|	ЕСТЬNULL(Saby_ТН_Грузы.ВидТары.Код, """") КАК ТараКод,
			|	ЕСТЬNULL(Saby_ТН_Грузы.Валюта.Код, """") КАК ВалютаКод
			|ИЗ
			|	Документ.Saby_ТранспортнаяНакладная.Грузы КАК Saby_ТН_Грузы
			|ГДЕ
			|	Saby_ТН_Грузы.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
		ИначеЕсли ИмяТаблицы = "ОпасныеГрузы" Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Saby_ТН_ОпаснГрузы.Ссылка КАК СсылкаДокумент,
			|	Saby_ТН_ОпаснГрузы.НомерСтроки КАК НомерСтроки,
			|	Saby_ТН_ОпаснГрузы.КлючСтроки_Грузы КАК КлючСтроки_Грузы,
			|	Saby_ОпасныеГрузы.Ссылка КАК ОпасныйГруз,
			|	Saby_ОпасныеГрузы.Наименование КАК НаименованиеОтгрузочное,
			|	Saby_ОпасныеГрузы.НомерООН КАК НомерООН,
			|	Saby_ОпасныеГрузы.ТехническоеНаименование КАК НаименованиеТехническое,
			|	Saby_ОпасныеГрузы.Комментарий КАК Комментарий,
			|	Saby_ОпасныеГрузы.Класс КАК Класс,
			|	Saby_ОпасныеГрузы.КлассификационныйКод КАК КлассификационныйКод,
			|	Saby_ОпасныеГрузы.ГруппаУпаковкиЗначение КАК ГруппаУпаковки,
			|	Saby_ОпасныеГрузы.ЗнакОпасности КАК ЗнакОпасности,
			|	Saby_ОпасныеГрузы.ОграничениеПроездаЧерезТуннели КАК КодОграниченияПроездТуннеля,
			|	Saby_ОпасныеГрузы.НазваниеРадионуклида КАК НазваниеРадионуклида,
			|	Saby_ОпасныеГрузы.ФизИХимФорма КАК ФизХимФорма,
			|	Saby_ОпасныеГрузы.МаксАктивность КАК РадиоактивныйМаксАктивность,
			|	Saby_ОпасныеГрузы.КатегорияУпаковки КАК КатегорияУпаковки,
			|	Saby_ОпасныеГрузы.ТранспортныйИндекс КАК ТранспортныйИндекс,
			|	Saby_ОпасныеГрузы.ИндексБезопасности КАК ИндексБезопасности,
			|	Saby_ОпасныеГрузы.ОпознавательныйЗнак КАК ОпознавательныйЗнак,
			|	Saby_ОпасныеГрузы.ПолнаяАктивность КАК РадиоактивныйПолнаяАктивность,
			|	Saby_ОпасныеГрузы.МассаНеттоВзрывчатый КАК МассаНеттоВзрывчатый,
			|	Saby_ОпасныеГрузы.МассаНеттоВзрывчатыйВсего КАК МассаНеттоВзрывчатыйВсего,
			|	Saby_ОпасныеГрузы.ПроцентСмеси КАК ПроцентСмеси,
			|	Saby_ОпасныеГрузы.ДатаИстеченияУдержания КАК ДатаИстеченияУдержания,
			|	Saby_ОпасныеГрузы.КонтрольнаяТемпература КАК ТемператураКонтрольная,
			|	Saby_ОпасныеГрузы.АварийнаяТемпература КАК ТемператураАварийная,
			|	Saby_ОпасныеГрузы.Представление КАК Представление
			|ИЗ
			|	Документ.Saby_ТранспортнаяНакладная.ОпасныеГрузы КАК Saby_ТН_ОпаснГрузы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Saby_ОпасныеГрузы КАК Saby_ОпасныеГрузы
			|		ПО Saby_ТН_ОпаснГрузы.ОпасныйГруз = Saby_ОпасныеГрузы.Ссылка
			|ГДЕ
			|	Saby_ТН_ОпаснГрузы.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	КлючСтроки_Грузы";
			
		ИначеЕсли ИмяТаблицы = "ТранспортныеСредства" Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.Ссылка КАК Ссылка,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.НомерСтроки КАК НомерСтроки,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.Вид КАК Вид,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.РегистрационныйНомер КАК РегистрационныйНомер,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.Тип КАК Тип,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.Марка КАК Марка,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.ВИН КАК ВИН,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.НомерСТС КАК НомерСТС,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.Грузоподъемность КАК Грузоподъемность,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.Вместимость КАК Вместимость,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.ТипВладения КАК ТипВладения,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.ОснованияВладения КАК ОснованияВладения
			|ИЗ
			|	Документ.Saby_ТранспортнаяНакладная.ТранспортныеСредства КАК Saby_ТранспортнаяНакладнаяТранспортныеСредства
			|ГДЕ
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.Ссылка = &Ссылка";
			
		Иначе
			
			ТекстЗапроса = СтрШаблон(УниверсальныйШаблонЗапроса, ИмяТаблицы);
			
		КонецЕсли;
		
		МассивЗапросов.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	РазделительЗапросов = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст = СтрСоединить(МассивЗапросов, РазделительЗапросов);
	ЗапросДанных.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = ЗапросДанных.ВыполнитьПакет();
	Индекс = 0;
	Пока Индекс < Таблицы.Количество() Цикл
		СтруктураДанных.Вставить(Таблицы[Индекс], Результат[Индекс].Выгрузить());
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

#Область ЮрЛица

Функция ДанныеЮрЛица(РольСтрокой, ДанныеДокумента)
	    	
	Если ДанныеДокумента.Свойство("Реквизиты") Тогда 
		РеквизитыОбъекта = ДанныеДокумента.Реквизиты; 
	Иначе 
		РеквизитыОбъекта = ДанныеДокумента;
	КонецЕсли;
	
	// если пустое значение вернем пустую структуру
	Если Не ЗначениеЗаполнено(РеквизитыОбъекта[РольСтрокой]) Тогда 
		Возврат Новый Структура;
	КонецЕсли;		
	
	СтруктураДанных = ОбщийШаблонЮрЛица();
	
	Роль = Перечисления.Saby_РолиКонтрагентов[РольСтрокой];
	Если Роль = Перечисления.Saby_РолиКонтрагентов.Отправитель Тогда
		// не входит в общую структуру
		СтруктураДанных.Вставить("Экспедитор", Число(РеквизитыОбъекта.Отправитель_Экспедитор));
	КонецЕсли;
	
	СтруктураДанных.Название.Полное = СокрЛП(РеквизитыОбъекта[РольСтрокой]);	
		
	// Данные из документа
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Роль);
	
	НайденныеСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ДанныеДокумента.ДанныеЮрЛиц, Отбор);
	Если НайденныеСтроки.Количество() Тогда 		
		СтрокаДанные = НайденныеСтроки[0];
		ОсновныеДанныеЮрЛицаИзДокумента(СтрокаДанные, СтруктураДанных);		
	КонецЕсли;
	 						
	Контакты = КонтактыЮрЛица(ДанныеДокумента.КонтактныеДанные, Роль);
	Если ЗначениеЗаполнено(Контакты.Телефоны) Тогда 
		СтруктураДанных.Контакты.Вставить("Телефон", Контакты.Телефоны);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакты.Емейлы) Тогда 
		СтруктураДанных.Контакты.Вставить("ЭлектроннаяПочта", Контакты.Емейлы);
	КонецЕсли;
		
	Возврат СтруктураДанных;

КонецФункции

Функция ОбщийШаблонЮрЛица()
		
	// Название
	СтруктураНазвание = Новый Структура;
	СтруктураНазвание.Вставить("Полное", "");	
		
	// Реквизиты
	СтруктураРеквизиты = Новый Структура;	
	
	// Контакты	
	СтруктураКонтакты = Новый Структура;
		
	// Общая структура
	Структура = Новый Структура;           	
	Структура.Вставить("Название",      СтруктураНазвание);	  		
	Структура.Вставить("Реквизиты",     СтруктураРеквизиты);
	Структура.Вставить("Адрес",         ШаблонЮрАдрес());
    Структура.Вставить("Контакты",      СтруктураКонтакты);
	
	Возврат Структура;
	
КонецФункции

Функция ШаблонЮЛ()
	
	СтруктураЮЛ = Новый Структура;
		
	Наименование = Новый Структура;
	Наименование.Вставить("Полное", "");
	
	СтруктураЮЛ.Вставить("Название", Наименование);
	СтруктураЮЛ.Вставить("ИНН",      "");
	СтруктураЮЛ.Вставить("КПП",      "");
	
	Возврат СтруктураЮЛ;
	
КонецФункции

Функция ШаблонФизЛицо()
	
	СтруктураФизЛицо = Новый Структура;
	СтруктураФизЛицо.Вставить("ИНН",           "");
	СтруктураФизЛицо.Вставить("ИныеСведения",  "");
	СтруктураФизЛицо.Вставить("Фамилия",       "");
	СтруктураФизЛицо.Вставить("Имя",           "");
	СтруктураФизЛицо.Вставить("Отчество",      "");
	
	Возврат СтруктураФизЛицо;
	
КонецФункции

Функция ШаблонЮрЛицаИП()
	
	// ИП
	СтруктураИП = Новый Структура;
	СтруктураИП.Вставить("ИНН",                "");
	СтруктураИП.Вставить("ОГРН",               "");
	СтруктураИП.Вставить("ИныеСведения",       "");
	СтруктураИП.Вставить("Фамилия",            "");
	СтруктураИП.Вставить("Имя",                "");
	СтруктураИП.Вставить("Отчество",           "");

	Возврат СтруктураИП;
	
КонецФункции

Функция ШаблонИностранногоЛица()
	
	СтруктураИнЛицо = Новый Структура;
	СтруктураИнЛицо.Вставить("Страна",               "");
	СтруктураИнЛицо.Вставить("Наименование",         "");
	СтруктураИнЛицо.Вставить("ИныеСведения",         "");
	СтруктураИнЛицо.Вставить("ИдентификацияСтатуса", 2); // 1 - ФЛ, 2 - ЮЛ
	
	СтруктураИнЛицо.Вставить("ИдентифицирующийДокумент", Новый Структура);
	СтруктураИнЛицо.ИдентифицирующийДокумент.Вставить("Вид",        "");
	СтруктураИнЛицо.ИдентифицирующийДокумент.Вставить("Номер",      "");
	СтруктураИнЛицо.ИдентифицирующийДокумент.Вставить("ДатаВыдачи", "");
	
	Возврат СтруктураИнЛицо;
	
КонецФункции

Функция ШаблонЮрАдрес()
	
	Структура = Новый Структура;
	Структура.Вставить("Юридический", Saby_ТНОбщегоНазначенияСервер.ОбщийШаблонАдреса());
	
	Возврат Структура;
		
КонецФункции

Функция ШаблонФактАдрес()
	
	Структура = Новый Структура; 
	Структура.Вставить("Фактический", Saby_ТНОбщегоНазначенияСервер.ОбщийШаблонАдреса());
		
	Возврат Структура;
	
КонецФункции

Процедура ОсновныеДанныеЮрЛицаИзДокумента(СтрокаДанные, СтруктураДанных)
		
	Если СтрокаДанные.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		
		// Не резидент
		// *- не полный 		
		ИнЛицо              = ШаблонИностранногоЛица();		
		ИнЛицо.Наименование = СтруктураДанных.Название.Полное;
		
		Если ЗначениеЗаполнено(СтрокаДанные.АдресСтруктура) Тогда  
			
			АдресСтруктурой = УправлениеКонтактнойИнформациейСлужебный.СтрокуJSONВСтруктуру(СтрокаДанные.АдресСтруктура);			
			Если АдресСтруктурой.Свойство("country") Тогда 
				ИнЛицо.Страна = АдресСтруктурой.country;
			КонецЕсли; 
			
		КонецЕсли;
			
		СтруктураДанных.Реквизиты.Вставить("ИностранноеЛицо", ИнЛицо);
		
	ИначеЕсли СтрокаДанные.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда 
		
		// ИП
		ИП = ШаблонЮрЛицаИП();				
		ИП.ИНН = СтрокаДанные.ИНН; 		
		Если ЗначениеЗаполнено(СтрокаДанные.СтруктураФИО) Тогда 		
			СтруктураФИО = ЗначениеИзСтрокиВнутр(СтрокаДанные.СтруктураФИО);
			ЗаполнитьЗначенияСвойств(ИП, СтруктураФИО);			
		КонецЕсли;
				
		СтруктураДанных.Реквизиты.Вставить("ИП", ИП); 
		
	ИначеЕсли СтрокаДанные.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ФизЛицо Тогда 
		
		// ФЛ
		ФЛ = ШаблонФизЛицо();
		ФЛ.ИНН = СтруктураДанных.Реквизиты.ИНН;		
		Если ЗначениеЗаполнено(СтрокаДанные.СтруктураФИО) Тогда 		
			СтруктураФИО = ЗначениеИзСтрокиВнутр(СтрокаДанные.СтруктураФИО);
			ЗаполнитьЗначенияСвойств(ФЛ, СтруктураФИО);			
		КонецЕсли;
		
		СтруктураДанных.Реквизиты.Вставить("ФЛ", ФЛ);
		
	Иначе 
				
		// ЮрЛицо		
		ЮЛ = ШаблонЮЛ();				
		ЮЛ.ИНН = СтрокаДанные.ИНН;
		ЮЛ.КПП = СтрокаДанные.КПП;
		
	    ЮЛ.Название.Полное = СтруктураДанных.Название.Полное; 
		
		СтруктураДанных.Реквизиты.Вставить("ЮЛ", ЮЛ);
		
	КонецЕсли;		
	
	// ToDo:  адрес не полный, не хватает структуры КИ
	СтруктураДанных.Адрес.Юридический.Текст = СтрокаДанные.Адрес;  
	
КонецПроцедуры

Функция ДанныеСоставителя(ДанныеДокумента)
	
	РезультатФункции = Новый Структура;
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	Если Не ЗначениеЗаполнено(РеквизитыОбъекта.Составитель)
		Или Не ЗначениеЗаполнено(РеквизитыОбъекта.Составитель_НаОснованииДокумент) Тогда
		
		Возврат РезультатФункции;
		
	КонецЕсли;
	
	// Заполним реквизиты. Используется для расчета данных по нашей организации	
	Реквизиты = ДанныеЮрЛица("Отгрузчик", ДанныеДокумента);
		
	РезультатФункции.Вставить("Наименование", Реквизиты.Название.Полное);
	РезультатФункции.Вставить("ДанныеЮрЛица", Реквизиты);
	
	Основание = РеквизитыОбъекта.Составитель_НаОснованииДокумент;
	Если ЗначениеЗаполнено(Основание) Тогда
		
		Массив = Новый Массив();
		Массив.Добавить(Основание);
		
		ДанныеДокументов = РеквизитыДокументовСбис(Массив);
		
		ДанныеДок = ДанныеДокументов.Получить(Основание);
		ДанныеДок.Удалить("Тип");
		ДанныеДок.Удалить("Ссылка");
		
		РезультатФункции.Вставить("Основание", Новый Структура);
		РезультатФункции.Основание.Вставить("Документ", ДанныеДок);
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ЮрЛица 

#Область Груз

Функция ДанныеГруза(ДанныеДокумента)
	
	ДанныеГруза = Новый Массив;
		
	Для Каждого Строка Из ДанныеДокумента.Грузы Цикл 
		
		ПараметрыСтроки = ШаблонПозицииГруза();		
		ЗаполнитьЗначенияСвойствГруза(ПараметрыСтроки, Строка);
				
		// обработаем данные строки и перейдем к связанным данным		
		СвязанныеДанные = СвязанныеДанныеСГрузом(ДанныеДокумента, Строка.КлючСтроки);
		
		Если СвязанныеДанные.Контейнеры.Номер.Количество()  Тогда 							
			ПараметрыСтроки.Вставить("Контейнер", СвязанныеДанные.Контейнеры);
			ПараметрыСтроки.Наименование = "Контейнер"; 
		КонецЕсли;
		
		Если СвязанныеДанные.Маркировки.Количество() Тогда 
			ПараметрыСтроки.Вставить("Маркировка",  СвязанныеДанные.Маркировки);
		КонецЕсли;
		
		Если СвязанныеДанные.ОпасныеГрузы.Количество() Тогда 
			ПараметрыСтроки.Вставить("ОпасныйГруз", СвязанныеДанные.ОпасныеГрузы);  		
		КонецЕсли;
		
		Если СвязанныеДанные.СведенияГосСистем.Количество() Тогда 
			
			СведенияГИС = Новый Структура;           
			// заполним по данным строки 
			СведенияГИС.Вставить("Наименование",     Строка.НаименованиеГосСистемы);
			СведенияГИС.Вставить("УчетнаяЕдиница",   Строка.УчетнаяЕдиницаГосСистемы);
			СведенияГИС.Вставить("ДругаяИнформация", Строка.ИнаяИнформацияГосСистемы);
			СведенияГИС.Вставить("Идентификатор",    СвязанныеДанные.СведенияГосСистем);
			
			ПараметрыСтроки.Вставить("СведенияГИС", СведенияГИС);
			
			ПараметрыСтроки.УчетГИС = Истина;
			
		КонецЕсли;
					
		ДанныеГруза.Добавить(ПараметрыСтроки);
		
	КонецЦикла;
	
	СтруктураСтоимости = Новый Структура;	
	СтруктураСтоимости.Вставить("Всего",  ДанныеДокумента.Грузы.Итог("СтоимостьВключаяНДС")); // СтоимостьВсего
	СтруктураСтоимости.Вставить("Валюта", Новый Структура);
	
	// рубль по умолчанию. RUB - символьный код. 
	// добавить валюту. реквизит документа. Наименование - символьный код
	СтруктураСтоимости.Валюта.Вставить("Код",          "643");
	СтруктураСтоимости.Валюта.Вставить("Наименование", "Российский рубль"); 
	
	СтруктураГруза = Новый Структура; 
	СтруктураГруза.Вставить("ИнформационноеПоле", Новый Структура);	
	СтруктураГруза.Вставить("Позиция",            ДанныеГруза);
	СтруктураГруза.Вставить("Стоимость",          СтруктураСтоимости);
		
	Возврат СтруктураГруза;
	
КонецФункции

// Поиск и заполнение данных по связанным табличным частям
//
// Параметры:
//  ДанныеДокумента - Соответствие - данные документа с онлайна
//  КлючСтроки - Число - числовое значение ключа строки
//
// Возвращаемое значение:
//   Структура - данные связанные с гурзом (контейнеры, маркировки, опасные грузы)
//
Функция СвязанныеДанныеСГрузом(ДанныеДокумента, КлючСтроки)
		
	Контейнеры = Новый Структура;
	Контейнеры.Вставить("Номер",      Новый Массив);
	Контейнеры.Вставить("Количество", 0);
	
	Маркировки        = Новый Массив;
	ОпасныеГрузы      = Новый Массив;	
	СведенияГосСистем = Новый Массив;	
		
	Отбор = Новый Структура;
	Отбор.Вставить("КлючСтроки_Грузы", КлючСтроки);
	
	НайденныеСтроки = ДанныеДокумента.Контейнеры.НайтиСтроки(Отбор);
	Для Каждого Контейнер Из НайденныеСтроки Цикл 
		
		Структура = СтруктураСоЗначением(Контейнер.Номер);
		Контейнеры.Номер.Добавить(Структура); 
		
		Контейнеры.Количество = Контейнеры.Количество + Контейнер.Количество;
		
	КонецЦикла;	
	
	НайденныеСтроки = ДанныеДокумента.Маркировки.НайтиСтроки(Отбор);
	Для Каждого Маркировка Из НайденныеСтроки Цикл 		
		Структура = СтруктураСоЗначением(Маркировка.Значение);
		Маркировки.Добавить(Структура);				
	КонецЦикла;
	
	НайденныеСтроки = ДанныеДокумента.ОпасныеГрузы.НайтиСтроки(Отбор);
	Для Каждого Опасный Из НайденныеСтроки Цикл 
		
		ОпасныйСтруктура = ШаблонОпасногоГруза();
		ЗаполнитьЗначенияСвойств(ОпасныйСтруктура, Опасный);
						
		ОпасныйСтруктура.Вставить(
			"Класс", Перечисления.Saby_КлассыОпасностиГрузов.КодПоЗначению(Опасный.Класс));
		ОпасныйСтруктура.Вставить(
			"УпаковкаГруппа", Перечисления.Saby_ГруппыУпаковки.КодПоЗначению(Опасный.ГруппаУпаковки));
		ОпасныйСтруктура.Вставить(
			"КодОграниченияПроездТуннеля",
			Перечисления.Saby_КодыОграниченийПроездаЧерезТуннели.КодПоЗначению(Опасный.КодОграниченияПроездТуннеля));
				
		ОпасныеГрузы.Добавить(ОпасныйСтруктура);
				
	КонецЦикла;	
	
	НайденныеСтроки = ДанныеДокумента.СведенияГосСистем.НайтиСтроки(Отбор);
	Для Каждого Сведения Из НайденныеСтроки Цикл 		
		Структура = СтруктураСоЗначением(Сведения.Идентификатор);
		СведенияГосСистем.Добавить(Структура);
	КонецЦикла;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Контейнеры",        Контейнеры);
	СтруктураДанных.Вставить("Маркировки",        Маркировки);
	СтруктураДанных.Вставить("ОпасныеГрузы",      ОпасныеГрузы);
	СтруктураДанных.Вставить("СведенияГосСистем", СведенияГосСистем);
	
	Возврат СтруктураДанных;
		
КонецФункции

Функция СтруктураСоЗначением(Значение)
	
	Возврат Новый Структура("Значение", Значение);
	
КонецФункции

Функция ШаблонПозицииГруза()  
	
	СтруктураГруза = Новый Структура;
	СтруктураГруза.Вставить("Наименование",       "");
	СтруктураГруза.Вставить("КодНоменклатуры",    "");
	СтруктураГруза.Вставить("Состояние",          "");
	СтруктураГруза.Вставить("Упаковка",           "");
	СтруктураГруза.Вставить("ТараКод",            "");
	
	СтруктураГруза.Вставить("УчетГИС",            Ложь);
	СтруктураГруза.Вставить("ДопИнформация",      "");
	СтруктураГруза.Вставить("Заказчик",           Новый Структура);
	
	// Параметры
	ПараметрыГруза = Новый Структура;
	ПараметрыГруза.Вставить("КоличествоПаллет",   0);
	ПараметрыГруза.Вставить("КоличествоМест",     0);
	ПараметрыГруза.Вставить("Плотность",          0);
	ПараметрыГруза.Вставить("Объем",              0);
    ПараметрыГруза.Вставить("Высота",             0);
	ПараметрыГруза.Вставить("Длина",              0);
	ПараметрыГруза.Вставить("Ширина",             0);
	
	Масса = Новый Структура; 
	Масса.Вставить("Нетто",  0);
	Масса.Вставить("Брутто", 0);	
	ПараметрыГруза.Вставить("Масса", Масса);
	
	СтруктураГруза.Вставить("Параметры", ПараметрыГруза);
	
	// Стоимость
	Стоимость = Новый Структура;
	
	Валюта = Новый Структура;		
	Валюта.Вставить("Код",          "");
	Валюта.Вставить("Наименование", "");
	
	Стоимость.Вставить("Валюта",     Валюта);	
	Стоимость.Вставить("ВключаяНДС", 0);
		
	СтруктураГруза.Вставить("Стоимость", Стоимость);
	
	Возврат СтруктураГруза;
	
КонецФункции

Процедура ЗаполнитьЗначенияСвойствГруза(ПараметрыСтроки, Строка)
	
	// Заполнили что смогли 
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, Строка);
	
	// Параметры             
	Параметры = ПараметрыСтроки.Параметры;
	ЗаполнитьЗначенияСвойств(Параметры, Строка);
	Параметры.Масса.Нетто  = Строка.МассаНетто; 
	Параметры.Масса.Брутто = Строка.МассаБрутто;	
	
	// Стоимость
	ПараметрыСтроки.Стоимость.ВключаяНДС = Строка.СтоимостьВключаяНДС;
	Если ЗначениеЗаполнено(Строка.ВалютаКод) Тогда 
		ПараметрыСтроки.Стоимость.Валюта.Код = Строка.ВалютаКод; 
		// Наименование может меняться - Рубль, Рубль РФ...
	Иначе 
		ПараметрыСтроки.Стоимость.Валюта.Код          = "643";
		ПараметрыСтроки.Стоимость.Валюта.Наименование = "Российский рубль";
	КонецЕсли;
	
КонецПроцедуры
	
Функция ШаблонОпасногоГруза()
	
    ОпасныйГруз = Новый Структура;
	ОпасныйГруз.Вставить("НаименованиеТехническое");
	ОпасныйГруз.Вставить("НаименованиеОтгрузочное");
	ОпасныйГруз.Вставить("ИндексБезопасности");
    ОпасныйГруз.Вставить("ОпознавательныйЗнак");
	ОпасныйГруз.Вставить("ВзрывчатыйМассаНетто");
	ОпасныйГруз.Вставить("ВзрывчатыйМассаНеттоДляВсех");
	ОпасныйГруз.Вставить("ПроцентныйСоставСмеси");
	ОпасныйГруз.Вставить("ДатаИстеченияУдержания");
	ОпасныйГруз.Вставить("ТемператураАварийная");
	ОпасныйГруз.Вставить("ТемператураКонтрольная");
	ОпасныйГруз.Вставить("НомерООН");
	ОпасныйГруз.Вставить("Описание");
	ОпасныйГруз.Вставить("Класс");
	ОпасныйГруз.Вставить("КлассификационныйКод");
	ОпасныйГруз.Вставить("ЗнакОпасности");
	ОпасныйГруз.Вставить("КодОграниченияПроездТуннеля");
	ОпасныйГруз.Вставить("ФизХимФорма");
	ОпасныйГруз.Вставить("РадиоактивныйМаксАктивность");
	ОпасныйГруз.Вставить("РадиоактивныйПолнаяАктивность");
	ОпасныйГруз.Вставить("РадиоактивныйРадионуклид");
	ОпасныйГруз.Вставить("УпаковкаКатегория");
	ОпасныйГруз.Вставить("УпаковкаГруппа");
	ОпасныйГруз.Вставить("ТранспортныйИндекс"); 
	
	Возврат ОпасныйГруз;
	
КонецФункции

#КонецОбласти // Груз 

#Область СопроводительныеДокументы

Функция ВложенныеДокументы(ДанныеДокумента)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	// Все сопроводительные документы    	
	ТЗ_ДокументыГруз      = ДанныеДокумента.СопроводительныеДокументы;
	СопроводительнаяВедомость = РеквизитыОбъекта.Отправитель_СопроводительнаяВедомость;
	ДоговорПеревозки      = РеквизитыОбъекта.Заказчик_Договор;
	ОтгрузкаОснование     = РеквизитыОбъекта.Отгрузка_НаОснованииДокумент;
	ОснованиеПолномочий   = РеквизитыОбъекта.Отгрузка_ОтветственныйНаОсновании;
	ИнициаторПодтверждение = РеквизитыОбъекта.ИнициаторПереадресацииПодтверждение;
	
	КГрузу            = Новый Массив;
	КТрН              = Новый Массив;
	ПередачиЦенностей = Новый Массив;
	
	// получаем данные всех документов за 1 раз
	Массив = Новый Массив;	
	ДополнитьМассивВложеннымиДокументами(СопроводительнаяВедомость, Массив);
	ДополнитьМассивВложеннымиДокументами(ДоговорПеревозки,          Массив);
	ДополнитьМассивВложеннымиДокументами(ТЗ_ДокументыГруз,          Массив, "СопроводительныйДокумент");
	ДополнитьМассивВложеннымиДокументами(ОтгрузкаОснование,         Массив);
	ДополнитьМассивВложеннымиДокументами(ОснованиеПолномочий,       Массив);
	ДополнитьМассивВложеннымиДокументами(ИнициаторПодтверждение,    Массив);
	
	УдаляемыеКолонки = Новый Массив;
	УдаляемыеКолонки.Добавить("Ссылка");
	УдаляемыеКолонки.Добавить("Тип");
	
	// Обработка полученных данных 	
	Соответствие = РеквизитыДокументовСбис(Массив);
	Для Каждого Строка Из ТЗ_ДокументыГруз Цикл   
		
		Данные = Соответствие.Получить(Строка.СопроводительныйДокумент);
		
		СтруктураДокумента = ОбщегоНазначения.СкопироватьРекурсивно(Данные);
		УдалитьСвойстваИзСтруктуры(СтруктураДокумента, УдаляемыеКолонки);
		
		Если Данные.Тип = Перечисления.Saby_ТипыДокумента.КГрузу Тогда
			КГрузу.Добавить(СтруктураДокумента);
		ИначеЕсли Данные.Тип = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей Тогда
		    ПередачиЦенностей.Добавить(СтруктураДокумента);					
		Иначе 	
			// Общие к Транспортной накладной 
		    КТрН.Добавить(СтруктураДокумента);				
		КонецЕсли; 
		
	КонецЦикла;	
			
	Структура = Новый Структура;
	Структура.Вставить("РасчетПеревозки",          Новый Структура);
	Структура.Вставить("ДоговорНаУслугиПеревозки", ДанныеВложенногоДокумента(Соответствие, ДоговорПеревозки));
	Структура.Вставить("ТранспортнаяНакладная",    КТрН);   // *
	Структура.Вставить("Груз",                     КГрузу); // *
	Структура.Вставить("Отгрузка",                 ПередачиЦенностей); // *
	Структура.Вставить("Ведомость",                ДанныеВложенногоДокумента(Соответствие, СопроводительнаяВедомость));
	Структура.Вставить("ОснованиеОтгрузки",        ДанныеВложенногоДокумента(Соответствие, ОтгрузкаОснование));
	Структура.Вставить("ОснованиеПолномочий",      ДанныеВложенногоДокумента(Соответствие, ОснованиеПолномочий));
	Структура.Вставить("ИнициаторПодтверждение",   ДанныеВложенногоДокумента(Соответствие, ИнициаторПодтверждение));
	
    Возврат Структура;

КонецФункции

Процедура ДополнитьМассивВложеннымиДокументами(Источник, Массив, ИмяКолонки = "")
	
	Если ТипЗнч(Источник) = Тип("ТаблицаЗначений") Тогда
		
		Для Каждого Строка Из Источник Цикл
			Если ЗначениеЗаполнено(Строка[ИмяКолонки]) Тогда 
				Массив.Добавить(Строка[ИмяКолонки]);   
			КонецЕсли;			
		КонецЦикла;
					
	Иначе 
		
		Если ЗначениеЗаполнено(Источник) Тогда 
			Массив.Добавить(Источник);
		КонецЕсли;
				
	КонецЕсли;
			
КонецПроцедуры

Функция ДанныеВложенногоДокумента(Соответствие, Ключ)
	
	Структура = Новый Структура;
	
	// если данные есть в документе - они есть в соответствии
	Если ЗначениеЗаполнено(Ключ) Тогда 
		Структура = Соответствие.Получить(Ключ);
		Если ЗначениеЗаполнено(Структура) Тогда 
			Структура.Удалить("Ссылка");
			Структура.Удалить("Тип");    
		КонецЕсли;	
	КонецЕсли;
 
	Возврат Структура;
	
КонецФункции

#КонецОбласти // СопроводительныеДокументы  

#Область Транспорт

Функция ТранспортНаВыгрузку(ТранспортныеСредства, СтрокаТС = Неопределено)
	
	СтруктураТС = ШаблонПодстановокТС();
	
	Если ТранспортныеСредства <> Неопределено Тогда
		СтрокаТС = СтрокаАвтотранспорта(ТранспортныеСредства);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТС) Тогда
		Возврат СтруктураТС;
	КонецЕсли;
	
	СтруктураТС.НомерСТС         = СтрокаТС.НомерСТС;
	СтруктураТС.VIN              = СтрокаТС.ВИН;
	СтруктураТС.РегНомер         = СтрокаТС.РегистрационныйНомер;
	СтруктураТС.ТипВладения      = Перечисления.Saby_ТипыВладенияТС.КодПоЗначению(СтрокаТС.ТипВладения);
	СтруктураТС.Тип              = СтрокаТС.Тип;
	СтруктураТС.Марка            = СтрокаТС.Марка;
	СтруктураТС.Грузоподъемность = СтрокаТС.Грузоподъемность;
	СтруктураТС.Вместимость      = СтрокаТС.Вместимость;
	
	Если ЗначениеЗаполнено(СтрокаТС.ОснованияВладения) Тогда
		
		МассивДокументов = ЗначениеИзСтрокиВнутр(СтрокаТС.ОснованияВладения);
		
		ДанныеДокументов = РеквизитыДокументовСбис(МассивДокументов);
		
		ОснованияВладения = Новый Массив;
		Для Каждого ДокВладения Из МассивДокументов Цикл
			
			Если Не ЗначениеЗаполнено(ДокВладения) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеДок = ДанныеДокументов.Получить(ДокВладения);
			ДанныеДок.Удалить("Тип");
			
			ОснованияВладения.Добавить(ДанныеДок);
			
		КонецЦикла;
		
		СтруктураТС.Вставить("ОснованиеВладения", ОснованияВладения);
		
	КонецЕсли;
	
	Возврат СтруктураТС;
	
КонецФункции

Функция СтрокаАвтотранспорта(ТранспортныеСредства)
	
	РезультатФункции = Неопределено;
	
	Автомобиль = Перечисления.Saby_ВидыТС.Автомобиль;
	
	Для Каждого СтрокаТранспорта Из ТранспортныеСредства Цикл
		
		Если СтрокаТранспорта.Вид <> Автомобиль Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатФункции = СтрокаТранспорта;
		
		Прервать;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция РеквизитыТранспортногоСредства(ТС)
	
	// ToDo: 1 общий запрос данных по всем ТС
	
	СсылкаТС = Справочники.ТранспортныеСредства.СоздатьЭлемент();
	Если Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("РегистрационныйЗнак", СсылкаТС) Тогда 
		ИмяРеквизитаРегЗнак = "РегистрационныйЗнак";
	Иначе 
		ИмяРеквизитаРегЗнак = "Код";
	КонецЕсли;
	
	Если ТипЗнч(СсылкаТС.Тип) = Тип("Строка") Тогда
		ИмяРеквизитаТип = "Тип";
	Иначе 
		ИмяРеквизитаТип = "Тип.Наименование";
	КонецЕсли;	
	
	Массив = Новый Массив; 
	Массив.Добавить(ИмяРеквизитаРегЗнак); // РегНомер
	Массив.Добавить(ИмяРеквизитаТип);
	Массив.Добавить("Марка"); 
	Массив.Добавить("ГрузоподъемностьВТоннах");
	Массив.Добавить("ВместимостьВКубическихМетрах");
	Массив.Добавить("НомерСТС");
	Массив.Добавить("VIN"); 
	Массив.Добавить("ТипВладения");
	Массив.Добавить("ДокументыПодтверждающиеВладение");
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТС, Массив);
	Результат.Вставить("ИмяРеквизитаРегЗнак", ИмяРеквизитаРегЗнак);
	Результат.Вставить("ИмяРеквизитаТип", ИмяРеквизитаТип);
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонПодстановокТС()
	
	Структура = Новый Структура;
	Структура.Вставить("НомерСТС",          "");
	Структура.Вставить("VIN",               "");
	Структура.Вставить("РегНомер",          "");
	Структура.Вставить("ТипВладения",       "");
	Структура.Вставить("Тип",               "");
	Структура.Вставить("Марка",             "");
	Структура.Вставить("Грузоподъемность",  0);
	Структура.Вставить("Вместимость",       0);
	
	Возврат Структура;
	
КонецФункции

Функция ЗаполненоОснованиеПередачиГруза(ДанныеДляПроверки)
	
	Возврат Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("ОснованиеПередачиГруза", ДанныеДляПроверки)
		И ЗначениеЗаполнено(ДанныеДляПроверки.ОснованиеПередачиГруза);
	
КонецФункции

Функция ПрицепыНаВыгрузку(ТранспортныеСредства)
	
	МассивПрицепы = Новый Массив;
	
	Прицеп = Перечисления.Saby_ВидыТС.Прицеп;
	
	Для Каждого СтрокаТС Из ТранспортныеСредства Цикл
		
		Если СтрокаТС.Вид <> Прицеп Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураТС = ТранспортНаВыгрузку(Неопределено, СтрокаТС);
		
		Если ЗначениеЗаполнено(СтруктураТС.РегНомер) Тогда
			МассивПрицепы.Добавить(СтруктураТС);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПрицепы;
	
КонецФункции

Функция СпецУсловия(ТЗ_СпецРазрешения)
		
	МассивУсловий = Новый Массив;   
	
	КолонкиИсключения = Новый Массив;
	КолонкиИсключения.Добавить("ИД");
	
	Для Каждого Строка Из ТЗ_СпецРазрешения Цикл
		
		Если ТипЗнч(Строка) <> Тип("Структура") Тогда 
			ПараметрыСтроки = Saby_ТНОбщегоНазначенияСервер.СтрокаТаблицыЗначенийВСтруктуру(Строка, КолонкиИсключения);
		Иначе 
			ПараметрыСтроки = Строка;
		КонецЕсли;
		
		СтруктураУсловия = Новый Структура;
		СтруктураУсловия.Вставить("Маршрут", Новый Структура);
		СтруктураУсловия.Вставить("СпецРазрешение", ПараметрыСтроки); 
		
		МассивУсловий.Добавить(СтруктураУсловия);
		
	КонецЦикла; 
	
	Возврат МассивУсловий;
	
КонецФункции

#КонецОбласти // Транспорт 

#Область Водители

// Формирование структуры водителей для выгрузки
// Параметры:
// 	Водители - ТаблицаЗначений - данные водителей
// 	ПутевыеЛисты - ТаблицаЗначений - данные путевых листов водителей 
// Возвращаемое значение:
// 	Структура - данные водителей для выгрузки
//
Функция ВодителиНаВыгрузку(Водители, ПутевыеЛисты)
	
	МассивДанных = Новый Массив;
	
	ДанныеДокументов = ДанныеДокументовВодителей(Водители, ПутевыеЛисты);
				
	Для Каждого Строка Из Водители Цикл 
			
		ДанныеВодителя = ШаблонДанныхВодителя();			
		ЗаполнитьЗначенияСвойств(ДанныеВодителя, Строка); 
			
		ДанныеВодителя.ВУ.Номер      = Строка.НомерВУ;
		ДанныеВодителя.ВУ.Серия      = Строка.СерияВУ;
		ДанныеВодителя.ВУ.ДатаВыдачи = ЗначениеДатыВремяДляВыгрузки(Строка.ДатаВыдачиВУ, Истина);	
		
		ЗаполнитьТелефоныВодителя(Строка, ДанныеВодителя);
		
		// Основания передачи
		Если ЗаполненоОснованиеПередачиГруза(Строка) Тогда 
			Основание = ДанныеДокументов.Получить(Строка.ОснованиеПередачиГруза);
			ДанныеВодителя.Вставить("ОснованиеПередачиГруза", Основание);
		КонецЕсли;
		
		// Путевые листы
		Отбор = Новый Структура;
		Отбор.Вставить("КлючСтроки_Водители", Строка.КлючСтроки);
		
		НайденныеПутевыеЛисты = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ПутевыеЛисты, Отбор);
		Если НайденныеПутевыеЛисты.Количество() Тогда 
			
			МассивПутевыхЛистов = Новый Массив;
			Для Каждого ПутевойЛист Из НайденныеПутевыеЛисты Цикл 
				ДанныеЛиста = ДанныеДокументов.Получить(ПутевойЛист.Документ);
				МассивПутевыхЛистов.Добавить(ДанныеЛиста);
			КонецЦикла;
			
			ДанныеВодителя.Вставить("ПутевойЛист", МассивПутевыхЛистов);
			
		КонецЕсли;
		// -
		
		МассивДанных.Добавить(ДанныеВодителя);
		
	КонецЦикла;
	
	Структура = Новый Структура;
	Структура.Вставить("Водитель", МассивДанных);
	
	Возврат Структура;
	
КонецФункции

// Дополнение данных водителей на выгрузку
// Параметры:
// 	Водители - ТаблицаЗначений - данные водителей
// 	ПутевыеЛисты - ТаблицаЗначений - данные путевых листов водителей 
// Возвращаемое значение:
//	ДанныеДокументов - Соответствие - данные по всем документам водителей
//
Функция ДанныеДокументовВодителей(Водители, ПутевыеЛисты)
	
	ДанныеДокументов = Неопределено;
	
	ДокументыВодителей = Новый Массив;
	
	Для Каждого Строка Из Водители Цикл 		
				
		Если ЗаполненоОснованиеПередачиГруза(Строка) Тогда
			ДокументыВодителей.Добавить(Строка.ОснованиеПередачиГруза);
		КонецЕсли;
		
	КонецЦикла;
	
	// Путевые листы
	Для Каждого СтрокаЛисты Из ПутевыеЛисты Цикл 				
		
		Если ЗначениеЗаполнено(СтрокаЛисты.Документ) Тогда 			
			ДокументыВодителей.Добавить(СтрокаЛисты.Документ);			
		КонецЕсли;	
		
	КонецЦикла;
		
	Если ДокументыВодителей.Количество() Тогда  
		ДанныеДокументов = РеквизитыДокументовСбис(ДокументыВодителей);
	КонецЕсли;
	
	Возврат ДанныеДокументов;
	
КонецФункции

Процедура ЗаполнитьТелефоныВодителя(СтрокаВодителя, ДанныеВодителя)
	
	Если Не ЗначениеЗаполнено(СтрокаВодителя.Телефоны) Тогда
		Возврат;
	КонецЕсли;
	
	МассивТелефоны = ЗначениеИзСтрокиВнутр(СтрокаВодителя.Телефоны);
				
	ТелефоныНаВыгрузку = Новый Массив;
	Для Каждого Телефон Из МассивТелефоны Цикл
		
		СтруктураТелефон = Новый Структура;
		СтруктураТелефон.Вставить("Значение", Телефон);
		ТелефоныНаВыгрузку.Добавить(СтруктураТелефон);
		
	КонецЦикла;
				
	ДанныеВодителя.Телефон = ТелефоныНаВыгрузку;
	
КонецПроцедуры

Функция ШаблонДанныхВодителя()
	
	ДанныеВодителя = Новый Структура;
	
	ДанныеВодителя.Вставить("Имя",          "");
	ДанныеВодителя.Вставить("Фамилия",      "");
	ДанныеВодителя.Вставить("Отчество",     "");
	ДанныеВодителя.Вставить("ИНН",          "");
	ДанныеВодителя.Вставить("СведенияПЭП" , "");
	ДанныеВодителя.Вставить("ПутевойЛист",  Новый Структура); // документ ТрН
	ДанныеВодителя.Вставить("Телефон",      Новый Массив);
	
	ДанныеВодителя.Вставить("ВУ", Новый Структура);
	ДанныеВодителя.ВУ.Вставить("Номер",      "");
	ДанныеВодителя.ВУ.Вставить("Серия",      "");
	ДанныеВодителя.ВУ.Вставить("ДатаВыдачи", "");
	
	Возврат ДанныеВодителя;
	
КонецФункции

#КонецОбласти // Водители

#Область Отметки

Функция ОтметкиПоТитулу(ДанныеДокумента, Отбор = Неопределено)
	
	Отметки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ДанныеДокумента.Отметки, Отбор);
	
	КолонкиИсключение = Новый Массив;
	КолонкиИсключение.Добавить("НомерСтроки");
	КолонкиИсключение.Добавить("Этап");
	КолонкиИсключение.Добавить("Роль");
	КолонкиИсключение.Добавить("КлючСтроки"); 
	
	МассивОтметок = Новый Массив;
	
	Для Каждого Строка Из Отметки Цикл  
		
		АктыИШтрафы = АктыИШтрафы(Строка.КлючСтроки, ДанныеДокумента);
		
		Отметка = Новый Структура;
		Отметка.Вставить("ДатаВремя",  СтруктураВремя(Строка.ДатаВремя));
		Отметка.Вставить("Описание",  Строка.Описание);
		
		Если АктыИШтрафы.АктыВзвешивания.Количество() Тогда 
			Отметка.Вставить("АктыВзвешивания", АктыИШтрафы.АктыВзвешивания);
		КонецЕсли;
			
		Если АктыИШтрафы.АктыКоммерческие.Количество() Тогда 
			Отметка.Вставить("Акты", АктыИШтрафы.АктыКоммерческие); 
		КонецЕсли;
		
		Если АктыИШтрафы.Штраф.Количество() Тогда 
			Отметка.Вставить("Штрафы", АктыИШтрафы.Штраф);		
		КонецЕсли;
				
		МассивОтметок.Добавить(Отметка);
		
	КонецЦикла;
	
	СтруктураОтметок = Новый Структура;
	СтруктураОтметок.Вставить("Отметка", МассивОтметок);
	
	Возврат СтруктураОтметок;
	
КонецФункции

Функция АктыИШтрафы(КлючСтроки, ДанныеДокумента)
	
	МассивАкты    = Новый Массив; 
	МассивАктыКом = Новый Массив;
    МассивШтрафы  = Новый Массив;
			
	КолонкиИсключение = Новый Массив;
	КолонкиИсключение.Добавить("НомерСтроки");
	КолонкиИсключение.Добавить("КлючСтроки_Отметки");
	
	Отбор = Новый Структура;
	Отбор.Вставить("КлючСтроки_Отметки", КлючСтроки);
	
	МассивАктовРасчет = Новый Массив;
	
	Если Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("Акты", ДанныеДокумента) Тогда
	
		НайденныеСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ДанныеДокумента.Акты, Отбор);
		Для Каждого Строка Из НайденныеСтроки Цикл 		
			МассивАктовРасчет.Добавить(Строка.Документ);	
		КонецЦикла;
		
		ДанныеДокументов = РеквизитыДокументовСбис(МассивАктовРасчет);
		Для Каждого Док Из МассивАктовРасчет Цикл
			
			ДанныеАкта = ДанныеДокументов.Получить(Док);
			Если ДанныеАкта.Тип = Перечисления.Saby_ТипыДокумента.АктВзвешивания Тогда 
			    МассивАкты.Добавить(ДанныеАкта);
			Иначе 
				МассивАктыКом.Добавить(ДанныеАкта);
			КонецЕсли;
						
			ДанныеАкта.Удалить("Тип");
			ДанныеАкта.Удалить("Ссылка");
					
		КонецЦикла;
		
	КонецЕсли;
	
	Если Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("Штрафы", ДанныеДокумента) Тогда
	
	    НайденныеСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ДанныеДокумента.Штрафы, Отбор);
			
		Для Каждого Строка Из НайденныеСтроки Цикл 
			
			Штраф = Новый Структура;
			Штраф.Вставить("Итог",       Строка.Сумма); 
			Штраф.Вставить("Количество", Строка.Количество);
			Штраф.Вставить("Расчет",     Строка.Расчет);
			
			Штраф.Вставить("Валюта", Новый Структура);
			Штраф.Валюта.Вставить("Итог",    Строка.Сумма);
			Штраф.Валюта.Вставить("КодОКВ",  "643");
			Штраф.Валюта.Вставить("НаимОКВ", "Российский рубль");
							
			МассивШтрафы.Добавить(Штраф);               
			
		КонецЦикла;
		
	КонецЕсли;
	
	Структура = Новый Структура; 
	Структура.Вставить("АктыКоммерческие", МассивАктыКом);
	Структура.Вставить("АктыВзвешивания",  МассивАкты);
	Структура.Вставить("Штраф",            МассивШтрафы);
		
	Возврат Структура;
	
КонецФункции

#КонецОбласти // Отметки

#Область Этапы

// Условия перевозки согласно формату подстановок
//  Параметры:
//   ДанныеДокумента - Структура - структура данных полученых из объекта выгрузки
//  ИнициаторПодтверждение - Структура - данные документа подтверждающего полномочия инициатора
//  Возвращаемое значение:
//   Структура - данные условий перевозки
//
Функция УсловияПеревозки(ДанныеДокумента, ИнициаторПодтверждение)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	// Условия перевозки
    СтруктураУсловия = Новый Структура;
		
	// Климатический режим
	СтруктураКлимат = Новый Структура;
	ТемператураОт = РеквизитыОбъекта.Отправитель_ТемператураОт;
	ТемператураДо = РеквизитыОбъекта.Отправитель_ТемператураДо;
	
	ТемператураЗаполнена = ЗначенияЗаполнены(ТемператураОт, ТемператураДо);	
	Если ТемператураЗаполнена Тогда  
		СтруктураКлимат.Вставить("Температура", Новый Структура);
		СтруктураКлимат.Температура.Вставить("Минимальная",  ТемператураОт);
		СтруктураКлимат.Температура.Вставить("Максимальная", ТемператураДо);
	КонецЕсли;
			
	ВлажностьОт = РеквизитыОбъекта.Отправитель_ВлажностьОт;
	ВлажностьДо = РеквизитыОбъекта.Отправитель_ВлажностьДо;
	
	ВлажностьЗаполнена = ЗначенияЗаполнены(ВлажностьОт, ВлажностьДо);
	Если ВлажностьЗаполнена Тогда 
		СтруктураКлимат.Вставить("Влажность", Новый Структура);
		СтруктураКлимат.Влажность.Вставить("Минимальная",  ВлажностьОт);
		СтруктураКлимат.Влажность.Вставить("Максимальная", ВлажностьДо);
	КонецЕсли;
	
	СтруктураУсловия.Вставить("КлиматическийРежим", СтруктураКлимат);
	
	СтруктураУсловия.Вставить("Маршрут", Новый Структура); // нет данных для заполнения
	
	// Переадресовка                          
	Переадресовка = Новый Структура;	
	Переадресовка.Вставить("Контакты", Новый Структура);	
	
	Роль = РеквизитыОбъекта.ИнициаторПереадресации;
	
	Контакты = КонтактыЮрЛица(ДанныеДокумента.КонтактныеДанные, Роль);
	Если ЗначениеЗаполнено(Контакты.Телефоны) Тогда 
		Переадресовка.Контакты.Вставить("Телефон", Контакты.Телефоны);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакты.Емейлы) Тогда 
		Переадресовка.Контакты.Вставить("ЭлектроннаяПочта", Контакты.Емейлы);
	КонецЕсли;
		
	// документ подтверждения полномочий 
	Если ЗначениеЗаполнено(ИнициаторПодтверждение) Тогда 
		Переадресовка.Вставить("ПодтверждениеПолномочий", ИнициаторПодтверждение);	
	КонецЕсли;
		
	Переадресовка.Вставить(
		"КтоПереадресует", Перечисления.Saby_РолиКонтрагентов.КодПоЗначению(РеквизитыОбъекта.ИнициаторПереадресации));
	
	СтруктураУсловия.Вставить("Переадресовка", Переадресовка); 
	// - 
		
	СтруктураУсловия.Вставить("ИнформационноеПоле",  Новый Структура); // источника информации нет 
	СтруктураУсловия.Вставить("Нормы",               РеквизитыОбъекта.Отправитель_НормыПеревозки);
	СтруктураУсловия.Вставить("ОграничениеСкорости", РеквизитыОбъекта.Отправитель_ОграничениеСкорости);	
	СтруктураУсловия.Вставить("Пломба",              РеквизитыОбъекта.Отправитель_Пломба);
    СтруктураУсловия.Вставить("СрокДоставки",        РеквизитыОбъекта.Отправитель_ДоставитьСрок);

	СтруктураУсловия.Вставить("ПерегрузкаЗапрещена", Число(РеквизитыОбъекта.Отправитель_ПерегрузкаЗапрещена));
	
	Возврат СтруктураУсловия;
	
КонецФункции

// Расчет что хотя бы одно из значений заполнено
//  Параметры:
//   Значение1 - ЛюбойТип - первое значение для проверки
//   Значение2 - ЛюбойТип - второе значение для проверки
//  Возвращаемое значение:
//   Булево - оба значения не заполнены
//
Функция ЗначенияЗаполнены(Значение1, Значение2)
	
	Заполнены = ЗначениеЗаполнено(Значение1) Или ЗначениеЗаполнено(Значение2);	
	Возврат Заполнены;
	
КонецФункции

Функция ДанныеПогрузки(ДанныеДокумента, ОснованиеОтгрузки, ОснованиеПолномочий) 
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
    Структура = Новый Структура;
		
	// ВладелецОбъекта
	ВладелецПункта = Новый Структура;	
	Если РеквизитыОбъекта.Владелец_Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.Отправитель Тогда
		
		ВладелецПункта.Вставить("Грузоотправитель", ДанныеЮрЛица("Отгрузчик", ДанныеДокумента));		
		
	Иначе
		
		ДругойВладелец = Новый Структура;
		ДругойВладелец.Вставить("Контрагент", ДанныеЮрЛица("ВладелецОбъекта", ДанныеДокумента));
		ВладелецПункта.Вставить("Другой",     ДругойВладелец);
		
	КонецЕсли;	
		
	ВладелецПункта.Вставить(
		"Тип", Перечисления.Saby_ВладелецОбъектаОтгрузки.КодПоЗначению(РеквизитыОбъекта.Владелец_Тип));
	
	Если РеквизитыОбъекта.Владелец_Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.Неизвестен Тогда 
		Причина = СокрЛП(РеквизитыОбъекта.Владелец_НеизвестенПричина);		
	Иначе 
		Причина = "";
	КонецЕсли;
		
	ВладелецПункта.Вставить("ПочемуНеизвестен", Причина);	
		
	Структура.Вставить("ВладелецПункта", ВладелецПункта);
	// -
	
	// Груз
	Груз = Новый Структура;
	Груз.Вставить("Масса",          Новый Структура);
	Груз.Вставить("Состояние",      Новый Структура);
	Груз.Вставить("КоличествоМест", РеквизитыОбъекта.Погрузка_КоличествоМест);
	
	Груз.Масса.Вставить("Брутто",           РеквизитыОбъекта.Погрузка_Масса);
	Груз.Масса.Вставить(
		"МетодОпределения",
		Перечисления.Saby_МетодОпределенияМассы.КодПоЗначению(РеквизитыОбъекта.Погрузка_МассаМетодРасчета)); 
	
	// Остояние кузова и упаковки нет на данный момент
	Груз.Состояние.Вставить("Кузова",   "");
	Груз.Состояние.Вставить("Тары",     СокрЛП(РеквизитыОбъекта.Погрузка_Состояние));
	Груз.Состояние.Вставить("Упаковки", "");
	
	Структура.Вставить("Груз", Груз); 
	// -
			
	// Кто делает погрузку	
    КтоПогружает = ЛицоОтгрузки(ДанныеДокумента, ОснованиеОтгрузки, ОснованиеПолномочий);
		
	Структура.Вставить("КтоПогружает",       КтоПогружает);
	Структура.Вставить("ДатаВремяПрибытия",  СтруктураВремя(РеквизитыОбъекта.Погрузка_ДатаВремяПрибыл));
	Структура.Вставить("ДатаВремяУбытия",    СтруктураВремя(РеквизитыОбъекта.Погрузка_ДатаВремяУбыл));
	Структура.Вставить("ИнформационноеПоле", Новый Структура); // нет источника
			
	Возврат Структура;
	
КонецФункции

Функция ЛицоОтгрузки(ДанныеДокумента, ОснованиеОтгрузки, ОснованиеПолномочий)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	Тип = 1;	
	Если ЗначениеЗаполнено(РеквизитыОбъекта.Отгрузчик) 
		И РеквизитыОбъекта.Отправитель <> РеквизитыОбъекта.Отгрузчик Тогда
		
		Тип = 2; 
		
	КонецЕсли;
	
	// Грузоотправитель - если тип 1 то должен заполнится сам
	
	Другой = Новый Структура;	
	
	ТипДругогоОтправителя = 2;
	Если Тип = ТипДругогоОтправителя Тогда 
		
		Другой.Вставить("Контрагент", ДанныеЮрЛица("Отгрузчик", ДанныеДокумента));
		
		Если ЗначениеЗаполнено(ОснованиеОтгрузки) Тогда 
			Другой.Вставить("ДокументОснование", ОснованиеОтгрузки);       
		КонецЕсли;
			
		Работник = Новый Структура;
		Работник.Вставить("Должность", СокрЛП(РеквизитыОбъекта.Отгрузка_ОтветственныйДолжность));
		
		Ответственный = РеквизитыОбъекта.Отгрузка_ОтветственныйСтруктура;
		Если ЗначениеЗаполнено(Ответственный) Тогда
			
			ДанныеОтветственного = ЗначениеИзСтрокиВнутр(Ответственный);
						
			Работник.Вставить("Фамилия",  ДанныеОтветственного.Фамилия);
			Работник.Вставить("Имя",      ДанныеОтветственного.Имя);
			Работник.Вставить("Отчество", ДанныеОтветственного.Отчество);
			
		КонецЕсли;
			
		СтруктураОснПолномочий = Новый Структура;
		Если ЗначениеЗаполнено(ОснованиеПолномочий) Тогда 		 
			СтруктураОснПолномочий.Вставить("Документ", ОснованиеПолномочий); 			
		Иначе 
			СтруктураОснПолномочий.Вставить("ДолжностныеОбязанности", "Должностные обязанности");
		КонецЕсли;
					
		Работник.Вставить("ОснованиеПолномочий", СтруктураОснПолномочий); 
						
		Другой.Вставить("Работник", Работник);
						
	КонецЕсли;
	
	// ОснованиеДоступа
    Структура = Новый Структура;	
	Структура.Вставить("Тип",              Тип);
	Структура.Вставить("Другой",           Другой);
	Структура.Вставить("ОснованиеДоступа", "");
		
	Возврат Структура;
	
КонецФункции

Функция КонтактыЮрЛица(КонтактныеДанные, Роль)
			
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Роль);  
	Отбор.Вставить("Тип",  Перечисления.ТипыКонтактнойИнформации.Телефон);
		
	// Телефоны 
	МассивТелефонов = Новый Массив; 	
	НайденныеСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(КонтактныеДанные, Отбор);
	
	Для Каждого Строка Из НайденныеСтроки Цикл   
		
		Если Не ЗначениеЗаполнено(Строка.Значение) Тогда 
			Продолжить;
		КонецЕсли;
		
		СтруктураТелефон = Новый Структура;
		СтруктураТелефон.Вставить("Значение", Строка.Значение);
		
		МассивТелефонов.Добавить(СтруктураТелефон);
		
	КонецЦикла;	
	
	// Емейлы
	МассивЕмейл = Новый Массив;
	Отбор.Вставить("Тип",  Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	НайденныеСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(КонтактныеДанные, Отбор);
	Для Каждого Строка Из НайденныеСтроки Цикл 
		
		Если Не ЗначениеЗаполнено(Строка.Значение) Тогда 
			Продолжить;
		КонецЕсли;
		
		СтруктураЕмейл = Новый Структура;
		СтруктураЕмейл.Вставить("Значение", Строка.Значение);
		
		МассивЕмейл.Добавить(СтруктураЕмейл);
		
	КонецЦикла;
	
	Структура = Новый Структура;
	Структура.Вставить("Телефоны", МассивТелефонов);
	Структура.Вставить("Емейлы",   МассивЕмейл);
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти // Этапы

#Область ПунктыПогрузкиВыгрузки

Функция ПунктПогрузки(РеквизитыОбъекта)

	СтруктураПункта = ШаблонПункта(РеквизитыОбъекта.Погрузка_ДатаВремя);
	
	// ToDo: структуру из АдресПогрузкиЗначение 
	СтруктураПункта.Адрес.Фактический.Текст = РеквизитыОбъекта.Погрузка_Адрес;
		
	Возврат СтруктураПункта;
	
КонецФункции

Функция ПунктВыгрузки(РеквизитыОбъекта)
	
	СтруктураПункта = ШаблонПункта(РеквизитыОбъекта.Отправитель_ДоставитьДо);
	
	ЗаполнитьСтруктуруАресаИзСтроки(СтруктураПункта.Адрес.Фактический, РеквизитыОбъекта.АдресДоставкиЗначение);
	СтруктураПункта.Адрес.Фактический.Текст = РеквизитыОбъекта.Отправитель_АдресДоставки;
		
	Возврат СтруктураПункта;
	
КонецФункции

Функция ШаблонПункта(ДатаВремя)
	
	Структура = Новый Структура;
	
	СтруктураДатаВремя = СтруктураВремя(ДатаВремя);	
	Структура.Вставить("ДатаВремя", СтруктураДатаВремя); 
	
	Структура.Вставить("Адрес", ШаблонФактАдрес());
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти // ПунктыПогрузкиВыгрузки

Функция РеквизитыДокументовСбис(МассивДокументов)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивДокументов);
	
	Запрос.Текст =	
	"ВЫБРАТЬ
	|	ДокументыТрН.Наименование КАК Наименование,
	|	ДокументыТрН.Номер КАК Номер,
	|	ДокументыТрН.Дата КАК Дата,
	|	ДокументыТрН.Дата КАК ДатаВремя,
	|	ДокументыТрН.ДопСведения КАК ДополнительныеСведения,
	|	ДокументыТрН.Ссылка КАК Ссылка,
	|	ДокументыТрН.Тип КАК Тип
	|ИЗ
	|	Справочник.Saby_ДокументыТрН КАК ДокументыТрН
	|ГДЕ
	|	ДокументыТрН.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыТрНСтороны.Ссылка КАК Ссылка,
	|	ДокументыТрНСтороны.Сторона КАК Сторона,
	|	ДокументыТрНСтороны.Сторона.Наименование КАК Наименование,
	|	ДокументыТрНСтороны.Сторона.ИНН КАК ИНН,
	|	ДокументыТрНСтороны.Сторона.КПП КАК КПП,
	|	ДокументыТрНСтороны.Сторона.СтранаРегистрации КАК Страна,
	|   ВЫБОР 
	|   КОГДА ТИПЗНАЧЕНИЯ(Сторона) = ТИП(Справочник.Организации) ТОГДА
	|       ВЫРАЗИТЬ(Сторона КАК Справочник.Организации).ОГРН
	|   КОГДА ТИПЗНАЧЕНИЯ(Сторона) = ТИП(Справочник.Контрагенты) ТОГДА  
	|       Сторона.РегистрационныйНомер
	|   ИНАЧЕ
	|       &ПустаяСтрока
	|   КОНЕЦ КАК ОГРН,
	|	ВЫБОР 
	|   КОГДА ТИПЗНАЧЕНИЯ(Сторона) = ТИП(Справочник.Saby_СторонаДокумента) ТОГДА
	|       ДокументыТрНСтороны.Сторона.ЮрФизЛицо
	|   ИНАЧЕ
	|       ЕСТЬNULL(ДокументыТрНСтороны.Сторона.ЮрФизЛицо, ДокументыТрНСтороны.Сторона.ЮридическоеФизическоеЛицо)
	|   КОНЕЦ КАК ЮрФизЛицо
	|ИЗ
	|	Справочник.Saby_ДокументыТрН.Стороны КАК ДокументыТрНСтороны
	|ГДЕ
	|	ДокументыТрНСтороны.Ссылка В(&МассивСсылок)";
	
	ИмяКонфигурации = Saby_ТНОбщегоНазначенияСервер.ИмяКонфигурации();
	ДоступныеКонфигурации = Saby_ТНОбщегоНазначенияСервер.ДоступныеКонфигурации();
	
	Если ИмяКонфигурации = ДоступныеКонфигурации.УАТ Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"Сторона.РегистрационныйНомер",
			"&ПустаяСтрока");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументов = РезультатЗапроса[0].Выбрать();
	РеквизитыСторон   = РезультатЗапроса[1].Выгрузить();
				
	Соответствие = Новый Соответствие;
	
	КолонкиИсключения = Новый Массив;
	КолонкиИсключения.Добавить("Ссылка");	
	
	Пока ВыборкаДокументов.Следующий() Цикл 
		
		ПараметрыСтроки = Saby_ТНОбщегоНазначенияСервер.СтрокаТаблицыЗначенийВСтруктуру(
			ВыборкаДокументов, КолонкиИсключения);
		ПараметрыСтроки.Дата = ЗначениеДатыВремяДляВыгрузки(ПараметрыСтроки.Дата, Истина);
		
		// добавим стороны документа                   
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", ВыборкаДокументов.Ссылка);
		
		МассивСторон = Новый Массив;                 
				
		НайденныеСтроки = РеквизитыСторон.НайтиСтроки(Отбор);
		Для Каждого Сторона Из НайденныеСтроки Цикл
			
			ПараметрыСтороны = Новый Структура;
			ПараметрыСтороны.Вставить("Наименование", Сторона.Наименование);
									
			// наименование органа исполнительной власти выдавшего документ
			// пока не храним это значение			
			Если Сторона.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ЮрЛицо 
				Или Сторона.ЮрФизЛицо = Saby_ТНОбщегоНазначенияСервер.ЗначениеЮрФизЛицаКонфигурации("ЮрЛицо") Тогда
				
				ПараметрыСтороны.Вставить("ЮЛ", Новый Структура);
				ПараметрыСтороны.ЮЛ.Вставить("ИНН", Сторона.ИНН);
				
			ИначеЕсли Сторона.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ЮрЛицоНеРезидент 
				Или Сторона.ЮрФизЛицо = Saby_ТНОбщегоНазначенияСервер.ЗначениеЮрФизЛицаКонфигурации("ЮрЛицоНеРезидент") Тогда 
				
			    СтруктураИнЛица = ШаблонИностранногоЛица();
				
				// Поиск будет только по наименованию				
				СтруктураИнЛица.Страна       = СокрЛП(Сторона.Страна);
				СтруктураИнЛица.Наименование = Сторона.Наименование;
				
				ПараметрыСтороны.Вставить("ИностранноеЛицо", СтруктураИнЛица);				
				
			Иначе  
				
				// Физ или ИП
				ПараметрыСтороны.Вставить("ФЛ", Новый Структура);
				ПараметрыСтороны.ФЛ.Вставить("ИНН", Сторона.ИНН);
				
			КонецЕсли;
			
			МассивСторон.Добавить(ПараметрыСтороны);
			
		КонецЦикла;
		
		ПараметрыСтроки.Вставить("Стороны", МассивСторон);
		
		Соответствие.Вставить(ВыборкаДокументов.Ссылка, ПараметрыСтроки);
				
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

Функция ЗаявкаНаПеревозку(РеквизитыОбъекта)
	
	Структура = Новый Структура;
	Структура.Вставить("Дата",            РеквизитыОбъекта.Отправитель_ЗаявкаДата);
	Структура.Вставить("ПорядковыйНомер", ЗначениеДатыВремяДляВыгрузки(РеквизитыОбъекта.Отправитель_ЗаявкаНомер, Истина));
	
    Возврат Структура;
	
КонецФункции

Функция Оформил(ОформилСтруктураСтрокой)
	
	ОформилСтруктура = ЗначениеИзСтрокиВнутр(ОформилСтруктураСтрокой);
	
	РезультатФункции = Новый Структура;
	
	РезультатФункции.Вставить("Фамилия",  ОформилСтруктура.Фамилия);
	РезультатФункции.Вставить("Имя",      ОформилСтруктура.Имя);
	РезультатФункции.Вставить("Отчество", ОформилСтруктура.Отчество);
	
	МассивТелефонов = Новый Массив;
	Для Каждого Телефон Из ОформилСтруктура.Телефоны Цикл
		СтруктураТелефон = Новый Структура;
		СтруктураТелефон.Вставить("Значение", Телефон);
		МассивТелефонов.Добавить(СтруктураТелефон);
	КонецЦикла;
	
	МассивЭлектроннойПочты = Новый Массив;
	СтруктураЭлектроннойПочты = Новый Структура;
	СтруктураЭлектроннойПочты.Вставить("Значение", ОформилСтруктура.ЭлектроннаяПочта);
	МассивЭлектроннойПочты.Добавить(СтруктураЭлектроннойПочты);
	
	Контакты = Новый Структура;
	Контакты.Вставить("Телефон",          МассивТелефонов);
	Контакты.Вставить("ЭлектроннаяПочта", МассивЭлектроннойПочты);
	
	РезультатФункции.Вставить("Контакты", Контакты);
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ВыгрузитьДокументВJson

Процедура ЗаполнитьНашуОрганизацию(Вложение)
	
	ПервыйТитул = "1110339";
	Если Вложение.Подтип = ПервыйТитул Тогда
		
		ДанныеТитула = Вложение.Подстановка;
		
		// проверка на СОХ
		ЕстьФайл = ДанныеТитула.Свойство("Файл");
		Если ЕстьФайл И ДанныеТитула.Файл.Свойство("Составитель") Тогда 			
			Организация = ДанныеТитула.Файл.Составитель.ДанныеЮрЛица;			
		Иначе 			
			Организация = ДанныеТитула.Грузоотправитель;	
		КонецЕсли;	
		
		// СвЮЛ
		// СвФЛ
		Вложение.Вставить("НашаОрганизация", РеквизитыНашейОрганизации(Организация));
		
	КонецЕсли;	
	
КонецПроцедуры

Функция РеквизитыНашейОрганизации(Организация)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;		
	КонецЕсли;              
	
	ЭтоФл = Ложь;
	Реквизиты = Организация.Реквизиты;
		
	Если Реквизиты.Свойство("ИП") Тогда  
		
		ЭтоФл = Истина;
		ДанныеОрганизации = ФорматНашейОрганизации(Истина);
		ЗаполнитьЗначенияСвойств(ДанныеОрганизации, Реквизиты.ИП);
		
	ИначеЕсли Реквизиты.Свойство("ФЛ") Тогда 
		
		ЭтоФл = Истина;
		ДанныеОрганизации = ФорматНашейОрганизации(Истина);
		ЗаполнитьЗначенияСвойств(ДанныеОрганизации, Реквизиты.ФЛ);
		ДанныеОрганизации.ЧастноеЛицо = "Да";
		
	ИначеЕсли Реквизиты.Свойство("ЮЛ") Тогда
		
		ДанныеОрганизации = ФорматНашейОрганизации();
		ЗаполнитьЗначенияСвойств(ДанныеОрганизации, Реквизиты.ЮЛ, , "Название");
		ДанныеОрганизации.Название = Реквизиты.ЮЛ.Название.Полное;
		
	Иначе 	                         
		
		// Иностранное лицо
		ДанныеОрганизации = ФорматНашейОрганизации();
		ДанныеОрганизации.Название = Реквизиты.ИностаноеЛицо.Наименование;
		
	КонецЕсли;
	
	ОбщаяСтруктура = Новый Структура;
	Если ЭтоФл Тогда
		ОбщаяСтруктура.Вставить("СвФЛ", ДанныеОрганизации);
	Иначе
		ОбщаяСтруктура.Вставить("СвЮЛ", ДанныеОрганизации);
	КонецЕсли;
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

Функция ФорматНашейОрганизации(ЭтоФЛ = Ложь)
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("ИНН",        "");
	ДанныеОрганизации.Вставить("КодФилиала", "");
	ДанныеОрганизации.Вставить("КодСтраны",  "");
	
	Если ЭтоФЛ Тогда
		ДанныеОрганизации.Вставить("Фамилия",     "");
		ДанныеОрганизации.Вставить("Имя",         "");
		ДанныеОрганизации.Вставить("Отчество",    "");
		ДанныеОрганизации.Вставить("ЧастноеЛицо", "Нет");
	Иначе 
		ДанныеОрганизации.Вставить("КПП",      "");
		ДанныеОрганизации.Вставить("Название", "");
	КонецЕсли;
	
	Возврат ДанныеОрганизации;
	
КонецФункции

Функция СтруктураВремя(ДатаВремя, БезВремени = Ложь, СоСмещением = Истина)
		
	Значение = ЗначениеДатыВремяДляВыгрузки(ДатаВремя, БезВремени, СоСмещением);
	
	Если Не БезВремени И СтрНайти(Значение, "+") > 0 Тогда 
		ЕстьЧасовойПояс = 1;
	Иначе 
		ЕстьЧасовойПояс = 0;
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("ЕстьЧасовойПояс", ЕстьЧасовойПояс); // 0 нет, 1 - есть
	Структура.Вставить("Значение",        Значение);
	
	Возврат Структура;
	
КонецФункции

Функция ЗначениеДатыВремяДляВыгрузки(ДатаВремя, БезВремени = Ложь, СоСмещением = Истина)
	
	Если БезВремени Тогда 
		Значение = Формат(ДатаВремя, "ДФ='dd.MM.yyyy'");
	Иначе
		ФорматДатаВремя = "ДФ=dd.MM.yyyyTHH:mm:ss; ДП=";
		Если СоСмещением Тогда
			Значение = ФорматЛокальнойДатыСоСмещением(ДатаВремя, ФорматДатаВремя);
		Иначе
			Значение = Формат(ДатаВремя, ФорматДатаВремя);
		КонецЕсли;
	КонецЕсли;

	Возврат Значение;
	
КонецФункции

Процедура ДобавитьСвойствоВСтруктуруСКонтролем(Структура, ИмяСвойства, Данные, ЭтоВремя = Ложь)
	
	ЗаполнитьСвойство = Ложь;
	
	Если ЭтоВремя Тогда
		Если ЗначениеЗаполнено(Данные.Значение) Тогда		
			ЗаполнитьСвойство = Истина; 
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Данные) Тогда   	
			ЗаполнитьСвойство = Истина;
		КонецЕсли;
	КонецЕсли; 	
	
	Если ЗаполнитьСвойство Тогда 
		Структура.Вставить(ИмяСвойства, Данные);		
	КонецЕсли;
		
КонецПроцедуры

Функция РеквизитыОдиночногоДокументаЭТрН(Ссылка)
	
	Массив = Новый Массив();
	Массив.Добавить(Ссылка);
	
	ДанныеДокументов = РеквизитыДокументовСбис(Массив);
	
	ДанныеДок = ДанныеДокументов.Получить(Ссылка);
	ДанныеДок.Удалить("Тип");
	ДанныеДок.Удалить("Ссылка");
	
	Возврат ДанныеДок;

КонецФункции

// Данные банковского счета по ссылке
// Параметры:
//	БанковскийСчет - СправочникСсылка.БанковскиеСчетаКонтрагентов - счет для получения данных расч. счета контрагента
//	               - СправочникСсылка.БанковскиеСчетаОрганизаций - счет для получения данных расч. счета организации
//                 - СправочникСсылка.БанковскиеСчета - счет для получения данных 
//	                 (в некоторых конфигурация справочник единый)
//
// Возвращаемое значение:
//	Структура - реквизиты счета
//
Функция РеквизитыБанковскогоСчета(БанковскийСчет)
	
	Структура = Новый Структура;
	Структура.Вставить("НомерСчета", "");
	Структура.Вставить("Банк",       Новый Структура);
	
	// Банк
	Структура.Банк.Вставить("Наименование", Новый Структура);
	Структура.Банк.Наименование.Вставить("Полное", "");
	
	Структура.Банк.Вставить("БИК",      "");
	Структура.Банк.Вставить("КоррСчет", "");
		
	ЕстьСправочникБанкСчета = Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено;
		 
	Если ЕстьСправочникБанкСчета Тогда 
		
		// нет корр счета в стандратном получении данных счета	
		РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			БанковскийСчет, "НомерСчета, Банк.Наименование, Банк.Код, Банк.КоррСчет");
		
		Если ЗначениеЗаполнено(РеквизитыСчета) Тогда
			
			Структура.Банк.Наименование.Полное = РеквизитыСчета.БанкНаименование;
			
			Структура.НомерСчета    = РеквизитыСчета.НомерСчета;
			Структура.Банк.БИК      = РеквизитыСчета.БанкКод;
			Структура.Банк.КоррСчет = РеквизитыСчета.БанкКоррСчет;
			
		КонецЕсли;		
		
	Иначе 
		
		ЗаполнитьДанныеБанковскогоСчета(БанковскийСчет, Структура);
						
	КонецЕсли;	
	
	Возврат Структура;
	
КонецФункции

Процедура ЗаполнитьДанныеБанковскогоСчета(БанковскийСчет, Структура)
	
	Если ТипЗнч(БанковскийСчет) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда 
		
		ИмяСправочника = "БанковскиеСчетаОрганизаций";
		РеквизитыСчета = Справочники[ИмяСправочника].ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет); 
		
	Иначе 
		
		ИмяСправочника = "БанковскиеСчетаКонтрагентов";
		РеквизитыСчета = Справочники[ИмяСправочника].ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыСчета) Тогда
		
		Если РеквизитыСчета.Свойство("БИКБанка") Тогда 
			ИмяБик = "БИКБанка"; 
		Иначе 
			ИмяБик = "БИК";
		КонецЕсли;
		
		Если РеквизитыСчета.Свойство("НаименованиеБанка") Тогда 
			ИмяБанка = РеквизитыСчета.НаименованиеБанка; 
		Иначе 
			ИмяБанка = СокрЛП(РеквизитыСчета.Банк);
		КонецЕсли;
		
		Структура.Банк.Наименование.Полное = ИмяБанка;
		
		Структура.НомерСчета    = РеквизитыСчета.НомерСчета;
		Структура.Банк.БИК      = РеквизитыСчета[ИмяБик];
		Структура.Банк.КоррСчет = РеквизитыСчета.КоррСчет;
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура УдалитьСвойстваИзСтруктуры(Структура, Массив)
	
	Для Каждого ЭлементМассива Из Массив Цикл
		Структура.Удалить(ЭлементМассива);	
	КонецЦикла;
		
КонецПроцедуры

// Заполняет структуру адреса для подстановок
//
// Параметры:
//  СтруктураАдреса - Структура - ОбщийШаблонАдреса())
//  АдресЗначение - Строка - результат выполнения ЗначениеВJSON(ОбщийШаблонАдреса())
//
Процедура ЗаполнитьСтруктуруАресаИзСтроки(СтруктураАдреса, АдресЗначение)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(АдресЗначение);  		
	СтруктураАдресаИзСтроки = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Если СтруктураАдресаИзСтроки <> Неопределено Тогда
		ЗаполнитьСтруктуруАдреса(СтруктураАдреса, СтруктураАдресаИзСтроки);
		
		СтруктураАдреса.Структура.Вставить("КодСтраны", СтруктураАдреса.КодСтраны);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает дату в виде отформатированной строки с учетом смещения. 
// Аналог ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением, только с возможностью указать формат даты.
//
// Параметры:
//  ЛокальнаяДата	 - Дата	 	 - Дата
//  ФорматнаяСтрока	 - Строка	 - Форматная строка 
// 
// Возвращаемое значение:
//  Строка - Отформатированная дата с учетом смещения
//
Функция ФорматЛокальнойДатыСоСмещением(ЛокальнаяДата, ФорматнаяСтрока = "ДФ=ггггММддЧЧммсс")
	
	Если Не ЗначениеЗаполнено(ЛокальнаяДата) Тогда 
		Возврат "";
	КонецЕсли;
		
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Смещение = СмещениеСтандартногоВремени(ЧасовойПоясСеанса());
	#Иначе
		Смещение = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().СмещениеСтандартногоВремени;
	#КонецЕсли
	
	ПредставлениеСмещения = "";
	Если Смещение > 0 Тогда
		ПредставлениеСмещения = "+";
	ИначеЕсли Смещение < 0 Тогда
		ПредставлениеСмещения = "-";
		Смещение = - Смещение;
	Иначе
		ПредставлениеСмещения = "+00:00";
	КонецЕсли; 
	
	Если Смещение <> 0 Тогда
		ПредставлениеСмещения = ПредставлениеСмещения + Формат('00010101' + Смещение, "ДФ=HH:mm");
	КонецЕсли;
	
	Возврат Формат(ЛокальнаяДата, ФорматнаяСтрока) + ПредставлениеСмещения;
	
КонецФункции

Процедура ЗаполнитьСтруктуруАдреса(Приемник, Источник)
	
	Для Каждого КлючЗначение Из Приемник Цикл
		
		ЗначениеИзИсточника = Неопределено;
		
		Если Не Источник.Свойство(КлючЗначение.Ключ, ЗначениеИзИсточника) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура") Тогда
			ЗаполнитьСтруктуруАдреса(КлючЗначение.Значение, ЗначениеИзИсточника);
		Иначе
			Приемник.Вставить(КлючЗначение.Ключ, ЗначениеИзИсточника);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
