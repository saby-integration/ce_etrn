
#Область ПрограммныйИнтерфейс

// Выгружает документы в СБИС и возвращает результат.
//
// Параметры:
//  ДанныеДляВыгрузки - Массив - массив структур см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//  context_params - Структура - параметры подключения к СБИС
//  ДополнительныеПараметры - Структура - дополнительные параметры для выгрузки
//
// Возвращаемое значение:
//   Структура - см. Saby_ТНОбщегоНазначенияСервер.РезультатВзаимодействияСоСБИС
//
Функция РезультатВыгрузкиДокументов(ДанныеДляВыгрузки, context_params, ДополнительныеПараметры) Экспорт
	
	ОбщиеПараметрыВыгрузки = Saby_ТНОбщегоНазначенияСервер.ОбщиеПараметрыВыгрузкиЗагрузки(context_params);
	
	РезультатФункции = Saby_ТНОбщегоНазначенияСервер.РезультатВзаимодействияСоСБИС(ДанныеДляВыгрузки.Количество());
	
	Для Каждого ПараметрыВыгрузки Из ДанныеДляВыгрузки Цикл
		
		ВыгрузитьДокумент(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, РезультатФункции);
		
	КонецЦикла;
	
	Saby_ТНОбщегоНазначенияСервер.ЗаписьОшибокВЖурналРегистрации(РезультатФункции.Ошибки);
	
	РезультатФункции.Итог.Успех = Не ЗначениеЗаполнено(РезультатФункции.Ошибки);
	
	Возврат РезультатФункции;
	
КонецФункции

// Выполняет ФЛК и конвертирует данные документа в структуру подстановок готовых для выгрузки.
//
// Параметры:
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//  Результат - Структура - см. Saby_ТНОбщегоНазначенияСервер.РезультатВзаимодействияСоСБИС
//  ТолькоВыполнитьФЛК - Булево - признак выполнения только ФЛК.
//    Если Истина, то формирование структуры документа не выполняется.
//
Процедура ЗаполнитьСтруктуруДокументаСПроверкойФЛК(ПараметрыВыгрузки, Результат, ТолькоВыполнитьФЛК = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ДанныеДокумента) Тогда
		ДанныеДокумента = ПараметрыВыгрузки.ДанныеДокумента;
	Иначе
		ДанныеДокумента = Документы[ПараметрыВыгрузки.ИмяМетаданных].ДанныеДокумента(
			ПараметрыВыгрузки.Ссылка, ПараметрыВыгрузки.ТипТитула);
	КонецЕсли;
	
	РезультатФЛК = Saby_ТНОбщегоНазначенияСервер.РезультатФЛК(ДанныеДокумента, ПараметрыВыгрузки);
	Если ЗначениеЗаполнено(РезультатФЛК) Тогда
		РезультатФЛК.Вставить("ИмяМетаданных", ПараметрыВыгрузки.ИмяМетаданных);
		Результат.Ошибки.Вставить(ПараметрыВыгрузки.Ссылка, РезультатФЛК);
		Возврат;
	КонецЕсли;
	
	Если Не ТолькоВыполнитьФЛК Тогда
		ПараметрыВыгрузки.СтруктураДокумента = Документы[ПараметрыВыгрузки.ИмяМетаданных].ДанныеДляВыгрузки(
			ДанныеДокумента, ПараметрыВыгрузки);
	КонецЕсли;
	
КонецПроцедуры

// Запись статистики на прямую в облако, в обход стандартных методов
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ для записи статистики
//  ТекущийТитул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - тип текущего титула
//
Процедура ЗаписатьСтатистикуНапрямую(ДокументСсылка, ТекущийТитул) Экспорт
	
	context_params	= Saby_Core.ПроверитьНаличиеПараметровПодключения(); 
		
	ОбъектОбработки = Обработки.SABY.Создать();
	ИмяКонфигурации = ОбъектОбработки.get_prop(context_params, "ExtSysSettingsId", "");
			
    ПараметрыМетода = ПараметрыМетодаЗаписиСтатистики(ТекущийТитул, ДокументСсылка, ИмяКонфигурации);
	
	Ошибка = Ложь;
	
	Попытка 
		
		Ответ = ОбъектОбработки.local_helper_exec_method(
			context_params, 
			"CloudStatistics.Send", 
			ПараметрыМетода, 
			Истина);
			
		ДанныеОтвета = Ответ["result"];
		Если ЗначениеЗаполнено(ДанныеОтвета) Тогда
			Ошибка   = Истина;
			Описание = "Ошибка записи статистики";
		КонецЕсли;	
			
	Исключение
		ИнфоОшибки = ИнформацияОбОшибке();
		Описание   = ИнфоОшибки.Описание;
	КонецПопытки;

	Если Ошибка Тогда 
		
		Saby_ТНОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации(
			ДокументСсылка,
			"Не записана статистика документа",
			Описание);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

Функция ЗначениеДатыВремяДляВыгрузки(ДатаВремя, БезВремени = Ложь, СоСмещением = Истина) Экспорт
	
	Если БезВремени Тогда 
		Значение = Формат(ДатаВремя, "ДФ='dd.MM.yyyy'");
	Иначе
		ФорматДатаВремя = "ДФ=dd.MM.yyyyTHH:mm:ss; ДП=";
		Если СоСмещением Тогда
			Значение = ФорматЛокальнойДатыСоСмещением(ДатаВремя, ФорматДатаВремя);
		Иначе
			Значение = Формат(ДатаВремя, ФорматДатаВремя);
		КонецЕсли;
	КонецЕсли;

	Возврат Значение;
	
КонецФункции

Процедура ЗаполнитьНашуОрганизацию(Вложение, ПараметрыВыгрузки) Экспорт
	
	МенеджерТитулов = Документы[ПараметрыВыгрузки.ИмяМетаданных].МенеджерТитулов();
	
	Если Не МенеджерТитулов.ЭтоПервыйТитул(ПараметрыВыгрузки.ТипТитула) Тогда
		Возврат;
	КонецЕсли;
	
	Если Вложение.Свойство("Подстановка") Тогда
		ДанныеТитула = Вложение.Подстановка;
	Иначе
		ДанныеТитула = Вложение;
	КонецЕсли;
	
	ЕстьСоставитель = ДанныеТитула.Свойство("Файл") И ДанныеТитула.Файл.Свойство("Составитель");
	ЕстьОформитель = ДанныеТитула.Свойство("Документ") И ДанныеТитула.Документ.Свойство("Оформитель");
	
	Если ЕстьСоставитель Тогда
		Организация = ДанныеТитула.Файл.Составитель.ДанныеЮрЛица;
	ИначеЕсли ЕстьОформитель Тогда
		Организация = ДанныеТитула.Документ.Оформитель;
	Иначе
		Организация = ДанныеТитула.Грузоотправитель;
	КонецЕсли;
	
	// СвЮЛ
	// СвФЛ
	Вложение.Вставить("НашаОрганизация", РеквизитыНашейОрганизации(Организация));
	
КонецПроцедуры

#Область ТранспортИнтерфейс

Функция ТранспортНаВыгрузку(ТранспортныеСредства, СтрокаТС = Неопределено, ДляПутевогоЛиста = Ложь) Экспорт
	
	ДанныеДляПодстановокТС = ДанныеДляПодстановокТС(ДляПутевогоЛиста);
	СтруктураТС = ДанныеДляПодстановокТС.СтруктураТС;
	
	Если ТранспортныеСредства <> Неопределено Тогда
		СтрокаТС = СтрокаАвтотранспорта(ТранспортныеСредства);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТС) Тогда
		Возврат СтруктураТС;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из СтруктураТС Цикл
		ПолеДанных = ДанныеДляПодстановокТС.СоответствиеПолей.Получить(КлючЗначение.Ключ);
		Если ПолеДанных = Неопределено Тогда
			ПолеДанных = КлючЗначение.Ключ;
		КонецЕсли;
		СтруктураТС[КлючЗначение.Ключ] = СтрокаТС[ПолеДанных];
	КонецЦикла;
	
	Если СтруктураТС.Свойство("ТипВладения")
		И ТипЗнч(СтруктураТС.ТипВладения) = Тип("ПеречислениеСсылка.Saby_ТипыВладенияТС") Тогда
		СтруктураТС.ТипВладения = Перечисления.Saby_ТипыВладенияТС.КодПоЗначению(СтруктураТС.ТипВладения);
	КонецЕсли;
	
	ЗаполнитьОснованияВладения(СтруктураТС, СтрокаТС);
	
	Возврат СтруктураТС;
	
КонецФункции

Функция ПрицепыНаВыгрузку(ТранспортныеСредства, ДляПутевогоЛиста = Ложь) Экспорт
	
	МассивПрицепы = Новый Массив;
	
	Прицеп = Перечисления.Saby_ВидыТС.Прицеп;
	
	Для Каждого СтрокаТС Из ТранспортныеСредства Цикл
		
		Если СтрокаТС.Вид <> Прицеп Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураТС = ТранспортНаВыгрузку(Неопределено, СтрокаТС, ДляПутевогоЛиста);
		
		Если ЗначениеЗаполнено(СтруктураТС.РегНомер) Тогда
			МассивПрицепы.Добавить(СтруктураТС);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПрицепы;
	
КонецФункции

Функция СпецУсловия(ТЗ_СпецРазрешения) Экспорт
		
	МассивУсловий = Новый Массив;   
	
	КолонкиИсключения = Новый Массив;
	КолонкиИсключения.Добавить("ИД");
	
	Для Каждого Строка Из ТЗ_СпецРазрешения Цикл
		
		Если ТипЗнч(Строка) <> Тип("Структура") Тогда 
			ПараметрыСтроки = Saby_ТНОбщегоНазначенияСервер.СтрокаТаблицыЗначенийВСтруктуру(Строка, КолонкиИсключения);
		Иначе 
			ПараметрыСтроки = Строка;
		КонецЕсли;
		
		СтруктураУсловия = Новый Структура;
		СтруктураУсловия.Вставить("Маршрут", Новый Структура);
		СтруктураУсловия.Вставить("СпецРазрешение", ПараметрыСтроки); 
		
		МассивУсловий.Добавить(СтруктураУсловия);
		
	КонецЦикла; 
	
	Возврат МассивУсловий;
	
КонецФункции

#КонецОбласти // ТранспортИнтерфейс 

#Область ВодителиИнтерфейс

// Формирование структуры водителей для выгрузки
// Параметры:
// 	Водители - ТаблицаЗначений - данные водителей
// 	ПутевыеЛисты - ТаблицаЗначений - данные путевых листов водителей 
// Возвращаемое значение:
// 	Структура - данные водителей для выгрузки
//
Функция ВодителиНаВыгрузку(Водители, ПутевыеЛисты) Экспорт
	
	МассивДанных = Новый Массив;
	
	ДанныеДокументов = ДанныеДокументовВодителей(Водители, ПутевыеЛисты);
				
	Для Каждого Строка Из Водители Цикл 
			
		ДанныеВодителя = ШаблонДанныхВодителя();			
		ЗаполнитьЗначенияСвойств(ДанныеВодителя, Строка); 
			
		ДанныеВодителя.ВУ.Номер      = Строка.Номер;
		ДанныеВодителя.ВУ.Серия      = Строка.Серия;
		ДанныеВодителя.ВУ.ДатаВыдачи = Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(Строка.ДатаВыдачи, Истина);	
		
		ЗаполнитьТелефоныВодителя(Строка, ДанныеВодителя);
		
		// Основания передачи
		Если ЗаполненоОснованиеПередачиГруза(Строка) Тогда 
			Основание = ДанныеДокументов.Получить(Строка.ОснованиеПередачиГруза);
			ДанныеВодителя.Вставить("ОснованиеПередачиГруза", Основание);
		КонецЕсли;
		
		// Путевые листы
		Отбор = Новый Структура;
		Отбор.Вставить("КлючСтроки_Водители", Строка.КлючСтроки);
		
		НайденныеПутевыеЛисты = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ПутевыеЛисты, Отбор);
		Если НайденныеПутевыеЛисты.Количество() Тогда 
			
			МассивПутевыхЛистов = Новый Массив;
			Для Каждого ПутевойЛист Из НайденныеПутевыеЛисты Цикл 
				ДанныеЛиста = ДанныеДокументов.Получить(ПутевойЛист.Документ);
				МассивПутевыхЛистов.Добавить(ДанныеЛиста);
			КонецЦикла;
			
			ДанныеВодителя.Вставить("ПутевойЛист", МассивПутевыхЛистов);
			
		КонецЕсли;
		// -
		
		МассивДанных.Добавить(ДанныеВодителя);
		
	КонецЦикла;
	
	Структура = Новый Структура;
	Структура.Вставить("Водитель", МассивДанных);
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти // ВодителиИнтерфейс

#Область ЮрЛицаИнтерфейс

Функция ДанныеЮрЛица(РольСтрокой, ДанныеДокумента, ЗаполнитьКодФилиала = Ложь) Экспорт
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	СтруктураДанных = ОбщийШаблонЮрЛица();
	
	Если РеквизитыОбъекта.Свойство(РольСтрокой) Тогда
	
		Если Не ЗначениеЗаполнено(РеквизитыОбъекта[РольСтрокой]) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		
		СтруктураДанных.Название.Полное = СокрЛП(РеквизитыОбъекта[РольСтрокой]);
		
	КонецЕсли;
	
	Роль = Перечисления.Saby_РолиКонтрагентов[РольСтрокой];
	Если Роль = Перечисления.Saby_РолиКонтрагентов.Отправитель Тогда
		// не входит в общую структуру
		СтруктураДанных.Вставить("Экспедитор", Число(РеквизитыОбъекта.Отправитель_Экспедитор));
	КонецЕсли;
	
	// Данные из документа
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Роль);
	
	НайденныеСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ДанныеДокумента.ДанныеЮрЛиц, Отбор);
	Если НайденныеСтроки.Количество() Тогда
		СтрокаДанные = НайденныеСтроки[0];
		ОсновныеДанныеЮрЛицаИзДокумента(СтруктураДанных, СтрокаДанные, ЗаполнитьКодФилиала);
	КонецЕсли;
	
	Если ДанныеДокумента.Свойство("КонтактныеДанные") Тогда
		
		Контакты = Saby_ТНВыгрузкаСервер.КонтактыЮрЛица(ДанныеДокумента.КонтактныеДанные, Роль);
		Если ЗначениеЗаполнено(Контакты.Телефоны) Тогда
			СтруктураДанных.Контакты.Вставить("Телефон", Контакты.Телефоны);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контакты.Емейлы) Тогда
			СтруктураДанных.Контакты.Вставить("ЭлектроннаяПочта", Контакты.Емейлы);
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат СтруктураДанных;
	
КонецФункции

Функция ОбщийШаблонЮрЛица() Экспорт
		
	// Название
	СтруктураНазвание = Новый Структура;
	СтруктураНазвание.Вставить("Полное", "");	
		
	// Реквизиты
	СтруктураРеквизиты = Новый Структура;	
	
	// Контакты	
	СтруктураКонтакты = Новый Структура;
		
	// Общая структура
	Структура = Новый Структура;           	
	Структура.Вставить("Название",      СтруктураНазвание);	  		
	Структура.Вставить("Реквизиты",     СтруктураРеквизиты);
	Структура.Вставить("Адрес",         ШаблонЮрАдрес());
    Структура.Вставить("Контакты",      СтруктураКонтакты);
	
	Возврат Структура;
	
КонецФункции

Процедура ОсновныеДанныеЮрЛицаИзДокумента(СтруктураДанных, СтрокаДанные, ЗаполнитьКодФилиала) Экспорт
	
	Если СтрокаДанные.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		
		// Не резидент
		// *- не полный 		
		ИнЛицо              = ШаблонИностранногоЛица();		
		ИнЛицо.Наименование = СтруктураДанных.Название.Полное;
		
		Если ЗначениеЗаполнено(СтрокаДанные.АдресСтруктура) Тогда  
			
			АдресСтруктурой = УправлениеКонтактнойИнформациейСлужебный.СтрокуJSONВСтруктуру(СтрокаДанные.АдресСтруктура);			
			Если АдресСтруктурой.Свойство("country") Тогда 
				ИнЛицо.Страна = АдресСтруктурой.country;
			КонецЕсли; 
			
		КонецЕсли;
			
		СтруктураДанных.Реквизиты.Вставить("ИностранноеЛицо", ИнЛицо);
		
	ИначеЕсли СтрокаДанные.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда 
		
		// ИП
		ИП = ШаблонЮрЛицаИП();				
		ИП.ИНН = СтрокаДанные.ИНН; 		
		ЗаполнитьФИО(СтруктураДанных, СтрокаДанные, ИП, Истина);
		
		ДобавитьКодФилиала(ИП, СтрокаДанные, ЗаполнитьКодФилиала);
		
		СтруктураДанных.Реквизиты.Вставить("ИП", ИП); 
		
	ИначеЕсли СтрокаДанные.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ФизЛицо Тогда 
		
		// ФЛ
		ФЛ = ШаблонФизЛицо();
		ФЛ.ИНН = СтрокаДанные.ИНН;		
		ЗаполнитьФИО(СтруктураДанных, СтрокаДанные, ФЛ, Ложь);
		
		ДобавитьКодФилиала(ФЛ, СтрокаДанные, ЗаполнитьКодФилиала);
		
		СтруктураДанных.Реквизиты.Вставить("ФЛ", ФЛ);
		
	Иначе 
				
		// ЮрЛицо		
		ЮЛ = ШаблонЮЛ();				
		ЮЛ.ИНН = СтрокаДанные.ИНН;
		ЮЛ.КПП = СтрокаДанные.КПП;
		
		Если Не ЗначениеЗаполнено(СтруктураДанных.Название.Полное) Тогда
			ЮЛ.Название.Полное = СтрокаДанные.НаименованиеОрганизации;
	    	СтруктураДанных.Название.Полное = СтрокаДанные.НаименованиеОрганизации;
		Иначе
			ЮЛ.Название.Полное = СтруктураДанных.Название.Полное;
		КонецЕсли;
		
		ДобавитьКодФилиала(ЮЛ, СтрокаДанные, ЗаполнитьКодФилиала);
		
		СтруктураДанных.Реквизиты.Вставить("ЮЛ", ЮЛ);
		
	КонецЕсли;		
	
	// ToDo:  адрес не полный, не хватает структуры КИ
	СтруктураДанных.Адрес.Юридический.Текст = СтрокаДанные.Адрес;  
	
КонецПроцедуры

Функция ДанныеСоставителя(ДанныеДокумента) Экспорт
	
	РезультатФункции = Новый Структура;
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	Если Не ЗначениеЗаполнено(РеквизитыОбъекта.Составитель)
		Или Не ЗначениеЗаполнено(РеквизитыОбъекта.Составитель_НаОснованииДокумент) Тогда
		
		Возврат РезультатФункции;
		
	КонецЕсли;
	
	// Заполним реквизиты. Используется для расчета данных по нашей организации	
	Реквизиты = ДанныеЮрЛица("Отгрузчик", ДанныеДокумента);
		
	РезультатФункции.Вставить("Наименование", Реквизиты.Название.Полное);
	РезультатФункции.Вставить("ДанныеЮрЛица", Реквизиты);
	
	Основание = РеквизитыОбъекта.Составитель_НаОснованииДокумент;
	Если ЗначениеЗаполнено(Основание) Тогда
		
		Массив = Новый Массив();
		Массив.Добавить(Основание);
		
		ДанныеДокументов = Saby_ТНОбщегоНазначенияСервер.РеквизитыДокументовСбис(Массив);
		
		ДанныеДок = ДанныеДокументов.Получить(Основание);
		ДанныеДок.Удалить("Тип");
		ДанныеДок.Удалить("Ссылка");
		
		РезультатФункции.Вставить("Основание", Новый Структура);
		РезультатФункции.Основание.Вставить("Документ", ДанныеДок);
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ШаблонФактАдрес() Экспорт
	
	Структура = Новый Структура; 
	Структура.Вставить("Фактический", Saby_ТНОбщегоНазначенияСервер.ОбщийШаблонАдреса());
		
	Возврат Структура;
	
КонецФункции

Функция ШаблонИностранногоЛица() Экспорт
	
	СтруктураИнЛицо = Новый Структура;
	СтруктураИнЛицо.Вставить("Страна",               "");
	СтруктураИнЛицо.Вставить("Наименование",         "");
	СтруктураИнЛицо.Вставить("ИныеСведения",         "");
	СтруктураИнЛицо.Вставить("ИдентификацияСтатуса", 2); // 1 - ФЛ, 2 - ЮЛ
	
	СтруктураИнЛицо.Вставить("ИдентифицирующийДокумент", Новый Структура);
	СтруктураИнЛицо.ИдентифицирующийДокумент.Вставить("Вид",        "");
	СтруктураИнЛицо.ИдентифицирующийДокумент.Вставить("Номер",      "");
	СтруктураИнЛицо.ИдентифицирующийДокумент.Вставить("ДатаВыдачи", "");
	
	Возврат СтруктураИнЛицо;
	
КонецФункции

Функция РеквизитыНашейОрганизации(Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;		
	КонецЕсли;              
	
	ЭтоФл = Ложь;
	Реквизиты = Организация.Реквизиты;
		
	Если Реквизиты.Свойство("ИП") Тогда  
		
		ДанныеОрганизации = ФорматНашейОрганизации(Истина);
		ЗаполнитьЗначенияСвойств(ДанныеОрганизации, Реквизиты.ИП);
		
	ИначеЕсли Реквизиты.Свойство("ФЛ") Тогда 
		
		ЭтоФл = Истина;
		ДанныеОрганизации = ФорматНашейОрганизации(Истина);
		ЗаполнитьЗначенияСвойств(ДанныеОрганизации, Реквизиты.ФЛ);
		ДанныеОрганизации.ЧастноеЛицо = "Да";
		
	ИначеЕсли Реквизиты.Свойство("ЮЛ") Тогда
		
		ДанныеОрганизации = ФорматНашейОрганизации();
		ЗаполнитьЗначенияСвойств(ДанныеОрганизации, Реквизиты.ЮЛ, , "Название");
		ДанныеОрганизации.Название = Реквизиты.ЮЛ.Название.Полное;
		
	Иначе 	                         
		
		// Иностранное лицо
		ДанныеОрганизации = ФорматНашейОрганизации();
		ДанныеОрганизации.Название = Реквизиты.ИностаноеЛицо.Наименование;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеОрганизации.КодФилиала) Тогда
		ДанныеОрганизации.Удалить("КодФилиала");
	КонецЕсли;
	
	ОбщаяСтруктура = Новый Структура;
	Если ЭтоФл Тогда
		ОбщаяСтруктура.Вставить("СвФЛ", ДанныеОрганизации);
	Иначе
		ОбщаяСтруктура.Вставить("СвЮЛ", ДанныеОрганизации);
	КонецЕсли;
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

Функция КонтактыЮрЛица(КонтактныеДанные, Роль) Экспорт
			
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Роль);  
	Отбор.Вставить("Тип",  Перечисления.ТипыКонтактнойИнформации.Телефон);
		
	// Телефоны 
	МассивТелефонов = Новый Массив; 	
	НайденныеСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(КонтактныеДанные, Отбор);
	
	Для Каждого Строка Из НайденныеСтроки Цикл   
		
		Если Не ЗначениеЗаполнено(Строка.Значение) Тогда 
			Продолжить;
		КонецЕсли;
		
		СтруктураТелефон = Новый Структура;
		СтруктураТелефон.Вставить("Значение", Строка.Значение);
		
		МассивТелефонов.Добавить(СтруктураТелефон);
		
	КонецЦикла;	
	
	// Емейлы
	МассивЕмейл = Новый Массив;
	Отбор.Вставить("Тип",  Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	НайденныеСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(КонтактныеДанные, Отбор);
	Для Каждого Строка Из НайденныеСтроки Цикл 
		
		Если Не ЗначениеЗаполнено(Строка.Значение) Тогда 
			Продолжить;
		КонецЕсли;
		
		СтруктураЕмейл = Новый Структура;
		СтруктураЕмейл.Вставить("Значение", Строка.Значение);
		
		МассивЕмейл.Добавить(СтруктураЕмейл);
		
	КонецЦикла;
	
	Структура = Новый Структура;
	Структура.Вставить("Телефоны", МассивТелефонов);
	Структура.Вставить("Емейлы",   МассивЕмейл);
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти // ЮрЛицаИнтерфейс

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Процедура ВыгрузитьДокумент(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат)
	
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьПараметрыВыгрузки(ПараметрыВыгрузки);
	
	ЗаполнитьСтруктуруДокументаСПроверкойФЛК(ПараметрыВыгрузки, Результат);
		
	Если Не ЗначениеЗаполнено(ПараметрыВыгрузки.СтруктураДокумента) Тогда
		Возврат;
	КонецЕсли;
		
	Если Не ПараметрыВыгрузки.ОтрицательныйПереход Тогда
		Если Не ВложениеВыгружено(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ОтрицательныйПереход Или ПараметрыВыгрузки.ДинамическийТитул Тогда
		Если Не ПереходВыполнен(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат) Тогда
			Возврат;
		Иначе
			
			ЗаписатьСтатистику(ОбщиеПараметрыВыгрузки, 
				ПараметрыВыгрузки.Ссылка, 
				ПараметрыВыгрузки.Тип, 
				ПараметрыВыгрузки.Этап);
				
		КонецЕсли;
	Иначе
				
		Параметры = Новый Структура;
		Параметры.Вставить("ИД",           ПараметрыВыгрузки.ИдентификаторСБИС);
		Параметры.Вставить("АктивныйЭтап", ПараметрыВыгрузки.Этап);
		Параметры.Вставить("Ссылка",       ПараметрыВыгрузки.Ссылка);
		Параметры.Вставить("Состояние",    Неопределено);
		Параметры.Вставить("СбисИд",       Неопределено);
		
		Saby_ТНОбщегоНазначенияСервер.УстановитьИДИСтатус(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВложениеВыгружено(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат)
	
	Если ПараметрыВыгрузки.ИмяМетаданных <> "Saby_ТранспортнаяНакладная" Тогда
		Возврат ВложениеВыгруженоПоНовому(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат);
	КонецЕсли;
	
	Ошибки = Неопределено;
		
	Попытка
		
		// 1. Выгрузим наш документ в сбис формата json и получим xml вложения
		//    в результате получим данные для создания документа в сбис
		ОтветВложение = РезультатПолученияВложенияПоПодстановкам(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки);
		Если Не ЗначениеЗаполнено(ОтветВложение) Тогда  
			
			ТекстОшибки = "Не сформирован файл json для генерации вложения!";
			Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
			Ошибки.Вставить("ИмяМетаданных", ПараметрыВыгрузки.ИмяМетаданных);
			Результат.Ошибки.Вставить(ПараметрыВыгрузки.Ссылка, Ошибки);
			Возврат Неопределено;
			
		КонецЕсли;	
				
		// 2. Отправим в сбис полученное вложение документа
		//    передадим полученный ранее xml в формате двоичных данных		       
		
		// на 1 этапе записываем документ, далее прикрепляем вложения
		Если Перечисления.Saby_ТипТитулаЭтрН.ЭтоПервыйТитул(ПараметрыВыгрузки.ТипТитула) Тогда
			
			РезультатЗаписиСБИС = ЗаписатьНовыйДокументВСбис(ОтветВложение, ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки);
			
			ПараметрыВыгрузки.ИдентификаторСБИС = РезультатЗаписиСБИС["Идентификатор"];
			
		Иначе 	
			// для существующего документа пишем только вложение
			РезультатЗаписиСБИС = ЗаписатьВложениеДляДокументаСбис(
				ОтветВложение.Файл, ПараметрыВыгрузки.ИдентификаторСБИС, ОбщиеПараметрыВыгрузки);
			
		КонецЕсли;
		
		Если Не ПараметрыВыгрузки.ДинамическийТитул Тогда					
			
			УдалитьЛишниеДействия(РезультатЗаписиСБИС);
			
			СтруктураОтвет = ДанныеУспешнойЗагрузкиДокумента(
				ПараметрыВыгрузки.Ссылка, Ложь, Результат.Итог.Количество, РезультатЗаписиСБИС["Этап"]);
			Результат.Успешные.Добавить(СтруктураОтвет);				
			
		КонецЕсли;
		
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		ТекстОшибки = Saby_ТНОбщегоНазначенияСервер.ПричинаОшибки(ИнфоОшибки.Описание);					
		Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);     
		Ошибки.Вставить("ИмяМетаданных", ПараметрыВыгрузки.ИмяМетаданных);
		Результат.Ошибки.Вставить(ПараметрыВыгрузки.Ссылка, Ошибки);				
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ВложениеВыгруженоПоНовому(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат)
	
	Ошибки = Неопределено;
	
	Попытка
		
		ДанныеДокумента = ПараметрыВыгрузки.СтруктураДокумента;
		Если Не ЗначениеЗаполнено(ДанныеДокумента) Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		РезультатЗаписиСБИС = ЗаписатьНовыйДокументВСбис(ДанныеДокумента, ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки);
		
		ПараметрыВыгрузки.ИдентификаторСБИС = РезультатЗаписиСБИС["Идентификатор"];
		
		Если Не ПараметрыВыгрузки.ДинамическийТитул Тогда					
			
			УдалитьЛишниеДействия(РезультатЗаписиСБИС);
			
			СтруктураОтвет = ДанныеУспешнойЗагрузкиДокумента(
				ПараметрыВыгрузки.Ссылка, Ложь, Результат.Итог.Количество, РезультатЗаписиСБИС["Этап"]);
			Результат.Успешные.Добавить(СтруктураОтвет);				
			
		КонецЕсли;
		
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		ТекстОшибки = Saby_ТНОбщегоНазначенияСервер.ПричинаОшибки(ИнфоОшибки.Описание);
		Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
		Ошибки.Вставить("ИмяМетаданных", ПараметрыВыгрузки.ИмяМетаданных);
		Результат.Ошибки.Вставить(ПараметрыВыгрузки.Ссылка, Ошибки);
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция РезультатПолученияВложенияПоПодстановкам(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки)
	
	ДанныеДокумента = ПараметрыВыгрузки.СтруктураДокумента;
	Если Не ЗначениеЗаполнено(ДанныеДокумента) Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	ИмяКлючаНашаОрганизация = "НашаОрганизация";

	Если ДанныеДокумента.Вложение[0].Свойство(ИмяКлючаНашаОрганизация) Тогда
		НашаОрганизация = ДанныеДокумента.Вложение[0].НашаОрганизация;
		ДанныеДокумента.Вложение[0].Удалить(ИмяКлючаНашаОрганизация);
		Если Не ДанныеДокумента.Вложение[0].Подстановка.Свойство("Файл") Тогда
			ДанныеДокумента.Вложение[0].Подстановка.Грузоотправитель.Удалить("Реквизиты");
		КонецЕсли;
	Иначе 
		НашаОрганизация = Неопределено;
	КонецЕсли;
	
	ПараметрыМетода  = Новый Структура;
	ПараметрыМетода.Вставить("Документ", ДанныеДокумента);
	
	Ответ = ОбщиеПараметрыВыгрузки.ОбъектОбработки.local_helper_exec_method(
		ОбщиеПараметрыВыгрузки.context_params, "СБИС.СгенерироватьВложение", ПараметрыМетода, Истина);
	ДанныеОтвета = Ответ["result"];
	
	Вложение = ДанныеОтвета["Вложение"][0];
	Файл     = Вложение["Файл"];
	
	Если ДанныеДокумента.Свойство("Идентификатор") Тогда 
		ИдСбис = ДанныеДокумента.Идентификатор;
	Иначе 	 
		ИдСбис = "";
	КонецЕсли;
	
	Регламент = Новый Структура;
	Регламент.Вставить("Название", "Транспортная накладная");
	
	ОтветСтруктура = Новый Структура;
	ОтветСтруктура.Вставить("Файл",      Файл);
	ОтветСтруктура.Вставить("ИДСбис",    ИдСбис);
	ОтветСтруктура.Вставить("Регламент", Регламент);
	ОтветСтруктура.Вставить("Этап",      ДанныеДокумента.Вложение[0].Подтип);
	
	ОтветСтруктура.Вставить(ИмяКлючаНашаОрганизация, НашаОрганизация);
	
	Возврат ОтветСтруктура;
	
КонецФункции

Функция ЗаписатьНовыйДокументВСбис(ДанныеXML, ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки)
	
	Если Не ДанныеXML.Свойство("Файл") Тогда
		Возврат РезультатЗаписиНовогоДокументаВСБИС(ДанныеXML, ОбщиеПараметрыВыгрузки);
	КонецЕсли;
	
	Файл   = ДанныеXML.Файл;
		
	ФайлСтруктура = Новый Структура;
	ФайлСтруктура.Вставить("Имя",            Файл["Имя"]);
	ФайлСтруктура.Вставить("ДвоичныеДанные", Файл["ДвоичныеДанные"]);
	
	СтруктураВложения = Новый Структура;
	СтруктураВложения.Вставить("Файл", ФайлСтруктура);
	
	МассивВложений = Новый Массив;
	МассивВложений.Добавить(СтруктураВложения);
	
	Параметры = Новый Структура;	
	Параметры.Вставить("Тип",      ПараметрыВыгрузки.Тип);	
	Параметры.Вставить("Вложение", МассивВложений); 
	
	Если ЗначениеЗаполнено(ДанныеXML.ИдСбис) Тогда 
		Параметры.Вставить("Идентификатор", ДанныеXML.ИдСбис);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеXML.НашаОрганизация) Тогда
		Параметры.Вставить("НашаОрганизация", ДанныеXML.НашаОрганизация);
	КонецЕсли;
	
    Параметры.Вставить("Регламент", ДанныеXML.Регламент);
	
	ДокСбис = ОбщиеПараметрыВыгрузки.ОбъектОбработки.local_helper_write_document(
		ОбщиеПараметрыВыгрузки.context_params, Параметры);
	
	Возврат ДокСбис;
	
КонецФункции

Функция РезультатЗаписиНовогоДокументаВСБИС(ДанныеДокумента, ОбщиеПараметрыВыгрузки)
	
	ПараметрыМетода = Новый Структура();
	ПараметрыМетода.Вставить("Документ", ДанныеДокумента);
	
	ИмяУзлаАдресация = "Адресация";
	Если ДанныеДокумента.Свойство(ИмяУзлаАдресация) Тогда
		ПараметрыМетода.Вставить(ИмяУзлаАдресация, ДанныеДокумента.Адресация);
		ДанныеДокумента.Удалить(ИмяУзлаАдресация);
	КонецЕсли;
	
	ИменованыеАргументы = Новый Структура();
	ИменованыеАргументы.Вставить("multithread_mode", Ложь);
	ИменованыеАргументы.Вставить("timeout",          120);
	
	ОтветОнлайна = ОбщиеПараметрыВыгрузки.ОбъектОбработки.local_helper_exec_method(
		ОбщиеПараметрыВыгрузки.context_params,
		"СБИС.ЗаписатьДокумент",
		ПараметрыМетода,
		Истина,
		ИменованыеАргументы);
		
	РезультатЗапроса = ОтветОнлайна["result"];
	Если ЗначениеЗаполнено(РезультатЗапроса) Тогда
		ОтветОнлайна = РезультатЗапроса;
	КонецЕсли;
	
	Возврат ОтветОнлайна;
	
КонецФункции

Функция ЗаписатьВложениеДляДокументаСбис(Файл, ИдСбис, ОбщиеПараметрыВыгрузки)
	
	ФайлСтруктура = Новый Структура;
	ФайлСтруктура.Вставить("Имя",            Файл["Имя"]);
	ФайлСтруктура.Вставить("ДвоичныеДанные", Файл["ДвоичныеДанные"]);
	
	СтруктураВложения = Новый Структура; 
	СтруктураВложения.Вставить("Файл", ФайлСтруктура);
	
	МассивВложений = Новый Массив;
	МассивВложений.Добавить(СтруктураВложения);
			
	Параметры = Новый Структура;		
	Параметры.Вставить("Идентификатор", ИдСбис);
	Параметры.Вставить("Вложение",      МассивВложений);
	
    Результат = ОбщиеПараметрыВыгрузки.ОбъектОбработки.local_helper_write_attachment(
		ОбщиеПараметрыВыгрузки.context_params, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДействиеКПереходуСбис(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ДанныеДляПодписания)
	
	СтруктураЭтапа = ЗначениеСледующегоЭтапа(
		ПараметрыВыгрузки.КодТитула,
		ПараметрыВыгрузки.ОтрицательныйПереход,
		ПараметрыВыгрузки.ПричинаОтрицательногоПерехода,
		ДанныеДляПодписания);
		
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("Идентификатор", ПараметрыВыгрузки.ИдентификаторСБИС); 
	ПараметрыДействия.Вставить("Этап",          СтруктураЭтапа);
		
	Результат = ОбщиеПараметрыВыгрузки.ОбъектОбработки.local_helper_prepare_action(
		ОбщиеПараметрыВыгрузки.context_params, ПараметрыДействия);
	
	Структура = Новый Структура;
	Структура.Вставить("Результат",         Результат);
	Структура.Вставить("ПараметрыДействия", ПараметрыДействия);
	
	Возврат Структура;
	
КонецФункции

Процедура ВыполнитьДействиеВСбис(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ПараметрыДействия)
	
	ОбщиеПараметрыВыгрузки.ОбъектОбработки.local_helper_execute_action(
		ОбщиеПараметрыВыгрузки.context_params, ПараметрыДействия);

	ДанныеДляЗагрузки = Новый Массив;
	ПараметрыЗагрузки = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыЗагрузки(ПараметрыВыгрузки.Ссылка);
	ПараметрыЗагрузки.ИзДокумента        = Истина;
	ПараметрыЗагрузки.ТекущийТитул       = ПараметрыВыгрузки.ТипТитула;
	ПараметрыЗагрузки.ТолькоАктивныйЭтап = Истина;
	ПараметрыЗагрузки.ИмяМетаданных      = ПараметрыВыгрузки.ИмяМетаданных;
	ДанныеДляЗагрузки.Добавить(ПараметрыЗагрузки);
	
	ДополнительныеПараметры = Новый Структура;
	
	Saby_ТНЗагрузкаСервер.РезультатЗагрузкиДокументов(
		ДанныеДляЗагрузки, ОбщиеПараметрыВыгрузки.context_params, ДополнительныеПараметры);
	
КонецПроцедуры

Функция ЗначениеСледующегоЭтапа(ТекущийЭтап, ОтрицательныйПереход, ПричинаОтрицательногоПерехода, ДанныеДляПодписания)
	
	Комментарий = "";
	
	Если ТекущийЭтап = "1110343" Тогда
		
		Этап       = "Переадресовка";
		// ИдЭтап "327a0052-6b11-49eb-ba7a-c74c90938902"
		
		Действие   = "Переадресован";
		ИдДействие = "7b9b3f53-6549-4e37-8c49-650a7e41296c";
		
	ИначеЕсли ТекущийЭтап = "1110344" Тогда
		
		Этап       = "Замена водителей/ТС";
		// ИдЭтап "7b4c733f-3639-41a5-9e7c-bdac7e9d9a93"
		
		Действие   = "Замена водителей/ТС";
		ИдДействие = "8a458ae4-5a38-497d-b4ec-424e14cc64ed";
		
	ИначеЕсли ТекущийЭтап = "1167009" Тогда
		
		Этап       = "Уведомление о переадресовке";
		// ИдЭтап "bc2bb0b5-194f-40be-afd2-e43e01ed4baf"
		
		Действие   = "Уведомить";
		ИдДействие = "3f9da9bb-6cff-4d9f-aa97-99891079e4dd";
		
	ИначеЕсли ТекущийЭтап = "1110345" Тогда
		
		Этап       = "Изменить стоимость";
		// ИдЭтап "a03b3162-615f-49b4-916e-aa49a559e404"
		
		Действие   = "Согласовать";
		ИдДействие = "c1c702d6-f686-4baf-aa0f-52f4baee2e66";
		
	ИначеЕсли ТекущийЭтап = "1110346" Тогда
		
		Этап       = "Согласовать стоимость";
		// ИдЭтап "49c91f1d-1860-46ab-8279-d42ea215b0ce"
		
		Если ОтрицательныйПереход Тогда			
			Действие    = "Отклонено";
			ИдДействие  = "cc83d6a2-1c02-4246-8dc0-280f5ef9c9aa";
			Комментарий = ПричинаОтрицательногоПерехода;
		Иначе			
			Действие   = "Согласовано";
			ИдДействие = "9c4737f5-24a9-40e8-9d21-6b1122293550";			
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураДействия = Новый Структура;
    СтруктураДействия.Вставить("Название",      Действие);
	СтруктураДействия.Вставить("Идентификатор", ИдДействие);
	СтруктураДействия.Вставить("Комментарий",   Комментарий);
	
	Если ДанныеДляПодписания <> Неопределено
		И ДанныеДляПодписания.Свойство("СертификатДок")
		И ДанныеДляПодписания.СертификатДок <> Неопределено Тогда
		СтруктураДействия.Вставить("Сертификат", ДанныеДляПодписания.СертификатДок);
	КонецЕсли;
	
	СтруктураЭтапа = Новый Структура;
	СтруктураЭтапа.Вставить("Действие", СтруктураДействия);
	
	СтруктураЭтапа.Вставить("Название", Этап);
	
	Возврат СтруктураЭтапа;
	
КонецФункции

Процедура УдалитьЛишниеДействия(СоответствиеДанных)
	
	Этап = СоответствиеДанных["Этап"];
	
	Если Не ЗначениеЗаполнено(Этап) Тогда 
		Возврат;
	КонецЕсли;
		
	Для Каждого Элемент Из Этап Цикл 
		
		Действия = Элемент["Действие"];
		Если Не ЗначениеЗаполнено(Действия) Тогда 
			Продолжить;
		КонецЕсли;
		
		НовыеДействия = Новый Массив;
		
		Для Каждого Действие Из Действия Цикл 
			Если Действие["Название"] <> "Переназначить" Тогда 
				НовыеДействия.Добавить(Действие);
			КонецЕсли;
		КонецЦикла;
		
		Элемент.Вставить("Действие", НовыеДействия);
		
	КонецЦикла;
		
КонецПроцедуры

Функция ПереходВыполнен(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат)
	
	ПараметрыДействия = ПараметрыВыполненияДействия(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат);
	
	Если ПараметрыДействия = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Ошибки = Неопределено;
	
	Попытка
		
		ВыполнитьДействиеВСбис(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ПараметрыДействия);
								
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		ТекстОшибки = Saby_ТНОбщегоНазначенияСервер.ПричинаОшибки(ИнфоОшибки.Описание);					
		Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
		Ошибки.Вставить("ИмяМетаданных", ПараметрыВыгрузки.ИмяМетаданных);
		Результат.Ошибки.Вставить(ПараметрыВыгрузки.Ссылка, Ошибки);
		
		СостояниеКод = 6; // Ошибка
		
		Состояние = Справочники.Saby_СостоянияОбъектов.ПолучитьСтатусДокументаСБИС(СостояниеКод);
		
		ПараметрыСтатус = Новый Структура;
		ПараметрыСтатус.Вставить("ИД",           ПараметрыВыгрузки.ИдентификаторСБИС);
		ПараметрыСтатус.Вставить("АктивныйЭтап", ПараметрыВыгрузки.Этап);
		ПараметрыСтатус.Вставить("Ссылка",       ПараметрыВыгрузки.Ссылка);
		ПараметрыСтатус.Вставить("Состояние",    Состояние);
		ПараметрыСтатус.Вставить("СбисИд",       "");
		
		Saby_ТНОбщегоНазначенияСервер.УстановитьИДИСтатус(ПараметрыСтатус);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	СтруктураОтвет = ДанныеУспешнойЗагрузкиДокумента(
		ПараметрыВыгрузки.Ссылка, Истина, Результат.Итог.Количество);
	Результат.Успешные.Добавить(СтруктураОтвет);
		
	Возврат Истина;
	
КонецФункции

Процедура ЗаписатьСтатистику(ОбщиеПараметрыВыгрузки, Документ, Тип, Титул)
	
	ОбъектОбработки = ОбщиеПараметрыВыгрузки.ОбъектОбработки;
	
	Попытка
		
		ИмяТитула = "Переход\" + Титул;
		
		ОбъектОбработки.local_helper_write_stat(
			ОбщиеПараметрыВыгрузки.context_params,
			ИмяТитула,
			Тип,
			1);
			
	Исключение
				
		ИнфоОшибки = ИнформацияОбОшибке();
		
		Saby_ТНОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации(
			Документ,
			"Не записана статистика документа",
			ИнфоОшибки.Описание);
		
	КонецПопытки;
	
КонецПроцедуры

#Область ПодготовитьДействие

Функция ПараметрыВыполненияДействия(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, Результат)
	
	ПодготовкаУпала = Ложь;
	Попытка
		ДанныеДляПодписания = ДанныеДляПодписанияНовые(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки);
		РезультатПодготовки = ПодготовитьДействиеКПереходуСбис(
			ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ДанныеДляПодписания.ТекущиеДанныеСертификата);
	Исключение
		ПодготовкаУпала = Истина;
	КонецПопытки;
	
	Ошибки = Неопределено;
	
	Если ПодготовкаУпала Тогда
		Попытка
			ДанныеДляПодписания = ДанныеДляПодписанияНовые(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки);
			РезультатПодготовки = ПодготовитьДействиеКПереходуСбис(
				ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ДанныеДляПодписания.ТекущиеДанныеСертификата);
		Исключение
			ИнфоОшибки = ИнформацияОбОшибке();
			ТекстОшибки = Saby_ТНОбщегоНазначенияСервер.ПричинаОшибки(ИнфоОшибки.Описание);
			Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
			Ошибки.Вставить("ИмяМетаданных", ПараметрыВыгрузки.ИмяМетаданных);
			Результат.Ошибки.Вставить(ПараметрыВыгрузки.Ссылка, Ошибки);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДляПодписания.ТекущиеДанныеСертификата) Тогда
		ДанныеДляПодписания = ДанныеДляПодписанияНовые(
			ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, , РезультатПодготовки["Результат"]);
		Если Не ЗначениеЗаполнено(ДанныеДляПодписания.ТекущиеДанныеСертификата) Тогда
			Возврат РезультатПодготовки.ПараметрыДействия;
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанныеСертификата = ДанныеДляПодписания.ТекущиеДанныеСертификата;
	Пока Не ПодписьДобавлена(ОбщиеПараметрыВыгрузки, РезультатПодготовки, ТекущиеДанныеСертификата) Цикл
		
		ДанныеДляПодписания = ДанныеДляПодписанияНовые(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, ДанныеДляПодписания);
		
		ТекущиеДанныеСертификата = ДанныеДляПодписания.ТекущиеДанныеСертификата;
		Если Не ЗначениеЗаполнено(ТекущиеДанныеСертификата) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатПодготовки.ПараметрыДействия;
	
КонецФункции

Функция ДанныеДляПодписанияНовые(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки,
		ИсходныеДанные = Неопределено, РезультатЗапроса = Неопределено)
	
	Если ИсходныеДанные = Неопределено Тогда
		РезультатФункции = Новый Структура;
		РезультатФункции.Вставить(
			"ДоступныеСертификаты",
			ДоступныеЛокальныеСертификаты(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, РезультатЗапроса));
	Иначе
		РезультатФункции = ИсходныеДанные;
		МассивСертификатов = РезультатФункции.ДоступныеСертификаты["Сертификат"];
		ИндексПоследнегоСертификата = НайтиПодписьВМассивеПодписей(
			МассивСертификатов, РезультатФункции.ТекущиеДанныеСертификата);
		
		Пока ИндексПоследнегоСертификата >= 0 Цикл
			МассивСертификатов.Удалить(ИндексПоследнегоСертификата);
			ИндексПоследнегоСертификата = ИндексПоследнегоСертификата - 1;
		КонецЦикла;
		
	КонецЕсли;
	
	ТекущиеДанныеСертификата = ОбщиеПараметрыВыгрузки.ОбъектОбработки.сбисОпределитьДанныеДляПодписания(
		Неопределено, Неопределено, РезультатФункции.ДоступныеСертификаты);

	РезультатФункции.Вставить("ТекущиеДанныеСертификата", ТекущиеДанныеСертификата);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция НайтиПодписьВМассивеПодписей(МассивСертификатов, ТекущиеДанныеСертификата)
	
	РезультатФункции = -1;
	
	ОтпечатокТекущегоСертификата = ТекущиеДанныеСертификата["СертификатДок"]["Отпечаток"];
	
	Индекс = 0;
	Для Каждого ДанныеСертификата Из МассивСертификатов Цикл
		
		Если ДанныеСертификата["Отпечаток"] = ОтпечатокТекущегоСертификата Тогда
			РезультатФункции = Индекс;
			Прервать;
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПодписьДобавлена(ОбщиеПараметрыВыгрузки, РезультатПодготовки, ДанныеДляПодписания)
	
	ВложенияДляДобавленияПодписи = РезультатПодготовки["Результат"]["Этап"][0]["Вложение"];
	
	Контекст = Новый Структура("params", ОбщиеПараметрыВыгрузки.context_params);
	
	ТипДанныхПодписания = ДанныеДляПодписания["Тип"];
	Если ТипДанныхПодписания = "Дистанционное" Тогда
		ОбщиеПараметрыВыгрузки.ОбъектОбработки.ПодписатьДистанционно(
			Контекст,
			ВложенияДляДобавленияПодписи,
			ДанныеДляПодписания["СертификатДляПодписания"]);
	ИначеЕсли ТипДанныхПодписания = "ЛокальноеНаСервере" Тогда
		ОбщиеПараметрыВыгрузки.ОбъектОбработки.ПодписатьНаСервере(
			Контекст,
			ВложенияДляДобавленияПодписи,
			ДанныеДляПодписания["СертификатДляПодписания"]);
	ИначеЕсли ТипДанныхПодписания = "ЛокальноеНаКлиенте" Тогда
		ОбщиеПараметрыВыгрузки.ОбъектОбработки.ПодписатьНаКлиенте(
			Контекст,
			ВложенияДляДобавленияПодписи,
			ДанныеДляПодписания,
			Неопределено);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	ИмяКлючаПодписи = "Подпись";

	Если ВложенияДляДобавленияПодписи[0][ИмяКлючаПодписи] = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДвоичныеДанные = ВложенияДляДобавленияПодписи[0][ИмяКлючаПодписи][0].Файл.ДвоичныеДанные;
	Идентификатор  = ВложенияДляДобавленияПодписи[0]["Идентификатор"];
	
	СтруктураПодписи = Новый Структура;
	СтруктураПодписи.Вставить("Файл", Новый Структура);
	СтруктураПодписи.Файл.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	
	МассивПодписей = Новый Массив;
	МассивПодписей.Добавить(СтруктураПодписи);
	
	СтруктураВложения = Новый Структура;
	СтруктураВложения.Вставить("Идентификатор", Идентификатор);
	СтруктураВложения.Вставить(ИмяКлючаПодписи, МассивПодписей);
	
	МассивВложений = Новый Массив;
	МассивВложений.Добавить(СтруктураВложения);
	
	РезультатПодготовки.ПараметрыДействия.Этап.Вставить("Вложение", МассивВложений);
	
	Возврат Истина;
	
КонецФункции

Функция ДоступныеЛокальныеСертификаты(ПараметрыВыгрузки, ОбщиеПараметрыВыгрузки, РезультатЗапроса = Неопределено)
	
	РезультатФункции = Новый Соответствие;
	
	УзелСертификат = "Сертификат";
	
	РезультатФункции.Вставить("ТребуетПодписания", "Да");
	РезультатФункции.Вставить(УзелСертификат, Новый Массив);
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Идентификатор", ПараметрыВыгрузки.ИдентификаторСБИС);
	ПараметрыМетода.Вставить("ДопПоля",       "ЭтапВернутьВсеСертификаты");
	
	Если РезультатЗапроса = Неопределено Тогда
		Результат = ОбщиеПараметрыВыгрузки.ОбъектОбработки.local_helper_read_document(
			ОбщиеПараметрыВыгрузки.context_params, ПараметрыМетода);
	Иначе
		Результат = РезультатЗапроса;
	КонецЕсли;
	
	Если Результат["Этап"] = Неопределено Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Для Каждого Этап Из Результат["Этап"] Цикл
		Для Каждого Сертификат Из Этап["Действие"][0][УзелСертификат] Цикл			
			РезультатФункции[УзелСертификат].Добавить(Сертификат);
		КонецЦикла;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ПодготовитьДействие

Функция ДанныеУспешнойЗагрузкиДокумента(Ссылка, ДинамическийТитул, КоличествоЗагружено, ЭтапыИзСБИС = Неопределено)
	
	КоличествоЗагружено = КоличествоЗагружено + 1;
	
	СтруктураОтвет = Новый Структура;
	СтруктураОтвет.Вставить("Ссылка",            Ссылка);
	СтруктураОтвет.Вставить("Этап",              ЭтапыИзСБИС);
	СтруктураОтвет.Вставить("ДинамическийТитул", ДинамическийТитул);
	
	Возврат СтруктураОтвет;
			
КонецФункции

// Возвращает дату в виде отформатированной строки с учетом смещения. 
// Аналог ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением, только с возможностью указать формат даты.
//
// Параметры:
//  ЛокальнаяДата	 - Дата	 	 - Дата
//  ФорматнаяСтрока	 - Строка	 - Форматная строка 
// 
// Возвращаемое значение:
//  Строка - Отформатированная дата с учетом смещения
//
Функция ФорматЛокальнойДатыСоСмещением(ЛокальнаяДата, ФорматнаяСтрока = "ДФ=ггггММддЧЧммсс")
	
	Если Не ЗначениеЗаполнено(ЛокальнаяДата) Тогда 
		Возврат "";
	КонецЕсли;
		
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Смещение = СмещениеСтандартногоВремени(ЧасовойПоясСеанса());
	#Иначе
		Смещение = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().СмещениеСтандартногоВремени;
	#КонецЕсли
	
	ПредставлениеСмещения = "";
	Если Смещение > 0 Тогда
		ПредставлениеСмещения = "+";
	ИначеЕсли Смещение < 0 Тогда
		ПредставлениеСмещения = "-";
		Смещение = - Смещение;
	Иначе
		ПредставлениеСмещения = "+00:00";
	КонецЕсли; 
	
	Если Смещение <> 0 Тогда
		ПредставлениеСмещения = ПредставлениеСмещения + Формат('00010101' + Смещение, "ДФ=HH:mm");
	КонецЕсли;
	
	Возврат Формат(ЛокальнаяДата, ФорматнаяСтрока) + ПредставлениеСмещения;
	
КонецФункции

Функция ФорматНашейОрганизации(ЭтоФЛ = Ложь)
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("ИНН",        "");
	ДанныеОрганизации.Вставить("КодФилиала", "");
	ДанныеОрганизации.Вставить("КодСтраны",  "");
	
	Если ЭтоФЛ Тогда
		ДанныеОрганизации.Вставить("Фамилия",     "");
		ДанныеОрганизации.Вставить("Имя",         "");
		ДанныеОрганизации.Вставить("Отчество",    "");
		ДанныеОрганизации.Вставить("ЧастноеЛицо", "Нет");
	Иначе 
		ДанныеОрганизации.Вставить("КПП",      "");
		ДанныеОрганизации.Вставить("Название", "");
	КонецЕсли;
	
	Возврат ДанныеОрганизации;
	
КонецФункции

#Область Транспорт

Функция СтрокаАвтотранспорта(ТранспортныеСредства)
	
	РезультатФункции = Неопределено;
	
	Автомобиль = Перечисления.Saby_ВидыТС.Автомобиль;
	
	Для Каждого СтрокаТранспорта Из ТранспортныеСредства Цикл
		
		Если СтрокаТранспорта.Вид <> Автомобиль Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатФункции = СтрокаТранспорта;
		
		Прервать;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция РеквизитыТранспортногоСредства(ТС)
	
	// ToDo: 1 общий запрос данных по всем ТС
	
	СсылкаТС = Справочники.ТранспортныеСредства.СоздатьЭлемент();
	Если Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("РегистрационныйЗнак", СсылкаТС) Тогда 
		ИмяРеквизитаРегЗнак = "РегистрационныйЗнак";
	Иначе 
		ИмяРеквизитаРегЗнак = "Код";
	КонецЕсли;
	
	Если ТипЗнч(СсылкаТС.Тип) = Тип("Строка") Тогда
		ИмяРеквизитаТип = "Тип";
	Иначе 
		ИмяРеквизитаТип = "Тип.Наименование";
	КонецЕсли;	
	
	Массив = Новый Массив; 
	Массив.Добавить(ИмяРеквизитаРегЗнак); // РегНомер
	Массив.Добавить(ИмяРеквизитаТип);
	Массив.Добавить("Марка"); 
	Массив.Добавить("ГрузоподъемностьВТоннах");
	Массив.Добавить("ВместимостьВКубическихМетрах");
	Массив.Добавить("НомерСТС");
	Массив.Добавить("VIN"); 
	Массив.Добавить("ТипВладения");
	Массив.Добавить("ДокументыПодтверждающиеВладение");
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТС, Массив);
	Результат.Вставить("ИмяРеквизитаРегЗнак", ИмяРеквизитаРегЗнак);
	Результат.Вставить("ИмяРеквизитаТип", ИмяРеквизитаТип);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеДляПодстановокТС(ДляПутевогоЛиста)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("СтруктураТС",       Новый Структура);
	РезультатФункции.Вставить("СоответствиеПолей", Новый Соответствие);
	
	РезультатФункции.СтруктураТС.Вставить("РегНомер", "");
	РезультатФункции.СтруктураТС.Вставить("Тип",      "");
	РезультатФункции.СтруктураТС.Вставить("Марка",    "");
	
	Если ДляПутевогоЛиста Тогда
		РезультатФункции.СтруктураТС.Вставить("Модель",           "");
		РезультатФункции.СтруктураТС.Вставить("ИнвентарныйНомер", "");
	Иначе
		РезультатФункции.СтруктураТС.Вставить("НомерСТС",         "");
		РезультатФункции.СтруктураТС.Вставить("VIN",              "");
		РезультатФункции.СтруктураТС.Вставить("ТипВладения",      "");
		РезультатФункции.СтруктураТС.Вставить("Грузоподъемность", 0);
		РезультатФункции.СтруктураТС.Вставить("Вместимость",      0);
	КонецЕсли;
	
	РезультатФункции.СоответствиеПолей.Вставить("РегНомер", "РегистрационныйНомер");
	РезультатФункции.СоответствиеПолей.Вставить("VIN",      "ВИН");
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ЗаполненоОснованиеПередачиГруза(ДанныеДляПроверки)
	
	Возврат Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("ОснованиеПередачиГруза", ДанныеДляПроверки)
		И ЗначениеЗаполнено(ДанныеДляПроверки.ОснованиеПередачиГруза);
	
КонецФункции

Процедура ЗаполнитьОснованияВладения(СтруктураТС, СтрокаТС)
	
	Если Не Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("ОснованияВладения", СтрокаТС)
		Или Не ЗначениеЗаполнено(СтрокаТС.ОснованияВладения) Тогда
		Возврат;
	КонецЕсли;
	
	МассивДокументов = ЗначениеИзСтрокиВнутр(СтрокаТС.ОснованияВладения);
	
	ДанныеДокументов = Saby_ТНОбщегоНазначенияСервер.РеквизитыДокументовСбис(МассивДокументов);
	
	ОснованияВладения = Новый Массив;
	Для Каждого ДокВладения Из МассивДокументов Цикл
		
		Если Не ЗначениеЗаполнено(ДокВладения) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДок = ДанныеДокументов.Получить(ДокВладения);
		ДанныеДок.Удалить("Тип");
		
		ОснованияВладения.Добавить(ДанныеДок);
		
	КонецЦикла;
	
	СтруктураТС.Вставить("ОснованиеВладения", ОснованияВладения);
	
КонецПроцедуры

#КонецОбласти // Транспорт

#Область Водители

// Дополнение данных водителей на выгрузку
// Параметры:
// 	Водители - ТаблицаЗначений - данные водителей
// 	ПутевыеЛисты - ТаблицаЗначений - данные путевых листов водителей 
// Возвращаемое значение:
//	ДанныеДокументов - Соответствие - данные по всем документам водителей
//
Функция ДанныеДокументовВодителей(Водители, ПутевыеЛисты)
	
	ДанныеДокументов = Неопределено;
	
	ДокументыВодителей = Новый Массив;
	
	Для Каждого Строка Из Водители Цикл 		
				
		Если ЗаполненоОснованиеПередачиГруза(Строка) Тогда
			ДокументыВодителей.Добавить(Строка.ОснованиеПередачиГруза);
		КонецЕсли;
		
	КонецЦикла;
	
	// Путевые листы
	Для Каждого СтрокаЛисты Из ПутевыеЛисты Цикл 				
		
		Если ЗначениеЗаполнено(СтрокаЛисты.Документ) Тогда 			
			ДокументыВодителей.Добавить(СтрокаЛисты.Документ);			
		КонецЕсли;	
		
	КонецЦикла;
		
	Если ДокументыВодителей.Количество() Тогда  
		ДанныеДокументов = Saby_ТНОбщегоНазначенияСервер.РеквизитыДокументовСбис(ДокументыВодителей);
	КонецЕсли;
	
	Возврат ДанныеДокументов;
	
КонецФункции

Процедура ЗаполнитьТелефоныВодителя(СтрокаВодителя, ДанныеВодителя)
	
	Если Не ЗначениеЗаполнено(СтрокаВодителя.Телефоны) Тогда
		Возврат;
	КонецЕсли;
	
	МассивТелефоны = ЗначениеИзСтрокиВнутр(СтрокаВодителя.Телефоны);
				
	ТелефоныНаВыгрузку = Новый Массив;
	Для Каждого Телефон Из МассивТелефоны Цикл
		
		СтруктураТелефон = Новый Структура;
		СтруктураТелефон.Вставить("Значение", Телефон);
		ТелефоныНаВыгрузку.Добавить(СтруктураТелефон);
		
	КонецЦикла;
				
	ДанныеВодителя.Телефон = ТелефоныНаВыгрузку;
	
КонецПроцедуры

Функция ШаблонДанныхВодителя()
	
	ДанныеВодителя = Новый Структура;
	
	ДанныеВодителя.Вставить("Имя",          "");
	ДанныеВодителя.Вставить("Фамилия",      "");
	ДанныеВодителя.Вставить("Отчество",     "");
	ДанныеВодителя.Вставить("ИНН",          "");
	ДанныеВодителя.Вставить("СведенияПЭП" , "");
	ДанныеВодителя.Вставить("ПутевойЛист",  Новый Структура); // документ ТрН
	ДанныеВодителя.Вставить("Телефон",      Новый Массив);
	
	ДанныеВодителя.Вставить("ВУ", Новый Структура);
	ДанныеВодителя.ВУ.Вставить("Номер",      "");
	ДанныеВодителя.ВУ.Вставить("Серия",      "");
	ДанныеВодителя.ВУ.Вставить("ДатаВыдачи", "");
	
	Возврат ДанныеВодителя;
	
КонецФункции

#КонецОбласти // Водители

#Область ЮрЛица

Функция ШаблонЮЛ()
	
	СтруктураЮЛ = Новый Структура;
		
	Наименование = Новый Структура;
	Наименование.Вставить("Полное", "");
	
	СтруктураЮЛ.Вставить("Название", Наименование);
	СтруктураЮЛ.Вставить("ИНН",      "");
	СтруктураЮЛ.Вставить("КПП",      "");
	
	Возврат СтруктураЮЛ;
	
КонецФункции

Функция ШаблонФизЛицо()
	
	СтруктураФизЛицо = Новый Структура;
	СтруктураФизЛицо.Вставить("ИНН",           "");
	СтруктураФизЛицо.Вставить("ИныеСведения",  "");
	СтруктураФизЛицо.Вставить("Фамилия",       "");
	СтруктураФизЛицо.Вставить("Имя",           "");
	СтруктураФизЛицо.Вставить("Отчество",      "");
	
	Возврат СтруктураФизЛицо;
	
КонецФункции

Функция ШаблонЮрЛицаИП()
	
	// ИП
	СтруктураИП = Новый Структура;
	СтруктураИП.Вставить("ИНН",                "");
	СтруктураИП.Вставить("ОГРН",               "");
	СтруктураИП.Вставить("ИныеСведения",       "");
	СтруктураИП.Вставить("Фамилия",            "");
	СтруктураИП.Вставить("Имя",                "");
	СтруктураИП.Вставить("Отчество",           "");

	Возврат СтруктураИП;
	
КонецФункции

Функция ШаблонЮрАдрес()
	
	Структура = Новый Структура;
	Структура.Вставить("Юридический", Saby_ТНОбщегоНазначенияСервер.ОбщийШаблонАдреса());
	
	Возврат Структура;
		
КонецФункции

Процедура ДобавитьКодФилиала(СтруктураЮрЛица, СтрокаДанные, ЗаполнитьКодФилиала)
	
	Если Не ЗаполнитьКодФилиала Или Не ЗначениеЗаполнено(СтрокаДанные.КодФилиала) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЮрЛица.Вставить("КодФилиала", СтрокаДанные.КодФилиала);
	
КонецПроцедуры

Процедура ЗаполнитьФИО(СтруктураДанных, СтрокаДанные, СтруктураЮрЛица, ЭтоИП)
	
	Если Не ЗначениеЗаполнено(СтрокаДанные.СтруктураФИО) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураФИО = ЗначениеИзСтрокиВнутр(СтрокаДанные.СтруктураФИО);
	ЗаполнитьЗначенияСвойств(СтруктураЮрЛица, СтруктураФИО);
	
	Если ЭтоИП Тогда
		Префикс = "ИП ";
	Иначе
		Префикс = "";
	КонецЕсли;
	
	СтруктураДанных.Название.Полное = Префикс + Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеФИО(СтруктураФИО);
	
КонецПроцедуры

#КонецОбласти // ЮрЛица

Функция ОписаниеТипаСсылки(СсылкаНаОбъект)
	
	ИмяТипа = СсылкаНаОбъект.Метаданные().ПолноеИмя();
	ИмяТипа = СтрЗаменить(ИмяТипа, "Справочник", "СправочникСсылка");
	ИмяТипа = СтрЗаменить(ИмяТипа, "Документ", "ДокументСсылка");
	
	Возврат Новый ОписаниеТипов(ИмяТипа);
	
КонецФункции

Функция ПараметрыМетодаЗаписиСтатистики(ТекущийТитул, ДокументСсылка, ИмяКонфигурации)
	
	ИмяМетаданных  = Saby_ТНОбщегоНазначенияСервер.ИмяМетаданныхДокумента(ДокументСсылка);	
	ПараметрыAPI   = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыДокументаДляАПИ(ИмяМетаданных);
	ИмяФункционала = "1С Расширение_" + ПараметрыAPI.Тип;
	
	ЭтоДинамическийТитул = Перечисления.Saby_ТипТитулаЭтрН.ЭтоДинамическийТитул(ТекущийТитул);  
	Если ЭтоДинамическийТитул Тогда
		ИмяДействия = "Переход\" + СокрЛП(ТекущийТитул);
	Иначе 	
	    ИмяДействия = "Переход";
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура;
	
	Данные = Новый Структура;
	Данные.Вставить("action",     ИмяДействия);
	Данные.Вставить("context",    ИмяКонфигурации);
	Данные.Вставить("functional", ИмяФункционала);
	
	ПараметрыМетода.Вставить("data", Данные);

	Возврат ПараметрыМетода;
		
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
