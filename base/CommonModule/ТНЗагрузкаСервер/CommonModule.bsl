
#Область ПрограммныйИнтерфейс

// Загружает документы из СБИС
//
// Параметры:
//  ДанныеДляЗагрузки - Массив - массив структур см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыЗагрузки
//  context_params - Структура - параметры подключения к СБИС
//  ДополнительныеПараметры - Структура - дополнительные параметры для выгрузки
//
// Возвращаемое значение:
//   Структура - см. Saby_ТНОбщегоНазначенияСервер.РезультатВзаимодействияСоСБИС
//
Функция РезультатЗагрузкиДокументов(ДанныеДляЗагрузки, context_params, ДополнительныеПараметры) Экспорт
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	ОбщиеПараметрыЗагрузки = МодульТНОбщегоНазначенияСервер.ОбщиеПараметрыВыгрузкиЗагрузки(context_params);
	
	РезультатФункции = МодульТНОбщегоНазначенияСервер.РезультатВзаимодействияСоСБИС(ДанныеДляЗагрузки.Количество());
	
	Для Каждого ПараметрыЗагрузки Из ДанныеДляЗагрузки Цикл
		
		ЗагрузитьДокумент(ПараметрыЗагрузки, ОбщиеПараметрыЗагрузки, РезультатФункции);
		
	КонецЦикла;
	
	МодульКода("Справочники.Saby_ОпасныеГрузы").ДозаполнитьНовыеОпасныеГрузы(РезультатФункции.НовыеОпасныеГрузы);
	МодульКода("Справочники.Saby_ВидыУпаковки").ДозаполнитьНовыеВидыУпаковки(РезультатФункции.НовыеВидыУпаковки);
	
	РезультатФункции.Итог.Успех = Не ЗначениеЗаполнено(РезультатФункции.Ошибки);
	
	МодульТНОбщегоНазначенияСервер.ЗаписьОшибокВЖурналРегистрации(РезультатФункции.Ошибки);
	
	Возврат РезультатФункции;
	
КонецФункции

// Загружает изменения по документам из списка.
//
// Параметры:
//  СтруктураПараметров - Структура - параметры загрузки
//
// Возвращаемое значение:
//   Структура - с фиксированными ключами см. в конце функции
//
Функция ЗагрузкаДокументовПоИзменениям(СтруктураПараметров) Экспорт
	
	// Изменения для последующей обработки
	СписокИзменений = СписокИзмененийДокументов(СтруктураПараметров);
	
	Результат = МодульКода("Saby_ТНОбщегоНазначенияСервер").РезультатВзаимодействияСоСБИС(СписокИзменений.Количество());
	ОбработатьИзмененияДокументов(СписокИзменений, Результат, СтруктураПараметров);
	
	Результат.Итог.Успех = Результат.Итог.Количество = Результат.Итог.Всего;
	
	МодульКода("Saby_ТНОбщегоНазначенияСервер").ЗаписьОшибокВЖурналРегистрации(Результат.Ошибки);
	
	Возврат Результат;
	
КонецФункции

// Возвращает двоичные данные файла печатной формы из СБИС.
//
// Параметры:
//  ПараметрыЗагрузки - Структура - параметры загрузки
//  АдресФайлаВСбис - Строка - адрес печатной формы pdf
//
// Возвращаемое значение:
//   Строка - адрес двоичных данных файла печатной формы.
//
Функция АдресДвоичныхДанныхФайла(ПараметрыЗагрузки, АдресФайлаВСбис = Неопределено) Экспорт
	
	РезультатФункции = Неопределено;
	
	Если АдресФайлаВСбис = Неопределено Тогда
		АдресФайлаВСбис = СсылкаНаПечатнуюФорму(ПараметрыЗагрузки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресФайлаВСбис) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = ПараметрыЗагрузки.ОбъектОбработки.local_helper_download_from_link(
		ПараметрыЗагрузки.context_params,
		АдресФайлаВСбис);
	
	РезультатФункции = ПоместитьВоВременноеХранилище(
		ДвоичныеДанныеФайла,
		ПараметрыЗагрузки.УникальныйИдентификаторФормы);
	
	Возврат РезультатФункции;
	
КонецФункции

// Загружает данные динамического титула в форму динамического титула по переданному идентификатору.
// Запрос данных с онлайна не происходит, так как берутся ранее загруженные данные из регистра Saby_ДанныеТитулов
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма динамического титула
//  ИдентификаторТитула - Строка - идентификатор динамического титула из СБИС.
//                      Это не идентификатор документа, а идентификатор именно титула.
//
Процедура ЗагрузитьДанныеДинамическогоТитула(Форма, ИдентификаторТитула) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПолучитьДанныеТитулов(Форма, МенеджерВременныхТаблиц);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ДанныеТитулов.Данные КАК Данные,
	|	ДанныеТитулов.ТипТитула КАК Титул
	|ИЗ
	|	ДанныеТитулов КАК ДанныеТитулов
	|ГДЕ
	|	ДанныеТитулов.ИдентификаторТитула = &ИдентификаторТитула";
	
	ЗапросДанных.УстановитьПараметр("ИдентификаторТитула", ИдентификаторТитула);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ДляДокумента", ЗначениеИзСтрокиВнутр(ВыборкаДанных.Данные));
		СтруктураДанных.Вставить("Титул",        ВыборкаДанных.Титул);
		
		ДанныеТитула = Новый Массив;
		ДанныеТитула.Добавить(СтруктураДанных);
		
		ИмяМетаданных = МодульКода("Saby_ТНОбщегоНазначенияСервер").ИмяМетаданныхДокумента(Форма.СсылкаНаЭТрН);
		
		ДопПараметрыЗагрузкиВложения = ДопПараметрыЗагрузкиВложения();
		ДопПараметрыЗагрузкиВложения.ЗагрузкаСОнлайна = Ложь;
		ДопПараметрыЗагрузкиВложения.ИмяМетаданных    = ИмяМетаданных;
		
		МодульКода("Документы." + ИмяМетаданных).ВложенияЗагружены(
			ДанныеТитула,
			ВыборкаДанных.Титул,
			Форма,
			ДопПараметрыЗагрузкиВложения);
		
		МассивСсылокНаДокумент = Новый Массив;
		МассивСсылокНаДокумент.Добавить(Форма.СсылкаНаЭТрН);
		
		МассивТитулов = Новый Массив;
		МассивТитулов.Добавить(ИдентификаторТитула);
		МодульКода("РегистрыСведений.Saby_ДанныеТитулов").Просмотреть(МассивСсылокНаДокумент, МассивТитулов);
		
	КонецЕсли;
	
КонецПроцедуры

// Загружает документы ЭПД в регламентном задании во внешней обработке
//
Процедура ЗагрузитьДокументыЭПДПоРегламентномуЗаданию() Экспорт
	
	ЗагрузитьПоРегламенту("Saby_ЗаказНаПеревозку");
	ЗагрузитьПоРегламенту("Saby_ПутевойЛист");
	ЗагрузитьПоРегламенту("Saby_ТранспортнаяНакладная");
	
КонецПроцедуры

// Выполняет загрузку документов ЭПЛ в регламентном задании.
//
// Параметры:
//  ТипДокумента - Строка - тип документа для загрузки
//  Начало - Дата - дата начала загрузки данных
//  Окончание - Дата - дата окончания загрузки данных
//
Процедура ЗагрузитьПоРегламенту(ТипДокумента, Начало = Неопределено, Окончание = Неопределено) Экспорт
		
	context_params = МодульКода("Saby_Core").ПроверитьНаличиеПараметровПодключения();
        
    СтруктураПараметров = Новый Структура;
                
    СтруктураПараметров.Вставить("МассивДокументов", Неопределено);
    СтруктураПараметров.Вставить("context_params",   context_params);
    СтруктураПараметров.Вставить("Источник",         Неопределено);
    СтруктураПараметров.Вставить("ДопПараметры",     Новый Структура);
	
	Если Начало <> Неопределено И Окончание <> Неопределено Тогда
		СтруктураПараметров.ДопПараметры.Вставить("Начало",    Начало);
		СтруктураПараметров.ДопПараметры.Вставить("Окончание", Окончание);
	Иначе
		ДатаОбновления = МодульКода("Saby_ТНОбщегоНазначенияСервер").ПоследнееУспешноЗагруженноеИзменение(ТипДокумента);
		ТекДата = ТекущаяДатаСеанса();
		
		Если ДатаОбновления = Неопределено Тогда
			ДатаОбновления = НачалоДня(ТекДата);
		КонецЕсли;
		
		Если ТекДата < ДатаОбновления Тогда
			ДатаОбновления = ТекДата;
		КонецЕсли;
		
		СтруктураПараметров.ДопПараметры.Вставить("Начало",    ДатаОбновления);
		СтруктураПараметров.ДопПараметры.Вставить("Окончание", КонецДня(ТекДата));
	КонецЕсли;
	
	СтруктураПараметров.ДопПараметры.Вставить("ИмяМетаданных", ТипДокумента);
	
    ЗагрузкаДокументовПоИзменениям(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

// Загружает данные с онлайна в документ
//
// Параметры:
//  ПараметрыЗагрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыЗагрузки()
//  Результат - Структура - см. Saby_ТНОбщегоНазначенияСервер.РезультатВзаимодействияСоСБИС()
//
Процедура ЗагрузкаДанныхДокумента(ПараметрыЗагрузки, Результат = Неопределено) Экспорт
	
	Подстановки = ПараметрыЗагрузки.ДанныеДокумента["Подстановки"];
	Если Не ЗначениеЗаполнено(Подстановки) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДок = ОбъектЗагружаемогоДокумента(ПараметрыЗагрузки);
	
	УстановитьДокументОснование(ОбъектДок, ПараметрыЗагрузки);
	
	ОбъектДок.Направление = НаправлениеДокумента(ПараметрыЗагрузки.ДанныеДокумента["Направление"], ОбъектДок.Направление);
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	КодСостояния = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ПараметрыЗагрузки.ДанныеДокумента, "Состояние.Код");
	КодСостояния = МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(КодСостояния);
	Состояние    = МодульКода("Справочники.Saby_СостоянияОбъектов").ПолучитьСтатусДокументаСБИС(КодСостояния);
	КодСостоянияЗавершеноСПроблемами = 9;
	Если КодСостояния = КодСостоянияЗавершеноСПроблемами Тогда
		ОбъектДок.КомментарийУведомление = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
			ПараметрыЗагрузки.ДанныеДокумента, "Состояние.Примечание");
	КонецЕсли;
	
	МассивТитулов = МодульКода("Документы." + ПараметрыЗагрузки.ИмяМетаданных).ТитулыДляЗагрузки(ОбъектДок, ПараметрыЗагрузки);
	
	ДопПараметрыЗагрузкиВложения = ДопПараметрыЗагрузкиВложения(ПараметрыЗагрузки, Результат);
	
	ЗагруженныйТитул = Неопределено;
	ВложенияЗагруженыБезОшибок = Истина;
	Для Каждого Титул Из МассивТитулов Цикл
		
		ЭтоПервыйТитул = МодульТНОбщегоНазначенияСервер.РезультатФункцииТитулов(
			ПараметрыЗагрузки.ИмяМетаданных, "ЭтоПервыйТитул", Титул);
		ДопПараметрыЗагрузкиВложения.Вставить("ЭтоПервыйТитул", ЭтоПервыйТитул);
		
		ПредставленияТитула = МодульТНОбщегоНазначенияСервер.РезультатФункцииТитулов(
			ПараметрыЗагрузки.ИмяМетаданных, "ПредставленияТитула", Титул);
		
		ВложенияЗагружены = МодульКода("Документы." + ПараметрыЗагрузки.ИмяМетаданных).ВложенияЗагружены(
			Подстановки[ПредставленияТитула.ИмяПодстановки],
			Титул,
			ОбъектДок,
			ДопПараметрыЗагрузкиВложения);
			
		Если ВложенияЗагружены Тогда
			ЗагруженныйТитул = ПредставленияТитула.Представление;
		КонецЕсли;
			
	КонецЦикла;
	
	Если ВложенияЗагруженыБезОшибок Тогда
		
		ОбъектДок.ДатаИзменения = ДатаСобытияПоДокументу(ПараметрыЗагрузки, ОбъектДок.ДатаИзменения);
		ЗагрузитьДополнительныеДействия(ОбъектДок, ПараметрыЗагрузки.ДанныеДокумента["ДопДействия"]);
		ЗагрузитьТекущиеЭтапыДокумента(ОбъектДок, ПараметрыЗагрузки);
		
		ТекущийЭтапДокумента = ТекущийЭтапДокумента(ОбъектДок, ПараметрыЗагрузки);
		
		ПараметрыЗагрузки.Ссылка = СохранитьДокумент(
			ОбъектДок, ПараметрыЗагрузки.ИдСбис, ТекущийЭтапДокумента, Состояние, ПараметрыЗагрузки.ИзДокумента);
			
	ИначеЕсли ЗначениеЗаполнено(ЗагруженныйТитул) Тогда
		ПараметрыЗагрузки.Ссылка = СохранитьДокумент(
			ОбъектДок, ПараметрыЗагрузки.ИдСбис, ЗагруженныйТитул, Состояние, ПараметрыЗагрузки.ИзДокумента);
	Иначе
		ПараметрыЗагрузки.Ссылка = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекущиеЗначенияДокумента(ОбъектДок, ПараметрыЗагрузки) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Титул",     Неопределено);
	РезультатФункции.Вставить("Состояние", Неопределено);
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	Если Не ПараметрыЗагрузки.ИзДокумента Тогда
		
		СостояниеВБазе = МодульТНОбщегоНазначенияСервер.ТекущийТитулИИДДокумента(ОбъектДок);
		
		Если ЗначениеЗаполнено(СостояниеВБазе.ИД) Тогда
			РезультатФункции.Титул     = СостояниеВБазе.АктивныйЭтап;
			РезультатФункции.Состояние = СостояниеВБазе.Состояние;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗагрузки.ТекущийТитул <> Неопределено Тогда
		РезультатФункции.Титул = МодульТНОбщегоНазначенияСервер.РезультатФункцииТитулов(
			ПараметрыЗагрузки.ИмяМетаданных, "ЗначениеПоПредставлению", ПараметрыЗагрузки.ТекущийТитул);
		Если Не ЗначениеЗаполнено(РезультатФункции.Титул) Тогда
			РезультатФункции.Титул = ПараметрыЗагрузки.ТекущийТитул;
		КонецЕсли;
	Иначе
		РезультатФункции.Титул = МодульТНОбщегоНазначенияСервер.РезультатФункцииТитулов(
			ПараметрыЗагрузки.ИмяМетаданных, "ЗначениеПоПредставлению", РезультатФункции.Титул);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#Область ЗагрузкаТСИнтерфейс

Процедура ДанныеТСПрицеповСпецРазрешений(ОбъектДок, ДляДокумента, СтруктураТССОнлайна) Экспорт
	
	ЭтоВО = ТипЗнч(ОбъектДок) = Тип("Структура");
	
	ИмяТаблицыТранспортныеСредства = "ТранспортныеСредства";

	ДляДокумента.Вставить(ИмяТаблицыТранспортныеСредства, Новый Массив);
	ДляДокумента.Вставить("СпецРазрешения",       Новый Массив);
	
	Если Не ЗначениеЗаполнено(СтруктураТССОнлайна) Тогда
		Возврат;
	КонецЕсли;
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	СтруктураТС = МодульТНОбщегоНазначенияКлиентСервер.СтруктураТранспортногоСредства();
	СтруктураТС.Вид        = ЗначениеМетаданных("Saby_ВидыТС.Автомобиль");
	СтруктураТС.КлючСтроки = МодульТНОбщегоНазначенияКлиентСервер.НовыйКлючОсновнойСтроки(
		ДляДокумента, ИмяТаблицыТранспортныеСредства);
		
	ЗаполнитьСтруктуруТранспортногоСредства(СтруктураТС, СтруктураТССОнлайна, ДляДокумента, ЭтоВО);
	Если ЗначениеЗаполнено(СтруктураТС.РегистрационныйНомер) Тогда
		ДляДокумента.ТранспортныеСредства.Добавить(СтруктураТС);
	КонецЕсли;
	
	Прицепы = СтруктураТССОнлайна["Прицеп"];
	Если ЗначениеЗаполнено(Прицепы) Тогда
		
		Для Каждого Прицеп Из Прицепы Цикл
			
			СтруктураТС = МодульТНОбщегоНазначенияКлиентСервер.СтруктураТранспортногоСредства();
			СтруктураТС.Вид        = ЗначениеМетаданных("Saby_ВидыТС.Прицеп");
			СтруктураТС.КлючСтроки = МодульТНОбщегоНазначенияКлиентСервер.НовыйКлючОсновнойСтроки(
				ДляДокумента, ИмяТаблицыТранспортныеСредства);
				
			ЗаполнитьСтруктуруТранспортногоСредства(СтруктураТС, Прицеп, ДляДокумента, ЭтоВО);
			Если ЗначениеЗаполнено(СтруктураТС.РегистрационныйНомер) Тогда
				ДляДокумента.ТранспортныеСредства.Добавить(СтруктураТС);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДляДокумента.Вставить("СпецРазрешения", ДанныеСпецРазрешений(СтруктураТССОнлайна["СпецУсловия"]));
	
	ПередачаЦенностей = ЗначениеМетаданных("Saby_ТипыДокумента.ПередачиЦенностей");
	
	Документ = СтруктураТССОнлайна["Документ"];
	Если ЗначениеЗаполнено(Документ) Тогда
		ОснованиеПередачиГруза = Документ["ПередачаГруза"];
		Если ЗначениеЗаполнено(ОснованиеПередачиГруза) Тогда
			
			ОснованиеПередачиГрузаТС = СсылкаНаДокументЭПД(
				ДляДокумента,
				ОснованиеПередачиГруза,
				ПередачаЦенностей);
				
			ДляДокумента.Вставить("ОснованиеПередачиГрузаТС", ОснованиеПередачиГрузаТС);
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаполняемыеТипы = Новый Массив;
	ЗаполняемыеТипы.Добавить(ЗначениеМетаданных("Saby_ТипыДокумента.ПодтверждениеВладения"));
	ЗаполняемыеТипы.Добавить(ПередачаЦенностей);
	МодульКода("Saby_ТНЗагрузкаСервер").ЗаполнитьДокументыЭПД(ОбъектДок, ДляДокумента, ЗаполняемыеТипы);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, СтруктураТС) Экспорт
	
	Если СтруктураТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчищенныеВидыТС = Новый Соответствие;
	
	Если СтруктураТС.Свойство("ТранспортныеСредства") Тогда
		Для Каждого ТранспортноеСредство Из СтруктураТС.ТранспортныеСредства Цикл
			ОчиститьТранспортныеСредства(ОбъектДок, ТранспортноеСредство.Вид, ОчищенныеВидыТС);
			ДобавитьИЗаполнитьСтроку(ОбъектДок.ТранспортныеСредства, ТранспортноеСредство);
		КонецЦикла;
	КонецЕсли;

	Если СтруктураТС.Свойство("СпецРазрешения") Тогда 
		Если ЗначениеЗаполнено(СтруктураТС.СпецРазрешения) Тогда
			ОбъектДок.СпецРазрешения.Очистить();
		КонецЕсли;
		Для Каждого СтруктураСпецРазрешения Из СтруктураТС.СпецРазрешения Цикл
			ДобавитьИЗаполнитьСтроку(ОбъектДок.СпецРазрешения, СтруктураСпецРазрешения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаТСИнтерфейс

#Область ЗагрузкаВодителейИнтерфейс

Процедура ДанныеВодителей(ОбъектДок, ДляДокумента, ВодителиСОнлайна, ДопПараметры) Экспорт
	
	ИмяТаблицыВодителей = "ОтветственныеЛица";
	Если Не ДляДокумента.Свойство(ИмяТаблицыВодителей) Тогда
		Водители = Новый Массив;
		ДляДокумента.Вставить(ИмяТаблицыВодителей, Водители);
	Иначе
		Водители = ДляДокумента[ИмяТаблицыВодителей];
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВодителиСОнлайна) Тогда
		Возврат;
	КонецЕсли;
	
	УбратьПустыеСтрокиВодителей(ВодителиСОнлайна, ДопПараметры);
	УдалитьСтарыеПутевыеЛисты(ДляДокумента.ДокументыЭПД, "ПутевойЛист", ДляДокумента);
	
	ПутевойЛист = ЗначениеМетаданных("Saby_ТипыДокумента.ПутевойЛист");
	
	Для Каждого Водитель Из ВодителиСОнлайна["Водитель"] Цикл 
				
		СтруктураВодителя = СтруктураВодителя(Водитель);
		
		Если Не СтруктураВодителя.Заполнена Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураВодителя.КлючСтроки = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").НовыйКлючОсновнойСтроки(
			ДляДокумента, ИмяТаблицыВодителей);
			
		НачальныйИндекс = ДляДокумента.ДокументыЭПД.Количество();
			
		ЗагрузитьДокументыЭПД(
			ДляДокумента,
			Водитель["ПутевойЛист"],
			ПутевойЛист);
			
		ЗаполнитьСсылкиНаДокументЭПД(ДляДокумента);
			
		ПутевыеЛисты = Новый Массив;		
		Для ИндексДокументаЭПД = НачальныйИндекс По ДляДокумента.ДокументыЭПД.ВГраница() Цикл
			
			СтруктураДокументаЭПД = ДляДокумента.ДокументыЭПД[ИндексДокументаЭПД];
			СтруктураДокументаЭПД.КлючСтроки_ОтветственныеЛица = СтруктураВодителя.КлючСтроки;
			
			СтруктураПутевогоЛиста = Новый Структура;
			СтруктураПутевогоЛиста.Вставить("Документ", СтруктураДокументаЭПД.Ссылка);
			
			ПутевыеЛисты.Добавить(СтруктураПутевогоЛиста);
			
		КонецЦикла;
		
		СтруктураВодителя.Вставить("ПутевыеЛисты", ПутевыеЛисты);
		
		Водители.Добавить(СтруктураВодителя);
		
	КонецЦикла;
	
	// Заполнение документов ЭПД
	ЗаполняемыеТипы = Новый Массив;
	ЗаполняемыеТипы.Добавить(ПутевойЛист);
	МодульКода("Saby_ТНЗагрузкаСервер").ЗаполнитьДокументыЭПД(ОбъектДок, ДляДокумента, ЗаполняемыеТипы);
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаВодителейИнтерфейс

Функция ШаблонСтруктурыДанныхДляРегистра(СсылкаНаДокумент, ТипТитула, Основной) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("СсылкаНаДокумент",    СсылкаНаДокумент);
	РезультатФункции.Вставить("ТипТитула",           ТипТитула);
	РезультатФункции.Вставить("Основной",            Основной);
	РезультатФункции.Вставить("ИдентификаторТитула", "");
	РезультатФункции.Вставить("Период",              Дата(1, 1, 1));
	РезультатФункции.Вставить("Просмотрено",         Ложь);
	РезультатФункции.Вставить("ТипТитулаОтказа",     Неопределено);
	РезультатФункции.Вставить("СохранитьДанные",     Ложь);
	РезультатФункции.Вставить("Данные",              Неопределено);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеДляРегистраТитулов(Вложение, ИмяМетаданных, СтруктураДанныхДляРегистра) Экспорт
		
	Если Вложение["ЗагруженВРегистр"] Тогда
		ДляРегистра = Неопределено;
	Иначе
		ДляРегистра = СтруктураДанныхДляРегистра;
		ДляРегистра.ИдентификаторТитула = ИдентификаторВложения(Вложение, СтруктураДанныхДляРегистра.ТипТитула);
		ДляРегистра.Период              = ДатаВложения(Вложение, СтруктураДанныхДляРегистра.ТипТитула);
		
		Если ДляРегистра.ТипТитулаОтказа = Неопределено Тогда
			ТипТитулаОтказа = МодульКода("Saby_ТНОбщегоНазначенияСервер").РезультатФункцииТитулов(ИмяМетаданных, "ПустаяСсылка");
			ДляРегистра.Вставить("ТипТитулаОтказа", ТипТитулаОтказа);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДляРегистра;
	
КонецФункции

Функция СтруктураТитула(Титул, ДляДокумента, ДляРегистра) Экспорт
	
	СтруктураТитула = Новый Структура;
	СтруктураТитула.Вставить("Титул",        Титул);
	СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
	СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
	
	Возврат СтруктураТитула;
	
КонецФункции

#Область ДокументыЭПДИнтерфейс

Процедура ЗагрузитьДокументыЭПД(ДляДокумента, ДанныеДокументовЭПД, ТипДокумента) Экспорт
	
	Если ТипЗнч(ДанныеДокументовЭПД) <> Тип("Массив") Тогда
		ДокументыЭПД = Новый Массив;
		ДокументыЭПД.Добавить(ДанныеДокументовЭПД);
	Иначе
		ДокументыЭПД = ДанныеДокументовЭПД;
	КонецЕсли;
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	Для Каждого ДокументЭПД Из ДокументыЭПД Цикл
		
		Если Не ЗначениеЗаполнено(ДокументЭПД) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДокументаЭПД = МодульТНОбщегоНазначенияКлиентСервер.СтруктураДокументаЭПД();
		СтруктураДокументаЭПД.Тип = ТипДокумента;
		СтруктураДокументаЭПД.КлючСтроки = МодульТНОбщегоНазначенияКлиентСервер.НовыйКлючОсновнойСтроки(
			ДляДокумента, "ДокументыЭПД");
		
		ЗаполнитьСтруктуруДокументаЭПД(ДляДокумента, СтруктураДокументаЭПД, ДокументЭПД);
		
		Если СтруктураДокументаЭПД.Заполнена Тогда
			ДляДокумента.ДокументыЭПД.Добавить(СтруктураДокументаЭПД);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаДокументЭПД(ДляДокумента) Экспорт
	
	Если ДляДокумента.ДокументыЭПД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеМетаданных("Saby_ДокументыЭПД.ПустаяСсылка", "Справочник")) = Тип("Строка") Тогда
		Для Каждого СтруктураДокументаЭПД Из ДляДокумента.ДокументыЭПД Цикл
			СтруктураДокументаЭПД.Ссылка = СтруктураДокументаЭПД.Наименование;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПолучитьТаблицуДокументовЭПД(ДляДокумента.ДокументыЭПД, МенеджерВременныхТаблиц);
	
	ВыборкаСсылок = ВыборкаСсылокНаДокументыЭПД(МенеджерВременныхТаблиц);
	Пока ВыборкаСсылок.Следующий() Цикл
		СтруктураДокументаЭПД = ДляДокумента.ДокументыЭПД[ВыборкаСсылок.ИндексДокументаЭПД];
		Если ВыборкаСсылок.ДокументНайденВБазе Тогда
			СтруктураДокументаЭПД.Ссылка = ВыборкаСсылок.СсылкаНаДокументЭПД;
		Иначе
			СтруктураДокументаЭПД.Ссылка = СсылкаНаНовыйДокументЭПД(СтруктураДокументаЭПД, ДляДокумента.ДанныеЮрЛиц);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СсылкаНаДокументЭПД(ДляДокумента, ДанныеДокументаЭПД, ТипДокумента) Экспорт
	
	ЗагрузитьДокументыЭПД(ДляДокумента, ДанныеДокументаЭПД, ТипДокумента);
	
	ЗаполнитьСсылкиНаДокументЭПД(ДляДокумента);
	
	Если ДляДокумента.ДокументыЭПД.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ДляДокумента.ДокументыЭПД[ДляДокумента.ДокументыЭПД.ВГраница()].Ссылка;
	
КонецФункции

Процедура ЗаполнитьДокументыЭПД(ОбъектДок, ДляДокумента, ЗаполняемыеТипы, ЭтоСопроводительныйДокумент = Ложь) Экспорт
	
	Если ДляДокумента.ДокументыЭПД.Количество() = 0
		Или Не МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ЕстьРеквизитИлиСвойство(ОбъектДок, "ДокументыЭПД") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТипДокумента Из ЗаполняемыеТипы Цикл	
		
		Для Каждого СтруктураДокументаЭПД Из ДляДокумента.ДокументыЭПД Цикл
			
			Если СтруктураДокументаЭПД.Тип <> ТипДокумента
				Или СтруктураДокументаЭПД.ЭтоСопроводительныйДокумент <> ЭтоСопроводительныйДокумент Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьИЗаполнитьСтроку(ОбъектДок.ДокументыЭПД, СтруктураДокументаЭПД);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ДокументыЭПДИнтерфейс

#Область ЗагрузкаДанныхЮрЛицИнтерфейс

Функция НормализованныеДанныеЮрЛица(ПодстановкиЮрЛица) Экспорт
	
	Если ПодстановкиЮрЛица["СвЮЛ"] <> Неопределено Тогда
		ДанныеОрганизации = ПодстановкиЮрЛица["СвЮЛ"];
	ИначеЕсли ПодстановкиЮрЛица["СвФЛ"] <> Неопределено Тогда
		ДанныеОрганизации = ПодстановкиЮрЛица["СвФЛ"];
	Иначе
		ДанныеОрганизации = ПодстановкиЮрЛица;
	КонецЕсли;
	
	Адрес = Новый Соответствие;
	Если ДанныеОрганизации["АдресЮридический"] <> Неопределено Тогда
		Юридический = Новый Соответствие;
		Юридический.Вставить("Текст", ДанныеОрганизации["АдресЮридический"]);
		Адрес.Вставить("Юридический", Юридический);
		Адрес.Вставить("КодСтраны",  ДанныеОрганизации["КодСтраны"]);
	КонецЕсли;
	
	РеквизитыЮрЛица = Новый Соответствие;
	РеквизитыЮрЛица.Вставить("ИНН",      ДанныеОрганизации["ИНН"]);
	РеквизитыЮрЛица.Вставить("КПП",      ДанныеОрганизации["КПП"]);
	РеквизитыЮрЛица.Вставить("Название", ДанныеОрганизации["Название"]);
	РеквизитыЮрЛица.Вставить("ОГРН",     ДанныеОрганизации["ОГРН"]);
	
	Реквизиты = Новый Соответствие;
	Реквизиты.Вставить("ЮЛ", РеквизитыЮрЛица);
	
	РезультатФункции = Новый Соответствие;
	РезультатФункции.Вставить("Реквизиты", Реквизиты);
	РезультатФункции.Вставить("Адрес",     Адрес);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗагрузитьДанныеЮрЛиц(ДляДокумента, ПодстановкиЮрЛиц, Роль, СтруктураДанныхЮрЛица = Неопределено) Экспорт
	
	Если ТипЗнч(ПодстановкиЮрЛиц) = Тип("Массив") И СтруктураДанныхЮрЛица <> Неопределено Тогда
		ВызватьИсключение "Некорректное использование процедуры ЗагрузитьДанныеЮрЛица.
		|СтруктураДанныхЮрЛица доступна только для одиночной загрузки";
	КонецЕсли;
	
	МассивПодстановокЮрЛиц = МассивПодстановокЮрЛиц(ПодстановкиЮрЛиц);
	
	Если ТипЗнч(Роль) = Тип("Строка") Тогда
		РольСсылка = ЗначениеМетаданных("Saby_РолиКонтрагентов." + Роль);
	Иначе 
		РольСсылка = Роль;
	КонецЕсли;
	
	Для Каждого ПодстановкиЮрЛица Из МассивПодстановокЮрЛиц Цикл
		
		СтруктураДанныхЮрЛица = СтруктураДанныхЮрЛица(ДляДокумента, РольСсылка, ПодстановкиЮрЛица, СтруктураДанныхЮрЛица);
		Если СтруктураДанныхЮрЛица.Роль = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхЮрЛица.КлючСтроки = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").НовыйКлючОсновнойСтроки(
			ДляДокумента, "ДанныеЮрЛиц");
		
		Для Каждого СтруктураКонтактныхДанных Из СтруктураДанныхЮрЛица.КонтактныеДанные Цикл
			СтруктураКонтактныхДанных.КлючСтроки_ДанныеЮрЛиц = СтруктураДанныхЮрЛица.КлючСтроки;
			ДляДокумента.КонтактныеДанные.Добавить(СтруктураКонтактныхДанных);
		КонецЦикла;
		
		СтруктураДанныхЮрЛица.Удалить("КонтактныеДанные");
		
		ДляДокумента.ДанныеЮрЛиц.Добавить(СтруктураДанныхЮрЛица);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКонтактныеДанныеЮрЛица(СтруктураДанныхЮрЛица, КонтактыЮрЛицаОнлайн) Экспорт
	
	Если Не ЗначениеЗаполнено(КонтактыЮрЛицаОнлайн) Тогда
		Возврат;
	КонецЕсли;
	
	МассивТелефонов = КонтактыЮрЛицаОнлайн["Телефон"];
	Если ЗначениеЗаполнено(МассивТелефонов) Тогда
		Для Каждого Телефон Из МассивТелефонов Цикл
			
			ЗначениеТелефона = Телефон["Значение"];
			
			Если Не ЗначениеЗаполнено(ЗначениеТелефона) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураКонтактныхДанных = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").СтруктураКонтактныхДанных();
			СтруктураКонтактныхДанных.Роль     = СтруктураДанныхЮрЛица.Роль;
			СтруктураКонтактныхДанных.Тип      = ЗначениеМетаданных("ТипыКонтактнойИнформации.Телефон");
			СтруктураКонтактныхДанных.Значение = ЗначениеТелефона;
			СтруктураДанныхЮрЛица.КонтактныеДанные.Добавить(СтруктураКонтактныхДанных);
			
		КонецЦикла;	
	КонецЕсли;
	
	МассивЭлектроннойПочты = КонтактыЮрЛицаОнлайн["ЭлектроннаяПочта"];
	Если ЗначениеЗаполнено(МассивЭлектроннойПочты) Тогда
		Для Каждого ЭлПочта Из МассивЭлектроннойПочты Цикл
			
			ЗначениеЭлектроннойПочты = ЭлПочта["Значение"];
			
			Если Не ЗначениеЗаполнено(ЗначениеЭлектроннойПочты) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураКонтактныхДанных = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").СтруктураКонтактныхДанных();
			СтруктураКонтактныхДанных.Роль     = СтруктураДанныхЮрЛица.Роль;
			СтруктураКонтактныхДанных.Тип      = ЗначениеМетаданных("ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
			СтруктураКонтактныхДанных.Значение = ЗначениеЭлектроннойПочты;
			СтруктураДанныхЮрЛица.КонтактныеДанные.Добавить(СтруктураКонтактныхДанных);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПреобразоватьСтруктуруАдреса(ДанныеАдреса) Экспорт
	
	СтруктураАдреса = Неопределено;
	
	Если Не ЗначениеЗаполнено(ДанныеАдреса) Тогда
		Возврат СтруктураАдреса;
	КонецЕсли;
	
	Текст = ДанныеАдреса["Текст"];
	// иногда адрес приходит тут
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Текст = ДанныеАдреса["АдресТекст"];
	КонецЕсли;
		
	Адрес = ДанныеАдреса["Структура"];
		
	Если ЗначениеЗаполнено(Текст) 
		Или ЗначениеЗаполнено(Адрес) Тогда
		
		Если ТипЗнч(Адрес) <> Тип("Строка") Тогда 
			СтруктураJS = ""; // перешли на типовой xml
		Иначе 
			СтруктураJS = Адрес;
		КонецЕсли;
	
		// есть представление
		Если ЗначениеЗаполнено(Текст) Тогда
			Представление = Текст;
		Иначе 
			Если ТипЗнч(Адрес) = Тип("Строка") Тогда
				Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(Адрес);
			Иначе
				// есть только структура данных. сформируем представление по структуре
				Представление = ПредставлениеАдресаИзСоответствия(Адрес); 
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("АдресСтрокой",    Представление);
		СтруктураАдреса.Вставить("АдресСтруктурой", СтруктураJS);
		
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

Процедура ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(ОбъектДок, СтруктураДанных, Роль, ДопПараметры = Неопределено) Экспорт
	
	НеобходимоУдалитьСвязаннуюСЮрЛицомИнформацию = НеобходимоУдалитьСвязаннуюСЮрЛицомИнформацию(
		СтруктураДанных.ДанныеЮрЛиц, Роль, ДопПараметры);
		
	ОчиститьПриЗаполненииНаОсновании = Не ДопПараметры.ЗагрузкаСОнлайна
		И НеобходимоУдалитьСвязаннуюСЮрЛицомИнформацию
		И СтруктураДанных.ДанныеЮрЛиц.Количество() = 0;
		
	Если ОчиститьПриЗаполненииНаОсновании Тогда
		УдалитьСвязаннуюСЮрЛицомИнформацию(СтруктураДанных.ДанныеЮрЛиц, ОбъектДок.ДанныеЮрЛиц, Роль);
		УдалитьСвязаннуюСЮрЛицомИнформацию(СтруктураДанных.КонтактныеДанные, ОбъектДок.КонтактныеДанные, Роль);
	КонецЕсли;
		
	Для Каждого СтруктураДанныхЮрЛица Из СтруктураДанных.ДанныеЮрЛиц Цикл
		Если СтруктураДанныхЮрЛица.Роль <> Роль Тогда
			Продолжить;
		КонецЕсли;
		Если НеобходимоУдалитьСвязаннуюСЮрЛицомИнформацию Тогда
			УдалитьСвязаннуюСЮрЛицомИнформацию(СтруктураДанных.ДанныеЮрЛиц, ОбъектДок.ДанныеЮрЛиц, Роль);
			НеобходимоУдалитьСвязаннуюСЮрЛицомИнформацию = Ложь;
		КонецЕсли;
		ДобавитьИЗаполнитьСтроку(ОбъектДок.ДанныеЮрЛиц, СтруктураДанныхЮрЛица);
	КонецЦикла;
	
	Если Не МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ЕстьРеквизитИлиСвойство(ОбъектДок, "КонтактныеДанные") Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимоУдалитьСвязаннуюСЮрЛицомИнформацию = НеобходимоУдалитьСвязаннуюСЮрЛицомИнформацию(
		СтруктураДанных.ДанныеЮрЛиц, Роль, ДопПараметры);
	Для Каждого СтруктураКонтактныхДанных Из СтруктураДанных.КонтактныеДанные Цикл
		Если СтруктураКонтактныхДанных.Роль <> Роль Тогда
			Продолжить;
		КонецЕсли;
		Если НеобходимоУдалитьСвязаннуюСЮрЛицомИнформацию Тогда
			УдалитьСвязаннуюСЮрЛицомИнформацию(СтруктураДанных.КонтактныеДанные, ОбъектДок.КонтактныеДанные, Роль);
			НеобходимоУдалитьСвязаннуюСЮрЛицомИнформацию = Ложь;
		КонецЕсли;
		ДобавитьИЗаполнитьСтроку(ОбъектДок.КонтактныеДанные, СтруктураКонтактныхДанных);
	КонецЦикла;
	
КонецПроцедуры

Функция ИННКППОрганизации(ДанныеОрганизацииСОнлайна) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ЕстьДанные", Ложь);
	РезультатФункции.Вставить("ИНН",        "");
	РезультатФункции.Вставить("КПП",        "");
	
	Если Не ЗначениеЗаполнено(ДанныеОрганизацииСОнлайна) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Если ДанныеОрганизацииСОнлайна["СвЮЛ"] <> Неопределено Тогда
		ДанныеОрганизации = ДанныеОрганизацииСОнлайна["СвЮЛ"];
	ИначеЕсли ДанныеОрганизацииСОнлайна["СвФЛ"] <> Неопределено Тогда
		ДанныеОрганизации = ДанныеОрганизацииСОнлайна["СвФЛ"];
	Иначе
		Возврат РезультатФункции;
	КонецЕсли;
	
	РезультатФункции.ИНН = ДанныеОрганизации["ИНН"];
	РезультатФункции.КПП = ДанныеОрганизации["КПП"];
	
	РезультатФункции.ЕстьДанные = Истина;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СтруктураФИО(Реквизиты) Экспорт
	
	// парсим ФИО, раздельного может не быть
	Если Реквизиты["ФИО"] <> Неопределено Тогда
		ДанныеФИО = МодульКода("Saby_ТНОбщегоНазначенияСервер").ФИОИзСтроки(Реквизиты["ФИО"]);
	Иначе
		ДанныеФИО = Реквизиты;
	КонецЕсли;	
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Фамилия",  ДанныеФИО["Фамилия"]);
	РезультатФункции.Вставить("Имя",      ДанныеФИО["Имя"]);
	РезультатФункции.Вставить("Отчество", ДанныеФИО["Отчество"]);
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ЗагрузкаДанныхЮрЛицИнтерфейс

// Получает дату из подстановок указанного титула, полученного с онлайна.
//
// Параметры:
//  ДанныеТитула - Соответствие - значение подстановок с онлайна.
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЗнП - титул, для которого получаем дату.
//  СтруктураВложения - Структура - структура данных вложения.
//
// Возвращаемое значение:
//   Дата - значение даты
//
Функция ДатаВложения(ДанныеТитула, Титул, СтруктураВложения = Неопределено) Экспорт
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	Если ДанныеТитула["ДатаВложенияТитула"] <> Неопределено Тогда
		
		РезультатФункции = ДанныеТитула["ДатаВложенияТитула"];
		
	ИначеЕсли СтруктураВложения <> Неопределено Тогда
		
		РезультатФункции = МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(СтруктураВложения["ДатаВремя"]);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.Погрузка") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110339.Файл.Документ.ДатИнфГО", "")
			+ " "
			+ МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110339.Файл.Документ.ВрИнфГО", "");
		
		РезультатФункции = МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаСтрокой);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПолучениеГруза") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110340.Файл.Документ.ДатИнфПрвПрием", "")
			+ " "
			+ МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110340.Файл.Документ.ВрИнфПрвПрием", "");
		
		РезультатФункции = МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаСтрокой);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПриемкаГруза") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110341.Файл.Документ.ДатИнфГП", "")
			+ " "
			+ МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110341.Файл.Документ.ВрИнфГП", "");
		
		РезультатФункции = МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаСтрокой);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ВыдачаГруза") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110342.Файл.Документ.ДатИнфПрвВыд", "")
			+ " "
			+ МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110342.Файл.Документ.ВрИнфПрвВыд", "");
		
		РезультатФункции = МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаСтрокой);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.Переадресовка") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110343.Файл.Документ.ДатаИнфПА", "")
			+ " "
			+ МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110343.Файл.Документ.ВрИнфПА", "");
		
		РезультатФункции = МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаСтрокой);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПереадресовкаУведомление") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1167009.Файл.Документ.ДатаУвПА", "")
			+ " "
			+ МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1167009.Файл.Документ.ВрУвПА", "");
		
		РезультатФункции = МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаСтрокой);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ЗаменаВодителяТС") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110344.Файл.Документ.ДатИнфЗамен", "")
			+ " "
			+ МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110344.Файл.Документ.ВрИнфЗамен", "");
		
		РезультатФункции = МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаСтрокой);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.СогласованиеСтоимости") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110346.Файл.Документ.ДатПУДИнфГО", "")
			+ " "
			+ МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110346.Файл.Документ.ВрПУДИнфГО", "");
		
		РезультатФункции = МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаСтрокой);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ИзменениеСтоимости") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110345.Файл.Документ.ДатПУДИнфПрв", "")
			+ " "
			+ МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110345.Файл.Документ.ВрПУДИнфПрв", "");
		
		РезультатФункции = МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаСтрокой);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.УведомлениеОУточнении") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "Документ.Данные.ДатаПол", "")
			+ " "
			+ МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "Документ.Данные.ВремяПол", "");
		
		РезультатФункции = МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаСтрокой);
		
    Иначе
		
		РезультатФункции = Неопределено;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Получает идентификатор из подстановок указанного титула, полученного с онлайна.
//
// Параметры:
//  ДанныеТитула - Соответствие - значение подстановок с онлайна.
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЗнП - титул, для которого получаем дату.
//  СтруктураВложения - Структура - структура данных вложения.
//
// Возвращаемое значение:
//   Строка - идентификатор титула
//
Функция ИдентификаторВложения(ДанныеТитула, Титул, СтруктураВложения = Неопределено) Экспорт
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	ПредставленияТитула = МодульТНОбщегоНазначенияСервер.РезультатФункцииТитулов(
		"Saby_ТранспортнаяНакладная", "ПредставленияТитула", Титул);
	
	Если ДанныеТитула["ИдентификаторВложенияТитула"] <> Неопределено Тогда
		ИдФайл = ДанныеТитула["ИдентификаторВложенияТитула"];
	ИначеЕсли СтруктураВложения <> Неопределено Тогда
		ИдФайл = СтруктураВложения["Идентификатор"];
	ИначеЕсли ПредставленияТитула.КодТитула = "1115113" Тогда
		ИдФайл = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "Документ.Данные.ИдФайл", "");
	ИначеЕсли ПредставленияТитула.КодТитула <> "" Тогда
		ИдФайл = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
			ДанныеТитула[ПредставленияТитула.КодТитула], "Файл.ИдФайл", "");
	Иначе
		ИдФайл = "";
	КонецЕсли;
	
	РезультатФункции = Прав(ИдФайл, 36);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗагрузитьОтветственного(СтруктураДляЗаполнения, ОтветственныйСОнлайна) Экспорт
	
	Если ОтветственныйСОнлайна = Неопределено Тогда
		ОтветственныйСОнлайна = Новый Соответствие;
	КонецЕсли;
	
	СтруктураДляЗаполнения.Вставить("Фамилия",   ОтветственныйСОнлайна["Фамилия"]);
	СтруктураДляЗаполнения.Вставить("Имя",       ОтветственныйСОнлайна["Имя"]);
	СтруктураДляЗаполнения.Вставить("Отчество",  ОтветственныйСОнлайна["Отчество"]);
	СтруктураДляЗаполнения.Вставить("Должность", ОтветственныйСОнлайна["Должность"]);
	
	Телефоны = ОтветственныйСОнлайна["Телефон"];
	Если ЗначениеЗаполнено(Телефоны) Тогда
		
		МассивТелефонов = Новый Массив;
		Для Каждого Телефон Из Телефоны Цикл
			МассивТелефонов.Добавить(Телефон["Значение"]);
		КонецЦикла;
		
		Если МассивТелефонов.Количество() > 0 Тогда
			СтруктураДляЗаполнения.Вставить("Телефоны", ЗначениеВСтрокуВнутр(МассивТелефонов));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтветственныхЛиц(ОбъектДок, ДанныеОтветственныхЛиц, РольОтветственного) Экспорт
	
	МодульТНКлиентСервер = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	ЭтоВодитель      = РольОтветственного = ЗначениеМетаданных("Saby_РолиОтветственных.Водитель");
	ЕстьПутевыеЛисты = МодульТНКлиентСервер.ЕстьРеквизитИлиСвойство(ОбъектДок, "ПутевыеЛисты");
	
	ОтборОтветственных = Новый Структура;
	ОтборОтветственных.Вставить("Роль", РольОтветственного);
	СтрокиДляЗагрузки = МодульТНКлиентСервер.НайтиСтрокиУниверсально(
		ДанныеОтветственныхЛиц, ОтборОтветственных);
			
	Если ЗначениеЗаполнено(ДанныеОтветственныхЛиц)
		И СтрокиДляЗагрузки.Количество() > 0 Тогда
		
		// предварительная очистка
		ОчисткаОтветственныхЛицПоРоли(ОбъектДок, РольОтветственного, ЭтоВодитель, ЕстьПутевыеЛисты);
		
	КонецЕсли;
	
	КлючСтроки = МодульТНКлиентСервер.НовыйКлючОсновнойСтроки(ОбъектДок, "ОтветственныеЛица");
	
	Для Каждого СтруктураОтветственного Из ДанныеОтветственныхЛиц Цикл 
		
		Если СтруктураОтветственного.Роль <> РольОтветственного Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОтветственного = ДобавитьИЗаполнитьСтроку(ОбъектДок.ОтветственныеЛица, СтруктураОтветственного, "Роль,КлючСтроки");
		СтрокаОтветственного.Роль       = РольОтветственного;
		СтрокаОтветственного.КлючСтроки = КлючСтроки;
		
		Если ЭтоВодитель И ЕстьПутевыеЛисты Тогда
			Для Каждого СтруктураПутевогоЛиста Из СтруктураОтветственного.ПутевыеЛисты Цикл
				СтрокаПутевогоЛиста = ДобавитьИЗаполнитьСтроку(
					ОбъектДок.ПутевыеЛисты, СтруктураПутевогоЛиста, "КлючСтроки_ОтветственныеЛица");
				СтрокаПутевогоЛиста.КлючСтроки_ОтветственныеЛица = КлючСтроки;
			КонецЦикла;
		КонецЕсли;
		
		КлючСтроки = КлючСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ЗагрузкаГрузаИнтерфейс

Процедура ЗаполнитьДанныеПоГрузам(ОбъектДок, ДляДокумента, ДопПараметры = Неопределено) Экспорт
	
	Если Не ДляДокумента.Свойство("Грузы") Или ДляДокумента.Грузы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицыПоГрузам = Новый Массив;
	ТаблицыПоГрузам.Добавить("Грузы");
	ТаблицыПоГрузам.Добавить("Контейнеры");
	ТаблицыПоГрузам.Добавить("Маркировки");
	ТаблицыПоГрузам.Добавить("ОпасныеГрузы");
	ТаблицыПоГрузам.Добавить("СведенияГосСистем");
	ТаблицыПоГрузам.Добавить("Груз_АдресаПунктов");
	//ТаблицыПоГрузам.Добавить("ВидыУпаковки");
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	Для Каждого ИмяТаблицы Из ТаблицыПоГрузам Цикл
		
		Если Не МодульТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(ОбъектДок, ИмяТаблицы)
			Или Не МодульТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(ДляДокумента, ИмяТаблицы) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДляДокумента[ИмяТаблицы].Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОчиститьТаблицуГрузов(ОбъектДок, ИмяТаблицы, ДопПараметры);
		
		Для Каждого СтруктураСтрокиТаблицы Из ДляДокумента[ИмяТаблицы] Цикл
			ДобавитьИЗаполнитьСтроку(ОбъектДок[ИмяТаблицы], СтруктураСтрокиТаблицы);
			СохранитьНоменклатуруСтроки(ОбъектДок, СтруктураСтрокиТаблицы, ДопПараметры);
		КонецЦикла;
		
	КонецЦикла;
	
	Если ДопПараметры <> Неопределено Тогда
		ДобавитьНовыеОпасныеГрузы(ДляДокумента, ДопПараметры.Результат);
		//ДобавитьНовыеВидыУпаковки(ДляДокумента, ДопПараметры.Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеПоГрузам(ДляДокумента, ДанныеГруз, ЗагрузкаСОнлайна, ЭтоЭТрН) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеГруз) Тогда
		Возврат;
	КонецЕсли;
	
	ДляДокумента.Вставить("Грузы", Новый Массив);
	
	Если ЭтоЭТрН Тогда
		
		Валюта = ВалютаПоДаннымОнлайна(ДанныеГруз, ЗагрузкаСОнлайна, ДляДокумента.Валюта);
		
		ДляДокумента.Вставить("Валюта",            Валюта);
		ДляДокумента.Вставить("Контейнеры",        Новый Массив);
		ДляДокумента.Вставить("Маркировки",        Новый Массив);
		ДляДокумента.Вставить("ОпасныеГрузы",      Новый Массив);
		ДляДокумента.Вставить("СведенияГосСистем", Новый Массив);
		
	Иначе 
		
		ДляДокумента.Вставить("Груз_АдресаПунктов", Новый Массив);
		
	КонецЕсли;
	
	Позиции = ДанныеГруз["Позиция"];
	Если Не ЗначениеЗаполнено(Позиции) Тогда
		Возврат;
	КонецЕсли;
	
	КлючСтроки = 1;
	Для Каждого Груз Из Позиции Цикл 
		
		СтруктураГруза = Новый Структура;
		СтруктураГруза.Вставить("КлючСтроки",  КлючСтроки);
		СтруктураГруза.Вставить("НомерСтроки", КлючСтроки); 
		
		СтруктураГруза.Вставить("Номенклатура",   Груз["Номенклатура"]);
		
		СтруктураГруза.Вставить("СпособУпаковки", Груз["Упаковка"]);
		СтруктураГруза.Вставить("Примечание",     Груз["ДопИнформация"]);
		СтруктураГруза.Вставить("Состояние",      Груз["Состояние"]);
		СтруктураГруза.Вставить("Наименование",   Груз["Наименование"]);
		
		ЗагрузитьПараметрыГруза(СтруктураГруза, Груз["Параметры"]);
		
		СтруктураВидаУпаковки = СтруктураВидаУпаковки(Груз["ТараКод"]);
		Если СтруктураВидаУпаковки <> Неопределено Тогда			
			СтруктураГруза.Вставить("ВидТары", СтруктураВидаУпаковки.Код);						
		КонецЕсли;
		
		Если ЭтоЭТрН Тогда
			ЗагрузитьДанныеГруза_ТранспортнаяНакладная(Груз, СтруктураГруза, ДляДокумента, КлючСтроки, ЗагрузкаСОнлайна);
		Иначе
			// Заказ на перевозку
			ЗагрузитьДанныеГруза_ЗаказНаПеревозку(ДляДокумента, Груз, СтруктураГруза);
		КонецЕсли;
		
		ДляДокумента.Грузы.Добавить(СтруктураГруза);
		
		КлючСтроки = КлючСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаГрузаИнтерфейс

Функция ДобавитьИЗаполнитьСтроку(ТаблицаДляДобавления, ИсточникДанныхДляЗаполнения, ДополнительныеПоля = "") Экспорт
	
	Если ТипЗнч(ТаблицаДляДобавления) = Тип("Массив") Тогда
		СтрокаТаблицы = ИсточникДанныхДляЗаполнения;
		ТаблицаДляДобавления.Добавить(СтрокаТаблицы);
		
		Поля = СтрРазделить(ДополнительныеПоля, ",", Ложь);
		Для Каждого Поле Из Поля Цикл
			СтрокаТаблицы.Вставить(Поле);
		КонецЦикла;
		
	Иначе
		СтрокаТаблицы = ТаблицаДляДобавления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ИсточникДанныхДляЗаполнения);
	КонецЕсли;
	
	Возврат СтрокаТаблицы;
	
КонецФункции

Функция СтруктураКлючСтроки() Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДанныеЮрЛиц",  0);
	РезультатФункции.Вставить("ДокументыЭПД", 0);
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Процедура ЗагрузитьДокумент(ПараметрыЗагрузки, ОбщиеПараметрыЗагрузки, Результат)
	
	Ошибки = Неопределено;
	
	ПолучитьДанныеДокументаИзСБИС(ПараметрыЗагрузки, ОбщиеПараметрыЗагрузки, Результат);
	
	Попытка
		
		// Статистика. Прямая запись
		Если ПараметрыЗагрузки.ТолькоАктивныйЭтап Тогда
			
			МодульКода("Saby_ТНВыгрузкаСервер").ЗаписатьСтатистикуНапрямую(
				ПараметрыЗагрузки.Ссылка, ПараметрыЗагрузки.ТекущийТитул, ПараметрыЗагрузки.ИмяМетаданных);
				
		КонецЕсли;	
		
		ЗагрузкаДанныхДокумента(ПараметрыЗагрузки, Результат);
		
		Результат.Успешные.Добавить(ПараметрыЗагрузки.Ссылка);
		Результат.Итог.Количество = Результат.Итог.Количество + 1;
		
		Если ОбщиеПараметрыЗагрузки.ЗагружатьПечатнуюФорму Тогда
			
			ПараметрыЗагрузкиПечатнойФормы = ПараметрыЗагрузкиИзСбис(
				ПараметрыЗагрузки.Ссылка, ОбщиеПараметрыЗагрузки.context_params);
				
			ЗагрузитьПечатнуюФормуДокументаИзСбис(
				ПараметрыЗагрузкиПечатнойФормы, ПараметрыЗагрузки.ДанныеДокумента["СсылкаНаPDF"]); 
				
		КонецЕсли;
		
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		ТекстОшибки = МодульКода("Saby_ТНОбщегоНазначенияСервер").ПричинаОшибки(ИнфоОшибки.Описание);
		МодульКода("Saby_ТНОбщегоНазначенияСервер").ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
		
		Ошибки.Вставить("ИмяМетаданных", ПараметрыЗагрузки.ИмяМетаданных);
		
		КлючСоответствия = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").КлючСсылка(
			ПараметрыЗагрузки.Ссылка, ПараметрыЗагрузки.ИдСбис);
		
		Результат.Ошибки.Вставить(КлючСоответствия, Ошибки);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПолучитьДанныеДокументаИзСБИС(ПараметрыЗагрузки, ОбщиеПараметрыЗагрузки, Результат)
	
	Если ЗначениеЗаполнено(ПараметрыЗагрузки.ДанныеДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");

	Ошибки = Неопределено;
	
	Если ТипЗнч(ПараметрыЗагрузки.Ссылка) = Тип("Структура") Тогда
		ИДСбис = ПараметрыЗагрузки.Ссылка.Идентификатор;
	Иначе
		Данные = МодульТНОбщегоНазначенияСервер.ДанныеСостоянияОбъекта(ПараметрыЗагрузки.Ссылка);
		Если Данные <> Неопределено Тогда 
			ИДСбис = Данные.UID;
		Иначе 
			ИДСбис = "";
		КонецЕсли;
	КонецЕсли;
	
	// документа нет в сбис. данные не загрузить
	Если Не ЗначениеЗаполнено(ИДСбис) Тогда 
		ТекстОшибки = "У документа нет идентификатора Сбис, обновление данных не возможно!";
		МодульТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
		Ошибки.Вставить("ИмяМетаданных", ПараметрыЗагрузки.ИмяМетаданных);
		КлючСоответствия = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").КлючСсылка(ПараметрыЗагрузки.Ссылка);
		Результат.Ошибки.Вставить(КлючСоответствия, Ошибки); 
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Идентификатор", ИДСбис);
	Параметры.Вставить("ДопПоля",       "ДопДействия,ТекущиеЭтапы,Подстановки,Расширение");
	
	// Стороны - обогащают посдстановки данными по ответсвенным МО, ТО, выезд и заезд
	// ЗаменаВодителя - обогащает данные ид замены водителя - основания и документа замены
	Если ПараметрыЗагрузки.ИмяМетаданных = "Saby_ПутевойЛист" Тогда 
		Параметры.ДопПоля = Параметры.ДопПоля + ",Стороны,ЗаменаВодителя";
	КонецЕсли;
		
	Попытка
		РезультатСБИС = ОбщиеПараметрыЗагрузки.ОбъектОбработки.local_helper_read_document(
			ОбщиеПараметрыЗагрузки.context_params, Параметры);
			
		ПараметрыЗагрузки.ДанныеДокумента = РезультатСБИС;
		ПараметрыЗагрузки.ИДСбис          = ИДСбис;
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		ТекстОшибки = МодульТНОбщегоНазначенияСервер.ПричинаОшибки(ИнфоОшибки.Описание);
		МодульТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
		Ошибки.Вставить("ИмяМетаданных", ПараметрыЗагрузки.ИмяМетаданных);
		КлючСоответствия = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").КлючСсылка(ПараметрыЗагрузки.Ссылка);
		Результат.Ошибки.Вставить(КлючСоответствия, Ошибки); 
		Возврат;
		
	КонецПопытки;
	
	Вложения = Новый Соответствие;
	ДобавитьВложенияИзСобытий(Вложения, ПараметрыЗагрузки.ДанныеДокумента["Событие"], ПараметрыЗагрузки.ИмяМетаданных);
	ПараметрыЗагрузки.ДанныеДокумента.Вставить("Вложения", Вложения["Вложения"]);
	
	ДанныеПодстановок = ПараметрыЗагрузки.ДанныеДокумента["Подстановки"];
	Если ЗначениеЗаполнено(ДанныеПодстановок) Тогда
		ПараметрыЗагрузки.ДанныеДокумента.Вставить("Подстановки", Новый Соответствие);
		ПараметрыЗагрузки.ДанныеДокумента.Вставить("ИдТитулов",   Новый Соответствие);
		Для Каждого Подстановки Из ДанныеПодстановок Цикл
			ДобавитьПодстановкуТитула(
				ПараметрыЗагрузки.ДанныеДокумента,
				Подстановки.Ключ,
				Подстановки.Значение,
				ПараметрыЗагрузки.ИмяМетаданных);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектЗагружаемогоДокумента(ПараметрыЗагрузки)
	
	Если Не ЗначениеЗаполнено(ПараметрыЗагрузки.Ссылка) Тогда
		ПараметрыЗагрузки.Ссылка = МодульКода("Saby_ТНОбщегоНазначенияСервер").ДокументПоИдентификаторуСбис(ПараметрыЗагрузки.ИдСбис);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗагрузки.Ссылка) И ТипЗнч(ПараметрыЗагрузки.Ссылка) <> Тип("Структура") Тогда
		Возврат ПараметрыЗагрузки.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗагрузки.Ссылка) <> Тип("Структура") Тогда
		РезультатФункции = Документы[ПараметрыЗагрузки.ИмяМетаданных].СоздатьДокумент();
	Иначе
		РезультатФункции = ПараметрыЗагрузки.Ссылка;
	КонецЕсли;
	
	РезультатФункции.НомерСбис   = ПараметрыЗагрузки.ДанныеДокумента["Номер"];
	РезультатФункции.Комментарий = ПараметрыЗагрузки.ДанныеДокумента["Название"];
	
	ДатаВремяСоздания = МодульКода("Saby_ТНОбщегоНазначенияСервер").ПреобразоватьСтрокуВДатуЭПД(
		ПараметрыЗагрузки.ДанныеДокумента["ДатаВремяСоздания"]);
	РезультатФункции.Дата = ДатаВремяСоздания;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура УстановитьДокументОснование(ОбъектДок, ПараметрыЗагрузки)
	
	Если Не ПараметрыЗагрузки.ЭтоЗаполнениеСПомощьюINI
		Или Не ЗначениеЗаполнено(ПараметрыЗагрузки.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДок.ДокументОснование_ОбъектМетаданных = МодульКода("Saby_ТНОбщегоНазначенияСервер").ИмяМетаданныхДокумента(
		ПараметрыЗагрузки.ДокументОснование);
	
	Если ЗначениеЗаполнено(ОбъектДок.ДокументОснование_ОбъектМетаданных) Тогда 
		ОбъектДок.ДокументОснование_Идентификатор = ПараметрыЗагрузки.ДокументОснование.УникальныйИдентификатор();
	Иначе
		ОбъектДок.ДокументОснование_Идентификатор = "";
	КонецЕсли;
	
КонецПроцедуры

Функция НаправлениеДокумента(НаправлениеСОнлайна, Знач ЗначениеПоУмолчанию = Неопределено)
	
	Если ЗначениеПоУмолчанию = Неопределено Тогда
		ЗначениеПоУмолчанию = ЗначениеМетаданных("Saby_Направление.Исходящий");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаправлениеСОнлайна) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат МодульКода("Перечисления.Saby_Направление").НаправлениеПоИмени(НаправлениеСОнлайна);
	
КонецФункции

Функция ДопПараметрыЗагрузкиВложения(ПараметрыЗагрузки = Неопределено, Результат = Неопределено)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Результат",                 Результат);
	РезультатФункции.Вставить("ЗагрузкаСОнлайна",          Истина);
	РезультатФункции.Вставить("Просмотрено",               Ложь);
	РезультатФункции.Вставить("ТолькоАктивныйЭтап",        Ложь);
	РезультатФункции.Вставить("ИмяМетаданных",             "");
	РезультатФункции.Вставить("ЭтоПервоеОснование",        Истина);
	РезультатФункции.Вставить("НоменклатураГруза",         Новый Соответствие);
	РезультатФункции.Вставить("КлючСтроки",                Новый Структура);
	РезультатФункции.Вставить("СопроводительныеДокументы", Новый Массив);
	
	Если ЗначениеЗаполнено(ПараметрыЗагрузки) Тогда 
		ЭПЛ = ПараметрыЗагрузки.ИмяМетаданных = "Saby_ПутевойЛист";
	Иначе 
		ЭПЛ = Ложь;
	КонецЕсли;
	
	// обработка доп узлов для ЭПЛ
	Если ЭПЛ Тогда 
		РезультатФункции.Вставить("Стороны",        Неопределено);	
		РезультатФункции.Вставить("ЗаменаВодителя", Неопределено);
	КонецЕсли;
	
	Если ПараметрыЗагрузки <> Неопределено Тогда  
		
		РезультатФункции.Вставить("Событие",              ПараметрыЗагрузки.ДанныеДокумента["Событие"]);
		РезультатФункции.Вставить("СторонняяОрганизация", ПараметрыЗагрузки.ДанныеДокумента["Контрагент"]);
		РезультатФункции.Вставить("НашаОрганизация",      ПараметрыЗагрузки.ДанныеДокумента["НашаОрганизация"]);
		
		РезультатФункции.Просмотрено = ПараметрыЗагрузки.ТекущийТитул <> Неопределено;
		
		Если ПараметрыЗагрузки.ЭтоЗаполнениеСПомощьюINI Тогда 
			РезультатФункции.ЗагрузкаСОнлайна          = Ложь;
			РезультатФункции.ЭтоПервоеОснование        = ПараметрыЗагрузки.ЭтоПервоеОснование;
			РезультатФункции.НоменклатураГруза         = ПараметрыЗагрузки.НоменклатураГруза;
			РезультатФункции.КлючСтроки                = ПараметрыЗагрузки.КлючСтроки;
			РезультатФункции.СопроводительныеДокументы = ПараметрыЗагрузки.СопроводительныеДокументы;
		Иначе
			РезультатФункции.КлючСтроки         = СтруктураКлючСтроки();
		КонецЕсли;
		
		РезультатФункции.ТолькоАктивныйЭтап = ПараметрыЗагрузки.Свойство("ТолькоАктивныйЭтап")
			И ПараметрыЗагрузки.ТолькоАктивныйЭтап;
		
		РезультатФункции.ИмяМетаданных = ПараметрыЗагрузки.ИмяМетаданных;
		
		РезультатФункции.Вставить("ПараметрыОснования", ПараметрыЗагрузки.ПараметрыОснования);
		
		Если ЭПЛ Тогда 
			РезультатФункции.Вставить("Стороны",        ПараметрыЗагрузки.ДанныеДокумента["Стороны"]);
			РезультатФункции.Вставить("ЗаменаВодителя", ПараметрыЗагрузки.ДанныеДокумента["ЗаменаВодителя"]);			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СохранитьДокумент(ОбъектДок, ИД, АктивныйЭтап, Состояние, ИзДокумента)
	
	Если ТипЗнч(ОбъектДок) = Тип("Структура") Тогда
		ОбъектДок.АктивныйЭтапСтрокой = АктивныйЭтап;
		ОбъектДок.Состояние           = Состояние;
		Возврат ОбъектДок;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ОбъектДок.Ссылка) Тогда
			
			ОбъектДок.УстановитьНовыйНомер();
			Если Не ЗначениеЗаполнено(ОбъектДок.Дата) Тогда
				ОбъектДок.Дата = ТекущаяДатаСеанса();
			КонецЕсли;
			
		КонецЕсли;
		
		ОбъектДок.Записать();
		
		Ссылка = ОбъектДок.Ссылка;
		
		// выкручиваемся через SbisId
		// больше писать не куда...
		Если Не ИзДокумента Тогда
			Просмотрен = "Не просмотрен";
		Иначе
			Просмотрен = "";
		КонецЕсли;
		
		ПараметрыСтатус = МодульКода("Saby_ТНОбщегоНазначенияСервер").ПараметрыЗаписиРегистраСостояний();
		
		ПараметрыСтатус.ИД           = ИД;
		ПараметрыСтатус.АктивныйЭтап = СокрЛП(АктивныйЭтап);
		ПараметрыСтатус.Ссылка       = Ссылка;
		ПараметрыСтатус.Состояние    = Состояние;
		ПараметрыСтатус.СбисИД       = Просмотрен; 
		
		МодульКода("Saby_ТНОбщегоНазначенияСервер").ОбновитьДанныеСостояния(ПараметрыСтатус);
		
	Исключение
		Ссылка = Неопределено;
	КонецПопытки;
	
	Возврат Ссылка;
	
КонецФункции

Процедура ЗагрузитьДополнительныеДействия(ОбъектДок, ДопДействия)
	
	Если Не МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ЕстьРеквизитИлиСвойство(ОбъектДок, "ДоступныеДействия") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДок.Ссылка) Тогда
		ОбъектДок.ДоступныеДействия.Очистить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДопДействия) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Действие Из ДопДействия Цикл 
		
		СтруктураДоступныхДействий = Новый Структура();
		СтруктураДоступныхДействий.Вставить("Действие", ЗначениеДопДействия(Действие["Название"]));
		Если ЗначениеЗаполнено(СтруктураДоступныхДействий.Действие) Тогда 
			ДобавитьИЗаполнитьСтроку(ОбъектДок.ДоступныеДействия, СтруктураДоступныхДействий);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ЗначениеДопДействия(Действие)
	
	Если Действие = "Уведомление о переадресовке" Тогда
		Значение = ЗначениеМетаданных("Saby_ДоступныеДействия.УведомлениеОПереадресовке");
	ИначеЕсли Действие = "Изменить стоимость" Тогда
		Значение = ЗначениеМетаданных("Saby_ДоступныеДействия.ИзменитьСтоимость");
	ИначеЕсли Действие = "Согласовать стоимость" Тогда
		Значение = ЗначениеМетаданных("Saby_ДоступныеДействия.СогласоватьСтоимость");
	ИначеЕсли Действие = "Замена водителей/ТС" Тогда
		Значение = ЗначениеМетаданных("Saby_ДоступныеДействия.ЗаменаВодителяТС");
	ИначеЕсли Действие = "Переадресовка" Тогда
		Значение = ЗначениеМетаданных("Saby_ДоступныеДействия.Переадресовка");
	Иначе
		// не нашли соотвествия
		Значение = Неопределено;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ДатаСобытияПоДокументу(Параметры, Знач ДатаПоУмолчанию = Неопределено)
	
	Если ДатаПоУмолчанию = Неопределено Тогда
		ДатаПоУмолчанию = Дата(1, 1, 1);
	КонецЕсли;
	
	Если Параметры.ИзДокумента Тогда
		Возврат ДатаПоУмолчанию;
	КонецЕсли;
	
	События = Параметры.ДанныеДокумента["Событие"];
	Если Не ЗначениеЗаполнено(События) Тогда
		Возврат ДатаПоУмолчанию;
	КонецЕсли;
	
	Возврат МодульКода("Saby_ТНОбщегоНазначенияСервер").ПреобразоватьСтрокуВДатуЭПД(События[0]["ДатаВремя"]);
	
КонецФункции

Функция ТекущийЭтапДокумента(ОбъектДок, ПараметрыЗагрузки)
	
	РезультатФункции = "";
	
	ТекущиеЭтапы = ПараметрыЗагрузки.ДанныеДокумента["ТекущиеЭтапы"];
	Если ТекущиеЭтапы = Неопределено Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	РезультатФункции = ЭтапДляПодписания(ОбъектДок, ПараметрыЗагрузки);
	
	Если РезультатФункции = Неопределено Тогда
		ДатаЭтапа = ДобавитьМесяц(ТекущаяДатаСеанса(), 12);
	
		Для Каждого ТекущийЭтап Из ТекущиеЭтапы Цикл
			ДатаСобытия = МодульКода("Saby_ТНОбщегоНазначенияСервер").ПреобразоватьСтрокуВДатуЭПД(ТекущийЭтап["ДатаСобытия"]);
			Если ДатаСобытия < ДатаЭтапа Тогда
				РезультатФункции = ТекущийЭтап["Наименование"];
				ДатаЭтапа = ДатаСобытия;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ЭтапДляПодписания(ОбъектДок, ПараметрыЗагрузки)
	
	РезультатФункции = Неопределено;
	
	ОтборЭтапов = Новый Структура;
	ОтборЭтапов.Вставить("Доступен", Истина);
	
	ДоступныеЭтапы = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").НайтиСтрокиУниверсально(ОбъектДок.ТекущиеЭтапы, ОтборЭтапов);
	
	Если ДоступныеЭтапы.Количество() > 0 Тогда
		РезультатФункции = ДоступныеЭтапы[0].Наименование;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗагрузитьТекущиеЭтапыДокумента(ОбъектДок, ПараметрыЗагрузки)
	
	ОбъектДок.ТекущиеЭтапы.Очистить();
	
	ТекущиеЭтапы = ПараметрыЗагрузки.ДанныеДокумента["ТекущиеЭтапы"];
	
	Если ТекущиеЭтапы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоступныеЭтапы = МодульКода("Документы." + ПараметрыЗагрузки.ИмяМетаданных).ДоступныеОрганизацииЭтапы(
		ОбъектДок, ПараметрыЗагрузки);
	
	Для Каждого ТекущийЭтап Из ТекущиеЭтапы Цикл
		
		НаименованиеЭтапа = ТекущийЭтап["Наименование"];
		
		ТипТитула = МодульКода("Saby_ТНОбщегоНазначенияСервер").РезультатФункцииТитулов(
			ПараметрыЗагрузки.ИмяМетаданных, "ЗначениеПоЭтапу", НаименованиеЭтапа);
			
		Если ТипЗнч(ОбъектДок.ТекущиеЭтапы) = Тип("Массив") Тогда
			СтрокаТекущегоЭтапа = Новый Структура("Наименование,ТипТитула,Доступен");
			ОбъектДок.ТекущиеЭтапы.Добавить(СтрокаТекущегоЭтапа);
		Иначе
			СтрокаТекущегоЭтапа = ОбъектДок.ТекущиеЭтапы.Добавить();
		КонецЕсли;
		
		СтрокаТекущегоЭтапа.Наименование = НаименованиеЭтапа;
		СтрокаТекущегоЭтапа.ТипТитула    = ТипТитула;
		СтрокаТекущегоЭтапа.Доступен     = ДоступныеЭтапы[НаименованиеЭтапа] <> Неопределено;
		
		Если НаименованиеЭтапа = "Выпуск в рейс" Тогда
			СтрокаТекущегоЭтапа.Доступен = СтрокаТекущегоЭтапа.Доступен И ТекущиеЭтапы.Количество() = 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ЗагрузкаИзменений

Функция СписокИзмененийДокументов(СтруктураПараметров)
	
	РезультатФункции = Новый Соответствие;
	
	ПараметрыПолученияИзменений = ПараметрыПолученияИзменений(СтруктураПараметров);
	
	ЕстьИзменения = Истина;
	Пока ЕстьИзменения Цикл
		
		ИзмененияПоДокументам = СледующиеИзмененияДокументов(ПараметрыПолученияИзменений, ЕстьИзменения);
		
		Для Каждого Изменение Из ИзмененияПоДокументам Цикл
			ДобавитьИзменение(РезультатФункции, Изменение, ПараметрыПолученияИзменений, СтруктураПараметров.ДопПараметры);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПараметрыПолученияИзменений(СтруктураПараметров)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ОбъектОбработки", ОбъектОбработки());
	РезультатФункции.Вставить("context_params",  СтруктураПараметров.context_params);
	РезультатФункции.Вставить("Параметры",       Новый Структура);
	
	РазмерСтраницы = 30;
	
	Навигация = Новый Структура;
	Навигация.Вставить("РазмерСтраницы", Формат(РазмерСтраницы, "ЧГ=0"));
	
	РезультатФункции.Параметры.Вставить("Навигация", Навигация);
	
	Если СтруктураПараметров.ДопПараметры.Свойство("Начало")
		И ЗначениеЗаполнено(СтруктураПараметров.ДопПараметры.Начало) Тогда
		
		ДатаС = СтруктураПараметров.ДопПараметры.Начало;
		ПараметрДатаС = Формат(ДатаС, "ДФ='dd.MM.yyyy ЧЧ.мм.сс'");
		РезультатФункции.Параметры.Вставить("ДатаВремяС", ПараметрДатаС);
		
	КонецЕсли;
	
	Если СтруктураПараметров.ДопПараметры.Свойство("Окончание")
		И ЗначениеЗаполнено(СтруктураПараметров.ДопПараметры.Окончание) Тогда
		
		ДатаПо = СтруктураПараметров.ДопПараметры.Окончание;
		ПараметрДатаПо = Формат(ДатаПо, "ДФ='dd.MM.yyyy ЧЧ.мм.сс'");
		РезультатФункции.Параметры.Вставить("ДатаВремяПо", ПараметрДатаПо);
		
	КонецЕсли;
	
	ПараметрыДокументаДляАПИ = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ПараметрыДокументаДляАПИ(
		СтруктураПараметров.ДопПараметры.ИмяМетаданных);
		
	// по ЭПЛ дополним поля
	ДопПоля = "ДопДействия,ТекущиеЭтапы,Подстановки";
	Если ПараметрыДокументаДляАПИ.Тип = "Waybill" Тогда
		ДопПоля = ДопПоля + ",Стороны,ЗаменаВодителя";
	КонецЕсли;
	
	РезультатФункции.Параметры.Вставить("Тип",                ПараметрыДокументаДляАПИ.Тип);
	РезультатФункции.Параметры.Вставить("ДопПоля",            ДопПоля);
	РезультатФункции.Параметры.Вставить("ПолныйСертификатЭП", "Нет");
	РезультатФункции.Параметры.Вставить("ИдентификаторСобытия", "");
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СледующиеИзмененияДокументов(ПараметрыПолученияИзменений, ЕстьИзменения)
	
	РезультатФункции = Новый Массив;
	
	Попытка
		
		СоответствиеИзменений = ПараметрыПолученияИзменений.ОбъектОбработки.local_helper_read_changes(
			ПараметрыПолученияИзменений.context_params, ПараметрыПолученияИзменений.Параметры);
		
		РезультатФункции = СоответствиеИзменений["Документ"];
		ЕстьИзменения    = Булево(СоответствиеИзменений["Навигация"]["ЕстьЕще"]);
		
	Исключение
		
		ЕстьИзменения = Ложь;
		
		ИнфОбОшибке = ИнформацияОбОшибке();
		Описание    = "Ошибка загрузки из Сбис";
		
		МодульКода("Saby_ТНОбщегоНазначенияСервер").ЗаписатьОшибкуВЖурналРегистрации(Неопределено, Описание, ИнфОбОшибке);
		
	КонецПопытки;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДобавитьИзменение(Изменения, ИзменениеСОнлайна, ПараметрыПолученияИзменений, ДопПараметры)
	
	Событие = ИзменениеСОнлайна["Событие"];
	
	ДанныеПодстановок = ИзменениеСОнлайна["Подстановки"];
	Если Не ЗначениеЗаполнено(ДанныеПодстановок) Тогда
		ДобавитьСобытия(Событие, ПараметрыПолученияИзменений);
		Возврат;
	КонецЕсли;
	
	ИдентификаторДокумента = ИзменениеСОнлайна["Идентификатор"];
	
	// Изменения с онлайна приходят не сгруппированные по документу.
	// Поэтому группируем их по идентификатору документа
	ИзмененияПоДокументу = Изменения.Получить(ИдентификаторДокумента);
	Если ИзмененияПоДокументу = Неопределено Тогда
		
		ИзмененияПоДокументу = Новый Соответствие;
		ИзмененияПоДокументу.Вставить("Подстановки",       Новый Соответствие);
		ИзмененияПоДокументу.Вставить("ИдТитулов",         Новый Соответствие);
		ИзмененияПоДокументу.Вставить("ДатаВремяСоздания", ИзменениеСОнлайна["ДатаВремяСоздания"]);
		ИзмененияПоДокументу.Вставить("Номер",             ИзменениеСОнлайна["Номер"]);
		ИзмененияПоДокументу.Вставить("Название",          ИзменениеСОнлайна["Название"]);
		ИзмененияПоДокументу.Вставить("Направление",       ИзменениеСОнлайна["Направление"]);
		ИзмененияПоДокументу.Вставить("Состояние",         ИзменениеСОнлайна["Состояние"]);
		ИзмененияПоДокументу.Вставить("Событие",           Новый Массив);
		ИзмененияПоДокументу.Вставить("ТекущиеЭтапы",      ИзменениеСОнлайна["ТекущиеЭтапы"]);
		ИзмененияПоДокументу.Вставить("ДопДействия",       ИзменениеСОнлайна["ДопДействия"]);
		ИзмененияПоДокументу.Вставить("Контрагент",        ИзменениеСОнлайна["Контрагент"]);
		ИзмененияПоДокументу.Вставить("НашаОрганизация",   ИзменениеСОнлайна["НашаОрганизация"]);
		ИзмененияПоДокументу.Вставить("СсылкаНаPDF",       ИзменениеСОнлайна["СсылкаНаPDF"]);
		ИзмененияПоДокументу.Вставить("Стороны",           ИзменениеСОнлайна["Стороны"]);
		ИзмененияПоДокументу.Вставить("ЗаменаВодителя",    ИзменениеСОнлайна["ЗаменаВодителя"]);
		
		Изменения.Вставить(ИдентификаторДокумента, ИзмененияПоДокументу);
		
	КонецЕсли;
	
	ДобавитьВложенияИзСобытий(ИзмененияПоДокументу, Событие, ДопПараметры.ИмяМетаданных);
	ДобавитьСобытия(Событие, ПараметрыПолученияИзменений, ИзмененияПоДокументу);
	
	Для Каждого Подстановки Из ДанныеПодстановок Цикл
		ДобавитьПодстановкуТитула(
			ИзмененияПоДокументу,
			Подстановки.Ключ,
			Подстановки.Значение,
			ДопПараметры.ИмяМетаданных);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПодстановкуТитула(ИзмененияПоДокументу, КодТитулаОнлайна, ЗначенияПодстановок, ИмяМетаданных)
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	Титул = МодульТНОбщегоНазначенияСервер.РезультатФункцииТитулов(ИмяМетаданных, "ЗначениеПоИмениПодстановки", КодТитулаОнлайна);
	Если Не ЗначениеЗаполнено(Титул) Тогда
		Возврат;
	КонецЕсли;
		
	ПредставленияТитула = МодульТНОбщегоНазначенияСервер.РезультатФункцииТитулов(ИмяМетаданных, "ПредставленияТитула", Титул);
	
	МассивПодстановок = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ЗначениеВМассив(ЗначенияПодстановок);
	
	Для Каждого ДанныеТитула Из МассивПодстановок Цикл
		
		КлючСоответствияВложения = КлючСоответствияВложения(ДанныеТитула, ПредставленияТитула);
		
		СтруктураВложения = ИзмененияПоДокументу["Вложения"][КлючСоответствияВложения];
		
		ДобавитьИнформациюВПодстановки(ДанныеТитула, Титул, СтруктураВложения, ИмяМетаданных);
		УдалитьНеиспользуемуюИнформациюВПодстановках(ДанныеТитула, ПредставленияТитула);
		
		МассивТитулов = ИзмененияПоДокументу["Подстановки"][КодТитулаОнлайна];
		Если МассивТитулов = Неопределено Тогда
			МассивТитулов = Новый Массив;
			ИзмененияПоДокументу["Подстановки"].Вставить(КодТитулаОнлайна, МассивТитулов);
		КонецЕсли;
		
		ИдентификаторВложения = ДанныеТитула["ИдентификаторВложенияТитула"];
		Если ИдентификаторВложения = "" Тогда
			ИдентификаторВложения = ПредставленияТитула.ИмяПодстановки;
		КонецЕсли;
		
		ИндексТитула = ИзмененияПоДокументу["ИдТитулов"][ИдентификаторВложения];
		Если ИндексТитула = Неопределено Тогда
			МассивТитулов.Добавить(ДанныеТитула);
			ИзмененияПоДокументу["ИдТитулов"].Вставить(ИдентификаторВложения, МассивТитулов.ВГраница());
		Иначе
			Если МассивТитулов.Количество() Тогда 
				МассивТитулов[ИндексТитула] = ДанныеТитула;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КлючСоответствияВложения(ДанныеТитула, ПредставленияТитула)
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");

	РезультатФункции = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "Файл.ИмяФайлаБезРасширения");
	Если РезультатФункции = Неопределено Тогда
		РезультатФункции = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
			ДанныеТитула, "Документ.Дополнительная информация.Имя файла");
	КонецЕсли;
	Если РезультатФункции = Неопределено Тогда
		РезультатФункции = ПредставленияТитула.КодТитула;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДобавитьИнформациюВПодстановки(ДанныеТитула, Титул, СтруктураВложения, ИмяМетаданных)
	
	ДанныеТитула.Вставить("ДатаВложенияТитула", ДатаВложения(ДанныеТитула, Титул, СтруктураВложения));
	
	ДанныеТитула.Вставить("ИдентификаторВложенияТитула", ИдентификаторВложения(ДанныеТитула, Титул, СтруктураВложения));
	
КонецПроцедуры

Процедура УдалитьНеиспользуемуюИнформациюВПодстановках(ДанныеТитула, ПредставленияТитула)
	
	Если ДанныеТитула[ПредставленияТитула.КодТитула] <> Неопределено Тогда
		ДанныеТитула.Вставить(ПредставленияТитула.КодТитула, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСобытия(СобытияОнлайна, ПараметрыИзменений, ИзмененияПоДокументу = Неопределено)
	
	Если СобытияОнлайна = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Событие Из СобытияОнлайна Цикл
		
		ПоследнийИдентификатор = Событие["Идентификатор"];
		ДатаПоследнегоСобытия  = Событие["ДатаВремя"];
		
		ПараметрыИзменений.Параметры.ИдентификаторСобытия = ПоследнийИдентификатор;
		ПараметрыИзменений.Параметры.ДатаВремяС           = ДатаПоследнегоСобытия;
		
		Если ИзмененияПоДокументу = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СобытиеСоответствие = Новый Соответствие;
		СобытиеСоответствие.Вставить("ДатаВремя",     ДатаПоследнегоСобытия);
		СобытиеСоответствие.Вставить("Идентификатор", ПоследнийИдентификатор);
		СобытиеСоответствие.Вставить("Название",      Событие["Название"]);
		СобытиеСоответствие.Вставить("Комментарий",   Событие["Комментарий"]);
		СобытиеСоответствие.Вставить("Действие",      Событие["Действие"]);
		
		ИзмененияПоДокументу["Событие"].Добавить(СобытиеСоответствие);
		
		ЗаполнитьКомментарийОтрицательногоЗавершенияПоСобытию(ИзмененияПоДокументу);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКомментарийОтрицательногоЗавершенияПоСобытию(ИзмененияПоДокументу)
	
	ПоследнееСобытие = ИзмененияПоДокументу["Событие"];
	ПоследнееСобытие = ПоследнееСобытие[ПоследнееСобытие.ВГраница()];
	
	Если Не ЗначениеЗаполнено(ПоследнееСобытие["Комментарий"]) Тогда
		Возврат;
	КонецЕсли;
	
	КодСостояния = МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеСоответствия(ИзмененияПоДокументу, "Состояние.Код");
	КодСостояния = МодульКода("Saby_ТНОбщегоНазначенияСервер").ЧислоИзСтроки(КодСостояния);
	КодСостоянияЗавершеноСПроблемами = 9;
	Если КодСостояния = КодСостоянияЗавершеноСПроблемами Тогда
		ИзмененияПоДокументу["Состояние"]["Примечание"] = ПоследнееСобытие["Комментарий"];
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВложенияИзСобытий(ИзмененияПоДокументу, СобытияСОнлайна, ИмяМетаданных)
	
	Вложения = ИзмененияПоДокументу["Вложения"];
	Если Вложения = Неопределено Тогда
		Вложения = Новый Соответствие;
		ИзмененияПоДокументу.Вставить("Вложения", Вложения);
	КонецЕсли;
	
	Если СобытияСОнлайна = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Событие Из СобытияСОнлайна Цикл
		
		Если Событие["Вложение"] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьВложения(Вложения, Событие, ИмяМетаданных);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВложения(Вложения, Событие, ИмяМетаданных)
	
	ВложенияСОнлайна = Событие["Вложение"];
	
	Если ВложенияСОнлайна = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКлючаДатаВремя     = "ДатаВремя";
	ИмяКлючаИдентификатор = "Идентификатор";
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	Для Каждого Вложение Из ВложенияСОнлайна Цикл
		
		Если ИмяМетаданных = "Saby_ТранспортнаяНакладная" Тогда
			ИмяФайлаСРасширением     = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Файл.Имя", "");
			КлючСоответствияВложения = СтрРазделить(ИмяФайлаСРасширением, ".")[0];
		Иначе
			КлючСоответствияВложения = Вложение["Подтип"];
		КонецЕсли;
		
		СтруктураВложения = Вложения[КлючСоответствияВложения];
		Если СтруктураВложения = Неопределено Тогда
			
			СтруктураВложения = Новый Соответствие;
			СтруктураВложения.Вставить(ИмяКлючаДатаВремя,     Дата(1, 1, 1));
			СтруктураВложения.Вставить(ИмяКлючаИдентификатор, "");
			Вложения.Вставить(КлючСоответствияВложения, СтруктураВложения);
			
		КонецЕсли;
		
		ДатаВремя = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Событие, "ДатаВремя");
		ДатаВремя = МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаВремя);
		
		Если СтруктураВложения[ИмяКлючаДатаВремя] < ДатаВремя Тогда
			СтруктураВложения[ИмяКлючаДатаВремя]     = ДатаВремя;
			СтруктураВложения[ИмяКлючаИдентификатор] = Вложение[ИмяКлючаИдентификатор];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьИзмененияДокументов(СписокИзменений, Результат, СтруктураПараметров)
	
	ОбщиеПараметрыЗагрузки = МодульКода("Saby_ТНОбщегоНазначенияСервер").ОбщиеПараметрыВыгрузкиЗагрузки(
		СтруктураПараметров.context_params);
	
	Для Каждого Изменение Из СписокИзменений Цикл
				
		ПараметрыЗагрузки = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ПараметрыЗагрузки();
		ПараметрыЗагрузки.ИДСбис          = Изменение.Ключ;
		ПараметрыЗагрузки.ДанныеДокумента = Изменение.Значение;
		ПараметрыЗагрузки.ИмяМетаданных   = СтруктураПараметров.ДопПараметры.ИмяМетаданных;
		
		ЗагрузитьДокумент(ПараметрыЗагрузки, ОбщиеПараметрыЗагрузки, Результат);
		
	КонецЦикла;
	
	МодульКода("Справочники.Saby_ОпасныеГрузы").ДозаполнитьНовыеОпасныеГрузы(Результат.НовыеОпасныеГрузы);
	МодульКода("Справочники.Saby_ВидыУпаковки").ДозаполнитьНовыеВидыУпаковки(Результат.НовыеВидыУпаковки);
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаИзменений

#Область ПечатнаяФормаИзСБИС

// Загружает печатную форму из СБИС.
//
// Параметры:
//  ПараметрыЗагрузки - Структура - параметры загрузки
//  URLФайлаВСбис - Строка - адрес печатной формы pdf
//  ВзятьИзБазыЕслиЕсть - Булево - признак получения печатной формы из базы.
//
// Возвращаемое значение:
//   СправочникСсылка.Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы - присоединенный файл печатной формы.
//
Функция ЗагрузитьПечатнуюФормуДокументаИзСбис(ПараметрыЗагрузки, URLФайлаВСбис = Неопределено,
		ВзятьИзБазыЕслиЕсть = Ложь) Экспорт
	
	СтруктураПрисоединенногоФайла = СтруктураПрисоединенногоФайла(ПараметрыЗагрузки);
	
	Если ВзятьИзБазыЕслиЕсть И ЗначениеЗаполнено(СтруктураПрисоединенногоФайла.СсылкаНаПрисоединенныйФайл) Тогда
		Возврат СтруктураПрисоединенногоФайла.СсылкаНаПрисоединенныйФайл;
	КонецЕсли;
	
	ВременноеХранилище = АдресДвоичныхДанныхФайла(ПараметрыЗагрузки, URLФайлаВСбис);
	
	Если Не ЗначениеЗаполнено(ВременноеХранилище) Тогда
		Возврат ЗначениеМетаданных("Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы.ПустаяСсылка", "Справочник");
	КонецЕсли;
	
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	ПараметрыФайла.Автор              = МодульКода("Saby_ТНОбщегоНазначенияСервер").АвторизованныйПользователь();
	ПараметрыФайла.ВладелецФайлов     = ПараметрыЗагрузки.СсылкаНаДокумент;
	ПараметрыФайла.ИмяБезРасширения   = СтруктураПрисоединенногоФайла.ИмяБезРасширения;
	ПараметрыФайла.РасширениеБезТочки = СтруктураПрисоединенногоФайла.РасширениеБезТочки;
	
	Возврат РаботаСФайлами.ДобавитьФайл(
		ПараметрыФайла,
		ВременноеХранилище, , ,
		СтруктураПрисоединенногоФайла.СсылкаНаПрисоединенныйФайл);
	
КонецФункции

// Возвращает параметры для загрузки печатной формы из СБИС.
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на документ
//  context_params - Структура - параметры для отправки запросов на онлайн.
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор формы,
//    в хранилище которой сохраняется печатная форма.
//
// Возвращаемое значение:
//   Структура - структура параметров.
//
Функция ПараметрыЗагрузкиИзСбис(Знач СсылкаНаДокумент = Неопределено,
		context_params = Неопределено, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("СсылкаНаДокумент",             СсылкаНаДокумент);
	РезультатФункции.Вставить("УИДСбис",                      "");
	РезультатФункции.Вставить("Номер",                        "");
	РезультатФункции.Вставить("Дата",                         Дата(1, 1, 1, 0, 0, 0));
	РезультатФункции.Вставить("ОбъектОбработки",              ОбъектОбработки());
	РезультатФункции.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	РезультатФункции.Вставить("СписокДокументов",             Неопределено);
	РезультатФункции.Вставить("ЭтоЧерновик",                  Истина);
	
	Если context_params = Неопределено Тогда
		РезультатФункции.Вставить("context_params", МодульКода("Saby_Core").ПроверитьНаличиеПараметровПодключения());
	Иначе
		РезультатФункции.Вставить("context_params", context_params);
	КонецЕсли;
	
	Если СсылкаНаДокумент <> Неопределено Тогда
		ЗаполнитьПараметрыЗагрузкиПоСсылке(РезультатФункции, Ложь);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьПараметрыЗагрузкиПоСсылке(Параметры, ПовторноеПолучение)
	
	ДанныеСостояния = МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеСостоянияОбъекта(Параметры.СсылкаНаДокумент);
	
	Если ТипЗнч(Параметры.СсылкаНаДокумент) = Тип("Структура") Тогда
		ЗаполнитьПараметрыЗагрузкиПоСсылкеДляВО(Параметры, ДанныеСостояния);
	Иначе
		ЗаполнитьПараметрыЗагрузкиПоСсылкеДляРасширения(Параметры, ДанныеСостояния);
	КонецЕсли;
	
	НеобходимоОбновитьДанные = Параметры.УИДСбис = "" Или Параметры.ЭтоЧерновик;
	
	Если Не ПовторноеПолучение И НеобходимоОбновитьДанные Тогда
		
		ДанныеДляВыгрузки = Новый Массив;
		ПараметрыВыгрузки = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ПараметрыВыгрузки(Параметры.СсылкаНаДокумент);
		Если ТипЗнч(Параметры.СсылкаНаДокумент) = Тип("Структура") Тогда
			ПараметрыВыгрузки.ДанныеДокумента = Параметры.СсылкаНаДокумент;
		КонецЕсли;
		ДанныеДляВыгрузки.Добавить(ПараметрыВыгрузки);
		
		ДополнительныеПараметры = Новый Структура;
		
		РезультатЗаписи = МодульКода("Saby_ТНВыгрузкаСервер").РезультатВыгрузкиДокументов(
			ДанныеДляВыгрузки, Параметры.context_params, ДополнительныеПараметры);
		
		Если РезультатЗаписи.Итог.Успех Тогда
			ЗаполнитьПараметрыЗагрузкиПоСсылке(Параметры, Истина);
		Иначе
			Параметры.СписокДокументов = РезультатЗаписи.Ошибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыЗагрузкиПоСсылкеДляРасширения(Параметры, ДанныеСостояния)
	
	ИмяМетаданных = МодульКода("Saby_ТНОбщегоНазначенияСервер").ИмяМетаданныхДокумента(Параметры.СсылкаНаДокумент);
	ТипДокумента  = "Документ." + ИмяМетаданных;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент", Параметры.СсылкаНаДокумент);
	
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Saby_Документ.Номер КАК Номер,
	|	Saby_Документ.Дата КАК Дата
	|ИЗ
	|	ТипДокументаSaby КАК Saby_Документ
	|ГДЕ
	|	Saby_Документ.Ссылка = &СсылкаНаДокумент";
			
	ЗапросДанных.Текст = СтрЗаменить(ЗапросДанных.Текст, "ТипДокументаSaby", ТипДокумента);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		
		Параметры.Номер       = ВыборкаДанных.Номер;
		Параметры.Дата        = ВыборкаДанных.Дата;
		Если ДанныеСостояния <> Неопределено Тогда
			Параметры.УИДСбис     = ДанныеСостояния.UID;
			Параметры.ЭтоЧерновик = Не ЗначениеЗаполнено(ДанныеСостояния.Состояние);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыЗагрузкиПоСсылкеДляВО(Параметры, ДанныеСостояния)
	
	Параметры.Номер       = Параметры.СсылкаНаДокумент.Номер;
	Параметры.Дата        = Параметры.СсылкаНаДокумент.Дата;
	Если ДанныеСостояния <> Неопределено Тогда
		Параметры.УИДСбис     = ДанныеСостояния.UID;
		Параметры.ЭтоЧерновик = Не ЗначениеЗаполнено(ДанныеСостояния.Состояние);
	КонецЕсли;
	
КонецПроцедуры

Функция СсылкаНаПечатнуюФорму(ПараметрыЗагрузки)
	
	РезультатФункции = Неопределено;
	
	Если Не ЗначениеЗаполнено(ПараметрыЗагрузки.УИДСбис) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Идентификатор", ПараметрыЗагрузки.УИДСбис);
	Параметры.Вставить("ДопПоля",       "");
	
	Попытка
		
		Результат = ПараметрыЗагрузки.ОбъектОбработки.local_helper_read_document(
			ПараметрыЗагрузки.context_params,
			Параметры);

		РезультатФункции = Результат["СсылкаНаPDF"];
		
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		
		МодульКода("Saby_ТНОбщегоНазначенияСервер").ЗаписатьОшибкуВЖурналРегистрации(
			ПараметрыЗагрузки.СсылкаНаДокумент,
			"Не удалось получить печатную форму",
			ИнфоОшибки.Описание);
		
	КонецПопытки;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СтруктураПрисоединенногоФайла(ПараметрыЗагрузки)
	
	ШаблонИмениФайла = "%1 №%2 от №%3 (%4)";
	
	ИмяМетаданных = МодульКода("Saby_ТНОбщегоНазначенияСервер").ИмяМетаданныхДокумента(ПараметрыЗагрузки.СсылкаНаДокумент);
	
	ИмяБезРасширения = СтрШаблон(
		ШаблонИмениФайла,
		ИмяМетаданных,
		ПараметрыЗагрузки.Номер,
		Формат(ПараметрыЗагрузки.Дата, "ДФ=dd.MM.yyyy"),
		ПараметрыЗагрузки.УИДСбис);
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ИмяБезРасширения",           ИмяБезРасширения);
	РезультатФункции.Вставить("РасширениеБезТочки",         "pdf");
	РезультатФункции.Вставить("СсылкаНаПрисоединенныйФайл", Неопределено);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Saby_ПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник_Имя_ПрисоединенныеФайлы КАК Saby_ПрисоединенныеФайлы
	|ГДЕ
	|	НЕ Saby_ПрисоединенныеФайлы.ПометкаУдаления
	|	И Saby_ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И Saby_ПрисоединенныеФайлы.Наименование ПОДОБНО ""%&Наименование%""";
	
	ЗапросДанных.Текст = СтрЗаменить(ЗапросДанных.Текст, "&Наименование", ПараметрыЗагрузки.УИДСбис);
	ЗапросДанных.УстановитьПараметр("ВладелецФайла", ПараметрыЗагрузки.СсылкаНаДокумент);
	
	ЗапросДанных.Текст = СтрЗаменить(ЗапросДанных.Текст, "_Имя_", "." + ИмяМетаданных);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		НайденнаяСсылка = ВыборкаДанных.Ссылка;
	Иначе
		ИмяСправочника = ИмяМетаданных + "ПрисоединенныеФайлы";
		НайденнаяСсылка = Справочники[ИмяСправочника].ПустаяСсылка();
	КонецЕсли;
	
	Если Не НайденнаяСсылка.Пустая() Тогда
		РезультатФункции.СсылкаНаПрисоединенныйФайл = НайденнаяСсылка;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ПечатнаяФормаИзСБИС

#Область ЗагрузкаТС

Процедура ЗаполнитьСтруктуруТранспортногоСредства(СтруктураТС, СтруктураТССОнлайна, ДляДокумента, ЭтоВО)
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
		
	Грузоподъемность = МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(СтруктураТССОнлайна["Грузоподъемность"]);
	Вместимость      = МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(СтруктураТССОнлайна["Вместимость"]);
	ТипВладения      = МодульКода("Перечисления.Saby_ТипыВладенияТС").ТипыВладенияТСПоКоду(СтруктураТССОнлайна["ТипВладения"]);
	
	СтруктураТС.РегистрационныйНомер = РегНомерБезЛишнихСимволов(СтруктураТССОнлайна["РегНомер"]);
	СтруктураТС.ИнвентарныйНомер     = ЗначениеЕслиЗаполнено(СтруктураТССОнлайна["ИнвентарныйНомер"], "");
	СтруктураТС.Тип                  = СтруктураТССОнлайна["Тип"];
	СтруктураТС.Марка                = СтруктураТССОнлайна["Марка"];
	СтруктураТС.Модель               = ЗначениеЕслиЗаполнено(СтруктураТССОнлайна["Модель"], "");
	СтруктураТС.ВИН                  = СтруктураТССОнлайна["VIN"];
	СтруктураТС.НомерСТС             = СтруктураТССОнлайна["НомерСТС"];
	СтруктураТС.Грузоподъемность     = Грузоподъемность;
	СтруктураТС.Вместимость          = Вместимость;
	СтруктураТС.ТипВладения          = ТипВладения;
	
	НачальныйИндекс = ДляДокумента.ДокументыЭПД.Количество();
	
	ЗагрузитьДокументыЭПД(
		ДляДокумента,
		СтруктураТССОнлайна["ОснованиеВладения"],
		ЗначениеМетаданных("Saby_ТипыДокумента.ПодтверждениеВладения"));
		
	ЗаполнитьСсылкиНаДокументЭПД(ДляДокумента);
	
	МассивОснованийВладения = Новый Массив;
	
	Для ИндексДокументаЭПД = НачальныйИндекс По ДляДокумента.ДокументыЭПД.ВГраница() Цикл
		СтруктураДокументаЭПД = ДляДокумента.ДокументыЭПД[ИндексДокументаЭПД];
		СтруктураДокументаЭПД.КлючСтроки_ТранспортногоСредства = СтруктураТС.КлючСтроки;
		МассивОснованийВладения.Добавить(СтруктураДокументаЭПД);
	КонецЦикла;
	
	Если МассивОснованийВладения.Количество() > 0 Тогда
		Если ЭтоВО Тогда
			СтруктураТС.ОснованияВладения = МассивОснованийВладения.Количество(); 	
		Иначе	
			СтруктураТС.ОснованияВладения = ЗначениеВСтрокуВнутр(МассивОснованийВладения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеЕслиЗаполнено(Значение, ЗначениеПоУмолчанию)
	
	Если Значение = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ДанныеСпецРазрешений(СпецУсловияСОнлайна)
	
	РезультатФункции = Новый Массив;
	
	Если Не ЗначениеЗаполнено(СпецУсловияСОнлайна) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Для Каждого Условие Из СпецУсловияСОнлайна Цикл   
	
		СпецРазрешение = Условие["СпецРазрешение"];	
		Если ЗначениеЗаполнено(СпецРазрешение) Тогда
			
			СтруктураСпецРазрешения = Новый Структура;
			СтруктураСпецРазрешения.Вставить("Номер", СпецРазрешение["Номер"]);
			СтруктураСпецРазрешения.Вставить("Вид",   СпецРазрешение["Вид"]);
			СтруктураСпецРазрешения.Вставить("Срок",  СпецРазрешение["Срок"]);
			СтруктураСпецРазрешения.Вставить("ИД",    СпецРазрешение["Идентификатор"]);
			СтруктураСпецРазрешения.Вставить(
				"Дата",
				МодульКода("Saby_ТНОбщегоНазначенияСервер").ПреобразоватьСтрокуВДатуЭПД(СпецРазрешение["Дата"]));
				
			НаименованиеОрганаВласти = МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеСоответствия(Условие, "ОИВ.Наименование");
			Если ЗначениеЗаполнено(НаименованиеОрганаВласти) Тогда 
				СтруктураСпецРазрешения.Вставить("НаименованиеОрганаВласти", НаименованиеОрганаВласти); 
			КонецЕсли;
			
			РезультатФункции.Добавить(СтруктураСпецРазрешения);
			
		КонецЕсли;
		
		// - Маршрут не обрабатывается
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ОчиститьТранспортныеСредства(ОбъектДок, Вид, ОчищенныеВидыТС)
	
	Если ОчищенныеВидыТС.Получить(Вид) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчищенныеВидыТС.Вставить(Вид, Истина);
	
	Если ОбъектДок.ТранспортныеСредства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексСтрокиТС = 0;
	Пока ИндексСтрокиТС < ОбъектДок.ТранспортныеСредства.Количество() Цикл
		
		СтрокаТС = ОбъектДок.ТранспортныеСредства[ИндексСтрокиТС];
		
		Если СтрокаТС.Вид = Вид Тогда
			ОбъектДок.ТранспортныеСредства.Удалить(ИндексСтрокиТС);
		Иначе
			ИндексСтрокиТС = ИндексСтрокиТС + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РегНомерБезЛишнихСимволов(РегНомер)
	
	РегНомер = СтрЗаменить(РегНомер, " ", "");
	РегНомер = СокрЛП(РегНомер);
	РегНомер = ВРег(РегНомер);
	
	Возврат РегНомер;
	
КонецФункции

#КонецОбласти // ЗагрузкаТС

#Область ЗагрузкаВодителей

Функция СтруктураВодителя(Водитель)
	
	СтруктураВодителя = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").СтруктураОтветственногоЛица();
	СтруктураВодителя.Роль = ЗначениеМетаданных("Saby_РолиОтветственных.Водитель");
	
	МодульСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	СтруктураВодителя.Фамилия  = МодульСервер.ДанныеСоответствия(Водитель, "Фамилия", "");
	СтруктураВодителя.Имя      = МодульСервер.ДанныеСоответствия(Водитель, "Имя", "");
	СтруктураВодителя.Отчество = МодульСервер.ДанныеСоответствия(Водитель, "Отчество", "");
	СтруктураВодителя.ИНН      = МодульСервер.ДанныеСоответствия(Водитель, "ИНН", "");
	СтруктураВодителя.СНИЛС    = МодульСервер.ДанныеСоответствия(Водитель, "СНИЛС", "");
	
	СтруктураВодителя.Серия = МодульСервер.ДанныеСоответствия(Водитель, "ВУ.Серия", "");
	СтруктураВодителя.Номер = МодульСервер.ДанныеСоответствия(Водитель, "ВУ.Номер", "");
	
	СтруктураВодителя.ДатаВыдачи = МодульСервер.ДанныеСоответствия(Водитель, "ВУ.ДатаВыдачи", "");
	СтруктураВодителя.ДатаВыдачи = МодульСервер.ПреобразоватьСтрокуВДатуЭПД(СтруктураВодителя.ДатаВыдачи);
	
	Если ЗначениеЗаполнено(Водитель["ФИО"]) Тогда
		
		Наименование = Водитель["ФИО"]; 
		ЗаполнитьФИО = ЗначениеЗаполнено(Наименование) 
			И Не ЗначениеЗаполнено(СтруктураВодителя.Фамилия);
		
		Если ЗаполнитьФИО Тогда
			ФИО = МодульСервер.ФИОИзСтроки(Наименование);
			ЗаполнитьЗначенияСвойств(СтруктураВодителя, ФИО);
		КонецЕсли;
		
	Иначе
		
		Массив = Новый Массив;
		Массив.Добавить(СтруктураВодителя.Фамилия);
		Массив.Добавить(СтруктураВодителя.Имя);
		Массив.Добавить(СтруктураВодителя.Отчество);
		
		Наименование = СокрЛП(СтрСоединить(Массив, " "));
		
	КонецЕсли;
	
	СтруктураВодителя.Вставить("Наименование", Наименование);
	
	Телефоны = МодульСервер.ДанныеСоответствия(Водитель, "Телефон", Новый Массив);
	Если ЗначениеЗаполнено(Телефоны) Тогда
		
		МассивТелефонов = Новый Массив;
		Для Каждого Телефон Из Телефоны Цикл  
			МассивТелефонов.Добавить(Телефон["Значение"]);
		КонецЦикла;
		
		СтруктураВодителя.Телефоны = ЗначениеВСтрокуВнутр(МассивТелефонов);
		
	КонецЕсли;
	
	СтруктураВодителя.Заполнена = ЗначениеЗаполнено(СтруктураВодителя.Фамилия)
		Или ЗначениеЗаполнено(СтруктураВодителя.Имя)
		Или ЗначениеЗаполнено(СтруктураВодителя.Отчество);
	
	Возврат СтруктураВодителя;
	
КонецФункции

Процедура УбратьПустыеСтрокиВодителей(Водители, ДопПараметры)
	
	// Только для заполнения на основании другого документа
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		Возврат;
	КонецЕсли;
	
	МассивВодители = Водители["Водитель"];
	
	Индекс = 0;
	Пока Индекс <= МассивВодители.ВГраница() Цикл
		Водитель = МассивВодители[Индекс];
		Если Водитель["Фамилия"] = "" И Водитель["Имя"] = "" И Водитель["Отчество"] = "" Тогда
			МассивВодители.Удалить(Индекс);
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаВодителей

#Область ДокументыЭПД

Процедура ЗаполнитьСтруктуруДокументаЭПД(ДляДокумента, СтруктураДокументаЭПД, ДокументЭПД)
	
	ЕстьНаименованиеНомерДата = ЗначениеЗаполнено(ДокументЭПД["Наименование"])
		Или ЗначениеЗаполнено(ДокументЭПД["Дата"])
		Или ЗначениеЗаполнено(ДокументЭПД["Номер"]);
	
	Если Не ЕстьНаименованиеНомерДата Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДокументаЭПД.Заполнена = Истина;
	
	ДатаДокумента = МодульКода("Saby_ТНОбщегоНазначенияСервер").ПреобразоватьСтрокуВДатуЭПД(ДокументЭПД["Дата"]);
	
	СтруктураДокументаЭПД.Наименование = СокрЛП(ДокументЭПД["Наименование"]);
	СтруктураДокументаЭПД.Номер        = СокрЛП(ДокументЭПД["Номер"]);
	СтруктураДокументаЭПД.Дата         = ДатаДокумента;
	
	// периодически бывает и так... заглушка от пустых документов
	Если Не ЗначениеЗаполнено(СтруктураДокументаЭПД.Номер) Тогда
		СтруктураДокументаЭПД.Номер = СтруктураДокументаЭПД.Наименование;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтруктураДокументаЭПД.Наименование) Тогда
		СтруктураДокументаЭПД.Наименование = "№%1 от %2";
		СтруктураДокументаЭПД.Наименование = СтрШаблон(
			СтруктураДокументаЭПД.Наименование,
			СтруктураДокументаЭПД.Номер,
			Формат(СтруктураДокументаЭПД.Дата, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	Стороны = ДокументЭПД["Стороны"];
	Если Не ЗначениеЗаполнено(Стороны) Тогда
		Возврат;
	КонецЕсли;
	
	РольСторонаДокумента = ЗначениеМетаданных("Saby_РолиКонтрагентов.СторонаДокумента");
	Для Каждого Сторона Из Стороны Цикл
		
		СтруктураДанныхЮрЛица = СтруктураДанныхЮрЛица(ДляДокумента, РольСторонаДокумента, Сторона);
		Если Не ЗначениеЗаполнено(СтруктураДанныхЮрЛица.НаименованиеОрганизации) Тогда
			СтруктураДанныхЮрЛица.НаименованиеОрганизации = Строка(СтруктураДанныхЮрЛица.ЮрФизЛицо) + " " + СтруктураДанныхЮрЛица.ИНН;
			СтруктураДанныхЮрЛица.НаименованиеОрганизации = СокрЛП(СтруктураДанныхЮрЛица.НаименованиеОрганизации);
		КонецЕсли;
		
		СтруктураДанныхЮрЛица.КлючСтроки = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").НовыйКлючОсновнойСтроки(
			ДляДокумента, "ДанныеЮрЛиц");
		
		СтруктураДанныхЮрЛица.КлючСтроки_ДокументыЭПД = СтруктураДокументаЭПД.КлючСтроки;
		
		ДляДокумента.ДанныеЮрЛиц.Добавить(СтруктураДанныхЮрЛица);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьТаблицуДокументовЭПД(ДокументыЭПД, МенеджерВременныхТаблиц)
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	ТипИндексаДокументаЭПД = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Любой));
	ТипДаты                = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ТипНомерНаименование   = МодульТНОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(255);
	
	Если ТипЗнч(ЗначениеМетаданных("Saby_ТипыДокумента.ПустаяСсылка")) = Тип("Строка") Тогда
		ТипТипаДокумента = МодульТНОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(50);
	Иначе
		ТипСсылка = "ПеречислениеСсылка.Saby_ТипыДокумента";
		ТипТипаДокумента = Новый ОписаниеТипов(ТипСсылка);
	КонецЕсли;
	
	ТаблицаДокументовЭПД = Новый ТаблицаЗначений;
	ТаблицаДокументовЭПД.Колонки.Добавить("Тип",                ТипТипаДокумента);
	ТаблицаДокументовЭПД.Колонки.Добавить("Номер",              ТипНомерНаименование);
	ТаблицаДокументовЭПД.Колонки.Добавить("Дата",               ТипДаты);
	ТаблицаДокументовЭПД.Колонки.Добавить("Наименование",       ТипНомерНаименование);
	ТаблицаДокументовЭПД.Колонки.Добавить("ИндексДокументаЭПД", ТипИндексаДокументаЭПД);
	
	Для ИндексДокументаЭПД = 0 По ДокументыЭПД.ВГраница() Цикл
		СтруктураДокументаЭПД = ДокументыЭПД[ИндексДокументаЭПД];
		Если ЗначениеЗаполнено(СтруктураДокументаЭПД.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДокументаЭПД = ТаблицаДокументовЭПД.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДокументаЭПД, СтруктураДокументаЭПД);
		СтрокаДокументаЭПД.ИндексДокументаЭПД = ИндексДокументаЭПД;
	КонецЦикла;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Номер КАК Номер,
	|	ТаблицаДокументов.Дата КАК Дата,
	|	ТаблицаДокументов.Тип КАК Тип,
	|	ТаблицаДокументов.ИндексДокументаЭПД КАК ИндексДокументаЭПД,
	|	ТаблицаДокументов.Наименование КАК Наименование
	|ПОМЕСТИТЬ ТаблицаДокументовЭПД
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов";
	
	ЗапросДанных.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументовЭПД);
	
	ЗапросДанных.Выполнить();
	
КонецПроцедуры

Функция ВыборкаСсылокНаДокументыЭПД(МенеджерВременныхТаблиц)
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокументовЭПД.ИндексДокументаЭПД КАК ИндексДокументаЭПД,
	|	МАКСИМУМ(ЕСТЬNULL(Saby_ДокументыЭПД.Ссылка, ЗНАЧЕНИЕ(Справочник.Saby_ДокументыЭПД.ПустаяСсылка))) КАК СсылкаНаДокументЭПД,
	|	МАКСИМУМ(НЕ Saby_ДокументыЭПД.Ссылка ЕСТЬ NULL) КАК ДокументНайденВБазе
	|ИЗ
	|	ТаблицаДокументовЭПД КАК ТаблицаДокументовЭПД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Saby_ДокументыЭПД КАК Saby_ДокументыЭПД
	|		ПО ТаблицаДокументовЭПД.Номер = Saby_ДокументыЭПД.Номер
	|			И ТаблицаДокументовЭПД.Дата = Saby_ДокументыЭПД.Дата
	|			И ТаблицаДокументовЭПД.Тип = Saby_ДокументыЭПД.Тип
	|			И ТаблицаДокументовЭПД.Наименование = Saby_ДокументыЭПД.Наименование
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументовЭПД.ИндексДокументаЭПД";	

	Возврат ЗапросДанных.Выполнить().Выбрать();
	
КонецФункции

Функция СсылкаНаНовыйДокументЭПД(СтруктураДокументаЭПД, ДанныеЮрЛиц)
	
	УстановитьПривилегированныйРежим(Истина);
		
	ОбъектДокументаЭПД = МодульКода("Справочники.Saby_ДокументыЭПД").СоздатьЭлемент();	
	ЗаполнитьЗначенияСвойств(ОбъектДокументаЭПД, СтруктураДокументаЭПД);
	
	ОтборСторон = Новый Структура("КлючСтроки_ДокументыЭПД", СтруктураДокументаЭПД.КлючСтроки);
	Стороны = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").НайтиСтрокиУниверсально(ДанныеЮрЛиц, ОтборСторон);
	Для Каждого Сторона Из Стороны Цикл
		СтрокаДанныхЮрЛица = ОбъектДокументаЭПД.ДанныеЮрЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныхЮрЛица, Сторона);
	КонецЦикла;
	
	ОбъектДокументаЭПД.Записать();
	
	Возврат ОбъектДокументаЭПД.Ссылка;
	
КонецФункции

Процедура УдалитьСтарыеПутевыеЛисты(ДокументыЭПД, ТипДокумента, ДляДокумента)
	
	Если ТипДокумента <> ЗначениеМетаданных("Saby_ТипыДокумента.ПутевойЛист") Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПутевыхЛистов = Новый Структура("Тип", ТипДокумента);
	НайденныеСтроки = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").НайтиСтрокиУниверсально(
		ДляДокумента.ДокументыЭПД, ОтборПутевыхЛистов);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = 0;
	Пока Индекс <= ДокументыЭПД.Количество() - 1 Цикл
		Если ДокументыЭПД[Индекс].Тип = ТипДокумента Тогда
			ДокументыЭПД.Удалить(Индекс);
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ДокументыЭПД

#Область ЗагрузкаДанныхЮрЛиц

Функция МассивПодстановокЮрЛиц(ПодстановкиЮрЛиц)
	
	РезультатФункции = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ПодстановкиЮрЛиц) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Если ТипЗнч(ПодстановкиЮрЛиц) = Тип("Массив") Тогда
		РезультатФункции = ПодстановкиЮрЛиц;
	Иначе
		РезультатФункции.Добавить(ПодстановкиЮрЛиц);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СтруктураДанныхЮрЛица(ДляДокумента, Роль, ДанныеЮрЛицаОнлайн, СтруктураДанныхЮрЛица = Неопределено)
	
	Если СтруктураДанныхЮрЛица = Неопределено Тогда
		РезультатФункции = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ШаблонДанныхЮрЛица();
	Иначе
		РезультатФункции = СтруктураДанныхЮрЛица;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЮрЛицаОнлайн) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	ЗаполнитьРеквизитыЮрЛица(Роль, РезультатФункции, ДанныеЮрЛицаОнлайн);
	
	ЗаполнитьКонтактныеДанныеЮрЛица(РезультатФункции, ДанныеЮрЛицаОнлайн["Контакты"]);
	
	ЗаполнитьОснованиеУполномоченногоЛица(ДляДокумента, РезультатФункции, ДанныеЮрЛицаОнлайн);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьРеквизитыЮрЛица(Роль, СтруктураДанныхЮрЛица, ДанныеЮрЛицаОнлайн)
	
	Реквизиты = ДанныеЮрЛицаОнлайн["Реквизиты"];
	Если Реквизиты = Неопределено Тогда
		Реквизиты = ДанныеЮрЛицаОнлайн;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Реквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	Заполнена = Ложь;
	Если ЗначениеЗаполнено(Реквизиты["ЮЛ"]) Тогда
		ЗаполнитьРеквизитыЮЛ(СтруктураДанныхЮрЛица, Реквизиты);
	ИначеЕсли ЗначениеЗаполнено(Реквизиты["ИП"]) Тогда
		ЗаполнитьРеквизитыИП(СтруктураДанныхЮрЛица, Реквизиты);
	ИначеЕсли ЗначениеЗаполнено(Реквизиты["ФЛ"]) Тогда
		ЗаполнитьРеквизитыФЛ(СтруктураДанныхЮрЛица, Реквизиты);
	ИначеЕсли ЗначениеЗаполнено(Реквизиты["ИностранноеЛицо"]) Тогда
		ЗаполнитьРеквизитыИностранногоЛица(СтруктураДанныхЮрЛица, Реквизиты);
		Заполнена = ЗначениеЗаполнено(СтруктураДанныхЮрЛица.НаименованиеОрганизации);
	ИначеЕсли ЗначениеЗаполнено(Реквизиты["ИНН"]) Тогда
		СтруктураДанныхЮрЛица.ИНН        = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ИНН", "");
		СтруктураДанныхЮрЛица.КодФилиала = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "КодФилиала", "");
	Иначе
		// Неизвестный узел данных, ничего не заполняем.
		СтруктураДанныхЮрЛица.ИНН = "";
	КонецЕсли;
	
	СтруктураДанныхЮрЛица.Заполнена = Заполнена Или ЗначениеЗаполнено(СтруктураДанныхЮрЛица.ИНН);
	
	// для разницы с во3... надо оставлять только роль строкой 
	// и делать дополнение только перед передачей обратно в форму
	ВсеРоли = МодульТНОбщегоНазначенияСервер.ВсеЗначенияПеречисления("Saby_РолиКонтрагентов", Истина);
	Если СтруктураДанныхЮрЛица.Заполнена Тогда
		
		СтруктураДанныхЮрЛица.Роль = Роль;
		СтруктураДанныхЮрЛица.Вставить("РольСтрокой", ВсеРоли[Роль]);
		
	КонецЕсли;
	
	ЗаполнитьРеквизитыАдресаЮрЛица(СтруктураДанныхЮрЛица, ДанныеЮрЛицаОнлайн);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыЮЛ(СтруктураДанныхЮрЛица, Реквизиты)
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	СтруктураДанныхЮрЛица.ЮрФизЛицо        = ЗначениеМетаданных("Saby_ЮрФизЛицо.ЮрЛицо");
	СтруктураДанныхЮрЛица.ЮрФизЛицоСтрокой = "ЮрЛицо";
	
	СтруктураДанныхЮрЛица.ИНН = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ЮЛ.ИНН", "");
	СтруктураДанныхЮрЛица.КПП = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ЮЛ.КПП", "");
	
	СтруктураДанныхЮрЛица.КодФилиала   = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ЮЛ.КодФилиала", "");
	
	НаименованиеОрганизации = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ЮЛ.Название");
	Если Не ЗначениеЗаполнено(НаименованиеОрганизации) Тогда
		НаименованиеОрганизации = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ЮЛ.Наименование");
	КонецЕсли;
	
	Если ТипЗнч(НаименованиеОрганизации) = Тип("Соответствие") Тогда
		НаименованиеОрганизации = НаименованиеОрганизации["Полное"];
	КонецЕсли;
	
	СтруктураДанныхЮрЛица.НаименованиеОрганизации = НаименованиеОрганизации;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыФЛ(СтруктураДанныхЮрЛица, Реквизиты)
	
	СтруктураДанныхЮрЛица.ЮрФизЛицо        = ЗначениеМетаданных("Saby_ЮрФизЛицо.ФизЛицо");
	СтруктураДанныхЮрЛица.ЮрФизЛицоСтрокой = "ФизЛицо";
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	СтруктураДанныхЮрЛица.ИНН        = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ФЛ.ИНН", "");
	СтруктураДанныхЮрЛица.КодФилиала = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ФЛ.КодФилиала", "");
	
	СтруктураФИО = СтруктураФИО(Реквизиты["ФЛ"]);
	ФИОСтрокой = ЗначениеВСтрокуВнутр(СтруктураФИО);
	
	СтруктураДанныхЮрЛица.НаименованиеОрганизации = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ПредставлениеФИО(
		СтруктураФИО);
	
	СтруктураДанныхЮрЛица.СтруктураФИО = ФИОСтрокой;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыИП(СтруктураДанныхЮрЛица, Реквизиты)
	
	СтруктураДанныхЮрЛица.ЮрФизЛицо        = ЗначениеМетаданных("Saby_ЮрФизЛицо.ИндивидуальныйПредприниматель");
	СтруктураДанныхЮрЛица.ЮрФизЛицоСтрокой = "ИндивидуальныйПредприниматель";
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	СтруктураДанныхЮрЛица.ИНН        = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ИП.ИНН", "");
	СтруктураДанныхЮрЛица.ОГРН       = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ИП.ОГРН", "");
	СтруктураДанныхЮрЛица.КодФилиала = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ИП.КодФилиала", "");
	
	СтруктураФИО = СтруктураФИО(Реквизиты["ИП"]);
	ФИОСтрокой   = ЗначениеВСтрокуВнутр(СтруктураФИО);
	
	СтруктураДанныхЮрЛица.НаименованиеОрганизации = "ИП " + МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ПредставлениеФИО(
		СтруктураФИО);
	
	СтруктураДанныхЮрЛица.СтруктураФИО = ФИОСтрокой;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыИностранногоЛица(СтруктураДанныхЮрЛица, Реквизиты)
	
	СтруктураДанныхЮрЛица.ЮрФизЛицо        = ЗначениеМетаданных("Saby_ЮрФизЛицо.ЮрЛицоНеРезидент");
	СтруктураДанныхЮрЛица.ЮрФизЛицоСтрокой = "ЮрЛицоНеРезидент";
	
	СтруктураДанныхЮрЛица.НаименованиеОрганизации = МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеСоответствия(
		Реквизиты, "ИностранноеЛицо.Наименование", "");
	
	Страна = МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеСоответствия(Реквизиты, "ИностранноеЛицо.Страна");
	Если ЗначениеЗаполнено(Страна) Тогда 
		СтруктураДанныхЮрЛица.СтранаРегистрации = СокрЛП(Страна);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыАдресаЮрЛица(СтруктураДанныхЮрЛица, ДанныеЮрЛицаОнлайн)
	
	ЮрАдрес = МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеСоответствия(ДанныеЮрЛицаОнлайн, "Адрес.Юридический");
	Если Не ЗначениеЗаполнено(ЮрАдрес) Тогда
		ЮрАдрес = МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеСоответствия(ДанныеЮрЛицаОнлайн, "Адрес");
    КонецЕсли;
		
	СтруктураАдрес = ПреобразоватьСтруктуруАдреса(ЮрАдрес);
	Если ЗначениеЗаполнено(СтруктураАдрес) Тогда
		СтруктураДанныхЮрЛица.Адрес          = СтруктураАдрес.АдресСтрокой;
		СтруктураДанныхЮрЛица.АдресСтруктура = СтруктураАдрес.АдресСтруктурой;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОснованиеУполномоченногоЛица(ДляДокумента, СтруктураДанныхЮрЛица, ДанныеЮрЛицаОнлайн)
	
	Основание = ДанныеЮрЛицаОнлайн["Документ"];
	Если Не ЗначениеЗаполнено(Основание) Или Не ЗначениеЗаполнено(Основание["Дата"]) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхЮрЛица.Основание = СсылкаНаДокументЭПД(
		ДляДокумента, Основание, ЗначениеМетаданных("Saby_ТипыДокумента.УполномоченныйНаОсновании"));
	
	СтруктураДанныхЮрЛица.Полномочия = ДанныеЮрЛицаОнлайн["Полномочия"];
	
КонецПроцедуры

Функция ПредставлениеАдресаИзСоответствия(Соответствие)
	
	Структура = Новый Структура;
	Для Каждого Элемент Из Соответствие Цикл 
		Структура.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
		
	Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(Структура);
	
	Возврат Представление;
	
КонецФункции

Процедура УдалитьСвязаннуюСЮрЛицомИнформацию(ДанныеСОнлайна, ДанныеДокумента, Роль)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Роль);
	
	СтрокиДляУдаления = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").НайтиСтрокиУниверсально(ДанныеДокумента, Отбор);
	УдалитьСтрокиТаблицыИзМассива(ДанныеДокумента, СтрокиДляУдаления);
		
КонецПроцедуры

Функция НеобходимоУдалитьСвязаннуюСЮрЛицомИнформацию(ДанныеЮрЛиц, Роль, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		РезультатФункции = Роль <> ЗначениеМетаданных("Saby_РолиКонтрагентов.СторонаДокумента")
			Или ДопПараметры.ЭтоПервыйТитул;
	Иначе
		РезультатФункции = ДопПараметры.ЭтоПервоеОснование;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ЗагрузкаДанныхЮрЛиц

#Область Валюта

Функция ВалютаПоДаннымОнлайна(ДанныеГруз, ЗагрузкаСОнлайна, Знач ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	КодВалютыРубль = "643";
	
	Если ЗначениеПоУмолчанию = Неопределено Тогда
		ЗначениеПоУмолчанию = ВалютаПоКоду(КодВалютыРубль);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеГруз["Стоимость"]) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
			
	Валюта = МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеСоответствия(ДанныеГруз, "Стоимость.Валюта");
	Если ЗначениеЗаполнено(Валюта) Тогда
		
		КодВалюты = Валюта["Код"];
		
		Если ЗагрузкаСОнлайна 
			Или Не ЗагрузкаСОнлайна 
			И ЗначениеЗаполнено(КодВалюты) Тогда
			
			Возврат ВалютаПоКоду(КодВалюты);
			
		КонецЕсли;
	КонецЕсли;
	
    Возврат ЗначениеПоУмолчанию;
	
КонецФункции

Функция ВалютаПоКоду(Код)
	
	РезультатФункции = ЗначениеМетаданных("Валюты.ПустаяСсылка", "Справочник");
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Валюта.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюта
	|ГДЕ
	|	Валюта.Код = &Код";
	
	ЗапросДанных.УстановитьПараметр("Код", Код);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		РезультатФункции = ВыборкаДанных.Ссылка;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаСправочников

Функция СтруктураВидаУпаковки(Код)
	
	Если Не ЗначениеЗаполнено(Код) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВидаУпаковки = МодульКода("Справочники.Saby_ВидыУпаковки").ШаблонСтруктурыВидаУпаковки();
	СтруктураВидаУпаковки.Код          = Код;
	СтруктураВидаУпаковки.Наименование = Код;
	
	МодульКода("Справочники.Saby_ВидыУпаковки").ЗаполнитьВидУпаковки(СтруктураВидаУпаковки);
	
	Возврат СтруктураВидаУпаковки;
	
КонецФункции

Процедура ДобавитьНовыеВидыУпаковки(ДляДокумента, Результат)
	
	Если Результат = Неопределено
		Или Не МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ЕстьРеквизитИлиСвойство(ДляДокумента, "ВидыУпаковки") Тогда
		Возврат;
	КонецЕсли;
	
	МассивВидовУпаковки = ДляДокумента["ВидыУпаковки"];
	
	Если Не ЗначениеЗаполнено(МассивВидовУпаковки) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтруктураВидаУпаковки Из МассивВидовУпаковки Цикл
		Если СтруктураВидаУпаковки.Новый Тогда
			Результат.НовыеВидыУпаковки.Добавить(СтруктураВидаУпаковки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураОпасногоГруза(СтрокаОпасн)
	
	Если Не ЗначениеЗаполнено(СтрокаОпасн) 
		Или Не ЗначениеЗаполнено(СтрокаОпасн["Наименование"]) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОпасногоГруза = МодульКода("Справочники.Saby_ОпасныеГрузы").ШаблонСтруктурыОпасногоГруза();
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	СтруктураОпасногоГруза.Наименование = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "Наименование.Отгрузочное", "");
	СтруктураОпасногоГруза.ПолноеНаименование = СтруктураОпасногоГруза.Наименование;
	СтруктураОпасногоГруза.ТехническоеНаименование = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "Наименование.Техническое", "");
		
	СтруктураОпасногоГруза.Класс = МодульКода("Перечисления.Saby_КлассыОпасностиГрузов").КлассОпасностиГрузаПоКоду(
		СтрокаОпасн["Класс"]);
	
	СтруктураОпасногоГруза.ГруппаУпаковки = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "Упаковка.Группа", "");
	СтруктураОпасногоГруза.КатегорияУпаковки = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "Упаковка.Категория", "");
	СтруктураОпасногоГруза.ГруппаУпаковкиЗначение = МодульКода("Перечисления.Saby_ГруппыУпаковки").ГруппаУпаковкиПоКоду(
		СтруктураОпасногоГруза.ГруппаУпаковки);
	
	СтруктураОпасногоГруза.КонтрольнаяТемпература = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "Температура.Контрольная", "");
	СтруктураОпасногоГруза.АварийнаяТемпература = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "Температура.Аварийная", "");
		
	СтруктураОпасногоГруза.НазваниеРадионуклида = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "Радиоактивный.Радионуклид", "");
	СтруктураОпасногоГруза.ПолнаяАктивность = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "Радиоактивный.ПолнаяАктивность", "");
	СтруктураОпасногоГруза.МаксАктивность = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "Радиоактивный.МаксАктивность", "");
	
	СтруктураОпасногоГруза.МассаНеттоВзрывчатый = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "Взрывчатый.МассаНетто", "");
	СтруктураОпасногоГруза.МассаНеттоВзрывчатыйВсего = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "Взрывчатый.МассаНеттоДляВсех", "");
	
	ЗаполнитьОбщиеПараметрыОпасногоГруза(СтруктураОпасногоГруза, СтрокаОпасн);
	
	МодульКода("Справочники.Saby_ОпасныеГрузы").ЗаполнитьОпасныйГруз(СтруктураОпасногоГруза);
	
	Возврат СтруктураОпасногоГруза;
	
КонецФункции

Функция СтруктураОпасногоГруза_ЗаказНаПеревозку(СтрокаОпасн) Экспорт
	
	СтруктураОпасногоГруза = МодульКода("Справочники.Saby_ОпасныеГрузы").ШаблонСтруктурыОпасногоГруза();
	
	Если Не ЗначениеЗаполнено(СтрокаОпасн)
		Или Не ЗначениеЗаполнено(СтрокаОпасн["НаименованиеОтгрузочное"]) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	СтруктураОпасногоГруза.Наименование = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "НаименованиеОтгрузочное", "");
	СтруктураОпасногоГруза.ПолноеНаименование = СтруктураОпасногоГруза.Наименование;
	СтруктураОпасногоГруза.ТехническоеНаименование = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "НаименованиеТехническое", "");
	
	СтруктураОпасногоГруза.Класс = МодульКода("Перечисления.Saby_КлассыОпасностиГрузов").КлассОпасностиГрузаПоКоду(
		СтрокаОпасн["Класс"]);
	
	СтруктураОпасногоГруза.ГруппаУпаковки = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "УпаковкаГруппа", "");
	СтруктураОпасногоГруза.КатегорияУпаковки = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "УпаковкаКатегория", "");
	СтруктураОпасногоГруза.ГруппаУпаковкиЗначение = МодульКода("Перечисления.Saby_ГруппыУпаковки").ГруппаУпаковкиПоКоду(
		СтруктураОпасногоГруза.ГруппаУпаковки);
	
	СтруктураОпасногоГруза.КонтрольнаяТемпература = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "ТемператураКонтрольная", "");
	СтруктураОпасногоГруза.АварийнаяТемпература = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "ТемператураАварийная", "");
	
	СтруктураОпасногоГруза.НазваниеРадионуклида = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "РадиоактивныйРадионуклид", "");
	СтруктураОпасногоГруза.ПолнаяАктивность = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "РадиоактивныйПолнаяАктивность", "");
	СтруктураОпасногоГруза.МаксАктивность = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "РадиоактивныйМаксАктивность", "");
	
	СтруктураОпасногоГруза.МассаНеттоВзрывчатый = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "ВзрывчатыйМассаНетто", "");
	СтруктураОпасногоГруза.МассаНеттоВзрывчатыйВсего = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "ВзрывчатыйМассаНеттоДляВсех", "");
	
	ЗаполнитьОбщиеПараметрыОпасногоГруза(СтруктураОпасногоГруза, СтрокаОпасн);
	
	МодульКода("Справочники.Saby_ОпасныеГрузы").ЗаполнитьОпасныйГруз(СтруктураОпасногоГруза);
	
	Возврат СтруктураОпасногоГруза;
	
КонецФункции

Процедура ЗаполнитьОбщиеПараметрыОпасногоГруза(СтруктураОпасногоГруза, СтрокаОпасн)
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	СтруктураОпасногоГруза.НомерООН = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "НомерООН", "");
	СтруктураОпасногоГруза.ФизИХимФорма = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "ФизХимФорма", "");
	СтруктураОпасногоГруза.ТранспортныйИндекс = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "ТранспортныйИндекс", "");
	СтруктураОпасногоГруза.ЗнакОпасности = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "ЗнакОпасности", "");
	СтруктураОпасногоГруза.ИндексБезопасности = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "ИндексБезопасности", "");
	СтруктураОпасногоГруза.ОпознавательныйЗнак = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "ОпознавательныйЗнак", "");
	СтруктураОпасногоГруза.ПроцентСмеси = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "ПроцентныйСоставСмеси", "");
	СтруктураОпасногоГруза.Комментарий = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "Описание", "");
	СтруктураОпасногоГруза.КлассификационныйКод = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "КлассификационныйКод", "");
	
	КодОграниченияПроездТуннеля = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		СтрокаОпасн, "КодОграниченияПроездТуннеля", "");
	МодульПеречисленияОграничений = МодульКода("Перечисления.Saby_КодыОграниченийПроездаЧерезТуннели");
	СтруктураОпасногоГруза.ОграничениеПроездаЧерезТуннели = МодульПеречисленияОграничений.ОграничениеПроездаПоКоду(
		КодОграниченияПроездТуннеля);
	
	СтруктураОпасногоГруза.ДатаИстеченияУдержания = МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(
		СтрокаОпасн["ДатаИстеченияУдержания"]);
	
КонецПроцедуры

Процедура ДобавитьНовыеОпасныеГрузы(ДляДокумента, Результат)
	
	Если Результат = Неопределено
		Или Не МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ЕстьРеквизитИлиСвойство(ДляДокумента, "ОпасныеГрузы") Тогда
		Возврат;
	КонецЕсли;
	
	МассивОпасныхГрузов = ДляДокумента["ОпасныеГрузы"];
	
	Если Не ЗначениеЗаполнено(МассивОпасныхГрузов) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтруктураОпасногоГруза Из МассивОпасныхГрузов Цикл
		Если СтруктураОпасногоГруза.Новый Тогда
			Результат.НовыеОпасныеГрузы.Добавить(СтруктураОпасногоГруза);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаГруза

Процедура ЗагрузитьПараметрыГруза(СтруктураГруза, ПараметрыГруза)
	
	Если Не ЗначениеЗаполнено(ПараметрыГруза) Тогда
		Возврат;
	КонецЕсли;
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	КоличествоПаллет = МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(ПараметрыГруза["КоличествоПаллет"]);
	КоличествоМест   = МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(ПараметрыГруза["КоличествоМест"]);
	
	МассаБрутто = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ПараметрыГруза, "Масса.Брутто");
	МассаБрутто = МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(МассаБрутто);
	МассаНетто  = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ПараметрыГруза, "Масса.Нетто");
	МассаНетто  = МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(МассаНетто);
	
	СтруктураГруза.Вставить("КоличествоПаллет", КоличествоПаллет);
	СтруктураГруза.Вставить("Количество",       КоличествоМест);
	СтруктураГруза.Вставить("МассаБрутто",      МассаБрутто);
	СтруктураГруза.Вставить("МассаНетто",       МассаНетто);
	СтруктураГруза.Вставить("Длина",            МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(ПараметрыГруза["Длина"]));
	СтруктураГруза.Вставить("Высота",           МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(ПараметрыГруза["Высота"]));
	СтруктураГруза.Вставить("Ширина",           МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(ПараметрыГруза["Ширина"]));
	СтруктураГруза.Вставить("Объем",            МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(ПараметрыГруза["Объем"]));
	СтруктураГруза.Вставить("Плотность",        МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(ПараметрыГруза["Плотность"]));
	
КонецПроцедуры

Процедура ЗагрузитьКонтейнеры(Контейнеры, ДляДокумента, КлючСтроки_Грузы)
	
	Если Не ЗначениеЗаполнено(Контейнеры) Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Контейнер Из Контейнеры Цикл
		КоличествоКонтейнеров = Контейнер["Количество"];
		Для Каждого СтрокаКонт Из Контейнер["Номер"] Цикл
			
			СтруктураКонтейнера = Новый Структура;
			СтруктураКонтейнера.Вставить("Номер",            СтрокаКонт["Значение"]);
			СтруктураКонтейнера.Вставить("КлючСтроки_Грузы", КлючСтроки_Грузы);
			СтруктураКонтейнера.Вставить("Количество",       1);
			
			Если ЗначениеЗаполнено(КоличествоКонтейнеров) Тогда 
				СтруктураКонтейнера.Количество = МодульКода("Saby_ТНОбщегоНазначенияСервер").ЧислоИзСтроки(КоличествоКонтейнеров);
			КонецЕсли;
			
			ДляДокумента.Контейнеры.Добавить(СтруктураКонтейнера);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьМаркировки(Маркировка, ДляДокумента, КлючСтроки_Грузы)
	
	Если Не ЗначениеЗаполнено(Маркировка) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаМарк Из Маркировка Цикл
		
		СтруктураМаркировка = Новый Структура;
		СтруктураМаркировка.Вставить("Значение",         СтрокаМарк["Значение"]);
		СтруктураМаркировка.Вставить("КлючСтроки_Грузы", КлючСтроки_Грузы);
		ДляДокумента.Маркировки.Добавить(СтруктураМаркировка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьОпасныеГрузы(ОпасныйГруз, ДляДокумента, КлючСтроки_Грузы)
	
	Если Не ЗначениеЗаполнено(ОпасныйГруз) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОпасн Из ОпасныйГруз Цикл
		
		СтруктураОпасногоГруза = СтруктураОпасногоГруза(СтрокаОпасн);
		Если СтруктураОпасногоГруза = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОпасногоГруза.КлючСтроки_Грузы = КлючСтроки_Грузы;
		
		ДляДокумента.ОпасныеГрузы.Добавить(СтруктураОпасногоГруза);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьСведенияГИС(СведенияГИС, ДляДокумента, СтруктураГруза, КлючСтроки_Грузы)
	
	Если Не ЗначениеЗаполнено(СведенияГИС) Тогда  
		Возврат;
	КонецЕсли;
	
	СтруктураГруза.Вставить("НаименованиеГосСистемы",   СведенияГИС["Наименование"]);
	СтруктураГруза.Вставить("УчетнаяЕдиницаГосСистемы", СведенияГИС["УчетнаяЕдиница"]);
	СтруктураГруза.Вставить("ИнаяИнформацияГосСистемы", СведенияГИС["ДругаяИнформация"]);
	
	Для Каждого СтрокаГос Из СведенияГИС["Идентификатор"] Цикл
		
		СтруктураГосСистемы = Новый Структура;
		СтруктураГосСистемы.Вставить("КлючСтроки_Грузы", КлючСтроки_Грузы);
		СтруктураГосСистемы.Вставить("Идентификатор",    СтрокаГос["Значение"]);
		
		ДляДокумента.СведенияГосСистем.Добавить(СтруктураГосСистемы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеГруза_ТранспортнаяНакладная(Груз, СтруктураГруза, ДляДокумента,
		КлючСтроки_Грузы, ЗагрузкаСОнлайна)
	
	Контейнеры = Груз["Контейнер"];
	Если ЗначениеЗаполнено(Контейнеры) Тогда
		ТипГруза = ЗначениеМетаданных("Saby_ТипГруза.Контейнер");
	Иначе
		ТипГруза = ЗначениеМетаданных("Saby_ТипГруза.Груз");
	КонецЕсли;
	
	СтруктураГруза.Вставить("Тип", ТипГруза);
	
	ЗагрузитьКонтейнеры(Контейнеры, ДляДокумента, КлючСтроки_Грузы);
	
	ЗагрузитьМаркировки(Груз["Маркировка"], ДляДокумента, КлючСтроки_Грузы);
	
	ЗагрузитьОпасныеГрузы(Груз["ОпасныйГруз"], ДляДокумента, КлючСтроки_Грузы);
	
	ЗагрузитьСведенияГИС(Груз["СведенияГИС"], ДляДокумента, СтруктураГруза, КлючСтроки_Грузы);
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	Стоимость = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Груз, "Стоимость.ВключаяНДС");
	Стоимость = ?(ЗначениеЗаполнено(Стоимость), МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(Стоимость), 0);
	СтруктураГруза.Вставить("Стоимость", Стоимость);
	
	СтруктураГруза.Вставить("Валюта", ВалютаПоДаннымОнлайна(Груз, ЗагрузкаСОнлайна));
	
КонецПроцедуры

Процедура ЗагрузитьДанныеГруза_ЗаказНаПеревозку(ДляДокумента, Груз, СтруктураГруза)
	
	ЭтоКонтейнер = ?(ЗначениеЗаполнено(Груз["ГруженностьКонтейнера"]), Истина, Ложь);
	Если ЭтоКонтейнер Тогда
		ТипГруза = ЗначениеМетаданных("Saby_ТипГруза.Контейнер");
	Иначе
		ТипГруза = ЗначениеМетаданных("Saby_ТипГруза.Груз");
	КонецЕсли;
	
	РаспределениеПоДлине = ?(Груз["РаспределениеПоДлинеПлатформы"] = "0", Истина, Ложь);
	Делимость            = ?(Груз["Делимость"] = "1",                     Истина, Ложь);
	ПогрузкаВодителем    = ?(Груз["ПогрузкаВодителем"] = "0",             Истина, Ложь);
	
	СтруктураГруза.Вставить("Тип",                           ТипГруза);
	СтруктураГруза.Вставить("РаспределениеПоДлинеПлатформы", РаспределениеПоДлине);
	СтруктураГруза.Вставить("Делимость",                     Делимость);
	СтруктураГруза.Вставить("ПогрузкаВодителем",             ПогрузкаВодителем);
	
	СтруктураГруза.Вставить(
		"МетодОпределенияМассы",
		МодульКода("Перечисления.Saby_МетодОпределенияМассы").МетодОпределенияМассыПоКоду(Груз["МетодОпределенияМассы"]));
		
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	ОпасныйГруз = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Груз, "ОпасныйГруз");
	
	// пока нет единого формата по ОГ - загружаем отдельным алгоритмом
	СтруктураОпасногоГруза = СтруктураОпасногоГруза_ЗаказНаПеревозку(ОпасныйГруз);
	Если СтруктураОпасногоГруза <> Неопределено Тогда
		СтруктураГруза.Вставить("ОпасныйГруз", СтруктураОпасногоГруза.ОпасныйГруз);
	КонецЕсли;
	
	// Заказчик и договор
	Заказчик = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Груз, "Заказчик");
	Договор  = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Груз, "Договор");
	
	Если ЗначениеЗаполнено(Заказчик) Тогда
		
		ДанныеЗаказчика = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ШаблонДанныхЮрЛица();
		ЗагрузитьДанныеЮрЛиц(ДляДокумента, Заказчик, "Заказчик", ДанныеЗаказчика);
		
		СтруктураГруза.Вставить("ЗаказчикСтрока",         ДанныеЗаказчика.НаименованиеОрганизации);
		СтруктураГруза.Вставить("КлючСтроки_ДанныеЮрЛиц", ДанныеЗаказчика.КлючСтроки);
		
		Если ЗначениеЗаполнено(Договор) И ЗначениеЗаполнено(Договор["Номер"]) Тогда
			СсылкаНаДоговор = СсылкаНаДокументЭПД(ДляДокумента, Договор, ЗначениеМетаданных("Saby_ТипыДокумента.ДоговорПеревозки"));
			СтруктураГруза.Вставить("Договор", СсылкаНаДоговор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьТаблицуГрузов(ОбъектДок, ИмяТаблицы, ДопПараметры)
	
	Если ДопПараметры <> Неопределено И Не ДопПараметры.ЭтоПервоеОснование Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектДок[ИмяТаблицы]) = Тип("Массив") Тогда
		ОбъектДок[ИмяТаблицы] = Новый Массив;
	Иначе
		ОбъектДок[ИмяТаблицы].Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНоменклатуруСтроки(ОбъектДок, СтруктураСтрокиТаблицы, ДопПараметры)
	
	Если ДопПараметры = Неопределено Или ДопПараметры.ЗагрузкаСОнлайна Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураСтрокиТаблицы.Номенклатура <> Неопределено Тогда
		ДопПараметры.НоменклатураГруза.Вставить(ОбъектДок.Грузы.Количество() - 1, СтруктураСтрокиТаблицы.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаГруза

Процедура УдалитьСтрокиТаблицыИзМассива(ТаблицаДляУдаления, МассивСтрокДляУдаления)
	
	ЭтоМассив = ТипЗнч(ТаблицаДляУдаления) = Тип("Массив");
	
	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		Если ЭтоМассив Тогда
			ИндексЗаписи = ТаблицаДляУдаления.Найти(СтрокаДляУдаления);
			ТаблицаДляУдаления.Удалить(ИндексЗаписи);
		Иначе
			ТаблицаДляУдаления.Удалить(СтрокаДляУдаления);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчисткаОтветственныхЛицПоРоли(ОбъектДок, РольОтветственного, ЭтоВодитель, ЕстьПутевыеЛисты)
	
	МодульТНКлиентСервер = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	ОтборОтветственных = Новый Структура;
	ОтборОтветственных.Вставить("Роль", РольОтветственного);
	МассивСтрокДляУдаления = МодульТНКлиентСервер.НайтиСтрокиУниверсально(
		ОбъектДок.ОтветственныеЛица, ОтборОтветственных);
	
	УдалитьСтрокиТаблицыИзМассива(ОбъектДок.ОтветственныеЛица, МассивСтрокДляУдаления);
	
	Если ЭтоВодитель И ЕстьПутевыеЛисты Тогда
		ОбъектДок.ПутевыеЛисты.Очистить();
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область include_etrn_base_InformationRegister_ДанныеТитулов_ПолучениеДанныхТитулов
#КонецОбласти // include_etrn_base_InformationRegister_ДанныеТитулов_ПолучениеДанныхТитулов

#Область include_etrn_base_CommonModule_ОпределениеМодуляКода
#КонецОбласти // include_etrn_base_CommonModule_ОпределениеМодуляКода

#Область include_etrn_base_CommonModule_ЗначениеМетаданных
#КонецОбласти // include_etrn_base_CommonModule_ЗначениеМетаданных

#Область include_etrn_base_CommonModule_ОбъектОбработки
#КонецОбласти // include_etrn_base_CommonModule_ОбъектОбработки

