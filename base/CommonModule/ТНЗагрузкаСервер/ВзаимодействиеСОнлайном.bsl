
//DynamicDirective
// Получает дату из подстановок указанного титула, полученного с онлайна.
//
// Параметры:
//  ДанныеТитула - Соответствие - значение подстановок с онлайна.
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЗнП - титул, для которого получаем дату.
//  СтруктураВложения - Структура - структура данных вложения.
//
// Возвращаемое значение:
//   Дата - значение даты
//
Функция ДатаВложения(ДанныеТитула, Титул, СтруктураВложения = Неопределено) Экспорт
	
	ИмяФункцииПреобразованияДаты = "Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД";
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	Если ДанныеТитула["ДатаВложенияТитула"] <> Неопределено Тогда
		
		РезультатФункции = ДанныеТитула["ДатаВложенияТитула"];
		
	ИначеЕсли СтруктураВложения <> Неопределено Тогда
		
		РезультатФункции = ВыполнитьНаСервере(ИмяФункцииПреобразованияДаты, СтруктураВложения["ДатаВремя"]);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.Погрузка") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(ДанныеТитула, "1110339.Файл.Документ.ДатИнфГО", "");
		ДатаСтрокой = ДатаСтрокой + " ";
		ДатаСтрокой = ДатаСтрокой + МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(
			ДанныеТитула, "1110339.Файл.Документ.ВрИнфГО", "");
		
		РезультатФункции = ВыполнитьНаСервере(ИмяФункцииПреобразованияДаты, ДатаСтрокой);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПолучениеГруза") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(
			ДанныеТитула, "1110340.Файл.Документ.ДатИнфПрвПрием", "");
		ДатаСтрокой = ДатаСтрокой + " ";
		ДатаСтрокой = ДатаСтрокой + МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(
			ДанныеТитула, "1110340.Файл.Документ.ВрИнфПрвПрием", "");
		
		РезультатФункции = ВыполнитьНаСервере(ИмяФункцииПреобразованияДаты, ДатаСтрокой);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПриемкаГруза") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(ДанныеТитула, "1110341.Файл.Документ.ДатИнфГП", "");
		ДатаСтрокой = ДатаСтрокой + " ";
		ДатаСтрокой = ДатаСтрокой + МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(
			ДанныеТитула, "1110341.Файл.Документ.ВрИнфГП", "");
		
		РезультатФункции = ВыполнитьНаСервере(ИмяФункцииПреобразованияДаты, ДатаСтрокой);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ВыдачаГруза") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(
			ДанныеТитула, "1110342.Файл.Документ.ДатИнфПрвВыд", "");
		ДатаСтрокой = ДатаСтрокой + " ";
		ДатаСтрокой = ДатаСтрокой + МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(
			ДанныеТитула, "1110342.Файл.Документ.ВрИнфПрвВыд", "");
		
		РезультатФункции = ВыполнитьНаСервере(ИмяФункцииПреобразованияДаты, ДатаСтрокой);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.Переадресовка") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(
			ДанныеТитула, "1110343.Файл.Документ.ДатаИнфПА", "");
		ДатаСтрокой = ДатаСтрокой + " ";
		ДатаСтрокой = ДатаСтрокой + МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(
			ДанныеТитула, "1110343.Файл.Документ.ВрИнфПА", "");
		
		РезультатФункции = ВыполнитьНаСервере(ИмяФункцииПреобразованияДаты, ДатаСтрокой);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПереадресовкаУведомление") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(
			ДанныеТитула, "1167009.Файл.Документ.ДатаУвПА", "");
		ДатаСтрокой = ДатаСтрокой + " ";
		ДатаСтрокой = ДатаСтрокой + МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(
			ДанныеТитула, "1167009.Файл.Документ.ВрУвПА", "");
		
		РезультатФункции = ВыполнитьНаСервере(ИмяФункцииПреобразованияДаты, ДатаСтрокой);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ЗаменаВодителяТС") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(
			ДанныеТитула, "1110344.Файл.Документ.ДатИнфЗамен", "");
		ДатаСтрокой = ДатаСтрокой + " ";
		ДатаСтрокой = ДатаСтрокой + МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(
			ДанныеТитула, "1110344.Файл.Документ.ВрИнфЗамен", "");
		
		РезультатФункции = ВыполнитьНаСервере(ИмяФункцииПреобразованияДаты, ДатаСтрокой);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.СогласованиеСтоимости") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(
			ДанныеТитула, "1110346.Файл.Документ.ДатПУДИнфГО", "");
		ДатаСтрокой = ДатаСтрокой + " ";
		ДатаСтрокой = ДатаСтрокой + МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(
			ДанныеТитула, "1110346.Файл.Документ.ВрПУДИнфГО", "");
		
		РезультатФункции = ВыполнитьНаСервере(ИмяФункцииПреобразованияДаты, ДатаСтрокой);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ИзменениеСтоимости") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(
			ДанныеТитула, "1110345.Файл.Документ.ДатПУДИнфПрв", "");
		ДатаСтрокой = ДатаСтрокой + " ";
		ДатаСтрокой = ДатаСтрокой + МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(
			ДанныеТитула, "1110345.Файл.Документ.ВрПУДИнфПрв", "");
		
		РезультатФункции = ВыполнитьНаСервере(ИмяФункцииПреобразованияДаты, ДатаСтрокой);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.УведомлениеОУточнении") Тогда
		
		ДатаСтрокой = МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(
			ДанныеТитула, "Документ.Данные.ДатаПол", "");
		ДатаСтрокой = ДатаСтрокой + " ";
		ДатаСтрокой = ДатаСтрокой + МодульТНОбщегоНазначенияКлиентСервер.ДанныеСоответствия(
			ДанныеТитула, "Документ.Данные.ВремяПол", "");
		
		РезультатФункции = ВыполнитьНаСервере(ИмяФункцииПреобразованияДаты, ДатаСтрокой);
		
	Иначе
		
		РезультатФункции = Неопределено;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective
// Получает идентификатор из подстановок указанного титула, полученного с онлайна.
//
// Параметры:
//  ДанныеТитула - Соответствие - значение подстановок с онлайна.
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЗнП - титул, для которого получаем дату.
//  СтруктураВложения - Структура - структура данных вложения.
//
// Возвращаемое значение:
//  Строка - идентификатор титула
//
Функция ИдентификаторВложения(ДанныеТитула, Титул, СтруктураВложения = Неопределено) Экспорт
	
	ПредставленияТитула = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов",
		"Saby_ТранспортнаяНакладная", "ПредставленияТитула", Титул);
	
	Если ДанныеТитула["ИдентификаторВложенияТитула"] <> Неопределено Тогда
		ИдФайл = ДанныеТитула["ИдентификаторВложенияТитула"];
	ИначеЕсли СтруктураВложения <> Неопределено Тогда
		ИдФайл = СтруктураВложения["Идентификатор"];
	ИначеЕсли ПредставленияТитула.КодТитула = "1115113" Тогда
		ИдФайл = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ДанныеСоответствия(
			ДанныеТитула, "Документ.Данные.ИдФайл", "");
	ИначеЕсли ПредставленияТитула.КодТитула <> "" Тогда
		ИдФайл = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ДанныеСоответствия(
			ДанныеТитула[ПредставленияТитула.КодТитула], "Файл.ИдФайл", "");
	Иначе
		ИдФайл = "";
	КонецЕсли;
	
	РезультатФункции = Прав(ИдФайл, 36);
	
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective

Процедура ДанныеДокументаИзСБИС(ПараметрыЗагрузки, ОбщиеПараметрыЗагрузки, Результат) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыЗагрузки.ДанныеДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Ошибки = Неопределено;
	
	Если ТипЗнч(ПараметрыЗагрузки.Ссылка) = Тип("Структура") Тогда
		ИДСбис = ПараметрыЗагрузки.Ссылка.Идентификатор;
	Иначе
		Данные = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ДанныеСостоянияОбъекта", ПараметрыЗагрузки.Ссылка);
		Если Данные <> Неопределено Тогда 
			ИДСбис = Данные.UID;
		Иначе 
			ИДСбис = "";
		КонецЕсли;
	КонецЕсли;
	
	// документа нет в сбис. данные не загрузить
	Если Не ЗначениеЗаполнено(ИДСбис) Тогда 
		ТекстОшибки = "У документа нет идентификатора Сбис, обновление данных не возможно!";
		Ошибки = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю", Ошибки, Неопределено, ТекстОшибки);
		Ошибки.Вставить("ИмяМетаданных", ПараметрыЗагрузки.ИмяМетаданных);
		КлючСоответствия = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").КлючСсылка(ПараметрыЗагрузки.Ссылка);
		Результат.Ошибки.Вставить(КлючСоответствия, Ошибки); 
		Возврат;
	КонецЕсли;
	
	ПараметрыМетодаЗагрузки = Новый Структура;
	ПараметрыМетодаЗагрузки.Вставить("Идентификатор", ИДСбис);
	ПараметрыМетодаЗагрузки.Вставить("ДопПоля",       "ДопДействия,ТекущиеЭтапы,Подстановки,Расширение");
	
	// Стороны - обогащают посдстановки данными по ответсвенным МО, ТО, выезд и заезд
	// ЗаменаВодителя - обогащает данные ид замены водителя - основания и документа замены
	Если ПараметрыЗагрузки.ИмяМетаданных = "Saby_ПутевойЛист" Тогда 
		ПараметрыМетодаЗагрузки.ДопПоля = ПараметрыМетодаЗагрузки.ДопПоля + ",Стороны,ЗаменаВодителя";
	КонецЕсли;
	
	Попытка
		РезультатСБИС = ОбщиеПараметрыЗагрузки.ОбъектОбработки.local_helper_read_document(
			ОбщиеПараметрыЗагрузки.context_params, ПараметрыМетодаЗагрузки);
		
		ПараметрыЗагрузки.ДанныеДокумента = РезультатСБИС;
		ПараметрыЗагрузки.ИДСбис          = ИДСбис;
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		ТекстОшибки = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ПричинаОшибкиИзЯдра", ИнфоОшибки.Описание);
		Ошибки = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю", Ошибки, Неопределено, ТекстОшибки);
		Ошибки.Вставить("ИмяМетаданных", ПараметрыЗагрузки.ИмяМетаданных);
		КлючСоответствия = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").КлючСсылка(ПараметрыЗагрузки.Ссылка);
		Результат.Ошибки.Вставить(КлючСоответствия, Ошибки); 
		Возврат;
		
	КонецПопытки;
	
	Вложения = Новый Соответствие;
	ДобавитьВложенияИзСобытий(Вложения, ПараметрыЗагрузки.ДанныеДокумента["Событие"], ПараметрыЗагрузки.ИмяМетаданных);
	ПараметрыЗагрузки.ДанныеДокумента.Вставить("Вложения", Вложения["Вложения"]);
	
	ДанныеПодстановок = ПараметрыЗагрузки.ДанныеДокумента["Подстановки"];
	Если ЗначениеЗаполнено(ДанныеПодстановок) Тогда
		ПараметрыЗагрузки.ДанныеДокумента.Вставить("Подстановки", Новый Соответствие);
		ПараметрыЗагрузки.ДанныеДокумента.Вставить("ИдТитулов",   Новый Соответствие);
		Для Каждого Подстановки Из ДанныеПодстановок Цикл
			ДобавитьПодстановкуТитула(
				ПараметрыЗагрузки.ДанныеДокумента,
				Подстановки.Ключ,
				Подстановки.Значение,
				ПараметрыЗагрузки.ИмяМетаданных);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//DynamicDirective

Процедура ДобавитьВложенияИзСобытий(ИзмененияПоДокументу, СобытияСОнлайна, ИмяМетаданных)
	
	Вложения = ИзмененияПоДокументу["Вложения"];
	Если Вложения = Неопределено Тогда
		Вложения = Новый Соответствие;
		ИзмененияПоДокументу.Вставить("Вложения", Вложения);
	КонецЕсли;
	
	Если СобытияСОнлайна = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Событие Из СобытияСОнлайна Цикл
		
		Если Событие["Вложение"] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьВложения(Вложения, Событие, ИмяМетаданных);
		
	КонецЦикла;
	
КонецПроцедуры

//DynamicDirective

Процедура ДобавитьВложения(Вложения, Событие, ИмяМетаданных)
	
	ВложенияСОнлайна = Событие["Вложение"];
	
	Если ВложенияСОнлайна = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКлючаДатаВремя     = "ДатаВремя";
	ИмяКлючаИдентификатор = "Идентификатор";
	
	Для Каждого Вложение Из ВложенияСОнлайна Цикл
		
		Если ИмяМетаданных = "Saby_ТранспортнаяНакладная" Тогда
			ИмяФайлаСРасширением     = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ДанныеСоответствия(
				Вложение, "Файл.Имя", "");
			КлючСоответствияВложения = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").СтрРазделитьЭПД(
				ИмяФайлаСРасширением, ".")[0];
		Иначе
			КлючСоответствияВложения = Вложение["Подтип"];
		КонецЕсли;
		
		СтруктураВложения = Вложения[КлючСоответствияВложения];
		Если СтруктураВложения = Неопределено Тогда
			
			СтруктураВложения = Новый Соответствие;
			СтруктураВложения.Вставить(ИмяКлючаДатаВремя,     Дата(1, 1, 1));
			СтруктураВложения.Вставить(ИмяКлючаИдентификатор, "");
			Вложения.Вставить(КлючСоответствияВложения, СтруктураВложения);
			
		КонецЕсли;
		
		ДатаВремя = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ДанныеСоответствия(Событие, "ДатаВремя");
		ДатаВремя = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД", ДатаВремя);
		
		Если СтруктураВложения[ИмяКлючаДатаВремя] < ДатаВремя Тогда
			СтруктураВложения[ИмяКлючаДатаВремя]     = ДатаВремя;
			СтруктураВложения[ИмяКлючаИдентификатор] = Вложение[ИмяКлючаИдентификатор];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//DynamicDirective

Процедура ДобавитьПодстановкуТитула(ИзмененияПоДокументу, КодТитулаОнлайна, ЗначенияПодстановок, ИмяМетаданных)
	
	Титул = ВыполнитьНаСервере(
		"Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов", ИмяМетаданных, "ЗначениеПоИмениПодстановки", КодТитулаОнлайна);
	Если Не ЗначениеЗаполнено(Титул) Тогда
		Возврат;
	КонецЕсли;
	
	ПредставленияТитула = ВыполнитьНаСервере(
		"Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов", ИмяМетаданных, "ПредставленияТитула", Титул);
	
	МассивПодстановок = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ЗначениеВМассив(ЗначенияПодстановок);
	
	Для Каждого ДанныеТитула Из МассивПодстановок Цикл
		
		КлючСоответствияВложения = КлючСоответствияВложения(ДанныеТитула, ПредставленияТитула);
		
		СтруктураВложения = ИзмененияПоДокументу["Вложения"][КлючСоответствияВложения];
		
		ДобавитьИнформациюВПодстановки(ДанныеТитула, Титул, СтруктураВложения, ИмяМетаданных);
		УдалитьНеиспользуемуюИнформациюВПодстановках(ДанныеТитула, ПредставленияТитула);
		
		МассивТитулов = ИзмененияПоДокументу["Подстановки"][КодТитулаОнлайна];
		Если МассивТитулов = Неопределено Тогда
			МассивТитулов = Новый Массив;
			ИзмененияПоДокументу["Подстановки"].Вставить(КодТитулаОнлайна, МассивТитулов);
		КонецЕсли;
		
		ИдентификаторВложения = ДанныеТитула["ИдентификаторВложенияТитула"];
		Если ИдентификаторВложения = "" Тогда
			ИдентификаторВложения = ПредставленияТитула.ИмяПодстановки;
		КонецЕсли;
		
		ИндексТитула = ИзмененияПоДокументу["ИдТитулов"][ИдентификаторВложения];
		Если ИндексТитула = Неопределено Тогда
			МассивТитулов.Добавить(ДанныеТитула);
			ИзмененияПоДокументу["ИдТитулов"].Вставить(ИдентификаторВложения, МассивТитулов.ВГраница());
		Иначе
			Если МассивТитулов.Количество() Тогда 
				МассивТитулов[ИндексТитула] = ДанныеТитула;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//DynamicDirective

Функция КлючСоответствияВложения(ДанныеТитула, ПредставленияТитула)
	
	РезультатФункции = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ДанныеСоответствия(
		ДанныеТитула, "Файл.ИмяФайлаБезРасширения");
	Если РезультатФункции = Неопределено Тогда
		РезультатФункции = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ДанныеСоответствия(
			ДанныеТитула, "Документ.Дополнительная информация.Имя файла");
	КонецЕсли;
	Если РезультатФункции = Неопределено Тогда
		РезультатФункции = ПредставленияТитула.КодТитула;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective

Процедура ДобавитьИнформациюВПодстановки(ДанныеТитула, Титул, СтруктураВложения, ИмяМетаданных)
	
	ДанныеТитула.Вставить("ДатаВложенияТитула", ДатаВложения(ДанныеТитула, Титул, СтруктураВложения));
	
	ДанныеТитула.Вставить("ИдентификаторВложенияТитула", ИдентификаторВложения(ДанныеТитула, Титул, СтруктураВложения));
	
КонецПроцедуры

//DynamicDirective

Процедура УдалитьНеиспользуемуюИнформациюВПодстановках(ДанныеТитула, ПредставленияТитула)
	
	Если ДанныеТитула[ПредставленияТитула.КодТитула] <> Неопределено Тогда
		ДанныеТитула.Вставить(ПредставленияТитула.КодТитула, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

//DynamicDirective

Функция РаспознаваниеВУ(ДопПараметры, Знач ОбщиеПараметрыЗагрузки = Неопределено) Экспорт
	
	Если ДопПараметры.ОтветНаКлиенте <> Неопределено Тогда
		Возврат ДопПараметры.ОтветНаКлиенте;
	КонецЕсли;
	
	Если ОбщиеПараметрыЗагрузки = Неопределено Тогда
		ОбщиеПараметрыЗагрузки = МодульКода("Saby_ТНОбщегоНазначенияСервер").ОбщиеПараметрыВыгрузкиЗагрузки(
		ДопПараметры.context_params);
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Файл", ДопПараметры.ЗакодированныеДД);
	
	ИмяМетода = "sabyEmployee.RecognizeDriverLicense";
	
	Ответ = ВыполнитьМетодAPI(ИмяМетода, ПараметрыМетода, ОбщиеПараметрыЗагрузки);
	
	Если Ответ.Ошибка Тогда
		
		Ошибка   = Истина;
		Описание = Ответ.ОписаниеОшибки;
		
	ИначеЕсли Не ЗначениеЗаполнено(Ответ.Результат) Или Не ЗначениеЗаполнено(Ответ.Результат["result"]) Тогда
		
		Ошибка   = Истина;
		Описание = "Ошибка выполнения распознавания ВУ / " + ИмяМетода;
		
	Иначе
		Ошибка = Ложь;
	КонецЕсли;
	
	Попытка 
		
		// заберем только распознанные данные 
		ДанныеВУ = Ответ.Результат["result"]["RecognizedData"]["fields"];
		Ответ.Результат = ДанныеВУ;
		
	Исключение
		
		Ошибка = Истина;
		Описание = "Ошибка обработки результата распознавания ВУ / " + ИмяМетода;
		
	КонецПопытки;
	
	Если Ошибка Тогда 
		
		ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации",
			Неопределено,
			"Не удалось выполнить распознавание ВУ / " + ИмяМетода,
			Описание);
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

//DynamicDirective

Функция ЗагрузитьДанныеТСПоРегНомеру(ДопПараметры, Знач ОбщиеПараметрыЗагрузки = Неопределено) Экспорт
	
	Если ДопПараметры.ОтветНаКлиенте <> Неопределено Тогда
		Возврат ДопПараметры.ОтветНаКлиенте;
	КонецЕсли;
	
	Если ОбщиеПараметрыЗагрузки = Неопределено Тогда
		ОбщиеПараметрыЗагрузки = МодульКода("Saby_ТНОбщегоНазначенияСервер").ОбщиеПараметрыВыгрузкиЗагрузки(
			ДопПараметры.context_params);
	КонецЕсли;
	
	ВнутренниеПараметрыМетода = Новый Структура;
	ВнутренниеПараметрыМетода.Вставить("filter", Новый Структура("RegNumber", ДопПараметры.РегистрационныйНомер));
	ВнутренниеПараметрыМетода.Вставить("limit",  1);
	ВнутренниеПараметрыМетода.Вставить("page",   0);
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("params", ВнутренниеПараметрыМетода);
	
	ИмяМетода = "sabyVehicle.GetList";
	
	Ответ = ВыполнитьМетодAPI(ИмяМетода, ПараметрыМетода, ОбщиеПараметрыЗагрузки);
	
	Если Ответ.Ошибка Тогда 
		
		Ответ.Результат = Ответ.ОписаниеОшибки;
		
		ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации",
			Неопределено,
			"Не удалось выполнить загрузку данных по регистрационному номеру / " + ИмяМетода,
			Ответ.ОписаниеОшибки);
			
	Иначе
		
		НайденныеМашины = Ответ.Результат["result"]["cars"];
		Если НайденныеМашины.Количество() > 0 Тогда
			Ответ.Результат = НайденныеМашины[0];
		Иначе
			Ответ.Результат = "Заполнение не выполнено. Не найдены данные транспортного средства по указанному регистрационному номеру.";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ответ.Результат;
	
КонецФункции

//DynamicDirective

Функция ЗагрузитьДанныеТСПоВИН(ДопПараметры, Знач ОбщиеПараметрыЗагрузки = Неопределено) Экспорт
	
	Если ДопПараметры.ОтветНаКлиенте <> Неопределено Тогда
		Возврат ДопПараметры.ОтветНаКлиенте;
	КонецЕсли;
	
	Если ОбщиеПараметрыЗагрузки = Неопределено Тогда
		ОбщиеПараметрыЗагрузки = МодульКода("Saby_ТНОбщегоНазначенияСервер").ОбщиеПараметрыВыгрузкиЗагрузки(
			ДопПараметры.context_params);
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("VIN", ДопПараметры.ВИН);
	
	ИмяМетода = "sabyVehicle.ByVIN";
	
	Ответ = ВыполнитьМетодAPI(ИмяМетода, ПараметрыМетода, ОбщиеПараметрыЗагрузки);
	
	Попытка
		Ответ.Результат = Ответ.Результат["result"];
	Исключение
		Ответ.Ошибка = Истина;
		Ответ.ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если Ответ.Ошибка Тогда
		
		ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации",
			Неопределено,
			"Не удалось проверить данные в ГИБДД по ВИН / " + ИмяМетода,
			Ответ.ОписаниеОшибки);
		
	КонецЕсли;
	
	Возврат Ответ.Результат;
	
КонецФункции

//DynamicDirective
// Выполенение метода внешнего API
//
// Параметры:
//  ИмяМетода       - Строка    - название выполняемого метода
//  ПараметрыМетода - Структура - параметры выполнения метода
//  ОбщиеПараметрыЗагрузки - Структура - структура общих параметров
//
// Возвращаемое значение:
//   Структура - имеет всегда фиксированны набор ключей
//       * Результат      - Соответствие - ответ сервиса. 
//       * Ошибка         - Булево       - признак возникновения ошибки.
//       * ОписаниеОшибки - Строка       - описание ошибки.
//
Функция ВыполнитьМетодAPI(ИмяМетода, ПараметрыМетода, ОбщиеПараметрыЗагрузки)
	
	Ошибка         = Ложь;
	Результат      = Неопределено;
	ОписаниеОшибки = "";
	
	Попытка
		
		ДополнитьПараметрыМетодаAPI(
			ОбщиеПараметрыЗагрузки.ОбъектОбработки, ИмяМетода, ПараметрыМетода, ОбщиеПараметрыЗагрузки.context_params);
		
		Результат = ОбщиеПараметрыЗагрузки.ОбъектОбработки.local_helper_exec_method(
			ОбщиеПараметрыЗагрузки.context_params,
			ИмяМетода,
			ПараметрыМетода,
			Истина);
		
	Исключение
		
		Ошибка         = Истина;
		ИнфоОшибки     = ИнформацияОбОшибке();
		ОписаниеОшибки = ИнфоОшибки.Описание;
		
	КонецПопытки;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Результат",      Результат);
	СтруктураОтвета.Вставить("Ошибка",         Ошибка);
	СтруктураОтвета.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
	Возврат СтруктураОтвета;
	
КонецФункции

//DynamicDirective

Процедура ДополнитьПараметрыМетодаAPI(ОбъектОбработки, ИмяМетода, ПараметрыМетода, context_params)
	
	Если ИмяМетода = "CloudStatistics.Send" Тогда
		Если ЗначениеЗаполнено(context_params) И context_params.Свойство("ExtSysSettingsId") Тогда			
			context = context_params.ExtSysSettingsId;
		Иначе
			context = "";
		КонецЕсли;
		ПараметрыМетода.data.context = context;
	КонецЕсли;
	
КонецПроцедуры

#Область Статистика

//DynamicDirective
// Запись статистики на прямую в облако, в обход стандартных методов
//
// Параметры:
//  ПараметрыЗагрузки - Структура - структура загрузки
//  ОбщиеПараметрыЗагрузки - Структура - общие параметры загрузки
//
Процедура ЗаписатьСтатистикуНапрямую(ПараметрыЗагрузки, ОбщиеПараметрыЗагрузки) Экспорт
	
	ПараметрыМетода = ПараметрыМетодаЗаписиСтатистики(ПараметрыЗагрузки.ТекущийТитул, ПараметрыЗагрузки.Ссылка);
	
	ЗаписатьСтатистикуВОблако(ПараметрыЗагрузки.Ссылка, ПараметрыМетода, ОбщиеПараметрыЗагрузки);
	
	// Дополнительная запись стастики. Требуется в исключительных случаях
	ЗаписатьДополнительнуюСтатистику(ПараметрыЗагрузки, ПараметрыМетода, ОбщиеПараметрыЗагрузки);
	
КонецПроцедуры

//DynamicDirective

Функция ПараметрыМетодаЗаписиСтатистики(ТекущийТитул, ДокументСсылка)
	
	Если ТипЗнч(ДокументСсылка) = Тип("Структура") Тогда
		ИмяМетаданных = ДокументСсылка.ИмяМетаданных;
	Иначе
		ИмяМетаданных = МодульКода("Saby_ТНОбщегоНазначенияСервер").ИмяМетаданныхДокумента(ДокументСсылка);
	КонецЕсли;
	
	ПараметрыAPI   = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ПараметрыДокументаДляАПИ(ИмяМетаданных);
	ИмяФункционала = "1С Расширение_" + ПараметрыAPI.Тип;
	
	ЭтоДинамическийТитул = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов",
		ИмяМетаданных, "ЭтоДинамическийТитул", ТекущийТитул);
	
	Если ЭтоДинамическийТитул Тогда
		ИмяДействия = "Переход\" + СокрЛП(ТекущийТитул);
	Иначе
		ИмяДействия = "Переход";
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура;
	
	Данные = Новый Структура;
	Данные.Вставить("action",     ИмяДействия);
	Данные.Вставить("context",    "");
	Данные.Вставить("functional", ИмяФункционала);
	
	ПараметрыМетода.Вставить("data", Данные);

	Возврат ПараметрыМетода;
	
КонецФункции

//DynamicDirective

Процедура ЗаписатьСтатистикуВОблако(ДокументСсылка, Знач ПараметрыМетода, Знач ОбщиеПараметрыЗагрузки)
	
	ИмяМетода = "CloudStatistics.Send";
	
	Ответ = ВыполнитьМетодAPI(ИмяМетода, ПараметрыМетода, ОбщиеПараметрыЗагрузки);
	
	Если Ответ.Ошибка Тогда
		
		Ошибка   = Истина;
		Описание = Ответ.ОписаниеОшибки;
		
	ИначеЕсли Не ЗначениеЗаполнено(Ответ.Результат) Или Не ЗначениеЗаполнено(Ответ.Результат["result"]) Тогда
		
		Ошибка   = Истина;
		Описание = "Ошибка выполнения записи статистики / " + ИмяМетода;
		
	Иначе
		Ошибка = Ложь;
	КонецЕсли;
	
	Если Ошибка Тогда
		
		ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации",
			ДокументСсылка,
			"Не записана статистика документа / " + ИмяМетода,
			Описание);
		
	КонецЕсли;
	
КонецПроцедуры

//DynamicDirective

Процедура ЗаписатьДополнительнуюСтатистику(ПараметрыЗагрузки, ПараметрыМетода, ОбщиеПараметрыЗагрузки)
	
	// Это первый титул ЭПЛ и это замена водителя 
	// запишем доп статистику - для сбора данных о сделанных заменах (требуется отдельная метрика)
	Если ПараметрыЗагрузки.ИмяМетаданных = "Saby_ПутевойЛист" И ПустаяСтрока(ПараметрыЗагрузки.ТекущийТитул) Тогда
		
		ЗначениеПЛПредыдущий = МодульКода("Saby_ТНОбщегоНазначенияСервер").ЗначениеРеквизитаОбъекта(
			ПараметрыЗагрузки.Ссылка, "ПЛПредыдущий");
		ЭтоЗаменаВодителя = ЗначениеЗаполнено(ЗначениеПЛПредыдущий);
		Если ЭтоЗаменаВодителя Тогда
			
			ПараметрыМетода.data.action = "Переход\ЗаменаВодителя";
			ЗаписатьСтатистикуВОблако(ПараметрыЗагрузки.Ссылка, ПараметрыМетода, ОбщиеПараметрыЗагрузки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Статистика

//DynamicDirective
// Возвращает двоичные данные файла печатной формы из СБИС.
//
// Параметры:
//  ПараметрыЗагрузки - Структура - параметры загрузки
//  АдресФайлаВСбис - Строка - адрес печатной формы pdf
//
// Возвращаемое значение:
//   Строка - адрес двоичных данных файла печатной формы.
//
Функция АдресДвоичныхДанныхФайла(ПараметрыЗагрузки, Знач АдресФайлаВСбис = Неопределено) Экспорт
	
	РезультатФункции = Неопределено;
	
	Если Не ПараметрыЗагрузки.ЗагрузкаТребуется Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Если АдресФайлаВСбис = Неопределено Тогда
		АдресФайлаВСбис = СсылкаНаПечатнуюФорму(ПараметрыЗагрузки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресФайлаВСбис) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = ПараметрыЗагрузки.ОбъектОбработки.local_helper_download_from_link(
		ПараметрыЗагрузки.context_params,
		АдресФайлаВСбис);
	
	РезультатФункции = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, ПараметрыЗагрузки.УникальныйИдентификаторФормы);
	
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective

Функция СсылкаНаПечатнуюФорму(ПараметрыЗагрузки)
	
	РезультатФункции = Неопределено;
	
	Если Не ЗначениеЗаполнено(ПараметрыЗагрузки.УИДСбис) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Идентификатор", ПараметрыЗагрузки.УИДСбис);
	ПараметрыМетода.Вставить("ДопПоля",       "");
	
	Попытка
		
		Результат = ПараметрыЗагрузки.ОбъектОбработки.local_helper_read_document(
			ПараметрыЗагрузки.context_params,
			ПараметрыМетода);
		
		РезультатФункции = Результат["СсылкаНаPDF"];
		
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		
		ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации",
			ПараметрыЗагрузки.СсылкаНаДокумент,
			"Не удалось получить печатную форму",
			ИнфоОшибки.Описание);
		
	КонецПопытки;
	
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective
// Получает справочные данные с онлайна.
//
// Параметры:
//  ИмяСправочника - Строка - наименование справочника, который необходимо получить с онлайна.
//  ОбщиеПараметрыЗагрузки - Структура - общие параметры загрузки
//
// Возвращаемое значение:
//   Массив - данные зависят от справочника, получаемого с онлайна.
//
Функция СправочникСОнлайна(ИмяСправочника, ОбщиеПараметрыЗагрузки) Экспорт
	
	ПараметрыМетода = Новый Структура();
	ПараметрыМетода.Вставить("ДопПоля",    Новый Массив);
	ПараметрыМетода.Вставить("Фильтр",     Новый Структура());
	ПараметрыМетода.Вставить("Сортировка", null);
	ПараметрыМетода.Вставить("Навигация",  null);
	
	ПараметрыМетода.Фильтр.Вставить("s", Новый Массив);
	ПараметрыМетода.Фильтр.Вставить("f", 0);
	ПараметрыМетода.Фильтр.Вставить("d", Новый Массив);
	ПараметрыМетода.Фильтр.Вставить("_type", "record");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("n", "Справочник");
	СтруктураПараметров.Вставить("t", "Строка");
	
	ПараметрыМетода.Фильтр.s.Добавить(СтруктураПараметров);
	
	ПараметрыМетода.Фильтр.d.Добавить(ИмяСправочника);
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("protocol",  6);
	
	result = ОбщиеПараметрыЗагрузки.ОбъектОбработки.local_helper_exec_method(
		ОбщиеПараметрыЗагрузки.context_params,
		"Классификаторы.ПолучитьСправочникЦеликом",
		ПараметрыМетода,
		Истина,
		ДопПараметры,
		ОбщиеПараметрыЗагрузки.context_params.api_url + "/service/?srv=1");
		
	Результат = result["result"];
	
	Возврат Результат["d"];
	
КонецФункции

