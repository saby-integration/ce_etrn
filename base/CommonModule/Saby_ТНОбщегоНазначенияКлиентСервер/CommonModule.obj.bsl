
#Область ПрограммныйИнтерфейс

#Область ДанныеЮрЛиц

// Обновляет данные по адресам доставки и погрузки на форме
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для обновления данных
//  ДопПараметры - Структура - структура дополнительных параметров для обновления
//
Процедура ОбновитьАдресаПогрузкиДоставки(Форма, ДопПараметры) Экспорт
	
	ФормаОбъект = ФормаОбъект(Форма);
	
	Представление = "";
	Значение      = "";
	
	Если ЗначениеЗаполнено(ДопПараметры.Значение) Тогда
		
		Представление = ДопПараметры.Значение.Представление;
		Значение      = Saby_ТНОбщегоНазначенияСервер.АдресВФорматеОбмена(
							ДопПараметры.Значение.Значение);
	КонецЕсли;					
		
	// ToDo: последующий рефакторинг с учетом отказа от ссылок 
	Если СтрНайти(Форма.ИмяФормы, "Saby_ОрганизацииЭПД") > 0 Тогда
		ФормаОбъект.Адрес          = Представление;
		ФормаОбъект.АдресСтруктура = Значение;	
		Возврат;
	КонецЕсли;
		
	Если ДопПараметры.Роли = "Оформитель" Тогда 
		ФормаОбъект.МестоОтправления         = Представление;
		ФормаОбъект.МестоОтправленияЗначение = Значение;		
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.Роли = "ПодачаТС" Тогда
		ФормаОбъект.ПодачаАдрес          = Представление;
		ФормаОбъект.ПодачаАдресСтруктура = Значение;
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.Роли = "КонечнаяТочка" Тогда
		ФормаОбъект.КонечнаяТочкаАдрес          = Представление;
		ФормаОбъект.КонечнаяТочкаАдресСтруктура = Значение;
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.Роли = "АдресаПунктовВыгрузки" Или ДопПараметры.Роли = "АдресаПромежуточныхПунктов" Тогда
		
		СтрокаАдреса = ФормаОбъект[ДопПараметры.Роли].НайтиПоИдентификатору(Форма.Элементы[ДопПараметры.Роли].ТекущаяСтрока);
		
		СтрокаАдреса.Значение  = Представление;
		СтрокаАдреса.Структура = Значение;		
		Возврат;
		
	КонецЕсли;
	// - рефакторинг
	
	ТаблицаЮрЛиц = ДопПараметры.ТаблицаЮрЛиц;
	Если ТаблицаЮрЛиц = Неопределено Тогда
		ТаблицаЮрЛиц = ТаблицаЮрЛиц(Форма, ДопПараметры.Роли, ФормаОбъект);
	КонецЕсли;
	
	СтрокаОтправителя = НайтиСтрокуЮрЛиц(ТаблицаЮрЛиц, "Отправитель", "РольСтрокой");
	Если СтрокаОтправителя <> Неопределено Тогда
		
		АдресФакт = ФактическийАдрес(СтрокаОтправителя.Ссылка, ТаблицаЮрЛиц, ДопПараметры);
		
		Если ЕстьРеквизитИлиСвойство(ФормаОбъект, "Погрузка_Адрес") Тогда
			ФормаОбъект.Погрузка_Адрес        = АдресФакт.Представление;
			ФормаОбъект.АдресПогрузкиЗначение = Saby_ТНОбщегоНазначенияСервер.АдресВФорматеОбмена(АдресФакт.Значение);
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаПолучателя = НайтиСтрокуЮрЛиц(ТаблицаЮрЛиц, "Получатель", "РольСтрокой");
	Если СтрокаПолучателя <> Неопределено Тогда
		
		АдресФакт = ФактическийАдрес(СтрокаПолучателя.Ссылка, ТаблицаЮрЛиц, ДопПараметры);
		
		ФормаОбъект.Отправитель_АдресДоставки = АдресФакт.Представление;
		ФормаОбъект.АдресДоставкиЗначение     = Saby_ТНОбщегоНазначенияСервер.АдресВФорматеОбмена(АдресФакт.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет данные по основным телефонам на форме
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для обновления данных
//  ДопПараметры - Структура - структура дополнительных параметров для обновления
//
Процедура ОбновитьОсновнойНомерТелефона(Форма, ДопПараметры) Экспорт
	
	ФормаОбъект = ФормаОбъект(Форма);
	
	ТаблицаЮрЛиц = ДопПараметры.ТаблицаЮрЛиц;
	Если ТаблицаЮрЛиц = Неопределено Тогда
		ТаблицаЮрЛиц = ТаблицаЮрЛиц(Форма, ДопПараметры.Роли, ФормаОбъект);
	КонецЕсли;
	
	ТипКИТелефон = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Роль",                   Неопределено);
	СтруктураПоиска.Вставить("Тип",                    ТипКИТелефон);
	СтруктураПоиска.Вставить("КлючСтроки_ДанныеЮрЛиц", 0);
	
	Для Каждого СтрокаЮрЛица Из ТаблицаЮрЛиц Цикл
		
		Если СтрокаЮрЛица.ПолеОсновногоТелефона = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.Роль                   = СтрокаЮрЛица.Роль;
		СтруктураПоиска.КлючСтроки_ДанныеЮрЛиц = СтрокаЮрЛица.КлючСтроки;
		
		ПараметрыНайденныхСтрок = ПараметрыНайденныхСтрок(ФормаОбъект, ДопПараметры, СтруктураПоиска);
		СтрокаТелефона = ПараметрыНайденныхСтрок.СтрокаТелефона;
		
		Если ДопПараметры.Значение <> Неопределено И СтрокаТелефона = Неопределено Тогда
			Если ДопПараметры.ИдентификаторСтроки <> Неопределено Тогда
				СтрокаТелефона = ФормаОбъект.КонтактныеДанные.НайтиПоИдентификатору(ДопПараметры.ИдентификаторСтроки);
			Иначе
				СтрокаТелефона = ФормаОбъект.КонтактныеДанные.Добавить();
			КонецЕсли;
			
			СтрокаТелефона.Роль      = СтрокаЮрЛица.Роль;
			СтрокаТелефона.Тип       = СтруктураПоиска.Тип;
			СтрокаТелефона.Значение  = ДопПараметры.Значение.Представление;
			СтрокаТелефона.Структура = ДопПараметры.Значение.Значение;
			
			СтрокаТелефона.КлючСтроки_ДанныеЮрЛиц = СтрокаЮрЛица.КлючСтроки;
			
			Если Не ПараметрыНайденныхСтрок.ЕстьОсновнойТелефон Тогда
				СтрокаТелефона.Основной = Истина;
			КонецЕсли;
			
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
		ЗаполнитьПолеОсновногоТелефона(Форма, СтрокаЮрЛица, СтрокаТелефона);
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет код филиала на форме
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для обновления данных
//  ДопПараметры - Структура - структура дополнительных параметров для обновления
//
Процедура ОбновитьКодФилиала(Форма, ДопПараметры) Экспорт
	
	ФормаОбъект = ФормаОбъект(Форма);
	
	ТаблицаЮрЛиц = ДопПараметры.ТаблицаЮрЛиц;
	Если ТаблицаЮрЛиц = Неопределено Тогда
		ТаблицаЮрЛиц = ТаблицаЮрЛиц(Форма, ДопПараметры.Роли, ФормаОбъект);
	КонецЕсли;
	СтрокаОтправителя = НайтиСтрокуЮрЛиц(ТаблицаЮрЛиц, "Отправитель", "РольСтрокой");
	Если СтрокаОтправителя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Роль", СтрокаОтправителя.Роль);
	
	НайденныеСтроки = НайтиСтрокиУниверсально(ФормаОбъект.ДанныеЮрЛиц, Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Форма.КодФилиала = НайденныеСтроки[0].КодФилиала;
	КонецЕсли;
	
КонецПроцедуры

// Дополнительные параметры для обновления КИ
// Параметры:
//  Роли - Массив - роли юр лиц, которые обновляем  
//  ТаблицаЮрЛиц - ТаблицаЗначений - данные по юрлицам
//  ТаблицаКИ - ТаблицаЗначений - таблица с данными КИ 
//  Значение - Строка - значение КИ
// Возвращаемое значение:
//  Структура - дополнительные параметры КИ
Функция ДопПараметрыОбновленияКИ(Роли, ТаблицаЮрЛиц = Неопределено,
		ТаблицаКИ = Неопределено, Значение = Неопределено) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Роли",                    Роли);
	РезультатФункции.Вставить("ТаблицаЮрЛиц",            ТаблицаЮрЛиц);
	РезультатФункции.Вставить("ТаблицаКИ",               ТаблицаКИ);
	РезультатФункции.Вставить("Значение",                Значение);
	РезультатФункции.Вставить("ИдентификаторСтроки",     Неопределено);

	РезультатФункции.Вставить("КлючСтроки_ДанныеЮрЛиц",  0);
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает структуру данных юр лица по роли
//
// Параметры:
//  ДанныеЮрЛиц - ТабличнаяЧасть - таблица с данными организаций
//  РольСтрокой - Строка - имя роли организации
//  ПараметрыРеквизитаФормы - Структура - см. функцию Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы
//
// Возвращаемое значение:
//   Структура - структура данных юрлица
//
Функция ДанныеЮрЛицаПоРоли(ДанныеЮрЛиц, РольСтрокой, ПараметрыРеквизитаФормы = Неопределено) Экспорт
	
	Если ПараметрыРеквизитаФормы = Неопределено Тогда
		ПараметрыРеквизитаФормы = ПараметрыРеквизитаФормы("", "");
	КонецЕсли;
	
	РезультатФункции = СтруктураДанныхЮрЛица();
	
	Роль = ПредопределенноеЗначение("Перечисление.Saby_РолиКонтрагентов." + РольСтрокой);
	
	Если ПараметрыРеквизитаФормы.ЭтоСтрокаТаблицы Тогда
		НайденныеСтроки = Новый Массив;
		Если ПараметрыРеквизитаФормы.ИдентификаторСтроки <> Неопределено Тогда
			НайденныеСтроки.Добавить(ДанныеЮрЛиц.НайтиПоИдентификатору(ПараметрыРеквизитаФормы.ИдентификаторСтроки));
		КонецЕсли;
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("Роль", Роль);
		НайденныеСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ДанныеЮрЛиц, Отбор);
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(РезультатФункции, НайденныеСтроки[0]);
	Иначе
		РезультатФункции.Роль = Роль;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Добавляет контактные данные в структуру данных юр лица по роли
//
// Параметры:
//  СтруктураДанныхЮрЛица - Структура - см. функцию СтруктураДанныхЮрЛица()
//  КонтактныеДанные - ТабличнаяЧасть - таблица с контактными данными организаций
//  РольСтрокой - Строка - имя роли организации
//  ПараметрыРеквизитаФормы - Структура - см. функцию Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы
//
Процедура ДобавитьКонтактныеДанныеПоРоли(СтруктураДанныхЮрЛица, КонтактныеДанные, РольСтрокой,
		ПараметрыРеквизитаФормы = Неопределено) Экспорт
	
	Если ПараметрыРеквизитаФормы = Неопределено Тогда
		ПараметрыРеквизитаФормы = ПараметрыРеквизитаФормы("", "");
	КонецЕсли;
	
	Роль = ПредопределенноеЗначение("Перечисление.Saby_РолиКонтрагентов." + РольСтрокой);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Роль);
	
	Если ПараметрыРеквизитаФормы.ЭтоСтрокаТаблицы Тогда
		Отбор.Вставить("КлючСтроки_ДанныеЮрЛиц", СтруктураДанныхЮрЛица.КлючСтроки);
	КонецЕсли;
	
	НайденныеСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(КонтактныеДанные, Отбор);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СтруктураКонтактныхДанных = СтруктураКонтактныхДанных();
		ЗаполнитьЗначенияСвойств(СтруктураКонтактныхДанных, НайденнаяСтрока);
		СтруктураДанныхЮрЛица.КонтактныеДанные.Добавить(СтруктураКонтактныхДанных);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает представление юр лица для использования на форме
//
// Параметры:
//  ДанныеЮрЛиц - ТабличнаяЧасть - таблица с данными организаций
//  РольСтрокой - Строка - имя роли организации
//
// Возвращаемое значение:
//   Строка - представление юрлица
//
Функция ПредставлениеЮрЛицаПоРоли(ДанныеЮрЛиц, РольСтрокой) Экспорт
	
	НаименованиеОрганизации = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(
		ДанныеЮрЛиц, РольСтрокой).НаименованиеОрганизации;
		
	Если Не ЗначениеЗаполнено(НаименованиеОрганизации) Тогда
		НаименованиеОрганизации = "Заполнить";
	КонецЕсли;
	
	Возврат НаименованиеОрганизации;
	
КонецФункции

// Возвращает с структуру данных юр лица
//
// Возвращаемое значение:
//   Структура - см. в самой функции
//
Функция СтруктураДанныхЮрЛица() Экспорт

	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Роль",                    "");
	РезультатФункции.Вставить("ЮрФизЛицо",               "");
	РезультатФункции.Вставить("ИНН",                     "");
	РезультатФункции.Вставить("КПП",                     "");
	РезультатФункции.Вставить("ОГРН",                    "");
	РезультатФункции.Вставить("СтруктураФИО",            "");
	РезультатФункции.Вставить("Адрес",                   "");
	РезультатФункции.Вставить("АдресСтруктура",          "");
	РезультатФункции.Вставить("СтранаРегистрации",       "");
	РезультатФункции.Вставить("КодФилиала",              "");
	РезультатФункции.Вставить("НаименованиеОрганизации", "");
	РезультатФункции.Вставить("Полномочия",              "");
	РезультатФункции.Вставить("Основание",               "");
	РезультатФункции.Вставить("КлючСтроки",              "");
	
	РезультатФункции.Вставить("КонтактныеДанные",        Новый Массив);
	
	Возврат РезультатФункции;
		
КонецФункции 

// Контракт контактных данных юр лица для использования в процедурах и функциях
//
// Возвращаемое значение:
//   Структура - см. в функции
//
Функция СтруктураКонтактныхДанных() Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Роль",                   "");
	РезультатФункции.Вставить("Тип",                    "");
	РезультатФункции.Вставить("Значение",               "");
	РезультатФункции.Вставить("Структура",              "");
	РезультатФункции.Вставить("КлючСтроки_ДанныеЮрЛиц", "");
	РезультатФункции.Вставить("Основной",               "");
	
	Возврат РезультатФункции;
	
КонецФункции

// Контракт данных ответственного лица
//
// Возвращаемое значение:
//   Структура - см. в функции
//
Функция СтруктураОтветственногоЛица() Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("КлючСтроки",            "");
	РезультатФункции.Вставить("ИНН",                   "");
	РезультатФункции.Вставить("Серия",                 "");
	РезультатФункции.Вставить("Номер",                 "");
	РезультатФункции.Вставить("ДатаВыдачи",            "");
	РезультатФункции.Вставить("Фамилия",               "");
	РезультатФункции.Вставить("Имя",                   "");
	РезультатФункции.Вставить("Отчество",              "");
	РезультатФункции.Вставить("Телефоны",              "");
	РезультатФункции.Вставить("Роль",                  "");
	РезультатФункции.Вставить("ДатаОкончанияДействия", "");
	РезультатФункции.Вставить("ЭлектроннаяПочта",      "");
	РезультатФункции.Вставить("Должность",             "");
	РезультатФункции.Вставить("ШтатныйСотрудник",      "");
	РезультатФункции.Вставить("ИдентификаторСтроки",   Неопределено);
	
	Возврат РезультатФункции;
	
КонецФункции

// Заполняет дополнительные реквизиты формы их данных юридических лиц
//
// Параметры:
// 	Форма - Форма - источник вызова 
//  СтрокаЮрЛиц - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.СтруктураДанныхЮрЛица()
//  ДополнительныеПоля - Строка - имена реквизитов формы для заполнения
//  РольСтрокой - Строка - имя роли организации
//
Процедура ЗаполнитьДополнительныеПоляЮрЛица(Форма, СтрокаЮрЛиц, ДополнительныеПоля, РольСтрокой) Экспорт
	
	МассивПолей = СтрРазделить(ДополнительныеПоля, ",", Ложь);
	
	Для Каждого ИмяПоля Из МассивПолей Цикл
		ИмяРеквизитаФормы = РольСтрокой + "_" + ИмяПоля;
		Форма[ИмяРеквизитаФормы] = СтрокаЮрЛиц[ИмяПоля];
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ДанныеЮрЛиц

// Возвращает строковое представление водительского удостоверения
//
// Параметры:
//  Данные - Структура - структура данных водительского удостоверения
//
// Возвращаемое значение:
//   Строка - текстовое представление водительского удостоверения
//
Функция ПредставлениеВУ(Данные) Экспорт
		
	Массив = Новый Массив;
	Массив.Добавить("Серия");
	Массив.Добавить("Номер");
		
	СерияНомер = ТекстовоеПредставлениеДанных(Данные, Массив, " №");
	
	НовыеДанные = Новый Структура;
	НовыеДанные.Вставить("СерияНомер", СерияНомер);
	НовыеДанные.Вставить("ДатаВыдачи", Формат(Данные.ДатаВыдачи, "ДФ=dd.MM.yyyy"));
	
	Массив = Новый Массив;
	Массив.Добавить("СерияНомер");
	Массив.Добавить("ДатаВыдачи");
	
	СерияНомерДатаВУ = ТекстовоеПредставлениеДанных(НовыеДанные, Массив, " от ");
	Возврат СерияНомерДатаВУ;
	
КонецФункции

// Возвращает строковое представление ФИО
//
// Параметры:
//  Данные - Структура - структура данных ФИО
//
// Возвращаемое значение:
//   Строка - текстовое представление ФИО
//
Функция ПредставлениеФИО(Данные) Экспорт
	
	ЕстьНеобходимыеСвойства = ЕстьРеквизитИлиСвойство(Данные, "Фамилия")
		И ЕстьРеквизитИлиСвойство(Данные, "Имя")
		И ЕстьРеквизитИлиСвойство(Данные, "Отчество");
	
	Если Не ЕстьНеобходимыеСвойства Тогда
		Возврат "";
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить("Фамилия");
	Массив.Добавить("Имя");
	Массив.Добавить("Отчество");
	
	Возврат ТекстовоеПредставлениеДанных(Данные, Массив, " ");
	
КонецФункции

// Для сборки текстового представления из структуры
//
// Параметры: 
// 	Данные - Структура - данные для представления
// 	Реквизиты - Массив - реквизиты, участвующие в представлении
// 	Разделитель - Строка - разделитель реквизитов в представлении
// 	ВключаяПустые - Булево - признак включения пустых значений в представление
//
// Возвращаемое значение:
//	Строка - представление данных строкой
//
Функция ТекстовоеПредставлениеДанных(Данные, Реквизиты, Разделитель, ВключаяПустые = Ложь) Экспорт
	
	МассивСтрок = Новый Массив;
	
	Для Каждого Реквизит Из Реквизиты Цикл 
		
		Если Не ВключаяПустые И Не ЗначениеЗаполнено(Данные[Реквизит]) Тогда 
			Продолжить;
		КонецЕсли;
				
		МассивСтрок.Добавить(СокрЛП(Данные[Реквизит]));
		
	КонецЦикла;
	
	Если МассивСтрок.Количество() Тогда 		
		Представление = СтрСоединить(МассивСтрок, Разделитель);			
	Иначе 		
		Представление = "";
	КонецЕсли;
	
	Возврат  Представление;
	
КонецФункции

#Область ТранспортныеСредстваИнтерфейс

// Возвращает строки транспортных средств по виду транспортного средства
//
// Параметры:
//  ТранспортныеСредства - ТабличнаяЧасть - табличная часть транспортных средств
//  ВидТС - ПеречислениеСсылка.Saby_ВидыТС - вид транспортного средства для получения строк
//
// Возвращаемое значение:
//   Массив - массив строк табличной части
//
Функция ПолучитьСтрокиТС(ТранспортныеСредства, ВидТС) Экспорт
	
	РезультатФункции = Новый Массив;
	
	Для Каждого СтрокаТС Из ТранспортныеСредства Цикл
		Если СтрокаТС.Вид = ВидТС Тогда
			РезультатФункции.Добавить(СтрокаТС);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Обновляет реквизиты формы связанные с транспортными средствами.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для обновления реквизитов
//
Процедура ОбновитьТранспортныеСредстваНаФорме(Форма) Экспорт
	
	ОтборПрицепов = Новый Структура;
	ОтборПрицепов.Вставить("Вид", ПредопределенноеЗначение("Перечисление.Saby_ВидыТС.Прицеп"));
	ОтборПрицепов = Новый ФиксированнаяСтруктура(ОтборПрицепов);
	
	Форма.Элементы.Прицепы.ОтборСтрок = ОтборПрицепов;
	
	СформироватьНадписьПрицепыСтрокой(Форма);
	
	СформироватьНадписьТранспортноеСредствоСтрокой(Форма);
	
КонецПроцедуры

#КонецОбласти // ТранспортныеСредстваИнтерфейс

// Добавить или заменить существующий элемент отбора динамического списка.
//
// Параметры:
//   Список - ДинамическийСписок - список, в котором требуется установить отбор.
//   РеквизитФормы - Произвольный - значение отбора.
//   ИмяПоляДинамическогоСписка - Строка - поле, по которому необходимо установить отбор.
//
Процедура УстановитьЭлементОтбораДинамическогоСписка(Список, РеквизитФормы, ИмяПоляДинамическогоСписка) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, 
		ИмяПоляДинамическогоСписка, 
		РеквизитФормы, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(РеквизитФормы));
	
КонецПроцедуры

// Обновляет представление водителей на форме
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для обновления данных
//
Процедура ОбновитьВодителейНаФорме(Форма) Экспорт
	
	ФормаОбъект = ФормаОбъект(Форма);
	
	РольВодитель = ПредопределенноеЗначение("Перечисление.Saby_РолиОтветственных.Водитель");
	
	МассивСтрокПредставления = Новый Массив;
	
	Для Каждого СтрокаОтветственного Из ФормаОбъект.ОтветственныеЛица Цикл
		Если СтрокаОтветственного.Роль <> РольВодитель Тогда
			Продолжить;
		КонецЕсли;
		СтрокаОтветственного.ФИО = ПредставлениеФИО(СтрокаОтветственного);
		СтрокаОтветственного.ВУ  = ПредставлениеВУ(СтрокаОтветственного);
		МассивСтрокПредставления.Добавить(СокрЛП(СтрокаОтветственного.ФИО));
	КонецЦикла;
	
	Форма.ВодителиСтрокой = СтрСоединить(МассивСтрокПредставления, ", ");
	Если Не ЗначениеЗаполнено(Форма.ВодителиСтрокой) Тогда
		Форма.ВодителиСтрокой = "Заполнить";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает массив структур данных по ролям юридических лиц
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для поиска элементов
//  Роли - Строка - строковые представления ролей юр лиц через запятую
//                 <продолжение описания параметра>
//  ФормаОбъект - Объект - объект формы для получения реквизитов
//  Реквизит - Строка - имя реквизита форма для заполнения данных
// Возвращаемое значение:
//   Массив - массив структур данных
//
Функция ТаблицаЮрЛиц(Форма, Роли, ФормаОбъект, Реквизит = "") Экспорт
	
	РезультатФункции = Новый Массив;
	
	МассивРолей = МассивРолей(Роли);
	
	КлючиСтруктурыДанных = "Ссылка,РольСтрокой,Роль,ПолеОсновногоТелефона,КлючСтроки,ПараметрыРеквизитаФормы";
		
	Для Каждого СтруктураРоли Из МассивРолей Цикл
		
		СтруктураДанных = Новый Структура(КлючиСтруктурыДанных);
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных, СтруктураРоли);
		
		Если ПустаяСтрока(Реквизит) Тогда
			
			Если ЗначениеЗаполнено(СтруктураРоли.РольСтрокой)
				И ЕстьРеквизитИлиСвойство(ФормаОбъект, СтруктураРоли.РольСтрокой) Тогда
				Ссылка = ФормаОбъект[СтруктураРоли.РольСтрокой];
			Иначе	
				Ссылка = Неопределено;
			КонецЕсли;
						
		Иначе 	
		    Ссылка = ФормаОбъект[Реквизит];
		КонецЕсли;
		
		СтруктураДанных.Ссылка = Ссылка;
		
		ИмяПоляТелефона = СтруктураРоли.РольСтрокой + "_Телефон";	
		Если Форма.Элементы.Найти(ИмяПоляТелефона) = Неопределено Тогда
			СтруктураДанных.ПолеОсновногоТелефона = "";
		Иначе 	
			СтруктураДанных.ПолеОсновногоТелефона = ИмяПоляТелефона;
		КонецЕсли;	
				
		РезультатФункции.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает набор данных из массива структур
//
// Параметры:
//  ТаблицаЮрЛиц - Массив - см. функцию ТаблицаЮрЛиц
//  ИмяКолонки - Строка - имя данных для выгрузки
//
// Возвращаемое значение:
//   Массив - массив выгруженных данных
//
Функция ВыгрузитьКолонкуЮрЛиц(ТаблицаЮрЛиц, ИмяКолонки) Экспорт
	
	РезультатФункции = Новый Массив;
	
	Для Каждого СтруктураДанных Из ТаблицаЮрЛиц Цикл
		РезультатФункции.Добавить(СтруктураДанных[ИмяКолонки]);
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает найденную структуру в массиве структур
//
// Параметры:
//  ТаблицаЮрЛиц - Массив - см. функцию ТаблицаЮрЛиц
//  Значение - Произвольный - значение для поиска
//  Колонка - Строка - имя данных для поиска
//
// Возвращаемое значение:
//   Структура - найденная структура из массива структур
//
Функция НайтиСтрокуЮрЛиц(ТаблицаЮрЛиц, Значение, Колонка) Экспорт
	
	РезультатФункции = Неопределено;
	
	Для Каждого СтруктураДанных Из ТаблицаЮрЛиц Цикл
		Если СтруктураДанных[Колонка] = Значение Тогда
			РезультатФункции = СтруктураДанных;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает массив ссылок ролей из строкового представления
//
// Параметры:
//  Роли - Строка - роли перечисленные через запятую
//
// Возвращаемое значение:
//   Массив - массив ссылок ПеречислениеСсылка.Saby_РолиКонтрагентов
//
Функция МассивРолей(Роли) Экспорт
	
	Если ТипЗнч(Роли) = Тип("Массив") Тогда
		Возврат Роли;
	КонецЕсли;
	
	РезультатФункции = Новый Массив;
	
	МассивСтрок = СтрРазделить(Роли, ",");
	
	ШаблонИмениПеречисления = "Перечисление.Saby_РолиКонтрагентов.%1";
	
	Для Каждого РольСтрокой Из МассивСтрок Цикл
		
		СтруктураДанных = СтруктураДанныхРолей();
		СтруктураДанных.РольСтрокой = РольСтрокой;
		Если РольСтрокой = "" Или РольСтрокой = "Оформил" Тогда
			РольСтрокой = "ПустаяСсылка";
		КонецЕсли;
		СтруктураДанных.Роль = ПредопределенноеЗначение(СтрШаблон(ШаблонИмениПеречисления, РольСтрокой));
		СтруктураДанных.КлючСтроки = 0;
		
		РезультатФункции.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СтруктураДанныхРолей() Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("РольСтрокой",             "");
	РезультатФункции.Вставить("Роль",                    "");
	РезультатФункции.Вставить("КлючСтроки",              0);
	РезультатФункции.Вставить("ПараметрыРеквизитаФормы", ПараметрыРеквизитаФормы("", ""));
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает структуру найденных контактных данных по виду или массив найденных контактных данных
//
// Параметры:
//  ТаблицаКИ - Массив - см. Saby_ТНОбщегоНазначенияСервер.КонтактнаяИнформацияИзБазы
//  Ссылка - ЛюбаяСсылка - ссылка на владельца контактной информации
//  Вид - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации
//  ПервоеЗначение - Булево - признак возврата одного значения или массива
//
// Возвращаемое значение:
//   Структура,Массив - см. СтруктураКИ 
//
Функция ПолучитьКИ(ТаблицаКИ, Ссылка, Вид, ПервоеЗначение = Истина) Экспорт
	
	Отбор = Новый Структура("Ссылка,Вид", Ссылка, Вид);
	
	НайденныеСтроки = НайтиСтрокиУниверсально(ТаблицаКИ, Отбор);
	
	Если ПервоеЗначение Тогда
		
		РезультатФункции = СтруктураКИ(Ссылка, Вид);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(РезультатФункции, НайденныеСтроки[0]);
		КонецЕсли;
		
	Иначе
		
		РезультатФункции = Новый Массив;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СтруктураКИ = СтруктураКИ(Ссылка, Вид);
			ЗаполнитьЗначенияСвойств(СтруктураКИ, НайденнаяСтрока);
			РезультатФункции.Добавить(СтруктураКИ);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает данные конактной информации
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - ссылка на владельца контактной информации
//  Вид - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации
//
// Возвращаемое значение:
//   Структура - см. в самой функции
//
Функция СтруктураКИ(Ссылка, Вид) Экспорт
	
	ПустойТип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка");
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Ссылка",        Ссылка);
	РезультатФункции.Вставить("Вид",           Вид);
	РезультатФункции.Вставить("Тип",           ПустойТип);
	РезультатФункции.Вставить("Значение",      "");
	РезультатФункции.Вставить("Представление", "");
	
	Возврат РезультатФункции;
	
КонецФункции

// Получает объект формы если он есть, иначе саму форму
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для получения объекта
//
// Возвращаемое значение:
//   Произвольный - форма или объект формы
//
Функция ФормаОбъект(Форма) Экспорт
	
	Если Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(Форма, "Объект") Тогда
		Возврат Форма.Объект;
	Иначе
		Возврат Форма;
	КонецЕсли;
	
КонецФункции

// Возвращает найденные строки в коллекции. Функция аналогична НайтиСтроки для таблицы значений,
// но можно передать массив структур.
//
// Параметры:
//  КоллекцияСтрок - МассивСтруктур,ТаблицаЗначений,ДанныеФормыКоллекция - коллекция для поиска
//  Отбор - Структура - отбор для поиска
//
// Возвращаемое значение:
//   Массив - массив найденных элементов коллекции
//
Функция НайтиСтрокиУниверсально(КоллекцияСтрок, Отбор) Экспорт
	
	Если КоллекцияСтрок = Неопределено Тогда
		РезультатФункции = Новый Массив;
	ИначеЕсли ТипЗнч(КоллекцияСтрок) = Тип("Массив") Тогда
		РезультатФункции = НайтиСтрокиВМассивеСтруктур(КоллекцияСтрок, Отбор);
	Иначе
		РезультатФункции = КоллекцияСтрок.НайтиСтроки(Отбор);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Проверяет наличие реквизита или свойства у произвольного объекта без обращения к метаданным.
//
// Параметры:
//  Объект - Произвольный - объект, у которого нужно проверить наличие реквизита или свойства;
//  Имя - Строка - имя реквизита или свойства.
//
// Возвращаемое значение:
//  Булево - Истина, если есть.
//
Функция ЕстьРеквизитИлиСвойство(Объект, Имя) Экспорт
	
	УИД = Новый УникальныйИдентификатор();
	ВременнаяСтруктура = Новый Структура(Имя, УИД);
	ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Объект);
	
	Возврат ВременнаяСтруктура[Имя] <> УИД;
	
КонецФункции

// Возвращает имя дополнительного свойства Код филиала
//
// Возвращаемое значение:
//   Строка - наименование свойства
//
Функция ИмяСвойстваКодФилиала() Экспорт
	
	Возврат "СБИС_КодФилиала";
	
КонецФункции

// Возвращает параметры необходимые для выгрузки очередного титула документа
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка - ссылка на выгружаемый документ
//
// Возвращаемое значение:
//   Структура - параметры необходимые для выгрузки очередного титула документа
//
Функция ПараметрыВыгрузки(СсылкаНаДокумент) Экспорт
	
	РезультатФункции = Новый Структура;
	
	РезультатФункции.Вставить("Этап",                 "");
	РезультатФункции.Вставить("ТипТитула",            Неопределено);
	РезультатФункции.Вставить("КодТитула",            "");
	РезультатФункции.Вставить("ИдентификаторСБИС",    "");
	
	РезультатФункции.Вставить("Ссылка",               СсылкаНаДокумент);
	РезультатФункции.Вставить("ИмяМетаданных",        "");
	РезультатФункции.Вставить("ПараметрыДляАПИ",      Неопределено);	
	РезультатФункции.Вставить("СтруктураДокумента",   Неопределено);
	РезультатФункции.Вставить("ДанныеДокумента",      Неопределено);
	
	РезультатФункции.Вставить("ДинамическийТитул",             Ложь);
	РезультатФункции.Вставить("ОтрицательныйПереход",          Ложь);
	РезультатФункции.Вставить("ПричинаОтрицательногоПерехода", "");
	
	// ФЛК
	РезультатФункции.Вставить("ВыполнитьФЛК",            Истина);
	РезультатФункции.Вставить("ПроверятьПоляСОХ",        Ложь);
	РезультатФункции.Вставить("ПроверятьПоляОтгрузчика", Ложь);
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает структуру параметров загрузки для дальнейшего вызова функции ЗагрузкаДанныхДокумента
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка - ссылка на выгружаемый документ
//
// Возвращаемое значение:
//   Структура - структура параметров с фиксированными колонками:
//     * ИдСбис - Строка - идентификатор СБИС
//     * ДанныеДокумента - Соответствие - полученные данные с онлайна
//     * Ссылка - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на документ в базе,
//       в который будут загружены данные.
//     * ИзДокумента - Булево - признак запуска загрузки из документа. Если ложь, то запуск из списка документов.
//     * ЭтоЗаполнениеСПомощьюINI - Булево - признак загрузки данных из другого документа, а не с онлайна.
//     * ДокументОснование - ДокументСсылка - ссылка на документ, на основании которого загружаются данные.
//     * ТекущийТитул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - тип титула, который необходимо загрузить.
//       Если Неопределено, то загружаются титулы полученные функцией ТитулыДляЗагрузки()
//
Функция ПараметрыЗагрузки(СсылкаНаДокумент = Неопределено) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ИдСбис",                   "");
	РезультатФункции.Вставить("ДанныеДокумента",          Новый Соответствие);
	РезультатФункции.Вставить("Ссылка",                   СсылкаНаДокумент);
	РезультатФункции.Вставить("ИзДокумента",              Ложь);
	РезультатФункции.Вставить("ИмяМетаданных",            "");

	РезультатФункции.Вставить("ЭтоЗаполнениеСПомощьюINI", Ложь);
	РезультатФункции.Вставить("ДокументОснование",        Неопределено);
	РезультатФункции.Вставить("ПараметрыОснования",       Новый Структура);
	
	РезультатФункции.Вставить("ТекущийТитул",             Неопределено);
	РезультатФункции.Вставить("ТолькоАктивныйЭтап",       Ложь);
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает параметры документа для использования в методах АПИ
//
// Параметры:
//  ИмяМетаданных - Строка - имя метаданных документа
//  СторонняяОрганизация - Булево - признак того, что титул отправляет сторонняя организация.
//
// Возвращаемое значение:
// 	Структура - параметры документа
//
Функция ПараметрыДокументаДляАПИ(ИмяМетаданных, СторонняяОрганизация = Ложь) Экспорт
		
	Если ИмяМетаданных = "Saby_ТранспортнаяНакладная" Тогда
		
		Тип             = "ConsignmentNote";
		Регламент       = "Транспортная накладная";
		Идентификатор   = "ad40d873-9d1e-47d7-b7e9-f39636b36301";
		ТипДляВыгрузки  = "ЭТрН";		
		ИмяПеречисления = "Saby_ТипТитулаЭтрН";
				
	ИначеЕсли ИмяМетаданных = "Saby_ПутевойЛист" Тогда
		
		Тип             = "Waybill";
		ТипДляВыгрузки  = "Waybill";
		ИмяПеречисления = "Saby_ТипТитулаЭПЛ";
		
		Если СторонняяОрганизация Тогда
			Регламент      = "ЭПЛ (Входящий)";
			Идентификатор  = "48e4c1ba-a877-4f16-8a25-da0cf3209bf8";
		Иначе
			Регламент      = "ЭПЛ";
			Идентификатор  = "7b589621-deec-488c-ada2-5df9db6c329e";
		КонецЕсли;
		
	ИначеЕсли ИмяМетаданных = "Saby_ЗаказНаПеревозку" Тогда
		
		Тип             = "TransportOrder";
		ТипДляВыгрузки  = "TransportOrder";
		ИмяПеречисления = "Saby_ТипТитулаЗнП";
		
		Если СторонняяОрганизация Тогда
			Регламент      = "Заказ на перевозку (Входящий)";
			Идентификатор  = "e000d24d-35a7-4a31-a692-22405b34dfbe";
		Иначе
			Регламент      = "Заказ на перевозку";
			Идентификатор  = "6c052893-6b54-4f55-baf5-83e515b5aff4";
		КонецЕсли;
		
	Иначе
		
		Тип             = "";
		Регламент       = "";
		Идентификатор   = "";
		ТипДляВыгрузки  = "";
		ИмяПеречисления = "";
		
	КонецЕсли;
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Тип",                     Тип);
	РезультатФункции.Вставить("Регламент",               Регламент);
	РезультатФункции.Вставить("ИдентификаторРегламента", Идентификатор);
	РезультатФункции.Вставить("ТипДляВыгрузки",          ТипДляВыгрузки);	
	РезультатФункции.Вставить("ИмяПеречисления",         ИмяПеречисления); 
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает имя метаданных из имени формы
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма источник вызова
//
// Возвращаемое значение:
//   Строка - имя метаданных родителя формы
//
Функция ИмяМетаданныхПоФорме(Форма) Экспорт
	
	МассивИмен = СтрРазделить(Форма.ИмяФормы, ".");
	
	Возврат МассивИмен[1];
	
КонецФункции

#Область СвойстваЭлементовФормы

// Возвращает структуру параметров для групповой установки свойст элементам формы
//
// Возвращаемое значение:
//   Структура - состоящая из массивов для установки свойств элементам формы
//
Функция ПараметрыСвойствЭлементовФормы() Экспорт 
	
	СвойстваЭлементовФормы = Новый Структура;
	СвойстваЭлементовФормы.Вставить("Видимость_Снять",           Новый Массив);
	СвойстваЭлементовФормы.Вставить("Видимость_Установить",      Новый Массив);	
	СвойстваЭлементовФормы.Вставить("Доступность_Снять",         Новый Массив);
	СвойстваЭлементовФормы.Вставить("Доступность_Установить",    Новый Массив);	
	СвойстваЭлементовФормы.Вставить("ТолькоПросмотр_Снять",      Новый Массив);
	СвойстваЭлементовФормы.Вставить("ТолькоПросмотр_Установить", Новый Массив);
	
	Возврат СвойстваЭлементовФормы;
	
КонецФункции

// Делает универсальную установку всех свойств формы согласно параметрам
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма источник вызова
//  СвойстаЭлементовФормы - Структура - см. описание функции "ПараметрыСвойствЭлементовФормы()"
//
Процедура ГрупповаяУстановкаСвойствЭлементовФормы(Форма, СвойстаЭлементовФормы) Экспорт
	
	Для Каждого МассивСвойств Из СвойстаЭлементовФормы Цикл
		
		Если Не МассивСвойств.Значение.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		МассивИмен = СтрРазделить(МассивСвойств.Ключ, "_");
		Свойство   = МассивИмен[0];
		Действие   = МассивИмен[1];
		
		Если Действие = "Установить" Тогда
			Значение = Истина;
		Иначе	
			Значение = Ложь;
		КонецЕсли;	
		
		ИзменитьСвойствоЭлементовФормы(Форма, Свойство, Значение, МассивСвойств.Значение);
		
	КонецЦикла;
		
КонецПроцедуры

// Производит групповую смену значений свойств элементов формы
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма источник вызова
//	Свойство - Строка - изменяемое свойство
//	Значение - Произвольный - устанавливаемое значение свойста
//	МассивЭлементов - Массив - элементы для изменения свойств 
//
Процедура ИзменитьСвойствоЭлементовФормы(Форма, Свойство, Значение, МассивЭлементов) Экспорт
	
	Для Каждого Элемент Из МассивЭлементов Цикл		
		Форма.Элементы[Элемент][Свойство] = Значение;				
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти // СвойстваЭлементовФормы

Функция СтруктурыСовпадают(Структура1, Структура2, РеквизитыДляСравнения) Экспорт
	
	РезультатФункции = Истина;
	
	Для Каждого ИмяРеквизита Из РеквизитыДляСравнения Цикл
		РезультатФункции = РезультатФункции И (СокрЛП(Структура1[ИмяРеквизита]) = СокрЛП(Структура2[ИмяРеквизита]));
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ЗначениеВМассив(Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Возврат Значение;
	Иначе
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(Значение);
		Возврат НовыйМассив;
	КонецЕсли;
	
КонецФункции

// Возвращает признак того, что документооборот завершен.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма на которой необходимо показать данные
//
// Возвращаемое значение:
//   Булево - Истина, если завершен
//
Функция ДокументооборотЗавершен(Форма) Экспорт
	
	ДОЗавершенОтрицательно = 5;
	ДОЗавершенПоложительно = 6;
	
	Возврат Форма.ИндексКартинки = ДОЗавершенОтрицательно Или Форма.ИндексКартинки = ДОЗавершенПоложительно;
	
КонецФункции

Процедура ВосстановитьИерархию(ИсходныеДанные, Разделитель = ".") Экспорт
	
	Если ТипЗнч(ИсходныеДанные) = Тип("Структура") Или ТипЗнч(ИсходныеДанные) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из ИсходныеДанные Цикл
			Значение = ИсходныеДанные[КлючЗначение.Ключ];
			УровниИерархии = СтрРазделить(КлючЗначение.Ключ, Разделитель);
			ПоместитьНаУровеньИерархии(ИсходныеДанные, Значение, УровниИерархии, КлючЗначение.Ключ);
			ВосстановитьИерархию(Значение, Разделитель);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ИсходныеДанные) = Тип("Массив") Тогда
		Для Каждого Значение Из ИсходныеДанные Цикл
			ВосстановитьИерархию(Значение, Разделитель);
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСоСвязаннымиТаблицами

Процедура УстановитьОтборПоСвязаннымТаблицам(Форма, СтруктураСвязанныхТаблиц,
		ИмяКлючаОсновнойТаблицы = "КлючСтроки") Экспорт
		
	ФормаОбъект = Saby_ТНОбщегоНазначенияКлиентСервер.ФормаОбъект(Форма);
	
	Для Каждого КлючЗначение Из СтруктураСвязанныхТаблиц Цикл
		ИмяОсновнойТаблицы = КлючЗначение.Ключ;
		
		СтрокаОсновнойТаблицы = Форма.Элементы[ИмяОсновнойТаблицы].ТекущаяСтрока;
		Если СтрокаОсновнойТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаОсновнойТаблицы = ФормаОбъект[ИмяОсновнойТаблицы].НайтиПоИдентификатору(СтрокаОсновнойТаблицы);
		
		ИмяКлючаСвязаннойТаблицы = ИмяКлючаОсновнойТаблицы + "_" + ИмяОсновнойТаблицы;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить(ИмяКлючаСвязаннойТаблицы, СтрокаОсновнойТаблицы[ИмяКлючаОсновнойТаблицы]);
		
		Отбор = Новый ФиксированнаяСтруктура(СтруктураПоиска);
		
		Для Каждого ИмяСвязаннойТаблицы Из КлючЗначение.Значение Цикл
			Форма.Элементы[ИмяСвязаннойТаблицы].ОтборСтрок = Отбор;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСтрокиСвязанныхТаблиц(Форма, СтруктураСвязанныхТаблиц,
		ИмяКлючаОсновнойТаблицы = "КлючСтроки") Экспорт
		
	ФормаОбъект = Saby_ТНОбщегоНазначенияКлиентСервер.ФормаОбъект(Форма);
	
	СтруктураПоиска = Новый Структура;
	
	Для Каждого КлючЗначение Из СтруктураСвязанныхТаблиц Цикл
		ИмяОсновнойТаблицы = КлючЗначение.Ключ;
		
		Для Каждого ИдентификаторСтроки Из Форма.Элементы[ИмяОсновнойТаблицы].ВыделенныеСтроки Цикл
			СтрокаОсновнойТаблицы = ФормаОбъект[ИмяОсновнойТаблицы].НайтиПоИдентификатору(ИдентификаторСтроки);
			ИмяКлючаСвязаннойТаблицы = ИмяКлючаОсновнойТаблицы + "_" + ИмяОсновнойТаблицы;
			
			СтруктураПоиска.Вставить(ИмяКлючаСвязаннойТаблицы, СтрокаОсновнойТаблицы[ИмяКлючаОсновнойТаблицы]);
			
			Для Каждого ИмяСвязаннойТаблицы Из КлючЗначение.Значение Цикл
				СтрокиДляУдаления = ФормаОбъект[ИмяСвязаннойТаблицы].НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
					ФормаОбъект[ИмяСвязаннойТаблицы].Удалить(СтрокаДляУдаления);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

Функция НовыйКлючОсновнойСтроки(Форма, ИмяОсновнойТаблицы, ИмяКлючаОсновнойТаблицы = "КлючСтроки") Экспорт
		
	ФормаОбъект = Saby_ТНОбщегоНазначенияКлиентСервер.ФормаОбъект(Форма);
	
	ПоследнийКлюч = 0;
	
	Для Каждого СтрокаОсновнойТаблицы Из ФормаОбъект[ИмяОсновнойТаблицы] Цикл
		ПоследнийКлюч = Макс(ПоследнийКлюч, СтрокаОсновнойТаблицы[ИмяКлючаОсновнойТаблицы]);
	КонецЦикла;
	
	Возврат ПоследнийКлюч + 1;
		
КонецФункции

Функция НовыйКлючСвязаннойСтроки(Форма, ИмяОсновнойТаблицы, ИмяКлючаОсновнойТаблицы = "КлючСтроки") Экспорт
	
	ФормаОбъект = Saby_ТНОбщегоНазначенияКлиентСервер.ФормаОбъект(Форма);
	
	ИдентификаторСтроки   = Форма.Элементы[ИмяОсновнойТаблицы].ТекущаяСтрока;
	СтрокаОсновнойТаблицы = ФормаОбъект[ИмяОсновнойТаблицы].НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Возврат СтрокаОсновнойТаблицы[ИмяКлючаОсновнойТаблицы];
	
КонецФункции

#КонецОбласти // РаботаСоСвязаннымиТаблицами

Функция ПараметрыРеквизитаФормы(ИмяРеквизита, ИмяЭлемента, ИдентификаторСтроки = Неопределено) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ЭтоСтрокаТаблицы",    ИдентификаторСтроки <> Неопределено);
	РезультатФункции.Вставить("ИмяРеквизита",        ИмяРеквизита);
	РезультатФункции.Вставить("ИмяЭлемента",         ИмяЭлемента);
	РезультатФункции.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	
	РезультатФункции.Вставить("ИмяИсходнойТаблицы",          "");
	РезультатФункции.Вставить("ИдентификаторИсходнойСтроки", 0);
	
	РезультатФункции.Вставить("ДополнительныеПоля",  "");
	
	РезультатФункции.Вставить("ТолькоПросмотр", Ложь);
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ФактическийАдрес(СсылкаЮрЛицо, ТаблицаЮрЛиц, ДопПараметры)
	
	АдресФакт = ДопПараметры.Значение;
	Если АдресФакт = Неопределено Тогда
		ТаблицаКИ = ДопПараметры.ТаблицаКИ;
		Если ТаблицаКИ = Неопределено Тогда
			ТаблицаКИ = Saby_ТНОбщегоНазначенияСервер.КонтактнаяИнформацияИзБазы(
				ВыгрузитьКолонкуЮрЛиц(ТаблицаЮрЛиц, "Ссылка"));
		КонецЕсли;
		
		ВидыКИ = Saby_ТНОбщегоНазначенияСервер.ВидыКонтактнойИнформации(СсылкаЮрЛицо);
		АдресФакт = ПолучитьКИ(ТаблицаКИ, СсылкаЮрЛицо, ВидыКИ.АдресФакт);
		
	КонецЕсли;
	
	Возврат АдресФакт;
	
КонецФункции

Функция НайтиСтрокиВМассивеСтруктур(КоллекцияСтрок, Отбор)
	
	РезультатФункции = Новый Массив;
	
	Для Каждого СтруктураСтроки Из КоллекцияСтрок Цикл
		
		УдовлетворяетОтбору = Истина;
		Для Каждого СоставОтбора Из Отбор Цикл
			УдовлетворяетОтбору = УдовлетворяетОтбору И СтруктураСтроки[СоставОтбора.Ключ] = СоставОтбора.Значение;
		КонецЦикла;
		
		Если УдовлетворяетОтбору Тогда
			РезультатФункции.Добавить(СтруктураСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Параметры КИ по заданному отбору
// Параметры:
//	ФормаОбъект - ФормаКлиентскогоПриложения - источник вызова
//	ДопПараметры - Структура - дополнительные параметры 
//	СтруктураПоиска - Структура - отбор для поиска строк
//
// Возвращаемое значение:
//	Структура - структура, с данными строки телефона и наличия основного номера
//
Функция ПараметрыНайденныхСтрок(ФормаОбъект, ДопПараметры, СтруктураПоиска)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("СтрокаТелефона",      Неопределено);
	РезультатФункции.Вставить("ЕстьОсновнойТелефон", Ложь);
	
	НайденныеСтроки = ФормаОбъект.КонтактныеДанные.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		РезультатФункции.ЕстьОсновнойТелефон = РезультатФункции.ЕстьОсновнойТелефон Или НайденнаяСтрока.Основной;
		
		Если ДопПараметры.Значение <> Неопределено Тогда
			Если ИдентификаторыСовпадают(НайденнаяСтрока, ДопПараметры) Тогда
				РезультатФункции.СтрокаТелефона = НайденнаяСтрока;
				РезультатФункции.СтрокаТелефона.Значение = ДопПараметры.Значение.Представление;
				РезультатФункции.СтрокаТелефона.Структура = ДопПараметры.Значение.Значение;
			ИначеЕсли НайденнаяСтрока.Значение = ДопПараметры.Значение.Представление Тогда
				РезультатФункции.СтрокаТелефона = НайденнаяСтрока;
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли ЭтаСтрокаДолжнаяБытьОсновной(РезультатФункции, ДопПараметры) Тогда
			РезультатФункции.СтрокаТелефона = НайденнаяСтрока;
			НайденнаяСтрока.Основной = Истина;
		Иначе
			Продолжить;
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Проверка совпадения идентификаторов разных объектов
// Параметры:
// 	НайденнаяСтрока - ДанныеФормы - строка для сравнения
//	ДопПараметры - Структура - доп параметры для сравнения, в том числе идентификатор
//
// Возвращаемое значение:
//  Булево - результат сравнения
//
Функция ИдентификаторыСовпадают(НайденнаяСтрока, ДопПараметры)
	
	ИдентификаторСтроки = НайденнаяСтрока.ПолучитьИдентификатор();
	Возврат ДопПараметры.ИдентификаторСтроки <> Неопределено
		И ИдентификаторСтроки = ДопПараметры.ИдентификаторСтроки;
	
КонецФункции

// Проверка что строка должна стать основной
// Параметры:
// 	РезультатФункции - Структура - данные для установки 
//	ДопПараметры - Структура - дополнительные параметры
//
// Возвращаемое значение:
//	Булево - результат проверки
//
Функция ЭтаСтрокаДолжнаяБытьОсновной(РезультатФункции, ДопПараметры)
	
	Возврат ДопПараметры.Значение = Неопределено И РезультатФункции.СтрокаТелефона = Неопределено;
	
КонецФункции

// Установка основного телефона
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - источник вызова	
//	СтрокаЮрЛица - ДанныеФормы - строка таблицы  
//	СтрокаТелефона - ДанныеФормы - строка таблицы
//
Процедура ЗаполнитьПолеОсновногоТелефона(Форма, СтрокаЮрЛица, СтрокаТелефона)
	
	ПараметрыРеквизитаФормы = СтрокаЮрЛица.ПараметрыРеквизитаФормы;
	
	Если ПараметрыРеквизитаФормы.ЭтоСтрокаТаблицы Тогда
		
		ЗаполнитьКолонкуОсновногоТелефонаВСтроке(Форма, ПараметрыРеквизитаФормы, СтрокаТелефона);
		
	ИначеЕсли СтрокаТелефона <> Неопределено И СтрокаТелефона.Основной Тогда
		
		Форма[СтрокаЮрЛица.ПолеОсновногоТелефона] = СтрокаТелефона.Значение;
		
	ИначеЕсли СтрокаТелефона = Неопределено Тогда
			
		Форма[СтрокаЮрЛица.ПолеОсновногоТелефона] = "";
	
	Иначе
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьКолонкуОсновногоТелефонаВСтроке(Форма, ПараметрыРеквизитаФормы, СтрокаТелефона)
		
	ФормаОбъект = ФормаОбъект(Форма);
	СтрокаДанныхЮрЛица = ФормаОбъект.ДанныеЮрЛиц.НайтиПоИдентификатору(ПараметрыРеквизитаФормы.ИдентификаторСтроки);
	
	Если СтрокаДанныхЮрЛица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТелефона <> Неопределено И СтрокаТелефона.Основной Тогда
		
		СтрокаДанныхЮрЛица.Телефон = СтрокаТелефона.Значение;
		
	ИначеЕсли СтрокаТелефона = Неопределено Тогда				
		
		СтрокаДанныхЮрЛица.Телефон = "";			
		
	Иначе
		Возврат;
	КонецЕсли;
			
КонецПроцедуры

#Область ВосстановлениеИерархии

Процедура ПоместитьНаУровеньИерархии(ИсходныеДанные, Значение, УровниИерархии, ИсходныйКлюч)
	
	Если УровниИерархии.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	НовыйУровеньИерархии = ИсходныеДанные;
	ИмяПоследнегоУровня  = УровниИерархии[УровниИерархии.ВГраница()];
	
	Для Каждого ИмяУровня Из УровниИерархии Цикл
		
		Если Не УровеньИерархииСуществует(НовыйУровеньИерархии, ИмяУровня) Тогда
			ДобавитьУровеньИерархии(НовыйУровеньИерархии, ИмяУровня);
		КонецЕсли;
		
		Если ИмяУровня <> ИмяПоследнегоУровня Тогда
			НовыйУровеньИерархии = НовыйУровеньИерархии[ИмяУровня];
		КонецЕсли;
		
	КонецЦикла;
	
	НовыйУровеньИерархии.Вставить(ИмяУровня, Значение);
	ИсходныеДанные.Удалить(ИсходныйКлюч);
	
КонецПроцедуры

Функция УровеньИерархииСуществует(ТекущийУровеньИерархии, ИмяУровня)
	
	Если ТипЗнч(ТекущийУровеньИерархии) = Тип("Соответствие") Тогда
		Возврат ТекущийУровеньИерархии[ИмяУровня] <> Неопределено;
	ИначеЕсли ТипЗнч(ТекущийУровеньИерархии) = Тип("Структура") Тогда
		Возврат ТекущийУровеньИерархии.Свойство(ИмяУровня);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьУровеньИерархии(ТекущийУровеньИерархии, ИмяУровня)
	
	Если ТипЗнч(ТекущийУровеньИерархии) = Тип("Соответствие") Тогда
		ТекущийУровеньИерархии.Вставить(ИмяУровня, Новый Соответствие);
	ИначеЕсли ТипЗнч(ТекущийУровеньИерархии) = Тип("Структура") Тогда
		ТекущийУровеньИерархии.Вставить(ИмяУровня, Новый Структура);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ВосстановлениеИерархии

Процедура СформироватьНадписьПрицепыСтрокой(Форма)
	
	Если Не ЕстьРеквизитИлиСвойство(Форма, "ПрицепыСтрокой") Тогда
		Возврат;
	КонецЕсли;
	
	ФормаОбъект = ФормаОбъект(Форма);
	
	СтрокиПрицепов = ПолучитьСтрокиТС(
		ФормаОбъект.ТранспортныеСредства,
		ПредопределенноеЗначение("Перечисление.Saby_ВидыТС.Прицеп"));
	
	МассивНаименований = Новый Массив;
	Для Каждого СтрокаПрицепа Из СтрокиПрицепов Цикл
		МассивНаименований.Добавить(СтрокаПрицепа.РегистрационныйНомер);
	КонецЦикла;
	
	ПрицепыСтрокой = СтрСоединить(МассивНаименований, ", ");
	Если Не ЗначениеЗаполнено(ПрицепыСтрокой) Тогда
		ПрицепыСтрокой = "Заполнить";
	КонецЕсли;
	
	Форма.ПрицепыСтрокой = ПрицепыСтрокой;
	
КонецПроцедуры

Процедура СформироватьНадписьТранспортноеСредствоСтрокой(Форма)
	
	ФормаОбъект = Saby_ТНОбщегоНазначенияКлиентСервер.ФормаОбъект(Форма);
	
	СтрокиАвтомобилей = Saby_ТНОбщегоНазначенияКлиентСервер.ПолучитьСтрокиТС(
		ФормаОбъект.ТранспортныеСредства,
		ПредопределенноеЗначение("Перечисление.Saby_ВидыТС.Автомобиль"));
	
	Если СтрокиАвтомобилей.Количество() > 0 Тогда
		Форма.ТранспортноеСредствоСтрокой = СтрокиАвтомобилей[0].РегистрационныйНомер;
	Иначе
		Форма.ТранспортноеСредствоСтрокой = "Заполнить";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
