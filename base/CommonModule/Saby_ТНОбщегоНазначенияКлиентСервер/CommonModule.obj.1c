
#Область ПрограммныйИнтерфейс

#Область ДанныеЮрЛиц

Процедура ОбновитьАдресаПогрузкиДоставки(Форма, ДопПараметры) Экспорт
	
	ФормаОбъект = ФормаОбъект(Форма);
	
	ТаблицаЮрЛиц = ДопПараметры.ТаблицаЮрЛиц;
	Если ТаблицаЮрЛиц = Неопределено Тогда
		ТаблицаЮрЛиц = ТаблицаЮрЛиц(ДопПараметры.Роли, ФормаОбъект);
	КонецЕсли;
	
	СтрокаОтправителя = НайтиСтрокуЮрЛиц(ТаблицаЮрЛиц, "Отправитель", "РольСтрока");
	Если СтрокаОтправителя <> Неопределено Тогда
		
		АдресФакт = ФактическийАдрес(СтрокаОтправителя.Ссылка, ТаблицаЮрЛиц, ДопПараметры);
		
		ФормаОбъект.Погрузка_Адрес        = АдресФакт.Представление;
		ФормаОбъект.АдресПогрузкиЗначение = Saby_ТНОбщегоНазначенияСервер.АдресВФорматеОбмена(АдресФакт.Значение);
		
	КонецЕсли;
	
	СтрокаПолучателя = НайтиСтрокуЮрЛиц(ТаблицаЮрЛиц, "Получатель", "РольСтрока");
	Если СтрокаПолучателя <> Неопределено Тогда
		
		АдресФакт = ФактическийАдрес(СтрокаПолучателя.Ссылка, ТаблицаЮрЛиц, ДопПараметры);
		
		ФормаОбъект.Отправитель_АдресДоставки = АдресФакт.Представление;
		ФормаОбъект.АдресДоставкиЗначение     = Saby_ТНОбщегоНазначенияСервер.АдресВФорматеОбмена(АдресФакт.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьОсновнойНомерТелефона(Форма, ДопПараметры) Экспорт
	
	ФормаОбъект = ФормаОбъект(Форма);
	
	ТаблицаЮрЛиц = ДопПараметры.ТаблицаЮрЛиц;
	Если ТаблицаЮрЛиц = Неопределено Тогда
		ТаблицаЮрЛиц = ТаблицаЮрЛиц(ДопПараметры.Роли, ФормаОбъект);
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Роль", Неопределено);
	СтруктураПоиска.Вставить("Тип",  ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
	Для Каждого СтрокаЮрЛица Из ТаблицаЮрЛиц Цикл
		
		Если СтрокаЮрЛица.ПолеОсновногоТелефона = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.Роль = СтрокаЮрЛица.Роль;
		
		СтрокаТелефона = Неопределено;
		ЕстьОсновнойТелефон = Ложь;
		
		НайденныеСтроки = ФормаОбъект.КонтактныеДанные.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если ДопПараметры.Значение <> Неопределено Тогда
				ИдентификаторСтроки = НайденнаяСтрока.ПолучитьИдентификатор();
				Если ДопПараметры.ИдентификаторСтроки <> Неопределено И ИдентификаторСтроки = ДопПараметры.ИдентификаторСтроки Тогда
					СтрокаТелефона = НайденнаяСтрока;
					СтрокаТелефона.Значение = ДопПараметры.Значение.Представление;
					СтрокаТелефона.Структура = ДопПараметры.Значение.Значение;
				ИначеЕсли НайденнаяСтрока.Значение = ДопПараметры.Значение.Представление Тогда
					СтрокаТелефона = НайденнаяСтрока;
				КонецЕсли;
			ИначеЕсли ДопПараметры.Значение = Неопределено И СтрокаТелефона = Неопределено Тогда
				СтрокаТелефона = НайденнаяСтрока;
				НайденнаяСтрока.Основной = Истина;
			КонецЕсли;
			
			ЕстьОсновнойТелефон = ЕстьОсновнойТелефон Или НайденнаяСтрока.Основной;
			
		КонецЦикла;
		
		Если ДопПараметры.Значение <> Неопределено И СтрокаТелефона = Неопределено Тогда
			Если ФормаОбъект.КонтактныеДанные.Количество() > 0 Тогда
				СтрокаТелефона = ФормаОбъект.КонтактныеДанные[ФормаОбъект.КонтактныеДанные.Количество() - 1];
			Иначе
				СтрокаТелефона = ФормаОбъект.КонтактныеДанные.Добавить();
			КонецЕсли;
			СтрокаТелефона.Роль      = СтрокаЮрЛица.Роль;
			СтрокаТелефона.Тип       = СтруктураПоиска.Тип;
			СтрокаТелефона.Значение  = ДопПараметры.Значение.Представление;
			СтрокаТелефона.Структура = ДопПараметры.Значение.Значение;
			
			Если Не ЕстьОсновнойТелефон Тогда
				СтрокаТелефона.Основной = Истина;
			КонецЕсли;
			
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
		Если СтрокаТелефона <> Неопределено Тогда
			Если СтрокаТелефона.Основной Тогда
				Форма[СтрокаЮрЛица.ПолеОсновногоТелефона] = СтрокаТелефона.Значение;
			КонецЕсли;
		Иначе
			Форма[СтрокаЮрЛица.ПолеОсновногоТелефона] = "";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДопПараметрыОбновленияКИ(Роли = "", ТаблицаЮрЛиц = Неопределено,
		ТаблицаКИ = Неопределено, Значение = Неопределено) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Роли",                Роли);
	РезультатФункции.Вставить("ТаблицаЮрЛиц",        ТаблицаЮрЛиц);
	РезультатФункции.Вставить("ТаблицаКИ",           ТаблицаКИ);
	РезультатФункции.Вставить("Значение",            Значение);
	РезультатФункции.Вставить("ИдентификаторСтроки", Неопределено);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ОчиститьДанныеЮрЛицПоРолям(Роли, ТаблицаДляОчистки) Экспорт
	
	ИндексСтроки = 0;
	Пока ИндексСтроки < ТаблицаДляОчистки.Количество() Цикл
		
		СтрокаДанных = ТаблицаДляОчистки[ИндексСтроки];
		
		Если Роли.Найти(СтрокаДанных.Роль) <> Неопределено Тогда
			ТаблицаДляОчистки.Удалить(ИндексСтроки);
		Иначе
			ИндексСтроки = ИндексСтроки + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ДанныеЮрЛиц

Функция ПредставлениеВУ(Данные) Экспорт
		
	Массив = Новый Массив;
	Массив.Добавить("СерияВУ");
	Массив.Добавить("НомерВУ");
		
	Возврат ТекстовоеПредставлениеДанных(Данные, Массив, " №", Истина);
	
КонецФункции

Функция ПредставлениеФИО(Данные) Экспорт
		
	Массив = Новый Массив;
	Массив.Добавить("Фамилия");
	Массив.Добавить("Имя");
	Массив.Добавить("Отчество");
	
	Возврат ТекстовоеПредставлениеДанных(Данные, Массив, " ");
	
КонецФункции

// Для сборки текстового представления из структуры
// Данные - Структура
// Реквизиты - Массив
// Разделитель - Строка
// Включая пустые - Булево
Функция ТекстовоеПредставлениеДанных(Данные, Реквизиты, Разделитель, ВключаяПустые = Ложь) Экспорт
	
	МассивСтрок = Новый Массив;
	
	Для Каждого Реквизит Из Реквизиты Цикл 
		
		Если Не ВключаяПустые И Не ЗначениеЗаполнено(Данные[Реквизит]) Тогда 
			Продолжить;
		КонецЕсли;
				
		МассивСтрок.Добавить(СокрЛП(Данные[Реквизит]));
		
	КонецЦикла;
	
	Если МассивСтрок.Количество() Тогда 		
		Представление = СтрСоединить(МассивСтрок, Разделитель);			
	Иначе 		
		Представление = "";
	КонецЕсли;
	
	Возврат  Представление;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

Функция ТаблицаЮрЛиц(Роли, ФормаОбъект) Экспорт
	
	//МассивТиповСсылок = Новый Массив;
	//МассивТиповСсылок.Добавить(Тип("СправочникСсылка.Организации"));
	//МассивТиповСсылок.Добавить(Тип("СправочникСсылка.Контрагенты"));
	//
	//ОписаниеТипаСтроки = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(32, ДопустимаяДлина.Переменная));
	//ОписаниеТипаРоли   = Новый ОписаниеТипов("ПеречислениеСсылка.Saby_РолиКонтрагентов");
	//
	//РезультатФункции = Новый ТаблицаЗначений;
	//РезультатФункции.Колонки.Добавить("Ссылка",                Новый ОписаниеТипов(МассивТиповСсылок));
	//РезультатФункции.Колонки.Добавить("РольСтрока",            ОписаниеТипаСтроки);
	//РезультатФункции.Колонки.Добавить("Роль",                  ОписаниеТипаРоли);
	//РезультатФункции.Колонки.Добавить("ПолеОсновногоТелефона", ОписаниеТипаСтроки);
	
	РезультатФункции = Новый Массив;
	
	МассивРолей = МассивРолей(Роли);
	
	Для Каждого СтруктураРоли Из МассивРолей Цикл
		
		Если СтруктураРоли.РольСтрока = "Отправитель" Тогда
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Ссылка",                ФормаОбъект.Отправитель);
			СтруктураДанных.Вставить("РольСтрока",            СтруктураРоли.РольСтрока);
			СтруктураДанных.Вставить("Роль",                  СтруктураРоли.Роль);
			СтруктураДанных.Вставить("ПолеОсновногоТелефона", "Грузоотправитель_Телефон");
			
			РезультатФункции.Добавить(СтруктураДанных);
			
		ИначеЕсли СтруктураРоли.РольСтрока = "Получатель" Тогда
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Ссылка",                ФормаОбъект.Получатель);
			СтруктураДанных.Вставить("РольСтрока",            СтруктураРоли.РольСтрока);
			СтруктураДанных.Вставить("Роль",                  СтруктураРоли.Роль);
			СтруктураДанных.Вставить("ПолеОсновногоТелефона", "Грузополучатель_Телефон");
			
			РезультатФункции.Добавить(СтруктураДанных);
			
		ИначеЕсли СтруктураРоли.РольСтрока = "Перевозчик" Тогда
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Ссылка",                ФормаОбъект.Перевозчик);
			СтруктураДанных.Вставить("РольСтрока",            СтруктураРоли.РольСтрока);
			СтруктураДанных.Вставить("Роль",                  СтруктураРоли.Роль);
			СтруктураДанных.Вставить("ПолеОсновногоТелефона", "Перевозчик_Телефон");
			
			РезультатФункции.Добавить(СтруктураДанных);
			
		ИначеЕсли СтруктураРоли.РольСтрока = "Отгрузчик" Тогда
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Ссылка",                ФормаОбъект.Отгрузчик);
			СтруктураДанных.Вставить("РольСтрока",            СтруктураРоли.РольСтрока);
			СтруктураДанных.Вставить("Роль",                  СтруктураРоли.Роль);
			СтруктураДанных.Вставить("ПолеОсновногоТелефона", "Отгрузка_Телефон");
			
			РезультатФункции.Добавить(СтруктураДанных);
			
		ИначеЕсли СтруктураРоли.РольСтрока = "ВладелецОбъекта" Тогда
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Ссылка",                ФормаОбъект.ВладелецОбъекта);
			СтруктураДанных.Вставить("РольСтрока",            СтруктураРоли.РольСтрока);
			СтруктураДанных.Вставить("Роль",                  СтруктураРоли.Роль);
			СтруктураДанных.Вставить("ПолеОсновногоТелефона", "Владелец_Телефон");
			
			РезультатФункции.Добавить(СтруктураДанных);
			
		ИначеЕсли СтруктураРоли.РольСтрока = "Заказчик" Тогда
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Ссылка",                ФормаОбъект.Заказчик);
			СтруктураДанных.Вставить("РольСтрока",            СтруктураРоли.РольСтрока);
			СтруктураДанных.Вставить("Роль",                  СтруктураРоли.Роль);
			СтруктураДанных.Вставить("ПолеОсновногоТелефона", "");
			
			РезультатФункции.Добавить(СтруктураДанных);
			
		ИначеЕсли СтруктураРоли.РольСтрока = "" Тогда
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Ссылка",                ФормаОбъект.Оформил);
			СтруктураДанных.Вставить("РольСтрока",            СтруктураРоли.РольСтрока);
			СтруктураДанных.Вставить("Роль",                  СтруктураРоли.Роль);
			СтруктураДанных.Вставить("ПолеОсновногоТелефона", "Оформил_Телефон");
			
			РезультатФункции.Добавить(СтруктураДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ВыгрузитьКолонкуЮрЛиц(ТаблицаЮрЛиц, ИмяКолонки) Экспорт
	
	РезультатФункции = Новый Массив;
	
	Для Каждого СтруктураДанных Из ТаблицаЮрЛиц Цикл
		РезультатФункции.Добавить(СтруктураДанных[ИмяКолонки]);
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция НайтиСтрокуЮрЛиц(ТаблицаЮрЛиц, Значение, Колонка) Экспорт
	
	РезультатФункции = Неопределено;
	
	Для Каждого СтруктураДанных Из ТаблицаЮрЛиц Цикл
		Если СтруктураДанных[Колонка] = Значение Тогда
			РезультатФункции = СтруктураДанных;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция МассивРолей(Роли) Экспорт
	
	РезультатФункции = Новый Массив;
	
	МассивСтрок = СтрРазделить(Роли, ",");
	
	ШаблонИмениПеречисления = "Перечисление.Saby_РолиКонтрагентов.%1";
	
	Для Каждого РольСтрока Из МассивСтрок Цикл
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("РольСтрока", РольСтрока);
		Если РольСтрока = "" Тогда
			РольСтрока = "ПустаяСсылка";
		КонецЕсли;
		СтруктураДанных.Вставить("Роль", ПредопределенноеЗначение(СтрШаблон(ШаблонИмениПеречисления, РольСтрока)));
		
		РезультатФункции.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьКИ(ТаблицаКИ, Ссылка, Вид, ПервоеЗначение = Истина) Экспорт
	
	Отбор = Новый Структура("Ссылка,Вид", Ссылка, Вид);
	
	НайденныеСтроки = НайтиСтрокиУниверсально(ТаблицаКИ, Отбор);
	
	Если ПервоеЗначение Тогда
		
		РезультатФункции = СтруктураКИ(Ссылка, Вид);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(РезультатФункции, НайденныеСтроки[0]);
		КонецЕсли;
		
	Иначе
		
		РезультатФункции = Новый Массив;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СтруктураКИ = СтруктураКИ(Ссылка, Вид);
			ЗаполнитьЗначенияСвойств(СтруктураКИ, НайденнаяСтрока);
			РезультатФункции.Добавить(СтруктураКИ);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СтруктураКИ(Ссылка, Вид) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Ссылка",        Ссылка);
	РезультатФункции.Вставить("Вид",           Вид);
	РезультатФункции.Вставить("Тип",           ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка"));
	РезультатФункции.Вставить("Значение",      "");
	РезультатФункции.Вставить("Представление", "");
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеЭлементаМассива(Массив, НомерЭлемента) Экспорт
	
	Попытка 
		Значение = Массив[НомерЭлемента];
	Исключение	
	    Значение = "";
	КонецПопытки;
	
	Возврат Значение;

КонецФункции

Функция ФормаОбъект(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Возврат Форма.Объект;
	Иначе
		Возврат Форма;
	КонецЕсли;
	
КонецФункции

Функция НайтиСтрокиУниверсально(КоллекцияСтрок, Отбор) Экспорт
	
	Если КоллекцияСтрок = Неопределено Тогда
		РезультатФункции = Новый Массив;
	ИначеЕсли ТипЗнч(КоллекцияСтрок) = Тип("Массив") Тогда
		РезультатФункции = НайтиСтрокиВМассивеСтруктур(КоллекцияСтрок, Отбор);
	Иначе
		РезультатФункции = КоллекцияСтрок.НайтиСтроки(Отбор);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ФактическийАдрес(СсылкаЮрЛицо, ТаблицаЮрЛиц, ДопПараметры)
	
	АдресФакт = ДопПараметры.Значение;
	Если АдресФакт = Неопределено Тогда
		ТаблицаКИ = ДопПараметры.ТаблицаКИ;
		Если ТаблицаКИ = Неопределено Тогда
			ТаблицаКИ = Saby_ТНОбщегоНазначенияСервер.КонтактнаяИнформацияИзБазы(
				ВыгрузитьКолонкуЮрЛиц(ТаблицаЮрЛиц, "Ссылка")
			);
		КонецЕсли;
		
		ВидыКИ = Saby_ТНОбщегоНазначенияСервер.ВидыКонтактнойИнформации(СсылкаЮрЛицо);
		АдресФакт = ПолучитьКИ(ТаблицаКИ, СсылкаЮрЛицо, ВидыКИ.АдресФакт);
		
	КонецЕсли;
	
	Возврат АдресФакт;
	
КонецФункции

Функция НайтиСтрокиВМассивеСтруктур(КоллекцияСтрок, Отбор)
	
	РезультатФункции = Новый Массив;
	
	Для Каждого СтруктураСтроки Из КоллекцияСтрок Цикл
		
		УдовлетворяетОтбору = Истина;
		Для Каждого СоставОтбора Из Отбор Цикл
			УдовлетворяетОтбору = УдовлетворяетОтбору И СтруктураСтроки[СоставОтбора.Ключ] = СоставОтбора.Значение;
		КонецЦикла;
		
		Если УдовлетворяетОтбору Тогда
			РезультатФункции.Добавить(СтруктураСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
