
#Область ПрограммныйИнтерфейс

#Область ДанныеЮрЛиц

// Обновляет данные по адресам доставки и погрузки на форме
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для обновления данных
//  ДопПараметры - Структура - структура дополнительных параметров для обновления
//
Процедура ОбновитьАдресаПогрузкиДоставки(Форма, ДопПараметры) Экспорт
	
	ФормаОбъект = ФормаОбъект(Форма);
	
	ТаблицаЮрЛиц = ДопПараметры.ТаблицаЮрЛиц;
	Если ТаблицаЮрЛиц = Неопределено Тогда
		ТаблицаЮрЛиц = ТаблицаЮрЛиц(ДопПараметры.Роли, ФормаОбъект);
	КонецЕсли;
	
	СтрокаОтправителя = НайтиСтрокуЮрЛиц(ТаблицаЮрЛиц, "Отправитель", "РольСтрока");
	Если СтрокаОтправителя <> Неопределено Тогда
		
		АдресФакт = ФактическийАдрес(СтрокаОтправителя.Ссылка, ТаблицаЮрЛиц, ДопПараметры);
		
		ФормаОбъект.Погрузка_Адрес        = АдресФакт.Представление;
		ФормаОбъект.АдресПогрузкиЗначение = Saby_ТНОбщегоНазначенияСервер.АдресВФорматеОбмена(АдресФакт.Значение);
		
	КонецЕсли;
	
	СтрокаПолучателя = НайтиСтрокуЮрЛиц(ТаблицаЮрЛиц, "Получатель", "РольСтрока");
	Если СтрокаПолучателя <> Неопределено Тогда
		
		АдресФакт = ФактическийАдрес(СтрокаПолучателя.Ссылка, ТаблицаЮрЛиц, ДопПараметры);
		
		ФормаОбъект.Отправитель_АдресДоставки = АдресФакт.Представление;
		ФормаОбъект.АдресДоставкиЗначение     = Saby_ТНОбщегоНазначенияСервер.АдресВФорматеОбмена(АдресФакт.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет данные по основным телефонам на форме
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для обновления данных
//  ДопПараметры - Структура - структура дополнительных параметров для обновления
//
Процедура ОбновитьОсновнойНомерТелефона(Форма, ДопПараметры) Экспорт
	
	ФормаОбъект = ФормаОбъект(Форма);
	
	ТаблицаЮрЛиц = ДопПараметры.ТаблицаЮрЛиц;
	Если ТаблицаЮрЛиц = Неопределено Тогда
		ТаблицаЮрЛиц = ТаблицаЮрЛиц(ДопПараметры.Роли, ФормаОбъект);
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Роль", Неопределено);
	СтруктураПоиска.Вставить("Тип",  ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
	Для Каждого СтрокаЮрЛица Из ТаблицаЮрЛиц Цикл
		
		Если СтрокаЮрЛица.ПолеОсновногоТелефона = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.Роль = СтрокаЮрЛица.Роль;
		
		ПараметрыНайденныхСтрок = ПараметрыНайденныхСтрок(ФормаОбъект, ДопПараметры, СтруктураПоиска);
		СтрокаТелефона = ПараметрыНайденныхСтрок.СтрокаТелефона;
		
		Если ДопПараметры.Значение <> Неопределено И СтрокаТелефона = Неопределено Тогда
			Если ДопПараметры.ИдентификаторСтроки <> Неопределено Тогда
				СтрокаТелефона = ФормаОбъект.КонтактныеДанные.НайтиПоИдентификатору(ДопПараметры.ИдентификаторСтроки);
			Иначе
				СтрокаТелефона = ФормаОбъект.КонтактныеДанные.Добавить();
			КонецЕсли;
			
			СтрокаТелефона.Роль      = СтрокаЮрЛица.Роль;
			СтрокаТелефона.Тип       = СтруктураПоиска.Тип;
			СтрокаТелефона.Значение  = ДопПараметры.Значение.Представление;
			СтрокаТелефона.Структура = ДопПараметры.Значение.Значение;
			
			Если Не ПараметрыНайденныхСтрок.ЕстьОсновнойТелефон Тогда
				СтрокаТелефона.Основной = Истина;
			КонецЕсли;
			
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
		ЗаполнитьПолеОсновногоТелефона(Форма, СтрокаЮрЛица, СтрокаТелефона);
		
	КонецЦикла;
	
КонецПроцедуры

// Дополнительные параметры для обновления КИ
// Параметры:
//  Роли - Массив - роли юр лиц, которые обновляем  
//  ТаблицаЮрЛиц - ТаблицаЗначений - данные по юрлицам
//  ТаблицаКИ - ТаблицаЗначений - таблица с данными КИ 
//  Значение - Строка - значение КИ
// Возвращаемое значение:
//  Структура - дополнительные параметры КИ
Функция ДопПараметрыОбновленияКИ(Роли, ТаблицаЮрЛиц = Неопределено,
		ТаблицаКИ = Неопределено, Значение = Неопределено) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Роли",                Роли);
	РезультатФункции.Вставить("ТаблицаЮрЛиц",        ТаблицаЮрЛиц);
	РезультатФункции.Вставить("ТаблицаКИ",           ТаблицаКИ);
	РезультатФункции.Вставить("Значение",            Значение);
	РезультатФункции.Вставить("ИдентификаторСтроки", Неопределено);
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ДанныеЮрЛиц

// Возвращает строковое представление водительского удостоверения
//
// Параметры:
//  Данные - Структура - структура данных водительского удостоверения
//
// Возвращаемое значение:
//   Строка - текстовое представление водительского удостоверения
//
Функция ПредставлениеВУ(Данные) Экспорт
		
	Массив = Новый Массив;
	Массив.Добавить("СерияВУ");
	Массив.Добавить("НомерВУ");
		
	СерияНомер = ТекстовоеПредставлениеДанных(Данные, Массив, " №");
	
	НовыеДанные = Новый Структура;
	НовыеДанные.Вставить("СерияНомерВУ", СерияНомер);
	НовыеДанные.Вставить("ДатаВыдачиВУ", Формат(Данные.ДатаВыдачиВУ, "ДФ=dd.MM.yyyy"));
	
	Массив = Новый Массив;
	Массив.Добавить("СерияНомерВУ");
	Массив.Добавить("ДатаВыдачиВУ");
	
	СерияНомерДатаВУ = ТекстовоеПредставлениеДанных(НовыеДанные, Массив, " от ");
	Возврат СерияНомерДатаВУ;
	
КонецФункции

// Возвращает строковое представление ФИО
//
// Параметры:
//  Данные - Структура - структура данных ФИО
//
// Возвращаемое значение:
//   Строка - текстовое представление ФИО
//
Функция ПредставлениеФИО(Данные) Экспорт
	
	ЕстьНеобходимыеСвойства = ЕстьРеквизитИлиСвойство("Фамилия", Данные)
		И ЕстьРеквизитИлиСвойство("Имя", Данные)
		И ЕстьРеквизитИлиСвойство("Отчество", Данные);
	
	Если Не ЕстьНеобходимыеСвойства Тогда
		Возврат "";
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить("Фамилия");
	Массив.Добавить("Имя");
	Массив.Добавить("Отчество");
	
	Возврат ТекстовоеПредставлениеДанных(Данные, Массив, " ");
	
КонецФункции

// Для сборки текстового представления из структуры
//
// Параметры: 
// 	Данные - Структура - данные для представления
// 	Реквизиты - Массив - реквизиты, участвующие в представлении
// 	Разделитель - Строка - разделитель реквизитов в представлении
// 	ВключаяПустые - Булево - признак включения пустых значений в представление
//
// Возвращаемое значение:
//	Строка - представление данных строкой
//
Функция ТекстовоеПредставлениеДанных(Данные, Реквизиты, Разделитель, ВключаяПустые = Ложь) Экспорт
	
	МассивСтрок = Новый Массив;
	
	Для Каждого Реквизит Из Реквизиты Цикл 
		
		Если Не ВключаяПустые И Не ЗначениеЗаполнено(Данные[Реквизит]) Тогда 
			Продолжить;
		КонецЕсли;
				
		МассивСтрок.Добавить(СокрЛП(Данные[Реквизит]));
		
	КонецЦикла;
	
	Если МассивСтрок.Количество() Тогда 		
		Представление = СтрСоединить(МассивСтрок, Разделитель);			
	Иначе 		
		Представление = "";
	КонецЕсли;
	
	Возврат  Представление;
	
КонецФункции

#Область ТранспортныеСредстваИнтерфейс

// Возвращает строки транспортных средств по виду транспортного средства
//
// Параметры:
//  ТранспортныеСредства - ТабличнаяЧасть - табличная часть транспортных средств
//  ВидТС - ПеречислениеСсылка.Saby_ВидыТС - вид транспортного средства для получения строк
//
// Возвращаемое значение:
//   Массив - массив строк табличной части
//
Функция ПолучитьСтрокиТС(ТранспортныеСредства, ВидТС) Экспорт
	
	РезультатФункции = Новый Массив;
	
	Для Каждого СтрокаТС Из ТранспортныеСредства Цикл
		Если СтрокаТС.Вид = ВидТС Тогда
			РезультатФункции.Добавить(СтрокаТС);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ТранспортныеСредстваИнтерфейс

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает массив структур данных по ролям юридических лиц
//
// Параметры:
//  Роли - Строка - строковые представления ролей юр лиц через запятую
//                 <продолжение описания параметра>
//  ФормаОбъект - Объект - объект формы для получения реквизитов
//
// Возвращаемое значение:
//   Массив - массив структур данных
//
Функция ТаблицаЮрЛиц(Роли, ФормаОбъект) Экспорт
	
	РезультатФункции = Новый Массив;
	
	МассивРолей = МассивРолей(Роли);
	
	КлючиСтруктурыДанных = "Ссылка,РольСтрока,Роль,ПолеОсновногоТелефона";
	
	Для Каждого СтруктураРоли Из МассивРолей Цикл
		
		Если СтруктураРоли.РольСтрока = "Отправитель" Тогда
			СтруктураДанных = Новый Структура(КлючиСтруктурыДанных);
			СтруктураДанных.Ссылка                = ФормаОбъект.Отправитель;
			СтруктураДанных.РольСтрока            = СтруктураРоли.РольСтрока;
			СтруктураДанных.Роль                  = СтруктураРоли.Роль;
			СтруктураДанных.ПолеОсновногоТелефона = "Грузоотправитель_Телефон";
			
			РезультатФункции.Добавить(СтруктураДанных);
			
		ИначеЕсли СтруктураРоли.РольСтрока = "Получатель" Тогда
			СтруктураДанных = Новый Структура(КлючиСтруктурыДанных);
			СтруктураДанных.Ссылка                = ФормаОбъект.Получатель;
			СтруктураДанных.РольСтрока            = СтруктураРоли.РольСтрока;
			СтруктураДанных.Роль                  = СтруктураРоли.Роль;
			СтруктураДанных.ПолеОсновногоТелефона = "Грузополучатель_Телефон";
			
			РезультатФункции.Добавить(СтруктураДанных);
			
		ИначеЕсли СтруктураРоли.РольСтрока = "Перевозчик" Тогда
			СтруктураДанных = Новый Структура(КлючиСтруктурыДанных);
			СтруктураДанных.Ссылка                = ФормаОбъект.Перевозчик;
			СтруктураДанных.РольСтрока            = СтруктураРоли.РольСтрока;
			СтруктураДанных.Роль                  = СтруктураРоли.Роль;
			СтруктураДанных.ПолеОсновногоТелефона = "Перевозчик_Телефон";
			
			РезультатФункции.Добавить(СтруктураДанных);
			
		ИначеЕсли СтруктураРоли.РольСтрока = "Отгрузчик" Тогда
			СтруктураДанных = Новый Структура(КлючиСтруктурыДанных);
			СтруктураДанных.Ссылка                = ФормаОбъект.Отгрузчик;
			СтруктураДанных.РольСтрока            = СтруктураРоли.РольСтрока;
			СтруктураДанных.Роль                  = СтруктураРоли.Роль;
			СтруктураДанных.ПолеОсновногоТелефона = "Отгрузка_Телефон";
			
			РезультатФункции.Добавить(СтруктураДанных);
			
		ИначеЕсли СтруктураРоли.РольСтрока = "ВладелецОбъекта" Тогда
			СтруктураДанных = Новый Структура(КлючиСтруктурыДанных);
			СтруктураДанных.Ссылка                = ФормаОбъект.ВладелецОбъекта;
			СтруктураДанных.РольСтрока            = СтруктураРоли.РольСтрока;
			СтруктураДанных.Роль                  = СтруктураРоли.Роль;
			СтруктураДанных.ПолеОсновногоТелефона = "Владелец_Телефон";
			
			РезультатФункции.Добавить(СтруктураДанных);
			
		ИначеЕсли СтруктураРоли.РольСтрока = "Заказчик" Тогда
			СтруктураДанных = Новый Структура(КлючиСтруктурыДанных);
			СтруктураДанных.Ссылка                = ФормаОбъект.Заказчик;
			СтруктураДанных.РольСтрока            = СтруктураРоли.РольСтрока;
			СтруктураДанных.Роль                  = СтруктураРоли.Роль;
			СтруктураДанных.ПолеОсновногоТелефона = "";
			
			РезультатФункции.Добавить(СтруктураДанных);
			
		ИначеЕсли СтруктураРоли.РольСтрока = "" Тогда
			СтруктураДанных = Новый Структура(КлючиСтруктурыДанных);
			СтруктураДанных.Ссылка                = ФормаОбъект.Оформил;
			СтруктураДанных.РольСтрока            = СтруктураРоли.РольСтрока;
			СтруктураДанных.Роль                  = СтруктураРоли.Роль;
			СтруктураДанных.ПолеОсновногоТелефона = "Оформил_Телефон";
			
			РезультатФункции.Добавить(СтруктураДанных);
			
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает набор данных из массива структур
//
// Параметры:
//  ТаблицаЮрЛиц - Массив - см. функцию ТаблицаЮрЛиц
//  ИмяКолонки - Строка - имя данных для выгрузки
//
// Возвращаемое значение:
//   Массив - массив выгруженных данных
//
Функция ВыгрузитьКолонкуЮрЛиц(ТаблицаЮрЛиц, ИмяКолонки) Экспорт
	
	РезультатФункции = Новый Массив;
	
	Для Каждого СтруктураДанных Из ТаблицаЮрЛиц Цикл
		РезультатФункции.Добавить(СтруктураДанных[ИмяКолонки]);
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает найденную структуру в массиве структур
//
// Параметры:
//  ТаблицаЮрЛиц - Массив - см. функцию ТаблицаЮрЛиц
//  Значение - Произвольный - значение для поиска
//  Колонка - Строка - имя данных для поиска
//
// Возвращаемое значение:
//   Структура - найденная структура из массива структур
//
Функция НайтиСтрокуЮрЛиц(ТаблицаЮрЛиц, Значение, Колонка) Экспорт
	
	РезультатФункции = Неопределено;
	
	Для Каждого СтруктураДанных Из ТаблицаЮрЛиц Цикл
		Если СтруктураДанных[Колонка] = Значение Тогда
			РезультатФункции = СтруктураДанных;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает массив ссылок ролей из строкового представления
//
// Параметры:
//  Роли - Строка - роли перечисленные через запятую
//
// Возвращаемое значение:
//   Массив - массив ссылок ПеречислениеСсылка.Saby_РолиКонтрагентов
//
Функция МассивРолей(Роли) Экспорт
	
	РезультатФункции = Новый Массив;
	
	МассивСтрок = СтрРазделить(Роли, ",");
	
	ШаблонИмениПеречисления = "Перечисление.Saby_РолиКонтрагентов.%1";
	
	Для Каждого РольСтрока Из МассивСтрок Цикл
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("РольСтрока", РольСтрока);
		Если РольСтрока = "" Тогда
			РольСтрока = "ПустаяСсылка";
		КонецЕсли;
		СтруктураДанных.Вставить("Роль", ПредопределенноеЗначение(СтрШаблон(ШаблонИмениПеречисления, РольСтрока)));
		
		РезультатФункции.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает структуру найденных контактных данных по виду или массив найденных контактных данных
//
// Параметры:
//  ТаблицаКИ - Массив - см. Saby_ТНОбщегоНазначенияСервер.КонтактнаяИнформацияИзБазы
//  Ссылка - ЛюбаяСсылка - ссылка на владельца контактной информации
//  Вид - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации
//  ПервоеЗначение - Булево - признак возврата одного значения или массива
//
// Возвращаемое значение:
//   Структура,Массив - см. СтруктураКИ 
//
Функция ПолучитьКИ(ТаблицаКИ, Ссылка, Вид, ПервоеЗначение = Истина) Экспорт
	
	Отбор = Новый Структура("Ссылка,Вид", Ссылка, Вид);
	
	НайденныеСтроки = НайтиСтрокиУниверсально(ТаблицаКИ, Отбор);
	
	Если ПервоеЗначение Тогда
		
		РезультатФункции = СтруктураКИ(Ссылка, Вид);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(РезультатФункции, НайденныеСтроки[0]);
		КонецЕсли;
		
	Иначе
		
		РезультатФункции = Новый Массив;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СтруктураКИ = СтруктураКИ(Ссылка, Вид);
			ЗаполнитьЗначенияСвойств(СтруктураКИ, НайденнаяСтрока);
			РезультатФункции.Добавить(СтруктураКИ);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает данные конактной информации
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - ссылка на владельца контактной информации
//  Вид - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации
//
// Возвращаемое значение:
//   Структура - см. в самой функции
//
Функция СтруктураКИ(Ссылка, Вид) Экспорт
	
	ПустойТип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка");
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Ссылка",        Ссылка);
	РезультатФункции.Вставить("Вид",           Вид);
	РезультатФункции.Вставить("Тип",           ПустойТип);
	РезультатФункции.Вставить("Значение",      "");
	РезультатФункции.Вставить("Представление", "");
	
	Возврат РезультатФункции;
	
КонецФункции

// Получает объект формы если он есть, иначе саму форму
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для получения объекта
//
// Возвращаемое значение:
//   Произвольный - форма или объект формы
//
Функция ФормаОбъект(Форма) Экспорт
	
	Если Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("Объект", Форма) Тогда
		Возврат Форма.Объект;
	Иначе
		Возврат Форма;
	КонецЕсли;
	
КонецФункции

// Возвращает найденные строки в коллекции. Функция аналогична НайтиСтроки для таблицы значений,
// но можно передать массив структур.
//
// Параметры:
//  КоллекцияСтрок - МассивСтруктур,ТаблицаЗначений,ДанныеФормыКоллекция - коллекция для поиска
//  Отбор - Структура - отбор для поиска
//
// Возвращаемое значение:
//   Массив - массив найденных элементов коллекции
//
Функция НайтиСтрокиУниверсально(КоллекцияСтрок, Отбор) Экспорт
	
	Если КоллекцияСтрок = Неопределено Тогда
		РезультатФункции = Новый Массив;
	ИначеЕсли ТипЗнч(КоллекцияСтрок) = Тип("Массив") Тогда
		РезультатФункции = НайтиСтрокиВМассивеСтруктур(КоллекцияСтрок, Отбор);
	Иначе
		РезультатФункции = КоллекцияСтрок.НайтиСтроки(Отбор);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает параметры загрузки документа из СБИС.
//
// Параметры:
//  ДополнительныеПараметры - Структура - исходные параметры загрузки
//
// Возвращаемое значение:
//   Структура - структура обязательных параметров загрузки со значениями по умолчанию
//
Функция ПараметрыЧтенияДокументаИзСБИС(ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		РезультатФункции = Новый Структура;
	Иначе
		РезультатФункции = ДополнительныеПараметры;
	КонецЕсли;
	
	ВставитьЕслиНет(РезультатФункции, "ТолькоАктивныйЭтап", Ложь);
	ВставитьЕслиНет(РезультатФункции, "ТекущийТитул",       Неопределено);
	ВставитьЕслиНет(РезультатФункции, "ИзДокумента",        Истина);
	
	Возврат РезультатФункции;
	
КонецФункции

// Проверяет наличие реквизита или свойства у произвольного объекта без обращения к метаданным.
//
// Параметры:
//  Имя - Строка - имя реквизита или свойства.
//  Объект - Произвольный - объект, у которого нужно проверить наличие реквизита или свойства;
//
// Возвращаемое значение:
//  Булево - Истина, если есть.
//
Функция ЕстьРеквизитИлиСвойство(Имя, Объект) Экспорт
	
	УИД = Новый УникальныйИдентификатор();
	ВременнаяСтруктура = Новый Структура(Имя, УИД);
	ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Объект);
	
	Возврат ВременнаяСтруктура[Имя] <> УИД;
	
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ФактическийАдрес(СсылкаЮрЛицо, ТаблицаЮрЛиц, ДопПараметры)
	
	АдресФакт = ДопПараметры.Значение;
	Если АдресФакт = Неопределено Тогда
		ТаблицаКИ = ДопПараметры.ТаблицаКИ;
		Если ТаблицаКИ = Неопределено Тогда
			ТаблицаКИ = Saby_ТНОбщегоНазначенияСервер.КонтактнаяИнформацияИзБазы(
				ВыгрузитьКолонкуЮрЛиц(ТаблицаЮрЛиц, "Ссылка"));
		КонецЕсли;
		
		ВидыКИ = Saby_ТНОбщегоНазначенияСервер.ВидыКонтактнойИнформации(СсылкаЮрЛицо);
		АдресФакт = ПолучитьКИ(ТаблицаКИ, СсылкаЮрЛицо, ВидыКИ.АдресФакт);
		
	КонецЕсли;
	
	Возврат АдресФакт;
	
КонецФункции

Функция НайтиСтрокиВМассивеСтруктур(КоллекцияСтрок, Отбор)
	
	РезультатФункции = Новый Массив;
	
	Для Каждого СтруктураСтроки Из КоллекцияСтрок Цикл
		
		УдовлетворяетОтбору = Истина;
		Для Каждого СоставОтбора Из Отбор Цикл
			УдовлетворяетОтбору = УдовлетворяетОтбору И СтруктураСтроки[СоставОтбора.Ключ] = СоставОтбора.Значение;
		КонецЦикла;
		
		Если УдовлетворяетОтбору Тогда
			РезультатФункции.Добавить(СтруктураСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ВставитьЕслиНет(СтруктураДанных, Ключ, Значение)
	
	Если Не СтруктураДанных.Свойство(Ключ) Тогда
		СтруктураДанных.Вставить(Ключ, Значение);
	КонецЕсли;
	
КонецПроцедуры

// Параметры КИ по заданному отбору
// Параметры:
//	ФормаОбъект - ФормаКлиентскогоПриложения - источник вызова
//	ДопПараметры - Структура - дополнительные параметры 
//	СтруктураПоиска - Структура - отбор для поиска строк
//
// Возвращаемое значение:
//	Структура - структура, с данными строки телефона и наличия основного номера
//
Функция ПараметрыНайденныхСтрок(ФормаОбъект, ДопПараметры, СтруктураПоиска)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("СтрокаТелефона",      Неопределено);
	РезультатФункции.Вставить("ЕстьОсновнойТелефон", Ложь);
	
	НайденныеСтроки = ФормаОбъект.КонтактныеДанные.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		РезультатФункции.ЕстьОсновнойТелефон = РезультатФункции.ЕстьОсновнойТелефон Или НайденнаяСтрока.Основной;
		
		Если ДопПараметры.Значение <> Неопределено Тогда
			Если ИдентификаторыСовпадают(НайденнаяСтрока, ДопПараметры) Тогда
				РезультатФункции.СтрокаТелефона = НайденнаяСтрока;
				РезультатФункции.СтрокаТелефона.Значение = ДопПараметры.Значение.Представление;
				РезультатФункции.СтрокаТелефона.Структура = ДопПараметры.Значение.Значение;
			ИначеЕсли НайденнаяСтрока.Значение = ДопПараметры.Значение.Представление Тогда
				РезультатФункции.СтрокаТелефона = НайденнаяСтрока;
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли ЭтаСтрокаДолжнаяБытьОсновной(РезультатФункции, ДопПараметры) Тогда
			РезультатФункции.СтрокаТелефона = НайденнаяСтрока;
			НайденнаяСтрока.Основной = Истина;
		Иначе
			Продолжить;
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Проверка совпадения идентификаторов разных объектов
// Параметры:
// 	НайденнаяСтрока - ДанныеФормы - строка для сравнения
//	ДопПараметры - Структура - доп параметры для сравнения, в том числе идентификатор
//
// Возвращаемое значение:
//  Булево - результат сравнения
//
Функция ИдентификаторыСовпадают(НайденнаяСтрока, ДопПараметры)
	
	ИдентификаторСтроки = НайденнаяСтрока.ПолучитьИдентификатор();
	Возврат ДопПараметры.ИдентификаторСтроки <> Неопределено
		И ИдентификаторСтроки = ДопПараметры.ИдентификаторСтроки;
	
КонецФункции

// Проверка что строка должна стать основной
// Параметры:
// 	РезультатФункции - Структура - данные для установки 
//	ДопПараметры - Структура - дополнительные параметры
//
// Возвращаемое значение:
//	Булево - результат проверки
//
Функция ЭтаСтрокаДолжнаяБытьОсновной(РезультатФункции, ДопПараметры)
	
	Возврат ДопПараметры.Значение = Неопределено И РезультатФункции.СтрокаТелефона = Неопределено;
	
КонецФункции

// Установка основного телефона
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - источник вызова	
//	СтрокаЮрЛица - ДанныеФормы - строка таблицы  
//	СтрокаТелефона - ДанныеФормы - строка таблицы
//
Процедура ЗаполнитьПолеОсновногоТелефона(Форма, СтрокаЮрЛица, СтрокаТелефона)
	
	Если СтрокаТелефона <> Неопределено И СтрокаТелефона.Основной Тогда
		Форма[СтрокаЮрЛица.ПолеОсновногоТелефона] = СтрокаТелефона.Значение;
	ИначеЕсли СтрокаТелефона = Неопределено Тогда
		Форма[СтрокаЮрЛица.ПолеОсновногоТелефона] = "";
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
