
#Область ПрограммныйИнтерфейс

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_ОбщиеСтруктуры
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_ОбщиеСтруктуры

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_РаботаСЮрЛицами
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_РаботаСЮрЛицами

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_ПредставлениеДанных
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_ПредставлениеДанных

#Область ТранспортныеСредстваИнтерфейс

//DynamicDirective
// Возвращает строки транспортных средств по виду транспортного средства
//
// Параметры:
//  ТранспортныеСредства - ТабличнаяЧасть - табличная часть транспортных средств
//  ВидТС - ПеречислениеСсылка.Saby_ВидыТС - вид транспортного средства для получения строк
//
// Возвращаемое значение:
//   Массив - массив строк табличной части
//
Функция ПолучитьСтрокиТС(ТранспортныеСредства, ВидТС) Экспорт
	
	РезультатФункции = Новый Массив;
	
	Для Каждого СтрокаТС Из ТранспортныеСредства Цикл
		Если СтрокаТС.Вид = ВидТС Тогда
			РезультатФункции.Добавить(СтрокаТС);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective
// Обновляет реквизиты формы связанные с транспортными средствами.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для обновления реквизитов
//
Процедура ОбновитьТранспортныеСредстваНаФорме(Форма) Экспорт
	
	ОтборПрицепов = Новый Структура;
	ОтборПрицепов.Вставить("Вид", ЗначениеМетаданных("Saby_ВидыТС.Прицеп"));
	ОтборПрицепов = Новый ФиксированнаяСтруктура(ОтборПрицепов);
	
	Форма.Элементы.Прицепы.ОтборСтрок = ОтборПрицепов;
	
	СформироватьНадписьПрицепыСтрокой(Форма);
	
	СформироватьНадписьТранспортноеСредствоСтрокой(Форма);
	
КонецПроцедуры

#КонецОбласти // ТранспортныеСредстваИнтерфейс

//DynamicDirective
// Добавить или заменить существующий элемент отбора динамического списка.
//
// Параметры:
//   Список - ДинамическийСписок - список, в котором требуется установить отбор.
//   РеквизитФормы - Произвольный - значение отбора.
//   ИмяПоляДинамическогоСписка - Строка - поле, по которому необходимо установить отбор.
//
Процедура УстановитьЭлементОтбораДинамическогоСписка(Список, РеквизитФормы, ИмяПоляДинамическогоСписка) Экспорт
	
	ПараметрыУстановки = ПараметрыУстановкиЭлементаДинамическогоСписка(Список, ИмяПоляДинамическогоСписка, РеквизитФормы);
	ПараметрыУстановки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ПараметрыУстановки.Использование = ЗначениеЗаполнено(РеквизитФормы);
	
	УстановитьЭлементОтбораДинамическогоСпискаБСП(ПараметрыУстановки);
	
КонецПроцедуры

//DynamicDirective
// Обновляет представление водителей на форме
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для обновления данных
//
Процедура ОбновитьВодителейНаФорме(Форма) Экспорт
	
	ФормаОбъект = ФормаОбъект(Форма);
	
	РольВодитель = ЗначениеМетаданных("Saby_РолиОтветственных.Водитель");
	
	МассивСтрокПредставления = Новый Массив;
	
	Для Каждого СтрокаОтветственного Из ФормаОбъект.ОтветственныеЛица Цикл
		Если СтрокаОтветственного.Роль <> РольВодитель Тогда
			Продолжить;
		КонецЕсли;
		СтрокаОтветственного.ФИО = ПредставлениеФИО(СтрокаОтветственного);
		СтрокаОтветственного.ВУ  = ПредставлениеВУ(СтрокаОтветственного);
		МассивСтрокПредставления.Добавить(СокрЛП(СтрокаОтветственного.ФИО));
	КонецЦикла;
	
	Форма.ВодителиСтрокой = СтрСоединить(МассивСтрокПредставления, ", ");
	Если Не ЗначениеЗаполнено(Форма.ВодителиСтрокой) Тогда
		Форма.ВодителиСтрокой = "Заполнить";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_Общие
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_Общие

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_РолиКонтрагентов
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_РолиКонтрагентов

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_ФормаОбъект
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_ФормаОбъект

//DynamicDirective
// Возвращает имя дополнительного свойства Код филиала
//
// Возвращаемое значение:
//   Строка - наименование свойства
//
Функция ИмяСвойстваКодФилиала() Экспорт
	
	Возврат "СБИС_КодФилиала";
	
КонецФункции

//DynamicDirective
// Возвращает параметры необходимые для выгрузки очередного титула документа
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка - ссылка на выгружаемый документ
//
// Возвращаемое значение:
//   Структура - параметры необходимые для выгрузки очередного титула документа
//
Функция ПараметрыВыгрузки(СсылкаНаДокумент) Экспорт
	
	РезультатФункции = Новый Структура;
	
	РезультатФункции.Вставить("Этап",                 "");
	РезультатФункции.Вставить("ТипТитула",            Неопределено);
	РезультатФункции.Вставить("КодТитула",            "");
	РезультатФункции.Вставить("ИдентификаторСБИС",    "");
	
	РезультатФункции.Вставить("Ссылка",               СсылкаНаДокумент);
	РезультатФункции.Вставить("ИмяМетаданных",        "");
	РезультатФункции.Вставить("ПараметрыДляАПИ",      Неопределено);
	РезультатФункции.Вставить("СтруктураДокумента",   Неопределено);
	РезультатФункции.Вставить("ДанныеДокумента",      Неопределено);
	
	РезультатФункции.Вставить("ДинамическийТитул",             Ложь);
	РезультатФункции.Вставить("ОтрицательныйПереход",          Ложь);
	РезультатФункции.Вставить("ПричинаОтрицательногоПерехода", "");
	
	// ФЛК
	РезультатФункции.Вставить("ВыполнитьФЛК",            Истина);
	РезультатФункции.Вставить("ПроверятьПоляСОХ",        Ложь);
	РезультатФункции.Вставить("ПроверятьПоляОтгрузчика", Ложь);
	
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective
// Возвращает структуру параметров загрузки для дальнейшего вызова функции ЗагрузкаДанныхДокумента
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка - ссылка на выгружаемый документ
//
// Возвращаемое значение:
//   Структура - структура параметров с фиксированными колонками:
//     * ИдСбис - Строка - идентификатор СБИС
//     * ДанныеДокумента - Соответствие - полученные данные с онлайна
//     * Ссылка - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на документ в базе,
//       в который будут загружены данные.
//     * ИзДокумента - Булево - признак запуска загрузки из документа. Если ложь, то запуск из списка документов.
//     * ЭтоЗаполнениеСПомощьюINI - Булево - признак загрузки данных из другого документа, а не с онлайна.
//     * ДокументОснование - ДокументСсылка - ссылка на документ, на основании которого загружаются данные.
//     * ТекущийТитул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - тип титула, который необходимо загрузить.
//       Если Неопределено, то загружаются титулы полученные функцией ТитулыДляЗагрузки()
//
Функция ПараметрыЗагрузки(СсылкаНаДокумент = Неопределено) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ИдСбис",                    "");
	РезультатФункции.Вставить("ДанныеДокумента",           Новый Соответствие);
	РезультатФункции.Вставить("Ссылка",                    СсылкаНаДокумент);
	РезультатФункции.Вставить("ИзДокумента",               Ложь);
	РезультатФункции.Вставить("ИмяМетаданных",             "");
	
	РезультатФункции.Вставить("ЭтоЗаполнениеСПомощьюINI",  Ложь);
	РезультатФункции.Вставить("ДокументОснование",         Неопределено);
	РезультатФункции.Вставить("ПараметрыОснования",        Новый Структура);
	РезультатФункции.Вставить("ЭтоПервоеОснование",        Истина);
	РезультатФункции.Вставить("НоменклатураГруза",         Новый Соответствие);
	РезультатФункции.Вставить("КлючСтроки",                Новый Структура);
	РезультатФункции.Вставить("СопроводительныеДокументы", Новый Массив);
	
	РезультатФункции.Вставить("ТекущийТитул",              Неопределено);
	РезультатФункции.Вставить("ТолькоАктивныйЭтап",        Ложь);
	
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective
// Возвращает параметры документа для использования в методах АПИ
//
// Параметры:
//  ИмяМетаданных - Строка - имя метаданных документа
//  СторонняяОрганизация - Булево - признак того, что титул отправляет сторонняя организация.
//
// Возвращаемое значение:
// 	Структура - параметры документа
//
Функция ПараметрыДокументаДляАПИ(ИмяМетаданных, СторонняяОрганизация = Ложь) Экспорт
		
	Если ИмяМетаданных = "Saby_ТранспортнаяНакладная" Тогда
		
		ТипДляАПИ             = "ConsignmentNote";
		РегламентДляАПИ       = "Транспортная накладная";
		ИдентификаторДляАПИ   = "ad40d873-9d1e-47d7-b7e9-f39636b36301";
		ТипДляВыгрузкиДляАПИ  = "ЭТрН";		
		ИмяПеречисленияДляАПИ = "Saby_ТипТитулаЭтрН";
				
	ИначеЕсли ИмяМетаданных = "Saby_ПутевойЛист" Тогда
		
		ТипДляАПИ             = "Waybill";
		ТипДляВыгрузкиДляАПИ  = "Waybill";
		ИмяПеречисленияДляАПИ = "Saby_ТипТитулаЭПЛ";
		
		Если СторонняяОрганизация Тогда
			РегламентДляАПИ      = "ЭПЛ (Входящий)";
			ИдентификаторДляАПИ  = "48e4c1ba-a877-4f16-8a25-da0cf3209bf8";
		Иначе
			РегламентДляАПИ      = "ЭПЛ";
			ИдентификаторДляАПИ  = "7b589621-deec-488c-ada2-5df9db6c329e";
		КонецЕсли;
		
	ИначеЕсли ИмяМетаданных = "Saby_ЗаказНаПеревозку" Тогда
		
		ТипДляАПИ             = "TransportOrder";
		ТипДляВыгрузкиДляАПИ  = "TransportOrder";
		ИмяПеречисленияДляАПИ = "Saby_ТипТитулаЗнП";
		
		Если СторонняяОрганизация Тогда
			РегламентДляАПИ      = "Заказ на перевозку (Входящий)";
			ИдентификаторДляАПИ  = "e000d24d-35a7-4a31-a692-22405b34dfbe";
		Иначе
			РегламентДляАПИ      = "Заказ на перевозку";
			ИдентификаторДляАПИ  = "6c052893-6b54-4f55-baf5-83e515b5aff4";
		КонецЕсли;
		
	Иначе
		
		ТипДляАПИ             = "";
		РегламентДляАПИ       = "";
		ИдентификаторДляАПИ   = "";
		ТипДляВыгрузкиДляАПИ  = "";
		ИмяПеречисленияДляАПИ = "";
		
	КонецЕсли;
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Тип",                     ТипДляАПИ);
	РезультатФункции.Вставить("Регламент",               РегламентДляАПИ);
	РезультатФункции.Вставить("ИдентификаторРегламента", ИдентификаторДляАПИ);
	РезультатФункции.Вставить("ТипДляВыгрузки",          ТипДляВыгрузкиДляАПИ);
	РезультатФункции.Вставить("ИмяПеречисления",         ИмяПеречисленияДляАПИ); 
	
	Возврат РезультатФункции;
	
КонецФункции

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_СвойстваЭлементовФормы
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_СвойстваЭлементовФормы

//DynamicDirective
// Возвращает признак того, что документооборот завершен.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма на которой необходимо показать данные
//
// Возвращаемое значение:
//   Булево - Истина, если завершен
//
Функция ДокументооборотЗавершен(Форма) Экспорт
	
	ДОЗавершенОтрицательно = 5;
	ДОЗавершенПоложительно = 6;
	
	Возврат Форма.ИндексКартинки = ДОЗавершенОтрицательно Или Форма.ИндексКартинки = ДОЗавершенПоложительно;
	
КонецФункции

//DynamicDirective
// Создает иерархию структуры по ключам написанным через разделитель 
//
// Параметры:
//  ИсходныеДанные - Структура - плоская структура с ключами содержащими разделитель
//  Разделитель    - Строка - разделитель уровней вложенности иерархии
//
Процедура ВосстановитьИерархию(ИсходныеДанные, Разделитель = ".") Экспорт
	
	Если ТипЗнч(ИсходныеДанные) = Тип("Структура") Или ТипЗнч(ИсходныеДанные) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из ИсходныеДанные Цикл
			Значение = ИсходныеДанные[КлючЗначение.Ключ];
			УровниИерархии = СтрРазделить(КлючЗначение.Ключ, Разделитель);
			ПоместитьНаУровеньИерархии(ИсходныеДанные, Значение, УровниИерархии, КлючЗначение.Ключ);
			ВосстановитьИерархию(Значение, Разделитель);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ИсходныеДанные) = Тип("Массив") Тогда
		Для Каждого Значение Из ИсходныеДанные Цикл
			ВосстановитьИерархию(Значение, Разделитель);
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_РаботаСоСвязаннымиТаблицами
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_РаботаСоСвязаннымиТаблицами

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_ДинамическиеСписки
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_ДинамическиеСписки

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

#Область ВосстановлениеИерархии

//DynamicDirective
// Перемещение значения на нужный уровень иерархии в зависимости от ключа с разделителем 
//
// Параметры:
//  ИсходныеДанные - Структура - плоская структура с ключами содержащими разделитель
//  Значение       - Структура - узел структуры для построения иерархии
//  УровниИерархии - Массив    - массив кровней полученный после рзделения на уровни
//  ИсходныйКлюч   - Строка    - ключ с разделителями
//
Процедура ПоместитьНаУровеньИерархии(ИсходныеДанные, Значение, УровниИерархии, ИсходныйКлюч)
	
	Если УровниИерархии.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	НовыйУровеньИерархии = ИсходныеДанные;
	ИмяПоследнегоУровня  = УровниИерархии[УровниИерархии.ВГраница()];
	
	Для Каждого ИмяУровня Из УровниИерархии Цикл
		
		Если Не УровеньИерархииСуществует(НовыйУровеньИерархии, ИмяУровня) Тогда
			ДобавитьУровеньИерархии(НовыйУровеньИерархии, ИмяУровня);
		КонецЕсли;
		
		Если ИмяУровня <> ИмяПоследнегоУровня Тогда
			НовыйУровеньИерархии = НовыйУровеньИерархии[ИмяУровня];
		КонецЕсли;
		
	КонецЦикла;
	
	НовыйУровеньИерархии.Вставить(ИмяУровня, Значение);
	ИсходныеДанные.Удалить(ИсходныйКлюч);
	
КонецПроцедуры

//DynamicDirective
// Проверка существования/отсутствия уровня иерархии в узле 
//
// Параметры:
//  ТекущийУровеньИерархии - Структура - узел для проверки уровня
//  ИмяУровня - Строка - имя проверяемого уровня
//
// Возвращаемое значение:
//   Булево - Истина, если уровень существует
//
Функция УровеньИерархииСуществует(ТекущийУровеньИерархии, ИмяУровня)
	
	Если ТипЗнч(ТекущийУровеньИерархии) = Тип("Соответствие") Тогда
		Возврат ТекущийУровеньИерархии[ИмяУровня] <> Неопределено;
	ИначеЕсли ТипЗнч(ТекущийУровеньИерархии) = Тип("Структура") Тогда
		Возврат ТекущийУровеньИерархии.Свойство(ИмяУровня);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//DynamicDirective
// Добавление нового уровня иерархии в узел 
//
// Параметры:
//  ТекущийУровеньИерархии - Структура - узел для добавления уровня
//  ИмяУровня - Строка - имя нового уровня
//
Процедура ДобавитьУровеньИерархии(ТекущийУровеньИерархии, ИмяУровня)
	
	Если ТипЗнч(ТекущийУровеньИерархии) = Тип("Соответствие") Тогда
		ТекущийУровеньИерархии.Вставить(ИмяУровня, Новый Соответствие);
	ИначеЕсли ТипЗнч(ТекущийУровеньИерархии) = Тип("Структура") Тогда
		ТекущийУровеньИерархии.Вставить(ИмяУровня, Новый Структура);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ВосстановлениеИерархии

//DynamicDirective
// Формирование текстового представления прицепов из данных формы 
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - источник данных для формирования надписи
//
Процедура СформироватьНадписьПрицепыСтрокой(Форма)
	
	Если Не ЕстьРеквизитИлиСвойство(Форма, "ПрицепыСтрокой") Тогда
		Возврат;
	КонецЕсли;
	
	ФормаОбъект = ФормаОбъект(Форма);
	
	СтрокиПрицепов = ПолучитьСтрокиТС(
		ФормаОбъект.ТранспортныеСредства,
		ЗначениеМетаданных("Saby_ВидыТС.Прицеп"));
	
	МассивНаименований = Новый Массив;
	Для Каждого СтрокаПрицепа Из СтрокиПрицепов Цикл
		МассивНаименований.Добавить(СтрокаПрицепа.РегистрационныйНомер);
	КонецЦикла;
	
	ПрицепыСтрокой = СтрСоединить(МассивНаименований, ", ");
	Если Не ЗначениеЗаполнено(ПрицепыСтрокой) Тогда
		ПрицепыСтрокой = "Заполнить";
	КонецЕсли;
	
	Форма.ПрицепыСтрокой = ПрицепыСтрокой;
	
КонецПроцедуры

//DynamicDirective
// Формирование текстового представления транспортного средства на форме 
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - источник данных для формирования надписи
//
Процедура СформироватьНадписьТранспортноеСредствоСтрокой(Форма)
	
	ФормаОбъект = ФормаОбъект(Форма);
	
	СтрокиАвтомобилей = ПолучитьСтрокиТС(
		ФормаОбъект.ТранспортныеСредства,
		ЗначениеМетаданных("Saby_ВидыТС.Автомобиль"));
	
	Если СтрокиАвтомобилей.Количество() > 0 Тогда
		Форма.ТранспортноеСредствоСтрокой = СтрокиАвтомобилей[0].РегистрационныйНомер;
	Иначе
		Форма.ТранспортноеСредствоСтрокой = "Заполнить";
	КонецЕсли;
	
КонецПроцедуры

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_КонтактныеДанные
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиентСервер_КонтактныеДанные

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область include_etrn_base_CommonModule_ОпределениеМодуляКодаКлиентСервер
#КонецОбласти // include_etrn_base_CommonModule_ОпределениеМодуляКодаКлиентСервер

#Область include_etrn_base_CommonModule_ОпределениеМодуляКода
#КонецОбласти // include_etrn_base_CommonModule_ОпределениеМодуляКода

#Область include_etrn_base_CommonModule_ВыполнениеФункцииНаСервере
#КонецОбласти // include_etrn_base_CommonModule_ВыполнениеФункцииНаСервере

#Область include_etrn_base_CommonModule_ЗначениеМетаданных
#КонецОбласти // include_etrn_base_CommonModule_ЗначениеМетаданных

