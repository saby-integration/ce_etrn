
//DynamicDirective

// Возвращает структуру параметров для дальнейшего вызова УстановитьЭлементОтбораДинамическогоСпискаБСП
//
// Доп параметры:
//   ВидСравнения  - ВидСравненияКомпоновкиДанных - условие отбора.
//   Представление - Строка - представление элемента компоновки данных.
//       Необязательный. Значение по умолчанию Неопределено.
//       Если указано, то выводится только флажок использования с указанным представлением (значение не выводится).
//       Для очистки (чтобы значение снова выводилось) следует передать пустую строку.
//   Использование - Булево - флажок использования этого отбора.
//       Необязательный. Значение по умолчанию: Неопределено.
//   РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - способ отображения этого отбора
//                                                                          пользователю:
//        РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ - в группе быстрых настроек над списком.
//        РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный       - в настройка списка (в подменю Еще).
//        РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный   - запретить пользователю менять этот отбор.
//   ИдентификаторПользовательскойНастройки - Строка - уникальный идентификатор этого отбора.
//       Используется для связи с пользовательскими настройками.
//
// Параметры:
//   ДинамическийСписок - ДинамическийСписок - список, в котором требуется установить отбор.
//   ИмяПоля            - Строка - поле, по которому необходимо установить отбор.
//   ПравоеЗначение     - Произвольный - значение отбора.
//       Необязательный. Значение по умолчанию Неопределено.
//       Внимание! Если передать Неопределено, то значение не будет изменено.
//
// Возвращаемое значение:
//   Структура - структура параметров
//
Функция ПараметрыУстановкиЭлементаДинамическогоСписка(ДинамическийСписок, ИмяПоля, ПравоеЗначение = Неопределено) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДинамическийСписок",                     ДинамическийСписок);
	РезультатФункции.Вставить("ИмяПоля",                                ИмяПоля);
	РезультатФункции.Вставить("ПравоеЗначение",                         ПравоеЗначение);
	РезультатФункции.Вставить("ВидСравнения",                           Неопределено);
	РезультатФункции.Вставить("Представление",                          Неопределено);
	РезультатФункции.Вставить("Использование",                          Неопределено);
	РезультатФункции.Вставить("РежимОтображения",                       Неопределено);
	РезультатФункции.Вставить("ИдентификаторПользовательскойНастройки", Неопределено);
	
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective
// Добавить или заменить существующий элемент отбора динамического списка.
//
// Параметры:
//   ПараметрыУстановки - Структура - см. ПараметрыУстановкиЭлементаДинамическогоСписка
//
Процедура УстановитьЭлементОтбораДинамическогоСпискаБСП(ПараметрыУстановки) Экспорт
	
	Если ПараметрыУстановки.РежимОтображения = Неопределено Тогда
		ПараметрыУстановки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	Если ПараметрыУстановки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		ОтборДинамическогоСписка = ПараметрыУстановки.ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	Иначе
		ОтборДинамическогоСписка = ПараметрыУстановки.ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор;
	КонецЕсли;
	
	УстановитьЭлементОтбора(ОтборДинамическогоСписка, ПараметрыУстановки);
	
КонецПроцедуры

//DynamicDirective
// Добавить или заменить существующий элемент отбора.
//
// Параметры:
//   ОбластьПоискаДобавления - ОтборКомпоновкиДанных
//                           - ГруппаЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                     например, Список.Отбор или группа в отборе.
//   ПараметрыУстановки - Структура - см. ПараметрыУстановкиЭлементаДинамическогоСписка
//
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления, ПараметрыУстановки) Экспорт
	
	ЧислоИзмененных = ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ПараметрыУстановки);
	
	Если ЧислоИзмененных = 0 Тогда
		Если ПараметрыУстановки.ВидСравнения = Неопределено Тогда
			Если ТипЗнч(ПараметрыУстановки.ПравоеЗначение) = Тип("Массив")
				Или ТипЗнч(ПараметрыУстановки.ПравоеЗначение) = Тип("ФиксированныйМассив")
				Или ТипЗнч(ПараметрыУстановки.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				ПараметрыУстановки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ПараметрыУстановки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
		КонецЕсли;
		Если ПараметрыУстановки.РежимОтображения = Неопределено Тогда
			ПараметрыУстановки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ПараметрыУстановки);
	КонецЕсли;
	
КонецПроцедуры

//DynamicDirective
// Изменить элемент отбора с заданным именем поля или представлением.
//
// Параметры:
//   ОбластьПоиска - ОтборКомпоновкиДанных
//                 - ГруппаЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                                          например Список.Отбор или группа в отборе.
//   ПараметрыУстановки - Структура - см. ПараметрыУстановкиЭлементаДинамическогоСписка
//
// Возвращаемое значение:
//   Число - количество измененных элементов.
//
Функция ИзменитьЭлементыОтбора(ОбластьПоиска, ПараметрыУстановки) Экспорт
	
	МассивЭлементов = Новый Массив;
	
	ПараметрыПоиска = ПараметрыПоискаРекурсивно(ПараметрыУстановки.ИмяПоля, ПараметрыУстановки.Представление);
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, ПараметрыПоиска.ИскатьПоПредставлению, ПараметрыПоиска.ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если ПараметрыУстановки.ИмяПоля <> Неопределено Тогда
			Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУстановки.ИмяПоля);
		КонецЕсли;
		Если ПараметрыУстановки.Представление <> Неопределено Тогда
			Элемент.Представление = ПараметрыУстановки.Представление;
		КонецЕсли;
		Если ПараметрыУстановки.Использование <> Неопределено Тогда
			Элемент.Использование = ПараметрыУстановки.Использование;
		КонецЕсли;
		Если ПараметрыУстановки.ВидСравнения <> Неопределено Тогда
			Элемент.ВидСравнения = ПараметрыУстановки.ВидСравнения;
		КонецЕсли;
		Если ПараметрыУстановки.ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение = ПараметрыУстановки.ПравоеЗначение;
		КонецЕсли;
		Если ПараметрыУстановки.РежимОтображения <> Неопределено Тогда
			Элемент.РежимОтображения = ПараметрыУстановки.РежимОтображения;
		КонецЕсли;
		Если ПараметрыУстановки.ИдентификаторПользовательскойНастройки <> Неопределено Тогда
			Элемент.ИдентификаторПользовательскойНастройки = ПараметрыУстановки.ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции

//DynamicDirective
// Добавить элемент компоновки в контейнер элементов компоновки.
//
// Параметры:
//   ОбластьДобавления - ОтборКомпоновкиДанных
//                     - ГруппаЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                                              например, Список.Отбор или группа в отборе.
//   ПараметрыУстановки - Структура - см. ПараметрыУстановкиЭлементаДинамическогоСписка
//
// Возвращаемое значение:
//   ЭлементОтбораКомпоновкиДанных - элемент компоновки.
//
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления, ПараметрыУстановки) Экспорт
	
	Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУстановки.ИмяПоля);
	Элемент.ВидСравнения = ПараметрыУстановки.ВидСравнения;
	
	Если ПараметрыУстановки.РежимОтображения = Неопределено Тогда
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Элемент.РежимОтображения = ПараметрыУстановки.РежимОтображения;
	КонецЕсли;
	
	Если ПараметрыУстановки.ПравоеЗначение <> Неопределено Тогда
		Элемент.ПравоеЗначение = ПараметрыУстановки.ПравоеЗначение;
	КонецЕсли;
	
	Если ПараметрыУстановки.Представление <> Неопределено Тогда
		Элемент.Представление = ПараметрыУстановки.Представление;
	КонецЕсли;
	
	Если ПараметрыУстановки.Использование <> Неопределено Тогда
		Элемент.Использование = ПараметрыУстановки.Использование;
	КонецЕсли;
	
	// Важно: установка идентификатора должна выполняться
	// в конце настройки элемента, иначе он будет скопирован
	// в пользовательские настройки частично заполненным.
	Если ПараметрыУстановки.ИдентификаторПользовательскойНастройки <> Неопределено Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ПараметрыУстановки.ИдентификаторПользовательскойНастройки;
	Иначе
		Если Элемент.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Элемент.ИдентификаторПользовательскойНастройки = ПараметрыУстановки.ИмяПоля;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

