
//DynamicDirective

// Обновляет данные по адресам доставки и погрузки на форме
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для обновления данных
//  ДопПараметры - Структура - структура дополнительных параметров для обновления
//
Процедура ОбновитьАдресаПогрузкиДоставки(Форма, ДопПараметры) Экспорт
	
	ФормаОбъект = ФормаОбъект(Форма);
	
	Представление = "";
	Значение      = "";
	
	Если ЗначениеЗаполнено(ДопПараметры.Значение) Тогда
		Представление = ДопПараметры.Значение.Представление;
		Значение      = ДопПараметры.Значение.КонтактнаяИнформация;
	КонецЕсли;
		
	// ToDo: последующий рефакторинг с учетом отказа от ссылок 
	Если Найти(Форма.ИмяФормы, "Saby_ОрганизацииЭПД") > 0 Тогда
		ФормаОбъект.Адрес          = Представление;
		ФормаОбъект.АдресСтруктура = Значение;
		Возврат;
	КонецЕсли;
		
	Если ДопПараметры.Роли = "Оформитель" Тогда 
		ФормаОбъект.МестоОтправления         = Представление;
		ФормаОбъект.МестоОтправленияЗначение = Значение;
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.Роли = "ПодачаТС" Тогда
		ФормаОбъект.ПодачаАдрес          = Представление;
		ФормаОбъект.ПодачаАдресСтруктура = Значение;
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.Роли = "КонечнаяТочка" Тогда
		ФормаОбъект.КонечнаяТочкаАдрес          = Представление;
		ФормаОбъект.КонечнаяТочкаАдресСтруктура = Значение;
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.Роли = "АдресаПунктовВыгрузки" 
		Или ДопПараметры.Роли = "АдресаПромежуточныхПунктов" Тогда
		
		ТекущаяСтрока = Форма.Элементы[ДопПараметры.Роли].ТекущаяСтрока;
		СтрокаАдреса  = ФормаОбъект[ДопПараметры.Роли].НайтиПоИдентификатору(ТекущаяСтрока);
		
		СтрокаАдреса.Значение  = Представление;
		СтрокаАдреса.Структура = Значение;
		Возврат;
		
	КонецЕсли;
	// - рефакторинг
	
	ОбновитьАдресаОтправителяПолучателя(Форма, ФормаОбъект, ДопПараметры);
	
КонецПроцедуры

//DynamicDirective

// Обновляет данные по основным телефонам на форме
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для обновления данных
//  ДопПараметры - Структура - структура дополнительных параметров для обновления
//
Процедура ОбновитьОсновнойНомерТелефона(Форма, ДопПараметры) Экспорт
	
	ФормаОбъект = ФормаОбъект(Форма);
	
	ТаблицаЮрЛиц = ДопПараметры.ТаблицаЮрЛиц;
	Если ТаблицаЮрЛиц = Неопределено Тогда
		ТаблицаЮрЛиц = ТаблицаЮрЛиц(Форма, ДопПараметры.Роли, ФормаОбъект);
	КонецЕсли;
	
	ТипКИТелефон = ЗначениеМетаданных("ТипыКонтактнойИнформации.Телефон");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Роль",                   Неопределено);
	СтруктураПоиска.Вставить("Тип",                    ТипКИТелефон);
	СтруктураПоиска.Вставить("КлючСтроки_ДанныеЮрЛиц", 0);
	
	Для Каждого СтрокаЮрЛица Из ТаблицаЮрЛиц Цикл
		
		Если СтрокаЮрЛица.ПолеОсновногоТелефона = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.Роль                   = СтрокаЮрЛица.Роль;
		СтруктураПоиска.КлючСтроки_ДанныеЮрЛиц = СтрокаЮрЛица.КлючСтроки;
		
		ПараметрыНайденныхСтрок = ПараметрыНайденныхСтрок(ФормаОбъект, ДопПараметры, СтруктураПоиска);
		СтрокаТелефона = ПараметрыНайденныхСтрок.СтрокаТелефона;
		
		Если ДопПараметры.Значение <> Неопределено И СтрокаТелефона = Неопределено Тогда
			Если ДопПараметры.ИдентификаторСтроки <> Неопределено Тогда
				СтрокаТелефона = ФормаОбъект.КонтактныеДанные.НайтиПоИдентификатору(ДопПараметры.ИдентификаторСтроки);
			Иначе
				СтрокаТелефона = ФормаОбъект.КонтактныеДанные.Добавить();
			КонецЕсли;
			
			СтрокаТелефона.Роль      = СтрокаЮрЛица.Роль;
			СтрокаТелефона.Тип       = СтруктураПоиска.Тип;
			СтрокаТелефона.Значение  = ДопПараметры.Значение.Представление;
			СтрокаТелефона.Структура = ДопПараметры.Значение.Значение;
			
			СтрокаТелефона.КлючСтроки_ДанныеЮрЛиц = СтрокаЮрЛица.КлючСтроки;
			
			Если Не ПараметрыНайденныхСтрок.ЕстьОсновнойТелефон Тогда
				СтрокаТелефона.Основной = Истина;
			КонецЕсли;
			
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
		ЗаполнитьПолеОсновногоТелефона(Форма, СтрокаЮрЛица, СтрокаТелефона);
		
	КонецЦикла;
	
КонецПроцедуры

//DynamicDirective

// Обновляет код филиала на форме
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для обновления данных
//  ДопПараметры - Структура - структура дополнительных параметров для обновления
//
Процедура ОбновитьКодФилиала(Форма, ДопПараметры) Экспорт
	
	ФормаОбъект = ФормаОбъект(Форма);
	
	ТаблицаЮрЛиц = ДопПараметры.ТаблицаЮрЛиц;
	Если ТаблицаЮрЛиц = Неопределено Тогда
		ТаблицаЮрЛиц = ТаблицаЮрЛиц(Форма, ДопПараметры.Роли, ФормаОбъект);
	КонецЕсли;
	СтрокаОтправителя = НайтиСтрокуЮрЛиц(ТаблицаЮрЛиц, "Отправитель", "РольСтрокой");
	Если СтрокаОтправителя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Роль", СтрокаОтправителя.Роль);
	
	НайденныеСтроки = НайтиСтрокиУниверсально(ФормаОбъект.ДанныеЮрЛиц, Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Форма.КодФилиала = НайденныеСтроки[0].КодФилиала;
	КонецЕсли;
	
КонецПроцедуры

//DynamicDirective

// возвращает данные по ролям юр лиц с дополнительными данными по ним
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для обновления данных
//  РолиСтрокой - Строка - имена ролей контрагентов через запятую
//
// Возвращаемое значение:
//   Массив - массив из структур Saby_ТНОбщегоНазначенияКлиентСервер.СтруктураДанныхРолей()
//
Функция РолиЮрЛиц(Форма, РолиСтрокой) Экспорт
	
	РезультатФункции = Новый Массив;
	
	МассивРолей = СтрРазделитьЭПД(РолиСтрокой, ",");
	
	ФормаОбъект = ФормаОбъект(Форма);
	
	Для Каждого РольСтрокой Из МассивРолей Цикл
		
		Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов." + РольСтрокой);
		
		Отбор = Новый Структура("Роль", Роль);
		НайденныеСтроки = ФормаОбъект.ДанныеЮрЛиц.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаЮрЛиц Из НайденныеСтроки Цикл
			
			СтруктураДанных = СтруктураДанныхРолей();
			ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаЮрЛиц);
			СтруктураДанных.РольСтрокой = РольСтрокой;
			
			Если РольСтрокой = "УполномоченноеЛицо" Тогда
				СтруктураДанных.ПараметрыРеквизитаФормы = ПараметрыРеквизитаФормы("", "", СтрокаЮрЛиц.ПолучитьИдентификатор());
			КонецЕсли;
			
			РезультатФункции.Добавить(СтруктураДанных);
			
		КонецЦикла;
		
		Если НайденныеСтроки.Количество() = 0 И РольСтрокой <> "УполномоченноеЛицо" Тогда
			СтруктураДанных = СтруктураДанныхРолей();
			СтруктураДанных.Роль        = Роль;
			СтруктураДанных.РольСтрокой = РольСтрокой;
			РезультатФункции.Добавить(СтруктураДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective

// Дополнительные параметры для обновления КИ
// Параметры:
//  Роли - Массив - роли юр лиц, которые обновляем  
//  ТаблицаЮрЛиц - ТаблицаЗначений - данные по юрлицам
//  ТаблицаКИ - ТаблицаЗначений - таблица с данными КИ 
//  Значение - Строка - значение КИ
// Возвращаемое значение:
//  Структура - дополнительные параметры КИ
Функция ДопПараметрыОбновленияКИ(Роли, ТаблицаЮрЛиц = Неопределено,
		ТаблицаКИ = Неопределено, Значение = Неопределено) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Роли",                    Роли);
	РезультатФункции.Вставить("ТаблицаЮрЛиц",            ТаблицаЮрЛиц);
	РезультатФункции.Вставить("ТаблицаКИ",               ТаблицаКИ);
	РезультатФункции.Вставить("Значение",                Значение);
	РезультатФункции.Вставить("ИдентификаторСтроки",     Неопределено);

	РезультатФункции.Вставить("КлючСтроки_ДанныеЮрЛиц",  0);
	
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective

// Возвращает структуру данных юр лица по роли
//
// Параметры:
//  ДанныеЮрЛиц - ТабличнаяЧасть - таблица с данными организаций
//  РольСтрокой - Строка - имя роли организации
//  ПараметрыРеквизитаФормы - Структура - см. функцию Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы
//
// Возвращаемое значение:
//   Структура - структура данных юрлица
//
Функция ДанныеЮрЛицаПоРоли(ДанныеЮрЛиц, РольСтрокой, ПараметрыРеквизитаФормы = Неопределено) Экспорт
	
	Если ПараметрыРеквизитаФормы = Неопределено Тогда
		ПараметрыРеквизитаФормы = ПараметрыРеквизитаФормы("", "");
	КонецЕсли;
	
	РезультатФункции = ШаблонДанныхЮрЛица();
	
	Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов." + РольСтрокой);
	
	Если ПараметрыРеквизитаФормы.ЭтоСтрокаТаблицы Тогда
		НайденныеСтроки = Новый Массив;
		Если ПараметрыРеквизитаФормы.ИдентификаторСтроки <> Неопределено Тогда
			НайденныеСтроки.Добавить(ДанныеЮрЛиц.НайтиПоИдентификатору(ПараметрыРеквизитаФормы.ИдентификаторСтроки));
		КонецЕсли;
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("Роль", Роль);
		НайденныеСтроки = НайтиСтрокиУниверсально(ДанныеЮрЛиц, Отбор);
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ЗаполнитьЗначенияСвойств(РезультатФункции, НайденныеСтроки[0]);
		РезультатФункции.Заполнена = Истина;
		
		Если ЗначениеЗаполнено(РезультатФункции.ЮрФизЛицо)
			И Не ЗначениеЗаполнено(РезультатФункции.ЮрФизЛицоСтрокой) Тогда
				
			Если РезультатФункции.ЮрФизЛицо = ЗначениеМетаданных("Saby_ЮрФизЛицо.ИндивидуальныйПредприниматель") Тогда
				РезультатФункции.ЮрФизЛицоСтрокой = "ИндивидуальныйПредприниматель";	
			Иначе 
				РезультатФункции.ЮрФизЛицоСтрокой = "ЮрЛицо";	
			КонецЕсли;	
			
		КонецЕсли;	
		
	Иначе
		РезультатФункции.Роль = Роль;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective

// Добавляет контактные данные в структуру данных юр лица по роли
//
// Параметры:
//  СтруктураДанныхЮрЛица - Структура - см. функцию СтруктураДанныхЮрЛица()
//  КонтактныеДанные - ТабличнаяЧасть - таблица с контактными данными организаций
//  ПараметрыРеквизитаФормы - Структура - см. функцию Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы
//
Процедура ДобавитьКонтактныеДанныеПоРоли(СтруктураДанныхЮрЛица, КонтактныеДанные,
		ПараметрыРеквизитаФормы = Неопределено) Экспорт
	
	Если ПараметрыРеквизитаФормы = Неопределено Тогда
		ПараметрыРеквизитаФормы = ПараметрыРеквизитаФормы("", "");
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", СтруктураДанныхЮрЛица.Роль);
	
	Если ПараметрыРеквизитаФормы.ЭтоСтрокаТаблицы Тогда
		Отбор.Вставить("КлючСтроки_ДанныеЮрЛиц", СтруктураДанныхЮрЛица.КлючСтроки);
	КонецЕсли;
	
	НайденныеСтроки = НайтиСтрокиУниверсально(КонтактныеДанные, Отбор);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		СтруктураКонтактныхДанных = СтруктураКонтактныхДанных();
		ЗаполнитьЗначенияСвойств(СтруктураКонтактныхДанных, НайденнаяСтрока); 
		
		СтруктураДанныхЮрЛица.КонтактныеДанные.Добавить(СтруктураКонтактныхДанных);
		
	КонецЦикла;
	
КонецПроцедуры

//DynamicDirective

// Возвращает представление юр лица для использования на форме
//
// Параметры:
//  ДанныеЮрЛиц - ТабличнаяЧасть,Строка - таблица с данными организаций или наименование организации
//  РольСтрокой - Строка - имя роли организации, если первым параметром передана коллекция для поиска
//
// Возвращаемое значение:
//   Строка - представление юрлица
//
Функция ПредставлениеЮрЛицаПоРоли(ДанныеЮрЛиц, РольСтрокой = "") Экспорт
	
	Если ТипЗнч(ДанныеЮрЛиц) = Тип("Строка") Тогда
		НаименованиеОрганизации = ДанныеЮрЛиц;
	Иначе
		НаименованиеОрганизации = ДанныеЮрЛицаПоРоли(ДанныеЮрЛиц, РольСтрокой).НаименованиеОрганизации;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(НаименованиеОрганизации) Тогда
		НаименованиеОрганизации = "Заполнить";
	КонецЕсли;
	
	Возврат НаименованиеОрганизации;
	
КонецФункции

//DynamicDirective

// Заполняет дополнительные реквизиты формы их данных юридических лиц
//
// Параметры:
// 	Форма - Форма - источник вызова 
//  СтрокаЮрЛиц - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ШаблонДанныхЮрЛица()
//  ДополнительныеПоля - Строка - имена реквизитов формы для заполнения
//  РольСтрокой - Строка - имя роли организации
//
Процедура ЗаполнитьДополнительныеПоляЮрЛица(Форма, СтрокаЮрЛиц, ДополнительныеПоля, РольСтрокой) Экспорт
	
	МассивПолей = СтрРазделитьЭПД(ДополнительныеПоля, ",", Ложь);
	
	Для Каждого ИмяПоля Из МассивПолей Цикл
		ИмяРеквизитаФормы = РольСтрокой + "_" + ИмяПоля;
		Форма[ИмяРеквизитаФормы] = СтрокаЮрЛиц[ИмяПоля];
	КонецЦикла;
	
КонецПроцедуры

//DynamicDirective

// Очистка записей таблиц согласно установленному отбору по роли
// Параметры:
//	Таблица - ТаблицаЗначений,ДанныеФормыКоллекция - таблица для очистки записей 
//  РольСтрокой - Строка - имя роли для очистки
//              - ПеречислениеСсылка - значение перечисления
//  ЭтоОтветственныеЛица - Булево - признак таблицы ответственных лиц
//
Процедура УдалитьСтрокиПоРоли(Таблица, РольСтрокой, ЭтоОтветственныеЛица = Ложь) Экспорт
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РольСтрокой) = Тип("Строка") Тогда
		Если ЭтоОтветственныеЛица Тогда
			Роль = ЗначениеМетаданных("Saby_РолиОтветственных." + РольСтрокой);
		Иначе
			Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов." + РольСтрокой);
		КонецЕсли;
	Иначе 
		Роль = РольСтрокой;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Роль);
	НайденныеСтроки = НайтиСтрокиУниверсально(Таблица, Отбор);
	Для Каждого СтрокаДляУдаления Из НайденныеСтроки Цикл
		Таблица.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

//DynamicDirective

// Копирует данные юр лица в таблице ДанныеЮрЛиц
//
// Параметры:
//  Объект - ОбъектФормы,Структура - объект содержащий таблицу или массив структур ДанныеЮрЛиц
//  СтруктураПриемник - Структура,Строка - см. СтруктураДанныхЮрЛица()
//  СтруктураИсточник - Структура,Строка - см. СтруктураДанныхЮрЛица()
//
Процедура СкопироватьДанныеЮрЛица(Объект, СтруктураПриемник, СтруктураИсточник) Экспорт
	
	Если ТипЗнч(СтруктураПриемник) = Тип("Строка") Тогда
		СтруктураПриемник = ДанныеЮрЛицаПоРоли(Объект.ДанныеЮрЛиц, СтруктураПриемник);
	КонецЕсли;
	
	Если ТипЗнч(СтруктураИсточник) = Тип("Строка") Тогда
		СтруктураИсточник = ДанныеЮрЛицаПоРоли(Объект.ДанныеЮрЛиц, СтруктураИсточник);
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДанныеЮрЛиц) = Тип("Массив") Тогда
		
		// если источник не заполнен прервем выполнение
		Если Не СтруктураИсточник.Заполнена Тогда
			Возврат;
		КонецЕсли;	
		
		СтрокаПриемник = ШаблонДанныхЮрЛица();
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтруктураИсточник);
		Объект.ДанныеЮрЛиц.Добавить(СтрокаПриемник);
		
	Иначе 	
		СтрокаПриемник = Объект.ДанныеЮрЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтруктураИсточник);
	КонецЕсли;
	
	СтрокаПриемник.Роль       = СтруктураПриемник.Роль;
	СтрокаПриемник.КлючСтроки = НовыйКлючОсновнойСтроки(Объект, "ДанныеЮрЛиц");
			
	ДобавитьКонтактныеДанныеПоРоли(СтруктураИсточник, Объект.КонтактныеДанные);
	
	Для Каждого СтруктураКонтактныхДанных Из СтруктураИсточник.КонтактныеДанные Цикл
		Если ТипЗнч(Объект.КонтактныеДанные) = Тип("Массив") Тогда
			СтрокаКонтактныхДанных = СтруктураКонтактныхДанных;
			Объект.КонтактныеДанные.Добавить(СтрокаКонтактныхДанных);
		Иначе
			СтрокаКонтактныхДанных = Объект.КонтактныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКонтактныхДанных, СтруктураКонтактныхДанных);
		КонецЕсли;
		СтрокаКонтактныхДанных.Роль                   = СтрокаПриемник.Роль;
		СтрокаКонтактныхДанных.КлючСтроки_ДанныеЮрЛиц = СтрокаПриемник.КлючСтроки;
	КонецЦикла;
	
КонецПроцедуры

//DynamicDirective

// Сравнивает две структуры юр лиц
//
// Параметры:
//  СтруктураЮрЛица1 - Структура,Строка - см. СтруктураДанныхЮрЛица()
//  СтруктураЮрЛица2 - Структура,Строка - см. СтруктураДанныхЮрЛица()
//
// Возвращаемое значение:
//   Булево - Истина, если совпадают
//
Функция ЮрЛицаСовпадают(СтруктураЮрЛица1, СтруктураЮрЛица2) Экспорт
	
	РеквизитыСравненияЮрЛиц = Новый Массив;
	РеквизитыСравненияЮрЛиц.Добавить("ИНН");
	РеквизитыСравненияЮрЛиц.Добавить("КПП");
	РеквизитыСравненияЮрЛиц.Добавить("ОГРН");
	
	Возврат СтруктурыСовпадают(СтруктураЮрЛица1, СтруктураЮрЛица2, РеквизитыСравненияЮрЛиц);
	
КонецФункции

//DynamicDirective

// Сравнивает две структуры
//
// Параметры:
//  Структура1 - Структура - первая структура для сравнения
//  Структура2 - Структура - вторая структура для сравнения
//  РеквизитыДляСравнения - Массив - список реквизитов, которые нужно сравнить
//
// Возвращаемое значение:
//   Булево - Истина, если совпадают
//
Функция СтруктурыСовпадают(Структура1, Структура2, РеквизитыДляСравнения) Экспорт
	
	РезультатФункции = Истина;
	
	Для Каждого ИмяРеквизита Из РеквизитыДляСравнения Цикл
		РезультатФункции = РезультатФункции И (СокрЛП(Структура1[ИмяРеквизита]) = СокрЛП(Структура2[ИмяРеквизита]));
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective

// Возвращает массив структур данных по ролям юридических лиц
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для поиска элементов
//  Роли - Строка - строковые представления ролей юр лиц через запятую
//                 <продолжение описания параметра>
//  ФормаОбъект - Объект - объект формы для получения реквизитов
//  Реквизит - Строка - имя реквизита форма для заполнения данных
// Возвращаемое значение:
//   Массив - массив структур данных
//
Функция ТаблицаЮрЛиц(Форма, Роли, ФормаОбъект, Реквизит = "") Экспорт
	
	РезультатФункции = Новый Массив;
	
	МассивРолей = МассивРолей(Роли);
	
	КлючиСтруктурыДанных = "Ссылка,РольСтрокой,Роль,ПолеОсновногоТелефона,КлючСтроки,ПараметрыРеквизитаФормы";
		
	Для Каждого СтруктураРоли Из МассивРолей Цикл
		
		СтруктураДанных = Новый Структура(КлючиСтруктурыДанных);
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных, СтруктураРоли);
		
		Если ПустаяСтрока(Реквизит) Тогда
			
			Если ЗначениеЗаполнено(СтруктураРоли.РольСтрокой) И ЕстьРеквизитИлиСвойство(ФормаОбъект, СтруктураРоли.РольСтрокой) Тогда
				Ссылка = ФормаОбъект[СтруктураРоли.РольСтрокой];
			Иначе	
				Ссылка = Неопределено;
			КонецЕсли;
			
		Иначе
			Ссылка = ФормаОбъект[Реквизит];
		КонецЕсли;
		
		СтруктураДанных.Ссылка = Ссылка;
		
		ИмяПоляТелефона = СтруктураРоли.РольСтрокой + "_Телефон";
		Если Форма.Элементы.Найти(ИмяПоляТелефона) = Неопределено Тогда
			СтруктураДанных.ПолеОсновногоТелефона = "";
		Иначе 
			СтруктураДанных.ПолеОсновногоТелефона = ИмяПоляТелефона;
		КонецЕсли;
		
		РезультатФункции.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective

// Возвращает найденную структуру в массиве структур
//
// Параметры:
//  ТаблицаЮрЛиц - Массив - см. функцию ТаблицаЮрЛиц
//  Значение - Произвольный - значение для поиска
//  Колонка - Строка - имя данных для поиска
//
// Возвращаемое значение:
//   Структура - найденная структура из массива структур
//
Функция НайтиСтрокуЮрЛиц(ТаблицаЮрЛиц, Значение, Колонка) Экспорт
	
	РезультатФункции = Неопределено;
	
	Для Каждого СтруктураДанных Из ТаблицаЮрЛиц Цикл
		Если СтруктураДанных[Колонка] = Значение Тогда
			РезультатФункции = СтруктураДанных;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective

// Возвращает набор данных из массива структур
//
// Параметры:
//  ТаблицаЮрЛиц - Массив - см. функцию ТаблицаЮрЛиц
//  ИмяКолонки - Строка - имя данных для выгрузки
//
// Возвращаемое значение:
//   Массив - массив выгруженных данных
//
Функция ВыгрузитьКолонкуЮрЛиц(ТаблицаЮрЛиц, ИмяКолонки) Экспорт
	
	РезультатФункции = Новый Массив;
	
	Для Каждого СтруктураДанных Из ТаблицаЮрЛиц Цикл
		РезультатФункции.Добавить(СтруктураДанных[ИмяКолонки]);
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

//DynamicDirective

// Настраивает отборы и ограничения типов для таблиц дополнительных контактных данных
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма источник вызова
//  Роли - Строка - роли контрагентов через запятую
//
Процедура НастроитьДополнительныеКонтакты(Форма, Роли) Экспорт
	
	ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(Форма);
	
	МассивТаблицКонтактнойИнформации = Новый Массив;
	
	МассивРолей = СтрРазделитьЭПД(Роли, ",", Ложь);
	Для Каждого Роль Из МассивРолей Цикл
		МассивТаблицКонтактнойИнформации.Добавить(ПараметрыТаблицыКонтактныхДанных(Роль));
	КонецЦикла;
		
	СтруктураПоиска = Новый Структура;
	Для Каждого СтруктураТаблицы Из МассивТаблицКонтактнойИнформации Цикл
		СтруктураПоиска.Вставить("Роль", СтруктураТаблицы.Роль);
		НайденныеСтроки = ФормаОбъект.ДанныеЮрЛиц.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтруктураТаблицы.КлючСтроки_ДанныеЮрЛиц = НайденныеСтроки[0].КлючСтроки;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура;
			
	Для Каждого СтруктураТаблицы Из МассивТаблицКонтактнойИнформации Цикл
		
		Если Форма.Элементы.Найти(СтруктураТаблицы.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.Вставить("Роль",                   СтруктураТаблицы.Роль);
		СтруктураПоиска.Вставить("КлючСтроки_ДанныеЮрЛиц", СтруктураТаблицы.КлючСтроки_ДанныеЮрЛиц);
		Форма.Элементы[СтруктураТаблицы.Имя].ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураПоиска);
		
	КонецЦикла;
	
КонецПроцедуры

//DynamicDirective

// Возвращает структуру параметров контактных данных
//
// Параметры:
//  РольСтрокой - Строка - имя роли контрагента
//
// Возвращаемое значение:
//   Структура - структура параметров контактных данных
//
Функция ПараметрыТаблицыКонтактныхДанных(РольСтрокой) Экспорт
	
	Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов." + РольСтрокой);
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Имя",                    РольСтрокой + "КонтактныеДанные");
	РезультатФункции.Вставить("Роль",                   Роль);
	РезультатФункции.Вставить("КлючСтроки_ДанныеЮрЛиц", 0);
	
	Возврат РезультатФункции;
	
КонецФункции

