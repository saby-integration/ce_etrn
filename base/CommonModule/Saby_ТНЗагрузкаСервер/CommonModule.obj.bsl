
#Область ПрограммныйИнтерфейс

// Загружает документы из СБИС
//
// Параметры:
//  ДанныеДляЗагрузки - Массив - массив структур см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыЗагрузки
//  context_params - Структура - параметры подключения к СБИС
//  ДополнительныеПараметры - Структура - дополнительные параметры для выгрузки
//
// Возвращаемое значение:
//   Структура - см. Saby_ТНОбщегоНазначенияСервер.РезультатВзаимодействияСоСБИС
//
Функция РезультатЗагрузкиДокументов(ДанныеДляЗагрузки, context_params, ДополнительныеПараметры) Экспорт
	
	ОбщиеПараметрыЗагрузки = Saby_ТНОбщегоНазначенияСервер.ОбщиеПараметрыВыгрузкиЗагрузки(context_params);
	
	РезультатФункции = Saby_ТНОбщегоНазначенияСервер.РезультатВзаимодействияСоСБИС(ДанныеДляЗагрузки.Количество());
	
	Для Каждого ПараметрыЗагрузки Из ДанныеДляЗагрузки Цикл
		
		ЗагрузитьДокумент(ПараметрыЗагрузки, ОбщиеПараметрыЗагрузки, РезультатФункции);
		
	КонецЦикла;
	
	Справочники.Saby_ОпасныеГрузы.ДозаполнитьНовыеЭлементыДаннымиСОнлайна();
	Справочники.Saby_ВидыУпаковки.ДозаполнитьНовыеЭлементыДаннымиСОнлайна();
	
	РезультатФункции.Итог.Успех = Не ЗначениеЗаполнено(РезультатФункции.Ошибки);
	
	Saby_ТНОбщегоНазначенияСервер.ЗаписьОшибокВЖурналРегистрации(РезультатФункции.Ошибки);
	
	Возврат РезультатФункции;
	
КонецФункции

// Загружает изменения по документам из списка.
//
// Параметры:
//  СтруктураПараметров - Структура - параметры загрузки
//
// Возвращаемое значение:
//   Структура - с фиксированными ключами см. в конце функции
//
Функция ЗагрузкаДокументовПоИзменениям(СтруктураПараметров) Экспорт
	
	// Изменения для последующей обработки
	СписокИзменений = СписокИзмененийДокументов(СтруктураПараметров);
	
	Результат = Saby_ТНОбщегоНазначенияСервер.РезультатВзаимодействияСоСБИС(СписокИзменений.Количество());
	ОбработатьИзмененияДокументов(СписокИзменений, Результат, СтруктураПараметров);
	
	Результат.Итог.Успех = Результат.Итог.Количество = Результат.Итог.Всего;
	
	Saby_ТНОбщегоНазначенияСервер.ЗаписьОшибокВЖурналРегистрации(Результат.Ошибки);
	
	Возврат Результат;
	
КонецФункции

// Возвращает двоичные данные файла печатной формы из СБИС.
//
// Параметры:
//  ПараметрыЗагрузки - Структура - параметры загрузки
//  АдресФайлаВСбис - Строка - адрес печатной формы pdf
//
// Возвращаемое значение:
//   Строка - адрес двоичных данных файла печатной формы.
//
Функция АдресДвоичныхДанныхФайла(ПараметрыЗагрузки, АдресФайлаВСбис = Неопределено) Экспорт
	
	РезультатФункции = Неопределено;
	
	Если АдресФайлаВСбис = Неопределено Тогда
		АдресФайлаВСбис = СсылкаНаПечатнуюФорму(ПараметрыЗагрузки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресФайлаВСбис) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = ПараметрыЗагрузки.ОбъектОбработки.local_helper_download_from_link(
		ПараметрыЗагрузки.context_params,
		АдресФайлаВСбис);
	
	РезультатФункции = ПоместитьВоВременноеХранилище(
		ДвоичныеДанныеФайла,
		ПараметрыЗагрузки.УникальныйИдентификаторФормы);
	
	Возврат РезультатФункции;
	
КонецФункции

// Загружает данные динамического титула в форму динамического титула по переданному идентификатору.
// Запрос данных с онлайна не происходит, так как берутся ранее загруженные данные из регистра Saby_ДанныеТитулов
//
// Параметры:
//  ОбъектФормы - ФормаКлиентскогоПриложения - форма динамического титула
//  СсылкаНаДокумент - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на документ,
//                   которому принадлежит динамический титул.
//  ИдентификаторТитула - Строка - идентификатор динамического титула из СБИС.
//                      Это не идентификатор документа, а идентификатор именно титула.
//
Процедура ЗагрузитьДанныеДинамическогоТитула(ОбъектФормы, СсылкаНаДокумент, ИдентификаторТитула) Экспорт
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Saby_ДанныеТитулов.Данные КАК Данные,
	|	Saby_ДанныеТитулов.ТипТитула КАК Титул
	|ИЗ
	|	РегистрСведений.Saby_ДанныеТитулов КАК Saby_ДанныеТитулов
	|ГДЕ
	|	Saby_ДанныеТитулов.СсылкаНаДокумент = &СсылкаНаДокумент
	|	И Saby_ДанныеТитулов.ИдентификаторТитула = &ИдентификаторТитула";
	
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент",    СсылкаНаДокумент);
	ЗапросДанных.УстановитьПараметр("ИдентификаторТитула", ИдентификаторТитула);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ДляДокумента", ЗначениеИзСтрокиВнутр(ВыборкаДанных.Данные));
		СтруктураДанных.Вставить("Титул",        ВыборкаДанных.Титул);
		
		ДанныеТитула = Новый Массив;
		ДанныеТитула.Добавить(СтруктураДанных);
		
		ИмяМетаданных = Saby_ТНОбщегоНазначенияСервер.ИмяМетаданныхДокумента(СсылкаНаДокумент);
		
		ДопПараметрыЗагрузкиВложения = ДопПараметрыЗагрузкиВложения();
		ДопПараметрыЗагрузкиВложения.ЗагрузкаСОнлайна = Ложь;
		ДопПараметрыЗагрузкиВложения.ИмяМетаданных    = ИмяМетаданных;
		
		Документы[ИмяМетаданных].ВложенияЗагружены(
			ДанныеТитула,
			ВыборкаДанных.Титул,
			ОбъектФормы,
			ДопПараметрыЗагрузкиВложения);
		
		МассивСсылокНаДокумент = Новый Массив;
		МассивСсылокНаДокумент.Добавить(СсылкаНаДокумент);
		
		МассивТитулов = Новый Массив;
		МассивТитулов.Добавить(ИдентификаторТитула);
		РегистрыСведений.Saby_ДанныеТитулов.Просмотреть(МассивСсылокНаДокумент, МассивТитулов);
		
	КонецЕсли;
	
КонецПроцедуры

// Загружает документы ЭПД в регламентном задании во внешней обработке
//
Процедура ЗагрузитьДокументыЭПДПоРегламентномуЗаданию() Экспорт
	
	ЗагрузитьПоРегламенту("Saby_ЗаказНаПеревозку");
	ЗагрузитьПоРегламенту("Saby_ПутевойЛист");
	ЗагрузитьПоРегламенту("Saby_ТранспортнаяНакладная");
	
КонецПроцедуры

// Выполняет загрузку документов ЭПЛ в регламентном задании.
//
// Параметры:
//  ТипДокумента - Строка - тип документа для загрузки
//  Начало - Дата - дата начала загрузки данных
//  Окончание - Дата - дата окончания загрузки данных
//
Процедура ЗагрузитьПоРегламенту(ТипДокумента, Начало = Неопределено, Окончание = Неопределено) Экспорт
		
	context_params = Saby_Core.ПроверитьНаличиеПараметровПодключения();
        
    СтруктураПараметров = Новый Структура;
                
    СтруктураПараметров.Вставить("МассивДокументов", Неопределено);
    СтруктураПараметров.Вставить("context_params",   context_params);
    СтруктураПараметров.Вставить("Источник",         Неопределено);
    СтруктураПараметров.Вставить("ДопПараметры",     Новый Структура);
	
	Если Начало <> Неопределено И Окончание <> Неопределено Тогда
		СтруктураПараметров.ДопПараметры.Вставить("Начало",    Начало);
		СтруктураПараметров.ДопПараметры.Вставить("Окончание", Окончание);
	Иначе
		ДатаОбновления = Saby_ТНОбщегоНазначенияСервер.ПоследнееУспешноЗагруженноеИзменение(ТипДокумента);
		ТекДата = ТекущаяДатаСеанса();
		
		Если ДатаОбновления = Неопределено Тогда
			ДатаОбновления = НачалоДня(ТекДата);
		КонецЕсли;
		
		Если ТекДата < ДатаОбновления Тогда
			ДатаОбновления = ТекДата;
		КонецЕсли;
		
		СтруктураПараметров.ДопПараметры.Вставить("Начало",    ДатаОбновления);
		СтруктураПараметров.ДопПараметры.Вставить("Окончание", КонецДня(ТекДата));
	КонецЕсли;
	
	СтруктураПараметров.ДопПараметры.Вставить("ИмяМетаданных", ТипДокумента);
	
    Saby_ТНЗагрузкаСервер.ЗагрузкаДокументовПоИзменениям(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

// Загружает данные с онлайна в документ
//
// Параметры:
//  ПараметрыЗагрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыЗагрузки()
//
Процедура ЗагрузкаДанныхДокумента(ПараметрыЗагрузки) Экспорт
	
	Подстановки = ПараметрыЗагрузки.ДанныеДокумента["Подстановки"];
	Если Не ЗначениеЗаполнено(Подстановки) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДок = ОбъектЗагружаемогоДокумента(ПараметрыЗагрузки);
	
	УстановитьДокументОснование(ОбъектДок, ПараметрыЗагрузки);
	
	ОбъектДок.Направление = НаправлениеДокумента(ПараметрыЗагрузки.ДанныеДокумента["Направление"], ОбъектДок.Направление);
	
	КодСостояния = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ПараметрыЗагрузки.ДанныеДокумента, "Состояние.Код");
	КодСостояния = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(КодСостояния);
	Состояние    = Справочники.Saby_СостоянияОбъектов.ПолучитьСтатусДокументаСБИС(КодСостояния);
	
	МассивТитулов = Документы[ПараметрыЗагрузки.ИмяМетаданных].ТитулыДляЗагрузки(ОбъектДок, ПараметрыЗагрузки);
	
	ДопПараметрыЗагрузкиВложения = ДопПараметрыЗагрузкиВложения(ПараметрыЗагрузки);
	
	МенеджерТитулов = Документы[ПараметрыЗагрузки.ИмяМетаданных].МенеджерТитулов();
	
	ЗагруженныйТитул = Неопределено;
	ВложенияЗагруженыБезОшибок = Истина;
	Для Каждого Титул Из МассивТитулов Цикл
		
		ПредставленияТитула = МенеджерТитулов.ПредставленияТитула(Титул);
		
		ВложенияЗагружены = Документы[ПараметрыЗагрузки.ИмяМетаданных].ВложенияЗагружены(
			Подстановки[ПредставленияТитула.ИмяПодстановки],
			Титул,
			ОбъектДок,
			ДопПараметрыЗагрузкиВложения);
			
		Если ВложенияЗагружены Тогда
			ЗагруженныйТитул = ПредставленияТитула.Представление;
		КонецЕсли;
			
	КонецЦикла;
	
	Если ВложенияЗагруженыБезОшибок Тогда
		ОбъектДок.ДатаИзменения = ДатаСобытияПоДокументу(ПараметрыЗагрузки, ОбъектДок.ДатаИзменения);
		ЗагрузитьДополнительныеДействия(ОбъектДок, ПараметрыЗагрузки.ДанныеДокумента["ДопДействия"]);
		ЗагрузитьТекущиеЭтапыДокумента(ОбъектДок, ПараметрыЗагрузки);
		ТекущийЭтапДокумента = ТекущийЭтапДокумента(ОбъектДок, ПараметрыЗагрузки);
		ПараметрыЗагрузки.Ссылка = СохранитьДокумент(
			ОбъектДок, ПараметрыЗагрузки.ИдСбис, ТекущийЭтапДокумента, Состояние, ПараметрыЗагрузки.ИзДокумента);
	ИначеЕсли ЗначениеЗаполнено(ЗагруженныйТитул) Тогда
		ПараметрыЗагрузки.Ссылка = СохранитьДокумент(
			ОбъектДок, ПараметрыЗагрузки.ИдСбис, ЗагруженныйТитул, Состояние, ПараметрыЗагрузки.ИзДокумента);
	Иначе
		ПараметрыЗагрузки.Ссылка = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекущиеЗначенияДокумента(ОбъектДок, ПараметрыЗагрузки) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Титул",     Неопределено);
	РезультатФункции.Вставить("Состояние", Неопределено);
	
	Если Не ПараметрыЗагрузки.ИзДокумента Тогда
		
		СостояниеВБазе = Saby_ТНОбщегоНазначенияСервер.ТекущийТитулИИДДокумента(ОбъектДок);
		
		Если ЗначениеЗаполнено(СостояниеВБазе.ИД) Тогда
			РезультатФункции.Титул     = СостояниеВБазе.АктивныйЭтап;
			РезультатФункции.Состояние = СостояниеВБазе.Состояние;
		КонецЕсли;
		
	КонецЕсли;
	
	МенеджерТитулов = Документы[ПараметрыЗагрузки.ИмяМетаданных].МенеджерТитулов();
	
	Если ПараметрыЗагрузки.ТекущийТитул <> Неопределено Тогда
		Если ТипЗнч(ПараметрыЗагрузки.ТекущийТитул) = Тип("Строка") Тогда
			РезультатФункции.Титул = МенеджерТитулов.ЗначениеПоПредставлению(ПараметрыЗагрузки.ТекущийТитул);
		Иначе
			РезультатФункции.Титул = ПараметрыЗагрузки.ТекущийТитул;
		КонецЕсли;
	Иначе
		РезультатФункции.Титул = МенеджерТитулов.ЗначениеПоПредставлению(РезультатФункции.Титул);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#Область ЗагрузкаТСИнтерфейс

Процедура ДанныеТСПрицеповСпецРазрешений(ДляДокумента, СтруктураТССОнлайна) Экспорт
	
	ДляДокумента.Вставить("ТранспортныеСредства", Новый Массив);
	ДляДокумента.Вставить("СпецРазрешения",       Новый Массив);
	
	Если Не ЗначениеЗаполнено(СтруктураТССОнлайна) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураТС = СтруктураТранспортногоСредства(СтруктураТССОнлайна);
	Если ЗначениеЗаполнено(СтруктураТС.РегистрационныйНомер) Тогда
		ДляДокумента.ТранспортныеСредства.Добавить(СтруктураТС);
	КонецЕсли;
	
	Прицепы = СтруктураТССОнлайна["Прицеп"];
	Если ЗначениеЗаполнено(Прицепы) Тогда
		
		Для Каждого Прицеп Из Прицепы Цикл
			СтруктураТС = СтруктураТранспортногоСредства(Прицеп, Истина);
			Если ЗначениеЗаполнено(СтруктураТС.РегистрационныйНомер) Тогда
				ДляДокумента.ТранспортныеСредства.Добавить(СтруктураТС);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ДляДокумента.Вставить("СпецРазрешения", ДанныеСпецРазрешений(СтруктураТССОнлайна["СпецУсловия"]));
	
	Документ = СтруктураТССОнлайна["Документ"];
	Если ЗначениеЗаполнено(Документ) Тогда
		ОснованиеПередачиГруза = Документ["ПередачаГруза"];
		Если ЗначениеЗаполнено(ОснованиеПередачиГруза) Тогда
			Тип = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей;
			ОснованиеПередачиГрузаТС = ЗагрузитьОдиночныйДокументЭПД(ОснованиеПередачиГруза, Тип);
			ДляДокумента.Вставить("ОснованиеПередачиГрузаТС", ОснованиеПередачиГрузаТС);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, СтруктураТС) Экспорт
	
	Если СтруктураТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчищенныеВидыТС = Новый Соответствие;
	
	Если СтруктураТС.Свойство("ТранспортныеСредства") Тогда
		Для Каждого ТранспортноеСредство Из СтруктураТС.ТранспортныеСредства Цикл
			ОчиститьТранспортныеСредства(ОбъектДок, ТранспортноеСредство.Вид, ОчищенныеВидыТС);
			СтрокаТС = ОбъектДок.ТранспортныеСредства.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТС, ТранспортноеСредство);
		КонецЦикла;
	КонецЕсли;

	Если СтруктураТС.Свойство("СпецРазрешения") Тогда 
		Если ЗначениеЗаполнено(СтруктураТС.СпецРазрешения) Тогда
			ОбъектДок.СпецРазрешения.Очистить();
		КонецЕсли;
		Для Каждого СтруктураСпецРазрешения Из СтруктураТС.СпецРазрешения Цикл
			СтрокаСпецРазрешения = ОбъектДок.СпецРазрешения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСпецРазрешения, СтруктураСпецРазрешения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаТСИнтерфейс

#Область ЗагрузкаВодителейИнтерфейс

Функция ДанныеВодителей(ВодителиСОнлайна, ДопПараметры) Экспорт
	
	РезультатФункции = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ВодителиСОнлайна) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	УбратьПустыеСтрокиВодителей(ВодителиСОнлайна, ДопПараметры);
	
	Для Каждого Водитель Из ВодителиСОнлайна["Водитель"] Цикл 
				
		ДанныеВодителя = ДанныеВодителяДляЗагрузки(Водитель);
		
		ПутевыеЛисты = Новый Массив;
		
		Если ЗначениеЗаполнено(Водитель["ПутевойЛист"]) Тогда
			
			// Создадим новый или найдем существующий путевой лист...				
			ТЗ = ТаблицаДокументовЭПД();
			
			НомерСтроки = 0;
			
			ДокументыЭПД(
				Водитель["ПутевойЛист"], 
				ТЗ, 
				Перечисления.Saby_ТипыДокумента.ПутевойЛист,
			    НомерСтроки);
				
			// Получим ссылки на существующие и новые документы
			СоответствиеДокументов = НайтиСоздатьДокументЭПД(ТЗ);
			
		    // Заполняем данные по документам
			Для Каждого СтрокаДок Из ТЗ Цикл 
				
				СсылкаДок = СоответствиеДокументов.Получить(СтрокаДок.НомерСтроки);
				
				// кидаем все в общий список			
				СтруктураПутевогоЛиста = Новый Структура;
				СтруктураПутевогоЛиста.Вставить("Документ",                     СсылкаДок);
				
				ПутевыеЛисты.Добавить(СтруктураПутевогоЛиста);
				
			КонецЦикла;				
		
		КонецЕсли;
		
		ДанныеВодителя.Вставить("ПутевыеЛисты", ПутевыеЛисты);
		
		РезультатФункции.Добавить(ДанныеВодителя);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ЗагрузкаВодителейИнтерфейс

Функция СтруктураДанныхДляРегистра(СсылкаНаДокумент, ТипТитула, Основной) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("СсылкаНаДокумент",    СсылкаНаДокумент);
	РезультатФункции.Вставить("ТипТитула",           ТипТитула);
	РезультатФункции.Вставить("Основной",            Основной);
	РезультатФункции.Вставить("ИдентификаторТитула", "");
	РезультатФункции.Вставить("Период",              Дата(1, 1, 1));
	РезультатФункции.Вставить("Просмотрено",         Ложь);
	РезультатФункции.Вставить("ТипТитулаОтказа",     Неопределено);
	РезультатФункции.Вставить("СохранитьДанные",     Ложь);
	РезультатФункции.Вставить("Данные",              Неопределено);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеДляРегистраТитулов(Вложение, ИмяМетаданных, СтруктураДанныхДляРегистра) Экспорт
		
	Если Вложение["ЗагруженВРегистр"] Тогда
		ДляРегистра = Неопределено;
	Иначе
		ДляРегистра = СтруктураДанныхДляРегистра;
		ДляРегистра.ИдентификаторТитула = ИдентификаторВложения(Вложение, СтруктураДанныхДляРегистра.ТипТитула);
		ДляРегистра.Период              = ДатаВложения(Вложение, СтруктураДанныхДляРегистра.ТипТитула);
		
		Если ДляРегистра.ТипТитулаОтказа = Неопределено Тогда
			МенеджерТитулов = Документы[ИмяМетаданных].МенеджерТитулов();
			ДляРегистра.Вставить("ТипТитулаОтказа", МенеджерТитулов.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДляРегистра;
	
КонецФункции

Функция СтруктураТитула(Титул, ДляДокумента, ДляРегистра) Экспорт
	
	СтруктураТитула = Новый Структура;
	СтруктураТитула.Вставить("Титул",        Титул);
	СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
	СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
	
	Возврат СтруктураТитула;
	
КонецФункции

#Область ДокументыЭПДИнтерфейс

Функция ЗагрузитьОдиночныйДокументЭПД(Данные, Тип) Экспорт
	
	ТЗ = ТаблицаДокументовЭПД();
	НС = ТЗ.Добавить();
		
	ЗаполнитьДанныеСтрокиТаблицыДокументовЭПД(НС, Данные, Тип); 
	
	СоответствиеДокументов = НайтиСоздатьДокументЭПД(ТЗ);
	
	Возврат СоответствиеДокументов.Получить(1);
	
КонецФункции

Функция НайтиСоздатьДокументЭПД(ТЗДокументы) Экспорт
	
	Если Не ЗначениеЗаполнено(ТЗДокументы) Тогда 
		Возврат Неопределено;
	КонецЕсли;
		
	НайденныеДокументы = НайтиДокументыЭПД(ТЗДокументы);
	Для Каждого СтрокаДок Из ТЗДокументы Цикл 						
		
		Ссылка = НайденныеДокументы.Получить(СтрокаДок.НомерСтроки);
		Если Не ЗначениеЗаполнено(Ссылка) Тогда 
			НовыйДок = НовыйДокументТрН(СтрокаДок);
			НайденныеДокументы.Вставить(СтрокаДок.НомерСтроки, НовыйДок);
		КонецЕсли;
			
	КонецЦикла;	

	Возврат НайденныеДокументы;
	
КонецФункции

Функция ТаблицаДокументовЭПД() Экспорт
	
	КвалификаторЧисла5 = Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Любой);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номер",        ОписаниеТипаСтрока(255));
	ТЗ.Колонки.Добавить("Дата",         Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТЗ.Колонки.Добавить("ТипДок",       Новый ОписаниеТипов("ПеречислениеСсылка.Saby_ТипыДокумента"));
	ТЗ.Колонки.Добавить("Наименование", ОписаниеТипаСтрока(255)); 
	ТЗ.Колонки.Добавить("Стороны",      ОписаниеТипаСтрока(0));
	ТЗ.Колонки.Добавить("НомерСтроки",  Новый ОписаниеТипов("Число",    КвалификаторЧисла5));
		
	Возврат ТЗ;
	
КонецФункции

Процедура ЗаполнитьДанныеСтрокиТаблицыДокументовЭПД(Строка, Данные, Тип, НомерСтроки = 0) Экспорт
	
	ЕстьНаименованиеНомерДата = ЗначениеЗаполнено(Данные["Наименование"])
	                              Или ЗначениеЗаполнено(Данные["Дата"])
					              Или ЗначениеЗаполнено(Данные["Номер"]);
					  
	Если Не ЕстьНаименованиеНомерДата Тогда
		Возврат;
	КонецЕсли;
		
	НомерСтроки = НомерСтроки + 1;
	
	Строка.Наименование = СокрЛП(Данные["Наименование"]);
	Строка.Номер        = СокрЛП(Данные["Номер"]);
	Строка.Дата         = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(Данные["Дата"]);
	Строка.ТипДок       = Тип;
	Строка.Стороны      = ЗначениеВСтрокуВнутр(Данные["Стороны"]);
	Строка.НомерСтроки  = НомерСтроки;
	
	// периодически бывает и так... заглушка от пустых документов
	Если Не ЗначениеЗаполнено(Строка.Номер) Тогда
		Строка.Номер = Строка.Наименование;
	Иначе 
		Если Не ЗначениеЗаполнено(Строка.Наименование) Тогда  
			Строка.Наименование = Строка.Номер; 
		КонецЕсли;		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ДокументыЭПД(Массив, ТЗ, Тип, НомерСтроки) Экспорт
	
	Если Не ЗначениеЗаполнено(Массив) Тогда 
		Возврат;
	КонецЕсли;
		
	Для Каждого Док Из Массив Цикл  
		НС = ТЗ.Добавить();	
		ЗаполнитьДанныеСтрокиТаблицыДокументовЭПД(НС, Док, Тип, НомерСтроки);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти // ДокументыЭПДИнтерфейс

#Область ЗагрузкаДанныхЮрЛицИнтерфейс

Функция НормализованныеДанныеЮрЛица(ПодстановкиЮрЛица) Экспорт
	
	Если ПодстановкиЮрЛица["СвЮЛ"] <> Неопределено Тогда
		ДанныеОрганизации = ПодстановкиЮрЛица["СвЮЛ"];
	ИначеЕсли ПодстановкиЮрЛица["СвФЛ"] <> Неопределено Тогда
		ДанныеОрганизации = ПодстановкиЮрЛица["СвФЛ"];
	Иначе
		ДанныеОрганизации = ПодстановкиЮрЛица;
	КонецЕсли;
	
	Адрес = Новый Соответствие;
	Если ДанныеОрганизации["АдресЮридический"] <> Неопределено Тогда
		Юридический = Новый Соответствие;
		Юридический.Вставить("Текст", ДанныеОрганизации["АдресЮридический"]);
		Адрес.Вставить("Юридический", Юридический);
		Адрес.Вставить("КодСтраны",  ДанныеОрганизации["КодСтраны"]);
	КонецЕсли;
	
	РеквизитыЮрЛица = Новый Соответствие;
	РеквизитыЮрЛица.Вставить("ИНН",      ДанныеОрганизации["ИНН"]);
	РеквизитыЮрЛица.Вставить("КПП",      ДанныеОрганизации["КПП"]);
	РеквизитыЮрЛица.Вставить("Название", ДанныеОрганизации["Название"]);
	РеквизитыЮрЛица.Вставить("ОГРН",     ДанныеОрганизации["ОГРН"]);
	
	Реквизиты = Новый Соответствие;
	Реквизиты.Вставить("ЮЛ", РеквизитыЮрЛица);
	
	РезультатФункции = Новый Соответствие;
	РезультатФункции.Вставить("Реквизиты", Реквизиты);
	РезультатФункции.Вставить("Адрес",     Адрес);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗагрузитьДанныеЮрЛиц(ДляДокумента, ПодстановкиЮрЛиц, Роль, СтруктураДанныхЮрЛица = Неопределено) Экспорт
	
	Если ТипЗнч(ПодстановкиЮрЛиц) = Тип("Массив") И СтруктураДанныхЮрЛица <> Неопределено Тогда
		ВызватьИсключение "Некорректное использование процедуры ЗагрузитьДанныеЮрЛица.
		|СтруктураДанныхЮрЛица доступна только для одиночной загрузки";
	КонецЕсли;
	
	МассивПодстановокЮрЛиц = МассивПодстановокЮрЛиц(ПодстановкиЮрЛиц);
	
	Если ТипЗнч(Роль) = Тип("ПеречислениеСсылка.Saby_РолиКонтрагентов") Тогда
		РольСсылка = Роль;
	Иначе
		РольСсылка = Перечисления.Saby_РолиКонтрагентов[Роль];
	КонецЕсли;
	
	Для Каждого ПодстановкиЮрЛица Из МассивПодстановокЮрЛиц Цикл
		
		СтруктураДанныхЮрЛица = СтруктураДанныхЮрЛица(РольСсылка, ПодстановкиЮрЛица, СтруктураДанныхЮрЛица);
		Если СтруктураДанныхЮрЛица.Роль = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхЮрЛица.КлючСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НовыйКлючОсновнойСтроки(
			ДляДокумента, "ДанныеЮрЛиц");
		
		Для Каждого СтруктураКонтактныхДанных Из СтруктураДанныхЮрЛица.КонтактныеДанные Цикл
			СтруктураКонтактныхДанных.КлючСтроки_ДанныеЮрЛиц = СтруктураДанныхЮрЛица.КлючСтроки;
			ДляДокумента.КонтактныеДанные.Добавить(СтруктураКонтактныхДанных);
		КонецЦикла;
		
		СтруктураДанныхЮрЛица.Удалить("КонтактныеДанные");
		
		ДляДокумента.ДанныеЮрЛиц.Добавить(СтруктураДанныхЮрЛица);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКонтактныеДанныеЮрЛица(СтруктураДанныхЮрЛица, КонтактыЮрЛицаОнлайн) Экспорт
	
	Если Не ЗначениеЗаполнено(КонтактыЮрЛицаОнлайн) Тогда
		Возврат;
	КонецЕсли;
	
	МассивТелефонов = КонтактыЮрЛицаОнлайн["Телефон"];
	Если ЗначениеЗаполнено(МассивТелефонов) Тогда 
		Для Каждого Телефон Из МассивТелефонов Цикл 				
			
			ЗначениеТелефона = Телефон["Значение"];
			
			Если Не ЗначениеЗаполнено(ЗначениеТелефона) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураКонтактныхДанных = Saby_ТНОбщегоНазначенияКлиентСервер.СтруктураКонтактныхДанных();
			СтруктураКонтактныхДанных.Роль     = СтруктураДанныхЮрЛица.Роль;
			СтруктураКонтактныхДанных.Тип      = Перечисления.ТипыКонтактнойИнформации.Телефон;
			СтруктураКонтактныхДанных.Значение = ЗначениеТелефона;
			СтруктураДанныхЮрЛица.КонтактныеДанные.Добавить(СтруктураКонтактныхДанных);
			
		КонецЦикла;	
	КонецЕсли;
	
	МассивЭлектроннойПочты = КонтактыЮрЛицаОнлайн["ЭлектроннаяПочта"];
	Если ЗначениеЗаполнено(МассивЭлектроннойПочты) Тогда 
		Для Каждого ЭлПочта Из МассивЭлектроннойПочты Цикл 				
			
			ЗначениеЭлектроннойПочты = ЭлПочта["Значение"];
			
			Если Не ЗначениеЗаполнено(ЗначениеЭлектроннойПочты) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураКонтактныхДанных = Saby_ТНОбщегоНазначенияКлиентСервер.СтруктураКонтактныхДанных();
			СтруктураКонтактныхДанных.Роль     = СтруктураДанныхЮрЛица.Роль;
			СтруктураКонтактныхДанных.Тип      = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			СтруктураКонтактныхДанных.Значение = ЗначениеЭлектроннойПочты;
			СтруктураДанныхЮрЛица.КонтактныеДанные.Добавить(СтруктураКонтактныхДанных);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПреобразоватьСтруктуруАдреса(ДанныеАдреса) Экспорт
	
	СтруктураАдреса = Неопределено;
	
	Если Не ЗначениеЗаполнено(ДанныеАдреса) Тогда
		Возврат СтруктураАдреса;
	КонецЕсли;
	
	Текст = ДанныеАдреса["Текст"];
	// иногда адрес приходит тут
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Текст = ДанныеАдреса["АдресТекст"];
	КонецЕсли;
		
	Адрес = ДанныеАдреса["Структура"];
		
	Если ЗначениеЗаполнено(Текст) 
		Или ЗначениеЗаполнено(Адрес) Тогда
		
		Если ТипЗнч(Адрес) <> Тип("Строка") Тогда 
			СтруктураJS = Saby_ТНОбщегоНазначенияСервер.ЗначениеВJSON(Адрес);
		Иначе 
			СтруктураJS = Адрес;
		КонецЕсли;
	
		// есть представление
		Если ЗначениеЗаполнено(Текст) Тогда	
			Представление = Текст;			
		Иначе 
			Если ТипЗнч(Адрес) = Тип("Строка") Тогда
				Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(Адрес);
			Иначе
				// есть только структура данных. сформируем представление по структуре
				Представление = ПредставлениеАдресаИзСоответствия(Адрес); 
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("АдресСтрокой",    Представление);
		СтруктураАдреса.Вставить("АдресСтруктурой", СтруктураJS);
		
	КонецЕсли;	
	
	Возврат СтруктураАдреса;
	
КонецФункции

Процедура ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(ОбъектДок, СтруктураДанных, Роль, ЗагрузкаСОнлайна = Истина) Экспорт
	
	Если ЗагрузкаСОнлайна Тогда
		УдалитьСвязаннуюСЮрЛицомИнформацию(СтруктураДанных.ДанныеЮрЛиц, ОбъектДок.ДанныеЮрЛиц, Роль);
	КонецЕсли;
	Для Каждого СтруктураДанныхЮрЛица Из СтруктураДанных.ДанныеЮрЛиц Цикл
		Если СтруктураДанныхЮрЛица.Роль <> Роль Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДанныхЮрЛиц = ОбъектДок.ДанныеЮрЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныхЮрЛиц, СтруктураДанныхЮрЛица);
	КонецЦикла;
	
	Если Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(ОбъектДок, "КонтактныеДанные") Тогда
		Если ЗагрузкаСОнлайна Тогда
			УдалитьСвязаннуюСЮрЛицомИнформацию(СтруктураДанных.КонтактныеДанные, ОбъектДок.КонтактныеДанные, Роль);
		КонецЕсли;
		Для Каждого СтруктураКонтактныхДанных Из СтруктураДанных.КонтактныеДанные Цикл
			Если СтруктураКонтактныхДанных.Роль <> Роль Тогда
				Продолжить;
			КонецЕсли;
			СтрокаКонтактныхДанных = ОбъектДок.КонтактныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКонтактныхДанных, СтруктураКонтактныхДанных);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ИННКППОрганизации(ДанныеОрганизацииСОнлайна) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ЕстьДанные", Ложь);
	РезультатФункции.Вставить("ИНН",        "");
	РезультатФункции.Вставить("КПП",        "");
	
	Если Не ЗначениеЗаполнено(ДанныеОрганизацииСОнлайна) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Если ДанныеОрганизацииСОнлайна["СвЮЛ"] <> Неопределено Тогда
		ДанныеОрганизации = ДанныеОрганизацииСОнлайна["СвЮЛ"];
	ИначеЕсли ДанныеОрганизацииСОнлайна["СвФЛ"] <> Неопределено Тогда
		ДанныеОрганизации = ДанныеОрганизацииСОнлайна["СвФЛ"];
	Иначе
		Возврат РезультатФункции;
	КонецЕсли;
	
	РезультатФункции.ИНН = ДанныеОрганизации["ИНН"];
	РезультатФункции.КПП = ДанныеОрганизации["КПП"];
	
	РезультатФункции.ЕстьДанные = Истина;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ЗагрузкаДанныхЮрЛицИнтерфейс

// Получает дату из подстановок указанного титула, полученного с онлайна.
//
// Параметры:
//  ДанныеТитула - Соответствие - значение подстановок с онлайна.
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЗнП - титул, для которого получаем дату.
//  СтруктураВложения - Структура - структура данных вложения.
//
// Возвращаемое значение:
//   Дата - значение даты
//
Функция ДатаВложения(ДанныеТитула, Титул, СтруктураВложения = Неопределено) Экспорт
	
	Если ДанныеТитула["ДатаВложенияТитула"] <> Неопределено Тогда
		
		РезультатФункции = ДанныеТитула["ДатаВложенияТитула"];
		
	ИначеЕсли СтруктураВложения <> Неопределено Тогда
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(СтруктураВложения["ДатаВремя"]);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.Погрузка Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110339.Файл.Документ.ДатИнфГО", "")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110339.Файл.Документ.ВрИнфГО", "");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ПолучениеГруза Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110340.Файл.Документ.ДатИнфПрвПрием")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110340.Файл.Документ.ВрИнфПрвПрием");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110341.Файл.Документ.ДатИнфГП")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110341.Файл.Документ.ВрИнфГП");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ВыдачаГруза Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110342.Файл.Документ.ДатИнфПрвВыд")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110342.Файл.Документ.ВрИнфПрвВыд");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.Переадресовка Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110343.Файл.Документ.ДатаИнфПА")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110343.Файл.Документ.ВрИнфПА");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ПереадресовкаУведомление Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1167009.Файл.Документ.ДатаУвПА")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1167009.Файл.Документ.ВрУвПА");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ЗаменаВодителяТС Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110344.Файл.Документ.ДатИнфЗамен")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110344.Файл.Документ.ВрИнфЗамен");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.СогласованиеСтоимости Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110346.Файл.Документ.ДатПУДИнфГО")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110346.Файл.Документ.ВрПУДИнфГО");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ИзменениеСтоимости Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110345.Файл.Документ.ДатПУДИнфПрв")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "1110345.Файл.Документ.ВрПУДИнфПрв");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.УведомлениеОУточнении Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "Документ.Данные.ДатаПол")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "Документ.Данные.ВремяПол");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
    Иначе 	
		
		РезультатФункции = Неопределено;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Получает идентификатор из подстановок указанного титула, полученного с онлайна.
//
// Параметры:
//  ДанныеТитула - Соответствие - значение подстановок с онлайна.
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЗнП - титул, для которого получаем дату.
//  СтруктураВложения - Структура - структура данных вложения.
//
// Возвращаемое значение:
//   Строка - идентификатор титула
//
Функция ИдентификаторВложения(ДанныеТитула, Титул, СтруктураВложения = Неопределено) Экспорт
	
	ПредставленияТитула = Перечисления.Saby_ТипТитулаЭтрН.ПредставленияТитула(Титул);
	
	Если ДанныеТитула["ИдентификаторВложенияТитула"] <> Неопределено Тогда
		ИдФайл = ДанныеТитула["ИдентификаторВложенияТитула"];
	ИначеЕсли СтруктураВложения <> Неопределено Тогда
		ИдФайл = СтруктураВложения["Идентификатор"];
	ИначеЕсли ПредставленияТитула.КодТитула = "1115113" Тогда
		ИдФайл = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "Документ.Данные.ИдФайл", "");
	ИначеЕсли ПредставленияТитула.КодТитула <> "" Тогда
		ИдФайл = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
			ДанныеТитула[ПредставленияТитула.КодТитула], "Файл.ИдФайл", "");
	Иначе
		ИдФайл = "";
	КонецЕсли;
	
	РезультатФункции = Прав(ИдФайл, 36);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗагрузитьОтветственного(СтруктураДляЗаполнения, ОтветственныйСОнлайна) Экспорт
	
	Если ОтветственныйСОнлайна = Неопределено Тогда
		ОтветственныйСОнлайна = Новый Соответствие;
	КонецЕсли;
	
	СтруктураДляЗаполнения.Вставить("Фамилия",   ОтветственныйСОнлайна["Фамилия"]);
	СтруктураДляЗаполнения.Вставить("Имя",       ОтветственныйСОнлайна["Имя"]);
	СтруктураДляЗаполнения.Вставить("Отчество",  ОтветственныйСОнлайна["Отчество"]);
	СтруктураДляЗаполнения.Вставить("Должность", ОтветственныйСОнлайна["Должность"]);
	
	Телефоны = ОтветственныйСОнлайна["Телефон"];
	Если ЗначениеЗаполнено(Телефоны) Тогда
		
		МассивТелефонов = Новый Массив;
		Для Каждого Телефон Из Телефоны Цикл  
			МассивТелефонов.Добавить(Телефон["Значение"]);
		КонецЦикла;
		
		Если МассивТелефонов.Количество() > 0 Тогда
			СтруктураДляЗаполнения.Вставить("Телефоны", ЗначениеВСтрокуВнутр(МассивТелефонов));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтветственныхЛиц(ОбъектДок, ДанныеОтветственныхЛиц, РольОтветственного) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеОтветственныхЛиц) Тогда
		ОтборОтветственных = Новый Структура;
		ОтборОтветственных.Вставить("Роль", РольОтветственного);
		МассивСтрокДляУдаления = ОбъектДок.ОтветственныеЛица.НайтиСтроки(ОтборОтветственных);
		Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
			ОбъектДок.ОтветственныеЛица.Удалить(СтрокаДляУдаления);
		КонецЦикла;
	КонецЕсли;
	
	ЭтоВодитель      = РольОтветственного = Перечисления.Saby_РолиОтветственных.Водитель;
	ЕстьПутевыеЛисты = Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(ОбъектДок, "ПутевыеЛисты");
	
	Если ЭтоВодитель И ЕстьПутевыеЛисты Тогда
		ОбъектДок.ПутевыеЛисты.Очистить();
	КонецЕсли;
	
	КлючСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НовыйКлючОсновнойСтроки(ОбъектДок, "ОтветственныеЛица");
	
	Для Каждого СтруктураОтветственного Из ДанныеОтветственныхЛиц Цикл 
		
		СтрокаОтветственного = ОбъектДок.ОтветственныеЛица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОтветственного, СтруктураОтветственного);
		СтрокаОтветственного.Роль = РольОтветственного;
		СтрокаОтветственного.КлючСтроки = КлючСтроки;
		
		Если ЭтоВодитель И ЕстьПутевыеЛисты Тогда
			Для Каждого СтруктураПутевогоЛиста Из СтруктураОтветственного.ПутевыеЛисты Цикл
				СтрокаПутевогоЛиста = ОбъектДок.ПутевыеЛисты.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПутевогоЛиста, СтруктураПутевогоЛиста);
				СтрокаПутевогоЛиста.КлючСтроки_ОтветственныеЛица = КлючСтроки;
			КонецЦикла;
		КонецЕсли;
		
		КлючСтроки = КлючСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ЗагрузкаГрузаИнтерфейс

Процедура ЗаполнитьДанныеПоГрузам(ОбъектДок, ДляДокумента) Экспорт
	
	Если Не ДляДокумента.Свойство("Грузы") Или ДляДокумента.Грузы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицыПоГрузам = Новый Массив;
	ТаблицыПоГрузам.Добавить("Грузы");
	ТаблицыПоГрузам.Добавить("Контейнеры");
	ТаблицыПоГрузам.Добавить("Маркировки");
	ТаблицыПоГрузам.Добавить("ОпасныеГрузы");
	ТаблицыПоГрузам.Добавить("СведенияГосСистем");
	ТаблицыПоГрузам.Добавить("Груз_АдресаПунктов");
	
	Для Каждого ИмяТаблицы Из ТаблицыПоГрузам Цикл
		Если Не Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(ОбъектДок, ИмяТаблицы)
			Или Не Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(ДляДокумента, ИмяТаблицы) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДляДокумента[ИмяТаблицы].Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектДок[ИмяТаблицы].Очистить();
		
		Для Каждого СтруктураСтрокиТаблицы Из ДляДокумента[ИмяТаблицы] Цикл
			СтрокаТаблицы = ОбъектДок[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураСтрокиТаблицы);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеПоГрузам(ДляДокумента, ДанныеГруз, ЗагрузкаСОнлайна, ЭтоЭТрН) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеГруз) Тогда
		Возврат;
	КонецЕсли;
	
	ДляДокумента.Вставить("Грузы", Новый Массив);
	
	Если ЭтоЭТрН Тогда		
		
		Валюта = Saby_ТНЗагрузкаСервер.ВалютаПоДаннымОнлайна(
			ДанныеГруз, 
			ЗагрузкаСОнлайна,
			ДляДокумента.Валюта);
		ДляДокумента.Вставить("Валюта", Валюта);
					
		ДляДокумента.Вставить("Контейнеры", Новый Массив);
		ДляДокумента.Вставить("Маркировки", Новый Массив);
		ДляДокумента.Вставить("ОпасныеГрузы", Новый Массив);
		ДляДокумента.Вставить("СведенияГосСистем", Новый Массив);
		
	Иначе 
		
		ДляДокумента.Вставить("Груз_АдресаПунктов", Новый Массив);
		
	КонецЕсли;
	
	Позиции = ДанныеГруз["Позиция"];	
	Если Не ЗначениеЗаполнено(Позиции) Тогда 
		Возврат;
	КонецЕсли;
	
	КлючСтроки = 1;
	Для Каждого Груз Из Позиции Цикл 
		
		СтруктураГруза = Новый Структура;
		СтруктураГруза.Вставить("КлючСтроки", КлючСтроки);
		
		СтруктураГруза.Вставить("СпособУпаковки", Груз["Упаковка"]);
		СтруктураГруза.Вставить("Примечание",     Груз["ДопИнформация"]);
		СтруктураГруза.Вставить("Состояние",      Груз["Состояние"]);
		СтруктураГруза.Вставить("Наименование",   Груз["Наименование"]);
				
	    ЗагрузитьПараметрыГруза(СтруктураГруза, Груз["Параметры"]);		
					
		СтруктураГруза.Вставить("ВидТары", Saby_ТНЗагрузкаСервер.НайтиСоздатьВидУпаковки(Груз["ТараКод"]));
				
		Если ЭтоЭТрН Тогда
			ЗагрузитьДанныеГруза_ТранспортнаяНакладная(Груз, СтруктураГруза, ДляДокумента, КлючСтроки, ЗагрузкаСОнлайна);			
		Иначе 				
			// Заказ на перевозку
			ЗагрузитьДанныеГруза_ЗаказНаПеревозку(ДляДокумента, Груз, СтруктураГруза);			
		КонецЕсли;	
		
		ДляДокумента.Грузы.Добавить(СтруктураГруза);
		
		КлючСтроки = КлючСтроки + 1;
		
	КонецЦикла;	
		
КонецПроцедуры

#КонецОбласти // ЗагрузкаГрузаИнтерфейс

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Процедура ЗагрузитьДокумент(ПараметрыЗагрузки, ОбщиеПараметрыЗагрузки, Результат)
	
	Ошибки = Неопределено;
	
	ПолучитьДанныеДокументаИзСБИС(ПараметрыЗагрузки, ОбщиеПараметрыЗагрузки, Результат);
	
	Попытка
		
		// Статистика. Прямая запись
		Если ПараметрыЗагрузки.ТолькоАктивныйЭтап Тогда
			
			Saby_ТНВыгрузкаСервер.ЗаписатьСтатистикуНапрямую(
				ПараметрыЗагрузки.Ссылка, ПараметрыЗагрузки.ТекущийТитул);
				
		КонецЕсли;	
		
		ЗагрузкаДанныхДокумента(ПараметрыЗагрузки);
		
		Результат.Успешные.Добавить(ПараметрыЗагрузки.Ссылка);
		Результат.Итог.Количество = Результат.Итог.Количество + 1;
		
		Если ОбщиеПараметрыЗагрузки.ЗагружатьПечатнуюФорму Тогда
			
			ПараметрыЗагрузкиПечатнойФормы = ПараметрыЗагрузкиПечатнойФормыИзСбис(
				ПараметрыЗагрузки.Ссылка, ОбщиеПараметрыЗагрузки.context_params);
				
			ЗагрузитьПечатнуюФормуДокументаИзСбис(
				ПараметрыЗагрузкиПечатнойФормы, ПараметрыЗагрузки.ДанныеДокумента["СсылкаНаPDF"]); 
				
		КонецЕсли;
		
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		ТекстОшибки = Saby_ТНОбщегоНазначенияСервер.ПричинаОшибки(ИнфоОшибки.Описание);
		Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
		
		Ошибки.Вставить("ИмяМетаданных", ПараметрыЗагрузки.ИмяМетаданных);
		
		Если ЗначениеЗаполнено(ПараметрыЗагрузки.Ссылка) Тогда
			Результат.Ошибки.Вставить(ПараметрыЗагрузки.Ссылка, Ошибки);
		Иначе
			Результат.Ошибки.Вставить(ПараметрыЗагрузки.ИдСбис, Ошибки);
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПолучитьДанныеДокументаИзСБИС(ПараметрыЗагрузки, ОбщиеПараметрыЗагрузки, Результат)
	
	Если ЗначениеЗаполнено(ПараметрыЗагрузки.ДанныеДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Ошибки = Неопределено;
	
	Данные = Saby_ТНОбщегоНазначенияСервер.ДанныеСостоянияОбъекта(ПараметрыЗагрузки.Ссылка);
	Если Данные <> Неопределено Тогда 
		ИДСбис = Данные.UID;
	Иначе 
		ИДСбис = "";
	КонецЕсли;
	
	// документа нет в сбис. данные не загрузить
	Если Не ЗначениеЗаполнено(ИДСбис) Тогда 
		ТекстОшибки = "У документа нет идентификатора Сбис, обновление данных не возможно!";					
		Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
		Ошибки.Вставить("ИмяМетаданных", ПараметрыЗагрузки.ИмяМетаданных);
		Результат.Ошибки.Вставить(ПараметрыЗагрузки.Ссылка, Ошибки); 
		Возврат;                             
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Идентификатор", ИДСбис);
	Параметры.Вставить("ДопПоля",       "ДопДействия,ТекущиеЭтапы,Подстановки,Расширение");
	
	// Стороны - обогащают посдстановки данными по ответсвенным МО, ТО, выезд и заезд
	// ЗаменаВодителя - обогащает данные ид замены водителя - основания и документа замены
	Если ПараметрыЗагрузки.ИмяМетаданных = "Saby_ПутевойЛист" Тогда 
		Параметры.ДопПоля = Параметры.ДопПоля + ",Стороны,ЗаменаВодителя";
	КонецЕсли;	
		
	Попытка		
		РезультатСБИС = ОбщиеПараметрыЗагрузки.ОбъектОбработки.local_helper_read_document(
			ОбщиеПараметрыЗагрузки.context_params, Параметры);
			
		ПараметрыЗагрузки.ДанныеДокумента = РезультатСБИС;
		ПараметрыЗагрузки.ИДСбис          = ИДСбис;
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		ТекстОшибки = Saby_ТНОбщегоНазначенияСервер.ПричинаОшибки(ИнфоОшибки.Описание);					
		Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
		Ошибки.Вставить("ИмяМетаданных", ПараметрыЗагрузки.ИмяМетаданных);
		Результат.Ошибки.Вставить(ПараметрыЗагрузки.Ссылка, Ошибки); 
		Возврат;
		
	КонецПопытки;
	
	Вложения = Новый Соответствие;
	ДобавитьВложенияИзСобытий(Вложения, ПараметрыЗагрузки.ДанныеДокумента["Событие"], ПараметрыЗагрузки.ИмяМетаданных);
	ПараметрыЗагрузки.ДанныеДокумента.Вставить("Вложения", Вложения["Вложения"]);
	
	ДанныеПодстановок = ПараметрыЗагрузки.ДанныеДокумента["Подстановки"];
	Если ЗначениеЗаполнено(ДанныеПодстановок) Тогда
		ПараметрыЗагрузки.ДанныеДокумента.Вставить("Подстановки", Новый Соответствие);
		ПараметрыЗагрузки.ДанныеДокумента.Вставить("ИдТитулов",   Новый Соответствие);
		Для Каждого Подстановки Из ДанныеПодстановок Цикл
			ДобавитьПодстановкуТитула(
				ПараметрыЗагрузки.ДанныеДокумента,
				Подстановки.Ключ,
				Подстановки.Значение,
				ПараметрыЗагрузки.ИмяМетаданных);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектЗагружаемогоДокумента(ПараметрыЗагрузки)
	
	Если Не ЗначениеЗаполнено(ПараметрыЗагрузки.Ссылка) Тогда
		ПараметрыЗагрузки.Ссылка = Saby_ТНОбщегоНазначенияСервер.ДокументПоИдентификаторуСбис(ПараметрыЗагрузки.ИдСбис);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗагрузки.Ссылка) Тогда
		РезультатФункции = ПараметрыЗагрузки.Ссылка.ПолучитьОбъект();
	Иначе
		РезультатФункции = Документы[ПараметрыЗагрузки.ИмяМетаданных].СоздатьДокумент();
		РезультатФункции.НомерСбис   = ПараметрыЗагрузки.ДанныеДокумента["Номер"];
		РезультатФункции.Комментарий = ПараметрыЗагрузки.ДанныеДокумента["Название"];
		
		ДатаВремяСоздания = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(
			ПараметрыЗагрузки.ДанныеДокумента["ДатаВремяСоздания"]);
		РезультатФункции.Дата = ДатаВремяСоздания;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура УстановитьДокументОснование(ОбъектДок, ПараметрыЗагрузки)
	
	Если Не ПараметрыЗагрузки.ЭтоЗаполнениеСПомощьюINI
		Или Не ЗначениеЗаполнено(ПараметрыЗагрузки.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДок.ДокументОснование_ОбъектМетаданных = Saby_ТНОбщегоНазначенияСервер.ИмяМетаданныхДокумента(
		ПараметрыЗагрузки.ДокументОснование);
	
	Если ЗначениеЗаполнено(ОбъектДок.ДокументОснование_ОбъектМетаданных) Тогда 
		ОбъектДок.ДокументОснование_Идентификатор = ПараметрыЗагрузки.ДокументОснование.УникальныйИдентификатор();
	Иначе
		ОбъектДок.ДокументОснование_Идентификатор = "";
	КонецЕсли;
	
КонецПроцедуры

Функция НаправлениеДокумента(НаправлениеСОнлайна, Знач ЗначениеПоУмолчанию = Неопределено)
	
	Если ЗначениеПоУмолчанию = Неопределено Тогда
		ЗначениеПоУмолчанию = Перечисления.Saby_Направление.Исходящий;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаправлениеСОнлайна) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Перечисления.Saby_Направление.ЗначениеПоИмени(НаправлениеСОнлайна);
	
КонецФункции

Функция ДопПараметрыЗагрузкиВложения(ПараметрыЗагрузки = Неопределено)
	
	РезультатФункции = Новый Структура;	
	РезультатФункции.Вставить("ЗагрузкаСОнлайна",     Истина);
	РезультатФункции.Вставить("Просмотрено",          Ложь);
	РезультатФункции.Вставить("ТолькоАктивныйЭтап",   Ложь);
	РезультатФункции.Вставить("ИмяМетаданных",        "");
	
	Если ЗначениеЗаполнено(ПараметрыЗагрузки) Тогда 
		ЭПЛ = ПараметрыЗагрузки.ИмяМетаданных = "Saby_ПутевойЛист";
	Иначе 
		ЭПЛ = Ложь;
	КонецЕсли;
	
	// обработка доп узлов для ЭПЛ
	Если ЭПЛ Тогда 
		РезультатФункции.Вставить("Стороны",        Неопределено);	
		РезультатФункции.Вставить("ЗаменаВодителя", Неопределено);
	КонецЕсли;
	
	Если ПараметрыЗагрузки <> Неопределено Тогда  
		
		РезультатФункции.Вставить("Событие",              ПараметрыЗагрузки.ДанныеДокумента["Событие"]);
		РезультатФункции.Вставить("СторонняяОрганизация", ПараметрыЗагрузки.ДанныеДокумента["Контрагент"]);
		
		РезультатФункции.Просмотрено = ПараметрыЗагрузки.ТекущийТитул <> Неопределено;
		
		Если ПараметрыЗагрузки.ЭтоЗаполнениеСПомощьюINI Тогда 
			РезультатФункции.ЗагрузкаСОнлайна = Ложь;
		КонецЕсли;
		
		РезультатФункции.ТолькоАктивныйЭтап = ПараметрыЗагрузки.Свойство("ТолькоАктивныйЭтап")
			И ПараметрыЗагрузки.ТолькоАктивныйЭтап;
		
		РезультатФункции.ИмяМетаданных = ПараметрыЗагрузки.ИмяМетаданных;
		
		РезультатФункции.Вставить("ПараметрыОснования", ПараметрыЗагрузки.ПараметрыОснования);
		
		Если ЭПЛ Тогда 
			РезультатФункции.Вставить("Стороны",        ПараметрыЗагрузки.ДанныеДокумента["Стороны"]);
			РезультатФункции.Вставить("ЗаменаВодителя", ПараметрыЗагрузки.ДанныеДокумента["ЗаменаВодителя"]);			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СохранитьДокумент(ОбъектДок, ИД, АктивныйЭтап, Состояние, ИзДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ОбъектДок.Ссылка) Тогда 
			
			ОбъектДок.УстановитьНовыйНомер();
			Если Не ЗначениеЗаполнено(ОбъектДок.Дата) Тогда 
				ОбъектДок.Дата = ТекущаяДатаСеанса(); 				
			КонецЕсли;
			
		КонецЕсли;		
		
		ОбъектДок.Записать();
		
		Ссылка = ОбъектДок.Ссылка;
		
		// выкручиваемся через SbisId
		// больше писать не куда...
		Если Не ИзДокумента Тогда			
			Просмотрен = "Не просмотрен";  			
		Иначе 
			Просмотрен = "";
		КонецЕсли;
				
        ПараметрыСтатус = Saby_ТНОбщегоНазначенияСервер.ПараметрыЗаписиРегистраСостояний(); 
		
		ПараметрыСтатус.ИД           = ИД;
		ПараметрыСтатус.АктивныйЭтап = СокрЛП(АктивныйЭтап);
		ПараметрыСтатус.Ссылка       = Ссылка;
		ПараметрыСтатус.Состояние    = Состояние;
		ПараметрыСтатус.СбисИД       = Просмотрен; 
		
		Saby_ТНОбщегоНазначенияСервер.ОбновитьДанныеСостояния(ПараметрыСтатус);
		
	Исключение		
		Ссылка = Неопределено;		
	КонецПопытки;	
	
	Возврат Ссылка;
	
КонецФункции

Процедура ЗагрузитьДополнительныеДействия(ОбъектДок, ДопДействия)
	
	Если Не Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(ОбъектДок, "ДоступныеДействия") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДок.Ссылка) Тогда 
		ОбъектДок.ДоступныеДействия.Очистить();	  
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДопДействия) Тогда 
		Возврат; 
	КонецЕсли;
	
	Для Каждого Действие Из ДопДействия Цикл 
		
		Значение = ЗначениеДопДействия(Действие["Название"]);
		Если ЗначениеЗаполнено(Значение) Тогда 
			НС = ОбъектДок.ДоступныеДействия.Добавить();
			НС.Действие = Значение;
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры

Функция ЗначениеДопДействия(Действие)
	
	Если Действие = "Уведомление о переадресовке" Тогда 
		Значение = Перечисления.Saby_ДоступныеДействия.УведомлениеОПереадресовке;
	ИначеЕсли Действие = "Изменить стоимость" Тогда
		Значение = Перечисления.Saby_ДоступныеДействия.ИзменитьСтоимость;
	ИначеЕсли Действие = "Согласовать стоимость" Тогда	
		Значение = Перечисления.Saby_ДоступныеДействия.СогласоватьСтоимость;
	ИначеЕсли Действие = "Замена водителей/ТС" Тогда
		Значение = Перечисления.Saby_ДоступныеДействия.ЗаменаВодителяТС;
	ИначеЕсли Действие = "Переадресовка" Тогда 	 
		Значение = Перечисления.Saby_ДоступныеДействия.Переадресовка;
	Иначе
		// не нашли соотвествия
		Значение = Неопределено;
	КонецЕсли;
	 		 
	Возврат Значение;
	
КонецФункции

Функция ДатаСобытияПоДокументу(Параметры, Знач ДатаПоУмолчанию = Неопределено)
	
	Если ДатаПоУмолчанию = Неопределено Тогда
		ДатаПоУмолчанию = Дата(1, 1, 1);
	КонецЕсли;
	
	Если Параметры.ИзДокумента Тогда
		Возврат ДатаПоУмолчанию;
	КонецЕсли;
	
	События = Параметры.ДанныеДокумента["Событие"];
	Если Не ЗначениеЗаполнено(События) Тогда
		Возврат ДатаПоУмолчанию;
	КонецЕсли;
	
	Возврат Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(События[0]["ДатаВремя"]);
	
КонецФункции

Функция ТекущийЭтапДокумента(ОбъектДок, ПараметрыЗагрузки)
	
	РезультатФункции = "";
	
	ТекущиеЭтапы = ПараметрыЗагрузки.ДанныеДокумента["ТекущиеЭтапы"];
	Если ТекущиеЭтапы = Неопределено Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	РезультатФункции = ЭтапДляПодписания(ОбъектДок, ПараметрыЗагрузки);
	
	Если РезультатФункции = Неопределено Тогда
		ДатаЭтапа = ДобавитьМесяц(ТекущаяДатаСеанса(), 12);
	
		Для Каждого ТекущийЭтап Из ТекущиеЭтапы Цикл
			ДатаСобытия = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ТекущийЭтап["ДатаСобытия"]);
			Если ДатаСобытия < ДатаЭтапа Тогда
				РезультатФункции = ТекущийЭтап["Наименование"];
				ДатаЭтапа = ДатаСобытия;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ЭтапДляПодписания(ОбъектДок, ПараметрыЗагрузки)
	
	РезультатФункции = Неопределено;
	
	ДоступныйЭтап = ОбъектДок.ТекущиеЭтапы.Найти(Истина, "Доступен");
	Если ДоступныйЭтап <> Неопределено Тогда
		РезультатФункции = ДоступныйЭтап.Наименование;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗагрузитьТекущиеЭтапыДокумента(ОбъектДок, ПараметрыЗагрузки)
	
	ОбъектДок.ТекущиеЭтапы.Очистить();
	
	ТекущиеЭтапы = ПараметрыЗагрузки.ДанныеДокумента["ТекущиеЭтапы"];
	
	Если ТекущиеЭтапы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоступныеЭтапы = Документы[ПараметрыЗагрузки.ИмяМетаданных].ДоступныеОрганизацииЭтапы(ОбъектДок, ПараметрыЗагрузки);
	
	МенеджерТитулов = Документы[ПараметрыЗагрузки.ИмяМетаданных].МенеджерТитулов();
	
	Для Каждого ТекущийЭтап Из ТекущиеЭтапы Цикл
		
		НаименованиеЭтапа = ТекущийЭтап["Наименование"];
		
		СтрокаТекущегоЭтапа = ОбъектДок.ТекущиеЭтапы.Добавить();
		СтрокаТекущегоЭтапа.Наименование = НаименованиеЭтапа;
		СтрокаТекущегоЭтапа.ТипТитула    = МенеджерТитулов.ЗначениеПоЭтапу(НаименованиеЭтапа);
		СтрокаТекущегоЭтапа.Доступен     = ДоступныеЭтапы[НаименованиеЭтапа] <> Неопределено;
		
		Если НаименованиеЭтапа = "Выпуск в рейс" Тогда
			СтрокаТекущегоЭтапа.Доступен = СтрокаТекущегоЭтапа.Доступен И ТекущиеЭтапы.Количество() = 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ЗагрузкаИзменений

Функция СписокИзмененийДокументов(СтруктураПараметров)
	
	РезультатФункции = Новый Соответствие;
	
	ПараметрыПолученияИзменений = ПараметрыПолученияИзменений(СтруктураПараметров);
	
	ЕстьИзменения = Истина;
	Пока ЕстьИзменения Цикл
		
		ИзмененияПоДокументам = СледующиеИзмененияДокументов(ПараметрыПолученияИзменений, ЕстьИзменения);
		
		Для Каждого Изменение Из ИзмененияПоДокументам Цикл			
			ДобавитьИзменение(РезультатФункции, Изменение, ПараметрыПолученияИзменений, СтруктураПараметров.ДопПараметры);			
		КонецЦикла;
				
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПараметрыПолученияИзменений(СтруктураПараметров)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ОбъектОбработки", Обработки.SABY.Создать());
	РезультатФункции.Вставить("context_params",  СтруктураПараметров.context_params);
	РезультатФункции.Вставить("Параметры",       Новый Структура);
	
	РазмерСтраницы = 30;
	
	Навигация = Новый Структура;
	Навигация.Вставить("РазмерСтраницы", Формат(РазмерСтраницы, "ЧГ=0"));
	
	РезультатФункции.Параметры.Вставить("Навигация", Навигация);
	
	Если СтруктураПараметров.ДопПараметры.Свойство("Начало")
		И ЗначениеЗаполнено(СтруктураПараметров.ДопПараметры.Начало) Тогда
		
		ДатаС = СтруктураПараметров.ДопПараметры.Начало;
		ПараметрДатаС = Формат(ДатаС, "ДФ='dd.MM.yyyy ЧЧ.мм.сс'");
		РезультатФункции.Параметры.Вставить("ДатаВремяС", ПараметрДатаС);
		
	КонецЕсли;
	
	Если СтруктураПараметров.ДопПараметры.Свойство("Окончание")
		И ЗначениеЗаполнено(СтруктураПараметров.ДопПараметры.Окончание) Тогда
		
		ДатаПо = СтруктураПараметров.ДопПараметры.Окончание;
		ПараметрДатаПо = Формат(ДатаПо, "ДФ='dd.MM.yyyy ЧЧ.мм.сс'");
		РезультатФункции.Параметры.Вставить("ДатаВремяПо", ПараметрДатаПо);
		
	КонецЕсли;
	
	ПараметрыДокументаДляАПИ = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыДокументаДляАПИ(
		СтруктураПараметров.ДопПараметры.ИмяМетаданных);
		
	// по ЭПЛ дополним поля
	ДопПоля = "ДопДействия,ТекущиеЭтапы,Подстановки";
	Если ПараметрыДокументаДляАПИ.Тип = "Waybill" Тогда 	
		ДопПоля = ДопПоля + ",Стороны,ЗаменаВодителя";
	КонецЕсли;	
				
	РезультатФункции.Параметры.Вставить("Тип",                ПараметрыДокументаДляАПИ.Тип);	
	РезультатФункции.Параметры.Вставить("ДопПоля",            ДопПоля);
	РезультатФункции.Параметры.Вставить("ПолныйСертификатЭП", "Нет");
	РезультатФункции.Параметры.Вставить("ИдентификаторСобытия", "");
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СледующиеИзмененияДокументов(ПараметрыПолученияИзменений, ЕстьИзменения)
	
	РезультатФункции = Новый Массив;
	
	Попытка                                                                                      
		
		СоответствиеИзменений = ПараметрыПолученияИзменений.ОбъектОбработки.local_helper_read_changes(
			ПараметрыПолученияИзменений.context_params, ПараметрыПолученияИзменений.Параметры);
		
		РезультатФункции = СоответствиеИзменений["Документ"];
		ЕстьИзменения    = Булево(СоответствиеИзменений["Навигация"]["ЕстьЕще"]);
		
	Исключение
		
		ЕстьИзменения = Ложь;
		
		ИнфОбОшибке = ИнформацияОбОшибке();		
		Описание    = "Ошибка загрузки из Сбис";
			
		Saby_ТНОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации(Неопределено, Описание, ИнфОбОшибке);
		
	КонецПопытки;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДобавитьИзменение(Изменения, ИзменениеСОнлайна, ПараметрыПолученияИзменений, ДопПараметры)
	
	Событие = ИзменениеСОнлайна["Событие"];
	
	ДанныеПодстановок = ИзменениеСОнлайна["Подстановки"];
	Если Не ЗначениеЗаполнено(ДанныеПодстановок) Тогда
		ДобавитьСобытия(Событие, ПараметрыПолученияИзменений);
		Возврат;
	КонецЕсли;
	
	ИдентификаторДокумента = ИзменениеСОнлайна["Идентификатор"];
		
	// Изменения с онлайна приходят не сгруппированные по документу.
	// Поэтому группируем их по идентификатору документа
	ИзмененияПоДокументу = Изменения.Получить(ИдентификаторДокумента);
	Если ИзмененияПоДокументу = Неопределено Тогда
		
		ИзмененияПоДокументу = Новый Соответствие;
		ИзмененияПоДокументу.Вставить("Подстановки",       Новый Соответствие);
		ИзмененияПоДокументу.Вставить("ИдТитулов",         Новый Соответствие);
		ИзмененияПоДокументу.Вставить("ДатаВремяСоздания", ИзменениеСОнлайна["ДатаВремяСоздания"]);
		ИзмененияПоДокументу.Вставить("Номер",             ИзменениеСОнлайна["Номер"]);
		ИзмененияПоДокументу.Вставить("Название",          ИзменениеСОнлайна["Название"]);
		ИзмененияПоДокументу.Вставить("Направление",       ИзменениеСОнлайна["Направление"]);
		ИзмененияПоДокументу.Вставить("Состояние",         ИзменениеСОнлайна["Состояние"]);
		ИзмененияПоДокументу.Вставить("Событие",           Новый Массив);
		ИзмененияПоДокументу.Вставить("ТекущиеЭтапы",      ИзменениеСОнлайна["ТекущиеЭтапы"]);
		ИзмененияПоДокументу.Вставить("ДопДействия",       ИзменениеСОнлайна["ДопДействия"]);
		ИзмененияПоДокументу.Вставить("Контрагент",        ИзменениеСОнлайна["Контрагент"]);
		ИзмененияПоДокументу.Вставить("НашаОрганизация",   ИзменениеСОнлайна["НашаОрганизация"]);
		ИзмененияПоДокументу.Вставить("СсылкаНаPDF",       ИзменениеСОнлайна["СсылкаНаPDF"]);
		ИзмененияПоДокументу.Вставить("Стороны",           ИзменениеСОнлайна["Стороны"]);
		ИзмененияПоДокументу.Вставить("ЗаменаВодителя",    ИзменениеСОнлайна["ЗаменаВодителя"]);
		
		Изменения.Вставить(ИдентификаторДокумента, ИзмененияПоДокументу);
		
	КонецЕсли;
	
	ДобавитьВложенияИзСобытий(ИзмененияПоДокументу, Событие, ДопПараметры.ИмяМетаданных);
	ДобавитьСобытия(Событие, ПараметрыПолученияИзменений, ИзмененияПоДокументу);
	
	Для Каждого Подстановки Из ДанныеПодстановок Цикл
		ДобавитьПодстановкуТитула(
			ИзмененияПоДокументу,
			Подстановки.Ключ,
			Подстановки.Значение,
			ДопПараметры.ИмяМетаданных);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПодстановкуТитула(ИзмененияПоДокументу, КодТитулаОнлайна, ЗначенияПодстановок, ИмяМетаданных)
	
	МенеджерТитулов = Документы[ИмяМетаданных].МенеджерТитулов();
	
	Титул = МенеджерТитулов.ЗначениеПоИмениПодстановки(КодТитулаОнлайна);
	Если Не ЗначениеЗаполнено(Титул) Тогда
		Возврат;
	КонецЕсли;
		
	ПредставленияТитула = МенеджерТитулов.ПредставленияТитула(Титул);
	
	МассивПодстановок = Saby_ТНОбщегоНазначенияКлиентСервер.ЗначениеВМассив(ЗначенияПодстановок);
	
	Для Каждого ДанныеТитула Из МассивПодстановок Цикл
		
		КлючСоответствияВложения = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеТитула, "Файл.ИмяФайлаБезРасширения");
		Если КлючСоответствияВложения = Неопределено Тогда
			КлючСоответствияВложения = ПредставленияТитула.КодТитула;
		КонецЕсли;
		
		СтруктураВложения = ИзмененияПоДокументу["Вложения"][КлючСоответствияВложения];
		
		ДобавитьИнформациюВПодстановки(ДанныеТитула, Титул, СтруктураВложения, ИмяМетаданных);
		УдалитьНеиспользуемуюИнформациюВПодстановках(ДанныеТитула, ПредставленияТитула);
		
		МассивТитулов = ИзмененияПоДокументу["Подстановки"][КодТитулаОнлайна];
		Если МассивТитулов = Неопределено Тогда
			МассивТитулов = Новый Массив;
			ИзмененияПоДокументу["Подстановки"].Вставить(КодТитулаОнлайна, МассивТитулов);
		КонецЕсли;
		
		ИдентификаторВложения = ДанныеТитула["ИдентификаторВложенияТитула"];
		Если ИдентификаторВложения = "" Тогда
			ИдентификаторВложения = ПредставленияТитула.ИмяПодстановки;
		КонецЕсли;
		
		ИндексТитула = ИзмененияПоДокументу["ИдТитулов"][ИдентификаторВложения];
		Если ИндексТитула = Неопределено Тогда
			МассивТитулов.Добавить(ДанныеТитула);
			ИзмененияПоДокументу["ИдТитулов"].Вставить(ИдентификаторВложения, МассивТитулов.ВГраница());
		Иначе
			Если МассивТитулов.Количество() Тогда 
				МассивТитулов[ИндексТитула] = ДанныеТитула;
			КонецЕсли;		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИнформациюВПодстановки(ДанныеТитула, Титул, СтруктураВложения, ИмяМетаданных)
	
	ДанныеТитула.Вставить("ДатаВложенияТитула", ДатаВложения(ДанныеТитула, Титул, СтруктураВложения));
		
	ДанныеТитула.Вставить("ИдентификаторВложенияТитула", ИдентификаторВложения(ДанныеТитула, Титул, СтруктураВложения));
	
КонецПроцедуры

Процедура УдалитьНеиспользуемуюИнформациюВПодстановках(ДанныеТитула, ПредставленияТитула)
	
	Если ДанныеТитула[ПредставленияТитула.КодТитула] <> Неопределено Тогда
		ДанныеТитула.Вставить(ПредставленияТитула.КодТитула, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСобытия(СобытияОнлайна, ПараметрыИзменений, ИзмененияПоДокументу = Неопределено)
	
	Если СобытияОнлайна = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Событие Из СобытияОнлайна Цикл
		
		ПоследнийИдентификатор = Событие["Идентификатор"];
		ДатаПоследнегоСобытия  = Событие["ДатаВремя"];
		
		ПараметрыИзменений.Параметры.ИдентификаторСобытия = ПоследнийИдентификатор;
		ПараметрыИзменений.Параметры.ДатаВремяС           = ДатаПоследнегоСобытия;
		
		Если ИзмененияПоДокументу = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СобытиеСоответствие = Новый Соответствие;
		СобытиеСоответствие.Вставить("ДатаВремя",     ДатаПоследнегоСобытия);
		СобытиеСоответствие.Вставить("Идентификатор", ПоследнийИдентификатор);
		СобытиеСоответствие.Вставить("Название",      Событие["Название"]);
		СобытиеСоответствие.Вставить("Комментарий",   Событие["Комментарий"]);
		
		ИзмененияПоДокументу["Событие"].Добавить(СобытиеСоответствие);
						
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВложенияИзСобытий(ИзмененияПоДокументу, СобытияСОнлайна, ИмяМетаданных)
	
	Вложения = ИзмененияПоДокументу["Вложения"];
	Если Вложения = Неопределено Тогда
		Вложения = Новый Соответствие;
		ИзмененияПоДокументу.Вставить("Вложения", Вложения);
	КонецЕсли;
	
	Если СобытияСОнлайна = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Событие Из СобытияСОнлайна Цикл
		
		Если Событие["Вложение"] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьВложения(Вложения, Событие, ИмяМетаданных);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВложения(Вложения, Событие, ИмяМетаданных)
	
	ВложенияСОнлайна = Событие["Вложение"];
	
	Если ВложенияСОнлайна = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКлючаДатаВремя     = "ДатаВремя";
	ИмяКлючаИдентификатор = "Идентификатор";
	
	Для Каждого Вложение Из ВложенияСОнлайна Цикл
		
		Если ИмяМетаданных = "Saby_ТранспортнаяНакладная" Тогда
			ИмяФайлаСРасширением     = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Событие, "Файл.Имя", "");
			КлючСоответствияВложения = СтрРазделить(ИмяФайлаСРасширением, ".")[0];
		Иначе
			КлючСоответствияВложения = Вложение["Подтип"];
		КонецЕсли;
		
		СтруктураВложения = Вложения[КлючСоответствияВложения];
		Если СтруктураВложения = Неопределено Тогда
			
			СтруктураВложения = Новый Соответствие;
			СтруктураВложения.Вставить(ИмяКлючаДатаВремя,     Дата(1, 1, 1));
			СтруктураВложения.Вставить(ИмяКлючаИдентификатор, "");
			Вложения.Вставить(КлючСоответствияВложения, СтруктураВложения);
			
		КонецЕсли;
		
		ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Событие, "ДатаВремя");
		ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаВремя);
		
		Если СтруктураВложения[ИмяКлючаДатаВремя] < ДатаВремя Тогда
			СтруктураВложения[ИмяКлючаДатаВремя]     = ДатаВремя;
			СтруктураВложения[ИмяКлючаИдентификатор] = Вложение[ИмяКлючаИдентификатор];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьИзмененияДокументов(СписокИзменений, Результат, СтруктураПараметров)
	
	ОбщиеПараметрыЗагрузки = Saby_ТНОбщегоНазначенияСервер.ОбщиеПараметрыВыгрузкиЗагрузки(
		СтруктураПараметров.context_params);
	
	Для Каждого Изменение Из СписокИзменений Цикл 
				
		ПараметрыЗагрузки = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыЗагрузки();
		ПараметрыЗагрузки.ИДСбис          = Изменение.Ключ;
		ПараметрыЗагрузки.ДанныеДокумента = Изменение.Значение;
		ПараметрыЗагрузки.ИмяМетаданных   = СтруктураПараметров.ДопПараметры.ИмяМетаданных;
		
		ЗагрузитьДокумент(ПараметрыЗагрузки, ОбщиеПараметрыЗагрузки, Результат);
		
	КонецЦикла;
	
	Справочники.Saby_ОпасныеГрузы.ДозаполнитьНовыеЭлементыДаннымиСОнлайна();
	Справочники.Saby_ВидыУпаковки.ДозаполнитьНовыеЭлементыДаннымиСОнлайна();
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаИзменений

#Область ПечатнаяФормаИзСБИС

// Загружает печатную форму из СБИС.
//
// Параметры:
//  ПараметрыЗагрузки - Структура - параметры загрузки
//  URLФайлаВСбис - Строка - адрес печатной формы pdf
//  ВзятьИзБазыЕслиЕсть - Булево - признак получения печатной формы из базы.
//
// Возвращаемое значение:
//   СправочникСсылка.Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы - присоединенный файл печатной формы.
//
Функция ЗагрузитьПечатнуюФормуДокументаИзСбис(ПараметрыЗагрузки, URLФайлаВСбис = Неопределено,
		ВзятьИзБазыЕслиЕсть = Ложь) Экспорт
	
	СтруктураПрисоединенногоФайла = СтруктураПрисоединенногоФайла(ПараметрыЗагрузки);
	
	Если ВзятьИзБазыЕслиЕсть И ЗначениеЗаполнено(СтруктураПрисоединенногоФайла.СсылкаНаПрисоединенныйФайл) Тогда
		Возврат СтруктураПрисоединенногоФайла.СсылкаНаПрисоединенныйФайл;
	КонецЕсли;
	
	ВременноеХранилище = АдресДвоичныхДанныхФайла(ПараметрыЗагрузки, URLФайлаВСбис);
	
	Если Не ЗначениеЗаполнено(ВременноеХранилище) Тогда
		Возврат Справочники.Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы.ПустаяСсылка();
	КонецЕсли;
	
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	ПараметрыФайла.Автор              = Пользователи.АвторизованныйПользователь();
	ПараметрыФайла.ВладелецФайлов     = ПараметрыЗагрузки.СсылкаНаДокумент;
	ПараметрыФайла.ИмяБезРасширения   = СтруктураПрисоединенногоФайла.ИмяБезРасширения;
	ПараметрыФайла.РасширениеБезТочки = СтруктураПрисоединенногоФайла.РасширениеБезТочки;
	
	Возврат РаботаСФайлами.ДобавитьФайл(
		ПараметрыФайла,
		ВременноеХранилище, , ,
		СтруктураПрисоединенногоФайла.СсылкаНаПрисоединенныйФайл);
	
КонецФункции

// Возвращает параметры для загрузки печатной формы из СБИС.
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на документ
//  context_params - Структура - параметры для отправки запросов на онлайн.
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор формы,
//    в хранилище которой сохраняется печатная форма.
//
// Возвращаемое значение:
//   Структура - структура параметров.
//
Функция ПараметрыЗагрузкиПечатнойФормыИзСбис(Знач СсылкаНаДокумент = Неопределено,
		context_params = Неопределено, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("СсылкаНаДокумент",             СсылкаНаДокумент);
	РезультатФункции.Вставить("УИДСбис",                      "");
	РезультатФункции.Вставить("Номер",                        "");
	РезультатФункции.Вставить("Дата",                         Дата(1, 1, 1, 0, 0, 0));
	РезультатФункции.Вставить("ОбъектОбработки",              Обработки.SABY.Создать());
	РезультатФункции.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	РезультатФункции.Вставить("СписокДокументов",             Неопределено);
	РезультатФункции.Вставить("ЭтоЧерновик",                  Истина);
	
	Если context_params = Неопределено Тогда
		РезультатФункции.Вставить("context_params", Saby_Core.ПроверитьНаличиеПараметровПодключения());
	Иначе
		РезультатФункции.Вставить("context_params", context_params);
	КонецЕсли;
	
	Если СсылкаНаДокумент <> Неопределено Тогда
		ЗаполнитьПараметрыЗагрузкиПечатнойФормыПоСсылке(РезультатФункции, Ложь);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьПараметрыЗагрузкиПечатнойФормыПоСсылке(Параметры, ПовторноеПолучение)
	
	ДанныеСостояния = Saby_ТНОбщегоНазначенияСервер.ДанныеСостоянияОбъекта(Параметры.СсылкаНаДокумент);
	
	ИмяМетаданных = Saby_ТНОбщегоНазначенияСервер.ИмяМетаданныхДокумента(Параметры.СсылкаНаДокумент);
	ТипДокумента  = "Документ." + ИмяМетаданных;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент", Параметры.СсылкаНаДокумент);
	
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Saby_Документ.Номер КАК Номер,
	|	Saby_Документ.Дата КАК Дата
	|ИЗ
	|	ТипДокументаSaby КАК Saby_Документ
	|ГДЕ
	|	Saby_Документ.Ссылка = &СсылкаНаДокумент";
			
	ЗапросДанных.Текст = СтрЗаменить(ЗапросДанных.Текст, "ТипДокументаSaby", ТипДокумента);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		
		Параметры.Номер       = ВыборкаДанных.Номер;
		Параметры.Дата        = ВыборкаДанных.Дата;
		Если ДанныеСостояния <> Неопределено Тогда
			Параметры.УИДСбис     = ДанныеСостояния.UID;
			Параметры.ЭтоЧерновик = Не ЗначениеЗаполнено(ДанныеСостояния.Состояние);
		КонецЕсли;
		
	КонецЕсли;
	
	НеобходимоОбновитьДанные = Параметры.УИДСбис = "" Или Параметры.ЭтоЧерновик;
	
	Если Не ПовторноеПолучение И НеобходимоОбновитьДанные Тогда
		
		ДанныеДляВыгрузки = Новый Массив;
		ПараметрыВыгрузки = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки(Параметры.СсылкаНаДокумент);
		ДанныеДляВыгрузки.Добавить(ПараметрыВыгрузки);
		
		ДополнительныеПараметры = Новый Структура;
		
		РезультатЗаписи = Saby_ТНВыгрузкаСервер.РезультатВыгрузкиДокументов(
			ДанныеДляВыгрузки, Параметры.context_params, ДополнительныеПараметры);
		
		Если РезультатЗаписи.Итог.Успех Тогда
			ЗаполнитьПараметрыЗагрузкиПечатнойФормыПоСсылке(Параметры, Истина);
		Иначе
			Параметры.СписокДокументов = РезультатЗаписи.Ошибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СсылкаНаПечатнуюФорму(ПараметрыЗагрузки)
	
	РезультатФункции = Неопределено;
	
	Если Не ЗначениеЗаполнено(ПараметрыЗагрузки.УИДСбис) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Идентификатор", ПараметрыЗагрузки.УИДСбис);
	Параметры.Вставить("ДопПоля",       "");
	
	Попытка		
		
		Результат = ПараметрыЗагрузки.ОбъектОбработки.local_helper_read_document(
			ПараметрыЗагрузки.context_params,
			Параметры);

		РезультатФункции = Результат["СсылкаНаPDF"];
		
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		
		Saby_ТНОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации(
			ПараметрыЗагрузки.СсылкаНаДокумент,
			"Не удалось получить печатную форму",
			ИнфоОшибки.Описание);
		
	КонецПопытки;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СтруктураПрисоединенногоФайла(ПараметрыЗагрузки)
	
	ШаблонИмениФайла = "%1 №%2 от №%3 (%4)";
	
	ИмяМетаданных = Saby_ТНОбщегоНазначенияСервер.ИмяМетаданныхДокумента(ПараметрыЗагрузки.СсылкаНаДокумент);
	
	ИмяБезРасширения = СтрШаблон(
		ШаблонИмениФайла,
		ИмяМетаданных,
		ПараметрыЗагрузки.Номер,
		Формат(ПараметрыЗагрузки.Дата, "ДФ=dd.MM.yyyy"),
		ПараметрыЗагрузки.УИДСбис);
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ИмяБезРасширения",           ИмяБезРасширения);
	РезультатФункции.Вставить("РасширениеБезТочки",         "pdf");
	РезультатФункции.Вставить("СсылкаНаПрисоединенныйФайл", Неопределено);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Saby_ПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник_Имя_ПрисоединенныеФайлы КАК Saby_ПрисоединенныеФайлы
	|ГДЕ
	|	НЕ Saby_ПрисоединенныеФайлы.ПометкаУдаления
	|	И Saby_ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И Saby_ПрисоединенныеФайлы.Наименование ПОДОБНО ""%&Наименование%""";
	
	ЗапросДанных.Текст = СтрЗаменить(ЗапросДанных.Текст, "&Наименование", ПараметрыЗагрузки.УИДСбис);
	ЗапросДанных.УстановитьПараметр("ВладелецФайла", ПараметрыЗагрузки.СсылкаНаДокумент);
	
	ЗапросДанных.Текст = СтрЗаменить(ЗапросДанных.Текст, "_Имя_", "." + ИмяМетаданных);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		НайденнаяСсылка = ВыборкаДанных.Ссылка;
	Иначе
		ИмяСправочника = ИмяМетаданных + "ПрисоединенныеФайлы";
		НайденнаяСсылка = Справочники[ИмяСправочника].ПустаяСсылка();
	КонецЕсли;
	
	Если Не НайденнаяСсылка.Пустая() Тогда
		РезультатФункции.СсылкаНаПрисоединенныйФайл = НайденнаяСсылка;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ПечатнаяФормаИзСБИС

#Область ЗагрузкаТС

Функция СтруктураТранспортногоСредства(СтруктураТССОнлайна, ЭтоПрицеп = Ложь)
	
	РезультатФункции = Saby_ТНОбщегоНазначенияСервер.СтруктураДанныхТранспортногоСредства();
	
	Если ЭтоПрицеп Тогда
		РезультатФункции.Вид = Перечисления.Saby_ВидыТС.Прицеп;
	Иначе
		РезультатФункции.Вид = Перечисления.Saby_ВидыТС.Автомобиль;
	КонецЕсли;
	
	Грузоподъемность = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(СтруктураТССОнлайна["Грузоподъемность"]);
	Вместимость      = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(СтруктураТССОнлайна["Вместимость"]);
	ТипВладения      = Перечисления.Saby_ТипыВладенияТС.ЗначениеПоКоду(СтруктураТССОнлайна["ТипВладения"]);
	
	РезультатФункции.РегистрационныйНомер = РегНомерБезЛишнихСимволов(СтруктураТССОнлайна["РегНомер"]);
	РезультатФункции.ИнвентарныйНомер     = ЗначениеЕслиЗаполнено(СтруктураТССОнлайна["ИнвентарныйНомер"], "");
	РезультатФункции.Тип                  = СтруктураТССОнлайна["Тип"];
	РезультатФункции.Марка                = СтруктураТССОнлайна["Марка"];
	РезультатФункции.Модель               = ЗначениеЕслиЗаполнено(СтруктураТССОнлайна["Модель"], "");
	РезультатФункции.ВИН                  = СтруктураТССОнлайна["VIN"];
	РезультатФункции.НомерСТС             = СтруктураТССОнлайна["НомерСТС"];
	РезультатФункции.Грузоподъемность     = Грузоподъемность;
	РезультатФункции.Вместимость          = Вместимость;
	РезультатФункции.ТипВладения          = ТипВладения;
	
	МассивОснованийВладения = Новый Массив;
	
	ТЗ = ТаблицаДокументовЭПД();
	НомерСтроки = 0;
	
	ОснованиеВладения = СтруктураТССОнлайна["ОснованиеВладения"];
	Если ЗначениеЗаполнено(ОснованиеВладения) Тогда  
		
		Для Каждого ДокументВладения Из ОснованиеВладения Цикл
			
			НС = ТЗ.Добавить();
			Тип = Перечисления.Saby_ТипыДокумента.ПодтверждениеВладения;
			ЗаполнитьДанныеСтрокиТаблицыДокументовЭПД(НС, ДокументВладения, Тип, НомерСтроки);
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		СоответствиеДокументов = НайтиСоздатьДокументЭПД(ТЗ);
		
		Для Каждого СтрокаДок Из ТЗ Цикл 
			
			МассивОснованийВладения.Добавить(СоответствиеДокументов.Получить(СтрокаДок.НомерСтроки));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивОснованийВладения.Количество() > 0 Тогда
		РезультатФункции.ОснованияВладения = ЗначениеВСтрокуВнутр(МассивОснованийВладения);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ЗначениеЕслиЗаполнено(Значение, ЗначениеПоУмолчанию)
	
	Если Значение = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ДанныеСпецРазрешений(СпецУсловияСОнлайна)
	
	РезультатФункции = Новый Массив;
	
	Если Не ЗначениеЗаполнено(СпецУсловияСОнлайна) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Для Каждого Условие Из СпецУсловияСОнлайна Цикл   
	
		СпецРазрешение = Условие["СпецРазрешение"];	
		Если ЗначениеЗаполнено(СпецРазрешение) Тогда
			
			СтруктураСпецРазрешения = Новый Структура;
			СтруктураСпецРазрешения.Вставить("Номер", СпецРазрешение["Номер"]);
			СтруктураСпецРазрешения.Вставить("Вид",   СпецРазрешение["Вид"]);
			СтруктураСпецРазрешения.Вставить("Срок",  СпецРазрешение["Срок"]);
			СтруктураСпецРазрешения.Вставить("ИД",    СпецРазрешение["Идентификатор"]);
			СтруктураСпецРазрешения.Вставить(
				"Дата",
				Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(СпецРазрешение["Дата"]));
							
			НаименованиеОрганаВласти = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Условие, "ОИВ.Наименование");
			Если ЗначениеЗаполнено(НаименованиеОрганаВласти) Тогда 
				СтруктураСпецРазрешения.Вставить("НаименованиеОрганаВласти", НаименованиеОрганаВласти); 
			КонецЕсли;
			
			РезультатФункции.Добавить(СтруктураСпецРазрешения);
			
		КонецЕсли;
		
		// - Маршрут не обрабатывается
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ОчиститьТранспортныеСредства(ОбъектДок, Вид, ОчищенныеВидыТС)
	
	Если ОчищенныеВидыТС.Получить(Вид) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбъектДок.ТранспортныеСредства.Количество() = 0 Тогда
		ОчищенныеВидыТС.Вставить(Вид, Истина);
		Возврат;
	КонецЕсли;
	
	ИндексСтрокиТС = 0;
	Пока ИндексСтрокиТС < ОбъектДок.ТранспортныеСредства.Количество() Цикл
		
		СтрокаТС = ОбъектДок.ТранспортныеСредства[ИндексСтрокиТС];
		
		Если СтрокаТС.Вид = Вид Тогда
			ОчищенныеВидыТС.Вставить(СтрокаТС.Вид, Истина);
			ОбъектДок.ТранспортныеСредства.Удалить(ИндексСтрокиТС);
		Иначе
			ИндексСтрокиТС = ИндексСтрокиТС + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РегНомерБезЛишнихСимволов(РегНомер)
	
	РегНомер = СтрЗаменить(РегНомер, " ", "");
	РегНомер = СокрЛП(РегНомер);
	РегНомер = ВРег(РегНомер);
	
	Возврат РегНомер;
	
КонецФункции

#КонецОбласти // ЗагрузкаТС

#Область ЗагрузкаВодителей

Функция ДанныеВодителяДляЗагрузки(Водитель)
	
	ДанныеВодителя = Новый Структура;
	ДанныеВодителя.Вставить("Фамилия",    "");
	ДанныеВодителя.Вставить("Имя",        "");
	ДанныеВодителя.Вставить("Отчество",   "");
	ДанныеВодителя.Вставить("ИНН",        "");
	ДанныеВодителя.Вставить("Серия",      "");
	ДанныеВодителя.Вставить("Номер",      "");
	ДанныеВодителя.Вставить("ДатаВыдачи", "");
	ДанныеВодителя.Вставить("Телефон",    Новый Массив);	
	ДанныеВодителя.Вставить("Телефоны",   "");
	ДанныеВодителя.Вставить("КлючСтроки", 0);
	
	Параметры = Saby_ТНОбщегоНазначенияСервер.ПараметрыСвойстваСКонтролем(ДанныеВодителя, Водитель);	
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Фамилия");
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Имя");
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Отчество");
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "ИНН");
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Телефон");
	
	ВУ = Водитель["ВУ"];
	Если ЗначениеЗаполнено(ВУ) Тогда 
		Параметры.Источник = ВУ;
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Серия");
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Номер");
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "ДатаВыдачи");
		Если ЗначениеЗаполнено(ДанныеВодителя.ДатаВыдачи) Тогда 
			ДанныеВодителя.ДатаВыдачи = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДанныеВодителя.ДатаВыдачи);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Водитель["ФИО"]) Тогда
		
		Наименование = Водитель["ФИО"]; 
		ЗаполнитьФИО = ЗначениеЗаполнено(Наименование) 
			И Не ЗначениеЗаполнено(ДанныеВодителя.Фамилия);
		
		Если ЗаполнитьФИО Тогда
			ФИО = Saby_ТНОбщегоНазначенияСервер.ФИОИзСтроки(Наименование);
			ЗаполнитьЗначенияСвойств(ДанныеВодителя, ФИО);
		КонецЕсли;
				
	Иначе
		
		Массив = Новый Массив;
		Массив.Добавить(ДанныеВодителя.Фамилия);
		Массив.Добавить(ДанныеВодителя.Имя);
		Массив.Добавить(ДанныеВодителя.Отчество);
		
		Наименование = СокрЛП(СтрСоединить(Массив, " "));
		
	КонецЕсли;
	
	ДанныеВодителя.Вставить("Наименование", Наименование);
	Если ЗначениеЗаполнено(ДанныеВодителя.Телефон) Тогда
		
		МассивТелефонов = Новый Массив;
		Для Каждого Телефон Из ДанныеВодителя.Телефон Цикл  
			МассивТелефонов.Добавить(Телефон["Значение"]);
		КонецЦикла;
		
		ДанныеВодителя.Телефоны = ЗначениеВСтрокуВнутр(МассивТелефонов);
		
	КонецЕсли;
		
	Возврат ДанныеВодителя;
	
КонецФункции

Процедура УбратьПустыеСтрокиВодителей(Водители, ДопПараметры)
	
	// Только для заполнения на основании другого документа
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		Возврат;
	КонецЕсли;
	
	МассивВодители = Водители["Водитель"];
	
	Индекс = 0;
	Пока Индекс <= МассивВодители.ВГраница() Цикл
		Водитель = МассивВодители[Индекс];
		Если Водитель["Фамилия"] = "" И Водитель["Имя"] = "" И Водитель["Отчество"] = "" Тогда
			МассивВодители.Удалить(Индекс);
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаВодителей

#Область ДокументыЭПД

Функция ОписаниеТипаСтрока(Длина, ДопустимаяДлинаСтроки = Неопределено)
	
	Если ДопустимаяДлинаСтроки = Неопределено Тогда
		ДопустимаяДлинаСтроки = ДопустимаяДлина.Переменная;
	КонецЕсли;
	
	КвалификаторСтроки = Новый КвалификаторыСтроки(Длина, ДопустимаяДлинаСтроки);
	
	Возврат Новый ОписаниеТипов("Строка", , КвалификаторСтроки);
	
КонецФункции

Функция НайтиДокументыЭПД(ТЗ)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ", ТЗ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.Номер КАК Номер,
	|	ТЗ.Дата КАК Дата,
	|	ТЗ.ТипДок КАК ТипДок,
	|	ТЗ.НомерСтроки КАК НомерСтроки,
	|	ТЗ.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номер,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Номер КАК Номер,
	|	ВТ.Дата КАК Дата,
	|	ВТ.ТипДок КАК Тип,
	|	ВТ.Наименование КАК Наименование,
	|	ВТ.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(ЕСТЬNULL(Saby_ДокументыЭПД.Ссылка, НЕОПРЕДЕЛЕНО)) КАК Ссылка
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Saby_ДокументыЭПД КАК Saby_ДокументыЭПД
	|		ПО ВТ.Номер = Saby_ДокументыЭПД.Номер
	|			И ВТ.Дата = Saby_ДокументыЭПД.Дата
	|			И ВТ.ТипДок = Saby_ДокументыЭПД.Тип
	|			И ВТ.Наименование = Saby_ДокументыЭПД.Наименование
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Номер,
	|	ВТ.Дата,
	|	ВТ.ТипДок,
	|	ВТ.Наименование,
	|	ВТ.НомерСтроки";	

	Выборка = Запрос.Выполнить().Выбрать();
	
	Соответствие = Новый Соответствие;
	Пока Выборка.Следующий() Цикл 				
		Соответствие.Вставить(Выборка.НомерСтроки, Выборка.Ссылка);		
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

Функция НовыйДокументТрН(Данные)
	
	УстановитьПривилегированныйРежим(Истина);
		
	ОбъектДокТрН = Справочники.Saby_ДокументыЭПД.СоздатьЭлемент();	
	ЗаполнитьЗначенияСвойств(ОбъектДокТрН, Данные);
	
	Если ЗначениеЗаполнено(Данные.Стороны) Тогда		
		Стороны = ЗначениеИзСтрокиВнутр(Данные.Стороны);
	Иначе
		Стороны = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Стороны) Тогда 
		РольСторонаДокумента = Перечисления.Saby_РолиКонтрагентов.СторонаДокумента;
		Для Каждого Сторона Из Стороны Цикл
			НС = ОбъектДокТрН.ДанныеЮрЛиц.Добавить();
			СтруктураДанныхЮрЛица = СтруктураДанныхЮрЛица(РольСторонаДокумента, Сторона);
			Если Не ЗначениеЗаполнено(СтруктураДанныхЮрЛица.НаименованиеОрганизации) Тогда
				СтруктураДанныхЮрЛица.НаименованиеОрганизации = Строка(СтруктураДанныхЮрЛица.ЮрФизЛицо) + " " + СтруктураДанныхЮрЛица.ИНН;
				СтруктураДанныхЮрЛица.НаименованиеОрганизации = СокрЛП(СтруктураДанныхЮрЛица.НаименованиеОрганизации);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НС, СтруктураДанныхЮрЛица);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокТрН.Наименование) Тогда 
		ОбъектДокТрН.Наименование = "№" + Данные.Номер + " от " + Данные.Дата;
	КонецЕсли;	
			
	ОбъектДокТрН.Тип = Данные.ТипДок;
	
	ОбъектДокТрН.Записать();
	
	Возврат ОбъектДокТрН.Ссылка;
	
КонецФункции

#КонецОбласти // ДокументыЭПД

#Область ЗагрузкаДанныхЮрЛиц

Функция МассивПодстановокЮрЛиц(ПодстановкиЮрЛиц)
	
	РезультатФункции = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ПодстановкиЮрЛиц) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Если ТипЗнч(ПодстановкиЮрЛиц) = Тип("Массив") Тогда
		РезультатФункции = ПодстановкиЮрЛиц;
	Иначе
		РезультатФункции.Добавить(ПодстановкиЮрЛиц);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СтруктураДанныхЮрЛица(Роль, ДанныеЮрЛицаОнлайн, СтруктураДанныхЮрЛица = Неопределено)
	
	Если СтруктураДанныхЮрЛица = Неопределено Тогда
		РезультатФункции = Saby_ТНОбщегоНазначенияКлиентСервер.СтруктураДанныхЮрЛица();
	Иначе
		РезультатФункции = СтруктураДанныхЮрЛица;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЮрЛицаОнлайн) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	ЗаполнитьРеквизитыЮрЛица(Роль, РезультатФункции, ДанныеЮрЛицаОнлайн);
	
	ЗаполнитьКонтактныеДанныеЮрЛица(РезультатФункции, ДанныеЮрЛицаОнлайн["Контакты"]);
	
	ЗаполнитьОснованиеУполномоченногоЛица(РезультатФункции, ДанныеЮрЛицаОнлайн);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьРеквизитыЮрЛица(Роль, СтруктураДанныхЮрЛица, ДанныеЮрЛицаОнлайн)
	
	Реквизиты = ДанныеЮрЛицаОнлайн["Реквизиты"];
	Если Реквизиты = Неопределено Тогда
		Реквизиты = ДанныеЮрЛицаОнлайн;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Реквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если Реквизиты["ЮЛ"] <> Неопределено Тогда
		ЗаполнитьРеквизитыЮЛ(СтруктураДанныхЮрЛица, Реквизиты);
	ИначеЕсли Реквизиты["ИП"] <> Неопределено Тогда
		ЗаполнитьРеквизитыИП(СтруктураДанныхЮрЛица, Реквизиты);
	ИначеЕсли Реквизиты["ФЛ"] <> Неопределено Тогда
		ЗаполнитьРеквизитыФЛ(СтруктураДанныхЮрЛица, Реквизиты);
	ИначеЕсли Реквизиты["ИностранноеЛицо"] <> Неопределено Тогда
		ЗаполнитьРеквизитыИностранногоЛица(СтруктураДанныхЮрЛица, Реквизиты);
		СтруктураДанныхЮрЛица.Заполнена = ЗначениеЗаполнено(СтруктураДанныхЮрЛица.НаименованиеОрганизации);
	ИначеЕсли ЗначениеЗаполнено(Реквизиты["ИНН"]) Тогда
		СтруктураДанныхЮрЛица.ИНН        = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ИНН", "");
		СтруктураДанныхЮрЛица.КодФилиала = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "КодФилиала", "");
	Иначе
		// Неизвестный узел данных, ничего не заполняем.
		СтруктураДанныхЮрЛица.ИНН = "";
	КонецЕсли;
	
	СтруктураДанныхЮрЛица.Заполнена = СтруктураДанныхЮрЛица.Заполнена Или ЗначениеЗаполнено(СтруктураДанныхЮрЛица.ИНН);
	Если СтруктураДанныхЮрЛица.Заполнена Тогда
		СтруктураДанныхЮрЛица.Роль = Роль;
	КонецЕсли;
	
	ЗаполнитьРеквизитыАдресаЮрЛица(СтруктураДанныхЮрЛица, ДанныеЮрЛицаОнлайн);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыЮЛ(СтруктураДанныхЮрЛица, Реквизиты)
	
	СтруктураДанныхЮрЛица.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ЮрЛицо;
	
	СтруктураДанныхЮрЛица.ИНН = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ЮЛ.ИНН", "");
	СтруктураДанныхЮрЛица.КПП = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ЮЛ.КПП", "");
	
	СтруктураДанныхЮрЛица.КодФилиала   = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ЮЛ.КодФилиала", "");
	
	НаименованиеОрганизации = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ЮЛ.Название");
	Если Не ЗначениеЗаполнено(НаименованиеОрганизации) Тогда
		НаименованиеОрганизации = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ЮЛ.Наименование");
	КонецЕсли;
	
	Если ТипЗнч(НаименованиеОрганизации) = Тип("Соответствие") Тогда
		НаименованиеОрганизации = НаименованиеОрганизации["Полное"];
	КонецЕсли;
	
	СтруктураДанныхЮрЛица.НаименованиеОрганизации = НаименованиеОрганизации;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыФЛ(СтруктураДанныхЮрЛица, Реквизиты)
	
	СтруктураДанныхЮрЛица.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ФизЛицо;
	
	СтруктураДанныхЮрЛица.ИНН        = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ФЛ.ИНН", "");
	СтруктураДанныхЮрЛица.КодФилиала = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ФЛ.КодФилиала", "");
	
	СтруктураФИО = СтруктураФИО(Реквизиты["ФЛ"]);
	ФИОСтрокой = ЗначениеВСтрокуВнутр(СтруктураФИО);
	
	СтруктураДанныхЮрЛица.НаименованиеОрганизации = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеФИО(СтруктураФИО);
	
	СтруктураДанныхЮрЛица.СтруктураФИО = ФИОСтрокой;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыИП(СтруктураДанныхЮрЛица, Реквизиты)
	
	СтруктураДанныхЮрЛица.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ИндивидуальныйПредприниматель;
	
	СтруктураДанныхЮрЛица.ИНН        = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ИП.ИНН", "");
	СтруктураДанныхЮрЛица.ОГРН       = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ИП.ОГРН", "");
	СтруктураДанныхЮрЛица.КодФилиала = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ИП.КодФилиала", "");
	
	СтруктураФИО = СтруктураФИО(Реквизиты["ИП"]);
	ФИОСтрокой   = ЗначениеВСтрокуВнутр(СтруктураФИО);
	
	СтруктураДанныхЮрЛица.НаименованиеОрганизации = "ИП " + Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеФИО(
		СтруктураФИО);
	
	СтруктураДанныхЮрЛица.СтруктураФИО = ФИОСтрокой;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыИностранногоЛица(СтруктураДанныхЮрЛица, Реквизиты)
	
	СтруктураДанныхЮрЛица.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ЮрЛицоНеРезидент;
	
	СтруктураДанныхЮрЛица.НаименованиеОрганизации = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
		Реквизиты, "ИностранноеЛицо.Наименование", "");
	
	Страна = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ИностранноеЛицо.Страна");
	Если ЗначениеЗаполнено(Страна) Тогда 
		СтруктураДанныхЮрЛица.СтранаРегистрации = СокрЛП(Страна);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыАдресаЮрЛица(СтруктураДанныхЮрЛица, ДанныеЮрЛицаОнлайн)
	
	ЮрАдрес = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеЮрЛицаОнлайн, "Адрес.Юридический");
	Если Не ЗначениеЗаполнено(ЮрАдрес) Тогда
		ЮрАдрес = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеЮрЛицаОнлайн, "Адрес");
    КонецЕсли;
		
	СтруктураАдрес = ПреобразоватьСтруктуруАдреса(ЮрАдрес);
	Если ЗначениеЗаполнено(СтруктураАдрес) Тогда
		СтруктураДанныхЮрЛица.Адрес          = СтруктураАдрес.АдресСтрокой;
		СтруктураДанныхЮрЛица.АдресСтруктура = СтруктураАдрес.АдресСтруктурой;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОснованиеУполномоченногоЛица(СтруктураДанныхЮрЛица, ДанныеЮрЛицаОнлайн)
	
	ТЗ = Saby_ТНЗагрузкаСервер.ТаблицаДокументовЭПД();
	НомерСтроки = 0;
	
	Основание = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеЮрЛицаОнлайн, "Документ");
	Если ЗначениеЗаполнено(Основание) И ЗначениеЗаполнено(Основание["Дата"]) Тогда
		НС = ТЗ.Добавить();
		Тип = Перечисления.Saby_ТипыДокумента.УполномоченныйНаОсновании;
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеСтрокиТаблицыДокументовЭПД(НС, Основание, Тип, НомерСтроки);
	КонецЕсли;
	
	Если ТЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеОснований = Saby_ТНЗагрузкаСервер.НайтиСоздатьДокументЭПД(ТЗ);
	Для Каждого СтрокаОснования Из ТЗ Цикл
		
		СсылкаОснование = СоответствиеОснований.Получить(СтрокаОснования.НомерСтроки);
		СтруктураДанныхЮрЛица.Основание  = СсылкаОснование;
		СтруктураДанныхЮрЛица.Полномочия = ДанныеЮрЛицаОнлайн["Полномочия"];
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеАдресаИзСоответствия(Соответствие)
	
	Структура = Новый Структура;
	Для Каждого Элемент Из Соответствие Цикл 
		Структура.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
		
	Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(Структура);
	
	Возврат Представление;
	
КонецФункции

Функция СтруктураФИО(Реквизиты)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Фамилия",  Реквизиты["Фамилия"]);
	РезультатФункции.Вставить("Имя",      Реквизиты["Имя"]);
	РезультатФункции.Вставить("Отчество", Реквизиты["Отчество"]);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура УдалитьСвязаннуюСЮрЛицомИнформацию(ДанныеСОнлайна, ДанныеДокумента, Роль)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Роль);
	
	СтрокиДляУдаления = ДанныеДокумента.НайтиСтроки(Отбор);
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		ДанныеДокумента.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаДанныхЮрЛиц

#Область Валюта

Функция ВалютаПоДаннымОнлайна(ДанныеГруз, ЗагрузкаСОнлайна, Знач ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	КодВалютыРубль = "643";
	
	Если ЗначениеПоУмолчанию = Неопределено Тогда
		ЗначениеПоУмолчанию = ВалютаПоКоду(КодВалютыРубль);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеГруз["Стоимость"]) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
			
	Валюта = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеГруз, "Стоимость.Валюта");
	Если ЗначениеЗаполнено(Валюта) Тогда
		
		КодВалюты = Валюта["Код"];
		
		Если ЗагрузкаСОнлайна 
			Или Не ЗагрузкаСОнлайна 
			И ЗначениеЗаполнено(КодВалюты) Тогда
			
			Возврат ВалютаПоКоду(КодВалюты);
			
		КонецЕсли;
	КонецЕсли;
	
    Возврат ЗначениеПоУмолчанию;
	
КонецФункции

Функция ВалютаПоКоду(Код)
	
	РезультатФункции = Справочники.Валюты.ПустаяСсылка();
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Валюта.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюта
	|ГДЕ
	|	Валюта.Код = &Код";
	
	ЗапросДанных.УстановитьПараметр("Код", Код);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		РезультатФункции = ВыборкаДанных.Ссылка;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаСправочников

Функция НайтиСоздатьВидУпаковки(Код) Экспорт
	
	Если Код = Неопределено Тогда
		Возврат Справочники.Saby_ВидыУпаковки.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаВидУпаковки = Справочники.Saby_ВидыУпаковки.НайтиПоКоду(Код);
	Если Не ЗначениеЗаполнено(СсылкаВидУпаковки) Тогда 		
		
		ОбъектВидУпаковки = Справочники.Saby_ВидыУпаковки.СоздатьЭлемент();
		ОбъектВидУпаковки.Код          = Код;
		ОбъектВидУпаковки.Наименование = Код;
		
		ОбъектВидУпаковки.Записать();
		
		СсылкаВидУпаковки  = ОбъектВидУпаковки.Ссылка;
		
	КонецЕсли;
	
	Возврат СсылкаВидУпаковки;
	
КонецФункции
	
Функция НайтиСоздатьОпасныйГруз(СтрокаОпасн) Экспорт
	
	СсылкаОГ = Справочники.Saby_ОпасныеГрузы.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(СтрокаОпасн) 
		Или Не ЗначениеЗаполнено(СтрокаОпасн["Наименование"]) Тогда 
		Возврат СсылкаОГ;
	КонецЕсли;	
			
	Наименование = СтрокаОпасн["Наименование"];
	ОтгрузочноеНаименование = Наименование["Отгрузочное"];	
		
	// поиск существующей записи 	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Наименование",            ОтгрузочноеНаименование);
	ПараметрыПоиска.Вставить("НомерООН",                СтрокаОпасн["НомерООН"]);
	ПараметрыПоиска.Вставить("ТехническоеНаименование", Наименование["Техническое"]);
	
	СсылкаОГ = СуществующаяЗаписьОпасногоГруза(ПараметрыПоиска);	
	
	Если Не ЗначениеЗаполнено(СсылкаОГ) Тогда 
		
		ОбъектОГ = Справочники.Saby_ОпасныеГрузы.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ОбъектОГ, СтрокаОпасн); 
		
		ОбъектОГ.УстановитьНовыйКод();
		ОбъектОГ.Наименование            = ОтгрузочноеНаименование;
		ОбъектОГ.ПолноеНаименование      = ОтгрузочноеНаименование;
		ОбъектОГ.ТехническоеНаименование = Наименование["Техническое"];
		
		Если ЗначениеЗаполнено(СтрокаОпасн["Класс"]) Тогда
			ОбъектОГ.Класс = Перечисления.Saby_КлассыОпасностиГрузов.ЗначениеПоКоду(СтрокаОпасн["Класс"]);
		КонецЕсли;
		
		Упаковка = СтрокаОпасн["Упаковка"];
		Если ЗначениеЗаполнено(Упаковка) Тогда
			
			ОбъектОГ.ГруппаУпаковки         = Упаковка["Группа"];
			ОбъектОГ.КатегорияУпаковки      = Упаковка["Категория"];
			ОбъектОГ.ГруппаУпаковкиЗначение = Перечисления.Saby_ГруппыУпаковки.ЗначениеПоКоду(Упаковка["Группа"]);
			
		КонецЕсли;
						
		Температура = СтрокаОпасн["Температура"];
		Если ЗначениеЗаполнено(Температура) Тогда 
			
			ОбъектОГ.КонтрольнаяТемпература = Температура["Контрольная"];
			ОбъектОГ.АварийнаяТемпература   = Температура["Аварийная"];
			
		КонецЕсли;		
		
		Радиоактивный = СтрокаОпасн["Радиоактивный"];
		Если ЗначениеЗаполнено(Радиоактивный) Тогда
			
			ОбъектОГ.НазваниеРадионуклида = Радиоактивный["Радионуклид"];
			ОбъектОГ.ПолнаяАктивность     = Радиоактивный["ПолнаяАктивность"];
			ОбъектОГ.МаксАктивность       = Радиоактивный["МаксАктивность"];
			
		КонецЕсли;		
		
		Взрывчатый = СтрокаОпасн["Взрывчатый"];
		Если ЗначениеЗаполнено(Взрывчатый) Тогда 
			
			ОбъектОГ.МассаНеттоВзрывчатый      = Взрывчатый["МассаНетто"];
			ОбъектОГ.МассаНеттоВзрывчатыйВсего = Взрывчатый["МассаНеттоДляВсех"];
						
		КонецЕсли;		
		
		ЗаполнитьОбщиеПараметрыОпасногоГруза(ОбъектОГ, СтрокаОпасн);
		
		ОбъектОГ.Записать();
		
		СсылкаОГ = ОбъектОГ.Ссылка;
		
	КонецЕсли;
	
	Возврат СсылкаОГ;
	
КонецФункции

Функция НайтиСоздатьОпасныйГруз_ЗаказНаПеревозку(СтрокаОпасн) Экспорт
	
	СсылкаОГ = Справочники.Saby_ОпасныеГрузы.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(СтрокаОпасн) 
		Или Не ЗначениеЗаполнено(СтрокаОпасн["НаименованиеОтгрузочное"]) Тогда 
		Возврат СсылкаОГ;
	КонецЕсли;	
			
	// поиск существующей записи 	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Наименование",            СтрокаОпасн["НаименованиеОтгрузочное"]);
	ПараметрыПоиска.Вставить("НомерООН",                СтрокаОпасн["НомерООН"]);
	ПараметрыПоиска.Вставить("ТехническоеНаименование", СтрокаОпасн["НаименованиеТехническое"]);
	
	СсылкаОГ = СуществующаяЗаписьОпасногоГруза(ПараметрыПоиска);
	
	Если Не ЗначениеЗаполнено(СсылкаОГ) Тогда 
		
		ОбъектОГ = Справочники.Saby_ОпасныеГрузы.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ОбъектОГ, СтрокаОпасн); 
		
		ОтгрузочноеНаименование = СтрокаОпасн["НаименованиеОтгрузочное"];
		
		ОбъектОГ.УстановитьНовыйКод();
		ОбъектОГ.Наименование            = ОтгрузочноеНаименование;
		ОбъектОГ.ПолноеНаименование      = ОтгрузочноеНаименование;
		ОбъектОГ.ТехническоеНаименование = СтрокаОпасн["НаименованиеТехническое"];
		
		Если ЗначениеЗаполнено(СтрокаОпасн["Класс"]) Тогда
			ОбъектОГ.Класс = Перечисления.Saby_КлассыОпасностиГрузов.ЗначениеПоКоду(СтрокаОпасн["Класс"]);
		КонецЕсли;
		
		// Упаковка
		ОбъектОГ.ГруппаУпаковки         = СтрокаОпасн["УпаковкаГруппа"];
		ОбъектОГ.КатегорияУпаковки      = СтрокаОпасн["УпаковкаКатегория"];
		ОбъектОГ.ГруппаУпаковкиЗначение = Перечисления.Saby_ГруппыУпаковки.ЗначениеПоКоду(ОбъектОГ.ГруппаУпаковки);
											
		// Температура
		ОбъектОГ.КонтрольнаяТемпература = СтрокаОпасн["ТемператураКонтрольная"];
		ОбъектОГ.АварийнаяТемпература   = СтрокаОпасн["ТемператураАварийная"];
		
		// Радиоктивный
		ОбъектОГ.НазваниеРадионуклида   = СтрокаОпасн["РадиоактивныйРадионуклид"];
		ОбъектОГ.ПолнаяАктивность       = СтрокаОпасн["РадиоактивныйПолнаяАктивность"];
		ОбъектОГ.МаксАктивность         = СтрокаОпасн["РадиоактивныйМаксАктивность"];
		
		// Взрывчатый
		ОбъектОГ.МассаНеттоВзрывчатый      = СтрокаОпасн["ВзрывчатыйМассаНетто"];
		ОбъектОГ.МассаНеттоВзрывчатыйВсего = СтрокаОпасн["ВзрывчатыйМассаНеттоДляВсех"];
		
		ЗаполнитьОбщиеПараметрыОпасногоГруза(ОбъектОГ, СтрокаОпасн);
			
		ОбъектОГ.Записать();
		
		СсылкаОГ = ОбъектОГ.Ссылка;
		
	КонецЕсли;
	
	Возврат СсылкаОГ;
	
КонецФункции

Процедура ЗаполнитьОбщиеПараметрыОпасногоГруза(ОбъектОГ, СтрокаОпасн)
	
	Параметры = Saby_ТНОбщегоНазначенияСервер.ПараметрыСвойстваСКонтролем(ОбъектОГ, СтрокаОпасн);
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
		Параметры, "НомерООН",             "НомерООН");
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
		Параметры, "ФизИХимФорма",         "ФизХимФорма");
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
		Параметры, "ТранспортныйИндекс",   "ТранспортныйИндекс");
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
		Параметры, "ЗнакОпасности",        "ЗнакОпасности");
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
		Параметры, "ИндексБезопасности",   "ИндексБезопасности");
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
		Параметры, "ОпознавательныйЗнак",  "ОпознавательныйЗнак");
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
		Параметры, "ПроцентСмеси",         "ПроцентныйСоставСмеси");
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
		Параметры, "Комментарий",          "Описание");
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
		Параметры, "КлассификационныйКод", "КлассификационныйКод");
	
КонецПроцедуры

Функция СуществующаяЗаписьОпасногоГруза(ПараметрыПоиска)
	
	Запрос = Новый Запрос;
		
	ШаблонУсловия = "%1 %2.%3 = &%4";
		
	УсловияОтбора = "";
	Для Каждого Параметр Из ПараметрыПоиска Цикл
		
		Если Не ЗначениеЗаполнено(Параметр.Значение) Тогда
			Продолжить;
		КонецЕсли;	
		
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		
		Оператор = ?(ПустаяСтрока(УсловияОтбора), "", Символы.ПС + "ИЛИ ");
				
		НовоеУсловие = СтрШаблон(
			ШаблонУсловия,
			Оператор,
			"Saby_ОпасныеГрузы",
			Параметр.Ключ,
			Параметр.Ключ);
		
		УсловияОтбора = УсловияОтбора + НовоеУсловие; 
				
	КонецЦикла;	
	
	ЗапросТекст = 
		"ВЫБРАТЬ
		|	Saby_ОпасныеГрузы.Ссылка КАК Ссылка,
		|	Saby_ОпасныеГрузы.Наименование КАК Наименование,
		|	Saby_ОпасныеГрузы.ТехническоеНаименование КАК ТехническоеНаименование,
		|	Saby_ОпасныеГрузы.НомерООН КАК НомерООН
		|ИЗ
		|	Справочник.Saby_ОпасныеГрузы КАК Saby_ОпасныеГрузы
		|ГДЕ
		|	1 = 1";
		
	Запрос.Текст = СтрЗаменить(ЗапросТекст, "1 = 1", УсловияОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка[0].Ссылка;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции
	
#КонецОбласти

#Область ЗагрузкаГруза

Процедура ЗагрузитьПараметрыГруза(СтруктураГруза, ПараметрыГруза)
	
	Если Не ЗначениеЗаполнено(ПараметрыГруза) Тогда
		Возврат;
	КонецЕсли;	
	
	КоличествоПаллет = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(ПараметрыГруза["КоличествоПаллет"]);
	КоличествоМест   = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(ПараметрыГруза["КоличествоМест"]);
	
	МассаБрутто = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ПараметрыГруза, "Масса.Брутто");
	МассаБрутто = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(МассаБрутто);
	МассаНетто  = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ПараметрыГруза, "Масса.Нетто");
	МассаНетто  = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(МассаНетто);
	
	СтруктураГруза.Вставить("КоличествоПаллет", КоличествоПаллет);
	СтруктураГруза.Вставить("Количество",       КоличествоМест);
	СтруктураГруза.Вставить("МассаБрутто",      МассаБрутто);
	СтруктураГруза.Вставить("МассаНетто",       МассаНетто);
	СтруктураГруза.Вставить("Длина",            Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(ПараметрыГруза["Длина"]));
	СтруктураГруза.Вставить("Высота",           Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(ПараметрыГруза["Высота"]));
	СтруктураГруза.Вставить("Ширина",           Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(ПараметрыГруза["Ширина"]));
	СтруктураГруза.Вставить("Объем",            Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(ПараметрыГруза["Объем"]));
	СтруктураГруза.Вставить("Плотность",        Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(ПараметрыГруза["Плотность"]));
	
КонецПроцедуры

Процедура ЗагрузитьКонтейнеры(Контейнеры, ДляДокумента, КлючСтроки_Грузы)
	
	Если Не ЗначениеЗаполнено(Контейнеры) Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Контейнер Из Контейнеры Цикл						
		КоличествоКонтейнеров = Контейнер["Количество"];
		Для Каждого СтрокаКонт Из Контейнер["Номер"] Цикл								
			
			СтруктураКонтейнера = Новый Структура;
			СтруктураКонтейнера.Вставить("Номер",            СтрокаКонт["Значение"]);
			СтруктураКонтейнера.Вставить("КлючСтроки_Грузы", КлючСтроки_Грузы);
			СтруктураКонтейнера.Вставить("Количество",       1);
			
			Если ЗначениеЗаполнено(КоличествоКонтейнеров) Тогда 
				СтруктураКонтейнера.Количество = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(КоличествоКонтейнеров);
			КонецЕсли;	
			
			ДляДокумента.Контейнеры.Добавить(СтруктураКонтейнера);
			
		КонецЦикла;						
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьМаркировки(Маркировка, ДляДокумента, КлючСтроки_Грузы)
	
	Если Не ЗначениеЗаполнено(Маркировка) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаМарк Из Маркировка Цикл
		
		СтруктураМаркировка = Новый Структура;
		СтруктураМаркировка.Вставить("Значение",         СтрокаМарк["Значение"]);
		СтруктураМаркировка.Вставить("КлючСтроки_Грузы", КлючСтроки_Грузы);
		ДляДокумента.Маркировки.Добавить(СтруктураМаркировка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьОпасныеГрузы(ОпасныйГруз, ДляДокумента, КлючСтроки_Грузы)
	
	Если Не ЗначениеЗаполнено(ОпасныйГруз) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОпасн Из ОпасныйГруз Цикл
		
		ОпасныйГруз = Saby_ТНЗагрузкаСервер.НайтиСоздатьОпасныйГруз(СтрокаОпасн);
		Если Не ЗначениеЗаполнено(ОпасныйГруз) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОпасногоГруза = Новый Структура;
		СтруктураОпасногоГруза.Вставить("КлючСтроки_Грузы", КлючСтроки_Грузы);
		СтруктураОпасногоГруза.Вставить("ОпасныйГруз",      ОпасныйГруз);
		
		ДляДокумента.ОпасныеГрузы.Добавить(СтруктураОпасногоГруза);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьСведенияГИС(СведенияГИС, ДляДокумента, СтруктураГруза, КлючСтроки_Грузы)
	
	Если Не ЗначениеЗаполнено(СведенияГИС) Тогда  
		Возврат;
	КонецЕсли;
				
	СтруктураГруза.Вставить("НаименованиеГосСистемы",   СведенияГИС["Наименование"]);
	СтруктураГруза.Вставить("УчетнаяЕдиницаГосСистемы", СведенияГИС["УчетнаяЕдиница"]);
	СтруктураГруза.Вставить("ИнаяИнформацияГосСистемы", СведенияГИС["ДругаяИнформация"]);
	
	Для Каждого СтрокаГос Из СведенияГИС["Идентификатор"] Цикл
		
		СтруктураГосСистемы = Новый Структура;
		СтруктураГосСистемы.Вставить("КлючСтроки_Грузы", КлючСтроки_Грузы);
		СтруктураГосСистемы.Вставить("Идентификатор",    СтрокаГос["Значение"]);
		
		ДляДокумента.СведенияГосСистем.Добавить(СтруктураГосСистемы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеГруза_ТранспортнаяНакладная(Груз, СтруктураГруза, ДляДокумента,
		КлючСтроки_Грузы, ЗагрузкаСОнлайна)
	
	Контейнеры = Груз["Контейнер"];
	ТипГруза   = ?(ЗначениеЗаполнено(Контейнеры), Перечисления.Saby_ТипГруза.Контейнер, Перечисления.Saby_ТипГруза.Груз);
	СтруктураГруза.Вставить("Тип", ТипГруза);
	
	ЗагрузитьКонтейнеры(Контейнеры, ДляДокумента, КлючСтроки_Грузы);
	
	ЗагрузитьМаркировки(Груз["Маркировка"], ДляДокумента, КлючСтроки_Грузы);
	
	ЗагрузитьОпасныеГрузы(Груз["ОпасныйГруз"], ДляДокумента, КлючСтроки_Грузы);
	
	ЗагрузитьСведенияГИС(Груз["СведенияГИС"], ДляДокумента, СтруктураГруза, КлючСтроки_Грузы);
	
	Стоимость = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Груз, "Стоимость.ВключаяНДС");
	Стоимость = ?(ЗначениеЗаполнено(Стоимость), Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(Стоимость), 0);
	СтруктураГруза.Вставить("Стоимость", Стоимость);
	
	СтруктураГруза.Вставить("Валюта", Saby_ТНЗагрузкаСервер.ВалютаПоДаннымОнлайна(Груз, ЗагрузкаСОнлайна));
	
КонецПроцедуры

Процедура ЗагрузитьДанныеГруза_ЗаказНаПеревозку(ДляДокумента, Груз, СтруктураГруза)
	
	ЭтоКонтейнер = ?(ЗначениеЗаполнено(Груз["ГруженностьКонтейнера"]), Истина, Ложь);
	ТипГруза     = ?(ЭтоКонтейнер, Перечисления.Saby_ТипГруза.Контейнер, Перечисления.Saby_ТипГруза.Груз);
		
	РаспределениеПоДлине = ?(Груз["РаспределениеПоДлинеПлатформы"] = "0", Истина, Ложь);
	Делимость            = ?(Груз["Делимость"] = "1",                     Истина, Ложь);
	ПогрузкаВодителем    = ?(Груз["ПогрузкаВодителем"] = "0",             Истина, Ложь);
	
	СтруктураГруза.Вставить("Тип",                           ТипГруза);
	СтруктураГруза.Вставить("РаспределениеПоДлинеПлатформы", РаспределениеПоДлине);
	СтруктураГруза.Вставить("Делимость",                     Делимость);
	СтруктураГруза.Вставить("ПогрузкаВодителем",             ПогрузкаВодителем);
	
	СтруктураГруза.Вставить(
		"МетодОпределенияМассы",
		Перечисления.Saby_МетодОпределенияМассы.ЗначениеПоКоду(Груз["МетодОпределенияМассы"]));
	
	ОпасныйГруз = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Груз, "ОпасныйГруз"); 
	
	// пока нет единого формата по ОГ - загружаем отдельным алгоритмом
	ОпасныйГрузСсылка = НайтиСоздатьОпасныйГруз_ЗаказНаПеревозку(ОпасныйГруз);
    СтруктураГруза.Вставить("ОпасныйГруз", ОпасныйГрузСсылка);
	
	// Заказчик и договор
	Заказчик = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Груз, "Заказчик");
	Договор  = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Груз, "Договор");
	
	Если ЗначениеЗаполнено(Заказчик) Тогда
		
		ДанныеЗаказчика = Saby_ТНОбщегоНазначенияКлиентСервер.СтруктураДанныхЮрЛица();
		ЗагрузитьДанныеЮрЛиц(ДляДокумента, Заказчик, "Заказчик", ДанныеЗаказчика);
				
		СтруктураГруза.Вставить("ЗаказчикСтрока",         ДанныеЗаказчика.НаименованиеОрганизации);
		СтруктураГруза.Вставить("КлючСтроки_ДанныеЮрЛиц", ДанныеЗаказчика.КлючСтроки);
		
		Если ЗначениеЗаполнено(Договор) 
			И ЗначениеЗаполнено(Договор["Номер"]) Тогда
			
			СтруктураГруза.Вставить(
				"Договор",
				ЗагрузитьОдиночныйДокументЭПД(Договор, Перечисления.Saby_ТипыДокумента.ДоговорПеревозки));
				
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаГруза

#КонецОбласти // СлужебныеПроцедурыИФункции
