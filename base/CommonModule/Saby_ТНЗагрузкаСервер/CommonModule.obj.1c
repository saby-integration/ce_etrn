
#Область ПрограммныйИнтерфейс

// Загружает документы из СБИС
//
// Параметры:
//  ДанныеДляЗагрузки - Массив - массив структур см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыЗагрузки
//  context_params - Структура - параметры подключения к СБИС
//  ДополнительныеПараметры - Структура - дополнительные параметры для выгрузки
//
// Возвращаемое значение:
//   Структура - см. Saby_ТНОбщегоНазначенияСервер.РезультатВзаимодействияСоСБИС
//
Функция РезультатЗагрузкиДокументов(ДанныеДляЗагрузки, context_params, ДополнительныеПараметры) Экспорт
	
	ОбщиеПараметрыЗагрузки = Saby_ТНОбщегоНазначенияСервер.ОбщиеПараметрыВыгрузкиЗагрузки(context_params);
	
	РезультатФункции = Saby_ТНОбщегоНазначенияСервер.РезультатВзаимодействияСоСБИС(ДанныеДляЗагрузки.Количество());
	
	Для Каждого ПараметрыЗагрузки Из ДанныеДляЗагрузки Цикл
		
		ЗагрузитьДокумент(ПараметрыЗагрузки, ОбщиеПараметрыЗагрузки, РезультатФункции);
		
	КонецЦикла;
	
	Справочники.Saby_ОпасныеГрузы.ДозаполнитьНовыеЭлементыДаннымиСОнлайна();
	Справочники.Saby_ВидыУпаковки.ДозаполнитьНовыеЭлементыДаннымиСОнлайна();
	
	РезультатФункции.Итог.Успех = Не ЗначениеЗаполнено(РезультатФункции.Ошибки);
	
	Saby_ТНОбщегоНазначенияСервер.ЗаписьОшибокВЖурналРегистрации(РезультатФункции.Ошибки);
	
	Возврат РезультатФункции;
	
КонецФункции

// Загружает изменения по документам из списка.
//
// Параметры:
//  СтруктураПараметров - Структура - параметры загрузки
//
// Возвращаемое значение:
//   Структура - с фиксированными ключами см. в конце функции
//
Функция ЗагрузкаДокументовПоИзменениям(СтруктураПараметров) Экспорт
	
	// Изменения для последующей обработки
	СписокИзменений = СписокИзмененийДокументов(СтруктураПараметров);
	
	Результат = Saby_ТНОбщегоНазначенияСервер.РезультатВзаимодействияСоСБИС(СписокИзменений.Количество());
	ОбработатьИзмененияДокументов(СписокИзменений, Результат, СтруктураПараметров);
	
	Результат.Итог.Успех = Результат.Итог.Количество = Результат.Итог.Всего;
	
	Saby_ТНОбщегоНазначенияСервер.ЗаписьОшибокВЖурналРегистрации(Результат.Ошибки);
	
	Возврат Результат;
	
КонецФункции

// Возвращает двоичные данные файла печатной формы из СБИС.
//
// Параметры:
//  ПараметрыЗагрузки - Структура - параметры загрузки
//  АдресФайлаВСбис - Строка - адрес печатной формы pdf
//
// Возвращаемое значение:
//   Строка - адрес двоичных данных файла печатной формы.
//
Функция АдресДвоичныхДанныхФайла(ПараметрыЗагрузки, АдресФайлаВСбис = Неопределено) Экспорт
	
	РезультатФункции = Неопределено;
	
	Если АдресФайлаВСбис = Неопределено Тогда
		АдресФайлаВСбис = СсылкаНаПечатнуюФорму(ПараметрыЗагрузки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресФайлаВСбис) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = ПараметрыЗагрузки.ОбъектОбработки.local_helper_download_from_link(
		ПараметрыЗагрузки.context_params,
		АдресФайлаВСбис);
	
	РезультатФункции = ПоместитьВоВременноеХранилище(
		ДвоичныеДанныеФайла,
		ПараметрыЗагрузки.УникальныйИдентификаторФормы);
	
	Возврат РезультатФункции;
	
КонецФункции

// Загружает данные динамического титула в форму динамического титула по переданному идентификатору.
// Запрос данных с онлайна не происходит, так как берутся ранее загруженные данные из регистра Saby_ДанныеТитулов
//
// Параметры:
//  ОбъектФормы - ФормаКлиентскогоПриложения - форма динамического титула
//  СсылкаНаДокумент - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на документ,
//                   которому принадлежит динамический титул.
//  ИдентификаторТитула - Строка - идентификатор динамического титула из СБИС.
//                      Это не идентификатор документа, а идентификатор именно титула.
//
Процедура ЗагрузитьДанныеДинамическогоТитула(ОбъектФормы, СсылкаНаДокумент, ИдентификаторТитула) Экспорт
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Saby_ДанныеТитулов.Данные КАК Данные,
	|	Saby_ДанныеТитулов.ТипТитула КАК Титул
	|ИЗ
	|	РегистрСведений.Saby_ДанныеТитулов КАК Saby_ДанныеТитулов
	|ГДЕ
	|	Saby_ДанныеТитулов.СсылкаНаДокумент = &СсылкаНаДокумент
	|	И Saby_ДанныеТитулов.ИдентификаторТитула = &ИдентификаторТитула";
	
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент",    СсылкаНаДокумент);
	ЗапросДанных.УстановитьПараметр("ИдентификаторТитула", ИдентификаторТитула);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ДляДокумента", ЗначениеИзСтрокиВнутр(ВыборкаДанных.Данные));
		СтруктураДанных.Вставить("Титул",        ВыборкаДанных.Титул);
		
		ДанныеТитула = Новый Массив;
		ДанныеТитула.Добавить(СтруктураДанных);
		
		ИмяМетаданных = Saby_ТНОбщегоНазначенияСервер.ИмяМетаданныхДокумента(СсылкаНаДокумент);
		
		ДопПараметрыЗагрузкиВложения = ДопПараметрыЗагрузкиВложения();
		ДопПараметрыЗагрузкиВложения.ЗагрузкаСОнлайна = Ложь;
		ДопПараметрыЗагрузкиВложения.ИмяМетаданных    = ИмяМетаданных;
		
		Документы[ИмяМетаданных].ВложенияЗагружены(
			ДанныеТитула,
			ВыборкаДанных.Титул,
			ОбъектФормы,
			ДопПараметрыЗагрузкиВложения);
		
		МассивСсылокНаДокумент = Новый Массив;
		МассивСсылокНаДокумент.Добавить(СсылкаНаДокумент);
		
		МассивТитулов = Новый Массив;
		МассивТитулов.Добавить(ИдентификаторТитула);
		РегистрыСведений.Saby_ДанныеТитулов.Просмотреть(МассивСсылокНаДокумент, МассивТитулов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

// Загружает данные с онлайна в документ
//
// Параметры:
//  ПараметрыЗагрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыЗагрузки()
//
Процедура ЗагрузкаДанныхДокумента(ПараметрыЗагрузки) Экспорт
	
	Подстановки = ПараметрыЗагрузки.ДанныеДокумента["Подстановки"];
	Если Не ЗначениеЗаполнено(Подстановки) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДок = ОбъектЗагружаемогоДокумента(ПараметрыЗагрузки);
	
	УстановитьДокументОснование(ОбъектДок, ПараметрыЗагрузки);
	
	ОбъектДок.Направление = НаправлениеДокумента(ПараметрыЗагрузки.ДанныеДокумента["Направление"], ОбъектДок.Направление);
	
	КодСостояния = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ПараметрыЗагрузки.ДанныеДокумента, "Состояние.Код");
	КодСостояния = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(КодСостояния);
	Состояние    = Справочники.Saby_СостоянияОбъектов.ПолучитьСтатусДокументаСБИС(КодСостояния);
	
	МассивТитулов = Документы[ПараметрыЗагрузки.ИмяМетаданных].ТитулыДляЗагрузки(ОбъектДок, ПараметрыЗагрузки);
	
	ДопПараметрыЗагрузкиВложения = ДопПараметрыЗагрузкиВложения(ПараметрыЗагрузки);
	
	МенеджерТитулов = Документы[ПараметрыЗагрузки.ИмяМетаданных].МенеджерТитулов();
	
	ЗагруженныйТитул = Неопределено;
	ВложенияЗагруженыБезОшибок = Истина;
	Для Каждого Титул Из МассивТитулов Цикл
		
		ПредставленияТитула = МенеджерТитулов.ПредставленияТитула(Титул);
		
		ВложенияЗагружены = Документы[ПараметрыЗагрузки.ИмяМетаданных].ВложенияЗагружены(
			Подстановки[ПредставленияТитула.ИмяПодстановки],
			Титул,
			ОбъектДок,
			ДопПараметрыЗагрузкиВложения);
			
		Если ВложенияЗагружены Тогда
			ЗагруженныйТитул = ПредставленияТитула.Представление;
		КонецЕсли;
			
	КонецЦикла;
	
	Если ВложенияЗагруженыБезОшибок Тогда
		ОбъектДок.ДатаИзменения = ДатаСобытияПоДокументу(ПараметрыЗагрузки, ОбъектДок.ДатаИзменения);
		ЗагрузитьДополнительныеДействия(ОбъектДок, ПараметрыЗагрузки.ДанныеДокумента["ДопДействия"]);
		ТекущийЭтапДокумента = ТекущийЭтапДокумента(ПараметрыЗагрузки);
		ЗагрузитьТекущиеЭтапыДокумента(ОбъектДок, ПараметрыЗагрузки);
		ПараметрыЗагрузки.Ссылка = СохранитьДокумент(
			ОбъектДок, ПараметрыЗагрузки.ИдСбис, ТекущийЭтапДокумента, Состояние, ПараметрыЗагрузки.ИзДокумента);
	ИначеЕсли ЗначениеЗаполнено(ЗагруженныйТитул) Тогда
		ПараметрыЗагрузки.Ссылка = СохранитьДокумент(
			ОбъектДок, ПараметрыЗагрузки.ИдСбис, ЗагруженныйТитул, Состояние, ПараметрыЗагрузки.ИзДокумента);
	Иначе
		ПараметрыЗагрузки.Ссылка = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекущиеЗначенияДокумента(ОбъектДок, ПараметрыЗагрузки) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Титул",     Неопределено);
	РезультатФункции.Вставить("Состояние", Неопределено);
	
	Если Не ПараметрыЗагрузки.ИзДокумента Тогда
		
		СостояниеВБазе = Saby_ТНОбщегоНазначенияСервер.ТекущийТитулИИДДокумента(ОбъектДок);
		
		Если ЗначениеЗаполнено(СостояниеВБазе.ИД) Тогда
			РезультатФункции.Титул     = СостояниеВБазе.АктивныйЭтап;
			РезультатФункции.Состояние = СостояниеВБазе.Состояние;
		КонецЕсли;
		
	КонецЕсли;
	
	МенеджерТитулов = Документы[ПараметрыЗагрузки.ИмяМетаданных].МенеджерТитулов();
	
	Если ПараметрыЗагрузки.ТекущийТитул <> Неопределено Тогда
		Если ТипЗнч(ПараметрыЗагрузки.ТекущийТитул) = Тип("Строка") Тогда
			РезультатФункции.Титул = МенеджерТитулов.ЗначениеПоПредставлению(ПараметрыЗагрузки.ТекущийТитул);
		Иначе
			РезультатФункции.Титул = ПараметрыЗагрузки.ТекущийТитул;
		КонецЕсли;
	Иначе
		РезультатФункции.Титул = МенеджерТитулов.ЗначениеПоПредставлению(РезультатФункции.Титул);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#Область ЗагрузкаТСИнтерфейс

Процедура ДанныеТСПрицеповСпецРазрешений(ДляДокумента, СтруктураТССОнлайна) Экспорт
	
	ДляДокумента.Вставить("ТранспортныеСредства", Новый Массив);
	ДляДокумента.Вставить("СпецРазрешения",       Новый Массив);
	
	Если Не ЗначениеЗаполнено(СтруктураТССОнлайна) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураТС = СтруктураТранспортногоСредства(СтруктураТССОнлайна);
	Если ЗначениеЗаполнено(СтруктураТС.РегистрационныйНомер) Тогда
		ДляДокумента.ТранспортныеСредства.Добавить(СтруктураТС);
	КонецЕсли;
	
	Прицепы = СтруктураТССОнлайна["Прицеп"];
	Если ЗначениеЗаполнено(Прицепы) Тогда
		
		Для Каждого Прицеп Из Прицепы Цикл
			СтруктураТС = СтруктураТранспортногоСредства(Прицеп, Истина);
			Если ЗначениеЗаполнено(СтруктураТС.РегистрационныйНомер) Тогда
				ДляДокумента.ТранспортныеСредства.Добавить(СтруктураТС);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ДляДокумента.Вставить("СпецРазрешения", ДанныеСпецРазрешений(СтруктураТССОнлайна["СпецУсловия"]));
	
	Документ = СтруктураТССОнлайна["Документ"];
	Если ЗначениеЗаполнено(Документ) Тогда
		ОснованиеПередачиГруза = Документ["ПередачаГруза"];
		Если ЗначениеЗаполнено(ОснованиеПередачиГруза) Тогда
			Тип = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей;
			ОснованиеПередачиГрузаТС = ЗагрузитьОдиночныйДокументЭТрН(ОснованиеПередачиГруза, Тип);
			ДляДокумента.Вставить("ОснованиеПередачиГрузаТС", ОснованиеПередачиГрузаТС);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, СтруктураТС) Экспорт
	
	Если СтруктураТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчищенныеВидыТС = Новый Соответствие;
	
	Если СтруктураТС.Свойство("ТранспортныеСредства") Тогда
		Для Каждого ТранспортноеСредство Из СтруктураТС.ТранспортныеСредства Цикл
			ОчиститьТранспортныеСредства(ОбъектДок, ТранспортноеСредство.Вид, ОчищенныеВидыТС);
			СтрокаТС = ОбъектДок.ТранспортныеСредства.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТС, ТранспортноеСредство);
		КонецЦикла;
	КонецЕсли;

	Если СтруктураТС.Свойство("СпецРазрешения") Тогда 
		Если ЗначениеЗаполнено(СтруктураТС.СпецРазрешения) Тогда
			ОбъектДок.СпецРазрешения.Очистить();
		КонецЕсли;
		Для Каждого СтруктураСпецРазрешения Из СтруктураТС.СпецРазрешения Цикл
			СтрокаСпецРазрешения = ОбъектДок.СпецРазрешения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСпецРазрешения, СтруктураСпецРазрешения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаТСИнтерфейс

#Область ЗагрузкаВодителейИнтерфейс

Функция ДанныеВодителей(ВодителиСОнлайна, ДопПараметры) Экспорт
	
	РезультатФункции = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ВодителиСОнлайна) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Для Каждого Водитель Из ВодителиСОнлайна["Водитель"] Цикл 
				
		ДанныеВодителя = ДанныеВодителяДляЗагрузки(Водитель);
		
		ПутевыеЛисты = Новый Массив;
		
		Если ЗначениеЗаполнено(Водитель["ПутевойЛист"]) Тогда
			
			// Создадим новый или найдем существующий путевой лист...				
			ТЗ = ТаблицаДокументовТрН();
			
			НомерСтроки = 0;
			
			ДокументыТрН(
				Водитель["ПутевойЛист"], 
				ТЗ, 
				Перечисления.Saby_ТипыДокумента.ПутевойЛист,
			    НомерСтроки);
				
			// Получим ссылки на существующие и новые документы
			СоответствиеДокументов = НайтиСоздатьДокументТрН(ТЗ);
			
		    // Заполняем данные по документам
			Для Каждого СтрокаДок Из ТЗ Цикл 
				
				СсылкаДок = СоответствиеДокументов.Получить(СтрокаДок.НомерСтроки);
				
				// кидаем все в общий список			
				СтруктураПутевогоЛиста = Новый Структура;
				СтруктураПутевогоЛиста.Вставить("Документ", СсылкаДок);
				
				ПутевыеЛисты.Добавить(СтруктураПутевогоЛиста);
				
			КонецЦикла;				
		
		КонецЕсли;
		
		ДанныеВодителя.Вставить("ПутевыеЛисты", ПутевыеЛисты);
		
		РезультатФункции.Добавить(ДанныеВодителя);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьДанныеВодителей(ОбъектДок, Водители) Экспорт
	
	КлючСтроки = 1;
	
	Если ЗначениеЗаполнено(Водители) Тогда
		ОбъектДок.Водители.Очистить();
		ОбъектДок.ПутевыеЛисты.Очистить();
	КонецЕсли;
	
	Для Каждого СтруктураВодителя Из Водители Цикл
		
		СтрокаВодителя = ОбъектДок.Водители.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВодителя, СтруктураВодителя);
		СтрокаВодителя.КлючСтроки = КлючСтроки;
		
		Для Каждого СтруктураПутевогоЛиста Из СтруктураВодителя.ПутевыеЛисты Цикл
			СтрокаПутевогоЛиста = ОбъектДок.ПутевыеЛисты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПутевогоЛиста, СтруктураПутевогоЛиста);
			СтрокаПутевогоЛиста.КлючСтроки_Водители = КлючСтроки;
		КонецЦикла;
		
		КлючСтроки = КлючСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаВодителейИнтерфейс

Функция ДанныеДляРегистраТитулов(Вложение, СсылкаНаДокумент, Титул, ИмяМетаданных,
		Просмотрено = Ложь, ТипТитулаОтказа = Неопределено) Экспорт
		
	Если Вложение["ЗагруженВРегистр"] Тогда
		ДляРегистра = Неопределено;
	Иначе
		ДляРегистра = Новый Структура;
		ДляРегистра.Вставить("СсылкаНаДокумент",    СсылкаНаДокумент);
		ДляРегистра.Вставить("ТипТитула",           Титул);
		ДляРегистра.Вставить("ИдентификаторТитула", Документы[ИмяМетаданных].ИдентификаторВложения(Вложение, Титул));
		ДляРегистра.Вставить("Период",              Документы[ИмяМетаданных].ДатаВложения(Вложение, Титул));
		ДляРегистра.Вставить("Просмотрено",         Просмотрено);
		Если ТипТитулаОтказа = Неопределено Тогда
			МенеджерТитулов = Документы[ИмяМетаданных].МенеджерТитулов();
			ДляРегистра.Вставить("ТипТитулаОтказа", МенеджерТитулов.ПустаяСсылка());
		Иначе
			ДляРегистра.Вставить("ТипТитулаОтказа", ТипТитулаОтказа);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДляРегистра;
	
КонецФункции

#Область ДокументыТрНИнтерфейс

Функция ЗагрузитьОдиночныйДокументЭТрН(Данные, Тип) Экспорт
	
	ТЗ = ТаблицаДокументовТрН();
	НС = ТЗ.Добавить();
		
	ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, Данные, Тип); 
	
	СоответствиеДокументов = НайтиСоздатьДокументТрН(ТЗ);
	
	Возврат СоответствиеДокументов.Получить(1);
	
КонецФункции

Функция НайтиСоздатьДокументТрН(ТЗДокументы) Экспорт
	
	Если Не ЗначениеЗаполнено(ТЗДокументы) Тогда 
		Возврат Неопределено;
	КонецЕсли;
		
	НайденныеДокументы = НайтиДокументыТрН(ТЗДокументы);
	Для Каждого СтрокаДок Из ТЗДокументы Цикл 						
		
		Ссылка = НайденныеДокументы.Получить(СтрокаДок.НомерСтроки);
		Если Не ЗначениеЗаполнено(Ссылка) Тогда 
			НовыйДок = НовыйДокументТрН(СтрокаДок);
			НайденныеДокументы.Вставить(СтрокаДок.НомерСтроки, НовыйДок);
		КонецЕсли;
			
	КонецЦикла;	

	Возврат НайденныеДокументы;
	
КонецФункции

Функция ТаблицаДокументовТрН() Экспорт
	
	КвалификаторЧисла5 = Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Любой);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номер",        ОписаниеТипаСтрока(255));
	ТЗ.Колонки.Добавить("Дата",         Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТЗ.Колонки.Добавить("ТипДок",       Новый ОписаниеТипов("ПеречислениеСсылка.Saby_ТипыДокумента"));
	ТЗ.Колонки.Добавить("Наименование", ОписаниеТипаСтрока(255)); 
	ТЗ.Колонки.Добавить("Стороны",      ОписаниеТипаСтрока(0));
	ТЗ.Колонки.Добавить("НомерСтроки",  Новый ОписаниеТипов("Число",    КвалификаторЧисла5));
		
	Возврат ТЗ;
	
КонецФункции

Процедура ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(Строка, Данные, Тип, НомерСтроки = 0) Экспорт
	
	НомерСтроки = НомерСтроки + 1;
	
	Строка.Наименование = СокрЛП(Данные["Наименование"]);
	Строка.Номер        = СокрЛП(Данные["Номер"]);
	Строка.Дата         = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(Данные["Дата"]);
	Строка.ТипДок       = Тип;
	Строка.Стороны      = ЗначениеВСтрокуВнутр(Данные["Стороны"]);
	Строка.НомерСтроки  = НомерСтроки;
	
КонецПроцедуры	

Процедура ДокументыТрН(Массив, ТЗ, Тип, НомерСтроки) Экспорт
	
	Если Не ЗначениеЗаполнено(Массив) Тогда 
		Возврат;
	КонецЕсли;
		
	Для Каждого Док Из Массив Цикл  
		НС = ТЗ.Добавить();	
		ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, Док, Тип, НомерСтроки);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти // ДокументыТрНИнтерфейс

#Область ДанныеЮрЛицИнтерфейс

Процедура ЗаполнитьУчастникаДокумента(ИмяРеквизита, Данные, ОбъектДок, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
		ОбъектДок[ИмяРеквизита] = ЗначениеПоУмолчанию;
		Возврат;
	КонецЕсли;
		
	РольКонтрагента = Перечисления.Saby_РолиКонтрагентов[ИмяРеквизита]; 
	
	ОбъектДок[ИмяРеквизита] = ПолучитьЮрЛицо(Данные);	
	
	Если ИмяРеквизита = "Заказчик" И ОбъектДок.Отправитель = ОбъектДок.Заказчик Тогда
		ОбъектДок.Заказчик = "";
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ДанныеЮрЛиц",      ДанныеЮрЛиц(Данные, РольКонтрагента));
	СтруктураДанных.Вставить("КонтактныеДанные", КонтактнаяИнформация(Данные, РольКонтрагента));
	
	ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
	    ОбъектДок,
		СтруктураДанных,
		РольКонтрагента);
		
КонецПроцедуры

Функция ПолучитьЮрЛицо(ДанныеЮрЛица, ЭтоСтронаДокумента = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоСтронаДокумента Тогда
		ЮрЛицо = Справочники.Saby_СторонаДокумента.ПустаяСсылка();
	Иначе	
		ЮрЛицо = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	СтруктураЛица = ОсновныеДанныеЛица(ДанныеЮрЛица, ЭтоСтронаДокумента);
		
	Если Не ЗначениеЗаполнено(СтруктураЛица.ИНН) Тогда		
		Возврат ЮрЛицо;		
	КонецЕсли;
	
	// Дополним исходную структуру данных новыми значениями			
	ДанныеЮрЛица.Вставить("ИНН",        СтруктураЛица.ИНН);
	ДанныеЮрЛица.Вставить("КПП",        СтруктураЛица.КПП);
	ДанныеЮрЛица.Вставить("ЭтоИП",      СтруктураЛица.ЭтоИП);
	ДанныеЮрЛица.Вставить("ЭтоЮЛ",      СтруктураЛица.ЭтоЮЛ);
	ДанныеЮрЛица.Вставить("ЭтоИнЛицо",  СтруктураЛица.ЭтоИнЛицо);
	ДанныеЮрЛица.Вставить("ЭтоФЛ",      СтруктураЛица.ЭтоФЛ);
	ДанныеЮрЛица.Вставить("КодФилиала", СтруктураЛица.КодФилиала);
	ДанныеЮрЛица.Вставить("Название",   СтруктураЛица.Наименование);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН",          СтруктураЛица.ИНН);
	Запрос.УстановитьПараметр("КПП",          СтруктураЛица.КПП);
	Запрос.УстановитьПараметр("Наименование", СтруктураЛица.Наименование);
	Запрос.УстановитьПараметр("ПоискСтороны", ЭтоСтронаДокумента);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	1 КАК Порядок
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН
	|	И ВЫБОР
	|			КОГДА &КПП = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Организации.КПП = &КПП
	|		КОНЕЦ
    |
	|ОБЪЕДИНИТЬ ВСЕ
    |
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	2
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты	
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И ВЫБОР
	|			КОГДА &КПП = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Контрагенты.КПП = &КПП
	|		КОНЕЦ
    |
	|ОБЪЕДИНИТЬ ВСЕ
    |
	|ВЫБРАТЬ
	|	Saby_СторонаДокумента.Ссылка,
	|	3
	|ИЗ
	|	Справочник.Saby_СторонаДокумента КАК Saby_СторонаДокумента
	|ГДЕ
	|	Saby_СторонаДокумента.ИНН = &ИНН
	|   И &ПоискСтороны = ИСТИНА 
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_Данные.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
    |
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Данные.Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		// нашли юр.лицо. Организация, Контрагент
		ЮрЛицо = Выборка.Ссылка; 		
	Иначе
		
		Если ЭтоСтронаДокумента Тогда        
			ЮрЛицо = НоваяСторонаДокумента(ДанныеЮрЛица); 
		Иначе 	
			ЮрЛицо = НовыйКонтрагент(ДанныеЮрЛица);
		КонецЕсли;
	
	КонецЕсли;	
	
	ДанныеЮрЛица.Вставить("Ссылка", ЮрЛицо);
	
	Возврат ЮрЛицо;
		
КонецФункции

Функция ПреобразоватьСтруктуруАдреса(ДанныеАдреса) Экспорт
	
	СтруктураАдреса = Неопределено;
	
	Если Не ЗначениеЗаполнено(ДанныеАдреса) Тогда
		Возврат СтруктураАдреса;
	КонецЕсли;
	
	Текст = ДанныеАдреса["Текст"];
	Адрес = ДанныеАдреса["Структура"];
	
	Если ЗначениеЗаполнено(Текст) 
		Или ЗначениеЗаполнено(Адрес) Тогда
		
		Если ТипЗнч(Адрес) <> Тип("Строка") Тогда 
			СтруктураJS = Saby_ТНОбщегоНазначенияСервер.ЗначениеВJSON(Адрес);
		Иначе 
			СтруктураJS = Адрес;
		КонецЕсли;
	
		// есть представление
		Если ЗначениеЗаполнено(Текст) Тогда	
			Представление = Текст;			
		Иначе 
			Если ТипЗнч(Адрес) = Тип("Строка") Тогда
				Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(Адрес);
			Иначе
				// есть только структура данных. сформируем представление по структуре
				Представление = ПредставлениеАдресаИзСоответствия(Адрес); 
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("АдресСтрокой",    Представление);
		СтруктураАдреса.Вставить("АдресСтруктурой", СтруктураJS);
		
	КонецЕсли;	
	
	Возврат СтруктураАдреса;
	
КонецФункции

Функция ДанныеЮрЛиц(ДанныеЮрЛицаСОнлайна, Роль, СтруктураДанныхЮрЛица = Неопределено) Экспорт
	
	РезультатФункции = Новый Массив;
	
	Если ДанныеЮрЛицаСОнлайна = Неопределено Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	// для иностранных возможно доп проверка
	Если Не ЗначениеЗаполнено(ДанныеЮрЛицаСОнлайна["Ссылка"]) И СтруктураДанныхЮрЛица = Неопределено Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Если СтруктураДанныхЮрЛица = Неопределено Тогда
		СтруктураДанныхЮрЛица = Новый Структура;
	КонецЕсли;
	
	ЭтоИП = ДанныеЮрЛицаСОнлайна["ЭтоИП"];
	ЭтоЮЛ = ДанныеЮрЛицаСОнлайна["ЭтоЮЛ"];
	ЭтоФЛ = ДанныеЮрЛицаСОнлайна["ЭтоФЛ"];
	
	СтруктураДанныхЮрЛица.Вставить("Роль",       Роль);
	СтруктураДанныхЮрЛица.Вставить("ИНН",        ДанныеЮрЛицаСОнлайна["ИНН"]);
	СтруктураДанныхЮрЛица.Вставить("КПП",        ДанныеЮрЛицаСОнлайна["КПП"]);
	СтруктураДанныхЮрЛица.Вставить("КодФилиала", ДанныеЮрЛицаСОнлайна["КодФилиала"]);
	
	Если ЗначениеЗаполнено(ДанныеЮрЛицаСОнлайна["Ссылка"]) Тогда
		СтруктураДанныхЮрЛица.Вставить("НаименованиеОрганизации", Строка(ДанныеЮрЛицаСОнлайна["Ссылка"]));
	Иначе
		СтруктураДанныхЮрЛица.Вставить("НаименованиеОрганизации", ДанныеЮрЛицаСОнлайна["Название"]);
	КонецЕсли;
	
	// Адрес 
	ЮрАдрес = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеЮрЛицаСОнлайна, "Адрес.Юридический");
	СтруктураАдрес = ПреобразоватьСтруктуруАдреса(ЮрАдрес);
	Если ЗначениеЗаполнено(СтруктураАдрес) Тогда
		СтруктураДанныхЮрЛица.Вставить("Адрес", СтруктураАдрес.АдресСтрокой);
		СтруктураДанныхЮрЛица.Вставить("АдресСтруктура", СтруктураАдрес.АдресСтруктурой);
	КонецЕсли;
	
	ДанныеРеквизитов = ДанныеЮрЛицаСОнлайна["Реквизиты"];
	
	СтруктураДанныхЮрЛица.Вставить("ЮрФизЛицо", Неопределено);
	Если ЭтоЮл Тогда
		СтруктураДанныхЮрЛица.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ЮрЛицо;
	ИначеЕсли ЭтоФЛ Тогда
		
		СтруктураДанныхЮрЛица.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ФизЛицо;
		
		СтруктураФИО = СтруктураФИО(ДанныеРеквизитов["ФЛ"]);
		ФИОСтрокой = ЗначениеВСтрокуВнутр(СтруктураФИО);
		
		СтруктураДанныхЮрЛица.НаименованиеОрганизации = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеФИО(СтруктураФИО);
		
		СтруктураДанныхЮрЛица.Вставить("СтруктураФИО", ФИОСтрокой);
		
	ИначеЕсли ЭтоИП Тогда  
		
		СтруктураДанныхЮрЛица.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ИндивидуальныйПредприниматель;
		
		РеквизитыИП = ДанныеРеквизитов["ИП"];
				
		СтруктураДанныхЮрЛица.Вставить("ОГРН", РеквизитыИП["ОГРН"]);
				
		СтруктураФИО = СтруктураФИО(РеквизитыИП);
		ФИОСтрокой = ЗначениеВСтрокуВнутр(СтруктураФИО);
		
		СтруктураДанныхЮрЛица.НаименованиеОрганизации = "ИП "
			+ Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеФИО(СтруктураФИО);
				
		СтруктураДанныхЮрЛица.Вставить("СтруктураФИО", ФИОСтрокой);
				
	Иначе		
		
		// Иностаранное юр лицо				
		СтруктураДанныхЮрЛица.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ЮрЛицоНеРезидент;
		// ??? возможно в контрагенте достаточно 
		Страна = ДанныеРеквизитов["ИностранноеЛицо"]["Страна"];
		Если ЗначениеЗаполнено(Страна) Тогда 
			СтруктураДанныхЮрЛица.Вставить("СтранаРегистрации", СокрЛП(Страна));
		КонецЕсли;
			
	КонецЕсли;
	
	РезультатФункции.Добавить(СтруктураДанныхЮрЛица);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция КонтактнаяИнформация(ДанныеЮрЛицаСОнлайна, Роль) Экспорт
	
	РезультатФункции = Новый Массив;
	
	Если ДанныеЮрЛицаСОнлайна = Неопределено Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	// для иностранных возможно доп проверка
	Если Не ЗначениеЗаполнено(ДанныеЮрЛицаСОнлайна["Ссылка"]) Тогда   
		Возврат РезультатФункции;
	КонецЕсли;
	
	СтруктураКонтактнойИнформации = Новый Структура;
	
	// Телефоны 
	Контакты = ДанныеЮрЛицаСОнлайна["Контакты"];
	Если Не ЗначениеЗаполнено(Контакты) Тогда 
		Возврат РезультатФункции;
	КонецЕсли;
	
	Телефоны = Контакты["Телефон"];
	Если ЗначениеЗаполнено(Телефоны) Тогда 
		Для Каждого Телефон Из Телефоны Цикл 				
			
			Если Не ЗначениеЗаполнено(Телефон["Значение"]) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураКонтактнойИнформации = СтруктураКонтактнойИнформации(
				Роль, Перечисления.ТипыКонтактнойИнформации.Телефон, Телефон);
			РезультатФункции.Добавить(СтруктураКонтактнойИнформации);
			
		КонецЦикла;	
	КонецЕсли;
	
	// Электронная почта
	Почты = Контакты["ЭлектроннаяПочта"];
	Если ЗначениеЗаполнено(Почты) Тогда 
		Для Каждого ЭлПочта Из Почты Цикл 				
			
			Если Не ЗначениеЗаполнено(ЭлПочта["Значение"]) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураКонтактнойИнформации = СтруктураКонтактнойИнформации(
				Роль, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ЭлПочта);
			РезультатФункции.Добавить(СтруктураКонтактнойИнформации);
			
		КонецЦикла; 
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(ОбъектДок, СтруктураДанных, Роль) Экспорт
	
	УдалитьСвязаннуюСЮрЛицомИнформацию(СтруктураДанных.ДанныеЮрЛиц, ОбъектДок.ДанныеЮрЛиц, Роль);
	Для Каждого СтруктураДанныхЮрЛица Из СтруктураДанных.ДанныеЮрЛиц Цикл
		Если СтруктураДанныхЮрЛица.Роль <> Роль Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДанныхЮрЛиц = ОбъектДок.ДанныеЮрЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныхЮрЛиц, СтруктураДанныхЮрЛица);
	КонецЦикла;
	
	Если Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("КонтактныеДанные", ОбъектДок) Тогда
		УдалитьСвязаннуюСЮрЛицомИнформацию(СтруктураДанных.КонтактныеДанные, ОбъектДок.КонтактныеДанные, Роль);
		Для Каждого СтруктураКонтактныхДанных Из СтруктураДанных.КонтактныеДанные Цикл
			Если СтруктураКонтактныхДанных.Роль <> Роль Тогда
				Продолжить;
			КонецЕсли;
			СтрокаКонтактныхДанных = ОбъектДок.КонтактныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКонтактныхДанных, СтруктураКонтактныхДанных);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ДанныеЮрЛицИнтерфейс

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Процедура ЗагрузитьДокумент(ПараметрыЗагрузки, ОбщиеПараметрыЗагрузки, Результат)
	
	Ошибки = Неопределено;
	
	ПолучитьДанныеДокументаИзСБИС(ПараметрыЗагрузки, ОбщиеПараметрыЗагрузки, Результат);
	
	Попытка
		
		// Статистика. Прямая запись
		Если ПараметрыЗагрузки.ТолькоАктивныйЭтап Тогда
			
			Saby_ТНВыгрузкаСервер.ЗаписатьСтатистикуНапрямую(
				ПараметрыЗагрузки.Ссылка, ПараметрыЗагрузки.ТекущийТитул);
				
		КонецЕсли;	
		
		ЗагрузкаДанныхДокумента(ПараметрыЗагрузки);
		
		Результат.Успешные.Добавить(ПараметрыЗагрузки.Ссылка);
		Результат.Итог.Количество = Результат.Итог.Количество + 1;
		
		Если ОбщиеПараметрыЗагрузки.ЗагружатьПечатнуюФорму Тогда
			
			ПараметрыЗагрузкиПечатнойФормы = ПараметрыЗагрузкиПечатнойФормыИзСбис(
				ПараметрыЗагрузки.Ссылка, ОбщиеПараметрыЗагрузки.context_params);
				
			ЗагрузитьПечатнуюФормуДокументаИзСбис(
				ПараметрыЗагрузкиПечатнойФормы, ПараметрыЗагрузки.ДанныеДокумента["СсылкаНаPDF"]); 
				
		КонецЕсли;
		
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		ТекстОшибки = Saby_ТНОбщегоНазначенияСервер.ПричинаОшибки(ИнфоОшибки.Описание);
		Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
		
		Ошибки.Вставить("ИмяМетаданных", ПараметрыЗагрузки.ИмяМетаданных);
		
		Если ЗначениеЗаполнено(ПараметрыЗагрузки.Ссылка) Тогда
			Результат.Ошибки.Вставить(ПараметрыЗагрузки.Ссылка, Ошибки);
		Иначе
			Результат.Ошибки.Вставить(ПараметрыЗагрузки.ИдСбис, Ошибки);
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПолучитьДанныеДокументаИзСБИС(ПараметрыЗагрузки, ОбщиеПараметрыЗагрузки, Результат)
	
	Если ЗначениеЗаполнено(ПараметрыЗагрузки.ДанныеДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Ошибки = Неопределено;
	
	Данные = РегистрыСведений.Saby_Состояние.ПрочитатьПоОбъекту(ПараметрыЗагрузки.Ссылка);
	Если Данные <> Неопределено Тогда 
		ИДСбис = Данные.UID;
	Иначе 
		ИДСбис = "";
	КонецЕсли;
	
	// документа нет в сбис. данные не загрузить
	Если Не ЗначениеЗаполнено(ИДСбис) Тогда 
		ТекстОшибки = "У документа нет идентификатора Сбис, обновление данных не возможно!";					
		Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
		Ошибки.Вставить("ИмяМетаданных", ПараметрыЗагрузки.ИмяМетаданных);
		Результат.Ошибки.Вставить(ПараметрыЗагрузки.Ссылка, Ошибки); 
		Возврат;                             
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Идентификатор", ИДСбис);
	Параметры.Вставить("ДопПоля",       "ДопДействия,ТекущиеЭтапы,Подстановки,Расширение");
	
	Попытка		
		РезультатСБИС = ОбщиеПараметрыЗагрузки.ОбъектОбработки.local_helper_read_document(
			ОбщиеПараметрыЗагрузки.context_params, Параметры);
			
		ПараметрыЗагрузки.ДанныеДокумента = РезультатСБИС;
		ПараметрыЗагрузки.ИДСбис          = ИДСбис;
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		ТекстОшибки = Saby_ТНОбщегоНазначенияСервер.ПричинаОшибки(ИнфоОшибки.Описание);					
		Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
		Ошибки.Вставить("ИмяМетаданных", ПараметрыЗагрузки.ИмяМетаданных);
		Результат.Ошибки.Вставить(ПараметрыЗагрузки.Ссылка, Ошибки); 
		Возврат;
		
	КонецПопытки;
	
	Вложения = Новый Соответствие;
	ДобавитьВложения(Вложения, ПараметрыЗагрузки.ДанныеДокумента["Вложение"]);
	ПараметрыЗагрузки.ДанныеДокумента.Вставить("Вложения", Вложения);
	
	ДанныеПодстановок = ПараметрыЗагрузки.ДанныеДокумента["Подстановки"];
	Если ЗначениеЗаполнено(ДанныеПодстановок) Тогда
		ПараметрыЗагрузки.ДанныеДокумента.Вставить("Подстановки", Новый Соответствие);
		ПараметрыЗагрузки.ДанныеДокумента.Вставить("ИдТитулов",   Новый Соответствие);
		Для Каждого Подстановки Из ДанныеПодстановок Цикл
			ДобавитьПодстановкуТитула(
				ПараметрыЗагрузки.ДанныеДокумента,
				Подстановки.Ключ,
				Подстановки.Значение,
				ПараметрыЗагрузки.ИмяМетаданных);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектЗагружаемогоДокумента(ПараметрыЗагрузки)
	
	Если Не ЗначениеЗаполнено(ПараметрыЗагрузки.Ссылка) Тогда
		ПараметрыЗагрузки.Ссылка = Saby_ТНОбщегоНазначенияСервер.ДокументПоИдентификаторуСбис(ПараметрыЗагрузки.ИдСбис);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗагрузки.Ссылка) Тогда
		РезультатФункции = ПараметрыЗагрузки.Ссылка.ПолучитьОбъект();
	Иначе
		РезультатФункции = Документы[ПараметрыЗагрузки.ИмяМетаданных].СоздатьДокумент();
		РезультатФункции.НомерСбис   = ПараметрыЗагрузки.ДанныеДокумента["Номер"];
		РезультатФункции.Комментарий = ПараметрыЗагрузки.ДанныеДокумента["Название"];
		
		ДатаВремяСоздания = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(
			ПараметрыЗагрузки.ДанныеДокумента["ДатаВремяСоздания"]);
		РезультатФункции.Дата = ДатаВремяСоздания;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура УстановитьДокументОснование(ОбъектДок, ПараметрыЗагрузки)
	
	Если Не ПараметрыЗагрузки.ЭтоЗаполнениеСПомощьюINI
		Или Не ЗначениеЗаполнено(ПараметрыЗагрузки.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДок.ДокументОснование_ОбъектМетаданных = Saby_ТНОбщегоНазначенияСервер.ИмяМетаданныхДокумента(
		ПараметрыЗагрузки.ДокументОснование);
	
	Если ЗначениеЗаполнено(ОбъектДок.ДокументОснование_ОбъектМетаданных) Тогда 
		ОбъектДок.ДокументОснование_Идентификатор = ПараметрыЗагрузки.ДокументОснование.УникальныйИдентификатор();
	Иначе
		ОбъектДок.ДокументОснование_Идентификатор = "";
	КонецЕсли;
	
КонецПроцедуры

Функция НаправлениеДокумента(НаправлениеСОнлайна, Знач ЗначениеПоУмолчанию = Неопределено)
	
	Если ЗначениеПоУмолчанию = Неопределено Тогда
		ЗначениеПоУмолчанию = Перечисления.Saby_Направление.Исходящий;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаправлениеСОнлайна) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Перечисления.Saby_Направление.ЗначениеПоИмени(НаправлениеСОнлайна);
	
КонецФункции

Функция ДопПараметрыЗагрузкиВложения(ПараметрыЗагрузки = Неопределено)
	
	РезультатФункции = Новый Структура;	
	РезультатФункции.Вставить("ЗагрузкаСОнлайна",   Истина);
	РезультатФункции.Вставить("Просмотрено",        Ложь);
	РезультатФункции.Вставить("ТолькоАктивныйЭтап", Ложь);
	РезультатФункции.Вставить("ИмяМетаданных",      "");
	
	Если ПараметрыЗагрузки <> Неопределено Тогда  
		
		РезультатФункции.Просмотрено = ПараметрыЗагрузки.ТекущийТитул <> Неопределено;
		
		Если ПараметрыЗагрузки.ЭтоЗаполнениеСПомощьюINI Тогда 
			РезультатФункции.ЗагрузкаСОнлайна = Ложь;
		КонецЕсли;
		
		РезультатФункции.ТолькоАктивныйЭтап = ПараметрыЗагрузки.Свойство("ТолькоАктивныйЭтап")
			И ПараметрыЗагрузки.ТолькоАктивныйЭтап;
		
		РезультатФункции.ИмяМетаданных = ПараметрыЗагрузки.ИмяМетаданных;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СохранитьДокумент(ОбъектДок, ИД, АктивныйЭтап, Состояние, ИзДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ОбъектДок.Ссылка) Тогда 
			
			ОбъектДок.УстановитьНовыйНомер();
			Если Не ЗначениеЗаполнено(ОбъектДок.Дата) Тогда 
				ОбъектДок.Дата = ТекущаяДатаСеанса(); 				
			КонецЕсли;
			
		КонецЕсли;		
		
		ОбъектДок.Записать();
		
		Ссылка = ОбъектДок.Ссылка;
		
		// выкручиваемся через SbisId
		// больше писать не куда...
		Если Не ИзДокумента Тогда			
			Просмотрен = "Не просмотрен";  			
		Иначе 
			Просмотрен = "";
		КонецЕсли;
		
		РегистрыСведений.Saby_Состояние.ОбновитьПоUID(
			ИД, , , 
			СокрЛП(АктивныйЭтап), 
			Состояние, 
			Ссылка, , , 
			Просмотрен);
		
	Исключение		
		Ссылка = Неопределено;		
	КонецПопытки;	
	
	Возврат Ссылка;
	
КонецФункции

Процедура ЗагрузитьДополнительныеДействия(ОбъектДок, ДопДействия)
	
	Если Не Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("ДоступныеДействия", ОбъектДок) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДок.Ссылка) Тогда 
		ОбъектДок.ДоступныеДействия.Очистить();	  
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДопДействия) Тогда 
		Возврат; 
	КонецЕсли;
	
	Для Каждого Действие Из ДопДействия Цикл 
		
		Значение = ЗначениеДопДействия(Действие["Название"]);
		Если ЗначениеЗаполнено(Значение) Тогда 
			НС = ОбъектДок.ДоступныеДействия.Добавить();
			НС.Действие = Значение;
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры

Функция ЗначениеДопДействия(Действие)
	
	Если Действие = "Уведомление о переадресовке" Тогда 
		Значение = Перечисления.Saby_ДоступныеДействия.УведомлениеОПереадресовке;
	ИначеЕсли Действие = "Изменить стоимость" Тогда
		Значение = Перечисления.Saby_ДоступныеДействия.ИзменитьСтоимость;
	ИначеЕсли Действие = "Согласовать стоимость" Тогда	
		Значение = Перечисления.Saby_ДоступныеДействия.СогласоватьСтоимость;
	ИначеЕсли Действие = "Замена водителей/ТС" Тогда
		Значение = Перечисления.Saby_ДоступныеДействия.ЗаменаВодителяТС;
	ИначеЕсли Действие = "Переадресовка" Тогда 	 
		Значение = Перечисления.Saby_ДоступныеДействия.Переадресовка;
	Иначе
		// не нашли соотвествия
		Значение = Неопределено;
	КонецЕсли;
	 		 
	Возврат Значение;
	
КонецФункции

Функция ДатаСобытияПоДокументу(Параметры, Знач ДатаПоУмолчанию = Неопределено)
	
	Если ДатаПоУмолчанию = Неопределено Тогда
		ДатаПоУмолчанию = Дата(1, 1, 1);
	КонецЕсли;
	
	Если Параметры.ИзДокумента Тогда
		Возврат ДатаПоУмолчанию;
	КонецЕсли;
	
	События = Параметры.ДанныеДокумента["Событие"];
	Если Не ЗначениеЗаполнено(События) Тогда
		Возврат ДатаПоУмолчанию;
	КонецЕсли;
	
	Возврат Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(События[0]["ДатаВремя"]);
	
КонецФункции

Функция ТекущийЭтапДокумента(ПараметрыЗагрузки)
	
	РезультатФункции = "";
	
	ТекущиеЭтапы = ПараметрыЗагрузки.ДанныеДокумента["ТекущиеЭтапы"];
	Если ТекущиеЭтапы = Неопределено Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	ДатаЭтапа = Дата(1, 1, 1);
	
	Для Каждого ТекущийЭтап Из ТекущиеЭтапы Цикл
		ДатаСобытия = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ТекущийЭтап["ДатаСобытия"]);
		Если ДатаЭтапа < ДатаСобытия Тогда
			РезультатФункции = ТекущийЭтап["Наименование"];
			ДатаЭтапа = ДатаСобытия;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗагрузитьТекущиеЭтапыДокумента(ОбъектДок, ПараметрыЗагрузки)
	
	Если Не Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("ТекущиеЭтапы", ОбъектДок) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДок.ТекущиеЭтапы.Очистить();
	
	ТекущиеЭтапы = ПараметрыЗагрузки.ДанныеДокумента["ТекущиеЭтапы"];
	
	Если ТекущиеЭтапы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоступныеЭтапы = Новый Соответствие;
	Этапы = ПараметрыЗагрузки.ДанныеДокумента["Этап"];
	Если Этапы <> Неопределено Тогда
		Для Каждого Этап Из Этапы Цикл
			ДоступныеЭтапы.Вставить(Этап["Название"], Истина);
		КонецЦикла;
	КонецЕсли;
	
	МенеджерТитулов = Документы[ПараметрыЗагрузки.ИмяМетаданных].МенеджерТитулов();
	
	Для Каждого ТекущийЭтап Из ТекущиеЭтапы Цикл
		
		НаименованиеЭтапа = ТекущийЭтап["Наименование"];
		
		СтрокаТекущегоЭтапа = ОбъектДок.ТекущиеЭтапы.Добавить();
		СтрокаТекущегоЭтапа.Наименование = НаименованиеЭтапа;
		СтрокаТекущегоЭтапа.ТипТитула    = МенеджерТитулов.ЗначениеПоЭтапу(НаименованиеЭтапа);
		СтрокаТекущегоЭтапа.Доступен     = ДоступныеЭтапы[НаименованиеЭтапа] <> Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ЗагрузкаИзменений

Функция СписокИзмененийДокументов(СтруктураПараметров)
	
	РезультатФункции = Новый Соответствие;
	
	ПараметрыПолученияИзменений = ПараметрыПолученияИзменений(СтруктураПараметров);
	
	ЕстьИзменения = Истина;
	Пока ЕстьИзменения Цикл
		
		ИзмененияПоДокументам = СледующиеИзмененияДокументов(ПараметрыПолученияИзменений, ЕстьИзменения);
		
		ИдентификаторПоследнегоСобытия = "";
		Для Каждого Изменение Из ИзмененияПоДокументам Цикл
			
			ДобавитьИзменение(РезультатФункции, Изменение, ИдентификаторПоследнегоСобытия, СтруктураПараметров.ДопПараметры);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ИдентификаторПоследнегоСобытия) Тогда
			ПараметрыПолученияИзменений.Параметры.Вставить("ИдентификаторСобытия", ИдентификаторПоследнегоСобытия);
		Иначе
			ПараметрыПолученияИзменений.Параметры.Удалить("ИдентификаторСобытия");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПараметрыПолученияИзменений(СтруктураПараметров)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ОбъектОбработки", Обработки.SABY.Создать());
	РезультатФункции.Вставить("context_params",  СтруктураПараметров.context_params);
	РезультатФункции.Вставить("Параметры",       Новый Структура);
	
	РазмерСтраницы = 30;
	
	Навигация = Новый Структура;
	Навигация.Вставить("РазмерСтраницы", Формат(РазмерСтраницы, "ЧГ=0"));
	
	РезультатФункции.Параметры.Вставить("Навигация", Навигация);
	
	Если СтруктураПараметров.ДопПараметры.Свойство("Начало")
		И ЗначениеЗаполнено(СтруктураПараметров.ДопПараметры.Начало) Тогда
		
		ДатаС = СтруктураПараметров.ДопПараметры.Начало;
		ПараметрДатаС = Формат(ДатаС, "ДФ='dd.MM.yyyy ЧЧ.мм.сс'");
		РезультатФункции.Параметры.Вставить("ДатаВремяС", ПараметрДатаС);
		
	КонецЕсли;
	
	Если СтруктураПараметров.ДопПараметры.Свойство("Окончание")
		И ЗначениеЗаполнено(СтруктураПараметров.ДопПараметры.Окончание) Тогда
		
		ДатаПо = СтруктураПараметров.ДопПараметры.Окончание;
		ПараметрДатаПо = Формат(ДатаПо, "ДФ='dd.MM.yyyy ЧЧ.мм.сс'");
		РезультатФункции.Параметры.Вставить("ДатаВремяПо", ПараметрДатаПо);
		
	КонецЕсли;
	
	ПараметрыДокументаДляАПИ = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыДокументаДляАПИ(
		СтруктураПараметров.ДопПараметры.ИмяМетаданных);
		
	РезультатФункции.Параметры.Вставить("Тип",                ПараметрыДокументаДляАПИ.Тип);
	РезультатФункции.Параметры.Вставить("ДопПоля",            "ДопДействия,ТекущиеЭтапы,Подстановки");
	РезультатФункции.Параметры.Вставить("ПолныйСертификатЭП", "Нет");
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СледующиеИзмененияДокументов(ПараметрыПолученияИзменений, ЕстьИзменения)
	
	РезультатФункции = Новый Массив;
	
	Попытка                                                                                      
		
		СоответствиеИзменений = ПараметрыПолученияИзменений.ОбъектОбработки.local_helper_read_changes(
			ПараметрыПолученияИзменений.context_params, ПараметрыПолученияИзменений.Параметры);
		
		РезультатФункции = СоответствиеИзменений["Документ"];
		ЕстьИзменения    = Булево(СоответствиеИзменений["Навигация"]["ЕстьЕще"]);
		
	Исключение
		
		ЕстьИзменения = Ложь;
		
		ИнфОбОшибке = ИнформацияОбОшибке();		
		Описание    = "Ошибка загрузки из Сбис";
			
		Saby_ТНОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации(Неопределено, Описание, ИнфОбОшибке);
		
	КонецПопытки;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДобавитьИзменение(Изменения, ИзменениеСОнлайна, ПоследнийИдентификатор, ДопПараметры)
	
	ДанныеПодстановок = ИзменениеСОнлайна["Подстановки"];
	Если Не ЗначениеЗаполнено(ДанныеПодстановок) Тогда
		ДобавитьСобытия(ИзменениеСОнлайна["Событие"], ПоследнийИдентификатор);
		Возврат;
	КонецЕсли;
	
	ИдентификаторДокумента = ИзменениеСОнлайна["Идентификатор"];
	
	// Изменения с онлайна приходят не сгруппированные по документу.
	// Поэтому группируем их по идентификатору документа
	ИзмененияПоДокументу = Изменения.Получить(ИдентификаторДокумента);
	Если ИзмененияПоДокументу = Неопределено Тогда
		
		ИзмененияПоДокументу = Новый Соответствие;
		ИзмененияПоДокументу.Вставить("Подстановки",       Новый Соответствие);
		ИзмененияПоДокументу.Вставить("ИдТитулов",         Новый Соответствие);
		ИзмененияПоДокументу.Вставить("ДатаВремяСоздания", ИзменениеСОнлайна["ДатаВремяСоздания"]);
		ИзмененияПоДокументу.Вставить("Номер",             ИзменениеСОнлайна["Номер"]);
		ИзмененияПоДокументу.Вставить("Название",          ИзменениеСОнлайна["Название"]);
		ИзмененияПоДокументу.Вставить("Направление",       ИзменениеСОнлайна["Направление"]);
		ИзмененияПоДокументу.Вставить("Состояние",         ИзменениеСОнлайна["Состояние"]);
		ИзмененияПоДокументу.Вставить("Событие",           Новый Массив);
		ИзмененияПоДокументу.Вставить("ТекущиеЭтапы",      ИзменениеСОнлайна["ТекущиеЭтапы"]);
		ИзмененияПоДокументу.Вставить("ДопДействия",       ИзменениеСОнлайна["ДопДействия"]);
		
		Изменения.Вставить(ИдентификаторДокумента, ИзмененияПоДокументу);
		
	КонецЕсли;
	
	ДобавитьВложенияИзСобытий(ИзмененияПоДокументу, ИзменениеСОнлайна["Событие"]);
	
	Для Каждого Подстановки Из ДанныеПодстановок Цикл
		ДобавитьПодстановкуТитула(
			ИзмененияПоДокументу,
			Подстановки.Ключ,
			Подстановки.Значение,
			ДопПараметры.ИмяМетаданных);
	КонецЦикла;
	
	ДобавитьСобытия(ИзменениеСОнлайна["Событие"], ПоследнийИдентификатор, ИзмененияПоДокументу);
	
КонецПроцедуры

Процедура ДобавитьПодстановкуТитула(ИзмененияПоДокументу, КодТитулаОнлайна, ЗначенияПодстановок, ИмяМетаданных)
	
	МенеджерТитулов = Документы[ИмяМетаданных].МенеджерТитулов();
	
	Титул = МенеджерТитулов.ЗначениеПоИмениПодстановки(КодТитулаОнлайна);
	ПредставленияТитула = МенеджерТитулов.ПредставленияТитула(Титул);
	
	СтруктураВложения = ИзмененияПоДокументу["Вложения"][ПредставленияТитула.КодТитула];
	
	МассивПодстановок = Saby_ТНОбщегоНазначенияКлиентСервер.ЗначениеВМассив(ЗначенияПодстановок);
	
	Для Каждого ДанныеТитула Из МассивПодстановок Цикл
		
		ДобавитьИнформациюВПодстановки(ДанныеТитула, Титул, СтруктураВложения, ИмяМетаданных);
		УдалитьНеиспользуемуюИнформациюВПодстановках(ДанныеТитула, ПредставленияТитула);
		
		МассивТитулов = ИзмененияПоДокументу["Подстановки"][КодТитулаОнлайна];
		Если МассивТитулов = Неопределено Тогда
			МассивТитулов = Новый Массив;
			ИзмененияПоДокументу["Подстановки"].Вставить(КодТитулаОнлайна, МассивТитулов);
		КонецЕсли;
		
		ИндексТитула = ИзмененияПоДокументу["ИдТитулов"][ДанныеТитула["ИдентификаторВложенияТитула"]];
		Если ИндексТитула = Неопределено Тогда
			МассивТитулов.Добавить(ДанныеТитула);
			ИндексТитула = МассивТитулов.ВГраница();
			ИзмененияПоДокументу["ИдТитулов"].Вставить(ДанныеТитула["ИдентификаторВложенияТитула"], ИндексТитула);
		Иначе
			МассивТитулов[ИндексТитула] = ДанныеТитула;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИнформациюВПодстановки(ДанныеТитула, Титул, СтруктураВложения, ИмяМетаданных)
	
	ДанныеТитула.Вставить(
		"ДатаВложенияТитула",
		Документы[ИмяМетаданных].ДатаВложения(ДанныеТитула, Титул, СтруктураВложения));
		
	ДанныеТитула.Вставить(
		"ИдентификаторВложенияТитула",
		Документы[ИмяМетаданных].ИдентификаторВложения(ДанныеТитула, Титул, СтруктураВложения));
	
КонецПроцедуры

Процедура УдалитьНеиспользуемуюИнформациюВПодстановках(ДанныеТитула, ПредставленияТитула)
	
	Если ДанныеТитула[ПредставленияТитула.КодТитула] <> Неопределено Тогда
		ДанныеТитула.Вставить(ПредставленияТитула.КодТитула, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСобытия(СобытияОнлайна, ПоследнийИдентификатор, ИзмененияПоДокументу = Неопределено)
	
	Если СобытияОнлайна = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Событие Из СобытияОнлайна Цикл
		
		ПоследнийИдентификатор = Событие["Идентификатор"];
		
		Если ИзмененияПоДокументу = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СобытиеСоответствие = Новый Соответствие;
		СобытиеСоответствие.Вставить("ДатаВремя",     Событие["ДатаВремя"]);
		СобытиеСоответствие.Вставить("Идентификатор", Событие["Идентификатор"]);
		
		ИзмененияПоДокументу["Событие"].Добавить(СобытиеСоответствие);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВложенияИзСобытий(ИзмененияПоДокументу, СобытияСОнлайна)
	
	Вложения = ИзмененияПоДокументу["Вложения"];
	Если Вложения = Неопределено Тогда
		Вложения = Новый Соответствие;
		ИзмененияПоДокументу.Вставить("Вложения", Вложения);
	КонецЕсли;
	
	Если СобытияСОнлайна = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Событие Из СобытияСОнлайна Цикл
		
		Если Событие["Вложение"] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьВложения(Вложения, Событие["Вложение"]);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВложения(Вложения, ВложенияСОнлайна)
	
	Если ВложенияСОнлайна = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Вложение Из ВложенияСОнлайна Цикл
			
		КодТитула = Вложение["Подтип"];
		
		СтруктураВложения = Вложения[КодТитула];
		Если СтруктураВложения = Неопределено Тогда
			СтруктураВложения = Новый Структура;
			СтруктураВложения.Вставить("ДатаВремя",     Дата(1, 1, 1));
			СтруктураВложения.Вставить("Идентификатор", "");
			Вложения.Вставить(КодТитула, СтруктураВложения)
		КонецЕсли;
		
		ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Редакция.ДатаВремя");
		ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаВремя);
		
		Если СтруктураВложения.ДатаВремя < ДатаВремя Тогда
			СтруктураВложения.ДатаВремя     = ДатаВремя;
			СтруктураВложения.Идентификатор = Вложение["Идентификатор"];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьИзмененияДокументов(СписокИзменений, Результат, СтруктураПараметров)
	
	ОбщиеПараметрыЗагрузки = Saby_ТНОбщегоНазначенияСервер.ОбщиеПараметрыВыгрузкиЗагрузки(
		СтруктураПараметров.context_params);
	
	Для Каждого Изменение Из СписокИзменений Цикл 
				
		ПараметрыЗагрузки = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыЗагрузки();
		ПараметрыЗагрузки.ИДСбис          = Изменение.Ключ;
		ПараметрыЗагрузки.ДанныеДокумента = Изменение.Значение;
		ПараметрыЗагрузки.ИмяМетаданных   = СтруктураПараметров.ДопПараметры.ИмяМетаданных;
		
		ЗагрузитьДокумент(ПараметрыЗагрузки, ОбщиеПараметрыЗагрузки, Результат);
		
	КонецЦикла;
	
	Справочники.Saby_ОпасныеГрузы.ДозаполнитьНовыеЭлементыДаннымиСОнлайна();
	Справочники.Saby_ВидыУпаковки.ДозаполнитьНовыеЭлементыДаннымиСОнлайна();
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаИзменений

#Область ПечатнаяФормаИзСБИС

// Загружает печатную форму из СБИС.
//
// Параметры:
//  ПараметрыЗагрузки - Структура - параметры загрузки
//  URLФайлаВСбис - Строка - адрес печатной формы pdf
//  ВзятьИзБазыЕслиЕсть - Булево - признак получения печатной формы из базы.
//
// Возвращаемое значение:
//   СправочникСсылка.Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы - присоединенный файл печатной формы.
//
Функция ЗагрузитьПечатнуюФормуДокументаИзСбис(ПараметрыЗагрузки, URLФайлаВСбис = Неопределено,
		ВзятьИзБазыЕслиЕсть = Ложь) Экспорт
	
	СтруктураПрисоединенногоФайла = СтруктураПрисоединенногоФайла(ПараметрыЗагрузки);
	
	Если ВзятьИзБазыЕслиЕсть И ЗначениеЗаполнено(СтруктураПрисоединенногоФайла.СсылкаНаПрисоединенныйФайл) Тогда
		Возврат СтруктураПрисоединенногоФайла.СсылкаНаПрисоединенныйФайл;
	КонецЕсли;
	
	ВременноеХранилище = АдресДвоичныхДанныхФайла(ПараметрыЗагрузки, URLФайлаВСбис);
	
	Если Не ЗначениеЗаполнено(ВременноеХранилище) Тогда
		Возврат Справочники.Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы.ПустаяСсылка();
	КонецЕсли;
	
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	ПараметрыФайла.Автор              = Пользователи.АвторизованныйПользователь();
	ПараметрыФайла.ВладелецФайлов     = ПараметрыЗагрузки.СсылкаНаДокумент;
	ПараметрыФайла.ИмяБезРасширения   = СтруктураПрисоединенногоФайла.ИмяБезРасширения;
	ПараметрыФайла.РасширениеБезТочки = СтруктураПрисоединенногоФайла.РасширениеБезТочки;
	
	Возврат РаботаСФайлами.ДобавитьФайл(
		ПараметрыФайла,
		ВременноеХранилище, , ,
		СтруктураПрисоединенногоФайла.СсылкаНаПрисоединенныйФайл);
	
КонецФункции

// Возвращает параметры для загрузки печатной формы из СБИС.
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на документ
//  context_params - Структура - параметры для отправки запросов на онлайн.
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор формы,
//    в хранилище которой сохраняется печатная форма.
//
// Возвращаемое значение:
//   Структура - структура параметров.
//
Функция ПараметрыЗагрузкиПечатнойФормыИзСбис(Знач СсылкаНаДокумент = Неопределено,
		context_params = Неопределено, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("СсылкаНаДокумент",             СсылкаНаДокумент);
	РезультатФункции.Вставить("УИДСбис",                      "");
	РезультатФункции.Вставить("Номер",                        "");
	РезультатФункции.Вставить("Дата",                         Дата(1, 1, 1, 0, 0, 0));
	РезультатФункции.Вставить("ОбъектОбработки",              Обработки.SABY.Создать());
	РезультатФункции.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	РезультатФункции.Вставить("СписокДокументов",             Неопределено);
	
	Если context_params = Неопределено Тогда
		РезультатФункции.Вставить("context_params", Saby_Core.ПроверитьНаличиеПараметровПодключения());
	Иначе
		РезультатФункции.Вставить("context_params", context_params);
	КонецЕсли;
	
	Если СсылкаНаДокумент <> Неопределено Тогда
		ЗаполнитьПараметрыЗагрузкиПечатнойФормыПоСсылке(РезультатФункции);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьПараметрыЗагрузкиПечатнойФормыПоСсылке(Параметры, ПовторноеПолучение = Ложь)
	
	ИмяМетаданных = Saby_ТНОбщегоНазначенияСервер.ИмяМетаданныхДокумента(Параметры.СсылкаНаДокумент);
	ТипДокумента  = "Документ." + ИмяМетаданных;
		
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент", Параметры.СсылкаНаДокумент);
	
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Saby_Состояние.UID, """") КАК UID,
	|	Saby_Документ.Номер КАК Номер,
	|	Saby_Документ.Дата КАК Дата
	|ИЗ
	|	ТипДокументаSaby КАК Saby_Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Saby_Состояние КАК Saby_Состояние
	|		ПО (Saby_Состояние.Объект = Saby_Документ.Ссылка)
	|ГДЕ
	|	Saby_Документ.Ссылка = &СсылкаНаДокумент";
			
	ЗапросДанных.Текст = СтрЗаменить(ЗапросДанных.Текст, "ТипДокументаSaby", ТипДокумента);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		
		Параметры.УИДСбис = ВыборкаДанных.UID;
		Параметры.Номер   = ВыборкаДанных.Номер;
		Параметры.Дата    = ВыборкаДанных.Дата;
		
	КонецЕсли;
	
	Если Не ПовторноеПолучение И Параметры.УИДСбис = "" Тогда
		
		ДанныеДляВыгрузки = Новый Массив;
		ПараметрыВыгрузки = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки(Параметры.СсылкаНаДокумент);
		ДанныеДляВыгрузки.Добавить(ПараметрыВыгрузки);
		
		ДополнительныеПараметры = Новый Структура;
		
		РезультатЗаписи = Saby_ТНВыгрузкаСервер.РезультатВыгрузкиДокументов(
			ДанныеДляВыгрузки, Параметры.context_params, ДополнительныеПараметры);
		
		Если РезультатЗаписи.Итог.Успех Тогда
			ЗаполнитьПараметрыЗагрузкиПечатнойФормыПоСсылке(Параметры, Истина);
		Иначе
			Параметры.СписокДокументов = РезультатЗаписи.Ошибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СсылкаНаПечатнуюФорму(ПараметрыЗагрузки)
	
	РезультатФункции = Неопределено;
	
	Если Не ЗначениеЗаполнено(ПараметрыЗагрузки.УИДСбис) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Идентификатор", ПараметрыЗагрузки.УИДСбис);
	Параметры.Вставить("ДопПоля",       "");
	
	Попытка		
		
		Результат = ПараметрыЗагрузки.ОбъектОбработки.local_helper_read_document(
			ПараметрыЗагрузки.context_params,
			Параметры);

		РезультатФункции = Результат["СсылкаНаPDF"];
		
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		
		Saby_ТНОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации(
			ПараметрыЗагрузки.СсылкаНаДокумент,
			"Не удалось получить печатную форму",
			ИнфоОшибки.Описание);
		
	КонецПопытки;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СтруктураПрисоединенногоФайла(ПараметрыЗагрузки)
	
	ШаблонИмениФайла = "ЭТрН №%1 от №%2 (%3)";
	
	ИмяБезРасширения = СтрШаблон(
		ШаблонИмениФайла,
		ПараметрыЗагрузки.Номер,
		Формат(ПараметрыЗагрузки.Дата, "ДФ=dd.MM.yyyy"),
		ПараметрыЗагрузки.УИДСбис);
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ИмяБезРасширения",           ИмяБезРасширения);
	РезультатФункции.Вставить("РасширениеБезТочки",         "pdf");
	РезультатФункции.Вставить("СсылкаНаПрисоединенныйФайл", Неопределено);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы КАК Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы
	|ГДЕ
	|	НЕ Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы.ПометкаУдаления
	|	И Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы.Наименование ПОДОБНО ""%&Наименование%""";
	
	ЗапросДанных.Текст = СтрЗаменить(ЗапросДанных.Текст, "&Наименование", ПараметрыЗагрузки.УИДСбис);
	ЗапросДанных.УстановитьПараметр("ВладелецФайла", ПараметрыЗагрузки.СсылкаНаДокумент);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		НайденнаяСсылка = ВыборкаДанных.Ссылка;
	Иначе
		НайденнаяСсылка = Справочники.Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы.ПустаяСсылка();
	КонецЕсли;
	
	Если Не НайденнаяСсылка.Пустая() Тогда
		РезультатФункции.СсылкаНаПрисоединенныйФайл = НайденнаяСсылка;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ПечатнаяФормаИзСБИС

#Область ЗагрузкаТС

Функция СтруктураТранспортногоСредства(СтруктураТССОнлайна, ЭтоПрицеп = Ложь)
	
	РезультатФункции = Saby_ТНОбщегоНазначенияСервер.СтруктураДанныхТранспортногоСредства();
	
	Если ЭтоПрицеп Тогда
		РезультатФункции.Вид = Перечисления.Saby_ВидыТС.Прицеп;
	Иначе
		РезультатФункции.Вид = Перечисления.Saby_ВидыТС.Автомобиль;
	КонецЕсли;
	
	Грузоподъемность = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(СтруктураТССОнлайна["Грузоподъемность"]);
	Вместимость      = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(СтруктураТССОнлайна["Вместимость"]);
	ТипВладения      = Перечисления.Saby_ТипыВладенияТС.ЗначениеПоКоду(СтруктураТССОнлайна["ТипВладения"]);
	
	РезультатФункции.РегистрационныйНомер = РегНомерБезЛишнихСимволов(СтруктураТССОнлайна["РегНомер"]);
	РезультатФункции.ИнвентарныйНомер     = ЗначениеЕслиЗаполнено(СтруктураТССОнлайна["ИнвентарныйНомер"], "");
	РезультатФункции.Тип                  = СтруктураТССОнлайна["Тип"];
	РезультатФункции.Марка                = СтруктураТССОнлайна["Марка"];
	РезультатФункции.Модель               = ЗначениеЕслиЗаполнено(СтруктураТССОнлайна["Модель"], "");
	РезультатФункции.ВИН                  = СтруктураТССОнлайна["VIN"];
	РезультатФункции.НомерСТС             = СтруктураТССОнлайна["НомерСТС"];
	РезультатФункции.Грузоподъемность     = Грузоподъемность;
	РезультатФункции.Вместимость          = Вместимость;
	РезультатФункции.ТипВладения          = ТипВладения;
	
	МассивОснованийВладения = Новый Массив;
	
	ТЗ = ТаблицаДокументовТрН();
	НомерСтроки = 0;
	
	ОснованиеВладения = СтруктураТССОнлайна["ОснованиеВладения"];
	Если ЗначениеЗаполнено(ОснованиеВладения) Тогда  
		
		Для Каждого ДокументВладения Из ОснованиеВладения Цикл
			
			НС = ТЗ.Добавить();
			Тип = Перечисления.Saby_ТипыДокумента.ПодтверждениеВладения;
			ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, ДокументВладения, Тип, НомерСтроки);
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		СоответствиеДокументов = НайтиСоздатьДокументТрН(ТЗ);
		
		Для Каждого СтрокаДок Из ТЗ Цикл 
			
			МассивОснованийВладения.Добавить(СоответствиеДокументов.Получить(СтрокаДок.НомерСтроки));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивОснованийВладения.Количество() > 0 Тогда
		РезультатФункции.ОснованияВладения = ЗначениеВСтрокуВнутр(МассивОснованийВладения);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ЗначениеЕслиЗаполнено(Значение, ЗначениеПоУмолчанию)
	
	Если Значение = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ДанныеСпецРазрешений(СпецУсловияСОнлайна)
	
	РезультатФункции = Новый Массив;
	
	Если Не ЗначениеЗаполнено(СпецУсловияСОнлайна) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Для Каждого Условие Из СпецУсловияСОнлайна Цикл   
	
		СпецРазрешение = Условие["СпецРазрешение"];	
		Если ЗначениеЗаполнено(СпецРазрешение) Тогда
			
			СтруктураСпецРазрешения = Новый Структура;
			СтруктураСпецРазрешения.Вставить("Номер", СпецРазрешение["Номер"]);
			СтруктураСпецРазрешения.Вставить("Срок",  СпецРазрешение["Срок"]);
			СтруктураСпецРазрешения.Вставить(
				"Дата",
				Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(СпецРазрешение["Дата"]));
			
			РезультатФункции.Добавить(СтруктураСпецРазрешения);
			
		КонецЕсли;
		
		// - Маршрут не обрабатывается
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ОчиститьТранспортныеСредства(ОбъектДок, Вид, ОчищенныеВидыТС)
	
	Если ОчищенныеВидыТС.Получить(Вид) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбъектДок.ТранспортныеСредства.Количество() = 0 Тогда
		ОчищенныеВидыТС.Вставить(Вид, Истина);
		Возврат;
	КонецЕсли;
	
	ИндексСтрокиТС = 0;
	Пока ИндексСтрокиТС < ОбъектДок.ТранспортныеСредства.Количество() Цикл
		
		СтрокаТС = ОбъектДок.ТранспортныеСредства[ИндексСтрокиТС];
		
		Если СтрокаТС.Вид = Вид Тогда
			ОчищенныеВидыТС.Вставить(СтрокаТС.Вид, Истина);
			ОбъектДок.ТранспортныеСредства.Удалить(ИндексСтрокиТС);
		Иначе
			ИндексСтрокиТС = ИндексСтрокиТС + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РегНомерБезЛишнихСимволов(РегНомер)
	
	РегНомер = СтрЗаменить(РегНомер, " ", "");
	РегНомер = СокрЛП(РегНомер);
	РегНомер = ВРег(РегНомер);
	
	Возврат РегНомер;
	
КонецФункции

#КонецОбласти // ЗагрузкаТС

#Область ЗагрузкаВодителей

Функция ДанныеВодителяДляЗагрузки(Водитель)
	
	ДанныеВодителя = Новый Структура;
	ДанныеВодителя.Вставить("Фамилия",    "");
	ДанныеВодителя.Вставить("Имя",        "");
	ДанныеВодителя.Вставить("Отчество",   "");
	ДанныеВодителя.Вставить("ИНН",        "");
	ДанныеВодителя.Вставить("Серия",      "");
	ДанныеВодителя.Вставить("Номер",      "");
	ДанныеВодителя.Вставить("ДатаВыдачи", "");
	ДанныеВодителя.Вставить("Телефон",    Новый Массив);	
	ДанныеВодителя.Вставить("Телефоны",   "");
	
	Параметры = Saby_ТНОбщегоНазначенияСервер.ПараметрыСвойстваСКонтролем(ДанныеВодителя, Водитель);	
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Фамилия");
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Имя");
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Отчество");
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "ИНН");
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Телефон");
	
	ВУ = Водитель["ВУ"];
	Если ЗначениеЗаполнено(ВУ) Тогда 
		Параметры.Источник = ВУ;
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Серия");
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Номер");
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "ДатаВыдачи");
		Если ЗначениеЗаполнено(ДанныеВодителя.ДатаВыдачи) Тогда 
			ДанныеВодителя.ДатаВыдачи = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДанныеВодителя.ДатаВыдачи);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Водитель["ФИО"]) Тогда
		
		Наименование = Водитель["ФИО"]; 
		ЗаполнитьФИО = ЗначениеЗаполнено(Наименование) 
			И Не ЗначениеЗаполнено(ДанныеВодителя.Фамилия);
		
		Если ЗаполнитьФИО Тогда
			ФИО = Saby_ТНОбщегоНазначенияСервер.ФИОИзСтроки(Наименование);
			ЗаполнитьЗначенияСвойств(ДанныеВодителя, ФИО);
		КонецЕсли;
				
	Иначе
		
		Массив = Новый Массив;
		Массив.Добавить(ДанныеВодителя.Фамилия);
		Массив.Добавить(ДанныеВодителя.Имя);
		Массив.Добавить(ДанныеВодителя.Отчество);
		
		Наименование = СокрЛП(СтрСоединить(Массив, " "));
		
	КонецЕсли;
	
	ДанныеВодителя.Вставить("Наименование", Наименование);
	Если ЗначениеЗаполнено(ДанныеВодителя.Телефон) Тогда
		
		МассивТелефонов = Новый Массив;
		Для Каждого Телефон Из ДанныеВодителя.Телефон Цикл  
			МассивТелефонов.Добавить(Телефон["Значение"]);
		КонецЦикла;
		
		ДанныеВодителя.Телефоны = ЗначениеВСтрокуВнутр(МассивТелефонов);
		
	КонецЕсли;
		
	Возврат ДанныеВодителя;
	
КонецФункции

#КонецОбласти // ЗагрузкаВодителей

#Область ДокументыТрН

Функция ОписаниеТипаСтрока(Длина, ДопустимаяДлинаСтроки = Неопределено)
	
	Если ДопустимаяДлинаСтроки = Неопределено Тогда
		ДопустимаяДлинаСтроки = ДопустимаяДлина.Переменная;
	КонецЕсли;
	
	КвалификаторСтроки = Новый КвалификаторыСтроки(Длина, ДопустимаяДлинаСтроки);
	
	Возврат Новый ОписаниеТипов("Строка", , КвалификаторСтроки);
	
КонецФункции

Функция НайтиДокументыТрН(ТЗ)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ", ТЗ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.Номер КАК Номер,
	|	ТЗ.Дата КАК Дата,
	|	ТЗ.ТипДок КАК ТипДок,
	|	ТЗ.НомерСтроки КАК НомерСтроки,
	|	ТЗ.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номер,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Номер КАК Номер,
	|	ВТ.Дата КАК Дата,
	|	ВТ.ТипДок КАК Тип,
	|	ВТ.Наименование КАК Наименование,
	|	ВТ.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(ЕСТЬNULL(Saby_ДокументыТрН.Ссылка, НЕОПРЕДЕЛЕНО)) КАК Ссылка
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Saby_ДокументыТрН КАК Saby_ДокументыТрН
	|		ПО ВТ.Номер = Saby_ДокументыТрН.Номер
	|			И ВТ.Дата = Saby_ДокументыТрН.Дата
	|			И ВТ.ТипДок = Saby_ДокументыТрН.Тип
	|			И ВТ.Наименование = Saby_ДокументыТрН.Наименование
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Номер,
	|	ВТ.Дата,
	|	ВТ.ТипДок,
	|	ВТ.Наименование,
	|	ВТ.НомерСтроки";	

	Выборка = Запрос.Выполнить().Выбрать();
	
	Соответствие = Новый Соответствие;
	Пока Выборка.Следующий() Цикл 				
		Соответствие.Вставить(Выборка.НомерСтроки, Выборка.Ссылка);		
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

Функция НовыйДокументТрН(Данные)
	
	УстановитьПривилегированныйРежим(Истина);
		
	ОбъектДокТрН = Справочники.Saby_ДокументыТрН.СоздатьЭлемент();	
	ЗаполнитьЗначенияСвойств(ОбъектДокТрН, Данные);
		
	Стороны = ЗначениеИзСтрокиВнутр(Данные.Стороны);
	
	Если ЗначениеЗаполнено(Стороны) Тогда 
		Для Каждого Сторона Из Стороны Цикл
			НС = ОбъектДокТрН.Стороны.Добавить();
			НС.Сторона = ПолучитьЮрЛицо(Сторона, Истина);		
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокТрН.Наименование) Тогда 
		ОбъектДокТрН.Наименование = "№" + Данные.Номер + " от " + Данные.Дата;
	КонецЕсли;	
			
	ОбъектДокТрН.Тип = Данные.ТипДок;
	
	ОбъектДокТрН.Записать();
	
	Возврат ОбъектДокТрН.Ссылка;
	
КонецФункции

#КонецОбласти // ДокументыТрН

#Область ДанныеЮрЛиц

Функция ОсновныеДанныеЛица(ДанныеЮрЛица, ЭтоСтронаДокумента)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ЭтоИП",        "");
	РезультатФункции.Вставить("ЭтоЮЛ",        "");
	РезультатФункции.Вставить("ЭтоИнЛицо",    "");
	РезультатФункции.Вставить("ЭтоФЛ",        "");
	РезультатФункции.Вставить("ИНН",          "");
	РезультатФункции.Вставить("КПП",          "");
	РезультатФункции.Вставить("Наименование", "");
	РезультатФункции.Вставить("КодФилиала",   "");
	
	Если ДанныеЮрЛица = Неопределено Тогда 
		Возврат РезультатФункции;
	КонецЕсли;
		
	Если ЭтоСтронаДокумента Тогда
		Реквизиты = ДанныеЮрЛица;
	Иначе		
		Реквизиты = ДанныеЮрЛица["Реквизиты"];
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Реквизиты) Тогда		
		Возврат РезультатФункции;    				
	КонецЕсли;
	
	РезультатФункции.ЭтоИП     = ЗначениеЗаполнено(Реквизиты["ИП"]);
	РезультатФункции.ЭтоЮЛ     = ЗначениеЗаполнено(Реквизиты["ЮЛ"]);
	РезультатФункции.ЭтоИнЛицо = ЗначениеЗаполнено(Реквизиты["ИностранноеЛицо"]);
	РезультатФункции.ЭтоФЛ     = ЗначениеЗаполнено(Реквизиты["ФЛ"]);
	
	Если РезультатФункции.ЭтоЮЛ Тогда
		
		РезультатФункции.ИНН = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ЮЛ.ИНН");
		Если Не ЭтоСтронаДокумента Тогда 
			РезультатФункции.КПП = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ЮЛ.КПП");
		КонецЕсли;
		
		РезультатФункции.КодФилиала = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ЮЛ.КодФилиала");
		РезультатФункции.Наименование = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ЮЛ.Название");
		Если ТипЗнч(РезультатФункции.Наименование) = Тип("Соответствие") Тогда
			РезультатФункции.Наименование = РезультатФункции.Наименование["Полное"];
		КонецЕсли;
		
	ИначеЕсли РезультатФункции.ЭтоИП Тогда
		РезультатФункции.ИНН = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ИП.ИНН");
		РезультатФункции.КодФилиала = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ИП.КодФилиала");
	ИначеЕсли РезультатФункции.ЭтоИнЛицо Тогда 
		// ИНН нет
		// ищем по наименованию
		РезультатФункции.Наименование = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Реквизиты, "ИностранноеЛицо.Наименование");
	ИначеЕсли ЗначениеЗаполнено(Реквизиты["ИНН"]) Тогда
		РезультатФункции.ИНН = Реквизиты["ИНН"];
		РезультатФункции.КодФилиала = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "КодФилиала");
	Иначе 
		// Физ лицо... но нельзя указать в поле...
		// ДанныеЮрЛица.Реквизиты.Свойство("ФЛ")
		РезультатФункции.ИНН = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ФЛ.ИНН");
		РезультатФункции.КодФилиала = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Реквизиты, "ФЛ.КодФилиала");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатФункции.КодФилиала) Тогда
		РезультатФункции.КодФилиала = "";
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция НовыйКонтрагент(ДанныеЮрЛица)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоИП = ДанныеЮрЛица["ЭтоИП"];
	ЭтоЮЛ = ДанныеЮрЛица["ЭтоЮЛ"];
	ЭтоФЛ = ДанныеЮрЛица["ЭтоФЛ"];
		
	// создаем контрагента...
	// по основным участникам документа
	НовоеЮрЛицо = Справочники.Контрагенты.СоздатьЭлемент();
	
    ЕстьРеквизитПартнер = ОбщегоНазначения.ЕстьРеквизитОбъекта("Партнер", НовоеЮрЛицо.Метаданные());
	Если ЕстьРеквизитПартнер Тогда
		НовоеЮрЛицо.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.НеизвестныйПартнер");
	КонецЕсли;
	
	// пока не работаем с иностранными лицами
	НовоеЮрЛицо.СтранаРегистрации  = Справочники.СтраныМира.Россия;
	
	НовоеЮрЛицо.ИНН = ДанныеЮрЛица["ИНН"];
	НовоеЮрЛицо.КПП = ДанныеЮрЛица["КПП"];
	
	ДанныеРеквизитов = ДанныеЮрЛица["Реквизиты"];
	
	ЗаполнитьДополнительнуюИнформациюКонтрагента(НовоеЮрЛицо, ДанныеРеквизитов);	
	
	 // в БП3 реквизит называется иначе	 
	Если Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("ЮрФизЛицо", НовоеЮрЛицо) Тогда
		ИмяРеквизитаЮрФизЛицо = "ЮрФизЛицо";
	Иначе 
	    ИмяРеквизитаЮрФизЛицо = "ЮридическоеФизическоеЛицо";	
	КонецЕсли;
	
	НовоеЮрЛицо[ИмяРеквизитаЮрФизЛицо] = ЗначениеЮрФизЛицо(ДанныеЮрЛица);
	
	Если ЭтоЮЛ Тогда 
		
		РеквизитыЮЛ = ДанныеРеквизитов["ЮЛ"];
		
		НазваниеПолное = РеквизитыЮЛ["Название"];
		Если ТипЗнч(НазваниеПолное) <> Тип("Строка") Тогда
			НазваниеПолное = НазваниеПолное["Полное"];
		КонецЕсли;
		
		НовоеЮрЛицо.Наименование       = НазваниеПолное;
		НовоеЮрЛицо.НаименованиеПолное = НовоеЮрЛицо.Наименование;		 		
				
	ИначеЕсли ЭтоИП Тогда 
		
		РеквизитыИП = ДанныеРеквизитов["ИП"];
		
		МассивНазвания = Новый Массив;
		МассивНазвания.Добавить(РеквизитыИП["Фамилия"]);
		МассивНазвания.Добавить(РеквизитыИП["Имя"]);
		МассивНазвания.Добавить(РеквизитыИП["Отчество"]);
		
		Название = СтрСоединить(МассивНазвания, " ");				 
		
		Если Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("РегистрационныйНомер", НовоеЮрЛицо) Тогда
			НовоеЮрЛицо.РегистрационныйНомер = РеквизитыИП["ОГРН"];
		КонецЕсли;
		
		НовоеЮрЛицо.Наименование         = Название;
		НовоеЮрЛицо.НаименованиеПолное   = Название;
		
	ИначеЕсли ЭтоФЛ Тогда
		
		РеквизитыФЛ = ДанныеРеквизитов["ФЛ"];
		
		МассивНазвания = Новый Массив;
		МассивНазвания.Добавить(РеквизитыФЛ["Фамилия"]);
		МассивНазвания.Добавить(РеквизитыФЛ["Имя"]);
		МассивНазвания.Добавить(РеквизитыФЛ["Отчество"]);
		
		Название = СтрСоединить(МассивНазвания, " ");				 
		
		НовоеЮрЛицо.ИНН                = РеквизитыФЛ["ИНН"];
		НовоеЮрЛицо.Наименование       = Название;
		НовоеЮрЛицо.НаименованиеПолное = Название;				 
		
	Иначе 
		
		// Иностранное лицо				 
		НовоеЮрЛицо.Наименование      = ДанныеЮрЛица.ИностранноеЛицо.Наименование;
		НовоеЮрЛицо.СтранаРегистрации = Справочники.СтраныМира.НайтиПоНаименованию(ДанныеЮрЛица.ИностранноеЛицо.Страна);	
		
	КонецЕсли;
		
	ЗаполнитьАдресЮрЛица(НовоеЮрЛицо, ДанныеЮрЛица["Адрес"]);
	
	ЗаполнитьКонтактыЮрЛица(НовоеЮрЛицо, ДанныеЮрЛица["Контакты"]);
	
	НовоеЮрЛицо.Записать();
	
	Возврат НовоеЮрЛицо.Ссылка;
	
КонецФункции

Процедура ЗаполнитьДополнительнуюИнформациюКонтрагента(НовоеЮрЛицо, ДанныеРеквизитов)
	
	Информация = ДанныеРеквизитов["Информация"];
	Если Не ЗначениеЗаполнено(Информация) Тогда
		Возврат;
	КонецЕсли;
	
	Если Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("ДополнительнаяИнформация", НовоеЮрЛицо) Тогда
		НовоеЮрЛицо.ДополнительнаяИнформация = Информация;
	ИначеЕсли Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("ДополнительноеОписание", НовоеЮрЛицо) Тогда
		НовоеЮрЛицо.ДополнительноеОписание = Информация;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАдресЮрЛица(НовоеЮрЛицо, АдресСОнлайна)
	
	Если Не ЗначениеЗаполнено(АдресСОнлайна) Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаДействуетС = НачалоДня(ТекущаяДатаСеанса());
	ВидыКИ         = Saby_ТНОбщегоНазначенияСервер.ВидыКонтактнойИнформации(НовоеЮрЛицо.Ссылка);
	
	ЮрАдрес = ПреобразоватьСтруктуруАдреса(АдресСОнлайна["Юридический"]);
	Если ЮрАдрес <> Неопределено Тогда 
		
		АдресКИ = НовоеЮрЛицо.КонтактнаяИнформация.Добавить();
		АдресКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Адрес;
		АдресКИ.Вид           = ВидыКИ.АдресЮр;
		АдресКИ.Страна        = Справочники.СтраныМира.Россия; 					
		АдресКИ.ЗначенияПолей = ЮрАдрес.АдресСтруктурой;		
		АдресКИ.Представление = ЮрАдрес.АдресСтрокой;
		
		Если ЕстьРеквизитДействуетС(АдресКИ) Тогда   
			АдресКИ.ДействуетС = ДатаДействуетС;
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКонтактыЮрЛица(НовоеЮрЛицо, КонтактыСОнлайна)
	
	Если Не ЗначениеЗаполнено(КонтактыСОнлайна) Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаДействуетС = НачалоДня(ТекущаяДатаСеанса());
	ВидыКИ         = Saby_ТНОбщегоНазначенияСервер.ВидыКонтактнойИнформации(НовоеЮрЛицо.Ссылка);
	
	// Телефоны
	Телефоны = КонтактыСОнлайна["Телефон"];
	Если ЗначениеЗаполнено(Телефоны) Тогда
		Для Каждого Телефон Из Телефоны Цикл
			
			ДанныеТелефона = Телефон["Значение"];
			
			ТелефонКИ = НовоеЮрЛицо.КонтактнаяИнформация.Добавить();
			ТелефонКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Телефон;
			ТелефонКИ.Вид           = ВидыКИ.Телефон;
			ТелефонКИ.Представление = ДанныеТелефона;
			ТелефонКИ.НомерТелефона = ДанныеТелефона;
			
			Если ЕстьРеквизитДействуетС(ТелефонКИ) Тогда
				ТелефонКИ.ДействуетС = ДатаДействуетС;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Электронная почта
	Почты = КонтактыСОнлайна["ЭлектроннаяПочта"];
	Если ЗначениеЗаполнено(Почты) Тогда
		Для Каждого ЭлПочта Из Почты Цикл
			
			ДанныеЭлПочты = ЭлПочта["Значение"];
			
			ЭлПочтаКИ = НовоеЮрЛицо.КонтактнаяИнформация.Добавить();
			ЭлПочтаКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			ЭлПочтаКИ.Вид           = ВидыКИ.Емейл;
			ЭлПочтаКИ.Представление = ДанныеЭлПочты;
			
			Если ЕстьРеквизитДействуетС(ЭлПочтаКИ) Тогда
				ЭлПочтаКИ.ДействуетС = ДатаДействуетС;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьРеквизитДействуетС(КонтактнаяИнформация)
	
	Возврат Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("ДействуетС", КонтактнаяИнформация);
	
КонецФункции

Функция ПредставлениеАдресаИзСоответствия(Соответствие)
	
	Структура = Новый Структура;
	Для Каждого Элемент Из Соответствие Цикл 
		Структура.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
		
	Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(Структура);
	
	Возврат Представление;
	
КонецФункции

Функция НоваяСторонаДокумента(ДанныеЮрЛица)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сторона = Справочники.Saby_СторонаДокумента.СоздатьЭлемент();
	
	Сторона.ИНН = ДанныеЮрЛица["ИНН"];
		
	Сторона.ЮрФизЛицо = ЗначениеЮрФизЛицо(ДанныеЮрЛица);
	Если ДанныеЮрЛица["ЭтоИнЛицо"] Тогда 
		
		Сторона.Наименование    = ДанныеЮрЛица["ИностранноеЛицо"]["Наименование"];
		Сторона.ЮрФизЛицо       = Перечисления.Saby_ЮрФизЛицо.ЮрЛицоНеРезидент;
		
	Иначе 
		
		ДлинаИННФизЛицо = 12;
		
		Сторона.Наименование = СокрЛП(Сторона.ЮрФизЛицо) + " " + Сторона.ИНН;
		Если СтрДлина(СокрЛП(Сторона.ИНН)) = ДлинаИННФизЛицо Тогда
			Сторона.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ИндивидуальныйПредприниматель;
		Иначе 
			Сторона.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ЮрЛицо;
		КонецЕсли;
		
	КонецЕсли;	
		
	Сторона.Записать();
	
	Возврат Сторона.Ссылка;
	
КонецФункции
	
Функция ЗначениеЮрФизЛицо(ДанныеЮрЛица)
	
	ЕстьЮрФизЛицо = Метаданные.Перечисления.Найти("ЮрФизЛицо") <> Неопределено;
	Если ЕстьЮрФизЛицо Тогда		
		
		Если ДанныеЮрЛица["ЭтоИП"] Тогда 
			ИмяЗначения = "ИндивидуальныйПредприниматель";
		ИначеЕсли ДанныеЮрЛица["ЭтоИнЛицо"] Тогда 
			ИмяЗначения = "ЮрЛицоНеРезидент";
		ИначеЕсли ДанныеЮрЛица["ЭтоФЛ"] Тогда 
			ИмяЗначения = "ФизЛицо";
		Иначе 
			// ЮЛ
			ИмяЗначения = "ЮрЛицо";
		КонецЕсли;
				
	Иначе 
		
		// "Бухгалтерия предприятия, редакция 3.0"
		Если ДанныеЮрЛица["ЭтоИП"] Тогда 
			ИмяЗначения = "ФизическоеЛицо";
		Иначе 
			// ЮЛ
			ИмяЗначения = "ЮридическоеЛицо";
		КонецЕсли;
		
	КонецЕсли;
	
	Значение = Saby_ТНОбщегоНазначенияСервер.ЗначениеЮрФизЛицаКонфигурации(ИмяЗначения);
	
	Возврат Значение;

КонецФункции

Функция СтруктураФИО(Реквизиты)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Фамилия",  Реквизиты["Фамилия"]);
	РезультатФункции.Вставить("Имя",      Реквизиты["Имя"]);
	РезультатФункции.Вставить("Отчество", Реквизиты["Отчество"]);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура УдалитьСвязаннуюСЮрЛицомИнформацию(ДанныеСОнлайна, ДанныеДокумента, Роль)
	
	Если Не ЗначениеЗаполнено(ДанныеСОнлайна) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Роль);
	
	СтрокиДляУдаления = ДанныеДокумента.НайтиСтроки(Отбор);
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		ДанныеДокумента.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураКонтактнойИнформации(Роль, Тип, ДанныеКИ)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Роль",     Роль);
	РезультатФункции.Вставить("Тип",      Тип);
	РезультатФункции.Вставить("Значение", ДанныеКИ["Значение"]);
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ДанныеЮрЛиц

#КонецОбласти // СлужебныеПроцедурыИФункции
