
#Область ПрограммныйИнтерфейс

// Возвращает структуру параметров загрузки для дальнейшего вызова функции ЗагрузкаДанныхДокумента
//
// Возвращаемое значение:
//   Структура - структура параметров с фиксированными колонками:
//     * ИдСбис - Строка - идентификатор СБИС
//     * ДанныеДокумента - Соответствие - полученные данные с онлайна
//     * Ссылка - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на документ в базе,
//       в который будут загружены данные.
//     * ИзДокумента - Булево - признак запуска загрузки из документа. Если ложь, то запуск из списка документов.
//     * ЭтоЗаполнениеСПомощьюINI - Булево - признак загрузки данных из другого документа, а не с онлайна.
//     * ДокументОснование - ДокументСсылка - ссылка на документ, на основании которого загружаются данные.
//     * ТекущийТитул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - тип титула, который необходимо загрузить.
//       Если Неопределено, то загружаются титулы полученные функцией ТитулыДляЗагрузки()
//
Функция ПараметрыЗагрузкиДанныхДокумента() Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ИдСбис",                   "");
	РезультатФункции.Вставить("ДанныеДокумента",          Новый Соответствие);
	РезультатФункции.Вставить("Ссылка",                   Неопределено);
	РезультатФункции.Вставить("ИзДокумента",              Ложь);

	РезультатФункции.Вставить("ЭтоЗаполнениеСПомощьюINI", Ложь);
	РезультатФункции.Вставить("ДокументОснование",        Неопределено);
	
	РезультатФункции.Вставить("ТекущийТитул",             Неопределено);
	РезультатФункции.Вставить("ТолькоАктивныйЭтап",       Ложь);
	
	Возврат РезультатФункции;
	
КонецФункции

// Загружает данные с онлайна в документ Saby_ТранспортнаяНакладная
//
// Параметры:
//  Параметры - Структура - структура полученная функцией ПараметрыЗагрузкиДанныхДокумента()
//
// Возвращаемое значение:
//   ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на загруженный документ.
//     Если данные ни разу не загружались, то будет создан новый документ.
//
Функция ЗагрузкаДанныхДокумента(Параметры) Экспорт
	
	Подстановки = Параметры.ДанныеДокумента["Подстановки"];
	Если Не ЗначениеЗаполнено(Подстановки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектДок = ОбъектЗагружаемогоДокумента(Параметры);
	
	УстановитьДокументОснование(ОбъектДок, Параметры);
	
	ОбъектДок.Направление = НаправлениеДокумента(Параметры.ДанныеДокумента["Направление"], ОбъектДок.Направление);
	
	КодСостояния = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Параметры.ДанныеДокумента, "Состояние.Код");
	КодСостояния = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(КодСостояния);
	Состояние    = Справочники.Saby_СостоянияОбъектов.ПолучитьСтатусДокументаСБИС(КодСостояния);
	
	МассивТитулов = ТитулыДляЗагрузки(ОбъектДок, Параметры);
	
	ДопПараметрыЗагрузкиВложения = ДопПараметрыЗагрузкиВложения(Параметры);
	
	ЗагруженныйТитул = Неопределено;
	ВложенияЗагруженыБезОшибок = Истина;
	Для Каждого Титул Из МассивТитулов Цикл
		
		ПредставленияТитула = Перечисления.Saby_ТипТитулаЭтрН.ПредставленияТитула(Титул);
		
		Попытка
				
			ЗагрузкаВложения(
				Подстановки[ПредставленияТитула.ИмяПодстановки],
				Титул,
				ОбъектДок,
				ДопПараметрыЗагрузкиВложения);
				
			ЗагруженныйТитул = ПредставленияТитула.Представление;
			
		Исключение
			
			ПодробнаяИнформацияОбОшибке = ИнформацияОбОшибке();
			Описание = "Не загружен документ SABY: %1, титул %2";
			Описание = СтрШаблон(Описание, ОбъектДок.НомерСбис, ПредставленияТитула.КодТитула);
			
			ПодробноеОписание = "%1
			|%2[%3]";
			
			ПодробноеОписание = СтрШаблон(
				ПодробноеОписание,
				ПодробнаяИнформацияОбОшибке.Описание,
				ПодробнаяИнформацияОбОшибке.ИмяМодуля,
				Формат(ПодробнаяИнформацияОбОшибке.НомерСтроки, "ЧГ="));
			
			Saby_ТНОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации(
				Параметры.Ссылка,
				Описание,
				ПодробноеОписание);
			
			ВложенияЗагруженыБезОшибок = Ложь;
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ВложенияЗагруженыБезОшибок Тогда
		ОбъектДок.ДатаИзменения = ДатаСобытияПоДокументу(Параметры, ОбъектДок.ДатаИзменения);
		ЗагрузитьДополнительныеДействия(ОбъектДок, Параметры.ДанныеДокумента["ДопДействия"]);
		ЗагруженныйТитул = ПоследнийЗагруженныйТитулДокумента(Параметры);
		Возврат СохранитьДокумент(ОбъектДок, Параметры.ИдСбис, ЗагруженныйТитул, Состояние, Параметры.ИзДокумента);
	ИначеЕсли ЗначениеЗаполнено(ЗагруженныйТитул) Тогда
		Возврат СохранитьДокумент(ОбъектДок, Параметры.ИдСбис, ЗагруженныйТитул, Состояние, Параметры.ИзДокумента);
	Иначе
		Возврат Параметры.Ссылка;
	КонецЕсли;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

// Загружает данные динамического титула в форму динамического титула по переданному идентификатору.
// Запрос данных с онлайна не происходит, так как берутся ранее загруженные данные из регистра Saby_ДанныеТитулов
//
// Параметры:
//  ОбъектФормы - ФормаКлиентскогоПриложения - форма динамического титула
//  СсылкаНаДокумент - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на документ,
//                   которому принадлежит динамический титул.
//  ИдентификаторТитула - Строка - идентификатор динамического титула из СБИС.
//                      Это не идентификатор документа, а идентификатор именно титула.
//
Процедура ЗагрузитьДанныеДинамическогоТитула(ОбъектФормы, СсылкаНаДокумент, ИдентификаторТитула) Экспорт
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Saby_ДанныеТитулов.Данные КАК Данные,
	|	Saby_ДанныеТитулов.ТипТитула КАК Титул
	|ИЗ
	|	РегистрСведений.Saby_ДанныеТитулов КАК Saby_ДанныеТитулов
	|ГДЕ
	|	Saby_ДанныеТитулов.СсылкаНаДокумент = &СсылкаНаДокумент
	|	И Saby_ДанныеТитулов.ИдентификаторТитула = &ИдентификаторТитула";
	
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент",    СсылкаНаДокумент);
	ЗапросДанных.УстановитьПараметр("ИдентификаторТитула", ИдентификаторТитула);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ДляДокумента", ЗначениеИзСтрокиВнутр(ВыборкаДанных.Данные));
		СтруктураДанных.Вставить("Титул",        ВыборкаДанных.Титул);
		
		ДанныеТитула = Новый Массив;
		ДанныеТитула.Добавить(СтруктураДанных);
		
		ДопПараметрыЗагрузкиВложения = ДопПараметрыЗагрузкиВложения();
		ДопПараметрыЗагрузкиВложения.ЗагрузкаСОнлайна = Ложь;
		
		ЗагрузкаВложения(ДанныеТитула, ВыборкаДанных.Титул, ОбъектФормы, ДопПараметрыЗагрузкиВложения);
		
		МассивСсылокНаДокумент = Новый Массив;
		МассивСсылокНаДокумент.Добавить(СсылкаНаДокумент);
		
		МассивТитулов = Новый Массив;
		МассивТитулов.Добавить(ИдентификаторТитула);
		РегистрыСведений.Saby_ДанныеТитулов.Просмотреть(МассивСсылокНаДокумент, МассивТитулов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ОбъектЗагружаемогоДокумента(Параметры)
	
	Если Не ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		Параметры.Ссылка = Saby_ТНОбщегоНазначенияСервер.ДокументПоИдентификаторуСбис(Параметры.ИдСбис);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		РезультатФункции = Параметры.Ссылка.ПолучитьОбъект();
	Иначе
		РезультатФункции = Документы.Saby_ТранспортнаяНакладная.СоздатьДокумент();
		РезультатФункции.НомерСбис   = Параметры.ДанныеДокумента["Номер"];
		РезультатФункции.Комментарий = Параметры.ДанныеДокумента["Название"];
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ТекущиеЗначенияДокумента(ОбъектДок, Параметры)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Титул",     Неопределено);
	РезультатФункции.Вставить("Состояние", Неопределено);
	
	Если Не Параметры.ИзДокумента Тогда
		
		СостояниеВБазе = Saby_ТНОбщегоНазначенияСервер.ТекущийТитулИИДДокумента(ОбъектДок);
		
		Если ЗначениеЗаполнено(СостояниеВБазе.ИД) Тогда
			РезультатФункции.Титул     = СостояниеВБазе.АктивныйЭтап;
			РезультатФункции.Состояние = СостояниеВБазе.Состояние;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.ТекущийТитул <> Неопределено Тогда
		РезультатФункции.Титул = Параметры.ТекущийТитул;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДатаСобытияПоДокументу(Параметры, Знач ДатаПоУмолчанию = Неопределено)
	
	Если ДатаПоУмолчанию = Неопределено Тогда
		ДатаПоУмолчанию = Дата(1, 1, 1);
	КонецЕсли;
	
	Если Параметры.ИзДокумента Тогда
		Возврат ДатаПоУмолчанию;
	КонецЕсли;
	
	События = Параметры.ДанныеДокумента["Событие"];
	Если Не ЗначениеЗаполнено(События) Тогда
		Возврат ДатаПоУмолчанию;
	КонецЕсли;
	
	Возврат Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(События[0]["ДатаВремя"]);
	
КонецФункции

Функция НаправлениеДокумента(НаправлениеСОнлайна, Знач ЗначениеПоУмолчанию = Неопределено)
	
	Если ЗначениеПоУмолчанию = Неопределено Тогда
		ЗначениеПоУмолчанию = Перечисления.Saby_Направление.Исходящий;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаправлениеСОнлайна) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Перечисления.Saby_Направление.ЗначениеПоИмени(НаправлениеСОнлайна);
	
КонецФункции

Функция ПоследнийЗагруженныйТитулДокумента(Параметры)
	
	РезультатФункции = "";
	
	ТекущиеЭтапы = Параметры.ДанныеДокумента["ТекущиеЭтапы"];
	
	Если ЗначениеЗаполнено(ТекущиеЭтапы) Тогда
		РезультатФункции = ТекущиеЭтапы[ТекущиеЭтапы.ВГраница()]["Наименование"];
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#Область ЗагрузитьДокументИзJson

Процедура ЗагрузкаВложения(Вложения, Титул, ОбъектДок, ДопПараметры)
	
	Если Не ЗначениеЗаполнено(Вложения) Тогда
		Возврат;
	КонецЕсли;
	
	// Основные титулы
	Если Титул = Перечисления.Saby_ТипТитулаЭтрН.Погрузка Тогда 
		ЗагрузкаТитулПогрузка(ОбъектДок, Вложения, Титул, ДопПараметры); 
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ПолучениеГруза Тогда 
		ЗагрузкаТитулПолучениеГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза Тогда
		ЗагрузкаТитулПриемкаГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ВыдачаГруза Тогда
		ЗагрузкаТитулВыдачаГруза(ОбъектДок, Вложения, Титул, ДопПараметры); 		
		
	// Динамические титулы	
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.Переадресовка Тогда
		ЗагрузкаТитулПереадресовка(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ПереадресовкаУведомление Тогда 	
		ЗагрузкаТитулУведомлениеОПереадресовке(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ЗаменаВодителяТС Тогда 	
		ЗагрузкаТитулЗаменаВодителяТС(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ИзменениеСтоимости Тогда 	
		ЗагрузкаТитулИзменениеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.СогласованиеСтоимости Тогда	
		ЗагрузкаТитулСогласованиеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	// Отрицательное завершение ДО	
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.УведомлениеОУточнении Тогда
		ЗагрузкаТитулУведомленияОУточнении(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	Иначе
		Возврат;
	КонецЕсли;
			
КонецПроцедуры

#Область Титулы

// Титул "1110339"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулПогрузка(ОбъектДок, Вложения, Титул, ДопПараметры)
		
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеПогрузка = ДанныеПогрузка(ОбъектДок, Вложения, Титул, ДопПараметры);
		РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеПогрузка, ОбъектДок);
	КонецЕсли;
	
	Если ДопПараметры.ТолькоАктивныйЭтап Тогда
		Возврат;
	КонецЕсли;
	
	// Тилул одиночный
	СтруктураДок = Вложения[0];
	Если Не ЗначениеЗаполнено(СтруктураДок) Тогда 
		Возврат;
	КонецЕсли;	
	
	// основные данные и участники документа	
	// - Документ
	ЗаполнитьДанныеШапкиДокумента(ОбъектДок, СтруктураДок);
	
	ЗаполнитьУчастникаДокумента("Отправитель", СтруктураДок["Грузоотправитель"], ОбъектДок, ОбъектДок.Отправитель);
	ЗаполнитьУчастникаДокумента("Получатель",  СтруктураДок["Грузополучатель"],  ОбъектДок, ОбъектДок.Получатель);
	ЗаполнитьУчастникаДокумента("Перевозчик",  СтруктураДок["Грузоперевозчик"],  ОбъектДок, ОбъектДок.Перевозчик);
	ЗаполнитьУчастникаДокумента("Заказчик",    СтруктураДок["Заказчик"],         ОбъектДок, ОбъектДок.Заказчик);
	ЗаполнитьУчастникаДокумента("Отгрузчик",   СтруктураДок["Отгрузчик"],        ОбъектДок, ОбъектДок.Отправитель);
	
	ЗаполнитьСоставителя(Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(СтруктураДок, "Файл.Составитель"), ОбъектДок);
	
	// Экспедитор
	ОбъектДок.Отправитель_Экспедитор = ЗначениеЗаполнено(ОбъектДок.Заказчик)
		И ОбъектДок.Отправитель <> ОбъектДок.Заказчик;
	
	ДанныеПунктаПогрузки = ДанныеПунктаПогрузки(СтруктураДок["ПунктПогрузки"]);
	ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеПунктаПогрузки);
	
	ДанныеПунктаВыгрузки = ДанныеПунктаВыгрузки(СтруктураДок["ПунктВыгрузки"]);
	ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеПунктаВыгрузки);
	
	// Условия перевозки
	ЗаполнитьУсловияПеревозки(ОбъектДок, СтруктураДок["УсловияПеревозки"]);
	
	// СопроводительныеДокументы
	// Сопроводительная ведомость, Договор перевозки, Документы к грузу, К Трн, Передачи ценностей 
	ЗаполнитьДанныеДокументовТрН(ОбъектДок, СтруктураДок["СопроводительныеДокументы"]);
	
	// ТранспортноеСредство и прицепы
	// Водители и СпецРазрешения
	СтруктураТС = Новый Структура;
	ДанныеТСПрицеповСпецРазрешений(СтруктураТС, СтруктураДок["ТранспортноеСредство"]);
	ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, СтруктураТС);
	
	ДанныеВодителей = ДанныеВодителей(СтруктураДок["Водители"], ДопПараметры);
	ЗаполнитьДанныеВодителей(ОбъектДок, ДанныеВодителей);
			
	// Погрузка
	ЗаполнитьДанныеПогрузки(ОбъектДок, СтруктураДок["Погрузка"]);
	
	// Груз, опасный груз, контейнеры, гос системы, маркировка 
	ЗаполнитьДанныеПоГрузам(ОбъектДок, СтруктураДок["Груз"]);
	
	// Отметки по всем титулам, акты и штрафы 
	ЗаполнитьДанныеПоОтметкамДокумента(ОбъектДок, СтруктураДок["Отметки"], Титул);
	
КонецПроцедуры

// Титул "1110340"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулПолучениеГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПолучениеГруза = ДанныеПолучениеГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеПолучениеГруза, ОбъектДок);
	
	Если ДопПараметры.ТолькоАктивныйЭтап Тогда
		Возврат;
	КонецЕсли;
	
	// Одиночный титул 
	Данные = Вложения[0];	
	
	Погрузка = Данные["Погрузка"];			
	Если ЗначениеЗаполнено(Погрузка) Тогда 
		
		ИмяПараметраДаты = "Значение";
		
		Замечания = Погрузка["ЗамечанияПеревозчика"];
		
		ДатаПостановки = Замечания["ДатаВремяПостановки"];
		Если ЗначениеЗаполнено(ДатаПостановки) Тогда
			ОбъектДок.Перевозчик_ПриемкаДатаВремя = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(
				ДатаПостановки[ИмяПараметраДаты]);
		КонецЕсли;
		
		ДатаПрибытия = Замечания["ДатаВремяПрибытия"];
		Если ЗначениеЗаполнено(ДатаПрибытия) Тогда
			ОбъектДок.Перевозчик_ПриемкаДатаВремяПрибыл = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(
				ДатаПрибытия[ИмяПараметраДаты]);
		КонецЕсли;
		
		ДатаУбытия = Замечания["ДатаВремяУбытия"];
		Если ЗначениеЗаполнено(ДатаУбытия) Тогда
			ОбъектДок.Перевозчик_ПриемкаДатаВремяУбыл = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(
				ДатаУбытия[ИмяПараметраДаты]);
		КонецЕсли;
		
		Параметры = ПараметрыСвойстваСКонтролем(ОбъектДок, Замечания);
		ЗаполнитьСвойствоСКонтролем(Параметры, "Перевозчик_ЗамечанияПоПогрузочнымРаботам",     "ВыполненныеРаботы");
		ЗаполнитьСвойствоСКонтролем(Параметры, "Перевозчик_ПогрузкаЗамечанияПоКоличеству",     "КоличествоМест");
		ЗаполнитьСвойствоСКонтролем(Параметры, "Перевозчик_ПогрузкаЗамечанияПоМассе",          "МассаГруза");
		ЗаполнитьСвойствоСКонтролем(Параметры, "Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза", "СостояниеГруза");
		
	КонецЕсли;
	
	// Отметки по всем титулам, акты и штрафы 
	ЗаполнитьДанныеПоОтметкамДокумента(ОбъектДок, Данные["Отметки"], Титул);
			
КонецПроцедуры

// Титул "1110341"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулПриемкаГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПриемкаГруза = ДанныеПриемкаГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ДанныеТитула = ДанныеПриемкаГруза[ДанныеПриемкаГруза.ВГраница()];
		
		ДанныеДляДокументаБезПустыхЗначений = СтруктураБезПустыхЗначений(ДанныеТитула.ДляДокумента);
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеДляДокументаБезПустыхЗначений, , "Отметки");
		
		ЗаполнитьДанныеПоОтметкам(ОбъектДок, ДанныеТитула.ДляДокумента.Отметки, ДанныеТитула.Титул);
		
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеПриемкаГруза, ОбъектДок);
			
КонецПроцедуры

// Титул "1110342"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулВыдачаГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеВыдачаГруза = ДанныеВыдачаГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ДанныеТитула = ДанныеВыдачаГруза[ДанныеВыдачаГруза.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента, , "Отметки");
		
		ЗаполнитьДанныеПоОтметкам(ОбъектДок, ДанныеТитула.ДляДокумента.Отметки, ДанныеТитула.Титул);
		
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеВыдачаГруза, ОбъектДок);
	
КонецПроцедуры

// Титул "1110343"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулПереадресовка(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеПереадресовка = ДанныеПереадресовка(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе
		ДанныеПереадресовка = Вложения;
	КонецЕсли;
	ДанныеТитула = ДанныеПереадресовка[ДанныеПереадресовка.ВГраница()];
	
	ДанныеДляДокументаБезПустыхЗначений = СтруктураБезПустыхЗначений(ДанныеТитула.ДляДокумента);
	ЗаполнитьЗначенияСвойств(
		ОбъектДок,
		ДанныеДляДокументаБезПустыхЗначений,
		,
		"Отметки,ДанныеЮрЛиц,КонтактныеДанные");
	
	ЗаполнитьДанныеПоОтметкам(ОбъектДок, ДанныеТитула.ДляДокумента.Отметки, ДанныеТитула.Титул);
	
	ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
		ОбъектДок,
		ДанныеТитула.ДляДокумента,
		Перечисления.Saby_РолиКонтрагентов["Получатель"]);
	
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеПереадресовка, ОбъектДок);
	
КонецПроцедуры

// Титул "1167009"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулУведомлениеОПереадресовке(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеУведомлениеОПереадресовке = ДанныеУведомлениеОПереадресовке(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе 
		ДанныеУведомлениеОПереадресовке = Вложения;
	КонецЕсли;
	
	Если Не ДопПараметры.ЗагрузкаСОнлайна Тогда
		
		ДанныеТитула = ДанныеУведомлениеОПереадресовке[ДанныеУведомлениеОПереадресовке.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента, , "Отметки,ДанныеЮрЛиц,КонтактныеДанные");
		
		ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок,
			ДанныеТитула.ДляДокумента,
			Перечисления.Saby_РолиКонтрагентов["Получатель"]);
		
		// КИ Оформителя
		ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок,
			ДанныеТитула.ДляДокумента,
			Перечисления.Saby_РолиКонтрагентов.ПустаяСсылка());
							
	КонецЕсли;
	
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеУведомлениеОПереадресовке, ОбъектДок);
	
КонецПроцедуры	

// Титул "1110344"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулЗаменаВодителяТС(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеЗаменаВодителяТС = ДанныеЗаменаВодителяТС(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе
		ДанныеЗаменаВодителяТС = Вложения;
	КонецЕсли;
	
	Для Каждого ДанныеТитула Из ДанныеЗаменаВодителяТС Цикл
		
		ДанныеДляДокументаБезПустыхЗначений = СтруктураБезПустыхЗначений(ДанныеТитула.ДляДокумента);
		ЗаполнитьЗначенияСвойств(
			ОбъектДок,
			ДанныеДляДокументаБезПустыхЗначений,
			,
			"Отметки,Водители,ТранспортныеСредства,СпецРазрешения");
		
		ЗаполнитьДанныеПоОтметкам(ОбъектДок, ДанныеТитула.ДляДокумента.Отметки, ДанныеТитула.Титул);
		
		ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		ЗаполнитьДанныеВодителей(ОбъектДок, ДанныеТитула.ДляДокумента.Водители);
	КонецЦикла;
	
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеЗаменаВодителяТС, ОбъектДок); 
	
КонецПроцедуры

// Титул "1110345"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулИзменениеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры)  
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеИзменения = ДанныеИзменениеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе
		
		ДанныеИзменения = Вложения;		
		ДанныеТитула    = ДанныеИзменения[ДанныеИзменения.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
		
	КонецЕсли;
	 
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеИзменения, ОбъектДок);
	
КонецПроцедуры

// Титул "1110346"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулСогласованиеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеСогласования = ДанныеСогласованиеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе
		
		ДанныеСогласования = Вложения;
		ДанныеТитула       = ДанныеСогласования[ДанныеСогласования.ВГраница()]; 
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
		
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеСогласования, ОбъектДок);
	
КонецПроцедуры

// Титул "1115113"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулУведомленияОУточнении(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеУведомлениеОУточнении = ДанныеУведомлениеОУточнении(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе 
		ДанныеУведомлениеОУточнении = Вложения;
	КонецЕсли;
	
	ДанныеТитула = ДанныеУведомлениеОУточнении[ДанныеУведомлениеОУточнении.ВГраница()];
	
	ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
	
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеУведомлениеОУточнении, ОбъектДок);
	
КонецПроцедуры
	
#КонецОбласти // Титулы

#Область ДанныеОсновныхТитулов

Функция ДанныеПогрузка(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(Вложение, ОбъектДок.Ссылка, Титул, Истина);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеПолучениеГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(Вложение, ОбъектДок.Ссылка, Титул, Истина);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеПриемкаГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ДатаПрибытия = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Выгрузка.ДатаВремяПрибытия.Значение");
		Если ЗначениеЗаполнено(ДатаПрибытия) Тогда
			ДляДокумента.Вставить(
				"Выгрузка_ДатаВремяПрибыл",
				Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаПрибытия));
		КонецЕсли;
		
		ДатаУбытия = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Выгрузка.ДатаВремяУбытия.Значение");
		Если ЗначениеЗаполнено(ДатаУбытия) Тогда 
			ДляДокумента.Вставить(
				"Выгрузка_ДатаВремяУбыл",
				Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаУбытия));
		КонецЕсли;
		
		Масса = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Выгрузка.Груз.Масса");
		Если ЗначениеЗаполнено(Масса) Тогда 
			
			ДляДокумента.Вставить("Выгрузка_МассаБрутто", Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(Масса["Брутто"]));
			ДляДокумента.Вставить("Выгрузка_МассаНетто", Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(Масса["Нетто"]));
			
			МетодОпределения = Перечисления.Saby_МетодОпределенияМассы.ЗначениеПоКоду(Масса["МетодОпределения"]);
			ДляДокумента.Вставить("Выгрузка_МассаМетодРасчета", МетодОпределения);

		КонецЕсли;
		
		ГрузВыгрузка = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Выгрузка.Груз");
		Если ЗначениеЗаполнено(ГрузВыгрузка) Тогда
			ДляДокумента.Вставить(
				"Выгрузка_КоличествоМест", Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(ГрузВыгрузка["КоличествоМест"]));
			ДляДокумента.Вставить("Выгрузка_Объем", Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(ГрузВыгрузка["Объем"]));
		КонецЕсли;
		
		Состояние = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Выгрузка.Груз.Состояние.Общее");
		Если ЗначениеЗаполнено(Состояние) Тогда 
			ДляДокумента.Вставить("Выгрузка_Состояние", Состояние);
		КонецЕсли;
				
		ДляДокумента.Вставить("Отметки", ДанныеПоОтметкам(Вложение["Отметки"], Титул));
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(Вложение, ОбъектДок.Ссылка, Титул, Истина);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеВыдачаГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ДатаПостановки = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "Выгрузка.ЗамечанияПеревозчика.ДатаВремяПостановки.Значение");
		Если ЗначениеЗаполнено(ДатаПостановки) Тогда 
			ДляДокумента.Вставить(
				"Перевозчик_ВыгрузкаДатаВремя",
				Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаПостановки));
		КонецЕсли;
		
		ДатаПрибытия = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "Выгрузка.ЗамечанияПеревозчика.ДатаВремяПрибытия.Значение");
		Если ЗначениеЗаполнено(ДатаПрибытия) Тогда 
			ДляДокумента.Вставить(
				"Перевозчик_ВыгрузкаДатаВремяПрибыл",
				Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаПрибытия));
		КонецЕсли;
		
		ДатаУбытия = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "Выгрузка.ЗамечанияПеревозчика.ДатаВремяУбытия.Значение");
		Если ЗначениеЗаполнено(ДатаУбытия) Тогда 
			ДляДокумента.Вставить(
				"Перевозчик_ВыгрузкаДатаВремяУбыл",
				Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаУбытия));
		КонецЕсли;
		
		ВыполненныеРаботы = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "Выгрузка.ЗамечанияПеревозчика.ВыполненныеРаботы");
		Если ВыполненныеРаботы <> Неопределено Тогда
			ДляДокумента.Вставить("Перевозчик_ЗамечанияПоРазгрузочнымРаботам", ВыполненныеРаботы);
		КонецЕсли;
		
		СостояниеГруза = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "Выгрузка.ЗамечанияПеревозчика.СостояниеГруза");
		Если СостояниеГруза <> Неопределено Тогда
			ДляДокумента.Вставить("Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза", СостояниеГруза);
		КонецЕсли;
		
		ДляДокумента.Вставить("Отметки", ДанныеПоОтметкам(Вложение["Отметки"], Титул));
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(Вложение, ОбъектДок.Ссылка, Титул, Истина);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ДанныеОсновныхТитулов

#Область ДанныеДинамическихТитулов

// Титул "1110343"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
// Возвращаемое значение:
//	Структура - данные титула в формате подстановок
//
Функция ДанныеПереадресовка(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения);
	
	РольКонтрагентаПолучатель = Перечисления.Saby_РолиКонтрагентов["Получатель"];
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ДляДокумента = ДанныеПунктаВыгрузки(Вложение["ПунктВыгрузки"], ДляДокумента);

		ДляДокумента.Вставить("Отметки", ДанныеПоОтметкам(Вложение["Отметки"], Титул));
		
		ДанныеГрузополучателя = Вложение["Грузополучатель"];
		
		ДляДокумента.Вставить("Получатель",       ПолучитьЮрЛицо(ДанныеГрузополучателя));
		ДляДокумента.Вставить("ДанныеЮрЛиц",      ДанныеЮрЛиц(ДанныеГрузополучателя, РольКонтрагентаПолучатель));
		ДляДокумента.Вставить(
			"КонтактныеДанные", КонтактнаяИнформация(ДанныеГрузополучателя, РольКонтрагентаПолучатель));
				
		Основание = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Переадресовка.Основание.Документ");
		Если ЗначениеЗаполнено(Основание) Тогда 
			
			Тип = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей;
			ОснованиеСсылка = ЗагрузитьОдиночныйДокументЭТрН(Основание, Тип);				

			ДляДокумента.Вставить("ПереадресовкаНаОсновании", ОснованиеСсылка);
						
		КонецЕсли;
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(Вложение, ОбъектДок.Ссылка, Титул, ДопПараметры.Просмотрено);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Титул "1167009"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
// Возвращаемое значение:
//	Структура - данные титула в формате подстановок
//
Функция ДанныеУведомлениеОПереадресовке(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения);
	
	РольКонтрагентаПолучатель = Перечисления.Saby_РолиКонтрагентов.Получатель;
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ДляДокумента = ДанныеПунктаВыгрузки(Вложение["ПунктВыгрузки"], ДляДокумента);

		ДляДокумента.Вставить("Отметки", ДанныеПоОтметкам(Вложение["Отметки"], Титул));
		
		Грузополучатель = Вложение["Грузополучатель"];
		ДляДокумента.Вставить("Получатель",       ПолучитьЮрЛицо(Грузополучатель));
		ДляДокумента.Вставить("ДанныеЮрЛиц",      ДанныеЮрЛиц(Грузополучатель, РольКонтрагентаПолучатель));
		ДляДокумента.Вставить("КонтактныеДанные", КонтактнаяИнформация(Грузополучатель, РольКонтрагентаПолучатель));
		
		СопроводительныеДокументы = Вложение["СопроводительныеДокументы"];
		Если ЗначениеЗаполнено(СопроводительныеДокументы) Тогда
			
			Основание = СопроводительныеДокументы["Отгрузка"];
			
			Тип = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей;
			ОснованиеСсылка = ЗагрузитьОдиночныйДокументЭТрН(Основание, Тип);				
				
			ДляДокумента.Вставить("ПереадресовкаНаОсновании", ОснованиеСсылка);
			
		КонецЕсли;	
		
		Причина = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Переадресовка.Уведомление.Причина");
		Если ЗначениеЗаполнено(Причина) Тогда
			ДляДокумента.Вставить("Причина", Причина);
		КонецЕсли;
		
		Оформитель = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Переадресовка.Уведомление.Отправитель");
		ЗаполнитьДанныеОформителя(Оформитель, ДляДокумента);
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(Вложение, ОбъектДок.Ссылка, Титул, ДопПараметры.Просмотрено);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Титул "1110344"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
// Возвращаемое значение:
//	Структура - данные титула в формате подстановок
//
Функция ДанныеЗаменаВодителяТС(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ДанныеЗамены = Вложение["ЗаменаВодителяТС"];
		
		ДляДокумента.Вставить(
			"ДатаВремяЗамены",
			Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДанныеЗамены["ДатаВремя"]["Значение"]));
		
		ДанныеТСПрицеповСпецРазрешений(ДляДокумента, Вложение["ТранспортноеСредство"]);
		
		ДляДокумента.Вставить("Водители", ДанныеВодителей(Вложение["Водители"], ДопПараметры));

		ДляДокумента.Вставить("Отметки",  ДанныеПоОтметкам(Вложение["Отметки"], Титул));
		
		ПричинаЗамены = ДанныеЗамены["Основание"]["Текст"];
		Если Не ЗначениеЗаполнено(ПричинаЗамены) Тогда
			ПричинаЗамены = "";
		КонецЕсли;
		ДляДокумента.Вставить("ПричинаЗамены", ПричинаЗамены);
		
		Основание = ДанныеЗамены["Основание"]["Документ"];
		Если ЗначениеЗаполнено(Основание) Тогда 
			Тип = Перечисления.Saby_ТипыДокумента.КТранспортнойНакладной;
			ДокументЗамены = ЗагрузитьОдиночныйДокументЭТрН(Основание, Тип);
			ДляДокумента.Вставить("ДокументЗамены", ДокументЗамены);
		КонецЕсли;
		
		// пока не требуется:
	    // - Водители.Документ
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(Вложение, ОбъектДок.Ссылка, Титул, ДопПараметры.Просмотрено);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Титул "1110345"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
// Возвращаемое значение:
//	Структура - данные титула в формате подстановок
//
Функция ДанныеИзменениеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;		
		ДляДокумента.Вставить("Перевозчик", ОбъектДок.Перевозчик);
		
		ДанныеСчетаСОнлайна = ДанныеСчетаИзРеквизитовОнлайна(Вложение["Грузоперевозчик"], ОбъектДок.Перевозчик);
		Для Каждого КлючЗначение Из ДанныеСчетаСОнлайна Цикл
			ДляДокумента.Вставить(КлючЗначение.Ключ + "Перевозчик", КлючЗначение.Значение);
		КонецЦикла;
				
		Стоимость = Вложение["СтоимостьПеревозки"]; 
		Если ЗначениеЗаполнено(Стоимость) Тогда 
			
			Если ЗначениеЗаполнено(Стоимость["Налог"]) Тогда 	
				СтавкаНДС = Saby_ТНОбщегоНазначенияСервер.ЗначениеСтавкиНДС(Стоимость["Налог"]["Ставка"], Истина);
			Иначе 
				СтавкаНДС = "без НДС";
			КонецЕсли;
		
			ДляДокумента.Вставить("Сумма",       Стоимость["ВключаяНДС"]);
			ДляДокумента.Вставить("Условия",     Стоимость["Расчет"]);
			ДляДокумента.Вставить("СуммаБезНДС", Стоимость["БезНДС"]);			
			ДляДокумента.Вставить("Ставка",      СтавкаНДС);
				
		КонецЕсли;
				
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(Вложение, ОбъектДок.Ссылка, Титул, ДопПараметры.Просмотрено);
		
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
	
    	РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;

КонецФункции

// Титул "1110346"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
// Возвращаемое значение:
//	Структура - данные титула в формате подстановок
//
Функция ДанныеСогласованиеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры)

	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;			
		ДляДокумента.Вставить("Отправитель", ОбъектДок.Отправитель);		
		
		ИнойПлательщик = Вложение["ИнойПлательщик"];
		Если ЗначениеЗаполнено(ИнойПлательщик) Тогда
			
			Плательщик = КонтрагентОрганизацияПоНаименованию(ИнойПлательщик["Название"]["Полное"]);	
			
			Основание = ИнойПлательщик["Основание"]; 			
			Если ЗначениеЗаполнено(Основание) Тогда 
				
				Тип = Перечисления.Saby_ТипыДокумента.ОснованиеОплатыПеревозки;
				ОснованиеСсылка = ЗагрузитьОдиночныйДокументЭТрН(Основание, Тип);				
				
				ДляДокумента.Вставить("ОснованиеОплаты", ОснованиеСсылка);
				
			КонецЕсли;
			
			ДляДокумента.Вставить("ТипПлательщик", "ДругоеЮрЛицо");
			
		Иначе 	
			Плательщик = ОбъектДок.Отправитель;			
		КонецЕсли;
		
		ДляДокумента.Вставить("Плательщик", Плательщик);
		
		ДанныеСчетаСОнлайна = ДанныеСчетаИзРеквизитовОнлайна(Вложение["Грузоотправитель"], ОбъектДок.Отправитель);
		Для Каждого КлючЗначение Из ДанныеСчетаСОнлайна Цикл
			ДляДокумента.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
					
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(Вложение, ОбъектДок.Ссылка, Титул, ДопПараметры.Просмотрено);
		
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);		
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ДанныеДинамическихТитулов

#Область ДанныеОтрицательногоЗавершенияДО

// Титул "1115113"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
// Возвращаемое значение:
//	Структура - данные титула в формате подстановок
//
Функция ДанныеУведомлениеОУточнении(ОбъектДок, Вложения, Титул, ДопПараметры)

	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ОбъектДок.ЗаполнитьПрошлыйТитулДляВложения(Вложение, Титул);
		ПрошлыйТитул = Вложение["ПрошлыйТитул"];
		
		ДляДокумента.Вставить("Представление", ПрошлыйТитул.Представление);
		
		ПричинаОтказа = Вложение["СведенияОбУточнении"];
		Если ЗначениеЗаполнено(ПричинаОтказа) Тогда
			ДляДокумента.Вставить("КомментарийУведомление", "Комментарий: " + ПричинаОтказа["ТекстУведУточ"]);
		КонецЕсли;
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = ДанныеДляРегистраТитулов(
			Вложение,
			ОбъектДок.Ссылка,
			Титул,
			ДопПараметры.Просмотрено,
			ПрошлыйТитул.Тип);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;

КонецФункции // ДанныеУведомлениеОУточнении()

#КонецОбласти // ДанныеОтрицательногоЗавершенияДО

Функция ДанныеДляРегистраТитулов(Вложение, СсылкаНаДокумент, Титул, Просмотрено = Ложь, ТипТитулаОтказа = Неопределено)
		
	Если Вложение["ЗагруженВРегистр"] Тогда
		ДляРегистра = Неопределено;
	Иначе
		ДляРегистра = Новый Структура;
		ДляРегистра.Вставить("СсылкаНаДокумент",    СсылкаНаДокумент);
		ДляРегистра.Вставить("ТипТитула",           Титул);
		ДляРегистра.Вставить("ИдентификаторТитула", Saby_ТНОбщегоНазначенияСервер.ИдентификаторВложения(Вложение, Титул));
		ДляРегистра.Вставить("Период",              Saby_ТНОбщегоНазначенияСервер.ДатаВложения(Вложение, Титул));
		ДляРегистра.Вставить("Просмотрено",         Просмотрено);
		Если ТипТитулаОтказа = Неопределено Тогда
			ДляРегистра.Вставить("ТипТитулаОтказа", Перечисления.Saby_ТипТитулаЭтрН.ПустаяСсылка());
		Иначе
			ДляРегистра.Вставить("ТипТитулаОтказа", ТипТитулаОтказа);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДляРегистра;
	
КонецФункции

Процедура ЗаполнитьДанныеШапкиДокумента(ОбъектДок, ИсходнаяСтруктура)
	
	Документ = ИсходнаяСтруктура["Документ"];
	
	Если ЗначениеЗаполнено(Документ) Тогда 
		
		ДатаДокумента = ИсходнаяСтруктура["Документ"]["Дата"];
		
		Если ЗначениеЗаполнено(ДатаДокумента) Тогда
			
			ОбъектДок.Дата = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаДокумента);
			
			Если ОбъектДок.Дата = НачалоДня(ТекущаяДатаСеанса()) Тогда 
				ОбъектДок.Дата = ТекущаяДатаСеанса();
			КонецЕсли;
			
		Иначе
			ОбъектДок.Дата = ТекущаяДатаСеанса();
		КонецЕсли; 
		
	КонецЕсли;
		
	ЗаявкаНаПеревозку = ИсходнаяСтруктура["ЗаявкаНаПеревозку"];
	Если ЗначениеЗаполнено(ЗаявкаНаПеревозку) Тогда		
		ОбъектДок.Отправитель_ЗаявкаНомер = ЗаявкаНаПеревозку["ПорядковыйНомер"];
		ОбъектДок.Отправитель_ЗаявкаДата  = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(
			ЗаявкаНаПеревозку["Дата"]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПогрузки(ОбъектДок, Погрузка)
	
	Если Не ЗначениеЗаполнено(Погрузка) Тогда 
		Возврат;
	КонецЕсли;
								
	// Дата/время 
	ВремяПрибытия = Погрузка["ДатаВремяПрибытия"];
	ВремяУбытия   = Погрузка["ДатаВремяУбытия"];
	
	Если ЗначениеЗаполнено(ВремяПрибытия) Тогда  
		ОбъектДок.Погрузка_ДатаВремяПрибыл = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(
			ВремяПрибытия["Значение"]);
	Иначе 
		ОбъектДок.Погрузка_ДатаВремяПрибыл = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВремяУбытия) Тогда 
		ОбъектДок.Погрузка_ДатаВремяУбыл = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ВремяУбытия["Значение"]);
	Иначе 	
		ОбъектДок.Погрузка_ДатаВремяУбыл = ""; 
	КонецЕсли;
	
	Масса = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Погрузка, "Груз.Масса");
	Если ЗначениеЗаполнено(Масса) Тогда
		ОбъектДок.Погрузка_Масса = Масса["Брутто"];
		МетодОпределения = Перечисления.Saby_МетодОпределенияМассы.ЗначениеПоКоду(Масса["МетодОпределения"]);
		ОбъектДок.Погрузка_МассаМетодРасчета = МетодОпределения;
	КонецЕсли;
	
	КоличествоМест = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Погрузка, "Груз.КоличествоМест");
	Если ЗначениеЗаполнено(КоличествоМест) Тогда
		ОбъектДок.Погрузка_КоличествоМест = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(КоличествоМест);
	КонецЕсли;
	
	// Состояние
	Массив = Новый Массив;
	Тара = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Погрузка, "Груз.Состояние.Тары");
	Если ЗначениеЗаполнено(Тара) Тогда 
		Массив.Добавить(Тара);    
	КонецЕсли;
	Кузов = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Погрузка, "Груз.Состояние.Кузова"); 
	Если ЗначениеЗаполнено(Кузов) Тогда		
		Массив.Добавить(Кузов);
	КонецЕсли;
	Упаковка = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Погрузка, "Груз.Состояние.Упаковки");
	Если ЗначениеЗаполнено(Упаковка) Тогда 
		Массив.Добавить(Упаковка);
	КонецЕсли;
	ОбъектДок.Погрузка_Состояние = СокрЛП(СтрСоединить(Массив, " "));
	
	ЗаполнитьДанныеКтоПогружает(ОбъектДок, Погрузка["КтоПогружает"]);
	
	ЗаполнитьДанныеВладельца(ОбъектДок, Погрузка["ВладелецПункта"]);
			
КонецПроцедуры

#Область ЗагрузкаДанныхЮрЛиц

Процедура ЗаполнитьУчастникаДокумента(ИмяРеквизита, Данные, ОбъектДок, ЗначениеПоУмолчанию = Неопределено)
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
		ОбъектДок[ИмяРеквизита] = ЗначениеПоУмолчанию;
		Возврат;
	КонецЕсли;
		
	РольКонтрагента = Перечисления.Saby_РолиКонтрагентов[ИмяРеквизита]; 
	
	ОбъектДок[ИмяРеквизита] = ПолучитьЮрЛицо(Данные);	
	
	Если ИмяРеквизита = "Заказчик" И ОбъектДок.Отправитель = ОбъектДок.Заказчик Тогда
		ОбъектДок.Заказчик = "";
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ДанныеЮрЛиц",      ДанныеЮрЛиц(Данные, РольКонтрагента));
	СтруктураДанных.Вставить("КонтактныеДанные", КонтактнаяИнформация(Данные, РольКонтрагента));
	
	ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
	    ОбъектДок,
		СтруктураДанных,
		РольКонтрагента);
		
КонецПроцедуры

Функция ПолучитьЮрЛицо(ДанныеЮрЛица, ЭтоСтронаДокумента = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоСтронаДокумента Тогда
		ЮрЛицо = Справочники.Saby_СторонаДокумента.ПустаяСсылка();
	Иначе	
		ЮрЛицо = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	СтруктураЛица = ОсновныеДанныеЛица(ДанныеЮрЛица, ЭтоСтронаДокумента);
		
	Если Не ЗначениеЗаполнено(СтруктураЛица.ИНН) Тогда		
		Возврат ЮрЛицо;		
	КонецЕсли;
	
	// Дополним исходную структуру данных новыми значениями			
	ДанныеЮрЛица.Вставить("ИНН",       СтруктураЛица.ИНН);
	ДанныеЮрЛица.Вставить("КПП",       СтруктураЛица.КПП);
	ДанныеЮрЛица.Вставить("ЭтоИП",     СтруктураЛица.ЭтоИП);
	ДанныеЮрЛица.Вставить("ЭтоЮЛ",     СтруктураЛица.ЭтоЮЛ);
	ДанныеЮрЛица.Вставить("ЭтоИнЛицо", СтруктураЛица.ЭтоИнЛицо);
	ДанныеЮрЛица.Вставить("ЭтоФЛ",     СтруктураЛица.ЭтоФЛ);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН",          СтруктураЛица.ИНН);
	Запрос.УстановитьПараметр("КПП",          СтруктураЛица.КПП);
	Запрос.УстановитьПараметр("Наименование", СтруктураЛица.Наименование);
	Запрос.УстановитьПараметр("ПоискСтороны", ЭтоСтронаДокумента);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	1 КАК Порядок
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН
	|	И ВЫБОР
	|			КОГДА &КПП = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Организации.КПП = &КПП
	|		КОНЕЦ
    |
	|ОБЪЕДИНИТЬ ВСЕ
    |
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	2
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты	
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И ВЫБОР
	|			КОГДА &КПП = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Контрагенты.КПП = &КПП
	|		КОНЕЦ
    |
	|ОБЪЕДИНИТЬ ВСЕ
    |
	|ВЫБРАТЬ
	|	Saby_СторонаДокумента.Ссылка,
	|	3
	|ИЗ
	|	Справочник.Saby_СторонаДокумента КАК Saby_СторонаДокумента
	|ГДЕ
	|	Saby_СторонаДокумента.ИНН = &ИНН
	|   И &ПоискСтороны = ИСТИНА 
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_Данные.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
    |
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Данные.Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		// нашли юр.лицо. Организация, Контрагент
		ЮрЛицо = Выборка.Ссылка; 		
	Иначе
		
		Если ЭтоСтронаДокумента Тогда        
			ЮрЛицо = НоваяСторонаДокумента(ДанныеЮрЛица); 
		Иначе 	
			ЮрЛицо = НовыйКонтрагент(ДанныеЮрЛица);
		КонецЕсли;
	
	КонецЕсли;	
	
	ДанныеЮрЛица.Вставить("Ссылка", ЮрЛицо);
	
	Возврат ЮрЛицо;
		
КонецФункции

Функция ОсновныеДанныеЛица(ДанныеЮрЛица, ЭтоСтронаДокумента)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ЭтоИП",        "");
	РезультатФункции.Вставить("ЭтоЮЛ",        "");
	РезультатФункции.Вставить("ЭтоИнЛицо",    "");
	РезультатФункции.Вставить("ЭтоФЛ",        "");
	РезультатФункции.Вставить("ИНН",          "");
	РезультатФункции.Вставить("КПП",          "");
	РезультатФункции.Вставить("Наименование", "");
	
	Если ДанныеЮрЛица = Неопределено Тогда 
		Возврат РезультатФункции;
	КонецЕсли;
		
	Если ЭтоСтронаДокумента Тогда
		Реквизиты = ДанныеЮрЛица;
	Иначе		
		Реквизиты = ДанныеЮрЛица["Реквизиты"];
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Реквизиты) Тогда		
		Возврат РезультатФункции;    				
	КонецЕсли;
	
	РезультатФункции.ЭтоИП     = ЗначениеЗаполнено(Реквизиты["ИП"]);
	РезультатФункции.ЭтоЮЛ     = ЗначениеЗаполнено(Реквизиты["ЮЛ"]);
	РезультатФункции.ЭтоИнЛицо = ЗначениеЗаполнено(Реквизиты["ИностранноеЛицо"]);
	РезультатФункции.ЭтоФЛ     = ЗначениеЗаполнено(Реквизиты["ФЛ"]);
	
	КлючИНН = "ИНН";
	КлючКПП = "КПП";
	
	Если РезультатФункции.ЭтоЮЛ Тогда
		
		РезультатФункции.ИНН = Реквизиты["ЮЛ"][КлючИНН];
		Если Не ЭтоСтронаДокумента Тогда 
			РезультатФункции.КПП = Реквизиты["ЮЛ"][КлючКПП];  
		КонецЕсли;
		
	ИначеЕсли РезультатФункции.ЭтоИП Тогда
		РезультатФункции.ИНН = Реквизиты["ИП"][КлючИНН];
	ИначеЕсли РезультатФункции.ЭтоИнЛицо Тогда 
		// ИНН нет
		// ищем по наименованию
		РезультатФункции.Наименование = Реквизиты["ИностранноеЛицо"]["Наименование"];
	ИначеЕсли ЗначениеЗаполнено(Реквизиты[КлючИНН]) Тогда
		РезультатФункции.ИНН = Реквизиты[КлючИНН];	
	Иначе 
		// Физ лицо... но нельзя указать в поле...
		// ДанныеЮрЛица.Реквизиты.Свойство("ФЛ")
		РезультатФункции.ИНН = Реквизиты["ФЛ"][КлючИНН];
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция НовыйКонтрагент(ДанныеЮрЛица)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоИП = ДанныеЮрЛица["ЭтоИП"];
	ЭтоЮЛ = ДанныеЮрЛица["ЭтоЮЛ"];
	ЭтоФЛ = ДанныеЮрЛица["ЭтоФЛ"];
		
	// создаем контрагента...
	// по основным участникам документа
	НовоеЮрЛицо = Справочники.Контрагенты.СоздатьЭлемент();
	
    ЕстьРеквизитПартнер = ОбщегоНазначения.ЕстьРеквизитОбъекта("Партнер", НовоеЮрЛицо.Метаданные());
	Если ЕстьРеквизитПартнер Тогда
		НовоеЮрЛицо.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.НеизвестныйПартнер");
	КонецЕсли;
	
	// пока не работаем с иностранными лицами
	НовоеЮрЛицо.СтранаРегистрации  = Справочники.СтраныМира.Россия;
	
	НовоеЮрЛицо.ИНН = ДанныеЮрЛица["ИНН"];
	НовоеЮрЛицо.КПП = ДанныеЮрЛица["КПП"];
	
	ДанныеРеквизитов = ДанныеЮрЛица["Реквизиты"];
	
	ЗаполнитьДополнительнуюИнформациюКонтрагента(НовоеЮрЛицо, ДанныеРеквизитов);	
	
	 // в БП3 реквизит называется иначе	 
	Если Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("ЮрФизЛицо", НовоеЮрЛицо) Тогда
		ИмяРеквизитаЮрФизЛицо = "ЮрФизЛицо";
	Иначе 
	    ИмяРеквизитаЮрФизЛицо = "ЮридическоеФизическоеЛицо";	
	КонецЕсли;
	
	НовоеЮрЛицо[ИмяРеквизитаЮрФизЛицо] = ЗначениеЮрФизЛицо(ДанныеЮрЛица);
	
	Если ЭтоЮЛ Тогда 
		
		РеквизитыЮЛ = ДанныеРеквизитов["ЮЛ"];
		
		НовоеЮрЛицо.Наименование       = РеквизитыЮЛ["Название"]["Полное"];
		НовоеЮрЛицо.НаименованиеПолное = РеквизитыЮЛ["Название"]["Полное"];		 		
				
	ИначеЕсли ЭтоИП Тогда 
		
		РеквизитыИП = ДанныеРеквизитов["ИП"];
		
		МассивНазвания = Новый Массив;
		МассивНазвания.Добавить(РеквизитыИП["Фамилия"]);
		МассивНазвания.Добавить(РеквизитыИП["Имя"]);
		МассивНазвания.Добавить(РеквизитыИП["Отчество"]);
		
		Название = СтрСоединить(МассивНазвания, " ");				 
		
		Если Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("РегистрационныйНомер", НовоеЮрЛицо) Тогда
			НовоеЮрЛицо.РегистрационныйНомер = РеквизитыИП["ОГРН"];
		КонецЕсли;
		
		НовоеЮрЛицо.Наименование         = Название;
		НовоеЮрЛицо.НаименованиеПолное   = Название;
		
	ИначеЕсли ЭтоФЛ Тогда
		
		РеквизитыФЛ = ДанныеРеквизитов["ФЛ"];
		
		МассивНазвания = Новый Массив;
		МассивНазвания.Добавить(РеквизитыФЛ["Фамилия"]);
		МассивНазвания.Добавить(РеквизитыФЛ["Имя"]);
		МассивНазвания.Добавить(РеквизитыФЛ["Отчество"]);
		
		Название = СтрСоединить(МассивНазвания, " ");				 
		
		НовоеЮрЛицо.ИНН                = РеквизитыФЛ["ИНН"];
		НовоеЮрЛицо.Наименование       = Название;
		НовоеЮрЛицо.НаименованиеПолное = Название;				 
		
	Иначе 
		
		// Иностранное лицо				 
		НовоеЮрЛицо.Наименование      = ДанныеЮрЛица.ИностранноеЛицо.Наименование;
		НовоеЮрЛицо.СтранаРегистрации = Справочники.СтраныМира.НайтиПоНаименованию(ДанныеЮрЛица.ИностранноеЛицо.Страна);	
		
	КонецЕсли;
		
	ЗаполнитьАдресЮрЛица(НовоеЮрЛицо, ДанныеЮрЛица["Адрес"]);
	
	ЗаполнитьКонтактыЮрЛица(НовоеЮрЛицо, ДанныеЮрЛица["Контакты"]);
	
	НовоеЮрЛицо.Записать();
	
	Возврат НовоеЮрЛицо.Ссылка;
	
КонецФункции

Процедура ЗаполнитьДополнительнуюИнформациюКонтрагента(НовоеЮрЛицо, ДанныеРеквизитов)
	
	Информация = ДанныеРеквизитов["Информация"];
	Если Не ЗначениеЗаполнено(Информация) Тогда
		Возврат;
	КонецЕсли;
	
	Если Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("ДополнительнаяИнформация", НовоеЮрЛицо) Тогда
		НовоеЮрЛицо.ДополнительнаяИнформация = Информация;
	ИначеЕсли Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("ДополнительноеОписание", НовоеЮрЛицо) Тогда
		НовоеЮрЛицо.ДополнительноеОписание = Информация;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАдресЮрЛица(НовоеЮрЛицо, АдресСОнлайна)
	
	Если Не ЗначениеЗаполнено(АдресСОнлайна) Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаДействуетС = НачалоДня(ТекущаяДатаСеанса());
	ВидыКИ         = Saby_ТНОбщегоНазначенияСервер.ВидыКонтактнойИнформации(НовоеЮрЛицо.Ссылка);
	
	ЮрАдрес = ПреобразоватьСтруктуруАдреса(АдресСОнлайна["Юридический"]);
	Если ЮрАдрес <> Неопределено Тогда 
		
		АдресКИ = НовоеЮрЛицо.КонтактнаяИнформация.Добавить();
		АдресКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Адрес;
		АдресКИ.Вид           = ВидыКИ.АдресЮр;
		АдресКИ.Страна        = Справочники.СтраныМира.Россия; 					
		АдресКИ.ЗначенияПолей = ЮрАдрес.АдресСтруктурой;		
		АдресКИ.Представление = ЮрАдрес.АдресСтрокой;
		
		Если ЕстьРеквизитДействуетС(АдресКИ) Тогда   
			АдресКИ.ДействуетС = ДатаДействуетС;
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКонтактыЮрЛица(НовоеЮрЛицо, КонтактыСОнлайна)
	
	Если Не ЗначениеЗаполнено(КонтактыСОнлайна) Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаДействуетС = НачалоДня(ТекущаяДатаСеанса());
	ВидыКИ         = Saby_ТНОбщегоНазначенияСервер.ВидыКонтактнойИнформации(НовоеЮрЛицо.Ссылка);
	
	// Телефоны
	Телефоны = КонтактыСОнлайна["Телефон"];
	Если ЗначениеЗаполнено(Телефоны) Тогда
		Для Каждого Телефон Из Телефоны Цикл
			
			ДанныеТелефона = Телефон["Значение"];
			
			ТелефонКИ = НовоеЮрЛицо.КонтактнаяИнформация.Добавить();
			ТелефонКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Телефон;
			ТелефонКИ.Вид           = ВидыКИ.Телефон;
			ТелефонКИ.Представление = ДанныеТелефона;
			ТелефонКИ.НомерТелефона = ДанныеТелефона;
			
			Если ЕстьРеквизитДействуетС(ТелефонКИ) Тогда
				ТелефонКИ.ДействуетС = ДатаДействуетС;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Электронная почта
	Почты = КонтактыСОнлайна["ЭлектроннаяПочта"];
	Если ЗначениеЗаполнено(Почты) Тогда
		Для Каждого ЭлПочта Из Почты Цикл
			
			ДанныеЭлПочты = ЭлПочта["Значение"];
			
			ЭлПочтаКИ = НовоеЮрЛицо.КонтактнаяИнформация.Добавить();
			ЭлПочтаКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			ЭлПочтаКИ.Вид           = ВидыКИ.Емейл;
			ЭлПочтаКИ.Представление = ДанныеЭлПочты;
			
			Если ЕстьРеквизитДействуетС(ЭлПочтаКИ) Тогда
				ЭлПочтаКИ.ДействуетС = ДатаДействуетС;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьРеквизитДействуетС(КонтактнаяИнформация)
	
	Возврат Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("ДействуетС", КонтактнаяИнформация);
	
КонецФункции

Функция ПреобразоватьСтруктуруАдреса(ДанныеАдреса)
	
	СтруктураАдреса = Неопределено;
	
	Текст = ДанныеАдреса["Текст"];
	Адрес = ДанныеАдреса["Структура"];
	
	Если ЗначениеЗаполнено(Текст) 
		Или ЗначениеЗаполнено(Адрес) Тогда
		
		Если ТипЗнч(Адрес) <> Тип("Строка") Тогда 
			СтруктураJS = Saby_ТНОбщегоНазначенияСервер.ЗначениеВJSON(Адрес);
		Иначе 
			СтруктураJS = Адрес;
		КонецЕсли;
	
		// есть представление
		Если ЗначениеЗаполнено(Текст) Тогда	
			Представление = Текст;			
		Иначе 
			Если ТипЗнч(Адрес) = Тип("Строка") Тогда
				Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(Адрес);
			Иначе
				// есть только структура данных. сформируем представление по структуре
				Представление = ПредставлениеАдресаИзСоответствия(Адрес); 
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("АдресСтрокой",    Представление);
		СтруктураАдреса.Вставить("АдресСтруктурой", СтруктураJS);
		
	КонецЕсли;	
	
	Возврат СтруктураАдреса;
	
КонецФункции

Функция ПредставлениеАдресаИзСоответствия(Соответствие)
	
	Структура = Новый Структура;
	Для Каждого Элемент Из Соответствие Цикл 
		Структура.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
		
	Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(Структура);
	
	Возврат Представление;
	
КонецФункции

Функция НоваяСторонаДокумента(ДанныеЮрЛица)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сторона = Справочники.Saby_СторонаДокумента.СоздатьЭлемент();
	
	Сторона.ИНН = ДанныеЮрЛица["ИНН"];
		
	Сторона.ЮрФизЛицо = ЗначениеЮрФизЛицо(ДанныеЮрЛица);
	Если ДанныеЮрЛица["ЭтоИнЛицо"] Тогда 
		
		Сторона.Наименование    = ДанныеЮрЛица["ИностранноеЛицо"]["Наименование"];
		Сторона.ЮрФизЛицо       = Перечисления.Saby_ЮрФизЛицо.ЮрЛицоНеРезидент;
		
	Иначе 
		
		ДлинаИННФизЛицо = 12;
		
		Сторона.Наименование = СокрЛП(Сторона.ЮрФизЛицо) + " " + Сторона.ИНН;
		Если СтрДлина(СокрЛП(Сторона.ИНН)) = ДлинаИННФизЛицо Тогда
			Сторона.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ИндивидуальныйПредприниматель;
		Иначе 
			Сторона.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ЮрЛицо;
		КонецЕсли;
		
	КонецЕсли;	
		
	Сторона.Записать();
	
	Возврат Сторона.Ссылка;
	
КонецФункции
	
Функция ЗначениеЮрФизЛицо(ДанныеЮрЛица)
	
	ЕстьЮрФизЛицо = Метаданные.Перечисления.Найти("ЮрФизЛицо") <> Неопределено;
	Если ЕстьЮрФизЛицо Тогда		
		
		Если ДанныеЮрЛица["ЭтоИП"] Тогда 
			ИмяЗначения = "ИндивидуальныйПредприниматель";
		ИначеЕсли ДанныеЮрЛица["ЭтоИнЛицо"] Тогда 
			ИмяЗначения = "ЮрЛицоНеРезидент";
		ИначеЕсли ДанныеЮрЛица["ЭтоФЛ"] Тогда 
			ИмяЗначения = "ФизЛицо";
		Иначе 
			// ЮЛ
			ИмяЗначения = "ЮрЛицо";
		КонецЕсли;
				
	Иначе 
		
		// "Бухгалтерия предприятия, редакция 3.0"
		Если ДанныеЮрЛица["ЭтоИП"] Тогда 
			ИмяЗначения = "ФизическоеЛицо";
		Иначе 
			// ЮЛ
			ИмяЗначения = "ЮридическоеЛицо";
		КонецЕсли;
		
	КонецЕсли;
	
	Значение = Saby_ТНОбщегоНазначенияСервер.ЗначениеЮрФизЛицаКонфигурации(ИмяЗначения);
	
	Возврат Значение;

КонецФункции

Функция ДанныеЮрЛиц(ДанныеЮрЛицаСОнлайна, Роль)
	
	РезультатФункции = Новый Массив;
	
	Если ДанныеЮрЛицаСОнлайна = Неопределено Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	// для иностранных возможно доп проверка
	Если Не ЗначениеЗаполнено(ДанныеЮрЛицаСОнлайна["Ссылка"]) Тогда   
		Возврат РезультатФункции;
	КонецЕсли;
	
	СтруктураДанныхЮрЛица = Новый Структура;
	
	ЭтоИП     = ДанныеЮрЛицаСОнлайна["ЭтоИП"];
	ЭтоЮЛ     = ДанныеЮрЛицаСОнлайна["ЭтоЮЛ"];
	ЭтоФЛ     = ДанныеЮрЛицаСОнлайна["ЭтоФЛ"];
	
	СтруктураДанныхЮрЛица.Вставить("Роль", Роль);
	СтруктураДанныхЮрЛица.Вставить("ИНН", ДанныеЮрЛицаСОнлайна["ИНН"]);
	СтруктураДанныхЮрЛица.Вставить("КПП", ДанныеЮрЛицаСОнлайна["КПП"]);
	
	// Адрес 
	Адрес = ДанныеЮрЛицаСОнлайна["Адрес"];
	Если ЗначениеЗаполнено(Адрес) Тогда
		
		ЮрАдрес = Адрес["Юридический"];
		Если ЗначениеЗаполнено(ЮрАдрес) Тогда
			
			СтруктураАдрес = ПреобразоватьСтруктуруАдреса(ЮрАдрес);
			Если ЗначениеЗаполнено(СтруктураАдрес) Тогда
				СтруктураДанныхЮрЛица.Вставить("Адрес", СтруктураАдрес.АдресСтрокой);
				СтруктураДанныхЮрЛица.Вставить("АдресСтруктура", СтруктураАдрес.АдресСтруктурой);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеРеквизитов = ДанныеЮрЛицаСОнлайна["Реквизиты"];
	
	СтруктураДанныхЮрЛица.Вставить("ЮрФизЛицо", Неопределено);
	Если ЭтоЮл Тогда
		СтруктураДанныхЮрЛица.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ЮрЛицо;
	ИначеЕсли ЭтоФЛ Тогда
		
		СтруктураДанныхЮрЛица.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ФизЛицо;
		
		СтруктураФИО = СтруктураФИО(ДанныеРеквизитов["ФЛ"]);
		ФИОСтрокой = ЗначениеВСтрокуВнутр(СтруктураФИО);	
		
		СтруктураДанныхЮрЛица.Вставить("СтруктураФИО", ФИОСтрокой);
		
	ИначеЕсли ЭтоИП Тогда  
		
		СтруктураДанныхЮрЛица.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ИндивидуальныйПредприниматель;
		
		РеквизитыИП = ДанныеРеквизитов["ИП"];
				
		СтруктураДанныхЮрЛица.Вставить("ОГРН", РеквизитыИП["ОГРН"]);
				
		СтруктураФИО = СтруктураФИО(РеквизитыИП);
		ФИОСтрокой = ЗначениеВСтрокуВнутр(СтруктураФИО);
				
		СтруктураДанныхЮрЛица.Вставить("СтруктураФИО", ФИОСтрокой);
				
	Иначе		
		
		// Иностаранное юр лицо				
		СтруктураДанныхЮрЛица.ЮрФизЛицо = Перечисления.Saby_ЮрФизЛицо.ЮрЛицоНеРезидент;
		// ??? возможно в контрагенте достаточно 
		Страна = ДанныеРеквизитов["ИностранноеЛицо"]["Страна"];
		Если ЗначениеЗаполнено(Страна) Тогда 
			СтруктураДанныхЮрЛица.Вставить("СтранаРегистрации", СокрЛП(Страна));
		КонецЕсли;
			
	КонецЕсли;
	
	РезультатФункции.Добавить(СтруктураДанныхЮрЛица);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СтруктураФИО(Реквизиты)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Фамилия",  Реквизиты["Фамилия"]);
	РезультатФункции.Вставить("Имя",      Реквизиты["Имя"]);
	РезультатФункции.Вставить("Отчество", Реквизиты["Отчество"]);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция КонтактнаяИнформация(ДанныеЮрЛицаСОнлайна, Роль)
	
	РезультатФункции = Новый Массив;
	
	Если ДанныеЮрЛицаСОнлайна = Неопределено Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	// для иностранных возможно доп проверка
	Если Не ЗначениеЗаполнено(ДанныеЮрЛицаСОнлайна["Ссылка"]) Тогда   
		Возврат РезультатФункции;
	КонецЕсли;
	
	СтруктураКонтактнойИнформации = Новый Структура;
	
	// Телефоны 
	Контакты = ДанныеЮрЛицаСОнлайна["Контакты"];
	Если Не ЗначениеЗаполнено(Контакты) Тогда 
		Возврат РезультатФункции;
	КонецЕсли;
	
	Телефоны = Контакты["Телефон"];
	Если ЗначениеЗаполнено(Телефоны) Тогда 
		Для Каждого Телефон Из Телефоны Цикл 				
			
			Если Не ЗначениеЗаполнено(Телефон["Значение"]) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураКонтактнойИнформации = СтруктураКонтактнойИнформации(
				Роль, Перечисления.ТипыКонтактнойИнформации.Телефон, Телефон);
			РезультатФункции.Добавить(СтруктураКонтактнойИнформации);
			
		КонецЦикла;	
	КонецЕсли;
	
	// Электронная почта
	Почты = Контакты["ЭлектроннаяПочта"];
	Если ЗначениеЗаполнено(Почты) Тогда 
		Для Каждого ЭлПочта Из Почты Цикл 				
			
			Если Не ЗначениеЗаполнено(ЭлПочта["Значение"]) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураКонтактнойИнформации = СтруктураКонтактнойИнформации(
				Роль, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ЭлПочта);
			РезультатФункции.Добавить(СтруктураКонтактнойИнформации);
			
		КонецЦикла; 
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СтруктураКонтактнойИнформации(Роль, Тип, ДанныеКИ)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Роль",     Роль);
	РезультатФункции.Вставить("Тип",      Тип);
	РезультатФункции.Вставить("Значение", ДанныеКИ["Значение"]);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(ОбъектДок, СтруктураДанных, Роль)
	
	УдалитьСвязаннуюСЮрЛицомИнформацию(СтруктураДанных.ДанныеЮрЛиц, ОбъектДок.ДанныеЮрЛиц, Роль);
	Для Каждого СтруктураДанныхЮрЛица Из СтруктураДанных.ДанныеЮрЛиц Цикл
		Если СтруктураДанныхЮрЛица.Роль <> Роль Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДанныхЮрЛиц = ОбъектДок.ДанныеЮрЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныхЮрЛиц, СтруктураДанныхЮрЛица);
	КонецЦикла;
	
	УдалитьСвязаннуюСЮрЛицомИнформацию(СтруктураДанных.КонтактныеДанные, ОбъектДок.КонтактныеДанные, Роль);
	Для Каждого СтруктураКонтактныхДанных Из СтруктураДанных.КонтактныеДанные Цикл
		Если СтруктураКонтактныхДанных.Роль <> Роль Тогда
			Продолжить;
		КонецЕсли;
		СтрокаКонтактныхДанных = ОбъектДок.КонтактныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКонтактныхДанных, СтруктураКонтактныхДанных);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСвязаннуюСЮрЛицомИнформацию(ДанныеСОнлайна, ДанныеДокумента, Роль)
	
	Если Не ЗначениеЗаполнено(ДанныеСОнлайна) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Роль);
	
	СтрокиДляУдаления = ДанныеДокумента.НайтиСтроки(Отбор);
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		ДанныеДокумента.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСоставителя(СоставительСОнлайна, ОбъектДок)
	
	Если СоставительСОнлайна = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоставительСсылка = Справочники.Организации.НайтиПоНаименованию(СоставительСОнлайна["Наименование"], Истина);
	ОбъектДок.Составитель = ?(Не СоставительСсылка.Пустая(), СоставительСсылка, СоставительСОнлайна["Наименование"]);
	
	Основание = СоставительСОнлайна["Основание"]["Документ"];
	Если ЗначениеЗаполнено(Основание) Тогда 
		
		Тип = Перечисления.Saby_ТипыДокумента.СоставительНаОсновании;	
		ОснованиеСсылка = ЗагрузитьОдиночныйДокументЭТрН(Основание, Тип);
				
		ОбъектДок.Составитель_НаОснованииДокумент = ОснованиеСсылка;
		
	КонецЕсли;
	
КонецПроцедуры

Функция КонтрагентОрганизацияПоНаименованию(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	1 КАК Порядок
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	2
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование = &Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_Данные.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Данные.Порядок";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		// нашли юр.лицо. Организация, Контрагент
		ЮрЛицо = Выборка.Ссылка; 		
	Иначе
		ЮрЛицо = Наименование;		
	КонецЕсли;	

	Возврат ЮрЛицо;
	
КонецФункции

Процедура ЗаполнитьДанныеОформителя(ОформительСОнлайна, ДляДокумента)
	
	Если Не ЗначениеЗаполнено(ОформительСОнлайна) Тогда 
		Возврат;	
	КонецЕсли;
	
	ОформилСтруктура = Новый Структура;
	
	ОформилСтруктура.Вставить("Фамилия",  ОформительСОнлайна["Фамилия"]);
	ОформилСтруктура.Вставить("Имя",      ОформительСОнлайна["Имя"]);
	ОформилСтруктура.Вставить("Отчество", ОформительСОнлайна["Отчество"]);
	
	ОформилСтруктура.Вставить("Телефоны",         Новый Массив);
	ОформилСтруктура.Вставить("ЭлектроннаяПочта", "");
	
	// Для того, чтобы не отбилась функция КонтактнаяИнформация.
	ОформительСОнлайна.Вставить("Ссылка", Истина);
	
	ПустаяРоль = Перечисления.Saby_РолиКонтрагентов.ПустаяСсылка();
	ОформилКонтактныеДанные = КонтактнаяИнформация(ОформительСОнлайна, ПустаяРоль);
	Для Каждого СтрокаКИ Из ОформилКонтактныеДанные Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ОформилСтруктура.Телефоны.Добавить(СтрокаКИ.Значение);
		КонецЕсли;
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			ОформилСтруктура.ЭлектроннаяПочта = СтрокаКИ.Значение;
		КонецЕсли;
		ДляДокумента.КонтактныеДанные.Добавить(СтрокаКИ);
	КонецЦикла;
	
	ДляДокумента.Вставить("ОформилСтруктура", ЗначениеВСтрокуВнутр(ОформилСтруктура));
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаДанныхЮрЛиц

#Область ПунктыПогрузкиИВыгрузки

Функция ДанныеПунктаПогрузки(ДанныеПогрузкиСОнлайна, СтруктураДляЗаполнения = Неопределено)
	
	Если СтруктураДляЗаполнения = Неопределено Тогда
		СтруктураДляЗаполнения = Новый Структура;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеПогрузкиСОнлайна) Тогда 
		Возврат СтруктураДляЗаполнения;
	КонецЕсли;
	
	АдресФактПогрузка = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеПогрузкиСОнлайна, "Адрес.Фактический");
	Если ЗначениеЗаполнено(АдресФактПогрузка) Тогда 
					
		ДанныеАдресаПогрузка = ПреобразоватьСтруктуруАдреса(АдресФактПогрузка);
		Если ЗначениеЗаполнено(ДанныеАдресаПогрузка) Тогда 
			СтруктураДляЗаполнения.Вставить("Погрузка_Адрес",        ДанныеАдресаПогрузка.АдресСтрокой);
			СтруктураДляЗаполнения.Вставить("АдресПогрузкиЗначение", ДанныеАдресаПогрузка.АдресСтруктурой);
		КонецЕсли;
					
	КонецЕсли;
	
	ДатаВремяПогрузки = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеПогрузкиСОнлайна, "ДатаВремя.Значение");
	Если ДатаВремяПогрузки <> Неопределено Тогда
		СтруктураДляЗаполнения.Вставить(
			"Погрузка_ДатаВремя",
			Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаВремяПогрузки));
	КонецЕсли;
	
	Возврат СтруктураДляЗаполнения;
	
КонецФункции

Функция ДанныеПунктаВыгрузки(ДанныеВыгрузкиСОнлайна, СтруктураДляЗаполнения = Неопределено)
	
	Если СтруктураДляЗаполнения = Неопределено Тогда
		СтруктураДляЗаполнения = Новый Структура;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеВыгрузкиСОнлайна) Тогда 
		Возврат СтруктураДляЗаполнения;
	КонецЕсли;
	
	АдресФактВыгрузка = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеВыгрузкиСОнлайна, "Адрес.Фактический");
	Если ЗначениеЗаполнено(АдресФактВыгрузка) Тогда 
		
		ДанныеАдресаВыгрузка = ПреобразоватьСтруктуруАдреса(АдресФактВыгрузка);
		Если ЗначениеЗаполнено(ДанныеАдресаВыгрузка) Тогда
			СтруктураДляЗаполнения.Вставить("Отправитель_АдресДоставки", ДанныеАдресаВыгрузка.АдресСтрокой);
			СтруктураДляЗаполнения.Вставить("АдресДоставкиЗначение",     ДанныеАдресаВыгрузка.АдресСтруктурой);
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаВремяВыгрузки = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеВыгрузкиСОнлайна, "ДатаВремя.Значение");
	Если ДатаВремяВыгрузки <> Неопределено Тогда
		СтруктураДляЗаполнения.Вставить(
			"Отправитель_ДоставитьДо",
			Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаВремяВыгрузки));
		СтруктураДляЗаполнения.Вставить("Выгрузка_ДатаВремя",      СтруктураДляЗаполнения.Отправитель_ДоставитьДо);
	КонецЕсли;
	
	Возврат СтруктураДляЗаполнения;
	
КонецФункции

#КонецОбласти // ПунктыПогрузкиИВыгрузки

Процедура ЗаполнитьУсловияПеревозки(ОбъектДок, УсловияПеревозки)
	
	Если УсловияПеревозки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
			
	Параметры = ПараметрыСвойстваСКонтролем(ОбъектДок, УсловияПеревозки);
	
	ЗаполнитьСвойствоСКонтролем(Параметры, "Отправитель_НормыПеревозки",      "Нормы"); 	
	ЗаполнитьСвойствоСКонтролем(Параметры, "Отправитель_ПерегрузкаЗапрещена", "ПерегрузкаЗапрещена", Истина);	
	ЗаполнитьСвойствоСКонтролем(Параметры, "Отправитель_Пломба",              "Пломба");
	ЗаполнитьСвойствоСКонтролем(Параметры, "Отправитель_ДоставитьСрок",       "СрокДоставки");
	ЗаполнитьСвойствоСКонтролем(Параметры, "Отправитель_ОграничениеСкорости", "ОграничениеСкорости");
	
	// Климатический режим
	КлиматическийРежим = УсловияПеревозки["КлиматическийРежим"]; 
	Если ЗначениеЗаполнено(КлиматическийРежим) Тогда  
		
		Температура = КлиматическийРежим["Температура"]; 
		Если ЗначениеЗаполнено(Температура) Тогда 
			Параметры.Источник = Температура;
			ЗаполнитьСвойствоСКонтролем(Параметры, "Отправитель_ТемператураОт", "Минимальная",  Истина);
			ЗаполнитьСвойствоСКонтролем(Параметры, "Отправитель_ТемператураДо", "Максимальная", Истина);
		КонецЕсли;
		
		Влажность = КлиматическийРежим["Влажность"];
		Если ЗначениеЗаполнено(Влажность) Тогда
			Параметры.Источник = Влажность;
			ЗаполнитьСвойствоСКонтролем(Параметры, "Отправитель_ВлажностьОт", "Минимальная",  Истина);
			ЗаполнитьСвойствоСКонтролем(Параметры, "Отправитель_ВлажностьДо", "Максимальная", Истина);
		КонецЕсли;
				
	КонецЕсли;
	
	// Маршрут
	// ToDo: сейчас маршрутов нет даже в метаданных 
	
	// переадресация       
	Переадресовка = УсловияПеревозки["Переадресовка"];
	Если ЗначениеЗаполнено(Переадресовка) Тогда 
		
		ОбъектДок.ИнициаторПереадресации = Перечисления.Saby_РолиКонтрагентов.ЗначениеПоКоду(
			Переадресовка["КтоПереадресует"]);
			
		Подтверждение = Переадресовка["ПодтверждениеПолномочий"];
		Если ЗначениеЗаполнено(Подтверждение) Тогда 
			
			Тип = Перечисления.Saby_ТипыДокумента.ПравоПереадресации;				
			ПодтверждениеСсылка = ЗагрузитьОдиночныйДокументЭТрН(Подтверждение, Тип);
						
			ОбъектДок.ИнициаторПереадресацииПодтверждение = ПодтверждениеСсылка;
			
		КонецЕсли;
			
	КонецЕсли;
	
	// ToDo: нет заполнения по этим полям 
	// - Контакты - либо грузоотправителя или грузополучателя 
	// - ПодтверждениеПолномочий
		
КонецПроцедуры

Процедура ЗаполнитьДанныеКтоПогружает(ОбъектДок, КтоПогружает)
	
	Если КтоПогружает = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	// Кто погружает
	// Грузоотправитель или другой 
	Если КтоПогружает["Тип"] = "2" Тогда		
		
		ДругойПогрузчик = КтоПогружает["Другой"];
		
		// другое юр лицо  
		Контрагент = ДругойПогрузчик["Контрагент"];
		ЗаполнитьУчастникаДокумента("Отгрузчик", Контрагент, ОбъектДок);		
		
		// Работник          
		Работник = ДругойПогрузчик["Работник"];
		Если ЗначениеЗаполнено(Работник) Тогда 
			
			Работник = ДругойПогрузчик["Работник"];
			
			СтруктураРаботника = Новый Структура;
			СтруктураРаботника.Вставить("Фамилия",  Работник["Фамилия"]);
			СтруктураРаботника.Вставить("Имя",      Работник["Имя"]);
			СтруктураРаботника.Вставить("Отчество", Работник["Отчество"]);
			
			ОбъектДок.Отгрузка_ОтветственныйСтруктура = ЗначениеВСтрокуВнутр(СтруктураРаботника);
			
			Если ЗначениеЗаполнено(Работник["Должность"]) Тогда				
				ОбъектДок.Отгрузка_ОтветственныйДолжность = Работник["Должность"];								
			КонецЕсли;						
			
		КонецЕсли;
		
	Иначе 	
		
		// Грузооправитель
		ОбъектДок.Отгрузчик = ОбъектДок.Отправитель;		
			
	КонецЕсли;	
		
	ЗаполнитьДокументыКтоПогружает(ОбъектДок, КтоПогружает);
	
КонецПроцедуры

Процедура ЗаполнитьДокументыКтоПогружает(ОбъектДок, КтоПогружает)
	
	// Погружает отправитель
	Если КтоПогружает["Тип"] <> "2" Тогда
		Возврат;
	КонецЕсли;
	
	// Документы владения
	ТЗ = ТаблицаДокументовТрН();
	НомерСтроки = 0;
	
	// ДокументОснование 
	ДокументОснование = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(КтоПогружает, "Другой.ДокументОснование");
	Если ЗначениеЗаполнено(ДокументОснование) Тогда 			
		НС = ТЗ.Добавить();
		Тип = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей;
		ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, ДокументОснование, Тип, НомерСтроки);  			
	КонецЕсли;
	
	ДокПолномочий = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
		КтоПогружает, "Другой.Работник.ОснованиеПолномочий.Документ");
	Если ЗначениеЗаполнено(ДокПолномочий) Тогда
		НС = ТЗ.Добавить();
		Тип = Перечисления.Saby_ТипыДокумента.ОтветственныйНаОсновании;
		ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, ДокПолномочий, Тип, НомерСтроки);
	Иначе
		ОбъектДок.Отгрузка_ОтветственныйНаОсновании = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
			КтоПогружает,
			"Другой.Работник.ОснованиеПолномочий.ДолжностныеОбязанности");
	КонецЕсли;
	
	Если ТЗ.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	СоответствиеДокументов = НайтиСоздатьДокументТрН(ТЗ);
		
	// Заполняем данные
	Для Каждого СтрокаДок Из ТЗ Цикл 
		
		ДокументОснования = СоответствиеДокументов.Получить(СтрокаДок.НомерСтроки);
		Если СтрокаДок.ТипДок = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей Тогда 
			ОбъектДок.Отгрузка_НаОснованииДокумент = ДокументОснования;
		ИначеЕсли СтрокаДок.ТипДок = Перечисления.Saby_ТипыДокумента.ОтветственныйНаОсновании Тогда 	
			ОбъектДок.Отгрузка_ОтветственныйНаОсновании = ДокументОснования;
		Иначе
			Продолжить;
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеВладельца(ОбъектДок, ВладелецПунктаСОнлайна)
	
	Если Не ЗначениеЗаполнено(ВладелецПунктаСОнлайна) Тогда 
		Возврат;
	КонецЕсли;
	
	Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.ЗначениеПоКоду(ВладелецПунктаСОнлайна["Тип"]);
	
	ОбъектДок.Владелец_Тип = Тип;
	
	Если Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.Отправитель Тогда
		
		ОбъектДок.ВладелецОбъекта = ОбъектДок.Отправитель;
		// нет своих КИ... возможно скопировать из грузоотправителя
		
	ИначеЕсли Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.ДругоеЮрЛицо Тогда
		
		Контрагент = ВладелецПунктаСОнлайна["Другой"]["Контрагент"];
		ЗаполнитьУчастникаДокумента("ВладелецОбъекта", Контрагент, ОбъектДок);
		
	Иначе
		// Неизввестен
		Параметры = ПараметрыСвойстваСКонтролем(ОбъектДок, ВладелецПунктаСОнлайна);
		ЗаполнитьСвойствоСКонтролем(Параметры, "Владелец_НеизвестенПричина", "ПочемуНеизвестен");
	КонецЕсли;
	
КонецПроцедуры

#Область ЗагрузкаТСиВодители

Процедура ДанныеТСПрицеповСпецРазрешений(ДляДокумента, СтруктураТССОнлайна)
	
	ДляДокумента.Вставить("ТранспортныеСредства", Новый Массив);
	ДляДокумента.Вставить("СпецРазрешения",       Новый Массив);
	
	Если Не ЗначениеЗаполнено(СтруктураТССОнлайна) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураТС = СтруктураТранспортногоСредства(СтруктураТССОнлайна);
	Если ЗначениеЗаполнено(СтруктураТС.РегистрационныйНомер) Тогда
		ДляДокумента.ТранспортныеСредства.Добавить(СтруктураТС);
	КонецЕсли;
	
	Прицепы = СтруктураТССОнлайна["Прицеп"];
	Если ЗначениеЗаполнено(Прицепы) Тогда
		
		Для Каждого Прицеп Из Прицепы Цикл
			СтруктураТС = СтруктураТранспортногоСредства(Прицеп, Истина);
			Если ЗначениеЗаполнено(СтруктураТС.РегистрационныйНомер) Тогда
				ДляДокумента.ТранспортныеСредства.Добавить(СтруктураТС);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ДляДокумента.Вставить("СпецРазрешения", ДанныеСпецРазрешений(СтруктураТССОнлайна["СпецУсловия"]));
	
	Документ = СтруктураТССОнлайна["Документ"];
	Если ЗначениеЗаполнено(Документ) Тогда
		ОснованиеПередачиГруза = Документ["ПередачаГруза"];
		Если ЗначениеЗаполнено(ОснованиеПередачиГруза) Тогда
			Тип = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей;
			ОснованиеПередачиГрузаТС = ЗагрузитьОдиночныйДокументЭТрН(ОснованиеПередачиГруза, Тип);
			ДляДокумента.Вставить("ОснованиеПередачиГрузаТС", ОснованиеПередачиГрузаТС);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураТранспортногоСредства(СтруктураТССОнлайна, ЭтоПрицеп = Ложь)
	
	РезультатФункции = Saby_ТНОбщегоНазначенияСервер.СтруктураДанныхТранспортногоСредства();
	
	Если ЭтоПрицеп Тогда
		РезультатФункции.Вид = Перечисления.Saby_ВидыТС.Прицеп;
	Иначе
		РезультатФункции.Вид = Перечисления.Saby_ВидыТС.Автомобиль;
	КонецЕсли;
	
	Грузоподъемность = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(СтруктураТССОнлайна["Грузоподъемность"]);
	Вместимость      = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(СтруктураТССОнлайна["Вместимость"]);
	ТипВладения      = Перечисления.Saby_ТипыВладенияТС.ЗначениеПоКоду(СтруктураТССОнлайна["ТипВладения"]);
	
	РезультатФункции.РегистрационныйНомер = РегНомерБезЛишнихСимволов(СтруктураТССОнлайна["РегНомер"]);
	РезультатФункции.Тип                  = СтруктураТССОнлайна["Тип"];
	РезультатФункции.Марка                = СтруктураТССОнлайна["Марка"];
	РезультатФункции.ВИН                  = СтруктураТССОнлайна["VIN"];
	РезультатФункции.НомерСТС             = СтруктураТССОнлайна["НомерСТС"];
	РезультатФункции.Грузоподъемность     = Грузоподъемность;
	РезультатФункции.Вместимость          = Вместимость;
	РезультатФункции.ТипВладения          = ТипВладения;
	
	МассивОснованийВладения = Новый Массив;
	
	ТЗ = ТаблицаДокументовТрН();
	НомерСтроки = 0;
	
	ОснованиеВладения = СтруктураТССОнлайна["ОснованиеВладения"];
	Если ЗначениеЗаполнено(ОснованиеВладения) Тогда  
		
		Для Каждого ДокументВладения Из ОснованиеВладения Цикл
			
			НС = ТЗ.Добавить();
			Тип = Перечисления.Saby_ТипыДокумента.ПодтверждениеВладения;
			ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, ДокументВладения, Тип, НомерСтроки);
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		СоответствиеДокументов = НайтиСоздатьДокументТрН(ТЗ);
		
		Для Каждого СтрокаДок Из ТЗ Цикл 
			
			МассивОснованийВладения.Добавить(СоответствиеДокументов.Получить(СтрокаДок.НомерСтроки));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивОснованийВладения.Количество() > 0 Тогда
		РезультатФункции.ОснованияВладения = ЗначениеВСтрокуВнутр(МассивОснованийВладения);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеСпецРазрешений(СпецУсловияСОнлайна)
	
	РезультатФункции = Новый Массив;
	
	Если Не ЗначениеЗаполнено(СпецУсловияСОнлайна) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Для Каждого Условие Из СпецУсловияСОнлайна Цикл   
	
		СпецРазрешение = Условие["СпецРазрешение"];	
		Если ЗначениеЗаполнено(СпецРазрешение) Тогда
			
			СтруктураСпецРазрешения = Новый Структура;
			СтруктураСпецРазрешения.Вставить("Номер", СпецРазрешение["Номер"]);
			СтруктураСпецРазрешения.Вставить("Срок",  СпецРазрешение["Срок"]);
			СтруктураСпецРазрешения.Вставить(
				"Дата",
				Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(СпецРазрешение["Дата"]));
			
			РезультатФункции.Добавить(СтруктураСпецРазрешения);
			
		КонецЕсли;
		
		// - Маршрут не обрабатывается
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, СтруктураТС)
	
	Если СтруктураТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчищенныеВидыТС = Новый Соответствие;
	
	Если СтруктураТС.Свойство("ТранспортныеСредства") Тогда
		Для Каждого ТранспортноеСредство Из СтруктураТС.ТранспортныеСредства Цикл
			ОчиститьТранспортныеСредства(ОбъектДок, ТранспортноеСредство.Вид, ОчищенныеВидыТС);
			СтрокаТС = ОбъектДок.ТранспортныеСредства.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТС, ТранспортноеСредство);
		КонецЦикла;
	КонецЕсли;

	Если СтруктураТС.Свойство("СпецРазрешения") Тогда 
		Если ЗначениеЗаполнено(СтруктураТС.СпецРазрешения) Тогда
			ОбъектДок.СпецРазрешения.Очистить();
		КонецЕсли;
		Для Каждого СтруктураСпецРазрешения Из СтруктураТС.СпецРазрешения Цикл
			СтрокаСпецРазрешения = ОбъектДок.СпецРазрешения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСпецРазрешения, СтруктураСпецРазрешения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьТранспортныеСредства(ОбъектДок, Вид, ОчищенныеВидыТС)
	
	Если ОчищенныеВидыТС.Получить(Вид) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексСтрокиТС = 0;
	Пока ИндексСтрокиТС < ОбъектДок.ТранспортныеСредства.Количество() Цикл
		
		СтрокаТС = ОбъектДок.ТранспортныеСредства[ИндексСтрокиТС];
		
		Если СтрокаТС.Вид = Вид Тогда
			ОбъектДок.ТранспортныеСредства.Удалить(ИндексСтрокиТС);
		Иначе
			ИндексСтрокиТС = ИндексСтрокиТС + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ОчищенныеВидыТС.Вставить(Вид, Истина);
	
КонецПроцедуры

Функция ДанныеВодителей(ВодителиСОнлайна, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ВодителиСОнлайна) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Для Каждого Водитель Из ВодителиСОнлайна["Водитель"] Цикл 
				
		ДанныеВодителя = ДанныеВодителяДляЗагрузки(Водитель);
		
		ПутевыеЛисты = Новый Массив;
		
		Если ЗначениеЗаполнено(Водитель["ПутевойЛист"]) Тогда
			
			// Создадим новый или найдем существующий путевой лист...				
			ТЗ = ТаблицаДокументовТрН();
			
			НомерСтроки = 0;
			
			ДокументыТрН(
				Водитель["ПутевойЛист"], 
				ТЗ, 
				Перечисления.Saby_ТипыДокумента.ПутевойЛист,
			    НомерСтроки);
				
			// Получим ссылки на существующие и новые документы
			СоответствиеДокументов = НайтиСоздатьДокументТрН(ТЗ);
			
		    // Заполняем данные по документам
			Для Каждого СтрокаДок Из ТЗ Цикл 
				
				СсылкаДок = СоответствиеДокументов.Получить(СтрокаДок.НомерСтроки);
				
				// кидаем все в общий список			
				СтруктураПутевогоЛиста = Новый Структура;
				СтруктураПутевогоЛиста.Вставить("Документ", СсылкаДок);
				
				ПутевыеЛисты.Добавить(СтруктураПутевогоЛиста);
				
			КонецЦикла;				
		
		КонецЕсли;
		
		ДанныеВодителя.Вставить("ПутевыеЛисты", ПутевыеЛисты);
		
		РезультатФункции.Добавить(ДанныеВодителя);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьДанныеВодителей(ОбъектДок, Водители)
	
	КлючСтроки = 1;
	
	Если ЗначениеЗаполнено(Водители) Тогда
		ОбъектДок.Водители.Очистить();
	КонецЕсли;
	
	МассивКлючей = Новый Массив;
	
	Для Каждого СтруктураВодителя Из Водители Цикл 
		
		СтрокаВодителя = ОбъектДок.Водители.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВодителя, СтруктураВодителя);
		СтрокаВодителя.КлючСтроки = КлючСтроки;
		
		Если ЗначениеЗаполнено(СтруктураВодителя.ПутевыеЛисты) Тогда
			ОчиститьПутевыеЛисты(ОбъектДок, КлючСтроки);
		КонецЕсли;
		
		Для Каждого СтруктураПутевогоЛиста Из СтруктураВодителя.ПутевыеЛисты Цикл 
			СтрокаПутевогоЛиста = ОбъектДок.ПутевыеЛисты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПутевогоЛиста, СтруктураПутевогоЛиста);
			СтрокаПутевогоЛиста.КлючСтроки_Водители = КлючСтроки;
			МассивКлючей.Добавить(КлючСтроки);
		КонецЦикла;				
			
		КлючСтроки = КлючСтроки + 1;
		
	КонецЦикла;
	
	ОчиститьПутевыеЛисты(ОбъектДок, , МассивКлючей);
	
КонецПроцедуры

Процедура ОчиститьПутевыеЛисты(ОбъектДок, КлючСтроки = Неопределено, КлючиИсключения = Неопределено)
	
	ИндексСтроки = 0;
	Пока ИндексСтроки < ОбъектДок.ПутевыеЛисты.Количество() Цикл
		
		СтрокаПутевогоЛиста = ОбъектДок.ПутевыеЛисты[ИндексСтроки];
		
		УдалитьСтроку = КлючСтроки <> Неопределено И КлючСтроки = СтрокаПутевогоЛиста.КлючСтроки_Водители;
		УдалитьСтроку = УдалитьСтроку
			Или (ЗначениеЗаполнено(КлючиИсключения)
				И КлючиИсключения.Найти(СтрокаПутевогоЛиста.КлючСтроки_Водители) = Неопределено);
		
		Если УдалитьСтроку Тогда
			ОбъектДок.ПутевыеЛисты.Удалить(ИндексСтроки);
		Иначе
			ИндексСтроки = ИндексСтроки + 1;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Функция НовоеФизЛицо(Данные, Наименование, Водитель = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектФЛ = Справочники.ФизическиеЛица.СоздатьЭлемент();
	ОбъектФЛ.Наименование = Наименование;
	
	Фамилия = Данные["Фамилия"];
	
	// В УТ11 нет реквизитов
	Если Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("ФИО", ОбъектФЛ) Тогда
		
		ОбъектФЛ.ФИО          = Наименование;		
		ОбъектФЛ.Фамилия      = Фамилия;
		ОбъектФЛ.Имя          = Данные["Имя"];
		ОбъектФЛ.Отчество     = Данные["Отчество"];
		
	КонецЕсли;
		
	// Телефоны                             
	Телефоны = Данные["Телефон"]; 
	Если Водитель И ЗначениеЗаполнено(Телефоны) Тогда 
		
		Для Каждого Телефон Из Телефоны Цикл 
			
			НС = ОбъектФЛ.КонтактнаяИнформация.Добавить();
			НС.Тип           = Перечисления.ТипыКонтактнойИнформации.Телефон;
			НС.Вид           = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
			НС.Представление = Телефон["Значение"];
			НС.НомерТелефона = Телефон["Значение"];
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбъектФЛ.Записать();
	
	Ссылка = ОбъектФЛ.Ссылка; 
	Если Не Водитель Тогда
		// не нужна дальнейшая обработка
		Возврат Ссылка;
	КонецЕсли;
	
	// История ФИО
	Если ЗначениеЗаполнено(Фамилия) Тогда 
		
		МенеджерЗаписи = РегистрыСведений.ФИОФизическихЛиц.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Активность     = Истина;
		МенеджерЗаписи.Период         = ТекущаяДатаСеанса();
		МенеджерЗаписи.ФизическоеЛицо = Ссылка;
		МенеджерЗаписи.Фамилия        = Фамилия;
		МенеджерЗаписи.Имя            = Данные["Имя"];
		МенеджерЗаписи.Отчество       = Данные["Отчество"];
		
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
		
	// ВУ                   
	ВУ = Данные["ВУ"];
	Если ЗначениеЗаполнено(ВУ) Тогда 
		
		МенеджерЗаписи = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Активность   = Истина;
		МенеджерЗаписи.Период       = ТекущаяДатаСеанса();
		МенеджерЗаписи.Физлицо      = Ссылка;
		МенеджерЗаписи.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение;		
		МенеджерЗаписи.Серия        = ВУ["Серия"];		
		МенеджерЗаписи.Номер        = ВУ["Номер"];                    
		
		Если ЗначениеЗаполнено(ВУ["ДатаВыдачи"]) Тогда 
			МенеджерЗаписи.ДатаВыдачи = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ВУ["ДатаВыдачи"]);
		КонецЕсли;
		
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция СсылкаНаВодителяПослеЗагрузки(Данные, Водитель)
	
	Ссылка = Неопределено;
	
	Если Не ЗначениеЗаполнено(Данные.Наименование) Тогда
		Возврат Ссылка;
	КонецЕсли;
			
	// 1. По ИНН
	Если ЗначениеЗаполнено(Данные.ИНН) Тогда
		Ссылка = Справочники.ФизическиеЛица.НайтиПоРеквизиту("ИНН", Данные.ИНН);
	КонецЕсли;
	
	// 2. Поиск по Номеру ВУ
	Если Не ЗначениеЗаполнено(Ссылка)
		И ЗначениеЗаполнено(Данные.НомерВУ) Тогда
				
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номер", Данные.НомерВУ);
		Запрос.УстановитьПараметр("Вид",   Справочники.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение);
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументыФизическихЛицСрезПоследних.Физлицо КАК Физлицо
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			,
		|			ВидДокумента = &Вид
		|				И Номер = &Номер) КАК ДокументыФизическихЛицСрезПоследних";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Ссылка = Выборка.Физлицо;
		КонецЦикла;
		
	КонецЕсли;
	
	// 3. По наименованию
	Если Не ЗначениеЗаполнено(Ссылка) Тогда		
		Ссылка = Справочники.ФизическиеЛица.НайтиПоНаименованию(Данные.Наименование, Истина);
	КонецЕсли;
	
	// 4. Создадим водителя
	Если Не ЗначениеЗаполнено(Ссылка) Тогда		
		Ссылка = НовоеФизЛицо(Водитель, Данные.Наименование);
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция ДанныеВодителяДляЗагрузки(Водитель)
	
	ДанныеВодителя = Новый Структура;
	ДанныеВодителя.Вставить("Фамилия",      "");
	ДанныеВодителя.Вставить("Имя",          "");
	ДанныеВодителя.Вставить("Отчество",     "");
	ДанныеВодителя.Вставить("ИНН",          "");
	ДанныеВодителя.Вставить("СерияВУ",      "");
	ДанныеВодителя.Вставить("НомерВУ",      "");
	ДанныеВодителя.Вставить("ДатаВыдачиВУ", "");
	ДанныеВодителя.Вставить("Телефон",      Новый Массив);	
	ДанныеВодителя.Вставить("Телефоны",     "");
	
	Параметры = ПараметрыСвойстваСКонтролем(ДанныеВодителя, Водитель);	
	ЗаполнитьСвойствоСКонтролем(Параметры, "Фамилия");
	ЗаполнитьСвойствоСКонтролем(Параметры, "Имя");
	ЗаполнитьСвойствоСКонтролем(Параметры, "Отчество");
	ЗаполнитьСвойствоСКонтролем(Параметры, "ИНН");
	ЗаполнитьСвойствоСКонтролем(Параметры, "Телефон");
	
	ВУ = Водитель["ВУ"];
	Если ЗначениеЗаполнено(ВУ) Тогда 
		Параметры.Источник = ВУ;
		ЗаполнитьСвойствоСКонтролем(Параметры, "СерияВУ", "Серия");
		ЗаполнитьСвойствоСКонтролем(Параметры, "НомерВУ", "Номер");
		ЗаполнитьСвойствоСКонтролем(Параметры, "ДатаВыдачиВУ", "ДатаВыдачи");
		Если ЗначениеЗаполнено(ДанныеВодителя.ДатаВыдачиВУ) Тогда 
			ДанныеВодителя.ДатаВыдачиВУ = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДанныеВодителя.ДатаВыдачиВУ);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Водитель["ФИО"]) Тогда
		
		Наименование = Водитель["ФИО"]; 
		ЗаполнитьФИО = ЗначениеЗаполнено(Наименование) 
			И Не ЗначениеЗаполнено(ДанныеВодителя.Фамилия);
		
		Если ЗаполнитьФИО Тогда
			ФИО = Saby_ТНОбщегоНазначенияСервер.ФИОИзСтроки(Наименование);
			ЗаполнитьЗначенияСвойств(ДанныеВодителя, ФИО);
		КонецЕсли;
				
	Иначе
		
		Массив = Новый Массив;
		Массив.Добавить(ДанныеВодителя.Фамилия);
		Массив.Добавить(ДанныеВодителя.Имя);
		Массив.Добавить(ДанныеВодителя.Отчество);
		
		Наименование = СокрЛП(СтрСоединить(Массив, " "));
		
	КонецЕсли;
	
	ДанныеВодителя.Вставить("Наименование", Наименование);
	Если ЗначениеЗаполнено(ДанныеВодителя.Телефон) Тогда
		
		МассивТелефонов = Новый Массив;
		Для Каждого Телефон Из ДанныеВодителя.Телефон Цикл  
			МассивТелефонов.Добавить(Телефон["Значение"]);
		КонецЦикла;
		
		ДанныеВодителя.Телефоны = ЗначениеВСтрокуВнутр(МассивТелефонов);
		
	КонецЕсли;
		
	Возврат ДанныеВодителя;
	
КонецФункции

#КонецОбласти // ЗагрузкаТСиВодители

#Область ЗагрузкаДокументыТрН

Функция НайтиСоздатьДокументТрН(ТЗДокументы)
	
	Если Не ЗначениеЗаполнено(ТЗДокументы) Тогда 
		Возврат Неопределено;
	КонецЕсли;
		
	НайденныеДокументы = НайтиДокументыТрН(ТЗДокументы);
	Для Каждого СтрокаДок Из ТЗДокументы Цикл 						
		
		Ссылка = НайденныеДокументы.Получить(СтрокаДок.НомерСтроки);
		Если Не ЗначениеЗаполнено(Ссылка) Тогда 
			НовыйДок = НовыйДокументТрН(СтрокаДок);
			НайденныеДокументы.Вставить(СтрокаДок.НомерСтроки, НовыйДок);
		КонецЕсли;
			
	КонецЦикла;	

	Возврат НайденныеДокументы;
	
КонецФункции

Функция ТаблицаДокументовТрН()
	
	КвалификаторЧисла5 = Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Любой);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номер",        ОписаниеТипаСтрока(255));
	ТЗ.Колонки.Добавить("Дата",         Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТЗ.Колонки.Добавить("ТипДок",       Новый ОписаниеТипов("ПеречислениеСсылка.Saby_ТипыДокумента"));
	ТЗ.Колонки.Добавить("Наименование", ОписаниеТипаСтрока(255)); 
	ТЗ.Колонки.Добавить("Стороны",      ОписаниеТипаСтрока(0));
	ТЗ.Колонки.Добавить("НомерСтроки",  Новый ОписаниеТипов("Число",    КвалификаторЧисла5));
		
	Возврат ТЗ;
	
КонецФункции

Функция ОписаниеТипаСтрока(Длина, ДопустимаяДлинаСтроки = Неопределено)
	
	Если ДопустимаяДлинаСтроки = Неопределено Тогда
		ДопустимаяДлинаСтроки = ДопустимаяДлина.Переменная;
	КонецЕсли;
	
	КвалификаторСтроки = Новый КвалификаторыСтроки(Длина, ДопустимаяДлинаСтроки);
	
	Возврат Новый ОписаниеТипов("Строка", , КвалификаторСтроки);
	
КонецФункции

Функция НайтиДокументыТрН(ТЗ)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ", ТЗ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.Номер КАК Номер,
	|	ТЗ.Дата КАК Дата,
	|	ТЗ.ТипДок КАК ТипДок,
	|	ТЗ.НомерСтроки КАК НомерСтроки,
	|	ТЗ.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номер,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Номер КАК Номер,
	|	ВТ.Дата КАК Дата,
	|	ВТ.ТипДок КАК Тип,
	|	ВТ.Наименование КАК Наименование,
	|	ВТ.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(ЕСТЬNULL(Saby_ДокументыТрН.Ссылка, НЕОПРЕДЕЛЕНО)) КАК Ссылка
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Saby_ДокументыТрН КАК Saby_ДокументыТрН
	|		ПО ВТ.Номер = Saby_ДокументыТрН.Номер
	|			И ВТ.Дата = Saby_ДокументыТрН.Дата
	|			И ВТ.ТипДок = Saby_ДокументыТрН.Тип
	|			И ВТ.Наименование = Saby_ДокументыТрН.Наименование
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Номер,
	|	ВТ.Дата,
	|	ВТ.ТипДок,
	|	ВТ.Наименование,
	|	ВТ.НомерСтроки";	

	Выборка = Запрос.Выполнить().Выбрать();
	
	Соответствие = Новый Соответствие;
	Пока Выборка.Следующий() Цикл 				
		Соответствие.Вставить(Выборка.НомерСтроки, Выборка.Ссылка);		
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

Функция НовыйДокументТрН(Данные)
	
	УстановитьПривилегированныйРежим(Истина);
		
	ОбъектДокТрН = Справочники.Saby_ДокументыТрН.СоздатьЭлемент();	
	ЗаполнитьЗначенияСвойств(ОбъектДокТрН, Данные);
		
	Стороны = ЗначениеИзСтрокиВнутр(Данные.Стороны);
	
	Если ЗначениеЗаполнено(Стороны) Тогда 
		Для Каждого Сторона Из Стороны Цикл
			НС = ОбъектДокТрН.Стороны.Добавить();
			НС.Сторона = ПолучитьЮрЛицо(Сторона, Истина);		
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокТрН.Наименование) Тогда 
		ОбъектДокТрН.Наименование = "№" + Данные.Номер + " от " + Данные.Дата;
	КонецЕсли;	
			
	ОбъектДокТрН.Тип = Данные.ТипДок;
	
	ОбъектДокТрН.Записать();
	
	Возврат ОбъектДокТрН.Ссылка;
	
КонецФункции

Процедура ЗаполнитьДанныеДокументовТрН(ОбъектДок, ДанныеДокументов)
	
	Если Не ЗначениеЗаполнено(ДанныеДокументов) Тогда 
		Возврат;
	КонецЕсли;
		
	ТЗ = ТаблицаДокументовТрН();
		
	СопроводительнаяВедомость = ДанныеДокументов["Ведомость"];
	Груз                      = ДанныеДокументов["Груз"];
	Отгрузка                  = ДанныеДокументов["Отгрузка"];
	ДоговорПеревозки          = ДанныеДокументов["ДоговорНаУслугиПеревозки"];
	ТранспортнаяНакладная     = ДанныеДокументов["ТранспортнаяНакладная"];
	
	// ToDo: когда-нибудь понадобится. Сделана заготовка в формате под будущий функционал... 
	// Расчет перевозки пока не нужен
	
	НомерСтроки = 0;
		
	// СопроводительнаяВедомость
	Если ЗначениеЗаполнено(СопроводительнаяВедомость) Тогда 
		НС = ТЗ.Добавить();
		Тип = Перечисления.Saby_ТипыДокумента.СопроводительнаяВедомость;
		ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, СопроводительнаяВедомость, Тип, НомерСтроки);
	КонецЕсли;
	
	// УслугиПеревозки
	Если ЗначениеЗаполнено(ДоговорПеревозки) Тогда 
		НС = ТЗ.Добавить();	
		Тип = Перечисления.Saby_ТипыДокумента.ДоговорПеревозки;
		ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, ДоговорПеревозки, Тип, НомерСтроки);
	КонецЕсли;
	
	// Груз	
	ДокументыТрН(
		Груз, 
		ТЗ, 
		Перечисления.Saby_ТипыДокумента.КГрузу,
		НомерСтроки);
	
	// Отгрузка - Передача ценностей	
	ДокументыТрН(
		Отгрузка, 
		ТЗ, 
		Перечисления.Saby_ТипыДокумента.ПередачиЦенностей,
		НомерСтроки);	
	
	// ТрН	
	ДокументыТрН(
		ТранспортнаяНакладная, 
		ТЗ, 
		Перечисления.Saby_ТипыДокумента.КТранспортнойНакладной,
		НомерСтроки);	
	
	// За 1 раз
	// Получим ссылки на существующие и новые документы
	СоответствиеДокументов = НайтиСоздатьДокументТрН(ТЗ);
	
	ТипыНеСопроводительныеДокументы = Новый Массив;
	ТипыНеСопроводительныеДокументы.Добавить(Перечисления.Saby_ТипыДокумента.СопроводительнаяВедомость);
	ТипыНеСопроводительныеДокументы.Добавить(Перечисления.Saby_ТипыДокумента.ДоговорПеревозки);
	
	ОчиститьСопроводительныеДокументы(ОбъектДок, ТЗ, ТипыНеСопроводительныеДокументы);
	
	// Заполняем данные по документам
	Для Каждого СтрокаДок Из ТЗ Цикл
		
		СсылкаДок = СоответствиеДокументов.Получить(СтрокаДок.НомерСтроки);
		
		Если СтрокаДок.ТипДок = Перечисления.Saby_ТипыДокумента.СопроводительнаяВедомость Тогда
			
			ОбъектДок.Отправитель_СопроводительнаяВедомость = СсылкаДок;
			
		ИначеЕсли СтрокаДок.ТипДок = Перечисления.Saby_ТипыДокумента.ДоговорПеревозки Тогда
			
			Если ЗначениеЗаполнено(ОбъектДок.Заказчик) Тогда
				ОбъектДок.Заказчик_Договор = СсылкаДок;
			КонецЕсли;
			
		Иначе
			
			// кидаем все в общий список
			НСДок = ОбъектДок.СопроводительныеДокументы.Добавить();
			НСДок.СопроводительныйДокумент = СсылкаДок;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСопроводительныеДокументы(ОбъектДок, ТЗ, ТипыНеСопроводительныеДокументы)
	
	ЕстьСопроводительныеДокументы = Ложь;
	Для Каждого СтрокаДок Из ТЗ Цикл
		Если ТипыНеСопроводительныеДокументы.Найти(СтрокаДок.ТипДок) = Неопределено Тогда
			ЕстьСопроводительныеДокументы = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьСопроводительныеДокументы Тогда
		ОбъектДок.СопроводительныеДокументы.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(Строка, Данные, Тип, НомерСтроки = 0)
	
	НомерСтроки = НомерСтроки + 1;
	
	Строка.Наименование = СокрЛП(Данные["Наименование"]);
	Строка.Номер        = СокрЛП(Данные["Номер"]);
	Строка.Дата         = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(Данные["Дата"]);
	Строка.ТипДок       = Тип;
	Строка.Стороны      = ЗначениеВСтрокуВнутр(Данные["Стороны"]);
	Строка.НомерСтроки  = НомерСтроки;
	
КонецПроцедуры	

Процедура ДокументыТрН(Массив, ТЗ, Тип, НомерСтроки)
	
	Если Не ЗначениеЗаполнено(Массив) Тогда 
		Возврат;
	КонецЕсли;
		
	Для Каждого Док Из Массив Цикл  
		НС = ТЗ.Добавить();	
		ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, Док, Тип, НомерСтроки);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти // ЗагрузкаДокументыТрН

#Область ЗагрузкаГруза

Процедура ЗаполнитьДанныеПоГрузам(ОбъектДок, ДанныеГруз)
	
	Если Не ЗначениеЗаполнено(ДанныеГруз) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДок.Валюта = ВалютаПоДаннымОнлайна(ДанныеГруз, ОбъектДок.Валюта);
	
	МаксКлюч = 1; 
	
	Позиции = ДанныеГруз["Позиция"];	
	Если Не ЗначениеЗаполнено(Позиции) Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектДок.Грузы.Очистить();
	ОбъектДок.Контейнеры.Очистить();
	ОбъектДок.Маркировки.Очистить();
	ОбъектДок.ОпасныеГрузы.Очистить();
	ОбъектДок.СведенияГосСистем.Очистить();
	
	Для Каждого Груз Из Позиции Цикл 
		
		НС = ОбъектДок.Грузы.Добавить();				
		
		НС.КлючСтроки = МаксКлюч; 
		
		Параметры = ПараметрыСвойстваСКонтролем(НС, Груз);
		ЗаполнитьСвойствоСКонтролем(Параметры, "СпособУпаковки", "Упаковка");				
		ЗаполнитьСвойствоСКонтролем(Параметры, "Примечание",     "ДопИнформация");
		ЗаполнитьСвойствоСКонтролем(Параметры, "Состояние");
		ЗаполнитьСвойствоСКонтролем(Параметры, "Наименование"); 
		
		// Параметры груза
		ПараметрыГруза = Груз["Параметры"];
		Если ЗначениеЗаполнено(ПараметрыГруза) Тогда
			
			Параметры.Источник = ПараметрыГруза;
			
			ЗаполнитьСвойствоСКонтролем(Параметры, "Количество",       "КоличествоМест", Истина);
			ЗаполнитьСвойствоСКонтролем(Параметры, "КоличествоПаллет", ,                 Истина);
			
			ЗаполнитьСвойствоСКонтролем(Параметры, "Длина",     , Истина);
			ЗаполнитьСвойствоСКонтролем(Параметры, "Высота",    , Истина);
			ЗаполнитьСвойствоСКонтролем(Параметры, "Ширина",    , Истина);
			ЗаполнитьСвойствоСКонтролем(Параметры, "Объем",     , Истина);	
			ЗаполнитьСвойствоСКонтролем(Параметры, "Плотность", , Истина);
			
		КонецЕсли;
		
		МассаГруза = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Груз, "Параметры.Масса");
		Если ЗначениеЗаполнено(МассаГруза) Тогда 
			
			Параметры.Источник = МассаГруза; 
			ЗаполнитьСвойствоСКонтролем(Параметры, "МассаБрутто", "Брутто");
			ЗаполнитьСвойствоСКонтролем(Параметры, "МассаНетто",  "Нетто");
			
		КонецЕсли;
		
		Стоимость = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Груз, "Стоимость.ВключаяНДС");
		НС.Стоимость = ?(ЗначениеЗаполнено(Стоимость), Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(Стоимость), 0);
		НС.Валюта = ВалютаПоДаннымОнлайна(Груз);
		НС.ВидТары = НайтиСоздатьВидУпаковки(Груз["ТараКод"]);  			
		
		Контейнеры = Груз["Контейнер"];
		НС.Тип = ?(ЗначениеЗаполнено(Контейнеры), Перечисления.Saby_ТипГруза.Контейнер, Перечисления.Saby_ТипГруза.Груз);
		ЗаполнитьКонтейнеры(Контейнеры, ОбъектДок, МаксКлюч);
		
		ЗаполнитьМаркировки(Груз["Маркировка"], ОбъектДок, МаксКлюч);
		
		ЗаполнитьОпасныеГрузы(Груз["ОпасныйГруз"], ОбъектДок, МаксКлюч);
		
		ЗаполнитьСведенияГИС(Груз["СведенияГИС"], ОбъектДок, НС, МаксКлюч);
		
		МаксКлюч = МаксКлюч + 1;
		
	КонецЦикла;	
		
КонецПроцедуры

Функция НайтиСоздатьВидУпаковки(Код)
	
	Если Код = Неопределено Тогда
		Возврат Справочники.Saby_ВидыУпаковки.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаВидУпаковки = Справочники.Saby_ВидыУпаковки.НайтиПоКоду(Код);
	Если Не ЗначениеЗаполнено(СсылкаВидУпаковки) Тогда 		
		
		ОбъектВидУпаковки = Справочники.Saby_ВидыУпаковки.СоздатьЭлемент();
		ОбъектВидУпаковки.Код          = Код;
		ОбъектВидУпаковки.Наименование = Код;
		
		ОбъектВидУпаковки.Записать();
		
		СсылкаВидУпаковки  = ОбъектВидУпаковки.Ссылка;
		
	КонецЕсли;
	
	Возврат СсылкаВидУпаковки;
	
КонецФункции
	
Функция ОпасныйГруз(СтрокаОпасн)
	
	СсылкаОГ = Справочники.Saby_ОпасныеГрузы.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(СтрокаОпасн) 
		Или Не ЗначениеЗаполнено(СтрокаОпасн["Наименование"]) Тогда 
		Возврат СсылкаОГ;
	КонецЕсли;	
			
	// поиск существующей записи 
	Наименование = СтрокаОпасн["Наименование"];
	ОтгрузочноеНаименование = Наименование["Отгрузочное"];
	
	// 1 поиск по наименованию
	СсылкаОГ = Справочники.Saby_ОпасныеГрузы.НайтиПоНаименованию(ОтгрузочноеНаименование);
	// 2 поиск по тех наименованию
	Если Не ЗначениеЗаполнено(СсылкаОГ) Тогда 
		СсылкаОГ = Справочники.Saby_ОпасныеГрузы.НайтиПоРеквизиту("ТехническоеНаименование", Наименование["Техническое"]);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаОГ) Тогда 
		
		ОбъектОГ = Справочники.Saby_ОпасныеГрузы.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ОбъектОГ, СтрокаОпасн); 
		
		ОбъектОГ.УстановитьНовыйКод();
		ОбъектОГ.Наименование            = ОтгрузочноеНаименование;
		ОбъектОГ.ПолноеНаименование      = ОтгрузочноеНаименование;
		ОбъектОГ.ТехническоеНаименование = Наименование["Техническое"];
		
		Если ЗначениеЗаполнено(СтрокаОпасн["Класс"]) Тогда
			ОбъектОГ.Класс = Перечисления.Saby_КлассыОпасностиГрузов.ЗначениеПоКоду(СтрокаОпасн["Класс"]);
		КонецЕсли;
		
		Упаковка = СтрокаОпасн["Упаковка"];
		Если ЗначениеЗаполнено(Упаковка) Тогда
			
			ОбъектОГ.ГруппаУпаковки         = Упаковка["Группа"];
			ОбъектОГ.КатегорияУпаковки      = Упаковка["Категория"];
			ОбъектОГ.ГруппаУпаковкиЗначение = Перечисления.Saby_ГруппыУпаковки.ЗначениеПоКоду(Упаковка["Группа"]);
			
		КонецЕсли;
						
		Температура = СтрокаОпасн["Температура"];
		Если ЗначениеЗаполнено(Температура) Тогда 
			
			ОбъектОГ.КонтрольнаяТемпература = Температура["Контрольная"];
			ОбъектОГ.АварийнаяТемпература   = Температура["Аварийная"];
			
		КонецЕсли;		
		
		Радиоактивный = СтрокаОпасн["Радиоактивный"];
		Если ЗначениеЗаполнено(Радиоактивный) Тогда
			
			ОбъектОГ.НазваниеРадионуклида = Радиоактивный["Радионуклид"];
			ОбъектОГ.ПолнаяАктивность     = Радиоактивный["ПолнаяАктивность"];
			ОбъектОГ.МаксАктивность       = Радиоактивный["МаксАктивность"];
			
		КонецЕсли;		
		
		Взрывчатый = СтрокаОпасн["Взрывчатый"];
		Если ЗначениеЗаполнено(Взрывчатый) Тогда 
			
			ОбъектОГ.МассаНеттоВзрывчатый      = Взрывчатый["МассаНетто"];
			ОбъектОГ.МассаНеттоВзрывчатыйВсего = Взрывчатый["МассаНеттоДляВсех"];
						
		КонецЕсли;		
		
		Параметры = ПараметрыСвойстваСКонтролем(ОбъектОГ, СтрокаОпасн);
		ЗаполнитьСвойствоСКонтролем(Параметры, "НомерООН",             "НомерООН");
		ЗаполнитьСвойствоСКонтролем(Параметры, "ФизИХимФорма",         "ФизХимФорма");
		ЗаполнитьСвойствоСКонтролем(Параметры, "ТранспортныйИндекс",   "ТранспортныйИндекс");
		ЗаполнитьСвойствоСКонтролем(Параметры, "ЗнакОпасности",        "ЗнакОпасности");
		ЗаполнитьСвойствоСКонтролем(Параметры, "ИндексБезопасности",   "ИндексБезопасности");
		ЗаполнитьСвойствоСКонтролем(Параметры, "ОпознавательныйЗнак",  "ОпознавательныйЗнак");
		ЗаполнитьСвойствоСКонтролем(Параметры, "ПроцентСмеси",         "ПроцентныйСоставСмеси");
		ЗаполнитьСвойствоСКонтролем(Параметры, "Комментарий",          "Описание");
		ЗаполнитьСвойствоСКонтролем(Параметры, "КлассификационныйКод", "КлассификационныйКод");
		
		ОбъектОГ.Записать();
		
		СсылкаОГ = ОбъектОГ.Ссылка;
		
	КонецЕсли;
	
	Возврат СсылкаОГ;
	
КонецФункции

Процедура ЗаполнитьКонтейнеры(Контейнеры, ОбъектДок, МаксКлюч)
	
	Если Не ЗначениеЗаполнено(Контейнеры) Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Контейнер Из Контейнеры Цикл						
		КоличествоКонтейнеров = Контейнер["Количество"];
		Для Каждого СтрокаКонт Из Контейнер["Номер"] Цикл								
			
			НСКонт = ОбъектДок.Контейнеры.Добавить();
			НСКонт.Номер            = СтрокаКонт["Значение"];
			НСКонт.КлючСтроки_Грузы = МаксКлюч;
			
			Если ЗначениеЗаполнено(КоличествоКонтейнеров) Тогда 
				НСКонт.Количество = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(КоличествоКонтейнеров);
			Иначе 
				НСКонт.Количество = 1;
			КонецЕсли;	
			
		КонецЦикла;						
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМаркировки(Маркировка, ОбъектДок, МаксКлюч)
	
	Если Не ЗначениеЗаполнено(Маркировка) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаМарк Из Маркировка Цикл
		
		НСМарк = ОбъектДок.Маркировки.Добавить();
		НСМарк.Значение         = СтрокаМарк["Значение"]; 
		НСМарк.КлючСтроки_Грузы = МаксКлюч;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОпасныеГрузы(ОпасныйГруз, ОбъектДок, МаксКлюч)
	
	Если Не ЗначениеЗаполнено(ОпасныйГруз) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОпасн Из ОпасныйГруз Цикл
		
		ОпасныйГруз = ОпасныйГруз(СтрокаОпасн);
		Если Не ЗначениеЗаполнено(ОпасныйГруз) Тогда
			Продолжить;
		КонецЕсли;
		
		НСОпасныйГруз = ОбъектДок.ОпасныеГрузы.Добавить();
		НСОпасныйГруз.КлючСтроки_Грузы = МаксКлюч;
		НСОпасныйГруз.ОпасныйГруз      = ОпасныйГруз(СтрокаОпасн);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияГИС(СведенияГИС, ОбъектДок, НС, МаксКлюч)
	
	Если Не ЗначениеЗаполнено(СведенияГИС) Тогда  
		Возврат;
	КонецЕсли;
				
	НС.НаименованиеГосСистемы   = СведенияГИС["Наименование"];
	НС.УчетнаяЕдиницаГосСистемы = СведенияГИС["УчетнаяЕдиница"];
	НС.ИнаяИнформацияГосСистемы = СведенияГИС["ДругаяИнформация"];
	
	Для Каждого СтрокаГос Из СведенияГИС["Идентификатор"] Цикл
		
		НСГос = ОбъектДок.СведенияГосСистем.Добавить();
		НСГос.КлючСтроки_Грузы = МаксКлюч;
		НСГос.Идентификатор    = СтрокаГос["Значение"];
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВалютаПоДаннымОнлайна(ДанныеГруз, Знач ЗначениеПоУмолчанию = Неопределено)
	
	КодВалютыРубль = "643";
	
	Если ЗначениеПоУмолчанию = Неопределено Тогда
		ЗначениеПоУмолчанию = ВалютаПоКоду(КодВалютыРубль);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеГруз["Стоимость"]) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Валюта = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеГруз, "Стоимость.Валюта");
	Если ЗначениеЗаполнено(Валюта) Тогда 
		Возврат ВалютаПоКоду(Валюта["Код"]);
	Иначе 
		Возврат ВалютаПоКоду(КодВалютыРубль);
	КонецЕсли;
	
КонецФункции

Функция ВалютаПоКоду(Код)
	
	РезультатФункции = Справочники.Валюты.ПустаяСсылка();
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Валюта.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюта
	|ГДЕ
	|	Валюта.Код = &Код";
	
	ЗапросДанных.УстановитьПараметр("Код", Код);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		РезультатФункции = ВыборкаДанных.Ссылка;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ЗагрузкаГруза

#Область ЗагрузкаОтметок

Функция ДанныеПоОтметкам(ОтметкиСОнлайна, Титул)
	
	РезультатФункции = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ОтметкиСОнлайна) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	ЗначениеРоли = ЗначениеРолиПоТекущемуТитулу(Титул);
	
	Для Каждого Отметка Из ОтметкиСОнлайна["Отметка"] Цикл
		
		СтруктураОтметки = Новый Структура;
		
		СтруктураОтметки.Вставить("Описание",  Отметка["Описание"]);
		СтруктураОтметки.Вставить(
			"ДатаВремя",
			Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(Отметка["ДатаВремя"]["Значение"]));
		СтруктураОтметки.Вставить("Этап",      Титул);
		СтруктураОтметки.Вставить("Роль",      ЗначениеРоли);

		СтруктураОтметки.Вставить("Штрафы",    ДанныеШтрафовПоОтметкам(Отметка["Штрафы"]));
		СтруктураОтметки.Вставить("Акты",      ДанныеАктовПоОтметкам(Отметка["АктыВзвешивания"], Отметка["Акты"]));
		
		РезультатФункции.Добавить(СтруктураОтметки);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеШтрафовПоОтметкам(ШтрафыСОнлайна)
	
	РезультатФункции = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ШтрафыСОнлайна) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Для Каждого Штраф Из ШтрафыСОнлайна Цикл 
		
		СтруктураШтрафа = Новый Структура;
		// ToDo:  Валюта 
		СтруктураШтрафа.Вставить("Количество", Штраф["Количество"]);
		СтруктураШтрафа.Вставить("Сумма",      Штраф["Итог"]);
		СтруктураШтрафа.Вставить("Расчет",     Штраф["Расчет"]);
		
		РезультатФункции.Добавить(СтруктураШтрафа);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеАктовПоОтметкам(АктыВзвешиванияСОнлайна, АктыКоммерческиеСОнлайна)
	
	РезультатФункции = Новый Массив;
	
	НомерСтроки = 0;
		
	ТаблицаАктов = ТаблицаДокументовТрН();
	
	ДокументыТрН(
		АктыВзвешиванияСОнлайна, 
		ТаблицаАктов, 
		Перечисления.Saby_ТипыДокумента.АктВзвешивания,
	    НомерСтроки);
	
	ДокументыТрН(
		АктыКоммерческиеСОнлайна, 
		ТаблицаАктов, 
		Перечисления.Saby_ТипыДокумента.АктКоммерческий,
	    НомерСтроки);
	
	// Получим ссылки на существующие и новые документы СправочникСсылка.Saby_ДокументыТрН
	СоответствиеДокументов = НайтиСоздатьДокументТрН(ТаблицаАктов);
	
	Для Каждого СтрокаАкта Из ТаблицаАктов Цикл
		
		СсылкаНаСправочник = СоответствиеДокументов.Получить(СтрокаАкта.НомерСтроки);
		
		СтруктураАкта = Новый Структура;
		СтруктураАкта.Вставить("Документ", СсылкаНаСправочник);
		
		РезультатФункции.Добавить(СтруктураАкта);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьДанныеПоОтметкам(ОбъектДок, Отметки, Титул)
	
	КлючСтроки   = МаксимальныйКлючОтметки(ОбъектДок.Отметки);
	ЗначениеРоли = ЗначениеРолиПоТекущемуТитулу(Титул);
	
	Saby_ТНОбщегоНазначенияСервер.ЗачисткаОтметокШтрафовАктов(ОбъектДок, Титул, ЗначениеРоли);
	
	Для Каждого СтруктураОтметки Из Отметки Цикл
		
		СтрокаОтметки = ОбъектДок.Отметки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОтметки, СтруктураОтметки);
		СтрокаОтметки.КлючСтроки = КлючСтроки;
		
		Для Каждого СтруктураШтрафа Из СтруктураОтметки.Штрафы Цикл
			СтрокаШтрафа = ОбъектДок.Штрафы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаШтрафа, СтруктураШтрафа);
			СтрокаШтрафа.КлючСтроки_Отметки = КлючСтроки;
		КонецЦикла;
		
		Для Каждого СтруктураАкта Из СтруктураОтметки.Акты Цикл
			СтрокаАкта = ОбъектДок.Акты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаАкта, СтруктураАкта);
			СтрокаАкта.КлючСтроки_Отметки = КлючСтроки;
		КонецЦикла;
		
		КлючСтроки = КлючСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоОтметкамДокумента(ОбъектДок, Отметки, Титул)
	
	// ToDo: Возможно понадобится фильтр по этапам...
	// очистка отметок и штрафов
	
	Если Не ЗначениеЗаполнено(Отметки) Тогда 
		Возврат;
	КонецЕсли;
		
	МаксКлюч = МаксимальныйКлючОтметки(ОбъектДок.Отметки);
		
	ЗначениеРоли = ЗначениеРолиПоТекущемуТитулу(Титул);
	
	// Находим строки В отметках к текущему титулу
	// чистим отметки штрафы и акты	       	
	Saby_ТНОбщегоНазначенияСервер.ЗачисткаОтметокШтрафовАктов(ОбъектДок, Титул, ЗначениеРоли);
	
	Для Каждого Отметка Из Отметки["Отметка"] Цикл
		
		НС = ОбъектДок.Отметки.Добавить();
		
		НС.Описание   = Отметка["Описание"];
		НС.ДатаВремя  = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(Отметка["ДатаВремя"]["Значение"]);
		НС.КлючСтроки = МаксКлюч;		
		НС.Этап       = Титул;
		НС.Роль       = ЗначениеРоли;
		
		// Штрафы           
		Штрафы = Отметка["Штрафы"];
		Если ЗначениеЗаполнено(Штрафы) Тогда 
			Для Каждого Штраф Из Штрафы Цикл 
				
				НСШтраф = ОбъектДок.Штрафы.Добавить();
				// ToDo:  Валюта 				
				НСШтраф.Количество = Штраф["Количество"];
				НСШтраф.Сумма      = Штраф["Итог"];
				НСШтраф.Расчет     = Штраф["Расчет"];
				
				НСШтраф.КлючСтроки_Отметки = МаксКлюч; 
				
			КонецЦикла;
		КонецЕсли;
			
		НомерСтроки = 0;
		
		ТЗ = ТаблицаДокументовТрН();
		
		// Акты взвешивания  		
		ДокументыТрН(
			Отметка["АктыВзвешивания"], 
			ТЗ, 
			Перечисления.Saby_ТипыДокумента.АктВзвешивания,
		    НомерСтроки);
		
		// Акты коммерческие
		ДокументыТрН(
			Отметка["Акты"], 
			ТЗ, 
			Перечисления.Saby_ТипыДокумента.АктКоммерческий,
		    НомерСтроки);
		
		// Получим ссылки на существующие и новые документы
		СоответствиеДокументов = НайтиСоздатьДокументТрН(ТЗ);
		
		// Заполняем данные по документам
		Для Каждого СтрокаДок Из ТЗ Цикл 
			
			СсылкаДок = СоответствиеДокументов.Получить(СтрокаДок.НомерСтроки);
			
			// кидаем все в общий список			
			НСДок = ОбъектДок.Акты.Добавить();
			НСДок.КлючСтроки_Отметки = МаксКлюч;
			НСДок.Документ           = СсылкаДок;
			
		КонецЦикла;
		
		МаксКлюч = МаксКлюч + 1;
		
	КонецЦикла;
		
КонецПроцедуры

Функция МаксимальныйКлючОтметки(Отметки)
	
	// брать из последней записи будет не корректно
	МаксНомер = 0;
	Для Каждого Отметка Из Отметки Цикл
		МаксНомер = Макс(МаксНомер, Отметка.КлючСтроки); 
	КонецЦикла;	
	
	Возврат МаксНомер + 1;
	
КонецФункции	

Функция ЗначениеРолиПоТекущемуТитулу(Титул)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.Погрузка, 
		Перечисления.Saby_РолиКонтрагентов.Отправитель);
	
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.ПолучениеГруза, 
		Перечисления.Saby_РолиКонтрагентов.Перевозчик);
	
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза, 
		Перечисления.Saby_РолиКонтрагентов.Получатель);	 		
	
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.ВыдачаГруза, 	
		Перечисления.Saby_РолиКонтрагентов.Перевозчик);
		
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.Переадресовка, 
		Перечисления.Saby_РолиКонтрагентов.Перевозчик);
		
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.ПереадресовкаУведомление, 
		Перечисления.Saby_РолиКонтрагентов.Отправитель);
		
	Возврат Соответствие.Получить(Титул);	
		
КонецФункции

#КонецОбласти // ЗагрузкаОтметок

// Дополнительные параметры для загрузки вложения: установка просмотрено, 
// загрузка только активного этапа, загрузка через INI
// Параметры:
// 	Параметры - Структура - данные для расчета значений доп. параметров
// 
// Возвращаемое значение:
// 	Структура - дополинтельные параметры загрузки
//
Функция ДопПараметрыЗагрузкиВложения(Параметры = Неопределено)
	
	ТолькоАктивныйЭтап = Параметры <> Неопределено
		И Параметры.Свойство("ТолькоАктивныйЭтап")
		И Параметры.ТолькоАктивныйЭтап;
	
	РезультатФункции = Новый Структура;	
	РезультатФункции.Вставить("ЗагрузкаСОнлайна",   Истина);
	РезультатФункции.Вставить("Просмотрено",        Ложь);
	РезультатФункции.Вставить("ТолькоАктивныйЭтап", ТолькоАктивныйЭтап);
	РезультатФункции.Вставить("События",            Неопределено);
	
	Если Параметры <> Неопределено Тогда  
		
		РезультатФункции.Просмотрено = Параметры.ТекущийТитул <> Неопределено;
		РезультатФункции.События     = Параметры.ДанныеДокумента["Событие"];
		
		Если Параметры.ЭтоЗаполнениеСПомощьюINI Тогда 
			РезультатФункции.ЗагрузкаСОнлайна = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СохранитьДокумент(ОбъектДок, ИД, АктивныйЭтап, Состояние, ИзДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ОбъектДок.Ссылка) Тогда 
			
			ОбъектДок.УстановитьНовыйНомер();
			Если Не ЗначениеЗаполнено(ОбъектДок.Дата) Тогда 
				ОбъектДок.Дата = ТекущаяДатаСеанса(); 				
			КонецЕсли;
			
		КонецЕсли;		
		
		ОбъектДок.Записать();
		
		Ссылка = ОбъектДок.Ссылка;
		
		// выкручиваемся через SbisId
		// больше писать не куда...
		Если Не ИзДокумента Тогда			
			Просмотрен = "Не просмотрен";  			
		Иначе 
			Просмотрен = "";
		КонецЕсли;
		
		РегистрыСведений.Saby_Состояние.ОбновитьПоUID(ИД, СокрЛП(АктивныйЭтап), Состояние, Ссылка, , , Просмотрен);
		
	Исключение		
		Ссылка = Неопределено;		
	КонецПопытки;	
	
	Возврат Ссылка;
	
КонецФункции

Функция ТитулыДляЗагрузки(ОбъектДок, Параметры)
	
	ТекущиеЗначения = ТекущиеЗначенияДокумента(ОбъектДок, Параметры);
	
	ТолькоАктивныйЭтап = Параметры.Свойство("ТолькоАктивныйЭтап") И Параметры.ТолькоАктивныйЭтап;
	
	Этап = Перечисления.Saby_ТипТитулаЭтрН.ЗначениеПоПредставлению(ТекущиеЗначения.Титул);
	
	Если ЗначениеЗаполнено(ТекущиеЗначения.Состояние) Тогда  
	   КодСостояния = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеЗначения.Состояние, "ИдентификаторСБИС");
	КонецЕсли;   
	
	ТипыТитулов = Перечисления.Saby_ТипТитулаЭтрН.ВсеТипыТитулов();
	
    МассивТитуловДляЗагрузки = Новый Массив;
	
	ДОЗавершенУспешно      = 7;
	ДОЗавершенОтрицательно = 9;
	
	Если КодСостояния = ДОЗавершенУспешно
		Или КодСостояния = ДОЗавершенОтрицательно Тогда
		
		Если ТолькоАктивныйЭтап Тогда
			МассивТитуловДляЗагрузки.Добавить(Этап);
		Иначе
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ВыдачаГруза);
			// - стоимость может быть изменена уже после завершения ДО
			// исключение из общей схемы
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ИзменениеСтоимости);
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.СогласованиеСтоимости);
		КонецЕсли;
		
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.УведомлениеОУточнении);
		
		Возврат МассивТитуловДляЗагрузки;	
		
	КонецЕсли;	
	
	// Если динамический титул, то всегда читаем только его.
	// Никакие дополнительные данные не нужны, так как его считываем сразу после отправки, когда основные титулы загружены.
	Если Перечисления.Saby_ТипТитулаЭтрН.ЭтоДинамическийТитул(Этап) Тогда
		
		МассивТитуловДляЗагрузки.Добавить(Этап);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.УведомлениеОУточнении);
		
		Возврат МассивТитуловДляЗагрузки;
		
	КонецЕсли;
	
	Если ТолькоАктивныйЭтап Тогда
		
		// В регистре состояния нет данных о текущем этапе, при этом документооборот не завершен.
		Если Этап = Неопределено Тогда
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.Погрузка);
		Иначе
			МассивТитуловДляЗагрузки.Добавить(Этап);
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.УведомлениеОУточнении);
		КонецЕсли;
		
	Иначе
		
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.Погрузка);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ПолучениеГруза);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ПриемкаГруза);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ВыдачаГруза);
		
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.Переадресовка);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ЗаменаВодителяТС);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ПереадресовкаУведомление);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ИзменениеСтоимости);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.СогласованиеСтоимости);
		
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.УведомлениеОУточнении);
		
	КонецЕсли;
	
	Возврат МассивТитуловДляЗагрузки;

КонецФункции

Процедура ЗагрузитьДополнительныеДействия(ОбъектДок, ДопДействия)
	
	Если ЗначениеЗаполнено(ОбъектДок.Ссылка) Тогда 
		ОбъектДок.ДоступныеДействия.Очистить();	  
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДопДействия) Тогда 
		Возврат; 
	КонецЕсли;
	
	Для Каждого Действие Из ДопДействия Цикл 
		
		Значение = ЗначениеДопДействия(Действие["Название"]);
		Если ЗначениеЗаполнено(Значение) Тогда 
			НС = ОбъектДок.ДоступныеДействия.Добавить();
			НС.Действие = Значение;
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры

Функция ЗначениеДопДействия(Действие)
	
	Если Действие = "Уведомление о переадресовке" Тогда 
		Значение = Перечисления.Saby_ДоступныеДействия.УведомлениеОПереадресовке;
	ИначеЕсли Действие = "Изменить стоимость" Тогда
		Значение = Перечисления.Saby_ДоступныеДействия.ИзменитьСтоимость;
	ИначеЕсли Действие = "Согласовать стоимость" Тогда	
		Значение = Перечисления.Saby_ДоступныеДействия.СогласоватьСтоимость;
	ИначеЕсли Действие = "Замена водителей/ТС" Тогда
		Значение = Перечисления.Saby_ДоступныеДействия.ЗаменаВодителяТС;
	ИначеЕсли Действие = "Переадресовка" Тогда 	 
		Значение = Перечисления.Saby_ДоступныеДействия.Переадресовка;
	Иначе
		// не нашли соотвествия
		Значение = Неопределено;
	КонецЕсли;
	 		 
	Возврат Значение;
	
КонецФункции

#КонецОбласти // ЗагрузитьДокументИзJson

Процедура УстановитьДокументОснование(ОбъектДок, Параметры)
	
	Если Не Параметры.ЭтоЗаполнениеСПомощьюINI Или Не ЗначениеЗаполнено(Параметры.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДок.ДокументОснование_ОбъектМетаданных = Saby_ТНОбщегоНазначенияСервер.ИмяМетаданныхДокумента(
		Параметры.ДокументОснование);
	
	Если ЗначениеЗаполнено(ОбъектДок.ДокументОснование_ОбъектМетаданных) Тогда 
		ОбъектДок.ДокументОснование_Идентификатор = Параметры.ДокументОснование.УникальныйИдентификатор();
	Иначе
		ОбъектДок.ДокументОснование_Идентификатор = "";
	КонецЕсли;
	
КонецПроцедуры

#Область Заполнение_С_Контролем

Функция ПараметрыСвойстваСКонтролем(Приемник, Источник)
	
	Параметры = Новый Структура;
	Параметры.Вставить("Приемник",  Приемник);
	Параметры.Вставить("Источник",  Источник);
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗаполнитьСвойствоСКонтролем(Параметры, ИмяРеквизита, ИмяСвойства = "", ВЧисло = Ложь)
	
	Приемник = Параметры.Приемник; 
	Источник = Параметры.Источник;  
	
	Если ПустаяСтрока(ИмяСвойства) Тогда 
		ИмяСвойства = ИмяРеквизита;
	КонецЕсли;
		
	// Проверка На значениение заполнено не совсем корректно, так как данные могут затираться
	Если Источник[ИмяСвойства] <> Неопределено Тогда
		Если ВЧисло Тогда
			Приемник[ИмяРеквизита] = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(Источник[ИмяСвойства]);
		Иначе                                             		
			Приемник[ИмяРеквизита] = Источник[ИмяСвойства]; 		
		КонецЕсли;	                                      
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Заполнение_С_Контролем

Функция СтруктураБезПустыхЗначений(ИсходнаяСтруктура)
	
	РезультатФункции = Новый Структура;
	
	Для Каждого КлючЗначение Из ИсходнаяСтруктура Цикл
		Если ЗначениеЗаполнено(КлючЗначение.Значение)
			Или ТипЗнч(КлючЗначение.Значение) = Тип("Массив") Тогда
			РезультатФункции.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ЗагрузитьОдиночныйДокументЭТрН(Данные, Тип)
	
	ТЗ = ТаблицаДокументовТрН();
	НС = ТЗ.Добавить();
		
	ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, Данные, Тип); 
	
	СоответствиеДокументов = НайтиСоздатьДокументТрН(ТЗ);
	
	Возврат СоответствиеДокументов.Получить(1);
	
КонецФункции

Функция ДанныеСчетаИзРеквизитовОнлайна(ДанныеСОнлайна, СсылкаНаЮрЛицо)
	
	РезультатФункции = Новый Структура;
	
	Если Не ЗначениеЗаполнено(ДанныеСОнлайна) И Не ЗначениеЗаполнено(ДанныеСОнлайна["Реквизиты"]) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
		
	БанкРеквизиты = ДанныеСОнлайна["Реквизиты"]["Банковские"];
	
	// получим или создадим расчетный счет
	РасчетныйСчет = РасчетныйСчетПоРеквизитам(БанкРеквизиты, СсылкаНаЮрЛицо);	
	Если Не ЗначениеЗаполнено(РасчетныйСчет) Тогда 
		
		РезультатФункции.Вставить("НомерСчета", БанкРеквизиты["НомерСчета"]);
		
		Банк = БанкРеквизиты["Банк"];
		Если ЗначениеЗаполнено(Банк) Тогда 
			
			НаименованиеБанк = Банк["Наименование"];
			Если ЗначениеЗаполнено(НаименованиеБанк) Тогда
				БанкНазвание = НаименованиеБанк["Полное"];
			КонецЕсли;
		
			БанкБИК      = Банк["БИК"];
			БанкКоррСчет = Банк["КоррСчет"]; 
			
			РезультатФункции.Вставить("БанкНазвание", БанкНазвание);
			РезультатФункции.Вставить("БанкБИК",      БанкБИК);
			РезультатФункции.Вставить("БанкКоррСчет", БанкКоррСчет);
			
		КонецЕсли;
		
	Иначе 
		РезультатФункции.Вставить("РасчетныйСчет", РасчетныйСчет);				
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция РегНомерБезЛишнихСимволов(РегНомер)
	
	РегНомер = СтрЗаменить(РегНомер, " ", "");
	РегНомер = СокрЛП(РегНомер);
	РегНомер = ВРег(РегНомер);
	
	Возврат РегНомер;
	
КонецФункции

Функция РасчетныйСчетПоРеквизитам(БанкРеквизиты, Владелец)
	
	 НомерСчета = СокрЛП(БанкРеквизиты["НомерСчета"]); 
	
	 ЕстьСправочникБанкСчета = Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено;
	 
	 Если ЕстьСправочникБанкСчета Тогда 
		 
		 ТестЗапроса = 
		 "ВЫБРАТЬ
		 |	БанковскиеСчета.Ссылка КАК Ссылка
		 |ИЗ
		 |	Справочник.БанковскиеСчета КАК БанковскиеСчета
		 |ГДЕ
		 |	БанковскиеСчета.Владелец = &Владелец
		 |	И БанковскиеСчета.НомерСчета = &НомерСчета
		 |";
		 
	 Иначе 
		 
		 ТестЗапроса = 
		 "ВЫБРАТЬ
		 |	БанковскиеСчетаОрганизаций.Ссылка КАК Ссылка
		 |ИЗ
		 |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		 |ГДЕ
		 |	БанковскиеСчетаОрганизаций.Владелец = &Владелец
		 |	И БанковскиеСчетаОрганизаций.НомерСчета = &НомерСчета
		 |
		 |ОБЪЕДИНИТЬ ВСЕ
		 |
		 |ВЫБРАТЬ
		 |	БанковскиеСчетаКонтрагентов.Ссылка
		 |ИЗ
		 |	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		 |ГДЕ
		 |	БанковскиеСчетаКонтрагентов.Владелец = &Владелец
		 |	И БанковскиеСчетаКонтрагентов.НомерСчета = &НомерСчета";
		 		 	 
	 КонецЕсли;
	 
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("Владелец",   Владелец);
	 Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	 
	 Запрос.Текст = ТестЗапроса;
	 
	 Выборка = Запрос.Выполнить().Выбрать();
	 Если Выборка.Следующий() Тогда 
		 // нашли
		 РасчетныйСчет = Выборка.Ссылка;
	 Иначе 
		 РасчетныйСчет = Неопределено;
	 КонецЕсли;
	 
	 Возврат РасчетныйСчет;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
