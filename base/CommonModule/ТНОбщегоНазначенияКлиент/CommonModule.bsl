
#Область ПрограммныйИнтерфейс

&НаКлиенте
// Авторизация в сервисе
// Параметры:
//  Команда - Строка - имя команды
//	ЭтаФорма - ФормаКлиентскогоПриложения - источник авторизации
//
// Возвращаемое значение:
//  Структура - данные авторизации, в противном случае Неопределено
Функция АвторизацияSaby(Команда, ЭтаФорма) Экспорт
	
	context_params	= ВыполнитьНаСервере("Saby_Core.ПроверитьНаличиеПараметровПодключения", Неопределено);
	
	Если context_params = Неопределено Тогда
		
	    Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Вы не авторизованы! Выполните авторизацию и повторите команду";
		Сообщение.Сообщить();	
		
		ПараметрыОткрытияФормыОбработки = ПараметрыОткрытияФормыОбработки("Обработка.SABY.Форма.Вход");
		ПараметрыОткрытияФормыОбработки.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФормуОбработки(ПараметрыОткрытияФормыОбработки);
		
		Возврат Неопределено;
						
	КонецЕсли;	
	
	Возврат context_params;
		
КонецФункции

#Область КомандыСбис

&НаКлиенте
// Выполнить обмен данными из Формы списка 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - источник вызова выполнения 
//  ИмяКоманды - Строка - имя команды, которую требуется выполнить  
//  ДополнительныеПараметры - Структура - дополнительные параметры команды
//
Процедура ОбменДаннымиСБИСИзФормыСписка(Форма, ИмяКоманды, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	ИмяМетаданных = МодульТНОбщегоНазначенияКлиентСервер.ИмяМетаданныхПоФорме(Форма);
	
	ДополнительныеПараметры.Вставить("ИмяМетаданных",           ИмяМетаданных);
	ДополнительныеПараметры.Вставить("ДвоичныеДанныеОбработки", Неопределено);
	
	Если ИмяКоманды = "ВыгрузитьВСбис" Или ИмяКоманды = "ОбновитьАктивныйЭтап" Тогда
		
		ЭтоВыгрузить    = (ИмяКоманды = "ВыгрузитьВСбис");
		ЭтоОбновитьЭтап = (ИмяКоманды = "ОбновитьАктивныйЭтап");
		
		МассивДокументов = ДокументыДляОбработки(Форма, ЭтоВыгрузить);
		
		ДанныеДляОбработки = Новый Массив;
		Для Каждого СсылкаНаДокумент Из МассивДокументов Цикл
			
			Если ЭтоВыгрузить Тогда 
				
				ПараметрыКоманды = МодульТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки(СсылкаНаДокумент);
				
			Иначе 
				
				ПараметрыКоманды = МодульТНОбщегоНазначенияКлиентСервер.ПараметрыЗагрузки(СсылкаНаДокумент);
				ПараметрыКоманды.ТекущийТитул       = Форма.АктивныйЭтапСтрокой;
				ПараметрыКоманды.ТолькоАктивныйЭтап = Истина;

			КонецЕсли;
					
			ПараметрыКоманды.ИмяМетаданных = ДополнительныеПараметры.ИмяМетаданных;
			
			ДанныеДляОбработки.Добавить(ПараметрыКоманды);
			
		КонецЦикла;
		
		Если ЭтоОбновитьЭтап Тогда
			Форма.АктивныйЭтапСтрокой = "";
		КонецЕсли;
		
	Иначе
		ДанныеДляОбработки = Новый Массив;
	КонецЕсли;
	
	ВыполнитьКомандуСбис(Форма, ИмяКоманды, ДанныеДляОбработки, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
// Универсальное выполнение команд
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - источник вызова выполнения
//	ИмяКоманды - Строка - имя команды, которую требуется выполнить
//	МассивДокументов - Массив - документы для выполнения команды
//  ДополнительныеПараметры - Структура - дополнительные параметры команды
//
Процедура ВыполнитьКомандуСбис(Форма, ИмяКоманды, МассивДокументов, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДопПараметры = Новый Структура;		
	ДопПараметры.Вставить("ИмяКоманды", ИмяКоманды);
		
	Если ЭтоЗагрузкаЧтениеИлиОбновление(ИмяКоманды) Тогда
		
		Если МассивДокументов.Количество() > 1 Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Данная команда предназначена для выполнения по 1 документу. 
				|Будет использован первый выбранный документ из списка";
			Сообщение.Сообщить();			
		КонецЕсли;
				
		// Авторизация
		context_params = АвторизацияSaby(ИмяКоманды, Форма); 
		Если context_params <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(МассивДокументов) Тогда 
				СсылкаНаДокумент = МассивДокументов[0];
				МассивДокументов = Новый Массив;
				МассивДокументов.Добавить(СсылкаНаДокумент);
			КонецЕсли;
			
			ДопПараметры.Вставить("МассивДокументов", МассивДокументов);
			ДопПараметры.Вставить("context_params",   context_params);			
			ДопПараметры.Вставить("ДопПараметры",     ДополнительныеПараметры);
			ДопПараметры.Вставить("Источник",         Форма.УникальныйИдентификатор);
			ВыполнитьКомандуВФоне(Форма, ДопПараметры);
			
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "ОткрытьВСбис" Тогда  		
		
		Массив = Новый Массив;
		Массив.Добавить(МассивДокументов[0]);
		// Источник = Массив;
		
		ПараметрыФормы = Новый Структура;		
		ПараметрыФормы.Вставить("Форма", Форма);
		
		МодульКодаКлиент("Saby_КомандыОбменаДляФормыКлиент").ПриНажатииОткрытьВСБИСПолучитьUID(ИмяКоманды, ПараметрыФормы);
		
	ИначеЕсли ЭтоДополнительнаяКоманда(ИмяКоманды) Тогда 
		
		ДопПараметры.Вставить("ДопПараметры", ДополнительныеПараметры);
		
		ПараметрыОжидания = Новый Структура;
		ПараметрыОжидания.Вставить("ВыводитьОкноОжидания", Ложь);
		
		ДопПараметры.Вставить("ПараметрыОжидания",  ПараметрыОжидания);
		ДопПараметры.Вставить("Источник",           Форма.УникальныйИдентификатор);
		
		ВыполнитьКомандуВФоне(Форма, ДопПараметры);
		
	Иначе
		
		ВызватьИсключение("Для команды " + ИмяКоманды + " не предусмотрен обработчик! Обратитесь к администратору");
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Фоновое выполнене команды
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - источник вызова выполнения
//  СтруктураПараметров - Структура - параметры для выполнения команды
//
Процедура ВыполнитьКомандуВФоне(Форма, СтруктураПараметров) Экспорт
	
	ДлительнаяОперация = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ДлительнаяОперация",
		СтруктураПараметров, 
		Форма.УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма); 
	Если СтруктураПараметров.Свойство("ПараметрыОжидания") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОжидания, СтруктураПараметров.ПараметрыОжидания);
	КонецЕсли;	
	
	Оповещение = Новый ОписаниеОповещения(
		"ОбработатьРезультат", МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент"), СтруктураПараметров);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
// Вывести ошибку или оповестить источник о успешном выполнении команды
// Параметры:
//	Результат - Структура - данные по результатам выполнения команды 
//  ДополнительныеПараметры - Структура - параметры для обработки результата
//
Процедура ОбработатьРезультат(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	Источник   = ДополнительныеПараметры.Источник;
	
	Если ЭтоЗагрузкаЧтениеИлиОбновление(ИмяКоманды) Тогда
		
		ОбработатьРезультатКоманды(Результат, ИмяКоманды, Источник); 
		
		// Обновить форму списка после каких то изменений
		Оповестить("Saby_СписокДокументовОбновить", , Источник);   
		
	ИначеЕсли ЭтоДополнительнаяКоманда(ИмяКоманды) Тогда	
		
		РезультатОбработки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);		
		
		Оповестить("Saby_" + ИмяКоманды, РезультатОбработки, Источник);
		
	Иначе		
		Возврат;		
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

&НаКлиенте
// Переход документа на следующий этап
// Параметры:
//  Ссылка - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на документ
//  Форма - ФормаКлиентскогоПриложения - источник перехода
//  Этапы - Структура - параметры для последующего перехода
Процедура СменаЭтапа(Ссылка, Форма, Этапы) Экспорт
	
	СписокДокументовСБИС = Новый Массив();
	СписокДокументов1С   = Новый Массив();
	
	СписокДокументов1С.Добавить(Ссылка);
		
	ИД = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ИдентификаторВСбис", Ссылка);
		
	ДокументСБИС = Новый Соответствие;
	ДокументСБИС.Вставить("Идентификатор", ИД);   // ид сбис 
	ДокументСБИС.Вставить("Документ1С",    Ссылка);
	ДокументСБИС.Вставить("ДокументСБИС",  Неопределено);
	ДокументСБИС.Вставить("Этап",          Этапы);
	
	СписокДокументовСБИС.Добавить(ДокументСБИС);
	
	ПараметрыВФорму = Новый Структура;
	ПараметрыВФорму.Вставить("СписокДокументовСБИС",          СписокДокументовСБИС);
	ПараметрыВФорму.Вставить("СписокДокументов1С",            СписокДокументов1С);
	ПараметрыВФорму.Вставить("МожноПереотправитьВСБИС",       Ложь);
	ПараметрыВФорму.Вставить("МожноОбновитьВСБИС",            Истина);
	ПараметрыВФорму.Вставить("ПрисоединенныеФайлыРасширения", Истина);
	
	ПараметрыОткрытияФормыОбработки = ПараметрыОткрытияФормыОбработки(
		"Обработка.SABY.Форма.ВыполнитьДействие", ПараметрыВФорму, Форма);
	ПараметрыОткрытияФормыОбработки.Уникальность = Новый УникальныйИдентификатор();
	ОткрытьФормуОбработки(ПараметрыОткрытияФормыОбработки);
		
КонецПроцедуры

&НаКлиенте
// Вывод ошибок в форме по результатам команды "ВыполнитьДействие" 
// из формы обработки SABY ВыполнитьДействие
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - источник перехода
//	Ссылка - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на источник выполнения 
//  Параметр - Структура - данные по ошибке 
//           - Строка - описание ошибки
//
Процедура ОбработатьОшибкиИзФормыВыполнитьДействие(Форма, Ссылка, Параметр) Экспорт
	
	МассивОшибок = Новый Массив;
	
	ЭтоСтруктура = ТипЗнч(Параметр.data) = Тип("Структура");
	
	Если ЭтоСтруктура Тогда
		Результат = Параметр.data;
	Иначе
		Результат = Параметр.data["Результат"];
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		
		Для Каждого Строка Из Результат Цикл
			
			ИндексОшибки = 0;
			
			СтруктураОшибки = ДанныеОшибки(Строка, ЭтоСтруктура, ИндексОшибки);
			МассивОшибок.Добавить(СтруктураОшибки);
						
			ИндексОшибки = ИндексОшибки + 1;
			
		КонецЦикла;
		
	Иначе
		
		ТекстОшибки = Результат.message + " - (" + Результат.detail + ")";
		
		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ИндексСтроки",        0);
		СтруктураОшибки.Вставить("ТекстДляОднойОшибки", ТекстОшибки);
		СтруктураОшибки.Вставить("ПолеОшибки",          "");
		СтруктураОшибки.Вставить("ГруппаОшибок",        Неопределено);
		МассивОшибок.Добавить(СтруктураОшибки);
		
	КонецЕсли;
	
	// если нет ошибок по нашему документу ошибки не показываем
	Если Не МассивОшибок.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОшибок = Новый Структура;
	СтруктураОшибок.Вставить("СписокОшибок", МассивОшибок);
	СтруктураОшибок.Вставить("ГруппыОшибок", Новый Соответствие);
	
	ИмяМетаданных            = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ИмяМетаданныхПоФорме(Форма);
	ПараметрыДокументаДляАПИ = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ПараметрыДокументаДляАПИ(ИмяМетаданных);
	
	СтруктураОшибок.Вставить("ИмяМетаданных", ИмяМетаданных);
	СтруктураОшибок.Вставить("Тип",           ПараметрыДокументаДляАПИ.Тип);
	
	СписокДокументов = Новый Соответствие;
	СписокДокументов.Вставить(Ссылка, СтруктураОшибок);
	
	ОткрытьПервыйДокументИзСоответствия(СписокДокументов);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокДокументов",     СписокДокументов);
	ПараметрыФормы.Вставить("ЭтоДинамическийТитул", Ложь);
	
	Оповестить("Saby_СписокДокументов", ПараметрыФормы);
	
КонецПроцедуры

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_ЗаписатьИПродолжить
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_ЗаписатьИПродолжить

&НаКлиенте
// Получение ПФ из БД или онлайна, с последующим отрытием пользователю на просмотр
// Параметры:
//	СсылкаНаДокумент - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на источник выполнения 
//  УникальныйИдентификаторФормы - УникальныйИдентифкатор - УИД формы источника
//
Процедура СоздатьИОткрытьПечатнуюФорму(СсылкаНаДокумент, УникальныйИдентификаторФормы) Экспорт
	
	Результат = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ДанныеПечатнойФормыДляОткрытия",
		СсылкаНаДокумент, УникальныйИдентификаторФормы);
	
	Если ЗначениеЗаполнено(Результат.АдресДвоичныхДанных) Тогда
		
		МодульКодаКлиент("ФайловаяСистемаКлиент").ОткрытьФайл(Результат.АдресДвоичныхДанных, , "ЭПД.pdf");
		
	ИначеЕсли ЗначениеЗаполнено(Результат.СсылкаНаПрисоединенныйФайл) Тогда
		
		ДанныеФайла = МодульКодаКлиент("РаботаСФайламиСлужебныйВызовСервера").ДанныеФайлаДляОткрытия(
			Результат.СсылкаНаПрисоединенныйФайл,
			Неопределено,
			УникальныйИдентификаторФормы);
		
		МодульКодаКлиент("РаботаСФайламиКлиент").ОткрытьФайл(ДанныеФайла);
		
	Иначе
		
		Если Результат.СписокДокументов = Неопределено Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Результат.ОписаниеОшибки;
			Сообщение.Сообщить();
		Иначе
			ОткрытьПервыйДокументИзСоответствия(Результат.СписокДокументов);
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("СписокДокументов",     Результат.СписокДокументов);
			ПараметрыФормы.Вставить("ЭтоДинамическийТитул", Ложь);
			
			Оповестить("Saby_СписокДокументов", ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработкаОшибок

&НаКлиенте
// Выводим описание и активизируем проблемный элемент формы
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - источник вызова команды
//  СоответствиеТаблицФормыИОбъекта - Соответствие - необходимо заполнить, когда имя таблицы на форме не соответствует
//    имени таблицы в объекте.
//
Процедура РасшифровкаЗаписиТаблицыОшибок(Форма, СоответствиеТаблицФормыИОбъекта = Неопределено) Экспорт
	
	ОшибкиПриАктивизацииСтроки(Форма, СоответствиеТаблицФормыИОбъекта);
	
	ПараметрыВыделенияДекорации = ПараметрыВыделенияДекорации(Форма);
	Если ПараметрыВыделенияДекорации.НужноОбновитьДекорацию Тогда
		Форма.ОбновитьДекорациюНаСервере(ПараметрыВыделенияДекорации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработка активизици сток таблицы ошибок, привязка к элементам формы
//
// Параметры:
//	Форма - Форма - источник вызова команды
//  СоответствиеТаблицФормыИОбъекта - Соответствие - необходимо заполнить, когда имя таблицы на форме не соответствует
//    имени таблицы в объекте.
//
Процедура ОшибкиПриАктивизацииСтроки(Форма, СоответствиеТаблицФормыИОбъекта = Неопределено) Экспорт
	
	ТекущиеДанные = Форма.Элементы.ТаблицаОшибок.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Или Форма.ТекущийЭлемент.Имя <> "ТаблицаОшибок" Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПодробноеОписаниеОшибки = ТекущиеДанные.Ошибка;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.РеквизитОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИмен = СтрРазделить(ТекущиеДанные.РеквизитОбъекта, ".");
	
	УровеньИерархии = 2;
	Если МассивИмен.Количество() = УровеньИерархии Тогда
		ИмяТаблицы  = МассивИмен[0];
		ИмяЭлемента = ТекущиеДанные.ЭлементФормы;
	Иначе
	    ИмяТаблицы  = "";
		ИмяЭлемента = ТекущиеДанные.ЭлементФормы;
	КонецЕсли;
	
	ИмяТаблицыОбъекта = СтрЗаменить(ИмяТаблицы, "_Выгрузка", "");
	
	УстановитьАктивнуюСтрокуВОсновнойТаблице(Форма, ИмяТаблицы, ТекущиеДанные.ИндексСтроки);
	
	ИмяТаблицыФормы = СтрЗаменить(ИмяТаблицыОбъекта, "ТранспортныеСредства", "Прицепы");
	
	Если Не ЭтоТаблицаФормы(Форма, ИмяТаблицыФормы, ИмяТаблицыОбъекта)
		Или ТипЗнч(Форма.Элементы[ИмяЭлемента].Родитель) <> Тип("ТаблицаФормы") Тогда
		Форма.ТекущийЭлемент = Форма.Элементы[ИмяЭлемента];
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = СтрокаТаблицыСОшибкой(Форма, ИмяТаблицыОбъекта, ТекущиеДанные, СоответствиеТаблицФормыИОбъекта);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТаблицыОбъекта = "ТранспортныеСредства" Тогда
		Автомобиль = ЗначениеМетаданных("Saby_ВидыТС.Автомобиль");
		Если СтрокаТаблицы.Вид = Автомобиль Тогда
			ТекущиеДанные.ЭлементФормы = "ТранспортноеСредствоСтрокой";
			Форма.ТекущийЭлемент = Форма.Элементы.ТранспортноеСредствоСтрокой;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторСтроки = СтрокаТаблицы.ПолучитьИдентификатор();
	
	ИмяТаблицыФормы = ИмяТаблицыФормы(ИмяТаблицыФормы, СтрокаТаблицы);
	Если Не ЗначениеЗаполнено(ИмяЭлемента) Тогда
		ИмяЭлемента = ИмяТаблицыФормы + МассивИмен[МассивИмен.ВГраница()];
	КонецЕсли;
	
	Форма.ТекущийЭлемент = Форма.Элементы[ИмяТаблицыФормы];
	Форма.Элементы[ИмяТаблицыФормы].ТекущаяСтрока  = ИдентификаторСтроки;
	Форма.Элементы[ИмяТаблицыФормы].ТекущийЭлемент = Форма.Элементы[ИмяЭлемента];
	
	Если ИмяТаблицыФормы = "Отметки" Или ИмяТаблицыФормы = "Отметки_Выгрузка" Тогда
		Форма.ОтборОтметокПоТипу(ИдентификаторСтроки);
		Форма.Элементы[ИмяТаблицыФормы].ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Параметры для декорации адресов погрузки и доставки
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - источник вызова
//
// Возвращаемое значение:
// 	Структура - параметры декорации
//
Функция ПараметрыВыделенияДекорации(Форма) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("НужноОбновитьДекорацию", Ложь);
	РезультатФункции.Вставить("Выделить",               Новый Массив);
	РезультатФункции.Вставить("ОтменитьВыделение",      Новый Массив);
	
	ТекущиеДанные = Форма.Элементы.ТаблицаОшибок.ТекущиеДанные;
	ЭлементФормы = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ЭлементФормы);
	
	ПереченьДекораций = Новый Массив;
	ПереченьДекораций.Добавить("ДекорацияЗаполнитьАдресПогрузки");
	ПереченьДекораций.Добавить("ДекорацияЗаполнитьАдресДоставки");
	ПереченьДекораций.Добавить("ТранспортноеСредствоСтрокой");
	ПереченьДекораций.Добавить("ВодительСтрокой");
	ПереченьДекораций.Добавить("Оформил");
	ПереченьДекораций.Добавить("МедосмотрВыездСтрокой");
	ПереченьДекораций.Добавить("МедосмотрЗаездСтрокой");
	ПереченьДекораций.Добавить("ТехосмотрСтрокой");
	ПереченьДекораций.Добавить("ДекорацияЗаполнитьМестоОтправления");
	ПереченьДекораций.Добавить("ОрганизацияСтрокой");
	ПереченьДекораций.Добавить("ОдометрВыездСтрокой");
	ПереченьДекораций.Добавить("ОдометрЗаездСтрокой");
	ПереченьДекораций.Добавить("ДекорацияЗаполнитьЛицензияДоРейса");
	ПереченьДекораций.Добавить("ДекорацияЗаполнитьПодачаТС");
	ПереченьДекораций.Добавить("ОтправительСтрокой");
	ПереченьДекораций.Добавить("ПеревозчикСтрокой");
	ПереченьДекораций.Добавить("ОтветственныйЗаПеревозкуСтрокой");
	ПереченьДекораций.Добавить("ВодителиСтрокой");
	ПереченьДекораций.Добавить("ОформительСтрокой");
	ПереченьДекораций.Добавить("ПолучательСтрокой");
	ПереченьДекораций.Добавить("ЗаказчикСтрокой");
	ПереченьДекораций.Добавить("ВладелецОбъектаСтрокой");
	ПереченьДекораций.Добавить("ОтгрузчикСтрокой");
	ПереченьДекораций.Добавить("Отгрузка_Ответственный");
	
	Для Каждого ИмяДекорации Из ПереченьДекораций Цикл
		ЭлементДекорации = Форма.Элементы.Найти(ИмяДекорации);
		Если ЭлементДекорации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Выделена = ЭлементДекорации.Подсказка <> "";
		
		Если Выделена И ИмяДекорации <> ЭлементФормы Тогда
			РезультатФункции.НужноОбновитьДекорацию = Истина;
			РезультатФункции.ОтменитьВыделение.Добавить(ИмяДекорации);
		ИначеЕсли Не Выделена И ИмяДекорации = ЭлементФормы Тогда
			РезультатФункции.НужноОбновитьДекорацию = Истина;
			РезультатФункции.Выделить.Добавить(ИмяДекорации); 
		Иначе 
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ОбработкаОшибок

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_ЮрЛицаИнтерфейс
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_ЮрЛицаИнтерфейс

&НаКлиенте
// Преобразует строку табличной части формы в структуру.
// Свойства структуры и их значения совпадают с колонками переданной строки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - источник данных строки
//  ИмяТаблицы - Строка - таблица, где находится строка преобразования
//  СтрокаТаблицы - СтрокаТаблицыЗначений - строка для преобразования
//  МассивКолонокИсключений - Массив - колонки для исключения
//
// Возвращаемое значение:
//  Структура - преобразованная строка таблицы значений.
//
Функция СтрокаТаблицыФормыВСтруктуру(Форма, ИмяТаблицы, СтрокаТаблицы, МассивКолонокИсключений = Неопределено) Экспорт
	
	КолонкиТаблицы = Форма.Элементы[ИмяТаблицы].ПодчиненныеЭлементы; 
	
	Структура = Новый Структура;
	Для Каждого Колонка Из КолонкиТаблицы Цикл 
		
		ИмяКолонки = Колонка.Имя; 
		Если СтрНачинаетсяС(ИмяКолонки, ИмяТаблицы) Тогда 
			ИмяКолонки = СтрЗаменить(ИмяКолонки, ИмяТаблицы, "");
		КонецЕсли;
				
		НельзяДобавитьВСтруктуру = МассивКолонокИсключений <> Неопределено 
			И МассивКолонокИсключений.Найти(ИмяКолонки) <> Неопределено
			Или КолонкиТаблицы.Найти(Колонка.Имя) = Неопределено;
			
		Если НельзяДобавитьВСтруктуру Тогда 
			Продолжить;
		КонецЕсли;
					
	    Структура.Вставить(ИмяКолонки, СтрокаТаблицы[ИмяКолонки]);
	
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

#Область ТранспортныеСредстваИнтерфейс

&НаКлиенте
// Обработчик стандартного события Нажатие для транспортного средства
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма с транспорными средствами
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки нажатия
//  ПроцедураОбновленияДанныхТС - ОписаниеОповещения - процедура, выполняемая после выбора транспортного средства
//  ТолькоПросмотр - Булево - признак доступности изменений на форме транспортного средства
//
Процедура ТранспортноеСредствоНажатие(Форма, СтандартнаяОбработка, ПроцедураОбновленияДанныхТС, ТолькоПросмотр = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытияФормыТС = ПараметрыОткрытияФормыТС(ПроцедураОбновленияДанныхТС, ТолькоПросмотр);
	ОткрытьФормуТранспортногоСредства(Форма, ПараметрыОткрытияФормыТС);
		
КонецПроцедуры

&НаКлиенте
// Обработчик стандартного события Нажатие для прицепов
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма с транспорными средствами
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки нажатия
//
Процедура ПрицепыНажатие(Форма, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;	
	Форма.ТекущийЭлемент = Форма.Элементы.Прицепы;
	
КонецПроцедуры

&НаКлиенте
// Обработчик стандартного события Выбор для прицепов
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма с транспорными средствами
//  ВыбраннаяСтрока - Число - идентификатор выбранной строки прицепа
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки выбора
//  ПроцедураОбновленияДанныхТС - ОписаниеОповещения - процедура, выполняемая после выбора прицепа
//  ТолькоПросмотр - Булево - признак доступности изменений на форме транспортного средства
//
Процедура ТаблицаПрицеповВыбор(Форма, ВыбраннаяСтрока, СтандартнаяОбработка,
		ПроцедураОбновленияДанныхТС, ТолькоПросмотр = Ложь) Экспорт
	
	ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(Форма);
	
	СтрокаПрицепа = ФормаОбъект.ТранспортныеСредства.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытияФормыТС = ПараметрыОткрытияФормыТС(ПроцедураОбновленияДанныхТС, ТолькоПросмотр);
	ПараметрыОткрытияФормыТС.ЭтоПрицеп = Истина;
	ПараметрыОткрытияФормыТС.СтрокаТС = СтрокаПрицепа;
	
	ОткрытьФормуТранспортногоСредства(Форма, ПараметрыОткрытияФормыТС);
	
КонецПроцедуры

&НаКлиенте
// Обработчик стандартного события ПриНачалеРедактирования для прицепов
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма с транспорными средствами
//  ПроцедураОбновленияДанныхТС - ОписаниеОповещения - процедура, выполняемая после обработки самого события
//
Процедура ТаблицаПрицеповПриНачалеРедактирования(Форма, ПроцедураОбновленияДанныхТС) Экспорт
	
	ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(Форма);
	
	Форма.Элементы.Прицепы.ТекущиеДанные.Вид = ЗначениеМетаданных("Saby_ВидыТС.Прицеп");
	ТекущаяСтрока = ФормаОбъект.ТранспортныеСредства.НайтиПоИдентификатору(Форма.Элементы.Прицепы.ТекущаяСтрока);
	
	ПараметрыОткрытияФормыТС = ПараметрыОткрытияФормыТС(ПроцедураОбновленияДанныхТС);
	ПараметрыОткрытияФормыТС.ЭтоПрицеп = Истина;
	ПараметрыОткрытияФормыТС.СтрокаТС = ТекущаяСтрока;
	
	ОткрытьФормуТранспортногоСредства(Форма, ПараметрыОткрытияФормыТС);
	
КонецПроцедуры

#КонецОбласти // ТранспортныеСредстваИнтерфейс

&НаКлиенте
// Открывает форму изменения/ просмотра данных водителя или ответственного лица 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма источник вызова 
//  ПараметрыФормы - Структура - параметры для запуска формы водителя/отвественного  
//  ИмяОповещения - Строка - имя оповещения при получении результата  
// 
Процедура ИзменитьДанныеВодителяОтветственногоЛица(Форма, ПараметрыФормы, ИмяОповещения) Экспорт
					
	Если ПараметрыФормы.Свойство("РольСтрокой") Тогда
		
		ИмяПеречисления = "Saby_РолиОтветственных." + ПараметрыФормы.РольСтрокой;		
		ПараметрыФормы.Вставить("Роль", ЗначениеМетаданных(ИмяПеречисления));
		
	КонецЕсли;

	ПараметрыФормы.Вставить("ИмяМетаданных", МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ИмяМетаданныхПоФорме(Форма));
	
	ОткрытьОбщуюФормуСПараметрами(Форма, "Saby_ОтветственныйЭПД", ПараметрыФормы, ИмяОповещения);
		
КонецПроцедуры

&НаКлиенте
// Открывает данные ответственного лица для редактирования
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма источник вызова
//  СтруктураОтветственногоЛица - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.СтруктураОтветственногоЛица()
//  РольСтрокой - Строка - роль ответственного лица строкой
//
Процедура НачатьРедактированиеОтветственногоЛица(Форма, СтруктураОтветственногоЛица, РольСтрокой) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",                       Форма);
	ДополнительныеПараметры.Вставить("СтруктураОтветственногоЛица", СтруктураОтветственногоЛица);
	
	ПроцедураПослеРедактированияОтветственногоЛица = Новый ОписаниеОповещения(
		"ПослеРедактированияОтветственногоЛица", МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент"), ДополнительныеПараметры);
	
	ИмяМетаданных = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ИмяМетаданныхПоФорме(Форма);
	СтруктураОтветственногоЛица.Вставить("ИмяМетаданных", ИмяМетаданных);
	
	СтруктураОтветственногоЛица.Вставить("Наименование", РольСтрокой);
	
	ПараметрыОткрытияФормыОбработки = ПараметрыОткрытияФормыОбработки(
		"ОбщаяФорма.Saby_ОтветственныйЭПД", СтруктураОтветственногоЛица, Форма);
	ПараметрыОткрытияФормыОбработки.ОписаниеОповещенияОЗакрытии = ПроцедураПослеРедактированияОтветственногоЛица;
	ПараметрыОткрытияФормыОбработки.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФормуОбработки(ПараметрыОткрытияФормыОбработки);
	
КонецПроцедуры

&НаКлиенте
// Выполняет действия после редактирования ответственного лица
//
// Параметры:
//  Результат - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.СтруктураОтветственногоЛица()
//  ДополнительныеПараметры - Структура - см. НачатьРедактированиеОтветственногоЛица()
//
Процедура ПослеРедактированияОтветственногоЛица(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(ДополнительныеПараметры.Форма);
	
	СтрокаОтветственного = Неопределено;
	Если ДополнительныеПараметры.СтруктураОтветственногоЛица.ИдентификаторСтроки <> Неопределено Тогда
		СтрокаОтветственного = ФормаОбъект.ОтветственныеЛица.НайтиПоИдентификатору(
			ДополнительныеПараметры.СтруктураОтветственногоЛица.ИдентификаторСтроки);
	КонецЕсли;
	
	Если Результат.Удалить Тогда
		Если СтрокаОтветственного <> Неопределено Тогда
			ФормаОбъект.ОтветственныеЛица.Удалить(СтрокаОтветственного);
		КонецЕсли;
	Иначе
		Если СтрокаОтветственного = Неопределено Тогда
			СтрокаОтветственного = ФормаОбъект.ОтветственныеЛица.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаОтветственного, Результат);
		
		Если СтрокаОтветственного.Роль = ЗначениеМетаданных("Saby_РолиОтветственных.Водитель") Тогда
			МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ОбновитьВодителейНаФорме(ДополнительныеПараметры.Форма);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры.Форма.ПослеРедактированияОтветственногоЛицаНаФорме(Результат);
	
КонецПроцедуры

#Область ДокументОснование

&НаКлиенте
// Зачистка документа основания по команде из формы
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма источник вызова
//
Процедура ОчиститьДокументОснованиеНаФорме(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ДокументОснование) Тогда
		
		Форма.Модифицированность = Истина;
		
		Форма.Объект.ДокументОснование_Идентификатор    = "";
		Форма.Объект.ДокументОснование_ОбъектМетаданных = "";
		
		Форма.ДокументОснование = Неопределено;
		Форма.Элементы.ДекорацияДокументОснование.Заголовок = "Выбрать документ основание";
		
		Форма.Элементы.ОчиститьДокументОснование.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработка нажатия на декорацию документа основания
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма источник вызова
//
Процедура ДокументОснованиеНажатие(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ДокументОснование) Тогда 
		ПоказатьЗначение(, Форма.ДокументОснование);
	Иначе
		
		Если Форма.ТипыОснований.Количество() = 0 Тогда	
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Ссылка", Форма.Объект.Ссылка);
			
			ОткрытьФорму("ОбщаяФорма.Saby_ВыборТиповЭПД", ДопПараметры, Форма);
			
		Иначе 
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Форма",     Форма);
			
			Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораТипаДанныхДокументаОснования", ЭтотОбъект, ДопПараметры);						
			Форма.ТипыОснований.ПоказатьВыборЭлемента(Оповещение, "Выбор типа данных");
						
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработка выбора типа документа основания
// Параметры:
// 	ВыбранныйЭлемент - ТипМетаданных - выбранный тип документа основания   
//	ДопПараметры - Структура - дополнительные параметры выбора
//
Процедура ОбработкаВыбораТипаДанныхДокументаОснования(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		ДокОснование = ДопПараметры.Форма.ДокументОснование;
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораЗначенияДокументаОснования", ЭтотОбъект, ДопПараметры);		
		ПоказатьВводЗначения(Оповещение, ДокОснование, "Выберите основание", ВыбранныйЭлемент.Значение);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработка выбора значения документа основания
// Параметры:
//	Значение - ДокументСсылка - выбранный документ как источник для заполнения данных
//  ДопПараметры - Структура - дополнительные параметры
//
Процедура ПослеВыбораЗначенияДокументаОснования(Значение, ДопПараметры) Экспорт
	
	Форма = ДопПараметры.Форма;
		
	Если Форма.Объект.Ссылка.Пустая() Тогда
		ЗаписатьДанныеДокумента(Форма);
	КонецЕсли;		
		
	Если Значение <> Неопределено Тогда
		
		Форма.Модифицированность = Истина;
		
		Форма.ДокументОснование = Значение;
		Форма.Элементы.ДекорацияДокументОснование.Заголовок = СокрЛП(Значение);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ДокументОснование) Тогда		
		
		Форма.Элементы.ОчиститьДокументОснование.Доступность = Истина;				
        Оповестить("ВыбранДокументОснованиеINI", , Форма);
		
	Иначе 
		
		Форма.Объект.ДокументОснование_Идентификатор    = "";
		Форма.Объект.ДокументОснование_ОбъектМетаданных = "";
		
		Форма.Элементы.ОчиститьДокументОснование.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
// Запись документа из фомы
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма источник вызова
//
Процедура ЗаписатьДанныеДокумента(Форма) Экспорт
	
	РежимЗаписи = ?(Форма.Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписи);	
		
	Форма.Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
// Обработка для стандартного события формы документов ОбработкаОповещения
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма источник вызова
// 	ИмяСобытия - Строка - имя события оповещения 
//	Параметр - Структура - параметры оповещения 
//	Источник - Произвольный - источник оповещения 
//
Процедура ОбработатьОповещенияДляФормы(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если Не ОповещениеДляЭтойФормы(Форма, ИмяСобытия, Параметр, Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьОповещенияДО(Форма, ИмяСобытия, Параметр, Источник);
	
	ОбработатьДополнительныеОповещения(Форма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
// Получения выделенных строк - ссылок на документы для последующей обработки
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - источник данных списка
//  ЗаполнитьАктивныйЭтап - Булево - признак запонения активного этапа на форме
// Возвращаемое значение:
//  Массив - ссылки на документы для обработки
//
Функция ДокументыДляОбработки(Форма, ЗаполнитьАктивныйЭтап = Ложь) Экспорт
	
	ВыделенныеСтроки = Форма.Элементы.Список.ВыделенныеСтроки;
	
	Массив = Новый Массив;
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		Если ЗаполнитьАктивныйЭтап И Форма.АктивныйЭтапСтрокой = "" Тогда
			Форма.АктивныйЭтапСтрокой = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.АктивныйЭтапСтрокой", Строка);
		КонецЕсли;
		Массив.Добавить(Строка);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

#Область Лента

&НаКлиенте
// Обработчик события ОбработкаНавигационнойСсылки для декорации титула в визуализации ленты в документе.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма источник вызова
//  Элемент - ДекорацияФормы - декорация титула
//  СтандартнаяОбработка - Булево - признак продолжения стандартной обработки
//
Процедура ОбработкаНавигационнойСсылкиЛенты(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	МассивПодстрок = СтрРазделить(Элемент.Имя, "_");
	
	ИдентификаторСтроки = Число(МассивПодстрок[МассивПодстрок.ВГраница()]);
	
	СтрокаЛенты = Форма.Лента.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаЛенты.Основной Тогда
		Форма.АктивизироватьРеквизитИзТитула(СтрокаЛенты);
	Иначе
		Форма.ОткрытьФормуТитула(
			СтрокаЛенты.НаименованиеТитула,
			СтрокаЛенты.ИдентификаторТитула,
			СтрокаЛенты.Описание);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Лента

&НаКлиенте
// Проверяет возможность добавления новой строки подчиненной таблицы
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма источник вызова
//  ИмяОсновнойТаблицы - Строка - имя таблицы, от которой зависит текущая
//  Отказ - Булево - признак продолжения стандартного обработчика события
//
Процедура ПередНачаломДобавленияСтрокиСвязаннойТаблицы(Форма, ИмяОсновнойТаблицы, Отказ) Экспорт
		
	ИдентификаторСтроки = Форма.Элементы[ИмяОсновнойТаблицы].ТекущаяСтрока;
	Если ИдентификаторСтроки = Неопределено Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрана строка в основной таблице " + ИмяОсновнойТаблицы;
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Проверка наличия обновлений расширения и генерация элементов предупреждения и ссылки на скачивание
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма для обновления элементов
//  СтатусВерсии - Структура - данные о текущей версии
//
Процедура ОтобразитьНаличиеОбновлений(Форма, СтатусВерсии) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если СтатусВерсии = Неопределено Тогда
		Элементы.ГруппаОбновление.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ДанныеЭлементов = ОбработкаШаблонаСтатусаВерсии(СтатусВерсии.Шаблон);
	Если Не ЗначениеЗаполнено(ДанныеЭлементов) Тогда 
		Возврат;
	КонецЕсли;	
		
	// Картинка
	Картинка = Элементы.КартинкаОбновление;
	Картинка.Картинка       = КартинкаИнтерфейса(Форма, "Saby_СостояниеОшибка");
	Картинка.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
	
	// Надпись
	Надпись = Элементы.СтатусОбновление;
	Надпись.Заголовок = ДанныеЭлементов.Заголовок;
	Если ДанныеЭлементов.ЦветТекста <> Неопределено Тогда
		Надпись.ЦветТекста = ДанныеЭлементов.ЦветТекста;
	КонецЕсли;	
	
	// Ссылка на скачивание
	Если ДанныеЭлементов.Гиперссылка Тогда		
		
		Гиперссылка = Элементы.СсылкаОбновление;
		Гиперссылка.Доступность = Истина;
		Гиперссылка.Заголовок        = "Скачать";
		Гиперссылка.Подсказка        = ДанныеЭлементов.Ссылка;
				
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти    

#Область СлужебныйПрограммныйИнтерфейс

&НаКлиенте
// Выполняет обновление кэша локальных сертификатов перед выполнением подписания и отправки динамического титула
//
// Параметры:
//  ПроцедураПродолжения - ОписаниеОповещения - процедура для выполнения после обневления кэша
//  СсылкаНаДокумент - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на документ,
//    из которого выполняется отправка титула
//
Процедура ОбновитьКЭШЛокальныхСертификатовИПродолжитьВыполнение(ПроцедураПродолжения, СсылкаНаДокумент) Экспорт
	
	СтруктураДокумента = Новый Структура();
	СтруктураДокумента.Вставить("Документ1С", СсылкаНаДокумент);
	СтруктураДокумента.Вставить("Этап", Новый Массив);
	
	СтруктураЭтапа = Новый Структура;
	СтруктураЭтапа.Вставить("Действие", Новый Массив);
	СтруктураДокумента.Этап.Добавить(СтруктураЭтапа);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокДокументовСБИС", Новый Массив);
	ПараметрыФормы.СписокДокументовСБИС.Добавить(СтруктураДокумента);
	
	ФормаВыполнитьДействие = ПолучитьФорму("Обработка.SABY.Форма.ВыполнитьДействие", ПараметрыФормы);
	ФормаВыполнитьДействие.ОбновитьКэшЛокальныхСертификатов(ПроцедураПродолжения);
	
КонецПроцедуры

&НаКлиенте
// Выполняет действия после открытия формы выбора транспортного средства
//
// Параметры:
//  СтруктураТранспортногоСредства - Структура - структура параметров транспортного средства.
//    Совпадает с табличной частию ТранспортныеСредства в документе Saby_ТранспортнаяНакладная.
//  ДополнительныеПараметры - Структура - контекст из вызывающей процедуры
//
Процедура ПослеОткрытияФормыТранспортногоСредства(СтруктураТранспортногоСредства, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(Форма);
	
	УдалитьСтрокиПоВиду(ФормаОбъект.ТранспортныеСредства);
	
	Если ДополнительныеПараметры.ТолькоПросмотр Или Не ЗначениеЗаполнено(СтруктураТранспортногоСредства) Тогда
		Возврат;
	КонецЕсли;
	
	Автомобиль = ЗначениеМетаданных("Saby_ВидыТС.Автомобиль");
	
	Если СтруктураТранспортногоСредства.Вид = Автомобиль Тогда
		СтрокаАвтомобиля = СтрокаАвтомобиля(ФормаОбъект.ТранспортныеСредства);
		Если СтрокаАвтомобиля = Неопределено Тогда
			СтрокаАвтомобиля = ФормаОбъект.ТранспортныеСредства.Добавить();
		КонецЕсли;
		ИдентификаторСтроки = СтрокаАвтомобиля.ПолучитьИдентификатор();
	Иначе
		ИдентификаторСтроки = Форма.Элементы.Прицепы.ТекущаяСтрока;
	КонецЕсли;
	
	СтрокаТранспортногоСредства = ФормаОбъект.ТранспортныеСредства.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТранспортногоСредства, СтруктураТранспортногоСредства);
	
	Если Не ЗначениеЗаполнено(СтрокаТранспортногоСредства.РегистрационныйНомер) Тогда
		ФормаОбъект.ТранспортныеСредства.Удалить(СтрокаТранспортногоСредства);
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
	Если ДополнительныеПараметры.ПроцедураОбновленияДанныхТС <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ПроцедураОбновленияДанныхТС);
	Иначе
		МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ОбновитьТранспортныеСредстваНаФорме(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыСБИС(Форма, ИмяКоманды, ИмяМетаданных) Экспорт
	
	ДатаОбновления = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ПоследнееУспешноЗагруженноеИзменение", ИмяМетаданных);
	Если Не ЗначениеЗаполнено(ДатаОбновления) Тогда 
		МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ОбновитьДокументыЗаПериод(Форма, ИмяКоманды);			
	Иначе 
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Начало", ДатаОбновления);
		
		// Обновляем все документы разом
		// не важно выделенны строки или нет
		ОбменДаннымиСБИСИзФормыСписка(
			Форма, 
			ИмяКоманды, 
			ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыЗаПериод(Форма, ИмяКоманды, НеОбновлятьДатуИзменения = Ложь) Экспорт
		
	// Обновить документы с даты
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКоманды", ИмяКоманды);
	ДополнительныеПараметры.Вставить("Форма",      Форма);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеВводаПериодаЗагрузки",
		МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент"),
		ДополнительныеПараметры);
		
	ПараметрыОткрытияФормыОбработки = ПараметрыОткрытияФормыОбработки("ОбщаяФорма.Saby_НастройкиПериодаЭПД", , Форма);
	ПараметрыОткрытияФормыОбработки.ОписаниеОповещенияОЗакрытии = Оповещение;
	ПараметрыОткрытияФормыОбработки.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФормуОбработки(ПараметрыОткрытияФормыОбработки); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаПериодаЗагрузки(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Обновление не выполнено! Не указан период обновления документов";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
    ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Начало",    РезультатЗакрытия.Начало);
	ДопПараметры.Вставить("Окончание", РезультатЗакрытия.Окончание);
			
	ОбменДаннымиСБИСИзФормыСписка(
		ДополнительныеПараметры.Форма,
		ДополнительныеПараметры.ИмяКоманды,
		ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДанныхЮрЛица(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРеквизитаФормы = Результат.ЭлементФормы;
	
	ДобавитьДанныеЮрЛиц(ДополнительныеПараметры.Форма, Результат, ПараметрыРеквизитаФормы);
	
	ДополнительныеПараметры.Форма.Модифицированность = Истина;
	
	Если ДополнительныеПараметры.ПроцедураПослеИзмененияЮрЛица <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ПроцедураПослеИзмененияЮрЛица, Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ТекстСообщенияКоманды(Ключ) 
	
	ТекстСообщения = Новый Соответствие;
	
	КлючиСтруктурыСообщений = "НетРезультата,Успешно,ВыполненоСОшибками";
	
	ЗагрузитьВСбис = Новый Структура(КлючиСтруктурыСообщений);
	ЗагрузитьВСбис.НетРезультата      = "Выгрузка не производилась";
	ЗагрузитьВСбис.Успешно            = "В СБИС выгружено %1 документов";
	ЗагрузитьВСбис.ВыполненоСОшибками = "В СБИС выгружено документов %1 из %2";
	
	ТекстСообщения.Вставить("ЗагрузитьВСбис", ЗагрузитьВСбис);

	ПрочитатьДокумент = Новый Структура(КлючиСтруктурыСообщений);
	ПрочитатьДокумент.НетРезультата      = "Загрузка не производилась";
	ПрочитатьДокумент.Успешно            = "Документ обновлен";
	ПрочитатьДокумент.ВыполненоСОшибками = "Возникла ошибка! Документ не загружен";
	
	ТекстСообщения.Вставить("ПрочитатьДокумент", ПрочитатьДокумент);
		
	ОбновитьДокументИзСбис = Новый Структура(КлючиСтруктурыСообщений);
	ОбновитьДокументИзСбис.НетРезультата      = "Загрузка не производилась. Данных для обновления нет";
	ОбновитьДокументИзСбис.Успешно            = "Из СБИС загружено %1 документов";
	ОбновитьДокументИзСбис.ВыполненоСОшибками = "Из СБИС загружено документов %1 из %2";
	
	ТекстСообщения.Вставить("ОбновитьДокументИзСбис", ОбновитьДокументИзСбис);
	
	Возврат ТекстСообщения.Получить(Ключ);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатКоманды(Результат, ИмяКоманды, Источник)
	
	РезультатОбработки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	ОповеститьПослеОбработкиРезультатаКоманды(ИмяКоманды, РезультатОбработки, Источник);
	
	ОповеститьПользователяОРезультатах(Неопределено, ИмяКоманды, РезультатОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПослеОбработкиРезультатаКоманды(ИмяКоманды, РезультатОбработки, Источник)
	
	Если РезультатОбработки.Ошибки.Количество() Тогда
		
		Если Не ЭтоВыгрузкаДинамическогоТитула(ИмяКоманды) Тогда
			ОткрытьПервыйДокументИзСоответствия(РезультатОбработки.Ошибки);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("СписокДокументов",     РезультатОбработки.Ошибки);
		ПараметрыФормы.Вставить("ЭтоДинамическийТитул", ЭтоВыгрузкаДинамическогоТитула(ИмяКоманды));
		
		Оповестить("Saby_СписокДокументов", ПараметрыФормы);
		
	КонецЕсли;
	
	Если Не РезультатОбработки.Итог.Успех Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = РезультатОбработки.Успешные;
	Для Каждого Элемент Из МассивСсылок Цикл
		
		// одиночная команда
		Если ИмяКоманды = "ПрочитатьДокумент"
			Или ИмяКоманды = "ОбновитьАктивныйЭтап"
			Или ИмяКоманды = "ЗагрузитьВСбисДинамическийТитул" Тогда
			
			Оповестить("Saby_ОбновитьДокумент", Элемент, Источник);
			
		ИначеЕсли ИмяКоманды = "ВыгрузитьВСбис" Тогда
			
			Оповестить("Saby_ВыполнитьПереход", Элемент, Источник);
			
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОРезультатах(Форма, ИмяКоманды, РезультатОбработки)
	
	ТекстСообщения = ТекстСообщенияКоманды(ИмяКоманды);
	ТекстЗаголовка = "Завершено";
	
	Если ИмяКоманды = "ВыбранДокументОснованиеINI" Тогда 
		
		ТекстЗаголовка = РезультатОбработки.ТекстЗаголовка;
		Текст          = РезультатОбработки.ТекстСообщения;
	    Картинка       = РезультатОбработки.Картинка;
		
	ИначеЕсли ТекстСообщения = Неопределено Тогда
		// если не чего сообщать то завершаем
		Возврат;
				
	ИначеЕсли РезультатОбработки.Итог.Всего = 0 Тогда
		
		Текст    = ТекстСообщения.НетРезультата;
		Картинка = БиблиотекаКартинок.ВосклицательныйЗнакСерый;
					
	ИначеЕсли РезультатОбработки.Итог.Успех Тогда
		
		Картинка = КартинкаИнтерфейса(Форма, "Saby_Успешно32");
		
		Если СтрНайти(ТекстСообщения.Успешно, "%") > 0 Тогда
			Текст = СтрШаблон(ТекстСообщения.Успешно, Формат(РезультатОбработки.Итог.Количество, "ЧН=; ЧГ="));
		Иначе
			Текст = СтрШаблон(ТекстСообщения.Успешно);
		КонецЕсли;
		
	Иначе
		
		Картинка = КартинкаИнтерфейса(Форма, "Saby_Ошибка32");
		
		Если СтрНайти(ТекстСообщения.ВыполненоСОшибками, "%") > 0 Тогда
			Текст = СтрШаблон(
				ТекстСообщения.ВыполненоСОшибками,
				Формат(РезультатОбработки.Итог.Количество, "ЧН=; ЧГ="),
				Формат(РезультатОбработки.Итог.Всего, "ЧГ="));
		Иначе
			Текст = ТекстСообщения.ВыполненоСОшибками;
		КонецЕсли;
		
	КонецЕсли;
		
	ПоказатьОповещениеПользователя(
		ТекстЗаголовка,
		,
		Текст,
		Картинка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПервыйДокументИзСоответствия(СоответствиеДокументов)
	
	Для Каждого КлючЗначение Из СоответствиеДокументов Цикл
		СсылкаНаДокумент      = КлючЗначение.Ключ;
		СтруктураДанныхОшибок = КлючЗначение.Значение;
		Если Не ЕстьСсылкаНаДокумент(СсылкаНаДокумент, СтруктураДанныхОшибок) Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыФормыДокумента = Новый Структура;
		ПараметрыФормыДокумента.Вставить("Ключ", СсылкаНаДокумент);
		ИмяФормы = СтрШаблон("Документ.%1.ФормаОбъекта", СтруктураДанныхОшибок.ИмяМетаданных);
		
		ПараметрыОткрытияФормыОбработки = ПараметрыОткрытияФормыОбработки(ИмяФормы, ПараметрыФормыДокумента);
		ОткрытьФормуОбработки(ПараметрыОткрытияФормыОбработки);
		
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьСсылкаНаДокумент(СсылкаНаДокумент, СтруктураДанныхОшибок)
	
	Возврат ЗначениеЗаполнено(СсылкаНаДокумент)
		И ТипЗнч(СсылкаНаДокумент) <> Тип("Структура");
	
КонецФункции

&НаКлиенте
Процедура УстановитьАктивнуюСтрокуВОсновнойТаблице(Форма, ИмяТаблицы, ИндексСтроки)
	
	ЭтоАкты           = ИмяТаблицы = "Акты";
	ЭтоШтрафы         = ИмяТаблицы = "Штрафы";
	ЭтоАктыВыгрузка   = ИмяТаблицы = "Акты_Выгрузка";
	ЭтоШтрафыВыгрузка = ИмяТаблицы = "Штрафы_Выгрузка";
	
	ЭтоНужнаяТаблица = ЭтоАкты Или ЭтоШтрафы Или ЭтоАктыВыгрузка Или ЭтоШтрафыВыгрузка;
	Если Не ЭтоНужнаяТаблица Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицыОбъекта = СтрЗаменить(ИмяТаблицы, "_Выгрузка", "");
	
	ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(Форма);
	
	КлючСтроки = ФормаОбъект[ИмяТаблицыОбъекта][ИндексСтроки].КлючСтроки_Отметки;
	Отбор = Новый Структура;
	Отбор.Вставить("КлючСтроки", КлючСтроки);
	НайденныеСтрокиОтметок = ФормаОбъект.Отметки.НайтиСтроки(Отбор);
	Если НайденныеСтрокиОтметок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтрокиОтметок = НайденныеСтрокиОтметок[0].ПолучитьИдентификатор();
	
	Если ЭтоАкты Или ЭтоШтрафы Тогда
		Форма.ТекущийЭлемент = Форма.Элементы.Отметки;
		Форма.Элементы.Отметки.ТекущаяСтрока  = ИдентификаторСтрокиОтметок;
		Форма.ОтборОтметокПоТипу(ИдентификаторСтрокиОтметок);
		Форма.Элементы.Отметки.ТекущаяСтрока  = ИдентификаторСтрокиОтметок;
	ИначеЕсли ЭтоАктыВыгрузка Или ЭтоШтрафыВыгрузка Тогда
		Форма.ТекущийЭлемент = Форма.Элементы.Отметки_Выгрузка;
		Форма.Элементы.Отметки_Выгрузка.ТекущаяСтрока  = ИдентификаторСтрокиОтметок;
		Форма.ОтборОтметокПоТипу(ИдентификаторСтрокиОтметок);
		Форма.Элементы.Отметки_Выгрузка.ТекущаяСтрока  = ИдентификаторСтрокиОтметок;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеОшибки(Строка, ЭтоСтруктура, ИндексОшибки)
	
	ОписаниеОшибки = "";
	
	Если ЭтоСтруктура Тогда
		ОписаниеОшибки = Строка.message;
	Иначе
		
		ДокументСБИС = Строка["ДокументСБИС"];
		ДеталиОшибки = ДокументСБИС["detail"];
		Если Не ЗначениеЗаполнено(ДеталиОшибки) Тогда
			Ошибка = ДокументСБИС["message"];
		Иначе
			Ошибка = ДеталиОшибки;
		КонецЕсли;
		
		Если ТипЗнч(Ошибка) = Тип("Строка") Тогда
			ОписаниеОшибки = Ошибка;
		Иначе
			ОписаниеОшибки = ДеталиОшибки["error"]["details"];
		КонецЕсли;
		
	КонецЕсли;
				
	СтруктураОшибки = Новый Структура;
	СтруктураОшибки.Вставить("ИндексСтроки",        ИндексОшибки);
	СтруктураОшибки.Вставить("ТекстДляОднойОшибки", ОписаниеОшибки);
	СтруктураОшибки.Вставить("ПолеОшибки",          "");
	СтруктураОшибки.Вставить("ГруппаОшибок",        Неопределено);
		
	Возврат СтруктураОшибки;
	
КонецФункции

&НаКлиенте
Функция СтрокаТаблицыСОшибкой(Форма, Знач ИмяТаблицыОбъекта, ТекущиеДанные, СоответствиеТаблицФормыИОбъекта)
	
	ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(Форма);
	
	Если СоответствиеТаблицФормыИОбъекта <> Неопределено
		И СоответствиеТаблицФормыИОбъекта[ИмяТаблицыОбъекта] <> Неопределено Тогда
		ИмяТаблицыОбъекта = СоответствиеТаблицФормыИОбъекта[ИмяТаблицыОбъекта];
	КонецЕсли;
	
	Если ТекущиеДанные.ИндексСтроки < ФормаОбъект[ИмяТаблицыОбъекта].Количество() Тогда
		Возврат ФормаОбъект[ИмяТаблицыОбъекта][ТекущиеДанные.ИндексСтроки];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ЭтоТаблицаФормы(Форма, ИмяТаблицыФормы, ИмяТаблицыОбъекта)
	
	Если ИмяТаблицыФормы = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(Форма);
	
	ТаблицаФормы = Форма.Элементы.Найти(ИмяТаблицыФормы) <> Неопределено;
	
	ТаблицаОбъекта = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ЕстьРеквизитИлиСвойство(ФормаОбъект, ИмяТаблицыОбъекта)
		И ТипЗнч(ФормаОбъект[ИмяТаблицыОбъекта]) = Тип("ДанныеФормыКоллекция");
	
	Возврат ТаблицаФормы Или ТаблицаОбъекта;
	
КонецФункции

&НаКлиенте
Функция ИмяТаблицыФормы(ИмяТаблицыФормы, СтрокаТаблицы)
	
	Если ИмяТаблицыФормы <> "КонтактныеДанные" Тогда
		Возврат ИмяТаблицыФормы;
	КонецЕсли;
	
	Если СтрокаТаблицы.Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов.Отправитель") Тогда
		Возврат "ОтправительКонтактныеДанные";
	ИначеЕсли СтрокаТаблицы.Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов.Получатель") Тогда
		Возврат "ПолучательКонтактныеДанные";
	ИначеЕсли СтрокаТаблицы.Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов.Перевозчик") Тогда
		Возврат "ПеревозчикКонтактныеДанные";
	ИначеЕсли СтрокаТаблицы.Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов.ВладелецОбъекта") Тогда
		Возврат "ВладелецОбъектаКонтактныеДанные";
	ИначеЕсли СтрокаТаблицы.Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов.Отгрузчик") Тогда
		Возврат "ОтгрузчикКонтактныеДанные";
	Иначе
		Возврат ИмяТаблицыФормы;
	КонецЕсли;
	
КонецФункции

#Область ТранспортныеСредства

&НаКлиенте
Функция ПараметрыОткрытияФормыТС(ПроцедураОбновленияДанныхТС = Неопределено, ТолькоПросмотр = Ложь)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ЭтоПрицеп",                   Ложь);
	РезультатФункции.Вставить("ТолькоПросмотр",              ТолькоПросмотр);
	РезультатФункции.Вставить("СтрокаТС",                    Неопределено);
	РезультатФункции.Вставить("ПроцедураОбновленияДанныхТС", ПроцедураОбновленияДанныхТС);
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуТранспортногоСредства(Форма, ПараметрыОткрытияФормыТС)
	
	ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(Форма);
	
	Если ПараметрыОткрытияФормыТС.СтрокаТС = Неопределено Тогда
		ПараметрыОткрытияФормыТС.СтрокаТС = СтрокаАвтомобиля(ФормаОбъект.ТранспортныеСредства);
	КонецЕсли;
	
	Если ПараметрыОткрытияФормыТС.СтрокаТС <> Неопределено Тогда
		ПараметрыФормы = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").СтрокаТаблицыФормыВСтруктуру(
			Форма, "Прицепы", ПараметрыОткрытияФормыТС.СтрокаТС);
	Иначе
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ЗаполнитьОснованияВладенияДокументыЭПД(ФормаОбъект, ПараметрыФормы, ПараметрыОткрытияФормыТС.СтрокаТС);
	
	ТолькоПросмотр = ПараметрыОткрытияФормыТС.ТолькоПросмотр Или Форма.ТолькоПросмотр;
	Если Форма.Элементы.Найти("Страница_Основное") <> Неопределено Тогда
		ТолькоПросмотр = ТолькоПросмотр Или Форма.Элементы.Страница_Основное.ТолькоПросмотр;
	КонецЕсли;
	Если Форма.Элементы.Найти("ГруппаТС") <> Неопределено Тогда
		ТолькоПросмотр = ТолькоПросмотр Или Форма.Элементы.ГруппаТС.ТолькоПросмотр;
	КонецЕсли;
	
	СтруктураСвойств = Новый Структура;
	СтруктураСвойств.Вставить("СсылкаНаДокумент", Неопределено);
		
	ЗаполнитьЗначенияСвойств(СтруктураСвойств, Форма);
	
	ТипДокументаИсточника = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ИмяМетаданныхПоФорме(Форма);
	
	ПараметрыФормы.Вставить("ТолькоПросмотр",        ТолькоПросмотр);
	ПараметрыФормы.Вставить("ЭтоПрицеп",             ПараметрыОткрытияФормыТС.ЭтоПрицеп); 
    ПараметрыФормы.Вставить("ТипДокументаИсточника", ТипДокументаИсточника);	
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТолькоПросмотр",              ПараметрыФормы.ТолькоПросмотр);
	ДопПараметры.Вставить("Форма",                       Форма);
	ДопПараметры.Вставить("ПроцедураОбновленияДанныхТС", ПараметрыОткрытияФормыТС.ПроцедураОбновленияДанныхТС);
	
	ПроцедураПослеОткрытияФормыТранспортногоСредства = Новый ОписаниеОповещения(
		"ПослеОткрытияФормыТранспортногоСредства", МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент"), ДопПараметры);
	
	ПараметрыОткрытияФормыОбработки = ПараметрыОткрытияФормыОбработки(
		"ОбщаяФорма.Saby_ТранспортноеСредствоЭПД", ПараметрыФормы, Форма);
	ПараметрыОткрытияФормыОбработки.ОписаниеОповещенияОЗакрытии = ПроцедураПослеОткрытияФормыТранспортногоСредства;
	ПараметрыОткрытияФормыОбработки.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФормуОбработки(ПараметрыОткрытияФормыОбработки);
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаАвтомобиля(ТранспортныеСредства)
	
	Автомобиль = ЗначениеМетаданных("Saby_ВидыТС.Автомобиль");
	
	СтрокиАвтомобиля = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ПолучитьСтрокиТС(
		ТранспортныеСредства,
		Автомобиль);
		
	Если СтрокиАвтомобиля.Количество() > 0 Тогда
		РезультатФункции = СтрокиАвтомобиля[0];
	Иначе
		РезультатФункции = Неопределено;
	КонецЕсли;	
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокиПоВиду(ТранспортныеСредства, Вид = Неопределено)
	
	Если Вид = Неопределено Тогда
		Вид = ЗначениеМетаданных("Saby_ВидыТС.ПустаяСсылка");
	КонецЕсли;
	
	ИндексСтрокиТС = 0;
	Пока ИндексСтрокиТС < ТранспортныеСредства.Количество() Цикл
		СтрокаТС = ТранспортныеСредства[ИндексСтрокиТС];
		Если СтрокаТС.Вид = Вид Тогда
			ТранспортныеСредства.Удалить(ИндексСтрокиТС);
		Иначе
			ИндексСтрокиТС = ИндексСтрокиТС + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОснованияВладенияДокументыЭПД(ФормаОбъект, ПараметрыФормы, СтрокаТС)
	
	Если СтрокаТС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	ЕстьДокументыЭПД = МодульТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(ФормаОбъект, "ДокументыЭПД");
	ЕстьКлючСтрокиТС = МодульТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(СтрокаТС,    "КлючСтроки");
	Если Не ЕстьДокументыЭПД Или Не ЕстьКлючСтрокиТС Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоКлючуТС = Новый Структура;
	ОтборПоКлючуТС.Вставить("КлючСтроки_ТранспортногоСредства", СтрокаТС.КлючСтроки);
	
	ОснованияВладенияДокументыЭПД = Новый Массив;
	
	НайденныеСтроки = МодульТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ФормаОбъект.ДокументыЭПД, ОтборПоКлючуТС);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СтруктураДокументаЭПД = МодульТНОбщегоНазначенияКлиентСервер.СтруктураДокументаЭПД();
		ЗаполнитьЗначенияСвойств(СтруктураДокументаЭПД, НайденнаяСтрока);
		ОснованияВладенияДокументыЭПД.Добавить(СтруктураДокументаЭПД);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("ДокументыЭПД", ОснованияВладенияДокументыЭПД);
	
КонецПроцедуры

#КонецОбласти // ТранспортныеСредства

&НаКлиенте
Функция ЭтоЗагрузкаЧтениеИлиОбновление(ИмяКоманды)
	
	Возврат ИмяКоманды = "ВыгрузитьВСбис"
		Или ИмяКоманды = "ЗагрузитьВСбисДинамическийТитул"
		Или ИмяКоманды = "ПрочитатьДокумент"
		Или ИмяКоманды = "ОбновитьАктивныйЭтап"  
		Или ИмяКоманды = "ОбновитьДокументИзСбис";
	
КонецФункции

&НаКлиенте
Функция ЭтоВыгрузкаДинамическогоТитула(ИмяКоманды)
	
	Возврат ИмяКоманды = "ЗагрузитьВСбисДинамическийТитул";
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОбщуюФормуСПараметрами(Форма, ИмяФормы, ПараметрыФормы, ИмяОповещения)
	
	ДопПараметры = Новый Структура;  	
	Оповещение   = Новый ОписаниеОповещения(ИмяОповещения, Форма, ДопПараметры);
	
	ПараметрыОткрытияФормыОбработки = ПараметрыОткрытияФормыОбработки("ОбщаяФорма." + ИмяФормы, ПараметрыФормы, Форма);
	ПараметрыОткрытияФормыОбработки.ОписаниеОповещенияОЗакрытии = Оповещение;
	ПараметрыОткрытияФормыОбработки.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФормуОбработки(ПараметрыОткрытияФормыОбработки);
	
КонецПроцедуры

#Область ОбработкаОповещений

&НаКлиенте
Процедура ОбработатьОповещенияДО(Форма, ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Saby_ОбновитьДокумент" Тогда
		
		Форма.ОбработатьОповещениеОбновитьДокумент(Параметр);
		
	ИначеЕсли ИмяСобытия = "Saby_ВыполнитьПереход" Тогда
		
		ОбработатьОповещениеВыполнитьПереход(Форма, Параметр);
		
	ИначеЕсли ИмяСобытия = "Saby_ЗавершениеВыполнитьДействие" Тогда
		
		ОбработатьОповещениеЗавершениеВыполнитьДействие(Форма, Параметр);
		
	ИначеЕсли ИмяСобытия = "Saby_СписокДокументов" Тогда
		
		Если Параметр.ЭтоДинамическийТитул Тогда
			Возврат;
		КонецЕсли;
		
		МодульТНОбщегоНазначенияКлиентСервер = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер");
		
		ФормаОбъект = МодульТНОбщегоНазначенияКлиентСервер.ФормаОбъект(Форма);
		Если МодульТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(ФормаОбъект, "Ссылка") Тогда
			КлючСоответствия = МодульТНОбщегоНазначенияКлиентСервер.КлючСсылка(ФормаОбъект.Ссылка);
			ОшибкиДокумента = ПолучитьОшибки(Параметр.СписокДокументов, КлючСоответствия);
			Форма.ОбновитьДанныеПоОшибкамНаСервере(ОшибкиДокумента);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Saby_СписокДокументовОбновить" Тогда  	
		
		Форма.Элементы.Список.Обновить();
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОшибки(СоответствиеДокументов, КлючСоответствия)
	
	Если ТипЗнч(КлючСоответствия) <> Тип("Структура") Тогда
		РезультатФункции = СоответствиеДокументов.Получить(КлючСоответствия);
		Если РезультатФункции = Неопределено Тогда
			Для Каждого КлючЗначение Из СоответствиеДокументов Цикл
				РезультатФункции = КлючЗначение.Значение;
				Прервать;
			КонецЦикла;
		КонецЕсли;
		Возврат РезультатФункции;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из СоответствиеДокументов Цикл
		Если КлючЗначение.Ключ.Идентификатор = КлючСоответствия.Идентификатор Тогда
			Возврат КлючЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьДополнительныеОповещения(Форма, ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Saby_ИзмененыТипыДокументовОснований" Тогда
		
		Форма.ОграничитьТипыДокументовОснованийНаСервере();
		
	ИначеЕсли ИмяСобытия = "ВыбранДокументОснованиеINI" Тогда
		
		Результат = Форма.ЗаполнениеНаОснованииINI();		
		ОповеститьПользователяОРезультатах(Форма, "ВыбранДокументОснованиеINI", Результат);
				
	ИначеЕсли ИмяСобытия = "Saby_АктуальныйСтатусВерсии" Тогда
		
		ОтобразитьНаличиеОбновлений(Форма, Параметр);
		
	ИначеЕсли ИмяСобытия = "Saby_РаспознаваниеВУ" Тогда
		
		Форма.ОбработатьРезультатРаспознаванияВУНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "Saby_ЗагрузитьДанныеТСПоРегНомеру" Тогда
		
		Форма.ОбработатьРезультатЗагрузкиДанныхТСПоРегНомеру(Параметр);
		
	ИначеЕсли ИмяСобытия = "Saby_ЗагрузитьДанныеТСПоВИН" Тогда
		
		Форма.ОбработатьРезультатЗагрузкиДанныхТСПоВИН(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбновитьЛенту" Тогда
		
		Форма.ОбновитьЛентуНаСервере();
				
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоДополнительнаяКоманда(ИмяКоманды)
	
	Возврат ИмяКоманды = "АктуальныйСтатусВерсии"
		Или ИмяКоманды = "РаспознаваниеВУ"
		Или ИмяКоманды = "ЗагрузитьДанныеТСПоРегНомеру"
		Или ИмяКоманды = "ЗагрузитьДанныеТСПоВИН";
	
КонецФункции

&НаКлиенте
// Проверка, что оповещение пришло для нужного источника
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма источник вызова
// 	ИмяСобытия - Строка - имя события оповещения 
//	Параметр - Структура - параметры оповещения 
//	Источник - Произвольный - источник оповещения 
//
// Возвращаемое значение:
// 	Булево - если Истина то оповещение предназначено для данной формы
//
Функция ОповещениеДляЭтойФормы(Форма, ИмяСобытия, Параметр, Источник)
	
	ЭтоНужнаяФорма = (Источник = Форма) Или (Источник = Форма.УникальныйИдентификатор);
	ЭтоФормаСписка = ЭтоФормаСписка(Форма); 
	
	Если ИмяСобытия = "Saby_СписокДокументовОбновить" 
		Или ИмяСобытия = "Saby_АктуальныйСтатусВерсии" Тогда
		
		РезультатФункции = ЭтоФормаСписка И ЭтоНужнаяФорма;
		
	ИначеЕсли ИмяСобытия = "Saby_СписокДокументов" Тогда
		
		РезультатФункции = Не ЭтоФормаСписка;
		
	ИначеЕсли ИмяСобытия = "Saby_Ошибки" Тогда
		
		РезультатФункции = Не ЭтоФормаСписка И ЭтоНужнаяФорма;
		
	ИначеЕсли ИмяСобытия = "ОбновитьЛенту" Тогда
		
		РезультатФункции = Не ЭтоФормаСписка И ЭтоНужнаяФорма;
		
	Иначе
		РезультатФункции = ПроверкаСобытияФормы(ИмяСобытия, ЭтоНужнаяФорма, ЭтоФормаСписка);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ПроверкаСобытияФормы(ИмяСобытия, ЭтоНужнаяФорма, ЭтоФормаСписка)
	
	Возврат (ИмяСобытия = "Saby_ВыполнитьПереход" И ЭтоНужнаяФорма)
		Или (ИмяСобытия = "Saby_ЗавершениеВыполнитьДействие" И ЭтоНужнаяФорма)
		Или (ИмяСобытия = "Saby_РаспознаваниеВУ" И ЭтоНужнаяФорма)
		Или (ИмяСобытия = "Saby_ЗагрузитьДанныеТСПоРегНомеру" И ЭтоНужнаяФорма)
		Или (ИмяСобытия = "Saby_ЗагрузитьДанныеТСПоВИН" И ЭтоНужнаяФорма)
		Или СобытияФормыОбъекта(ИмяСобытия, ЭтоНужнаяФорма, ЭтоФормаСписка);
	
КонецФункции

&НаКлиенте
Функция СобытияФормыОбъекта(ИмяСобытия, ЭтоНужнаяФорма, ЭтоФормаСписка)
	
	НужнаяФормаОбъекта = ЭтоНужнаяФорма И Не ЭтоФормаСписка;
	
	Возврат (ИмяСобытия = "Saby_ОбновитьДокумент" И НужнаяФормаОбъекта)
		Или (ИмяСобытия = "Saby_ИзмененыТипыДокументовОснований" И НужнаяФормаОбъекта)
		Или (ИмяСобытия = "Saby_ПрочитанДинамическийТитул" И НужнаяФормаОбъекта)
		Или (ИмяСобытия = "ВыбранДокументОснованиеINI" И НужнаяФормаОбъекта);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОповещениеВыполнитьПереход(Форма, Параметр)
	
	Если ЗначениеЗаполнено(Параметр.Этап) Тогда 
		Если МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ЕстьРеквизитИлиСвойство(Форма, "Объект") Тогда
			Ссылка = Форма.Объект.Ссылка;
		ИначеЕсли Параметр.Свойство("Ссылка") Тогда
			Ссылка = Параметр.Ссылка;
		Иначе
			Ссылка = Параметр.Ключ;
		КонецЕсли;
		СменаЭтапа(Ссылка, Форма, Параметр.Этап);
	Иначе 
		
		Форма.ОбработатьОповещениеВыполнитьПереходНаФорме();
		
		КартинкаСообщения = БиблиотекаКартинок["Saby_Ошибка32"];
		
		ПоказатьОповещениеПользователя(
			"Ошибка",
			,
			"Нет доступных действий",
			КартинкаСообщения,
			СтатусОповещенияПользователя.Важное,
			Новый УникальныйИдентификатор);
							
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеЗавершениеВыполнитьДействие(Форма, Параметр)
	
	Если Не ЭтоФормаСписка(Форма) Тогда
		Форма.ОбработатьОповещениеЗавершениеВыполнитьДействиеНаФорме(Параметр);
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Список.ВыделенныеСтроки.Количество() Тогда 
		ТекущаяСсылка = Форма.Элементы.Список.ВыделенныеСтроки[0];
	Иначе 
		ТекущаяСсылка = Неопределено;
	КонецЕсли;
	
	Если Параметр.status = "error" Тогда
		
		ОбработатьОшибкиИзФормыВыполнитьДействие(Форма, ТекущаяСсылка, Параметр);
		Форма.Элементы.Список.Обновить();
		
	Иначе
		
		ОбменДаннымиСБИСИзФормыСписка(Форма, "ОбновитьАктивныйЭтап");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработкаОповещений

&НаКлиенте
Функция ЭтоФормаСписка(Форма)
	
	Возврат Форма.Элементы.Найти("Список") <> Неопределено;
	
КонецФункции

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_РаботаСЮрЛицами
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_РаботаСЮрЛицами

&НаКлиенте
Функция ОбработкаШаблонаСтатусаВерсии(Шаблон)
	
	Структура = Новый Структура;
	Структура.Вставить("Заголовок",   "");
	Структура.Вставить("ЦветТекста",  Неопределено);
	Структура.Вставить("Гиперссылка", Истина);
	Структура.Вставить("Ссылка",      "https://sbis.ru/help/integration/1C_set/etrn/install");
	
	ВерсияАктуальна     = (Шаблон = Неопределено Или Шаблон = 0);
	ДоступнаНоваяВерсия = (Шаблон = 1 Или Шаблон = - 1);
	ВерсияУстарела      = 2;
	ВерсияНеСовместима  = 3;
	ВерсияСОшибками     = 4;
	
	Если ВерсияАктуальна Тогда
		Возврат Неопределено;
		
	ИначеЕсли ДоступнаНоваяВерсия Тогда		
		Структура.Заголовок   = "Доступна новая версия";
	
	ИначеЕсли Шаблон = ВерсияУстарела Тогда
		Структура.Заголовок = "Версия устарела";
		
	ИначеЕсли Шаблон = ВерсияНеСовместима Тогда		
		Структура.Заголовок = "ВЕРСИЯ НЕ СОВМЕСТИМА";
		
	ИначеЕсли Шаблон = ВерсияСОшибками Тогда		
		Структура.Заголовок   = "ВЕРСИЯ СОДЕРЖИТ КРИТИЧЕСКИЕ ОШИБКИ";
		Структура.ЦветТекста  = WebЦвета.Красный;
		
	Иначе
		
		Структура.Заголовок   = "Ошибка при получении информации о версии";
		Структура.ЦветТекста  = WebЦвета.Красный;
		Структура.Гиперссылка = Ложь;
						
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции  

#Область include_etrn_base_CommonModule_ОпределениеМодуляКодаКлиент
#КонецОбласти // include_etrn_base_CommonModule_ОпределениеМодуляКодаКлиент

#Область include_etrn_base_CommonModule_ОпределениеМодуляКода
#КонецОбласти // include_etrn_base_CommonModule_ОпределениеМодуляКода

#Область include_etrn_base_CommonModule_ВыполнениеФункцииНаСервере 
#КонецОбласти // include_etrn_base_CommonModule_ВыполнениеФункцииНаСервере

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_ОткрытиеФорм
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_ОткрытиеФорм

#Область include_etrn_base_CommonModule_ЗначениеМетаданных
#КонецОбласти // include_etrn_base_CommonModule_ЗначениеМетаданных

#Область include_etrn_base_CommonModule_КартинкаИнтерфейса
#КонецОбласти // include_etrn_base_CommonModule_КартинкаИнтерфейса

