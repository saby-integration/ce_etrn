
#Область ПрограммныйИнтерфейс

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_Авторизация
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_Авторизация

&НаКлиенте
// Выполнить обмен данными из Формы списка 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - источник вызова выполнения 
//  ИмяКоманды - Строка - имя команды, которую требуется выполнить  
//  ДополнительныеПараметры - Структура - дополнительные параметры команды
//
Процедура ОбменДаннымиСБИСИзФормыСписка(Форма, ИмяКоманды, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	ИмяМетаданных = МодульТНОбщегоНазначенияКлиентСервер.ИмяМетаданныхПоФорме(Форма);
	
	ДополнительныеПараметры.Вставить("ИмяМетаданных",           ИмяМетаданных);
	ДополнительныеПараметры.Вставить("ДвоичныеДанныеОбработки", Неопределено);
	
	Если ИмяКоманды = "ВыгрузитьВСбис" Или ИмяКоманды = "ОбновитьАктивныйЭтап" Тогда
		
		ЭтоВыгрузить    = (ИмяКоманды = "ВыгрузитьВСбис");
		ЭтоОбновитьЭтап = (ИмяКоманды = "ОбновитьАктивныйЭтап");
		
		МассивДокументов = ДокументыДляОбработки(Форма, ЭтоВыгрузить);
		
		ДанныеДляОбработки = Новый Массив;
		Для Каждого СсылкаНаДокумент Из МассивДокументов Цикл
			
			Если ЭтоВыгрузить Тогда 
				
				ПараметрыКоманды = МодульТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки(СсылкаНаДокумент);
				
			Иначе
				
				ПараметрыКоманды = МодульТНОбщегоНазначенияКлиентСервер.ПараметрыЗагрузки(СсылкаНаДокумент);
				ПараметрыКоманды.ТекущийТитул       = Форма.АктивныйЭтапСтрокой;
				ПараметрыКоманды.ТолькоАктивныйЭтап = Истина;

			КонецЕсли;
					
			ПараметрыКоманды.ИмяМетаданных = ДополнительныеПараметры.ИмяМетаданных;
			
			ДанныеДляОбработки.Добавить(ПараметрыКоманды);
			
		КонецЦикла;
		
		Если ЭтоОбновитьЭтап Тогда
			Форма.АктивныйЭтапСтрокой = "";
		КонецЕсли;
		
	Иначе
		ДанныеДляОбработки = Новый Массив;
	КонецЕсли;
	
	ВыполнитьКомандуСбис(Форма, ИмяКоманды, ДанныеДляОбработки, ДополнительныеПараметры);
	
КонецПроцедуры

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_ЗаписатьИПродолжить
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_ЗаписатьИПродолжить

&НаКлиенте
// Получение ссылки на документ в СБИС, с последующим отрытием пользователю на просмотр
// Параметры:
// СсылкаНаДокумент - ДокументСсылка - ссылка на источник выполнения
//  ВыгрузкаНаКлиенте - Булево - признак определяющий источник запросов на внешний сервис
//
Процедура ОткрытьДокументВСБИС(СсылкаНаДокумент, ВыгрузкаНаКлиенте) Экспорт
	
	Результат = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ДанныеДляОткрытияДокументаВСБИС", СсылкаНаДокумент);
	
	Если ЗначениеЗаполнено(Результат.СсылкаНаДокументВСБИС) Тогда
		ПерейтиПоНавигационнойСсылке(Результат.СсылкаНаДокументВСБИС);
	Иначе
		
		Если Результат.СписокДокументов = Неопределено Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Результат.ОписаниеОшибки;
			Сообщение.Сообщить();
		Иначе
			ОткрытьПервыйДокументИзСоответствия(Результат.СписокДокументов);
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("СписокДокументов",     Результат.СписокДокументов);
			ПараметрыФормы.Вставить("ЭтоДинамическийТитул", Ложь);
			
			Оповестить("Saby_СписокДокументов", ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Формирует печатную форму документа или QR-кода
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - источник перехода
//  ИмяКоманды - Строка - имя команды, вызывающей данную процедуру
//  ЗаголовокПечатнойФормы - Строка - заголовок печатной формы QR-кода
//  ЭтоФормаСписка - Булево - признак формы
//
Процедура ПечатьДокумента(Форма, ИмяКоманды, ЗаголовокПечатнойФормы, ЭтоФормаСписка = Ложь) Экспорт
	
	ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(Форма);
	
	Если Не ЭтоФормаСписка И Не Форма.ЭтоВО И ФормаОбъект.Ссылка.Пустая() Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтоПечатьQRКода",              ИмяКоманды = "QRКод");
	ДополнительныеПараметры.Вставить("УникальныйИдентификаторФормы", Форма.УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("Заголовок",                    ЗаголовокПечатнойФормы);
	ДополнительныеПараметры.Вставить("Форма",                        Форма);
	ДополнительныеПараметры.Вставить("ЭтоФормаСписка",               ЭтоФормаСписка);
	
	ПроцедураОткрытьПечатнуюФорму = Новый ОписаниеОповещения(
		"ОткрытьПечатнуюФорму",
		МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент"),
		ДополнительныеПараметры);
	
	ПроверитьМодифицированностьИПродолжитьВыполнение(ПроцедураОткрытьПечатнуюФорму);
	
КонецПроцедуры

#Область ОбработкаОшибок

&НаКлиенте
// Выводим описание и активизируем проблемный элемент формы
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - источник вызова команды
//  СоответствиеТаблицФормыИОбъекта - Соответствие - необходимо заполнить, когда имя таблицы на форме не соответствует
//    имени таблицы в объекте.
//
Процедура РасшифровкаЗаписиТаблицыОшибок(Форма, СоответствиеТаблицФормыИОбъекта = Неопределено) Экспорт
	
	ОшибкиПриАктивизацииСтроки(Форма, СоответствиеТаблицФормыИОбъекта);
	
	ПараметрыВыделенияДекорации = ПараметрыВыделенияДекорации(Форма);
	Если ПараметрыВыделенияДекорации.НужноОбновитьДекорацию Тогда
		Форма.ОбновитьДекорациюНаСервере(ПараметрыВыделенияДекорации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработка активизици сток таблицы ошибок, привязка к элементам формы
//
// Параметры:
//  Форма - Форма - источник вызова команды
//  СоответствиеТаблицФормыИОбъекта - Соответствие - необходимо заполнить, когда имя таблицы на форме не соответствует
//    имени таблицы в объекте.
//
Процедура ОшибкиПриАктивизацииСтроки(Форма, СоответствиеТаблицФормыИОбъекта = Неопределено) Экспорт
	
	ТекущиеДанные = Форма.Элементы.ТаблицаОшибок.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПодробноеОписаниеОшибки = ТекущиеДанные.Ошибка;
	
	Если Форма.ТекущийЭлемент.Имя <> "ТаблицаОшибок"
		Или Не ЗначениеЗаполнено(ТекущиеДанные.РеквизитОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИмен = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").СтрРазделитьЭПД(ТекущиеДанные.РеквизитОбъекта, ".");
	
	ИмяТаблицы  = ИмяТаблицыПоМассивуИмен(МассивИмен);
	ИмяЭлемента = ТекущиеДанные.ЭлементФормы;
	
	ИмяТаблицыОбъекта = СтрЗаменить(ИмяТаблицы, "_Выгрузка", "");
	
	УстановитьАктивнуюСтрокуВОсновнойТаблице(Форма, ИмяТаблицы, ТекущиеДанные.ИндексСтроки);
	
	ИмяТаблицыФормы = СтрЗаменить(ИмяТаблицыОбъекта, "ТранспортныеСредства", "Прицепы");
	
	ПрерватьВыполнение = Ложь;
	
	Если Не ЭтоТаблицаФормы(Форма, ИмяТаблицыФормы, ИмяТаблицыОбъекта)
		Или ТипЗнч(Форма.Элементы[ИмяЭлемента].Родитель) <> Тип("ТаблицаФормы") Тогда
		
		Форма.ТекущийЭлемент = Форма.Элементы[ИмяЭлемента];
		ПрерватьВыполнение = Истина;
		
	Иначе
		
		СтрокаТаблицы = СтрокаТаблицыСОшибкой(Форма, ИмяТаблицыОбъекта, ТекущиеДанные, СоответствиеТаблицФормыИОбъекта);
		Если СтрокаТаблицы = Неопределено Тогда
			ПрерватьВыполнение = Истина;
		КонецЕсли;
		
	КонецЕсли;
		
	Если Не ПрерватьВыполнение И ИмяТаблицыОбъекта = "ТранспортныеСредства" Тогда
		Автомобиль = ЗначениеМетаданных("Saby_ВидыТС.Автомобиль");
		Если СтрокаТаблицы.Вид = Автомобиль Тогда
			ТекущиеДанные.ЭлементФормы = "ТранспортноеСредствоСтрокой";
			Форма.ТекущийЭлемент = Форма.Элементы.ТранспортноеСредствоСтрокой;
			ПрерватьВыполнение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПрерватьВыполнение Тогда
		Возврат;
	КонецЕсли;	
	
	Структура = Новый Структура;
	Структура.Вставить("ИмяТаблицыФормы", ИмяТаблицыФормы); 
	Структура.Вставить("ИмяЭлемента",     ИмяЭлемента);
	Структура.Вставить("МассивИмен",      МассивИмен); 
	Структура.Вставить("СтрокаТаблицы",   СтрокаТаблицы);
		
	ОбработкаСтрокиТаблицыПоОшибкам(Форма, Структура);
	
КонецПроцедуры

&НаКлиенте
// Параметры для декорации адресов погрузки и доставки
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - источник вызова
//
// Возвращаемое значение:
//  Структура - параметры декорации
//
Функция ПараметрыВыделенияДекорации(Форма) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("НужноОбновитьДекорацию", Ложь);
	РезультатФункции.Вставить("Выделить",               Новый Массив);
	РезультатФункции.Вставить("ОтменитьВыделение",      Новый Массив);
	
	ТекущиеДанные = Форма.Элементы.ТаблицаОшибок.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		ЭлементФормы = Неопределено;
	Иначе
		ЭлементФормы = ТекущиеДанные.ЭлементФормы;
	КонецЕсли;
		
	ПереченьДекораций = Новый Массив;
	ПереченьДекораций.Добавить("ДекорацияЗаполнитьАдресПогрузки");
	ПереченьДекораций.Добавить("ДекорацияЗаполнитьАдресДоставки");
	ПереченьДекораций.Добавить("ТранспортноеСредствоСтрокой");
	ПереченьДекораций.Добавить("ВодительСтрокой");
	ПереченьДекораций.Добавить("Оформил");
	ПереченьДекораций.Добавить("МедосмотрВыездСтрокой");
	ПереченьДекораций.Добавить("МедосмотрЗаездСтрокой");
	ПереченьДекораций.Добавить("ТехосмотрСтрокой");
	ПереченьДекораций.Добавить("ДекорацияЗаполнитьМестоОтправления");
	ПереченьДекораций.Добавить("ОрганизацияСтрокой");
	ПереченьДекораций.Добавить("ОдометрВыездСтрокой");
	ПереченьДекораций.Добавить("ОдометрЗаездСтрокой");
	ПереченьДекораций.Добавить("ДекорацияЗаполнитьЛицензияДоРейса");
	ПереченьДекораций.Добавить("ДекорацияЗаполнитьПодачаТС");
	ПереченьДекораций.Добавить("ОтправительСтрокой");
	ПереченьДекораций.Добавить("ПеревозчикСтрокой");
	ПереченьДекораций.Добавить("ОтветственныйЗаПеревозкуСтрокой");
	ПереченьДекораций.Добавить("ВодителиСтрокой");
	ПереченьДекораций.Добавить("ОформительСтрокой");
	ПереченьДекораций.Добавить("ПолучательСтрокой");
	ПереченьДекораций.Добавить("ЗаказчикСтрокой");
	ПереченьДекораций.Добавить("ВладелецОбъектаСтрокой");
	ПереченьДекораций.Добавить("ОтгрузчикСтрокой");
	ПереченьДекораций.Добавить("Отгрузка_Ответственный");
	
	Для Каждого ИмяДекорации Из ПереченьДекораций Цикл
		ЭлементДекорации = Форма.Элементы.Найти(ИмяДекорации);
		Если ЭлементДекорации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Выделена = ЭлементДекорации.Подсказка <> "";
		
		Если Выделена И ИмяДекорации <> ЭлементФормы Тогда
			РезультатФункции.НужноОбновитьДекорацию = Истина;
			РезультатФункции.ОтменитьВыделение.Добавить(ИмяДекорации);
		ИначеЕсли Не Выделена И ИмяДекорации = ЭлементФормы Тогда
			РезультатФункции.НужноОбновитьДекорацию = Истина;
			РезультатФункции.Выделить.Добавить(ИмяДекорации); 
		Иначе 
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ОбработкаОшибок

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_ЮрЛицаИнтерфейс
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_ЮрЛицаИнтерфейс

#Область ТранспортныеСредстваИнтерфейс

&НаКлиенте
// Обработчик стандартного события Нажатие для транспортного средства
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма с транспорными средствами
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки нажатия
//  ПроцедураОбновленияДанныхТС - ОписаниеОповещения - процедура, выполняемая после выбора транспортного средства
//  ТолькоПросмотр - Булево - признак доступности изменений на форме транспортного средства
//
Процедура ТранспортноеСредствоНажатие(Форма, СтандартнаяОбработка, ПроцедураОбновленияДанныхТС, ТолькоПросмотр = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытияФормыТС = ПараметрыОткрытияФормыТС(ПроцедураОбновленияДанныхТС, ТолькоПросмотр);
	ПараметрыОткрытияФормыТС.ДвоичныеДанныеОбработки = Форма.ДвоичныеДанныеОбработки;
	ОткрытьФормуТранспортногоСредства(Форма, ПараметрыОткрытияФормыТС);
	
КонецПроцедуры

&НаКлиенте
// Обработчик стандартного события Нажатие для прицепов
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма с транспорными средствами
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки нажатия
//
Процедура ПрицепыНажатие(Форма, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Форма.ТекущийЭлемент = Форма.Элементы.Прицепы;
	
КонецПроцедуры

&НаКлиенте
// Обработчик стандартного события Выбор для прицепов
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма с транспорными средствами
//  ВыбраннаяСтрока - Число - идентификатор выбранной строки прицепа
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки выбора
//  ПроцедураОбновленияДанныхТС - ОписаниеОповещения - процедура, выполняемая после выбора прицепа
//  ТолькоПросмотр - Булево - признак доступности изменений на форме транспортного средства
//
Процедура ТаблицаПрицеповВыбор(Форма, ВыбраннаяСтрока, СтандартнаяОбработка,
		ПроцедураОбновленияДанныхТС, ТолькоПросмотр = Ложь) Экспорт
	
	ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(Форма);
	
	СтрокаПрицепа = ФормаОбъект.ТранспортныеСредства.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытияФормыТС = ПараметрыОткрытияФормыТС(ПроцедураОбновленияДанныхТС, ТолькоПросмотр);
	ПараметрыОткрытияФормыТС.ЭтоПрицеп               = Истина;
	ПараметрыОткрытияФормыТС.СтрокаТС                = СтрокаПрицепа;
	ПараметрыОткрытияФормыТС.ДвоичныеДанныеОбработки = Форма.ДвоичныеДанныеОбработки;
	
	ОткрытьФормуТранспортногоСредства(Форма, ПараметрыОткрытияФормыТС);
	
КонецПроцедуры

&НаКлиенте
// Обработчик стандартного события ПриНачалеРедактирования для прицепов
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма с транспорными средствами
//  ПроцедураОбновленияДанныхТС - ОписаниеОповещения - процедура, выполняемая после обработки самого события
//
Процедура ТаблицаПрицеповПриНачалеРедактирования(Форма, ПроцедураОбновленияДанныхТС) Экспорт
	
	ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(Форма);
	
	Форма.Элементы.Прицепы.ТекущиеДанные.Вид = ЗначениеМетаданных("Saby_ВидыТС.Прицеп");
	ТекущаяСтрока = ФормаОбъект.ТранспортныеСредства.НайтиПоИдентификатору(Форма.Элементы.Прицепы.ТекущаяСтрока);
	
	ПараметрыОткрытияФормыТС = ПараметрыОткрытияФормыТС(ПроцедураОбновленияДанныхТС);
	ПараметрыОткрытияФормыТС.ЭтоПрицеп               = Истина;
	ПараметрыОткрытияФормыТС.СтрокаТС                = ТекущаяСтрока;
	ПараметрыОткрытияФормыТС.ДвоичныеДанныеОбработки = Форма.ДвоичныеДанныеОбработки;
	
	ОткрытьФормуТранспортногоСредства(Форма, ПараметрыОткрытияФормыТС);
	
КонецПроцедуры

#КонецОбласти // ТранспортныеСредстваИнтерфейс

&НаКлиенте
// Открывает форму изменения/ просмотра данных водителя или ответственного лица 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма источник вызова 
//  ПараметрыФормы - Структура - параметры для запуска формы водителя/отвественного  
//  ИмяОповещения - Строка - имя оповещения при получении результата  
// 
Процедура ИзменитьДанныеВодителяОтветственногоЛица(Форма, ПараметрыФормы, ИмяОповещения) Экспорт
	
	Если ПараметрыФормы.Свойство("РольСтрокой") Тогда
		
		ИмяПеречисления = "Saby_РолиОтветственных." + ПараметрыФормы.РольСтрокой;
		ПараметрыФормы.Вставить("Роль", ЗначениеМетаданных(ИмяПеречисления));
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ИмяМетаданных", МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ИмяМетаданныхПоФорме(Форма));
	ПараметрыФормы.Вставить("ЭтоВО", Форма.ЭтоВО);
	ПараметрыФормы.Вставить("ДвоичныеДанныеОбработки", Форма.ДвоичныеДанныеОбработки);
	
	ОткрытьОбщуюФормуСПараметрами(Форма, "Saby_ОтветственныйЭПД", ПараметрыФормы, ИмяОповещения);
	
КонецПроцедуры

&НаКлиенте
// Открывает данные ответственного лица для редактирования
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма источник вызова
//  СтруктураОтветственногоЛица - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.СтруктураОтветственногоЛица()
//  РольСтрокой - Строка - роль ответственного лица строкой
//
Процедура НачатьРедактированиеОтветственногоЛица(Форма, СтруктураОтветственногоЛица, РольСтрокой) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",                       Форма);
	ДополнительныеПараметры.Вставить("СтруктураОтветственногоЛица", СтруктураОтветственногоЛица);
	
	ПроцедураПослеРедактированияОтветственногоЛица = Новый ОписаниеОповещения(
		"ПослеРедактированияОтветственногоЛица", МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент"), ДополнительныеПараметры);
	
	ИмяМетаданных = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ИмяМетаданныхПоФорме(Форма);
	СтруктураОтветственногоЛица.Вставить("ИмяМетаданных", ИмяМетаданных);
	
	СтруктураОтветственногоЛица.Вставить("Наименование", РольСтрокой);
	СтруктураОтветственногоЛица.Вставить("ЭтоВО", Форма.ЭтоВО);
	
	ПараметрыОткрытияФормы = ПараметрыОткрытияФормыОбработки(
		"ОбщаяФорма.Saby_ОтветственныйЭПД", СтруктураОтветственногоЛица, Форма);
	
	ПараметрыОткрытияФормы.ОписаниеОповещенияОЗакрытии = ПроцедураПослеРедактированияОтветственногоЛица;
	ПараметрыОткрытияФормы.РежимОткрытияОкна           = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ПараметрыОткрытияФормы.Параметры.Вставить("ДвоичныеДанныеОбработки", Форма.ДвоичныеДанныеОбработки);
	
	ОткрытьФормуОбработки(ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
// Выполняет действия после редактирования ответственного лица
//
// Параметры:
//  Результат - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.СтруктураОтветственногоЛица()
//  ДополнительныеПараметры - Структура - см. НачатьРедактированиеОтветственногоЛица()
//
Процедура ПослеРедактированияОтветственногоЛица(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(ДополнительныеПараметры.Форма);
	
	СтрокаОтветственного = Неопределено;
	Если ДополнительныеПараметры.СтруктураОтветственногоЛица.ИдентификаторСтроки <> Неопределено Тогда
		СтрокаОтветственного = ФормаОбъект.ОтветственныеЛица.НайтиПоИдентификатору(
			ДополнительныеПараметры.СтруктураОтветственногоЛица.ИдентификаторСтроки);
	КонецЕсли;
	
	Если Результат.Удалить Тогда
		Если СтрокаОтветственного <> Неопределено Тогда
			ФормаОбъект.ОтветственныеЛица.Удалить(СтрокаОтветственного);
		КонецЕсли;
	Иначе
		Если СтрокаОтветственного = Неопределено Тогда
			СтрокаОтветственного = ФормаОбъект.ОтветственныеЛица.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаОтветственного, Результат);
		
		Если СтрокаОтветственного.Роль = ЗначениеМетаданных("Saby_РолиОтветственных.Водитель") Тогда
			МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ОбновитьВодителейНаФорме(ДополнительныеПараметры.Форма);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры.Форма.ПослеРедактированияОтветственногоЛицаНаФорме(Результат);
	
КонецПроцедуры

#Область ДокументОснование

&НаКлиенте
// Зачистка документа основания по команде из формы
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма источник вызова
//
Процедура ОчиститьДокументОснованиеНаФорме(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ДокументОснование) Тогда
		
		Форма.Модифицированность = Истина;
		
		ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(Форма);
		
		ФормаОбъект.ДокументОснование_Идентификатор    = "";
		ФормаОбъект.ДокументОснование_ОбъектМетаданных = "";
		
		Форма.ДокументОснование = Неопределено;
		Форма.Элементы.ДекорацияДокументОснование.Заголовок = "Выбрать документ основание";
		
		Форма.Элементы.ОчиститьДокументОснование.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработка нажатия на декорацию документа основания
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма источник вызова
//
Процедура ДокументОснованиеНажатие(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ДокументОснование) Тогда
		ПоказатьЗначение(, Форма.ДокументОснование);
	Иначе
		
		Если Форма.ТипыОснований.Количество() = 0 Тогда
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Ссылка", Форма.Объект.Ссылка);
			
			ОткрытьФорму("ОбщаяФорма.Saby_ВыборТиповЭПД", ДопПараметры, Форма);
			
		Иначе
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Форма",     Форма);
			
			Оповещение = Новый ОписаниеОповещения(
				"ОбработкаВыбораТипаДанныхДокументаОснования", МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент"), ДопПараметры);
			Форма.ТипыОснований.ПоказатьВыборЭлемента(Оповещение, "Выбор типа данных");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработка выбора типа документа основания
// Параметры:
//  ВыбранныйЭлемент - ТипМетаданных - выбранный тип документа основания   
//  ДопПараметры - Структура - дополнительные параметры выбора
//
Процедура ОбработкаВыбораТипаДанныхДокументаОснования(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		ДокОснование = ДопПараметры.Форма.ДокументОснование;
		
		Оповещение = Новый ОписаниеОповещения(
			"ПослеВыбораЗначенияДокументаОснования", МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент"), ДопПараметры);
		ПоказатьВводЗначения(Оповещение, ДокОснование, "Выберите основание", ВыбранныйЭлемент.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработка выбора значения документа основания
// Параметры:
//  Значение - ДокументСсылка - выбранный документ как источник для заполнения данных
//  ДопПараметры - Структура - дополнительные параметры
//
Процедура ПослеВыбораЗначенияДокументаОснования(Значение, ДопПараметры) Экспорт
	
	Форма = ДопПараметры.Форма;
	
	ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(Форма);
	
	Если Не ЗначениеЗаполнено(ФормаОбъект.Ссылка) Тогда
		ЗаписатьДанныеДокумента(Форма);
	КонецЕсли;
	
	Если Значение <> Неопределено Тогда
		
		Форма.Модифицированность = Истина;
		
		Форма.ДокументОснование = Значение;
		Форма.Элементы.ДекорацияДокументОснование.Заголовок = СокрЛП(Значение);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ДокументОснование) Тогда
		
		Форма.Элементы.ОчиститьДокументОснование.Доступность = Истина;
		Оповестить("ВыбранДокументОснованиеINI", , Форма);
		
	Иначе 
		
		ФормаОбъект.ДокументОснование_Идентификатор    = "";
		ФормаОбъект.ДокументОснование_ОбъектМетаданных = "";
		
		Форма.Элементы.ОчиститьДокументОснование.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
// Запись документа из фомы
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма источник вызова
//
Процедура ЗаписатьДанныеДокумента(Форма) Экспорт
	
	Если Не Форма.ЭтоВО И Форма.Объект.Проведен Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписи);
	
	Форма.Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
// Получения выделенных строк - ссылок на документы для последующей обработки
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - источник данных списка
//  ЗаполнитьАктивныйЭтап - Булево - признак запонения активного этапа на форме
// Возвращаемое значение:
//  Массив - ссылки на документы для обработки
//
Функция ДокументыДляОбработки(Форма, ЗаполнитьАктивныйЭтап = Ложь) Экспорт
	
	ВыделенныеСтроки = Форма.Элементы.Список.ВыделенныеСтроки;
	
	Массив = Новый Массив;
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		Если ЗаполнитьАктивныйЭтап И Форма.АктивныйЭтапСтрокой = "" Тогда
			Форма.АктивныйЭтапСтрокой = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.АктивныйЭтапСтрокой", Строка);
		КонецЕсли;
		Массив.Добавить(Строка);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

#Область Лента

&НаКлиенте
// Обработчик события ОбработкаНавигационнойСсылки для декорации титула в визуализации ленты в документе.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма источник вызова
//  Элемент - ДекорацияФормы - декорация титула
//  СтандартнаяОбработка - Булево - признак продолжения стандартной обработки
//
Процедура ОбработкаНавигационнойСсылкиЛенты(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	МассивПодстрок = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").СтрРазделитьЭПД(Элемент.Имя, "_");
	
	ИдентификаторСтроки = Число(МассивПодстрок[МассивПодстрок.ВГраница()]);
	
	СтрокаЛенты = Форма.Лента.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаЛенты.Основной Тогда
		Форма.АктивизироватьРеквизитИзТитула(СтрокаЛенты);
	Иначе
		Форма.ОткрытьФормуТитула(
			СтрокаЛенты.НаименованиеТитула,
			СтрокаЛенты.ИдентификаторТитула,
			СтрокаЛенты.Описание);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Лента

&НаКлиенте
// Проверяет возможность добавления новой строки подчиненной таблицы
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма источник вызова
//  ИмяОсновнойТаблицы - Строка - имя таблицы, от которой зависит текущая
//  Отказ - Булево - признак продолжения стандартного обработчика события
//
Процедура ПередНачаломДобавленияСтрокиСвязаннойТаблицы(Форма, ИмяОсновнойТаблицы, Отказ) Экспорт
	
	ИдентификаторСтроки = Форма.Элементы[ИмяОсновнойТаблицы].ТекущаяСтрока;
	Если ИдентификаторСтроки = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрана строка в основной таблице " + ИмяОсновнойТаблицы;
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Открывает форму редактирования иных получателей документа
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма источник вызова
//  ТолькоПросмотр - Булево - определяет доступно ли редактирование в форме иных получателей
//
Процедура ОткрытьИныхПолучателей(Форма, ТолькоПросмотр) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИныеПолучатели", Новый Массив);
	ПараметрыФормы.Вставить("ЭтоВО",          Форма.ЭтоВО);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	ФормаОбъект = МодульТНОбщегоНазначенияКлиентСервер.ФормаОбъект(Форма);
	
	ОтборИныхПолучателей = Новый Структура("Роль", ЗначениеМетаданных("Saby_РолиКонтрагентов.ИнойПолучатель"));
	ИныеПолучатели = МодульТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ФормаОбъект.ДанныеЮрЛиц, ОтборИныхПолучателей);
	
	Для Каждого СтрокаЮрЛица Из ИныеПолучатели Цикл
		СтруктураЮрЛица = МодульТНОбщегоНазначенияКлиентСервер.ШаблонДанныхЮрЛица();
		ЗаполнитьЗначенияСвойств(СтруктураЮрЛица, СтрокаЮрЛица);
		ПараметрыФормы.ИныеПолучатели.Добавить(СтруктураЮрЛица);
	КонецЦикла;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", Форма);
	Оповещение = Новый ОписаниеОповещения(
		"ПослеИзмененияИныхПолучателей", МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент"), ДопПараметры);
	
	ПараметрыОткрытияФормыОбработки = ПараметрыОткрытияФормыОбработки(
		"ОбщаяФорма.Saby_ИныеПолучателиДокументаЭПД", ПараметрыФормы, Форма);
	ПараметрыОткрытияФормыОбработки.ОписаниеОповещенияОЗакрытии = Оповещение;
	ПараметрыОткрытияФормыОбработки.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФормуОбработки(ПараметрыОткрытияФормыОбработки);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

&НаКлиенте
// Выполняет обновление кэша локальных сертификатов перед выполнением подписания и отправки динамического титула
//
// Параметры:
//  ПроцедураПродолжения - ОписаниеОповещения - процедура для выполнения после обневления кэша
//  СсылкаНаДокумент - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на документ,
//    из которого выполняется отправка титула
//
Процедура ОбновитьКЭШЛокальныхСертификатовИПродолжитьВыполнение(ПроцедураПродолжения, СсылкаНаДокумент) Экспорт
	
	СтруктураДокумента = Новый Структура();
	СтруктураДокумента.Вставить("Документ1С", СсылкаНаДокумент);
	СтруктураДокумента.Вставить("Этап", Новый Массив);
	
	СтруктураЭтапа = Новый Структура;
	СтруктураЭтапа.Вставить("Действие", Новый Массив);
	СтруктураДокумента.Этап.Добавить(СтруктураЭтапа);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокДокументовСБИС", Новый Массив);
	ПараметрыФормы.СписокДокументовСБИС.Добавить(СтруктураДокумента);
	
	// BSLLS:GetFormMethod-off
	ФормаВыполнитьДействие = ПолучитьФорму("Обработка.SABY.Форма.ВыполнитьДействие", ПараметрыФормы);
	ФормаВыполнитьДействие.ОбновитьКэшЛокальныхСертификатов(ПроцедураПродолжения);
	// BSLLS:GetFormMethod-on
	
КонецПроцедуры

&НаКлиенте
// Выполняет действия после открытия формы выбора транспортного средства
//
// Параметры:
//  СтруктураТранспортногоСредства - Структура - структура параметров транспортного средства.
//    Совпадает с табличной частию ТранспортныеСредства в документе Saby_ТранспортнаяНакладная.
//  ДополнительныеПараметры - Структура - контекст из вызывающей процедуры
//
Процедура ПослеОткрытияФормыТранспортногоСредства(СтруктураТранспортногоСредства, ДополнительныеПараметры) Экспорт
	
	МодульКлиентСервер = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	Форма = ДополнительныеПараметры.Форма;
	ФормаОбъект = МодульКлиентСервер.ФормаОбъект(Форма);
	
	Если ДополнительныеПараметры.ТолькоПросмотр
		Или Не ЗначениеЗаполнено(СтруктураТранспортногоСредства) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = ИдентификаторСтрокиТС(ФормаОбъект, Форма, СтруктураТранспортногоСредства, МодульКлиентСервер);
	
	СтрокаТранспортногоСредства = ФормаОбъект.ТранспортныеСредства.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТранспортногоСредства, СтруктураТранспортногоСредства);
	
	Если СтруктураТранспортногоСредства.ЭтоВО Тогда
		
		// Заполним данные документов ЭПД и ЮрЛиц
		Если СтрокаТранспортногоСредства.Свойство("КлючСтроки") Тогда
			
			КлючСтроки = СтрокаТранспортногоСредства.КлючСтроки;
			
			// зачистим документы ЭПД
			УдалитьДокументыЭПДДляТС(ФормаОбъект, КлючСтроки);
			
		Иначе
			КлючСтроки = Неопределено;
		КонецЕсли;
		
		ЗаполнениеДокументовЭПДТС(СтруктураТранспортногоСредства, ДополнительныеПараметры, КлючСтроки);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТранспортногоСредства.РегистрационныйНомер) Тогда
		ФормаОбъект.ТранспортныеСредства.Удалить(СтрокаТранспортногоСредства);
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
	Если ДополнительныеПараметры.ПроцедураОбновленияДанныхТС <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ПроцедураОбновленияДанныхТС);
	Иначе
		МодульКлиентСервер.ОбновитьТранспортныеСредстваНаФорме(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыСБИС(Форма, ИмяКоманды, ИмяМетаданных) Экспорт
	
	ДатаОбновления = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ПоследнееУспешноЗагруженноеИзменение", ИмяМетаданных);
	Если Не ЗначениеЗаполнено(ДатаОбновления) Тогда
		МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ОбновитьДокументыЗаПериод(Форма, ИмяКоманды);
	Иначе
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Начало", ДатаОбновления);
		
		// Обновляем все документы разом
		// не важно выделенны строки или нет
		ОбменДаннымиСБИСИзФормыСписка(Форма, ИмяКоманды, ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыЗаПериод(Форма, ИмяКоманды, НеОбновлятьДатуИзменения = Ложь) Экспорт
	
	// Обновить документы с даты
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКоманды", ИмяКоманды);
	ДополнительныеПараметры.Вставить("Форма",      Форма);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеВводаПериодаЗагрузки",
		МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент"),
		ДополнительныеПараметры);
	
	ПараметрыОткрытияФормыОбработки = ПараметрыОткрытияФормыОбработки("ОбщаяФорма.Saby_НастройкиПериодаЭПД", , Форма);
	ПараметрыОткрытияФормыОбработки.ОписаниеОповещенияОЗакрытии = Оповещение;
	ПараметрыОткрытияФормыОбработки.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФормуОбработки(ПараметрыОткрытияФормыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаПериодаЗагрузки(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Обновление не выполнено! Не указан период обновления документов";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Начало",    РезультатЗакрытия.Начало);
	ДопПараметры.Вставить("Окончание", РезультатЗакрытия.Окончание);
	
	ОбменДаннымиСБИСИзФормыСписка(
		ДополнительныеПараметры.Форма,
		ДополнительныеПараметры.ИмяКоманды,
		ДопПараметры);
	
КонецПроцедуры

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункцииМодуля

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_ОповещенияОРезультатеВыполненияКоманды
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_ОповещенияОРезультатеВыполненияКоманды

&НаКлиенте
Процедура ОткрытьПервыйДокументИзСоответствия(СоответствиеДокументов) Экспорт
	
	Для Каждого КлючЗначение Из СоответствиеДокументов Цикл
		СсылкаНаДокумент      = КлючЗначение.Ключ;
		СтруктураДанныхОшибок = КлючЗначение.Значение;
		Если Не ЕстьСсылкаНаДокумент(СсылкаНаДокумент, СтруктураДанныхОшибок) Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыФормыДокумента = Новый Структура;
		ПараметрыФормыДокумента.Вставить("Ключ", СсылкаНаДокумент);
		ИмяФормы = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").СтрШаблонЭПД(
			"Документ.%1.ФормаОбъекта", СтруктураДанныхОшибок.ИмяМетаданных);
		
		ПараметрыОткрытияФормыОбработки = ПараметрыОткрытияФормыОбработки(ИмяФормы, ПараметрыФормыДокумента);
		ОткрытьФормуОбработки(ПараметрыОткрытияФормыОбработки);
		
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьСсылкаНаДокумент(СсылкаНаДокумент, СтруктураДанныхОшибок)
	
	Возврат ЗначениеЗаполнено(СсылкаНаДокумент)
		И ТипЗнч(СсылкаНаДокумент) <> Тип("Структура");
	
КонецФункции

&НаКлиенте
Процедура УстановитьАктивнуюСтрокуВОсновнойТаблице(Форма, ИмяТаблицы, ИндексСтроки)
	
	ЭтоАкты           = ИмяТаблицы = "Акты";
	ЭтоШтрафы         = ИмяТаблицы = "Штрафы";
	ЭтоАктыВыгрузка   = ИмяТаблицы = "Акты_Выгрузка";
	ЭтоШтрафыВыгрузка = ИмяТаблицы = "Штрафы_Выгрузка";
	
	ЭтоНужнаяТаблица = ЭтоАкты Или ЭтоШтрафы Или ЭтоАктыВыгрузка Или ЭтоШтрафыВыгрузка;
	Если Не ЭтоНужнаяТаблица Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицыОбъекта = СтрЗаменить(ИмяТаблицы, "_Выгрузка", "");
	
	ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(Форма);
	
	КлючСтроки = ФормаОбъект[ИмяТаблицыОбъекта][ИндексСтроки].КлючСтроки_Отметки;
	Отбор = Новый Структура;
	Отбор.Вставить("КлючСтроки", КлючСтроки);
	НайденныеСтрокиОтметок = ФормаОбъект.Отметки.НайтиСтроки(Отбор);
	Если НайденныеСтрокиОтметок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтрокиОтметок = НайденныеСтрокиОтметок[0].ПолучитьИдентификатор();
	
	Если ЭтоАкты Или ЭтоШтрафы Тогда
		Форма.ТекущийЭлемент = Форма.Элементы.Отметки;
		Форма.Элементы.Отметки.ТекущаяСтрока  = ИдентификаторСтрокиОтметок;
		Форма.ОтборОтметокПоТипу(ИдентификаторСтрокиОтметок);
		Форма.Элементы.Отметки.ТекущаяСтрока  = ИдентификаторСтрокиОтметок;
	ИначеЕсли ЭтоАктыВыгрузка Или ЭтоШтрафыВыгрузка Тогда
		Форма.ТекущийЭлемент = Форма.Элементы.Отметки_Выгрузка;
		Форма.Элементы.Отметки_Выгрузка.ТекущаяСтрока  = ИдентификаторСтрокиОтметок;
		Форма.ОтборОтметокПоТипу(ИдентификаторСтрокиОтметок);
		Форма.Элементы.Отметки_Выгрузка.ТекущаяСтрока  = ИдентификаторСтрокиОтметок;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСтрокиТаблицыПоОшибкам(Форма, Параметры)
	
	ИдентификаторСтроки = Параметры.СтрокаТаблицы.ПолучитьИдентификатор();
	
	ИмяТаблицыФормы = Параметры.ИмяТаблицыФормы;
	МассивИмен      = Параметры.МассивИмен;
	
	ИмяТаблицыФормы = ИмяТаблицыФормы(ИмяТаблицыФормы, Параметры.СтрокаТаблицы);
	Если Не ЗначениеЗаполнено(Параметры.ИмяЭлемента) Тогда
		ИмяЭлемента = ИмяТаблицыФормы + МассивИмен[МассивИмен.ВГраница()];
	Иначе
		ИмяЭлемента = Параметры.ИмяЭлемента;
	КонецЕсли;
	
	Форма.ТекущийЭлемент = Форма.Элементы[ИмяТаблицыФормы];
	Форма.Элементы[ИмяТаблицыФормы].ТекущаяСтрока  = ИдентификаторСтроки;
	Форма.Элементы[ИмяТаблицыФормы].ТекущийЭлемент = Форма.Элементы[ИмяЭлемента];
	
	Если ИмяТаблицыФормы = "Отметки" Или ИмяТаблицыФормы = "Отметки_Выгрузка" Тогда
		Форма.ОтборОтметокПоТипу(ИдентификаторСтроки);
		Форма.Элементы[ИмяТаблицыФормы].ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаТаблицыСОшибкой(Форма, Знач ИмяТаблицыОбъекта, ТекущиеДанные, СоответствиеТаблицФормыИОбъекта)
	
	ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(Форма);
	
	Если СоответствиеТаблицФормыИОбъекта <> Неопределено
		И СоответствиеТаблицФормыИОбъекта[ИмяТаблицыОбъекта] <> Неопределено Тогда
		ИмяТаблицыОбъекта = СоответствиеТаблицФормыИОбъекта[ИмяТаблицыОбъекта];
	КонецЕсли;
	
	Если ТекущиеДанные.ИндексСтроки < ФормаОбъект[ИмяТаблицыОбъекта].Количество() Тогда
		Возврат ФормаОбъект[ИмяТаблицыОбъекта][ТекущиеДанные.ИндексСтроки];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ЭтоТаблицаФормы(Форма, ИмяТаблицыФормы, ИмяТаблицыОбъекта)
	
	Если ИмяТаблицыФормы = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(Форма);
	
	ТаблицаФормы = Форма.Элементы.Найти(ИмяТаблицыФормы) <> Неопределено;
	
	ТаблицаОбъекта = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ЕстьРеквизитИлиСвойство(ФормаОбъект, ИмяТаблицыОбъекта)
		И ТипЗнч(ФормаОбъект[ИмяТаблицыОбъекта]) = Тип("ДанныеФормыКоллекция");
	
	Возврат ТаблицаФормы Или ТаблицаОбъекта;
	
КонецФункции

&НаКлиенте
Функция ИмяТаблицыПоМассивуИмен(МассивИмен)
	
	УровеньИерархии = 2;
	Если МассивИмен.Количество() = УровеньИерархии Тогда
		РезультатФункции = МассивИмен[0];
	Иначе
		РезультатФункции = "";
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ИмяТаблицыФормы(ИмяТаблицыФормы, СтрокаТаблицы)
	
	Если ИмяТаблицыФормы <> "КонтактныеДанные" Тогда
		Возврат ИмяТаблицыФормы;
	КонецЕсли;
	
	Если СтрокаТаблицы.Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов.Отправитель") Тогда
		Результат = "ОтправительКонтактныеДанные";
	ИначеЕсли СтрокаТаблицы.Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов.Получатель") Тогда
		Результат = "ПолучательКонтактныеДанные";
	ИначеЕсли СтрокаТаблицы.Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов.Перевозчик") Тогда
		Результат = "ПеревозчикКонтактныеДанные";
	ИначеЕсли СтрокаТаблицы.Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов.ВладелецОбъекта") Тогда
		Результат = "ВладелецОбъектаКонтактныеДанные";
	ИначеЕсли СтрокаТаблицы.Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов.Отгрузчик") Тогда
		Результат = "ОтгрузчикКонтактныеДанные";
	Иначе
		Результат = ИмяТаблицыФормы;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ТранспортныеСредства

&НаКлиенте
Функция ПараметрыОткрытияФормыТС(ПроцедураОбновленияДанныхТС = Неопределено, ТолькоПросмотр = Ложь)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ЭтоПрицеп",                   Ложь);
	РезультатФункции.Вставить("ТолькоПросмотр",              ТолькоПросмотр);
	РезультатФункции.Вставить("СтрокаТС",                    Неопределено);
	РезультатФункции.Вставить("ПроцедураОбновленияДанныхТС", ПроцедураОбновленияДанныхТС);
	РезультатФункции.Вставить("ДвоичныеДанныеОбработки",     Неопределено);
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуТранспортногоСредства(Форма, ПараметрыОткрытияФормыТС)
	
	МодульОбщегоНазначенияКлиентСервер = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	ФормаОбъект = МодульОбщегоНазначенияКлиентСервер.ФормаОбъект(Форма);
	
	Если ПараметрыОткрытияФормыТС.СтрокаТС = Неопределено Тогда
		ПараметрыОткрытияФормыТС.СтрокаТС = СтрокаАвтомобиля(ФормаОбъект.ТранспортныеСредства);
	КонецЕсли;
	
	Если ПараметрыОткрытияФормыТС.СтрокаТС <> Неопределено Тогда
		ПараметрыФормы = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").СтрокаТаблицыФормыВСтруктуру(
			Форма, "Прицепы", ПараметрыОткрытияФормыТС.СтрокаТС);
	Иначе
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	Если Форма.ЭтоВО Тогда 
		ЗаполнитьОснованияВладенияДокументыЭПД(ФормаОбъект, ПараметрыФормы, ПараметрыОткрытияФормыТС.СтрокаТС);
	КонецЕсли;
	
	ТолькоПросмотр = ПараметрыОткрытияФормыТС.ТолькоПросмотр Или Форма.ТолькоПросмотр;
	Если Форма.Элементы.Найти("Страница_Основное") <> Неопределено Тогда
		ТолькоПросмотр = ТолькоПросмотр Или Форма.Элементы.Страница_Основное.ТолькоПросмотр;
	КонецЕсли;
	Если Форма.Элементы.Найти("ГруппаТС") <> Неопределено Тогда
		ТолькоПросмотр = ТолькоПросмотр Или Форма.Элементы.ГруппаТС.ТолькоПросмотр;
	КонецЕсли;
	
	СтруктураСвойств = Новый Структура;
	СтруктураСвойств.Вставить("СсылкаНаДокумент", Неопределено);
	
	ЗаполнитьЗначенияСвойств(СтруктураСвойств, Форма);
	
	ТипДокументаИсточника = МодульОбщегоНазначенияКлиентСервер.ИмяМетаданныхПоФорме(Форма);
	
	Если МодульОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(Форма, "ЭтоВО") Тогда
		ЭтоВО = Форма.ЭтоВО;
	Иначе
		ЭтоВО = Ложь;
	КонецЕсли;
	
	Если МодульОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(Форма, "ДвоичныеДанныеОбработки") Тогда
		ДвоичныеДанныеОбработки = Форма.ДвоичныеДанныеОбработки;
	Иначе
		ДвоичныеДанныеОбработки = Неопределено;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ТолькоПросмотр",          ТолькоПросмотр);
	ПараметрыФормы.Вставить("ЭтоПрицеп",               ПараметрыОткрытияФормыТС.ЭтоПрицеп);
	ПараметрыФормы.Вставить("ТипДокументаИсточника",   ТипДокументаИсточника);
	ПараметрыФормы.Вставить("ЭтоВО",                   ЭтоВО);
	ПараметрыФормы.Вставить("ДвоичныеДанныеОбработки", ДвоичныеДанныеОбработки);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТолькоПросмотр",              ПараметрыФормы.ТолькоПросмотр);
	ДопПараметры.Вставить("Форма",                       Форма);
	ДопПараметры.Вставить("ПроцедураОбновленияДанныхТС", ПараметрыОткрытияФормыТС.ПроцедураОбновленияДанныхТС);
	
	ПроцедураПослеОткрытияФормыТранспортногоСредства = Новый ОписаниеОповещения(
		"ПослеОткрытияФормыТранспортногоСредства", МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент"), ДопПараметры);
	
	ПараметрыОткрытияФормыОбработки = ПараметрыОткрытияФормыОбработки(
		"ОбщаяФорма.Saby_ТранспортноеСредствоЭПД", ПараметрыФормы, Форма);
	
	ПараметрыОткрытияФормыОбработки.ОписаниеОповещенияОЗакрытии = ПроцедураПослеОткрытияФормыТранспортногоСредства;
	ПараметрыОткрытияФормыОбработки.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФормуОбработки(ПараметрыОткрытияФормыОбработки);
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаАвтомобиля(ТранспортныеСредства)
	
	Автомобиль = ЗначениеМетаданных("Saby_ВидыТС.Автомобиль");
	
	СтрокиАвтомобиля = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").СтрокиТС(
		ТранспортныеСредства,
		Автомобиль);
		
	Если СтрокиАвтомобиля.Количество() > 0 Тогда
		РезультатФункции = СтрокиАвтомобиля[0];
	Иначе
		РезультатФункции = Неопределено;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ИдентификаторСтрокиТС(ФормаОбъект, Форма, СтруктураТранспортногоСредства, МодульКлиентСервер)
	
	Автомобиль = ЗначениеМетаданных("Saby_ВидыТС.Автомобиль");
	
	Если СтруктураТранспортногоСредства.Вид = Автомобиль Тогда
		
		СтрокаАвтомобиля = СтрокаАвтомобиля(ФормаОбъект.ТранспортныеСредства);
		Если СтрокаАвтомобиля = Неопределено Тогда			
			СтрокаАвтомобиля = ФормаОбъект.ТранспортныеСредства.Добавить();			
		КонецЕсли;
		
		ИдентификаторСтроки = СтрокаАвтомобиля.ПолучитьИдентификатор();
				
	Иначе
		
		ИдентификаторСтроки = Форма.Элементы.Прицепы.ТекущаяСтрока;
		СтрокаАвтомобиля    = Форма.Элементы.Прицепы.ТекущиеДанные;
		
	КонецЕсли;
		
	// Установим новый ключ для ВО
	Если СтруктураТранспортногоСредства.ЭтоВО Тогда 
		
		СтрокаАвтомобиля.КлючСтроки = МодульКлиентСервер.НовыйКлючОсновнойСтроки(
			Форма, "ТранспортныеСредства");
		
		Форма.МаксимальныйКлючСтроки_ТранспортныеСредства = 
			Форма.МаксимальныйКлючСтроки_ТранспортныеСредства + 1;
		
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнениеДокументовЭПДТС(СтруктураТранспортногоСредства, ДополнительныеПараметры, КлючСтроки)
		
	Если СтруктураТранспортногоСредства.ЭтоВО Тогда
		
		ПараметрыДокумента = МодульКодаКлиент("ЭтаФорма").ПараметрыДокументаЭПД(
			"ПодтверждениеВладения", "Документ владения", , "ДокументТС");
		
		ПараметрыДокумента.Вставить("Индекс", Неопределено);
		
		ДополнительныеПараметры.Вставить("СтруктураДокумента", ПараметрыДокумента);
		
		Для Каждого ДокВладения Из СтруктураТранспортногоСредства.ОснованияВладения Цикл
			
			ДокВладения.Вставить("КлючСтроки_ТранспортногоСредства", КлючСтроки);
			МодульКодаКлиент("ЭтаФорма").ЗаполнитьДанныеДокументаЭПД(ДокВладения, ДополнительныеПараметры);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокументыЭПДДляТС(ФормаОбъект, КлючСтрокиТС)
	
	Отбор = Новый Структура("КлючСтроки_ТранспортногоСредства", КлючСтрокиТС);
	МодульКодаКлиент("ЭтаФорма").УдалитьДокументыЭПДПоОтбору(ФормаОбъект, Отбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОснованияВладенияДокументыЭПД(ФормаОбъект, ПараметрыФормы, СтрокаТС)
	
	Если СтрокаТС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	ЕстьДокументыЭПД = МодульТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(ФормаОбъект, "ДокументыЭПД");
	ЕстьКлючСтрокиТС = МодульТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(СтрокаТС,    "КлючСтроки");
	Если Не ЕстьДокументыЭПД Или Не ЕстьКлючСтрокиТС Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоКлючуТС = Новый Структура;
	ОтборПоКлючуТС.Вставить("КлючСтроки_ТранспортногоСредства", СтрокаТС.КлючСтроки);
	
	ОснованияВладенияДокументыЭПД = Новый Массив;
	
	НайденныеСтроки = МодульТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ФормаОбъект.ДокументыЭПД, ОтборПоКлючуТС);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		СтруктураДокументаЭПД = МодульТНОбщегоНазначенияКлиентСервер.СтруктураДокументаЭПД();
		ЗаполнитьЗначенияСвойств(СтруктураДокументаЭПД, НайденнаяСтрока);
		
		// ДанныеЮр Лиц
		МодульКодаКлиент("ЭтаФорма").ЗаполнитьЮрЛицаДокументаЭПД(СтруктураДокументаЭПД);
		
		ОснованияВладенияДокументыЭПД.Добавить(СтруктураДокументаЭПД);
		
	КонецЦикла;
	
	ПараметрыФормы.Вставить("ОснованияВладения", ОснованияВладенияДокументыЭПД);
	
КонецПроцедуры

#КонецОбласти // ТранспортныеСредства

&НаКлиенте
Процедура ОткрытьОбщуюФормуСПараметрами(Форма, ИмяФормы, ПараметрыФормы, ИмяОповещения)
	
	ДопПараметры = Новый Структура;
	Оповещение   = Новый ОписаниеОповещения(ИмяОповещения, Форма, ДопПараметры);
	
	ПараметрыОткрытияФормыОбработки = ПараметрыОткрытияФормыОбработки("ОбщаяФорма." + ИмяФормы, ПараметрыФормы, Форма);
	ПараметрыОткрытияФормыОбработки.ОписаниеОповещенияОЗакрытии = Оповещение;
	ПараметрыОткрытияФормыОбработки.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФормуОбработки(ПараметрыОткрытияФормыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЧерновикНаКлиенте(СсылкаНаДокумент, Форма, context_params)
	
	Если Не ЗначениеЗаполнено(СсылкаНаДокумент.Состояние.ИдентификаторСБИС) Тогда
		
		ДанныеДляВыгрузки = Новый Массив;
		ПараметрыВыгрузки = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ПараметрыВыгрузки(СсылкаНаДокумент);
		Если ТипЗнч(СсылкаНаДокумент) = Тип("Структура") Тогда
			ПараметрыВыгрузки.ВыгрузкаНаКлиенте = Истина;
			ПараметрыВыгрузки.ДанныеДокумента = СсылкаНаДокумент;
		КонецЕсли;
		
		ДанныеДляВыгрузки.Добавить(ПараметрыВыгрузки);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Источник", Форма.УникальныйИдентификатор);
		
		РезультатВыгрузки = ВыполнитьНаСервере("Saby_ТНВыгрузкаСервер.РезультатВыгрузкиДокументов",
			ДанныеДляВыгрузки, context_params, ДополнительныеПараметры);
		
		Если Не РезультатВыгрузки.Итог.Успех Тогда			
			 ОбработатьРезультатКоманды(РезультатВыгрузки, "ВыгрузитьЧерновик", ДополнительныеПараметры);
			 Возврат;			 
		КонецЕсли;
		
		РезультатВыгрузки.Выполнение.Параметры[0].ПараметрыВыгрузки.Ссылка = СсылкаНаДокумент;
		
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		ПродолжитьВыполнениеНаКлиенте(РезультатВыгрузки, "ВыгрузитьВСбис", ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_РаботаСЮрЛицами
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_РаботаСЮрЛицами

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_Общие
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_Общие

&НаКлиенте
Процедура ПослеИзмененияИныхПолучателей(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	ФормаОбъект = МодульТНОбщегоНазначенияКлиентСервер.ФормаОбъект(ДополнительныеПараметры.Форма);
	
	ОтборИныхПолучателей = Новый Структура("Роль", ЗначениеМетаданных("Saby_РолиКонтрагентов.ИнойПолучатель"));
	ИныеПолучатели = МодульТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ФормаОбъект.ДанныеЮрЛиц, ОтборИныхПолучателей);
	
	Для Каждого СтрокаДляУдаления Из ИныеПолучатели Цикл
		ФормаОбъект.ДанныеЮрЛиц.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	Для Каждого СтруктураЮрЛица Из Результат.ИныеПолучатели Цикл
		СтрокаЮрЛица = ФормаОбъект.ДанныеЮрЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЮрЛица, СтруктураЮрЛица);
		СтрокаЮрЛица.КлючСтроки = МодульТНОбщегоНазначенияКлиентСервер.НовыйКлючОсновнойСтроки(ФормаОбъект, "ДанныеЮрЛиц");
	КонецЦикла;
	
	МодульТНОбщегоНазначенияКлиентСервер.ОбновитьЭлементыИныхПолучателей(
		ДополнительныеПараметры.Форма, Результат.ИныеПолучатели.Количество());
	
	Если Не ДополнительныеПараметры.Форма.ЭтоВО Тогда
		ДополнительныеПараметры.Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#Область ФормированиеПечатныхФорм

&НаКлиенте
Процедура ОткрытьПечатнуюФорму(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ЭтоФормаСписка Тогда
		Форма = ДополнительныеПараметры.Форма;
		СсылкаНаДокумент = Форма.Элементы.Список.ТекущаяСтрока;
		Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры.Удалить("Форма");
		
		СтруктураФормы = Новый Структура;
		СтруктураФормы.Вставить("ЭтоВО", Ложь);
		СтруктураФормы.Вставить("УникальныйИдентификатор", Форма.УникальныйИдентификатор);
		
		СоздатьИОткрытьПечатнуюФорму(СсылкаНаДокумент, СтруктураФормы, ДополнительныеПараметры);
	Иначе
		Форма = ДополнительныеПараметры.Форма;
		
		Форма.КоличествоОшибок = 0;
		Форма.ТаблицаОшибок.Очистить();
		
		Форма.ЗаполнитьСтруктуруДокумента();
		
		ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(Форма);
		
		СсылкаНаДокумент = ФормаОбъект.Ссылка;
		
		ДополнительныеПараметры.Удалить("Форма");
		СоздатьИОткрытьПечатнуюФорму(СсылкаНаДокумент, Форма, ДополнительныеПараметры);
		
		Если Форма.ЭтоВО И Форма.КоличествоОшибок = 0 Тогда
			Форма.Ссылка = СсылкаНаДокумент;
			Форма.Прочитать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИОткрытьПечатнуюФорму(СсылкаНаДокумент, Форма, ДополнительныеПараметры)
	
	Если Форма.ЭтоВО Тогда
		
		context_params = ВыполнитьНаСервере("Saby_Core.ПроверитьНаличиеПараметровПодключения", Неопределено);
		ВыгрузитьЧерновикНаКлиенте(СсылкаНаДокумент, Форма, context_params);
		
		Результат = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ДанныеПечатнойФормыДляОткрытия",
			СсылкаНаДокумент, Не Форма.ЭтоВО, ДополнительныеПараметры);
			
		ТранспортВО = ТранспортВО(Форма, context_params);
		
		Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Результат.ОписаниеОшибки;
			Сообщение.Сообщить();
			Возврат;
			
		КонецЕсли;
		
		Результат.ПараметрыЗагрузки.ЗагрузкаТребуется = Истина;
		Результат.ПараметрыЗагрузки.ОбъектОбработки = ТранспортВО.ТранспортИнтеграции;
		Результат.АдресДвоичныхДанных = АдресДвоичныхДанныхФайла(Результат.ПараметрыЗагрузки, ДополнительныеПараметры);
		
		СсылкаНаДокумент = Результат.СсылкаНаДокумент;
		
	Иначе
		Результат = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ДанныеПечатнойФормыДляОткрытия",
			СсылкаНаДокумент, Не Форма.ЭтоВО, ДополнительныеПараметры);
	КонецЕсли;
		
	Если ДополнительныеПараметры.ЭтоПечатьQRКода Тогда
		ОткрытьQRКод(Результат, ДополнительныеПараметры);
	Иначе
		ОткрытьФайлPDF(Форма, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлPDF(Форма, Результат)
	
	Если ЗначениеЗаполнено(Результат.АдресДвоичныхДанных) Тогда
		
		МодульКодаКлиент("ФайловаяСистемаКлиент").ОткрытьФайл(Результат.АдресДвоичныхДанных, , "ЭПД.pdf");
		
	ИначеЕсли ЗначениеЗаполнено(Результат.СсылкаНаПрисоединенныйФайл) Тогда
		
		ДанныеФайла = МодульКодаКлиент("РаботаСФайламиСлужебныйВызовСервера").ДанныеФайлаДляОткрытия(
			Результат.СсылкаНаПрисоединенныйФайл,
			Неопределено,
			Форма.УникальныйИдентификатор);
		
		МодульКодаКлиент("РаботаСФайламиКлиент").ОткрытьФайл(ДанныеФайла);
		
	Иначе
		
		Если Результат.СписокДокументов = Неопределено Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Результат.ОписаниеОшибки;
			Сообщение.Сообщить();
		Иначе
			ОткрытьПервыйДокументИзСоответствия(Результат.СписокДокументов);
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("СписокДокументов",     Результат.СписокДокументов);
			ПараметрыФормы.Вставить("ЭтоДинамическийТитул", Ложь);
			
			Оповестить("Saby_СписокДокументов", ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьQRКод(Результат, ДополнительныеПараметры)
	
	Если Результат.ПечатнаяФормаQR <> Неопределено Тогда
		
		Результат.ПечатнаяФормаQR.Показать();
		
	Иначе
		
		Если Результат.СписокДокументов = Неопределено Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Результат.ОписаниеОшибки;
			Сообщение.Сообщить();
		Иначе
			ОткрытьПервыйДокументИзСоответствия(Результат.СписокДокументов);
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("СписокДокументов",     Результат.СписокДокументов);
			ПараметрыФормы.Вставить("ЭтоДинамическийТитул", Ложь);
			
			Оповестить("Saby_СписокДокументов", ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ФормированиеПечатныхФорм

#КонецОбласти // СлужебныеПроцедурыИФункцииМодуля  

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_КомандыСбис
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_КомандыСбис

#Область include_etrn_base_CommonModule_ОпределениеМодуляКодаКлиент
#КонецОбласти // include_etrn_base_CommonModule_ОпределениеМодуляКодаКлиент

#Область include_etrn_base_CommonModule_ОпределениеМодуляКода
#КонецОбласти // include_etrn_base_CommonModule_ОпределениеМодуляКода

#Область include_etrn_base_CommonModule_ВыполнениеФункцииНаСервере
#КонецОбласти // include_etrn_base_CommonModule_ВыполнениеФункцииНаСервере

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_ОткрытиеФорм
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_ОткрытиеФорм

#Область include_etrn_base_CommonModule_ЗначениеМетаданных
#КонецОбласти // include_etrn_base_CommonModule_ЗначениеМетаданных

#Область include_etrn_base_CommonModule_КартинкаИнтерфейса
#КонецОбласти // include_etrn_base_CommonModule_КартинкаИнтерфейса

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_КлючиСтрок
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_КлючиСтрок

#Область include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_ОбработкаОповещений
#КонецОбласти // include_etrn_base_CommonModule_ТНОбщегоНазначенияКлиент_ОбработкаОповещений

// ToDo: Выпилить в ESD 

#Область include_etrn_base_CommonModule_ТНЗагрузкаСервер_ВзаимодействиеСОнлайном //&НаКлиенте
#КонецОбласти // include_etrn_base_CommonModule_ТНЗагрузкаСервер_ВзаимодействиеСОнлайном //&НаКлиенте

