
&НаКлиенте
// Обработка для стандартного события формы документов ОбработкаОповещения
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма источник вызова
// 	ИмяСобытия - Строка - имя события оповещения 
//	Параметр - Структура - параметры оповещения 
//	Источник - Произвольный - источник оповещения 
//
Процедура ОбработатьОповещенияДляФормы(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если Не ОповещениеДляЭтойФормы(Форма, ИмяСобытия, Параметр, Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьОповещенияДО(Форма, ИмяСобытия, Параметр, Источник);
	
	ОбработатьДополнительныеОповещения(Форма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
// Проверка, что оповещение пришло для нужного источника
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма источник вызова
// 	ИмяСобытия - Строка - имя события оповещения 
//	Параметр - Структура - параметры оповещения 
//	Источник - Произвольный - источник оповещения 
//
// Возвращаемое значение:
// 	Булево - если Истина то оповещение предназначено для данной формы
//
Функция ОповещениеДляЭтойФормы(Форма, ИмяСобытия, Параметр, Источник)
	
	ЭтоНужнаяФорма = (Источник = Форма) Или (Источник = Форма.УникальныйИдентификатор);
	ЭтоФормаСписка = ЭтоФормаСписка(Форма); 
	
	Если ИмяСобытия = "Saby_СписокДокументовОбновить" 
		Или ИмяСобытия = "Saby_АктуальныйСтатусВерсии" Тогда
		
		РезультатФункции = ЭтоФормаСписка И ЭтоНужнаяФорма;
		
	ИначеЕсли ИмяСобытия = "Saby_СписокДокументов" Тогда
		
		РезультатФункции = Не ЭтоФормаСписка;
		
	ИначеЕсли ИмяСобытия = "Saby_Ошибки"
		Или ИмяСобытия = "ОбновитьЛенту" Тогда
	
		РезультатФункции = Не ЭтоФормаСписка И ЭтоНужнаяФорма;
		
	Иначе
		РезультатФункции = ПроверкаСобытияФормы(ИмяСобытия, ЭтоНужнаяФорма, ЭтоФормаСписка);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОповещенияДО(Форма, ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Saby_ОбновитьДокумент" Тогда
		
		Форма.ОбработатьОповещениеОбновитьДокумент(Параметр);
		
	ИначеЕсли ИмяСобытия = "Saby_ВыполнитьПереход" Тогда
		
		ОбработатьОповещениеВыполнитьПереход(Форма, Параметр);
		
	ИначеЕсли ИмяСобытия = "Saby_ЗавершениеВыполнитьДействие" Тогда
		
		ОбработатьОповещениеЗавершениеВыполнитьДействие(Форма, Параметр);
		
	ИначеЕсли ИмяСобытия = "Saby_СписокДокументов" Тогда
		
		Если Параметр.ЭтоДинамическийТитул Тогда
			Возврат;
		КонецЕсли;
		
		МодульТНОбщегоНазначенияКлиентСервер = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер");
		
		ФормаОбъект = МодульТНОбщегоНазначенияКлиентСервер.ФормаОбъект(Форма);
		Если МодульТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(ФормаОбъект, "Ссылка") Тогда
			КлючСоответствия = МодульТНОбщегоНазначенияКлиентСервер.КлючСсылка(ФормаОбъект.Ссылка);
			ОшибкиДокумента = ПолучитьОшибки(Параметр.СписокДокументов, КлючСоответствия);
			Форма.ОбновитьДанныеПоОшибкамНаСервере(ОшибкиДокумента);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Saby_СписокДокументовОбновить" Тогда  	
		
		Форма.Элементы.Список.Обновить();
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОшибки(СоответствиеДокументов, КлючСоответствия)
	
	Если ТипЗнч(КлючСоответствия) <> Тип("Структура") Тогда
		РезультатФункции = СоответствиеДокументов.Получить(КлючСоответствия);
		Если РезультатФункции = Неопределено Тогда
			Для Каждого КлючЗначение Из СоответствиеДокументов Цикл
				РезультатФункции = КлючЗначение.Значение;
				Прервать;
			КонецЦикла;
		КонецЕсли;
		Возврат РезультатФункции;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из СоответствиеДокументов Цикл
		Если КлючЗначение.Ключ.Идентификатор = КлючСоответствия.Идентификатор Тогда
			Возврат КлючЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьДополнительныеОповещения(Форма, ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Saby_ИзмененыТипыДокументовОснований" Тогда
		
		Форма.ОграничитьТипыДокументовОснованийНаСервере();
		
	ИначеЕсли ИмяСобытия = "ВыбранДокументОснованиеINI" Тогда
		
		Результат = Форма.ЗаполнениеНаОснованииINI();		
		ОповеститьПользователяОРезультатах(Форма, "ВыбранДокументОснованиеINI", Результат);
				
	ИначеЕсли ИмяСобытия = "Saby_АктуальныйСтатусВерсии" Тогда
		
		ОтобразитьНаличиеОбновлений(Форма, Параметр);
		
	ИначеЕсли ИмяСобытия = "Saby_РаспознаваниеВУ" Тогда
		
		Форма.ОбработатьРезультатРаспознаванияВУНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "Saby_ЗагрузитьДанныеТСПоРегНомеру" Тогда
		
		Форма.ОбработатьРезультатЗагрузкиДанныхТСПоРегНомеру(Параметр);
		
	ИначеЕсли ИмяСобытия = "Saby_ЗагрузитьДанныеТСПоВИН" Тогда
		
		Форма.ОбработатьРезультатЗагрузкиДанныхТСПоВИН(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбновитьЛенту" Тогда
		
		Форма.ОбновитьЛентуНаСервере();
				
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаСобытияФормы(ИмяСобытия, ЭтоНужнаяФорма, ЭтоФормаСписка)
	
	Возврат (ИмяСобытия = "Saby_ВыполнитьПереход" И ЭтоНужнаяФорма)
		Или (ИмяСобытия = "Saby_ЗавершениеВыполнитьДействие" И ЭтоНужнаяФорма)
		Или (ИмяСобытия = "Saby_РаспознаваниеВУ" И ЭтоНужнаяФорма)
		Или (ИмяСобытия = "Saby_ЗагрузитьДанныеТСПоРегНомеру" И ЭтоНужнаяФорма)
		Или (ИмяСобытия = "Saby_ЗагрузитьДанныеТСПоВИН" И ЭтоНужнаяФорма)
		Или СобытияФормыОбъекта(ИмяСобытия, ЭтоНужнаяФорма, ЭтоФормаСписка);
	
КонецФункции

&НаКлиенте
Функция СобытияФормыОбъекта(ИмяСобытия, ЭтоНужнаяФорма, ЭтоФормаСписка)
	
	НужнаяФормаОбъекта = ЭтоНужнаяФорма И Не ЭтоФормаСписка;
	
	Возврат (ИмяСобытия = "Saby_ОбновитьДокумент" И НужнаяФормаОбъекта)
		Или (ИмяСобытия = "Saby_ИзмененыТипыДокументовОснований" И НужнаяФормаОбъекта)
		Или (ИмяСобытия = "Saby_ПрочитанДинамическийТитул" И НужнаяФормаОбъекта)
		Или (ИмяСобытия = "ВыбранДокументОснованиеINI" И НужнаяФормаОбъекта);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОповещениеВыполнитьПереход(Форма, Параметр)
	
	Если ЗначениеЗаполнено(Параметр.Этап) Тогда 
		Если МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ЕстьРеквизитИлиСвойство(Форма, "Объект")
			И Форма.Объект.Свойство("Ссылка") Тогда
			Ссылка = Форма.Объект.Ссылка;
		ИначеЕсли Параметр.Свойство("Ссылка") Тогда
			Ссылка = Параметр.Ссылка;
		Иначе
			Ссылка = Параметр.Ключ;
		КонецЕсли;
		СменаЭтапа(Ссылка, Форма, Параметр.Этап);
	Иначе 
		
		Форма.ОбработатьОповещениеВыполнитьПереходНаФорме();
		
		КартинкаСообщения = КартинкаИнтерфейса(Форма, "Saby_Ошибка32");
		
		ПоказатьОповещениеПользователя(
			"Ошибка",
			,
			"Нет доступных действий",
			КартинкаСообщения,
			СтатусОповещенияПользователя.Важное,
			Новый УникальныйИдентификатор);
							
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеЗавершениеВыполнитьДействие(Форма, Параметр)
	
	Если Не ЭтоФормаСписка(Форма) Тогда
		Форма.ОбработатьОповещениеЗавершениеВыполнитьДействиеНаФорме(Параметр);
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Список.ВыделенныеСтроки.Количество() Тогда 
		ТекущаяСсылка = Форма.Элементы.Список.ВыделенныеСтроки[0];
	Иначе 
		ТекущаяСсылка = Неопределено;
	КонецЕсли;
	
	Если Параметр.status = "error" Тогда
		
		ОбработатьОшибкиИзФормыВыполнитьДействие(Форма, ТекущаяСсылка, Параметр);
		Форма.Элементы.Список.Обновить();
		
	Иначе
		
		МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ОбменДаннымиСБИСИзФормыСписка(Форма, "ОбновитьАктивныйЭтап");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоФормаСписка(Форма)
	
	Возврат Форма.Элементы.Найти("Список") <> Неопределено;
	
КонецФункции

&НаКлиенте
// Переход документа на следующий этап
// Параметры:
//  Ссылка - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на документ
//  Форма - ФормаКлиентскогоПриложения - источник перехода
//  Этапы - Структура - параметры для последующего перехода
Процедура СменаЭтапа(Ссылка, Форма, Этапы) Экспорт
	
	СписокДокументовСБИС = Новый Массив();
	СписокДокументов1С   = Новый Массив();
	
	СписокДокументов1С.Добавить(Ссылка);
		
	Идентификатор = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ИдентификаторВСбис", Ссылка);
	
	Документ1С = ?(ТипЗнч(Ссылка) <> Тип("Структура"), Ссылка, Неопределено);
	
	ДокументСБИС = Новый Соответствие;
	ДокументСБИС.Вставить("Идентификатор", Идентификатор);
	ДокументСБИС.Вставить("Документ1С",    Документ1С);
	ДокументСБИС.Вставить("ДокументСБИС",  Неопределено);
	ДокументСБИС.Вставить("Этап",          Этапы);
	Если Документ1С = Неопределено Тогда
		ДокументСБИС.Вставить("ПервичныйКлюч", Идентификатор);
	КонецЕсли;
	
	СписокДокументовСБИС.Добавить(ДокументСБИС);
	
	ПараметрыВФорму = Новый Структура;
	ПараметрыВФорму.Вставить("СписокДокументовСБИС",          СписокДокументовСБИС);
	ПараметрыВФорму.Вставить("СписокДокументов1С",            СписокДокументов1С);
	ПараметрыВФорму.Вставить("МожноПереотправитьВСБИС",       Ложь);
	ПараметрыВФорму.Вставить("МожноОбновитьВСБИС",            Истина);
	ПараметрыВФорму.Вставить("ПрисоединенныеФайлыРасширения", Истина);
	
	ПараметрыОткрытияФормыОбработки = ПараметрыОткрытияФормыОбработки(
		"Обработка.SABY.Форма.ВыполнитьДействие", ПараметрыВФорму, Форма);
	ПараметрыОткрытияФормыОбработки.Уникальность = Новый УникальныйИдентификатор();
	ОткрытьФормуОбработки(ПараметрыОткрытияФормыОбработки);
		
КонецПроцедуры

&НаКлиенте
// Проверка наличия обновлений расширения и генерация элементов предупреждения и ссылки на скачивание
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма для обновления элементов
//  СтатусВерсии - Структура - данные о текущей версии
//
Процедура ОтобразитьНаличиеОбновлений(Форма, СтатусВерсии) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если СтатусВерсии = Неопределено Тогда
		Элементы.ГруппаОбновление.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ДанныеЭлементов = ОбработкаШаблонаСтатусаВерсии(СтатусВерсии.Шаблон);
	Если Не ЗначениеЗаполнено(ДанныеЭлементов) Тогда 
		Возврат;
	КонецЕсли;	
		
	// Картинка
	Картинка = Элементы.КартинкаОбновление;
	Картинка.Картинка       = КартинкаИнтерфейса(Форма, "Saby_СостояниеОшибка");
	Картинка.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
	
	// Надпись
	Надпись = Элементы.СтатусОбновление;
	Надпись.Заголовок = ДанныеЭлементов.Заголовок;
	Если ДанныеЭлементов.ЦветТекста <> Неопределено Тогда
		Надпись.ЦветТекста = ДанныеЭлементов.ЦветТекста;
	КонецЕсли;	
	
	// Ссылка на скачивание
	Если ДанныеЭлементов.Гиперссылка Тогда		
		
		Гиперссылка = Элементы.СсылкаОбновление;
		Гиперссылка.Доступность = Истина;
		Гиперссылка.Заголовок        = "Скачать";
		Гиперссылка.Подсказка        = ДанныеЭлементов.Ссылка;
				
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
// Вывод ошибок в форме по результатам команды "ВыполнитьДействие" 
// из формы обработки SABY ВыполнитьДействие
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - источник перехода
//	Ссылка - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на источник выполнения 
//  Параметр - Структура - данные по ошибке 
//           - Строка - описание ошибки
//
Процедура ОбработатьОшибкиИзФормыВыполнитьДействие(Форма, Ссылка, Параметр) Экспорт
	
	МассивОшибок = Новый Массив;
	
	ЭтоСтруктура = ТипЗнч(Параметр.data) = Тип("Структура");
	
	Если ЭтоСтруктура Тогда
		Результат = Параметр.data;
	Иначе
		Результат = Параметр.data["Результат"];
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		
		Для Каждого Строка Из Результат Цикл
			
			ИндексОшибки = 0;
			
			СтруктураОшибки = ДанныеОшибки(Строка, ЭтоСтруктура, ИндексОшибки);
			МассивОшибок.Добавить(СтруктураОшибки);
						
			ИндексОшибки = ИндексОшибки + 1;
			
		КонецЦикла;
		
	Иначе
		
		ТекстОшибки = Результат.message + " - (" + Результат.detail + ")";
		
		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ИндексСтроки",        0);
		СтруктураОшибки.Вставить("ТекстДляОднойОшибки", ТекстОшибки);
		СтруктураОшибки.Вставить("ПолеОшибки",          "");
		СтруктураОшибки.Вставить("ГруппаОшибок",        Неопределено);
		МассивОшибок.Добавить(СтруктураОшибки);
		
	КонецЕсли;
	
	// если нет ошибок по нашему документу ошибки не показываем
	Если Не МассивОшибок.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОшибок = Новый Структура;
	СтруктураОшибок.Вставить("СписокОшибок", МассивОшибок);
	СтруктураОшибок.Вставить("ГруппыОшибок", Новый Соответствие);
	
	ИмяМетаданных            = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ИмяМетаданныхПоФорме(Форма);
	ПараметрыДокументаДляАПИ = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ПараметрыДокументаДляАПИ(ИмяМетаданных);
	
	СтруктураОшибок.Вставить("ИмяМетаданных", ИмяМетаданных);
	СтруктураОшибок.Вставить("Тип",           ПараметрыДокументаДляАПИ.Тип);
	
	СписокДокументов = Новый Соответствие;
	СписокДокументов.Вставить(Ссылка, СтруктураОшибок);
	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ОткрытьПервыйДокументИзСоответствия(СписокДокументов);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокДокументов",     СписокДокументов);
	ПараметрыФормы.Вставить("ЭтоДинамическийТитул", Ложь);
	
	Оповестить("Saby_СписокДокументов", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеОшибки(Строка, ЭтоСтруктура, ИндексОшибки)
	
	ОписаниеОшибки = "";
	
	Если ЭтоСтруктура Тогда
		ОписаниеОшибки = Строка.message;
	Иначе
		
		ДокументСБИС = Строка["ДокументСБИС"];
		ДеталиОшибки = ДокументСБИС["detail"];
		Если Не ЗначениеЗаполнено(ДеталиОшибки) Тогда
			Ошибка = ДокументСБИС["message"];
		Иначе
			Ошибка = ДеталиОшибки;
		КонецЕсли;
		
		Если ТипЗнч(Ошибка) = Тип("Строка") Тогда
			ОписаниеОшибки = Ошибка;
		Иначе
			ОписаниеОшибки = ДеталиОшибки["error"]["details"];
		КонецЕсли;
		
	КонецЕсли;
				
	СтруктураОшибки = Новый Структура;
	СтруктураОшибки.Вставить("ИндексСтроки",        ИндексОшибки);
	СтруктураОшибки.Вставить("ТекстДляОднойОшибки", ОписаниеОшибки);
	СтруктураОшибки.Вставить("ПолеОшибки",          "");
	СтруктураОшибки.Вставить("ГруппаОшибок",        Неопределено);
		
	Возврат СтруктураОшибки;
	
КонецФункции

&НаКлиенте
Функция ОбработкаШаблонаСтатусаВерсии(Шаблон)
	
	Структура = Новый Структура;
	Структура.Вставить("Заголовок",   "");
	Структура.Вставить("ЦветТекста",  Неопределено);
	Структура.Вставить("Гиперссылка", Истина);
	Структура.Вставить("Ссылка",      "https://sbis.ru/help/integration/1C_set/etrn/install");
	
	ВерсияАктуальна     = (Шаблон = Неопределено Или Шаблон = 0);
	ДоступнаНоваяВерсия = (Шаблон = 1 Или Шаблон = - 1);
	ВерсияУстарела      = 2;
	ВерсияНеСовместима  = 3;
	ВерсияСОшибками     = 4;
	
	Если ВерсияАктуальна Тогда
		Возврат Неопределено;
		
	ИначеЕсли ДоступнаНоваяВерсия Тогда		
		Структура.Заголовок   = "Доступна новая версия";
	
	ИначеЕсли Шаблон = ВерсияУстарела Тогда
		Структура.Заголовок = "Версия устарела";
		
	ИначеЕсли Шаблон = ВерсияНеСовместима Тогда		
		Структура.Заголовок = "ВЕРСИЯ НЕ СОВМЕСТИМА";
		
	ИначеЕсли Шаблон = ВерсияСОшибками Тогда		
		Структура.Заголовок   = "ВЕРСИЯ СОДЕРЖИТ КРИТИЧЕСКИЕ ОШИБКИ";
		Структура.ЦветТекста  = WebЦвета.Красный;
		
	Иначе
		
		Структура.Заголовок   = "Ошибка при получении информации о версии";
		Структура.ЦветТекста  = WebЦвета.Красный;
		Структура.Гиперссылка = Ложь;
						
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

