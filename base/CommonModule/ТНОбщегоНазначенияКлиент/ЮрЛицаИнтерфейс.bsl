
&НаКлиенте
// Универсальный обработчик начала выбора телефона
// Параметры:
//  Форма - Форма - источник вызова 
//  ПараметрыВыбораТелефона - Структура - параметры 
//  СтандартнаяОбработка - Булево - стандратный параметр
//  ЭтоОсновной - Булево - это основной номер телефона
//
Процедура ТелефонНачалоВыбора(Форма, ПараметрыВыбораТелефона, СтандартнаяОбработка, ЭтоОсновной = Ложь) Экспорт
	
	ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(Форма);
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Значение", ПараметрыВыбораТелефона.Значение);
	
	НайденныеСтроки = ФормаОбъект.КонтактныеДанные.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЗначениеТелефона = НайденныеСтроки[0].Структура;
	Иначе
		ЗначениеТелефона = "";
	КонецЕсли;
	
	ДополнительныеПараметры = ПараметрыОткрытияФормыКИ(Форма, "Телефон", ПараметрыВыбораТелефона.Роль);
	
	Если ЗначениеЗаполнено(ЗначениеТелефона) Тогда
		ДополнительныеПараметры.Значение = ЗначениеТелефона;
	Иначе
		ДополнительныеПараметры.Значение = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.КонтактнаяИнформацияПоПредставлению",
			ПараметрыВыбораТелефона.Значение, ДополнительныеПараметры.Тип);
	КонецЕсли;
	
	Если ЭтоОсновной Тогда
		ДополнительныеПараметры.ИдентификаторСтроки = ИдентификаторОсновнойСтроки(
			ФормаОбъект, ДополнительныеПараметры.Тип, ПараметрыВыбораТелефона.Роль);
	Иначе
		Если ПараметрыВыбораТелефона.Свойство("ИдентификаторСтроки") Тогда
			ДополнительныеПараметры.ИдентификаторСтроки = ПараметрыВыбораТелефона.ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФормуКонтактнойИнформации(Форма, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
// Универсальный обработчик при измении телефона
// Параметры:
//  Форма - Форма - источник вызова 
//  Представление - Строка - телефон строкой    
//  Роль - Перечисление.Saby_РолиКонтрагентов - роль контрагента в транспортной накладной
//  ЭтоОсновной - Булево - это основной номер телефона
//  Идентификатор - Идентификатор - идентификатор строки 
//
Процедура ТелефонПриИзменении(Форма, Представление, Роль, ЭтоОсновной = Ложь, Идентификатор = Неопределено) Экспорт
	
	ИдентификаторСтроки = Идентификатор;
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	ФормаОбъект = МодульТНОбщегоНазначенияКлиентСервер.ФормаОбъект(Форма);
	
	ТипТелефон = ЗначениеМетаданных("ТипыКонтактнойИнформации.Телефон");
	
	Значение = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.КонтактнаяИнформацияПоПредставлению",
		Представление,
		ТипТелефон);
	
	СтруктураТелефона = Новый Структура;
	СтруктураТелефона.Вставить("Представление", Представление);
	СтруктураТелефона.Вставить("Значение",      Значение);
	
	ДопПараметрыОбновленияКИ = МодульТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(
		Роль, , , СтруктураТелефона);
	
	Если ЭтоОсновной Тогда
		ДопПараметрыОбновленияКИ.ИдентификаторСтроки = ИдентификаторОсновнойСтроки(ФормаОбъект, ТипТелефон, Роль);
	Иначе
		Если ИдентификаторСтроки <> Неопределено Тогда
			ДопПараметрыОбновленияКИ.ИдентификаторСтроки = ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Представление) И ДопПараметрыОбновленияКИ.ИдентификаторСтроки <> Неопределено Тогда
		СтрокаДляУдаления = ФормаОбъект.КонтактныеДанные.НайтиПоИдентификатору(ДопПараметрыОбновленияКИ.ИдентификаторСтроки);
		ФормаОбъект.КонтактныеДанные.Удалить(СтрокаДляУдаления);
		ДопПараметрыОбновленияКИ.Значение = Неопределено;
	КонецЕсли;
	
	МодульТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(Форма, ДопПараметрыОбновленияКИ);
	
КонецПроцедуры

&НаКлиенте
// Универсальный обработчик начала выбора Адреса
// Параметры:
//  Форма - Форма - источник вызова 
//  ПараметрыВыбораАдреса - Структура - параметры 
//  СтандартнаяОбработка - Булево - стандратный параметр
//
Процедура АдресНачалоВыбора(Форма, ПараметрыВыбораАдреса, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеАдреса = ПараметрыВыбораАдреса.Значение;
	
	АдресВСвободнойФорме = Не ЗначениеЗаполнено(ЗначениеАдреса)
		И ПараметрыВыбораАдреса.Свойство("Текст") 
		И ЗначениеЗаполнено(ПараметрыВыбораАдреса.Текст); 
	
	ПредставлениеАдреса = "";
	Если АдресВСвободнойФорме Тогда
		ПредставлениеАдреса = ПараметрыВыбораАдреса.Текст;
	КонецЕсли;
	
	// переход к во3
	Если ПараметрыВыбораАдреса.Свойство("Роль") Тогда
		Роль = ПараметрыВыбораАдреса.Роль;
	Иначе
		Роль = ПараметрыВыбораАдреса.РольСтрокой;
	КонецЕсли;
	
	ДополнительныеПараметры = ПараметрыОткрытияФормыКИ(Форма, "Адрес", Роль);
	ДополнительныеПараметры.Значение      = ЗначениеАдреса;
	ДополнительныеПараметры.Представление = ПредставлениеАдреса;
	Если ПараметрыВыбораАдреса.Свойство("ТолькоПросмотр") Тогда
		ДополнительныеПараметры.ТолькоПросмотр = ПараметрыВыбораАдреса.ТолькоПросмотр;
	КонецЕсли;
	
	ОткрытьФормуКонтактнойИнформации(Форма, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
// Универсальный обработчик после выборка КИ
// Параметры:
//  Результат - Структура - результат выбора КИ 
//  ДополнительныеПараметры - Структура - доп параметры команды
//
Процедура ПослеВыбораКИ(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или ДополнительныеПараметры.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	Если ДополнительныеПараметры.ТипСтрокой = "Телефон" Тогда
		ДопПараметры = МодульТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(
			ДополнительныеПараметры.Роль, , , Результат);
		
		Если ДополнительныеПараметры.Свойство("ИдентификаторСтроки") Тогда
			ДопПараметры.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
		КонецЕсли;
		МодульТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ДополнительныеПараметры.Форма, ДопПараметры);
	ИначеЕсли ДополнительныеПараметры.ТипСтрокой = "Адрес" Тогда
		ДопПараметры = МодульТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(
			ДополнительныеПараметры.Роль, , , Результат);
		
		МодульТНОбщегоНазначенияКлиентСервер.ОбновитьАдресаПогрузкиДоставки(ДополнительныеПараметры.Форма, ДопПараметры);
		ДополнительныеПараметры.Форма.ОбновитьВидимостьИДоступностьЭлементовНаКлиенте();
	Иначе
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
// Новые контактные данные при измнении номера телефона 
// Параметры:
//  Форма - Форма - форма источник вызова 
//  ТекущиеДанные - Структура - изменяемые данные
//  Роль - Перечисление.Saby_РолиКонтрагентов - роль контрагента в транспортной накладной
//       - Массив - данные роли
//
Процедура ЗначениеКонтактныхДанныхПриИзменении(Форма, ТекущиеДанные, Роль) Экспорт
	
	Если ТекущиеДанные.Тип = ЗначениеМетаданных("ТипыКонтактнойИнформации.Телефон") Тогда
		
		ТелефонПриИзменении(Форма, ТекущиеДанные.Значение, Роль, Ложь, ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Универсальный обработчик контактных данных при начале выбора
// Параметры:
//  Форма - Форма - источник вызова 
//  ТекущиеДанные - ДанныеСтроки - текущая строка таблицы КИ
//  Роль - Перечисление.Saby_РолиКонтрагентов - роль контрагента в транспортной накладной 
//  СтандартнаяОбработка - Булево - стандратный параметр
//
Процедура ЗначениеКонтактныхДанныхНачалоВыбора(Форма, ТекущиеДанные, Роль, СтандартнаяОбработка) Экспорт
	
	Если ТекущиеДанные.Тип = ЗначениеМетаданных("ТипыКонтактнойИнформации.Телефон") Тогда
	
		ПараметрыВыбораТелефона = Новый Структура;
		ПараметрыВыбораТелефона.Вставить("Роль",                Роль);
		ПараметрыВыбораТелефона.Вставить("Значение",            ТекущиеДанные.Значение);
		ПараметрыВыбораТелефона.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
		
		ТелефонНачалоВыбора(Форма, ПараметрыВыбораТелефона, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает событие выбора юр лица в таблице
//
// Параметры:
//  Форма - Форма - источник вызова 
//  СтандартныеПараметрыСобытия - Структура - стандартные параметры события Выбор
//   * Элемент - ТаблицаФормы - таблица, в которой выбирается юр лицо
//   * ВыбраннаяСтрока - ДанныеФормыЭлементКоллекции - Значение выбранной строки
//   * Поле - ПолеФормы - активное поле (колонка)
//  ДополнительныеПараметры - Структура - дополнительные параметры необходимые для обработчика
//   * Роль - Строка - имя роли юр лица
//   * ТолькоПросмотр - Булево - признак открытия данных юр лица на просмотр
//
Процедура ЮрЛицоВТаблицеВыбор(Форма, СтандартныеПараметрыСобытия, ДополнительныеПараметры) Экспорт
	
	ИмяКолонки = СтрЗаменить(СтандартныеПараметрыСобытия.Поле.Имя, СтандартныеПараметрыСобытия.Элемент.Имя, "");
	
	ИдентификаторСтрокиДанныхЮрЛиц = Неопределено;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСтроки", СтандартныеПараметрыСобытия.Элемент.ТекущиеДанные.КлючСтроки_ДанныеЮрЛиц);
	Если СтруктураПоиска.КлючСтроки = 0 Тогда
		СтруктураПоиска.Вставить(
			"Роль",
			ЗначениеМетаданных("Saby_РолиКонтрагентов." + ДополнительныеПараметры.Роль));
	КонецЕсли;
	
	ФормаОбъект = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ФормаОбъект(Форма);
	
	НайденныеСтроки = ФормаОбъект.ДанныеЮрЛиц.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ИдентификаторСтрокиДанныхЮрЛиц = НайденныеСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	ПараметрыРеквизитаФормы = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ПараметрыРеквизитаФормы(
		ИмяКолонки,
		СтандартныеПараметрыСобытия.Поле.Имя,
		ИдентификаторСтрокиДанныхЮрЛиц,
		Форма.ЭтоВО);
	
	ПараметрыРеквизитаФормы.ЭтоСтрокаТаблицы            = Истина;
	ПараметрыРеквизитаФормы.ИмяИсходнойТаблицы          = СтандартныеПараметрыСобытия.Элемент.Имя;
	ПараметрыРеквизитаФормы.ИдентификаторИсходнойСтроки = СтандартныеПараметрыСобытия.ВыбраннаяСтрока;
	ПараметрыРеквизитаФормы.ТолькоПросмотр              = ДополнительныеПараметры.ТолькоПросмотр;
	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ЮрЛицоНажатие(
		Форма,
		ДополнительныеПараметры.Роль,
		ПараметрыРеквизитаФормы,
		ДополнительныеПараметры.ПроцедураПослеИзмененияЮрЛица);
	
КонецПроцедуры

&НаКлиенте
// Универсальный обработчик события Нажатие для полей представления юр лица
//
// Параметры:
//  Форма - Форма - источник вызова
//  РольСтрокой - Строка - имя роли организации
//  ПараметрыРеквизитаФормы - Структура - см. функцию Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы
//  ПроцедураПослеИзмененияЮрЛица - ОписаниеОповещения - процедура, которую нужно выполнить после изменения юр лиц
//
Процедура ЮрЛицоНажатие(Форма, РольСтрокой, ПараметрыРеквизитаФормы,
		ПроцедураПослеИзмененияЮрЛица = Неопределено) Экспорт
		
	МодульТНОбщегоНазначенияКлиентСервер = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер");
		
	ФормаОбъект = МодульТНОбщегоНазначенияКлиентСервер.ФормаОбъект(Форма);
	
	ПараметрыФормы = МодульТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(
		ФормаОбъект.ДанныеЮрЛиц, РольСтрокой, ПараметрыРеквизитаФормы);
	
	Если МодульТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(ФормаОбъект, "КонтактныеДанные") Тогда
		МодульТНОбщегоНазначенияКлиентСервер.ДобавитьКонтактныеДанныеПоРоли(
			ПараметрыФормы, ФормаОбъект.КонтактныеДанные, ПараметрыРеквизитаФормы);
	КонецЕсли;
	
	ТолькоПросмотр = ПараметрыРеквизитаФормы.ТолькоПросмотр
		Или Форма.Элементы[ПараметрыРеквизитаФормы.ИмяЭлемента].ТолькоПросмотр;
	
	ТипДокументаИсточника = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ИмяМетаданныхПоФорме(Форма);
	
	ПараметрыФормы.Вставить("Наименование",          "Организация");
	ПараметрыФормы.Вставить("РольСтрокой",           РольСтрокой);
	ПараметрыФормы.Вставить("ЭлементФормы",          ПараметрыРеквизитаФормы);
	ПараметрыФормы.Вставить("ТипДокументаИсточника", ТипДокументаИсточника);
	ПараметрыФормы.Вставить("ТолькоПросмотр",        ТолькоПросмотр);
	ПараметрыФормы.Вставить("ЭтоВО",                 ПараметрыРеквизитаФормы.ЭтоВО);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма",                         Форма);
	ДопПараметры.Вставить("ПроцедураПослеИзмененияЮрЛица", ПроцедураПослеИзмененияЮрЛица);
	Оповещение = Новый ОписаниеОповещения(
		"ПослеВводаДанныхЮрЛица", МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент"), ДопПараметры);
	
	ПараметрыОткрытияФормыОбработки = ПараметрыОткрытияФормыОбработки("ОбщаяФорма.Saby_ОрганизацииЭПД", ПараметрыФормы, Форма);
	ПараметрыОткрытияФормыОбработки.ОписаниеОповещенияОЗакрытии = Оповещение;
	ПараметрыОткрытияФормыОбработки.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФормуОбработки(ПараметрыОткрытияФормыОбработки);
	
КонецПроцедуры

&НаКлиенте
Функция ИдентификаторОсновнойСтроки(ФормаОбъект, Тип, Роль)
	
	МассивРолей = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").МассивРолей(Роль);
	
	РезультатФункции = Неопределено;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Основной", Истина);
	СтруктураПоиска.Вставить("Роль",     МассивРолей[0].Роль);
	НайденныеСтроки = ФормаОбъект.КонтактныеДанные.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		РезультатФункции = НайденныеСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ПараметрыОткрытияФормыКИ(Форма, Тип, Роль)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Форма",          Форма);
	РезультатФункции.Вставить("Тип",            ЗначениеМетаданных("ТипыКонтактнойИнформации." + Тип));
	РезультатФункции.Вставить("ТипСтрокой",     Тип);
	РезультатФункции.Вставить("Роль",           Роль);
	РезультатФункции.Вставить("Значение",       "");
	РезультатФункции.Вставить("Представление",  "");
	РезультатФункции.Вставить("ТолькоПросмотр", Ложь);
	
	РезультатФункции.Вставить("ИдентификаторСтроки", Неопределено);
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформации(Форма, ДополнительныеПараметры)
	
	ПараметрыВидаКИ = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ПараметрыВидаКонтактнойИнформации",
		ДополнительныеПараметры.Тип);
	
	ПараметрыВидаКИ.Наименование = ДополнительныеПараметры.ТипСтрокой;
	
	ПараметрыКИ = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПараметрыВидаКИ, ДополнительныеПараметры.Значение, ДополнительныеПараметры.Представление);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеВыбораКИ", МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент"), ДополнительныеПараметры);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыКИ, Форма, Оповещение);
	
КонецПроцедуры

#Область РаботаСДатой

&НаКлиенте
// Возвращает текущую дату, приведенную к часовому поясу сеанса.
// Предназначена для использования вместо функции ТекущаяДата() в клиентском коде
// в тех случаях, когда нет возможности перевести выполнение алгоритма в серверный код.
//
// Функция возвращает время, близкое к результату функции ТекущаяДатаСеанса в серверном коде.
// Погрешность обусловлена временем выполнения серверного вызова.
// Кроме того, если на клиентском компьютере перевести время, то функция учтет это изменение 
// не сразу, а только после следующего сброса кеша повторно используемых значений.
// Поэтому алгоритмы, для которых точное время критически важно, следует размещать в серверном коде,
// а не в клиентском.
//
// Возвращаемое значение:
//  Дата - текущая дата сеанса.
//
Функция ДатаСеанса() Экспорт
	
	ПараметрыДатыНаКлиенте = ПараметрыДатыНаКлиенте();
	
	Возврат ПараметрыДатыНаКлиенте.ТекущаяДатаНаКлиенте
		+ ПараметрыДатыНаКлиенте.ПоправкаКВремениСеанса;
	
КонецФункции

&НаКлиенте
// Возвращает параметры для работы с датой на клиенте
// 
// Возвращаемое значение:
//  Структура - параметры для даты на клиенте
//
Функция ПараметрыДатыНаКлиенте() Экспорт
	
	// BSLLS:DeprecatedCurrentDate-off
	ТекущаяДатаВремя = ТекущаяДата();
	// BSLLS:DeprecatedCurrentDate-on
	
	ТекущаяУниверсальнаяДатаВМиллисекундах = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ПараметрыДатыКлиента = Новый Структура;
	ПараметрыДатыКлиента.Вставить("ТекущаяДатаНаКлиенте", ТекущаяДатаВремя);
	ПараметрыДатыКлиента.Вставить("ТекущаяУниверсальнаяДатаВМиллисекундахНаКлиенте", ТекущаяУниверсальнаяДатаВМиллисекундах);
	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияСервер").ДополнитьПараметрыДаты(ПараметрыДатыКлиента);
	
	Возврат ПараметрыДатыКлиента;
	
КонецФункции

#КонецОбласти // РаботаСДатой

