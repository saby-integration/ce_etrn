   
#Область ПрограммныйИнтерфейс   

Функция АвторизацияSaby(Команда, ЭтаФорма) Экспорт
	
	Отказ	= Ложь;
	context_params	= Saby_Core.ПроверитьНаличиеПараметровПодключения();
	
	Если context_params = Неопределено Тогда
		ВходяшиеПараметры	= Новый Структура("Команда",Команда);
		ПроверкаВведенныхДанныхАутентификации = Новый ОписаниеОповещения("СБИС_ПослеАутентификации", ЭтаФорма, ВходяшиеПараметры);
		ОткрытьФорму("Обработка.SABY.Форма.Вход",,,,,, ПроверкаВведенныхДанныхАутентификации);
		Возврат Неопределено;
	КонецЕсли;	
	
	Возврат context_params;
		
КонецФункции

Процедура ВыполнитьКомандуСбис(ЭтаФорма, ИмяКоманды, МассивДокументов, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДопПараметры = Новый Структура;		
	ДопПараметры.Вставить("ИмяКоманды", ИмяКоманды);
	
	Если ИмяКоманды = "ЗагрузитьВСбис"
		Или ИмяКоманды = "ПрочитатьДокумент"
		Или ИмяКоманды = "ОбновитьАктивныйЭтап"  
		Или ИмяКоманды = "ОбновитьДокументИзСбис" Тогда
		
		Если МассивДокументов.Количество() > 1 Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Данная команда предназначена для выполнения по 1 документу. Будет использован первый выбранный документ из списка";
			//Сообщение.Поле  = "Список";
			Сообщение.Сообщить();			
		КонецЕсли;
				
		// Авторизация
		context_params = АвторизацияSaby(ИмяКоманды, ЭтаФорма); 
		Если context_params <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(МассивДокументов) Тогда 
				МассивДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МассивДокументов[0]);
			КонецЕсли;
						
			ДопПараметры.Вставить("МассивДокументов", МассивДокументов);
			ДопПараметры.Вставить("context_params",   context_params);
			ДопПараметры.Вставить("Источник",         ЭтаФорма.УникальныйИдентификатор);
			ДопПараметры.Вставить("ДопПараметры",     ДополнительныеПараметры);
			ВыполнитьКомандуВФоне(ЭтаФорма, ДопПараметры);
			
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "ОткрытьВСбис" Тогда  		
		
		Массив = Новый Массив;
		//Массив.Добавить(Объект.Ссылка);
		Массив.Добавить(МассивДокументов[0]);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Источник", Массив);
		ПараметрыФормы.Вставить("Форма",    ЭтаФорма);
		
		Saby_КомандыОбменаДляФормыКлиент.ПриНажатииОткрытьВСБИСПолучитьUID(ИмяКоманды, ПараметрыФормы);
		
	Иначе
		
		ВызватьИсключение("Для команды " + ИмяКоманды + " не предусмотрен обработчик! Обратитесь к администратору");
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКомандуВФоне(Форма, СтруктураПараметров) Экспорт
	
	ДлительнаяОперация = Saby_ТНОбщегоНазначенияСервер.ДлительнаяОперация(СтруктураПараметров, Форма.УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма); 
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультат", Saby_ТНОбщегоНазначенияКлиент, СтруктураПараметров);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ОбработатьРезультат(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	Источник   = ДополнительныеПараметры.Источник;
	
	Если ИмяКоманды = "ЗагрузитьВСбис"
		Или ИмяКоманды = "ОбновитьДокументИзСбис" 
		Или ИмяКоманды = "ПрочитатьДокумент" 
		Или ИмяКоманды = "ОбновитьАктивныйЭтап" 
		Тогда
		
		ОбработатьРезультатКоманды(Результат, ИмяКоманды, Источник); 
		
		// Обновить форму списка после каких то изменений
		Оповестить("Saby_СписокДокументовОбновить",, Источник);   
							
	КонецЕсли;
			
КонецПроцедуры

Процедура СменаЭтапа(Ссылка, Форма, Этапы) Экспорт
	
	СписокДокументовСБИС = Новый Массив();
	СписокДокументов1С   = Новый Массив();
	
	СписокДокументов1С.Добавить(Ссылка);
		
	ИД = Saby_ТНОбщегоНазначенияСервер.ИдентификаторВСбис(Ссылка);
		
	ДокументСБИС = Новый Соответствие;
	ДокументСБИС.Вставить("Идентификатор", ИД);   // ид сбис 
	//ДокументСБИС.Вставить("ПервичныйКлюч", ""); // ключ в сбис
	ДокументСБИС.Вставить("Документ1С",    Ссылка);
	ДокументСБИС.Вставить("ДокументСБИС",  Неопределено);
	ДокументСБИС.Вставить("Этап",          Этапы);
	
	СписокДокументовСБИС.Добавить(ДокументСБИС);
	
	ПараметрыВФорму = Новый Структура;
	ПараметрыВФорму.Вставить("СписокДокументовСБИС",          СписокДокументовСБИС);
	ПараметрыВФорму.Вставить("СписокДокументов1С",            СписокДокументов1С);
	ПараметрыВФорму.Вставить("МожноПереотправитьВСБИС",       Ложь);
	ПараметрыВФорму.Вставить("МожноОбновитьВСБИС",            Истина);
	ПараметрыВФорму.Вставить("ПрисоединенныеФайлыРасширения", Истина);
	
	ОткрытьФорму("Обработка.SABY.Форма.ВыполнитьДействие", ПараметрыВФорму, Форма, Новый УникальныйИдентификатор());
		
КонецПроцедуры

Процедура ОбработатьОшибкиИзФормыВыполнитьДействие(Ссылка, Параметр) Экспорт
	
	МассивОшибок = Новый Массив;
	
	ЭтоСтруктура = ТипЗнч(Параметр.data) = Тип("Структура");
	
	Если ЭтоСтруктура Тогда
		Результат = Параметр.data;
	Иначе
		Результат = Параметр.data["Результат"];
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		
		Для Каждого Строка из Результат Цикл
			
			ИндексОшибки = 0;
			
			Если ЭтоСтруктура Тогда
				ОписаниеОшибки = Строка.message;
			Иначе
				
				ДокументСБИС = Строка["ДокументСБИС"];
				Если Не ЗначениеЗаполнено(ДокументСБИС["detail"]) Тогда
					Ошибка = ДокументСБИС["message"];
				Иначе
					Ошибка = ДокументСБИС["detail"];
				КонецЕсли;
				
				Если ТипЗнч(Ошибка) = Тип("Строка") Тогда
					ОписаниеОшибки = Ошибка;
				Иначе
					ОписаниеОшибки = Строка["ДокументСБИС"]["detail"]["error"]["details"];
				КонецЕсли;
				
			КонецЕсли;
			
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ИндексСтроки",        ИндексОшибки);
			СтруктураОшибки.Вставить("ТекстДляОднойОшибки", ОписаниеОшибки);
			СтруктураОшибки.Вставить("ПолеОшибки",          "");
			СтруктураОшибки.Вставить("ГруппаОшибок",        Неопределено);
			МассивОшибок.Добавить(СтруктураОшибки);
			
			ИндексОшибки = ИндексОшибки + 1;
			
		КонецЦикла;
		
	Иначе
		
		ОписаниеОшибки = Результат.message + " - (" + Результат.detail + ")";
		
		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ИндексСтроки",        0);
		СтруктураОшибки.Вставить("ТекстДляОднойОшибки", ОписаниеОшибки);
		СтруктураОшибки.Вставить("ПолеОшибки",          "");
		СтруктураОшибки.Вставить("ГруппаОшибок",        Неопределено);
		МассивОшибок.Добавить(СтруктураОшибки);
		
	КонецЕсли;
	
	// если нет ошибок по нашему документу ошибки не показываем
	Если Не МассивОшибок.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОшибок = Новый Структура;
	СтруктураОшибок.Вставить("СписокОшибок", МассивОшибок);
	СтруктураОшибок.Вставить("ГруппыОшибок", Новый Соответствие);
	
	СписокДокументов = Новый Соответствие;
	СписокДокументов.Вставить(Ссылка, СтруктураОшибок);
	
	ОткрытьПервыйДокументИзСоответствия(СписокДокументов);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокДокументов",     СписокДокументов);
	ПараметрыФормы.Вставить("ЭтоДинамическийТитул", Ложь);
	
	Оповестить("Saby_СписокДокументов", ПараметрыФормы);
	
КонецПроцедуры

Процедура ПроверитьМодифицированностьИПродолжитьВыполнение(ПроцедураДляВыполнения, ЗаписыватьБезВопроса = Ложь) Экспорт
	
	Форма = ПроцедураДляВыполнения.Модуль;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",                  Форма);
	ДополнительныеПараметры.Вставить("ПроцедураДляВыполнения", ПроцедураДляВыполнения);
	
	Если Не Форма.Модифицированность Тогда
		ПослеВопросаОЗаписиФормы(КодВозвратаДиалога.Нет, ДополнительныеПараметры);
	ИначеЕсли ЗаписыватьБезВопроса Тогда
		ПослеВопросаОЗаписиФормы(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	Иначе
		ПроцедураПослеВопросаОЗаписиФормы = Новый ОписаниеОповещения(
			"ПослеВопросаОЗаписиФормы",
			Saby_ТНОбщегоНазначенияКлиент,
			ДополнительныеПараметры
		);
		
		ПоказатьВопрос(
			ПроцедураПослеВопросаОЗаписиФормы,
			"Перед выполнением операции необходимо записать изменения.",
			РежимДиалогаВопрос.ДаНетОтмена,
			,
			КодВозвратаДиалога.Отмена,
			"Записать изменения?"
		);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьИОткрытьПечатнуюФормуЭТрН(СсылкаНаДокумент, УникальныйИдентификаторФормы) Экспорт
	
	Результат = Saby_ТНОбщегоНазначенияСервер.ДанныеПечатнойФормыЭТрНДляОткрытия(
		СсылкаНаДокумент, УникальныйИдентификаторФормы
	);
	
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Результат.ОписаниеОшибки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.АдресДвоичныхДанных) Тогда
		
		ФайловаяСистемаКлиент.ОткрытьФайл(Результат.АдресДвоичныхДанных, ,"ЭТрН.pdf");
		
	ИначеЕсли ЗначениеЗаполнено(Результат.СсылкаНаПрисоединенныйФайл) Тогда
		
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(
			Результат.СсылкаНаПрисоединенныйФайл,
			Неопределено,
			УникальныйИдентификаторФормы
		);
		
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработкаОшибок

Процедура ТаблицаОшибокПриАктивизацииСтроки(Форма) Экспорт
	
	ТекущиеДанные = Форма.Элементы.ТаблицаОшибок.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПодробноеОписаниеОшибки = ТекущиеДанные.Ошибка;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.РеквизитОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИмен = СтрРазделить(ТекущиеДанные.РеквизитОбъекта, ".");
	Если МассивИмен.Количество() = 2 Тогда
		ИмяТаблицы  = МассивИмен[0];
		ИмяЭлемента = ТекущиеДанные.ЭлементФормы;
	Иначе
	    ИмяТаблицы  = "";
		ИмяЭлемента = ТекущиеДанные.ЭлементФормы;
	КонецЕсли;
	
	Если СтрНайти(ТекущиеДанные.РеквизитОбъекта, ".") = 0 Тогда
		Форма.ТекущийЭлемент = Форма.Элементы[ИмяЭлемента];
	Иначе
		
		УстановитьАктивнуюСтрокуВОсновнойТаблице(Форма, ИмяТаблицы, ТекущиеДанные.ИндексСтроки);
		
		ИмяТаблицыОбъекта = СтрЗаменить(ИмяТаблицы, "_Выгрузка", "");
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
			ИдентификаторСтроки = Форма.Объект[ИмяТаблицыОбъекта][ТекущиеДанные.ИндексСтроки].ПолучитьИдентификатор();
		Иначе
			ИдентификаторСтроки = Форма[ИмяТаблицыОбъекта][ТекущиеДанные.ИндексСтроки].ПолучитьИдентификатор();
		КонецЕсли;
		
		Форма.ТекущийЭлемент                      = Форма.Элементы[ИмяТаблицы];
		Форма.Элементы[ИмяТаблицы].ТекущаяСтрока  = ИдентификаторСтроки;
		Форма.Элементы[ИмяТаблицы].ТекущийЭлемент = Форма.Элементы[ИмяЭлемента];
		
		Если ИмяТаблицы = "Отметки" Или ИмяТаблицы = "Отметки_Выгрузка" Тогда
			Форма.ОтборОтметокПоТипу(ИдентификаторСтроки);
			Форма.Элементы[ИмяТаблицы].ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьАктивнуюСтрокуВОсновнойТаблице(Форма, ИмяТаблицы, ИндексСтроки)
	
	Если ИмяТаблицы <> "Акты" И ИмяТаблицы <> "Штрафы"
		И ИмяТаблицы <> "Акты_Выгрузка" И ИмяТаблицы <> "Штрафы_Выгрузка" Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицыОбъекта = СтрЗаменить(ИмяТаблицы, "_Выгрузка", "");
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		ФормаОбъект = Форма.Объект;
	Иначе
		ФормаОбъект = Форма;
	КонецЕсли;
	
	КлючСтроки = ФормаОбъект[ИмяТаблицыОбъекта][ИндексСтроки].КлючСтроки_Отметки;
	Отбор = Новый Структура;
	Отбор.Вставить("КлючСтроки", КлючСтроки);
	НайденныеСтрокиОтметок = ФормаОбъект.Отметки.НайтиСтроки(Отбор);
	Если НайденныеСтрокиОтметок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтрокиОтметок = НайденныеСтрокиОтметок[0].ПолучитьИдентификатор();
	
	Если ИмяТаблицы = "Акты" Или ИмяТаблицы = "Штрафы" Тогда
		Форма.ТекущийЭлемент = Форма.Элементы.Отметки;
		Форма.Элементы.Отметки.ТекущаяСтрока  = ИдентификаторСтрокиОтметок;
	ИначеЕсли ИмяТаблицы = "Акты_Выгрузка" Или ИмяТаблицы = "Штрафы_Выгрузка" Тогда
		Форма.ТекущийЭлемент = Форма.Элементы.Отметки_Выгрузка;
		Форма.Элементы.Отметки_Выгрузка.ТекущаяСтрока  = ИдентификаторСтрокиОтметок;
	КонецЕсли;
	
	Форма.ОтборОтметокПоТипу(ИдентификаторСтрокиОтметок);
	
	Если ИмяТаблицы = "Акты" Или ИмяТаблицы = "Штрафы" Тогда
		Форма.Элементы.Отметки.ТекущаяСтрока  = ИдентификаторСтрокиОтметок;
	ИначеЕсли ИмяТаблицы = "Акты_Выгрузка" Или ИмяТаблицы = "Штрафы_Выгрузка" Тогда
		Форма.Элементы.Отметки_Выгрузка.ТекущаяСтрока  = ИдентификаторСтрокиОтметок;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыВыделенияДекорации(Форма) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("НужноОбновитьДекорацию", Ложь);
	РезультатФункции.Вставить("Выделить",               Новый Массив);
	РезультатФункции.Вставить("ОтменитьВыделение",      Новый Массив);
	
	ТекущиеДанные = Форма.Элементы.ТаблицаОшибок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.ЭлементФормы) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	ПереченьДекораций = Новый Массив;
	ПереченьДекораций.Добавить("ДекорацияЗаполнитьАдресПогрузки");
	ПереченьДекораций.Добавить("ДекорацияЗаполнитьАдресДоставки");
	
	Для Каждого ИмяДекорации Из ПереченьДекораций Цикл
		ЭлементДекорации = Форма.Элементы.Найти(ИмяДекорации);
		Если ЭлементДекорации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Выделена = ЭлементДекорации.Подсказка <> "";
		
		Если Выделена И ИмяДекорации <> ТекущиеДанные.ЭлементФормы Тогда
			РезультатФункции.НужноОбновитьДекорацию = Истина;
			РезультатФункции.ОтменитьВыделение.Добавить(ИмяДекорации);
		ИначеЕсли Не Выделена И ИмяДекорации = ТекущиеДанные.ЭлементФормы Тогда
			РезультатФункции.НужноОбновитьДекорацию = Истина;
			РезультатФункции.Выделить.Добавить(ИмяДекорации);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ОбработкаОшибок

#Область ДанныеЮрЛиц

Процедура ТелефонНачалоВыбора(Форма, ПараметрыВыбораТелефона, СтандартнаяОбработка, ЭтоОсновной = Ложь) Экспорт
	
	ФормаОбъект = Saby_ТНОбщегоНазначенияКлиентСервер.ФормаОбъект(Форма);
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Значение", ПараметрыВыбораТелефона.Значение);
	
	НайденныеСтроки = ФормаОбъект.КонтактныеДанные.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЗначениеТелефона = НайденныеСтроки[0].Структура;
	Иначе
		ЗначениеТелефона = "";
	КонецЕсли;
	
	ДополнительныеПараметры = ПараметрыОткрытияФормыКИ(Форма, "Телефон", ПараметрыВыбораТелефона.Роль);
	
	Если ЗначениеЗаполнено(ЗначениеТелефона) Тогда
		ДополнительныеПараметры.Значение = ЗначениеТелефона;
	Иначе
		ДополнительныеПараметры.Значение = Saby_ТНОбщегоНазначенияСервер.КонтактнаяИнформацияПоПредставлению(
			ПараметрыВыбораТелефона.Значение, ДополнительныеПараметры.Тип
		);
	КонецЕсли;
	
	Если ЭтоОсновной Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Основной", Истина);
		
		НайденныеСтроки = ФормаОбъект.КонтактныеДанные.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДополнительныеПараметры.ИдентификаторСтроки = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФормуКонтактнойИнформации(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ТелефонПриИзменении(Форма, Представление, Роль, ЭтоОсновной = Ложь) Экспорт
	
	ФормаОбъект = Saby_ТНОбщегоНазначенияКлиентСервер.ФормаОбъект(Форма);
	
	Значение = Saby_ТНОбщегоНазначенияСервер.КонтактнаяИнформацияПоПредставлению(
		Представление,
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")
	);
	
	СтруктураТелефона = Новый Структура;
	СтруктураТелефона.Вставить("Представление", Представление);
	СтруктураТелефона.Вставить("Значение",      Значение);
	
	ДопПараметрыОбновленияКИ = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(
		Роль, , , СтруктураТелефона
	);
	
	Если ЭтоОсновной Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Основной", Истина);
		НайденныеСтроки = ФормаОбъект.КонтактныеДанные.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДопПараметрыОбновленияКИ.ИдентификаторСтроки = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(Форма, ДопПараметрыОбновленияКИ);
	
КонецПроцедуры

Процедура АдресНачалоВыбора(Форма, ПараметрыВыбораАдреса, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаJSON = ПараметрыВыбораАдреса.Значение;
		
	Если ЗначениеЗаполнено(СтрокаJSON) Тогда
		
		#Если ВебКлиент Тогда
			Адрес = Saby_ТНОбщегоНазначенияСервер.ПрочитатьJSONДляВебКлиента(СтрокаJSON);
		#Иначе
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
			Адрес = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
		#КонецЕсли
		
		Если ТипЗнч(Адрес) = Тип("Структура") И Адрес.Свойство("Типовой") Тогда
			ЗначениеАдреса = Адрес.Типовой;
		Иначе 
			ЗначениеАдреса = "";
		КонецЕсли;
	
	Иначе
		ЗначениеАдреса = "";
	КонецЕсли;
	
	ДополнительныеПараметры = ПараметрыОткрытияФормыКИ(Форма, "Адрес", ПараметрыВыбораАдреса.Роль);
	ДополнительныеПараметры.Значение = ЗначениеАдреса;
	ОткрытьФормуКонтактнойИнформации(ДополнительныеПараметры);
	
КонецПроцедуры

Функция ПараметрыОткрытияФормыКИ(Форма, Тип, Роль)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Форма",        Форма);
	РезультатФункции.Вставить("Тип",          ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации." + Тип));
	РезультатФункции.Вставить("ТипСтрокой",   Тип);
	РезультатФункции.Вставить("Роль",         Роль);
	РезультатФункции.Вставить("Значение",     "");
	
	РезультатФункции.Вставить("ИдентификаторСтроки", Неопределено);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ОткрытьФормуКонтактнойИнформации(ДополнительныеПараметры) 
	
	ПараметрыВидаКонтактнойИнформации = Saby_ТНОбщегоНазначенияСервер.ПараметрыВидаКонтактнойИнформации(ДополнительныеПараметры.Тип);
	
	ПараметрыВидаКонтактнойИнформации.Наименование = ДополнительныеПараметры.ТипСтрокой;
	
	ПараметрыКИ = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПараметрыВидаКонтактнойИнформации, ДополнительныеПараметры.Значение
	);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораКИ", ЭтотОбъект, ДополнительныеПараметры);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыКИ, ЭтотОбъект, Оповещение);
	
КонецПроцедуры  

Процедура ПослеВыбораКИ(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ТипСтрокой = "Телефон" Тогда
		ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(
			ДополнительныеПараметры.Роль, , , Результат
		);
		Если ДополнительныеПараметры.Свойство("ИдентификаторСтроки") Тогда
			ДопПараметры.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
		КонецЕсли;
		Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ДополнительныеПараметры.Форма, ДопПараметры);
	ИначеЕсли ДополнительныеПараметры.ТипСтрокой = "Адрес" Тогда
		ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(
			ДополнительныеПараметры.Роль, , , Результат
		);
		Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьАдресаПогрузкиДоставки(ДополнительныеПараметры.Форма, ДопПараметры);
		ДополнительныеПараметры.Форма.ОбновитьВидимостьИДоступностьЭлементовНаКлиенте();
	КонецЕсли;
	
	ДополнительныеПараметры.Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ЗначениеКонтактныхДанныхПриИзменении(Форма, ТекущиеДанные, Роль) Экспорт
	
	Если ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		
		ТелефонПриИзменении(Форма, ТекущиеДанные.Значение, Роль);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначениеКонтактныхДанныхНачалоВыбора(Форма, ТекущиеДанные, Роль, СтандартнаяОбработка) Экспорт
	
	Если ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		ПараметрыВыбораТелефона = Новый Структура;
		ПараметрыВыбораТелефона.Вставить("Роль",                Роль);
		ПараметрыВыбораТелефона.Вставить("Значение",            ТекущиеДанные.Значение);
		ПараметрыВыбораТелефона.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
		
		ТелефонНачалоВыбора(Форма, ПараметрыВыбораТелефона, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ДанныеЮрЛиц

#КонецОбласти    

#Область СлужебныеПроцедурыИФункции

Функция ТекстСообщенияКоманды(Ключ) 
	
	ТекстСообщения = Новый Соответствие;
	
	ЗагрузитьВСбис = Новый Структура;
	ЗагрузитьВСбис.Вставить("НетРезультата",      "Выгрузка не производилась");
	ЗагрузитьВСбис.Вставить("Успешно",            "В СБИС выгружено %1 документов");
	ЗагрузитьВСбис.Вставить("ВыполненоСОшибками", "В СБИС выгружено документов %1 из %2");
	
	ТекстСообщения.Вставить("ЗагрузитьВСбис", ЗагрузитьВСбис);

	ПрочитатьДокумент = Новый Структура;
	ПрочитатьДокумент.Вставить("НетРезультата",      "Загрузка не производилась");
	ПрочитатьДокумент.Вставить("Успешно",            "Документ обновлен");
	ПрочитатьДокумент.Вставить("ВыполненоСОшибками", "Возникла ошибка! Документ не загружен");
	
	ТекстСообщения.Вставить("ПрочитатьДокумент", ПрочитатьДокумент);
		
	ОбновитьДокументИзСбис = Новый Структура;
	ОбновитьДокументИзСбис.Вставить("НетРезультата",      "Загрузка не производилась. Данных для обновления нет");
	ОбновитьДокументИзСбис.Вставить("Успешно",            "Из СБИС загружено %1 документов");
	ОбновитьДокументИзСбис.Вставить("ВыполненоСОшибками", "Из СБИС загружено документов %1 из %2");
	
	ТекстСообщения.Вставить("ОбновитьДокументИзСбис", ОбновитьДокументИзСбис);
	
	Возврат ТекстСообщения.Получить(Ключ);
	
КонецФункции

Процедура ОбработатьРезультатКоманды(Результат, ИмяКоманды, Источник)
	
	РезультатОбработки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	ТекстСообщения = ТекстСообщенияКоманды(ИмяКоманды);
	
	Если РезультатОбработки.ВсегоДокументов = 0 Тогда
		
		Текст    = ТекстСообщения.НетРезультата;
		Картинка = БиблиотекаКартинок.ВосклицательныйЗнакСерый;
		
	Иначе
		
		// Текст сообщения может быть пустым для служебных команд
		// по которым не нужно что то сообщать
		Если ТекстСообщения <> Неопределено Тогда
			
			Если РезультатОбработки.Успешно Тогда
				
				Картинка = БиблиотекаКартинок.Saby_Успешно32;
				
				Если СтрНайти(ТекстСообщения.Успешно, "%") > 0 Тогда
					Текст = СтрШаблон(ТекстСообщения.Успешно, Формат(РезультатОбработки.Количество, "ЧН=; ЧГ="));
				Иначе
					Текст = СтрШаблон(ТекстСообщения.Успешно);
				КонецЕсли;
				
			Иначе
				
				Картинка = БиблиотекаКартинок.Saby_Ошибка32;
				
				Если СтрНайти(ТекстСообщения.ВыполненоСОшибками, "%") > 0 Тогда
					Текст = СтрШаблон(
						ТекстСообщения.ВыполненоСОшибками,
						Формат(РезультатОбработки.Количество, "ЧН=; ЧГ="),
						Формат(РезультатОбработки.ВсегоДокументов, "ЧГ=")
					);
				Иначе
					Текст = ТекстСообщения.ВыполненоСОшибками;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатОбработки.Свойство("СписокДокументов")
		И РезультатОбработки.СписокДокументов.Количество() Тогда
		
		Если Не РезультатОбработки.ЭтоДинамическийТитул Тогда
			ОткрытьПервыйДокументИзСоответствия(РезультатОбработки.СписокДокументов);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("СписокДокументов",     РезультатОбработки.СписокДокументов);
		ПараметрыФормы.Вставить("ЭтоДинамическийТитул", РезультатОбработки.ЭтоДинамическийТитул);
		
		Оповестить("Saby_СписокДокументов", ПараметрыФормы);
		
	КонецЕсли;
	
	Если РезультатОбработки.Успешно Тогда
		
		МассивСсылок = РезультатОбработки.УспешныеДокументы;
		Для Каждого Элемент Из МассивСсылок Цикл
			
			// одиночная команда
			Если ИмяКоманды = "ПрочитатьДокумент"
				Или ИмяКоманды = "ОбновитьАктивныйЭтап" Тогда
				
				Оповестить("Saby_ОбновитьДокумент",, Источник);
				
			// загрузить. сейчас это одиночная команда...
			ИначеЕсли ИмяКоманды = "ЗагрузитьВСбис" Тогда
				
				Если Не Элемент.ДинамическийТитул Тогда
					Оповестить("Saby_ВыполнитьПереход", Элемент, Источник);
				Иначе
					Оповестить("Saby_ОбновитьДокумент",, Источник);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		"Завершено",
		,
		Текст,
		Картинка
	);
	
КонецПроцедуры

Процедура ПослеВопросаОЗаписиФормы(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если Форма.Модифицированность И Результат = КодВозвратаДиалога.Да Тогда
		Форма.Записать();
	КонецЕсли;
	
	Если Результат <> КодВозвратаДиалога.Отмена Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ПроцедураДляВыполнения, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьПервыйДокументИзСоответствия(СоответствиеДокументов)
	
	Для Каждого КлючЗначение Из СоответствиеДокументов Цикл
		ПараметрыФормыДокумента = Новый Структура;
		ПараметрыФормыДокумента.Вставить("Ключ", КлючЗначение.Ключ);
		ОткрытьФорму("Документ.Saby_ТранспортнаяНакладная.ФормаОбъекта", ПараметрыФормыДокумента);
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти   
