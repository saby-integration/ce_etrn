  
#Область ПрограммныйИнтерфейс

// Возвращает массив типов доступных для заполнения на основании.
//
// Параметры:
//  ЗначенияПоУмолчанию - Булево - признак получения типов по умолчанию
//
// Возвращаемое значение:
//   Массив - массив типов выбранных для заполнения на основании.
//
Функция ТипыДляЗаполненияНаОсновании(ЗначенияПоУмолчанию = Ложь) Экспорт
	
	Если Не ЗначенияПоУмолчанию Тогда
		РезультатФункции = ПользовательскиеТипыДляЗаполненияНаОсновании();
	Иначе
		РезультатФункции = Неопределено;
	КонецЕсли;
	
	Если РезультатФункции = Неопределено Тогда
		РезультатФункции = ТипыПоУмолчаниюДляЗаполненияНаОсновании();
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Сохраняет выбранные типы документов для заполнения на основании выбранные пользователем.
//
// Параметры:
//  МассивТипов - Массив - массив типов
//
Процедура СохранитьВыбранныеТипыДляЗаполненияНаОсновании(МассивТипов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеОбщихНастроек.Сохранить("Saby", "ТипыДляЗаполненияНаОснованииДокументаЭПЛ", МассивТипов);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает структуру реквизитов документа, относящиеся титулу
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.Saby_ПутевойЛист - ссылка на документ
//  ТипТитула - ПеречислениеСсылка.Saby_ТипТитулаЭПЛ - ссылка на тип титула
//
// Возвращаемое значение:
//   Структура - структура полученных данных документа
//
Функция ДанныеДокумента(СсылкаНаДокумент, ТипТитула) Экспорт
	
	ТипыТитулов = Перечисления.Saby_ТипТитулаЭПЛ.ВсеТипыТитулов();
	
	Если Перечисления.Saby_ТипТитулаЭПЛ.ЭтоПервыйТитул(ТипТитула) Тогда
		
		Возврат ВыгрузкаДанныеВыпуск(СсылкаНаДокумент);
		
	ИначеЕсли ТипТитула = ТипыТитулов.ПредрейсовыйМедосмотр Тогда
		
		Возврат ВыгрузкаДанныеПредрейсовыйМедосмотр(СсылкаНаДокумент);
		
	ИначеЕсли ТипТитула = ТипыТитулов.ПредрейсовыйТехосмотр Тогда
		
		Возврат ВыгрузкаДанныеПредрейсовыйТехосмотр(СсылкаНаДокумент);
		
	ИначеЕсли ТипТитула = ТипыТитулов.Выпускающий Тогда
		
		Возврат ВыгрузкаДанныеВыпускающий(СсылкаНаДокумент);
		
	ИначеЕсли ТипТитула = ТипыТитулов.Принимающий Тогда
		
		Возврат ВыгрузкаДанныеПринимающий(СсылкаНаДокумент);
		
	ИначеЕсли ТипТитула = ТипыТитулов.ПослерейсовыйМедосмотр Тогда
		
		Возврат ВыгрузкаДанныеПослерейсовыйМедосмотр(СсылкаНаДокумент);
		
	Иначе
		
		Возврат Новый Структура;
		
	КонецЕсли;
	
КонецФункции

// Получает данные документа для выгрузки в формате подстановок
//
// Параметры:
//  ДанныеДокумента - Структура - структура данных документа
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//
// Возвращаемое значение:
//   Структура - структура данных для выгрузки в формате подстановок.
//     * Идентификатор - Строка - идентификатор документа СБИС
//     * Вложение - Массив - массив структур вложений в формате подстановок.
//
Функция ДанныеДляВыгрузки(ДанныеДокумента, ПараметрыВыгрузки) Экспорт
	
	ДокументСтруктура = Новый Структура;
	ВложениеНаВыгрузку(ПараметрыВыгрузки.ТипТитула, ДанныеДокумента, ДокументСтруктура);
	
	Если Не ЗначениеЗаполнено(ДокументСтруктура) Тогда
		Возврат ДокументСтруктура;
	КонецЕсли;
	
	ПараметрыДокументаДляАПИ = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыДокументаДляАПИ(
		ПараметрыВыгрузки.ИмяМетаданных);
	
	ДокументСтруктура.Вставить("Тип", ПараметрыДокументаДляАПИ.ТипДляВыгрузки);
	
	Регламент = Новый Структура;
	Регламент.Вставить("Название", ПараметрыДокументаДляАПИ.Регламент);
	ДокументСтруктура.Вставить("Регламент", Регламент);
	
	Saby_ТНВыгрузкаСервер.ЗаполнитьНашуОрганизацию(ДокументСтруктура, ПараметрыВыгрузки);
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИдентификаторСБИС) Тогда
		Адресация = Новый Структура;
		Адресация.Вставить("Идентификатор", ПараметрыВыгрузки.ИдентификаторСБИС);
		ДокументСтруктура.Вставить("Адресация", Адресация);
	КонецЕсли;
	
	Возврат ДокументСтруктура;
	
КонецФункции

// Получает дату из подстановок указанного титула, полученного с онлайна.
//
// Параметры:
//  ДанныеТитула - Соответствие - значение подстановок с онлайна.
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭПЛ - титул, для которого получаем дату.
//  СтруктураВложения - Структура - структура данных вложения.
//
// Возвращаемое значение:
//   Дата - значение даты
//
Функция ДатаВложения(ДанныеТитула, Титул, СтруктураВложения = Неопределено) Экспорт
	
	Если ДанныеТитула["ДатаВложенияТитула"] <> Неопределено Тогда
		РезультатФункции = ДанныеТитула["ДатаВложенияТитула"];
	ИначеЕсли СтруктураВложения <> Неопределено Тогда
		РезультатФункции = СтруктураВложения.ДатаВремя;
	Иначе 	
		РезультатФункции = Неопределено;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Получает идентификатор из подстановок указанного титула, полученного с онлайна.
//
// Параметры:
//  ДанныеТитула - Соответствие - значение подстановок с онлайна.
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭПЛ - титул, для которого получаем дату.
//  СтруктураВложения - Структура - структура данных вложения.
//
// Возвращаемое значение:
//   Строка - идентификатор титула
//
Функция ИдентификаторВложения(ДанныеТитула, Титул, СтруктураВложения = Неопределено) Экспорт
    
	Если ДанныеТитула["ИдентификаторВложенияТитула"] <> Неопределено Тогда
		ИдФайл = ДанныеТитула["ИдентификаторВложенияТитула"];
	ИначеЕсли СтруктураВложения <> Неопределено Тогда
		ИдФайл = СтруктураВложения.Идентификатор;
	Иначе
		ИдФайл = "";
	КонецЕсли;
	
	РезультатФункции = Прав(ИдФайл, 36);
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

#Область Команды

// Заполняет список команд печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти // Команды

Функция МенеджерТитулов() Экспорт
	
	Возврат Перечисления.Saby_ТипТитулаЭПЛ;
	
КонецФункции

// Возвращает параметры для выполнения ФЛК
//
// Параметры:
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//
// Возвращаемое значение:
//   Структура - структура данных для дальнейшей проверки реквизитов
//
Функция ПараметрыПроверкиРеквизитов(ДанныеДокумента, ПараметрыВыгрузки) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ПроверяемыеРеквизиты", Новый Массив);
	
	ОшибкиПоРеквизитам = Saby_ТНОбщегоНазначенияСервер.СоответствиеРеквизитовОшибок(ПараметрыВыгрузки);
	РезультатФункции.Вставить("ОшибкиПоРеквизитам", ОшибкиПоРеквизитам);
	
	ТипыТитулов = Перечисления.Saby_ТипТитулаЭПЛ.ВсеТипыТитулов();
	
	Если Перечисления.Saby_ТипТитулаЭПЛ.ЭтоПервыйТитул(ПараметрыВыгрузки.ТипТитула) Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаВыпуск(ДанныеДокумента, РезультатФункции.ПроверяемыеРеквизиты);
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов.ПредрейсовыйМедосмотр Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаПредрейсовыйМедосмотр(РезультатФункции.ПроверяемыеРеквизиты);
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов.ПредрейсовыйТехосмотр Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаПредрейсовыйТехосмотр(РезультатФункции.ПроверяемыеРеквизиты);
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов.Выпускающий Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаВыпускающий(РезультатФункции.ПроверяемыеРеквизиты);
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов.Принимающий Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаПринимающий(РезультатФункции.ПроверяемыеРеквизиты);
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов.ПослерейсовыйМедосмотр Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаПослерейсовыйМедосмотр(РезультатФункции.ПроверяемыеРеквизиты);
	Иначе
		РезультатФункции.ПроверяемыеРеквизиты = Новый Массив;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает имя таблицы документа с учетом специфики
//
// Параметры:
//  ИмяТабличнойЧасти - Строка - наименование табличной части из конфигуратора
//  СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - строка табличной части документа
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//
// Возвращаемое значение:
//   Строка - наименование таблицы на форме документа
//
Функция ИмяТЧДокумента(ИмяТабличнойЧасти, СтрокаТабличнойЧасти, ДанныеДокумента) Экспорт
	
	Возврат ИмяТабличнойЧасти;
	
КонецФункции

Функция ПроверятьРеквизитДокумента(ИмяРеквизита, ДанныеДокумента) Экспорт
	
	Если ИмяРеквизита = "ДанныеЮрЛицМедосмотрВыезд" Или ИмяРеквизита = "ДанныеЮрЛицМедосмотрЗаезд" Тогда
		Возврат ПроверятьРеквизитЮрЛиц(Неопределено, Неопределено, Неопределено, ДанныеДокумента);
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает признак необходимости ФЛК реквизитов табличной части документа
//
// Параметры:
//  СтрокаТЧ - СтрокаТаблицыЗначений - строка табличной части документа
//  ИмяТЧ - Строка - имя табличной части документа
//  ИмяРеквизита - Строка - имя реквизита табличной части документа
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//
// Возвращаемое значение:
//   Булево - Истина, если проверять необходимо
//
Функция ПроверятьРеквизитТЧДокумента(СтрокаТЧ, ИмяТЧ, ИмяРеквизита, ДанныеДокумента) Экспорт
	
	Если ИмяТЧ = "ТранспортныеСредства" Тогда
		
		Возврат ПроверятьРеквизитТранспортногоСредства(СтрокаТЧ, ИмяТЧ, ИмяРеквизита);
		
	ИначеЕсли ИмяТЧ = "ДанныеЮрЛицМедосмотрВыезд" Или ИмяТЧ = "ДанныеЮрЛицМедосмотрЗаезд" Тогда
		
		Возврат ПроверятьРеквизитЮрЛиц(СтрокаТЧ, ИмяТЧ, ИмяРеквизита, ДанныеДокумента);
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Выполняет нестандартные проверки ФЛК с логикой сложнее, чем заполнен незаполнен.
//
// Параметры:
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//  ПараметрыПроверкиРеквизитов - Структура - см. функцию ПараметрыПроверкиРеквизитов
//  Ошибки - Массив,Неопределено - массив для накопления ошибок
//
Процедура ВыполнитьДополнительныеПроверкиФЛК(ДанныеДокумента, ПараметрыВыгрузки,
		ПараметрыПроверкиРеквизитов, Ошибки) Экспорт
		
	ТипыТитулов = Перечисления.Saby_ТипТитулаЭПЛ.ВсеТипыТитулов();
		
	Если Перечисления.Saby_ТипТитулаЭПЛ.ЭтоПервыйТитул(ПараметрыВыгрузки.ТипТитула) Тогда
		
		ДопПроверкиФЛКВыпуск(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки);
		
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов.ПредрейсовыйМедосмотр Тогда
		
		ДопПроверкиФЛКПредрейсовыйМедосмотр(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки);
		
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов.ПредрейсовыйТехосмотр Тогда
		
		ДопПроверкиФЛКПредрейсовыйТехосмотр(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки);
		
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов.Выпускающий Тогда
		
		ДопПроверкиФЛКВыпускающий(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки);
		
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов.Принимающий Тогда
		
		ДопПроверкиФЛКПринимающий(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки);
		
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов.ПослерейсовыйМедосмотр Тогда
		
		ДопПроверкиФЛКПослерейсовыйМедосмотр(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ВложенияЗагружены(Вложения, Титул, ОбъектДок, ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Вложения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВложенияМассив = Saby_ТНОбщегоНазначенияКлиентСервер.ЗначениеВМассив(Вложения);
	
	Если Титул = Перечисления.Saby_ТипТитулаЭПЛ.Выпуск Тогда
		ЗагрузкаТитулаВыпуск(ОбъектДок, ВложенияМассив, Титул, ДопПараметры);
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭПЛ.ПредрейсовыйМедосмотр Тогда
		ЗагрузкаТитулаПредрейсовыйМедосмотр(ОбъектДок, ВложенияМассив, Титул, ДопПараметры);
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭПЛ.ПредрейсовыйТехосмотр Тогда
		ЗагрузкаТитулаПредрейсовыйТехосмотр(ОбъектДок, ВложенияМассив, Титул, ДопПараметры);
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭПЛ.Выпускающий Тогда
		ЗагрузкаТитулаВыпускающий(ОбъектДок, ВложенияМассив, Титул, ДопПараметры);
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭПЛ.Принимающий Тогда
		ЗагрузкаТитулаПринимающий(ОбъектДок, ВложенияМассив, Титул, ДопПараметры);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ТитулыДляЗагрузки(ОбъектДок, ПараметрыЗагрузки) Экспорт
	
	ТекущиеЗначения = Saby_ТНЗагрузкаСервер.ТекущиеЗначенияДокумента(ОбъектДок, ПараметрыЗагрузки);
	
	Этап = ТекущиеЗначения.Титул;
	
	Если ЗначениеЗаполнено(ТекущиеЗначения.Состояние) Тогда  
	   КодСостояния = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеЗначения.Состояние, "ИдентификаторСБИС");
	КонецЕсли;   
	
	ТипыТитулов = Перечисления.Saby_ТипТитулаЭПЛ.ВсеТипыТитулов();
	
    МассивТитуловДляЗагрузки = Новый Массив;
	
	ДОЗавершенУспешно      = 7;
	ДОЗавершенОтрицательно = 9;
	
	Если КодСостояния = ДОЗавершенУспешно
		Или КодСостояния = ДОЗавершенОтрицательно Тогда
		
		Если ПараметрыЗагрузки.ТолькоАктивныйЭтап Тогда
			МассивТитуловДляЗагрузки.Добавить(Этап);
		Иначе
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ПослерейсовыйМедосмотр);
		КонецЕсли;
		
		Возврат МассивТитуловДляЗагрузки;	
		
	КонецЕсли;	
	
	Если ПараметрыЗагрузки.ТолькоАктивныйЭтап Тогда
		
		// В регистре состояния нет данных о текущем этапе, при этом документооборот не завершен.
		Если Этап.Пустая() Тогда
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.Выпуск);
		Иначе
			МассивТитуловДляЗагрузки.Добавить(Этап);
		КонецЕсли;
		
	Иначе
		
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.Выпуск);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ПредрейсовыйМедосмотр);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ПредрейсовыйТехосмотр);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.Выпускающий);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.Принимающий);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ПослерейсовыйМедосмотр);
		
	КонецЕсли;
	
	Возврат МассивТитуловДляЗагрузки;

КонецФункции

Функция ТекущиеЭтапыДокумента(Форма) Экспорт
	
	РезультатФункции = Новый Массив;
	
	Для Каждого СтрокаТекущегоТитула Из Форма.Объект.ТекущиеЭтапы Цикл
		РезультатФункции.Добавить(СтрокаТекущегоТитула.ТипТитула);
	КонецЦикла;
	
	Если РезультатФункции.Количество() = 0 Тогда
		РезультатФункции.Добавить(Перечисления.Saby_ТипТитулаЭПЛ.ПустаяСсылка());
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ПользовательскиеТипыДляЗаполненияНаОсновании()
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатФункции = ХранилищеОбщихНастроек.Загрузить("Saby", "ТипыДляЗаполненияНаОснованииДокументаЭПЛ");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ТипыПоУмолчаниюДляЗаполненияНаОсновании()
	
	РезультатФункции = Новый Массив;
	
	СинонимКонфигурации = Метаданные.Синоним;
	
	ДоступныеКонфигурации    = Saby_ТНОбщегоНазначенияСервер.ДоступныеКонфигурации();
	ЭтоДоступнаяКонфигурация = Saby_ТНОбщегоНазначенияСервер.ЭтоДоступнаяКонфигурация(
		СинонимКонфигурации, ДоступныеКонфигурации);
		
	Если Не ЭтоДоступнаяКонфигурация
		Или СинонимКонфигурации = ДоступныеКонфигурации.УАТ Тогда
		Возврат РезультатФункции;
	КонецЕсли;

	Если Метаданные.Синоним = ДоступныеКонфигурации.УАТ Тогда 
		
		РезультатФункции.Добавить(Тип("ДокументСсылка.уатМаршрутныйЛист"));
		РезультатФункции.Добавить(Тип("ДокументСсылка.уатПутевойЛист"));		
				
	КонецЕсли;	
	
	Возврат РезультатФункции;
		
КонецФункции

#Область ФЛК

Процедура ДополнитьПроверяемыеРеквизитыЭтапаВыпуск(ДанныеДокумента, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Оформитель");
	
	ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.РегистрационныйНомер");
	ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.Тип");
	ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.Марка");
	ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.Модель");
	ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.ИнвентарныйНомер");
	
	ПроверяемыеРеквизиты.Добавить("ДатаНачалаИсполнения");
	ПроверяемыеРеквизиты.Добавить("ДатаОкончанияИсполнения");
	ПроверяемыеРеквизиты.Добавить("ПризнакНачалаРейса");
	ПроверяемыеРеквизиты.Добавить("ВидПеревозки");
	Если ДанныеДокумента.Реквизиты.ВидПеревозки = Перечисления.Saby_ВидПеревозки.КоммерческиеПеревозки Тогда
		ПроверяемыеРеквизиты.Добавить("ВидКоммерческойПеревозки");
	КонецЕсли;
	ПроверяемыеРеквизиты.Добавить("ВидТранспортногоСообщения");
	ПроверяемыеРеквизиты.Добавить("МестоОтправления");
	
	ВидПеревозкаГрузов = Перечисления.Saby_ВидКоммерческойПеревозки.ПеревозкаНаОснованииДоговораПеревозки;
	
	Если ДанныеДокумента.Реквизиты.ВидКоммерческойПеревозки = ВидПеревозкаГрузов Тогда
		ПроверяемыеРеквизиты.Добавить("АдресаПунктовВыгрузки");
		ПроверяемыеРеквизиты.Добавить("АдресаПунктовВыгрузки.Значение");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаПредрейсовыйМедосмотр(ПроверяемыеРеквизиты)
		
	ПроверяемыеРеквизиты.Добавить("ДоРейса_ДатаВремяМедосмотра");
		
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрВыезд.Серия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрВыезд.Номер");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрВыезд.ДатаВыдачи");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрВыезд.ДатаОкончанияДействия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрВыезд.Фамилия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрВыезд.Имя");
	
	ПроверяемыеРеквизиты.Добавить("ДанныеЮрЛицМедосмотрВыезд");
	ПроверяемыеРеквизиты.Добавить("ДанныеЮрЛицМедосмотрВыезд.НаименованиеОрганизации");
	
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаПредрейсовыйТехосмотр(ПроверяемыеРеквизиты)
		
	ПроверяемыеРеквизиты.Добавить("ТО_ДатаВремя");
	ПроверяемыеРеквизиты.Добавить("ТО_НеРазрешенВыпускПосле");
	ПроверяемыеРеквизиты.Добавить("ТО_ДатаВремяВыпускаВРейс");
		
	ПроверяемыеРеквизиты.Добавить("ОтветственныйТехосмотр.Фамилия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйТехосмотр.Имя");
		
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаВыпускающий(ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Выезд_ДатаВремя");
	ПроверяемыеРеквизиты.Добавить("Выезд_Одометр");
	
	ПроверяемыеРеквизиты.Добавить("ОтветственныйОдометрВыезд.Фамилия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйОдометрВыезд.Имя");
	
	ПроверяемыеРеквизиты.Добавить("ОтветственныйОдометрЗаезд.Фамилия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйОдометрЗаезд.Имя");
	
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаПринимающий(ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Заезд_ДатаВремя");
	ПроверяемыеРеквизиты.Добавить("Заезд_Одометр");
	
	ПроверяемыеРеквизиты.Добавить("ОтветственныйОдометрЗаезд.Фамилия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйОдометрЗаезд.Имя");
	
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаПослерейсовыйМедосмотр(ПроверяемыеРеквизиты)
		
	ПроверяемыеРеквизиты.Добавить("ПослеРейса_ДатаВремяМедосмотра");
	ПроверяемыеРеквизиты.Добавить("ПослеРейса_КомментарииМедосмотра");
		
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрЗаезд.Серия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрЗаезд.Номер");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрЗаезд.ДатаВыдачи");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрЗаезд.ДатаОкончанияДействия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрЗаезд.Фамилия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрЗаезд.Имя");
	
	ПроверяемыеРеквизиты.Добавить("ДанныеЮрЛицМедосмотрЗаезд");
	ПроверяемыеРеквизиты.Добавить("ДанныеЮрЛицМедосмотрЗаезд.НаименованиеОрганизации");
	
КонецПроцедуры

Процедура ДопПроверкиФЛКВыпуск(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки)
	
	Saby_ТНОбщегоНазначенияСервер.ПроверитьЗаполнениеТранспортногоСредства(
		ДанныеДокумента, Ошибки, ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам);
			
	ПроверитьЗаполнениеВодителей(ДанныеДокумента, Ошибки, ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам);
		
КонецПроцедуры

Процедура ДопПроверкиФЛКПредрейсовыйМедосмотр(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки)
	
	ПроверитьЗаполнениеВодителей(ДанныеДокумента, Ошибки, ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам);
	
	ПроверитьОтветственного(ДанныеДокумента, "ОтветственныйМедосмотрВыезд", ПараметрыПроверкиРеквизитов, Ошибки);
	
КонецПроцедуры

Процедура ДопПроверкиФЛКПредрейсовыйТехосмотр(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки)
	
	Saby_ТНОбщегоНазначенияСервер.ПроверитьЗаполнениеТранспортногоСредства(
		ДанныеДокумента, Ошибки, ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам);
		
	ПроверитьОтветственного(ДанныеДокумента, "ОтветственныйТехосмотр", ПараметрыПроверкиРеквизитов, Ошибки);
		
КонецПроцедуры

Процедура ДопПроверкиФЛКВыпускающий(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки)
	
	ПроверитьОтветственного(ДанныеДокумента, "ОтветственныйОдометрВыезд", ПараметрыПроверкиРеквизитов, Ошибки);
	
	ПроверитьОтветственного(ДанныеДокумента, "ОтветственныйОдометрЗаезд", ПараметрыПроверкиРеквизитов, Ошибки);
	
	Выезд_ДатаВремя = ДанныеДокумента.Реквизиты.Выезд_ДатаВремя;
	
	Если НачалоДня(Выезд_ДатаВремя) = Выезд_ДатаВремя Тогда
		СтруктураДанныхОшибки = ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам.Получить("Выезд_Время");
			Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				"Выезд_ДатаВремя",
				СтруктураДанныхОшибки.Ошибка,
				СтруктураДанныхОшибки.РеквизитОбъекта,
				СтруктураДанныхОшибки.ЭлементФормы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДопПроверкиФЛКПринимающий(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки)
	
	ПроверитьОтветственного(ДанныеДокумента, "ОтветственныйОдометрЗаезд", ПараметрыПроверкиРеквизитов, Ошибки);
	
КонецПроцедуры

Процедура ДопПроверкиФЛКПослерейсовыйМедосмотр(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки)
	
	ПроверитьЗаполнениеВодителей(ДанныеДокумента, Ошибки, ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам);
	
	ПроверитьОтветственного(ДанныеДокумента, "ОтветственныйМедосмотрЗаезд", ПараметрыПроверкиРеквизитов, Ошибки);
	
КонецПроцедуры

Функция ПроверятьРеквизитТранспортногоСредства(СтрокаТЧ, ИмяТЧ, ИмяРеквизита)
	
	ЭтоАвтомобиль = СтрокаТЧ.Вид = Перечисления.Saby_ВидыТС.Автомобиль;
	
	Если ЭтоАвтомобиль Тогда
		
		Если ИмяРеквизита = "РегистрационныйНомер" Тогда
			Возврат Не ЗначениеЗаполнено(СтрокаТЧ.ИнвентарныйНомер);
		ИначеЕсли ИмяРеквизита = "ИнвентарныйНомер" Тогда
			Возврат Не ЗначениеЗаполнено(СтрокаТЧ.РегистрационныйНомер);
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		
		Возврат ИмяРеквизита <> "Тип" И ИмяРеквизита <> "ИнвентарныйНомер";
		
	КонецЕсли;
	
КонецФункции

Функция ПроверятьРеквизитЮрЛиц(СтрокаТЧ, ИмяТЧ, ИмяРеквизита, ДанныеДокумента)
	
	МедосмотрПроводитСторонняяОрганизация = Ложь;
	
	Если ДанныеДокумента.Реквизиты.Свойство("ДоРейса_МедосмотрСторонняяОрганизация") Тогда
		МедосмотрПроводитСторонняяОрганизация = МедосмотрПроводитСторонняяОрганизация
			Или ДанныеДокумента.Реквизиты.ДоРейса_МедосмотрСторонняяОрганизация;
	КонецЕсли;
		
	Если ДанныеДокумента.Реквизиты.Свойство("ПослеРейса_МедосмотрСторонняяОрганизация") Тогда
		МедосмотрПроводитСторонняяОрганизация = МедосмотрПроводитСторонняяОрганизация
			Или ДанныеДокумента.Реквизиты.ПослеРейса_МедосмотрСторонняяОрганизация;
	КонецЕсли;
	
	Возврат МедосмотрПроводитСторонняяОрганизация;
	
КонецФункции

Процедура ПроверитьЗаполнениеВодителей(ДанныеДокумента, Ошибки, СоответствиеРеквизитовОшибок)
	
	Если ДанныеДокумента.Водители.Количество() = 0 Тогда
		СтруктураДанныхОшибки = СоответствиеРеквизитовОшибок.Получить("Водители");
		Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"ВодительСтрокой",
			СтруктураДанныхОшибки.Ошибка,
			СтруктураДанныхОшибки.РеквизитОбъекта,
			СтруктураДанныхОшибки.ЭлементФормы);
	КонецЕсли;
	
	ПроверяемыеРеквизиты = Новый Массив;
	ПроверяемыеРеквизиты.Добавить("Фамилия");
	ПроверяемыеРеквизиты.Добавить("Имя");
	ПроверяемыеРеквизиты.Добавить("Серия");
	ПроверяемыеРеквизиты.Добавить("Номер");
	ПроверяемыеРеквизиты.Добавить("ДатаВыдачи");
	ПроверяемыеРеквизиты.Добавить("ИНН");
	
	Для Каждого ДанныеВодителя Из ДанныеДокумента.Водители Цикл
		
		Для Каждого ИмяРеквизита Из ПроверяемыеРеквизиты Цикл
			
			Если Не ПроверятьРеквизитВодителя(ДанныеВодителя, ИмяРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеВодителя[ИмяРеквизита]) Тогда
				СтруктураДанныхОшибки = СоответствиеРеквизитовОшибок.Получить("Водители." + ИмяРеквизита);
				Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(
					Ошибки,
					"Водители",
					СтруктураДанныхОшибки.Ошибка,
					СтруктураДанныхОшибки.РеквизитОбъекта,
					СтруктураДанныхОшибки.ЭлементФормы,
					ДанныеВодителя.НомерСтроки - 1);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверятьРеквизитВодителя(ДанныеВодителя, ИмяРеквизита)
	
	Если ИмяРеквизита = "Серия" Или ИмяРеквизита = "Номер" Или ИмяРеквизита = "ДатаВыдачи" Тогда
		Возврат Не ЗначениеЗаполнено(ДанныеВодителя.ИНН);
	ИначеЕсли ИмяРеквизита = "ИНН" Тогда
		Возврат Не ЗначениеЗаполнено(ДанныеВодителя.Серия)
			Или Не ЗначениеЗаполнено(ДанныеВодителя.Номер)
			Или Не ЗначениеЗаполнено(ДанныеВодителя.ДатаВыдачи);
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьОтветственного(ДанныеДокумента, ИмяТаблицыОтветственных, ПараметрыПроверкиРеквизитов, Ошибки)
	
	Если ДанныеДокумента[ИмяТаблицыОтветственных].Количество() = 0 Тогда
		
		СтруктураДанныхОшибки = ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам.Получить(ИмяТаблицыОтветственных);
		Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"Ответственный",
			СтруктураДанныхОшибки.Ошибка,
			СтруктураДанныхОшибки.РеквизитОбъекта,
			СтруктураДанныхОшибки.ЭлементФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ФЛК

#Область ДанныеДокумента

Функция ВыгрузкаДанныеВыпуск(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Номер");
	Реквизиты.Добавить("Дата");
	Реквизиты.Добавить("ВидПеревозки");
	Реквизиты.Добавить("ВидТранспортногоСообщения");
	Реквизиты.Добавить("ДокументОснование_Идентификатор");
	Реквизиты.Добавить("ДокументОснование_ОбъектМетаданных");
	Реквизиты.Добавить("Комментарий");
	Реквизиты.Добавить("МестоОтправления");
	Реквизиты.Добавить("Направление");
	Реквизиты.Добавить("НомерСбис");
	Реквизиты.Добавить("Оформитель");
	Реквизиты.Добавить("ПризнакНачалаРейса");
	Реквизиты.Добавить("ПослерейсовыйМедосмотрТребуется");
	Реквизиты.Добавить("ВидКоммерческойПеревозки");
	Реквизиты.Добавить("ДатаНачалаИсполнения");
	Реквизиты.Добавить("ДатаОкончанияИсполнения");
	Реквизиты.Добавить("ДоРейса_МедосмотрСторонняяОрганизация");
	Реквизиты.Добавить("ПослеРейса_МедосмотрСторонняяОрганизация");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("ТранспортныеСредства");
	Таблицы.Добавить("Водители");
	Таблицы.Добавить("ОтветственныйМедосмотрВыезд");
	Таблицы.Добавить("ОтветственныйМедосмотрЗаезд");
	Таблицы.Добавить("ОтветственныйТехосмотр");
	Таблицы.Добавить("АдресаПунктовВыгрузки");
	Таблицы.Добавить("ДанныеЮрЛиц");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеПредрейсовыйМедосмотр(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Номер");
	Реквизиты.Добавить("Дата");
	Реквизиты.Добавить("ДоРейса_ДатаВремяМедосмотра");
	Реквизиты.Добавить("ДоРейса_КомментарииМедосмотра");
	Реквизиты.Добавить("ДоРейса_МедосмотрСторонняяОрганизация");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("Водители");
	Таблицы.Добавить("ДанныеЮрЛицМедосмотрВыезд");
	Таблицы.Добавить("ОтветственныйМедосмотрВыезд");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеПредрейсовыйТехосмотр(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Номер");
	Реквизиты.Добавить("Дата");
	Реквизиты.Добавить("ТО_ДатаВремя");
	Реквизиты.Добавить("ТО_ДатаВремяВыпускаВРейс");
	Реквизиты.Добавить("ТО_Комментарий");
	Реквизиты.Добавить("ТО_НеРазрешенВыпускПосле");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("ТранспортныеСредства");
	Таблицы.Добавить("ОтветственныйТехосмотр");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеВыпускающий(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Номер");
	Реквизиты.Добавить("Дата");
	Реквизиты.Добавить("Выезд_ДатаВремя");
	Реквизиты.Добавить("Выезд_Одометр");
	Реквизиты.Добавить("Выезд_ОдометрКомментарии");
	Реквизиты.Добавить("ПризнакНачалаРейса");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("ОтветственныйОдометрВыезд");
	Таблицы.Добавить("ОтветственныйОдометрЗаезд");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеПринимающий(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Номер");
	Реквизиты.Добавить("Дата");
	Реквизиты.Добавить("Заезд_ДатаВремя");
	Реквизиты.Добавить("Заезд_Одометр");
	Реквизиты.Добавить("Заезд_ОдометрКомментарии");
	Реквизиты.Добавить("ПризнакНачалаРейса");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("ОтветственныйОдометрЗаезд");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеПослерейсовыйМедосмотр(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Номер");
	Реквизиты.Добавить("Дата");
	Реквизиты.Добавить("ПослеРейса_ДатаВремяМедосмотра");
	Реквизиты.Добавить("ПослеРейса_КомментарииМедосмотра");
	Реквизиты.Добавить("ПослерейсовыйМедосмотрТребуется");
	Реквизиты.Добавить("ПослеРейса_МедосмотрСторонняяОрганизация");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("Водители");
	Таблицы.Добавить("ДанныеЮрЛицМедосмотрЗаезд");
	Таблицы.Добавить("ОтветственныйМедосмотрЗаезд");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы)
	
	РезультатФункции = Новый Структура;
	
	// Ссылка всегда должна быть
	Реквизиты.Добавить("Ссылка");
	
	ТекстЗапросаРеквизитов = ТекстЗапросаРеквизитов();
	
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитыИзБД(
		РезультатФункции, СсылкаНаДокумент, Реквизиты, ТекстЗапросаРеквизитов);
	
	ДобавитьТаблицыИзБД(РезультатФункции, СсылкаНаДокумент, Таблицы);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ТекстЗапросаРеквизитов()
	
	Возврат "ВЫБРАТЬ
		|	Saby_ПутевойЛист.Ссылка КАК Ссылка,
		|	Saby_ПутевойЛист.Номер КАК Номер,
		|	Saby_ПутевойЛист.Дата КАК Дата,
		|	Saby_ПутевойЛист.ВидПеревозки КАК ВидПеревозки,
		|	Saby_ПутевойЛист.ВидТранспортногоСообщения КАК ВидТранспортногоСообщения,
		|	Saby_ПутевойЛист.Выезд_ДатаВремя КАК Выезд_ДатаВремя,
		|	Saby_ПутевойЛист.Выезд_Одометр КАК Выезд_Одометр,
		|	Saby_ПутевойЛист.Выезд_ОдометрКомментарии КАК Выезд_ОдометрКомментарии,
		|	Saby_ПутевойЛист.ДокументОснование_Идентификатор КАК ДокументОснование_Идентификатор,
		|	Saby_ПутевойЛист.ДокументОснование_ОбъектМетаданных КАК ДокументОснование_ОбъектМетаданных,
		|	Saby_ПутевойЛист.ДоРейса_ДатаВремяМедосмотра КАК ДоРейса_ДатаВремяМедосмотра,
		|	Saby_ПутевойЛист.ДоРейса_КомментарииМедосмотра КАК ДоРейса_КомментарииМедосмотра,
		|	Saby_ПутевойЛист.Заезд_ДатаВремя КАК Заезд_ДатаВремя,
		|	Saby_ПутевойЛист.Заезд_Одометр КАК Заезд_Одометр,
		|	Saby_ПутевойЛист.Заезд_ОдометрКомментарии КАК Заезд_ОдометрКомментарии,
		|	Saby_ПутевойЛист.Комментарий КАК Комментарий,
		|	Saby_ПутевойЛист.МестоОтправления КАК МестоОтправления,
		|	Saby_ПутевойЛист.Направление КАК Направление,
		|	Saby_ПутевойЛист.НомерСбис КАК НомерСбис,
		|	Saby_ПутевойЛист.Организация КАК Оформитель,
		|	Saby_ПутевойЛист.ПослеРейса_ДатаВремяМедосмотра КАК ПослеРейса_ДатаВремяМедосмотра,
		|	Saby_ПутевойЛист.ПослеРейса_КомментарииМедосмотра КАК ПослеРейса_КомментарииМедосмотра,
		|	Saby_ПутевойЛист.ПризнакНачалаРейса КАК ПризнакНачалаРейса,
		|	Saby_ПутевойЛист.ТО_ДатаВремя КАК ТО_ДатаВремя,
		|	Saby_ПутевойЛист.ТО_ДатаВремяВыпускаВРейс КАК ТО_ДатаВремяВыпускаВРейс,
		|	Saby_ПутевойЛист.ТО_Комментарий КАК ТО_Комментарий,
		|	Saby_ПутевойЛист.ТО_НеРазрешенВыпускПосле КАК ТО_НеРазрешенВыпускПосле,
		|	Saby_ПутевойЛист.ПослерейсовыйМедосмотрТребуется КАК ПослерейсовыйМедосмотрТребуется,
		|	Saby_ПутевойЛист.ВидКоммерческойПеревозки КАК ВидКоммерческойПеревозки,
		|	Saby_ПутевойЛист.ДатаНачалаИсполнения КАК ДатаНачалаИсполнения,
		|	Saby_ПутевойЛист.ДатаОкончанияИсполнения КАК ДатаОкончанияИсполнения,
		|	Saby_ПутевойЛист.ДоРейса_МедосмотрСторонняяОрганизация КАК ДоРейса_МедосмотрСторонняяОрганизация,
		|	Saby_ПутевойЛист.ПослеРейса_МедосмотрСторонняяОрганизация КАК ПослеРейса_МедосмотрСторонняяОрганизация
		|ИЗ
		|	Документ.Saby_ПутевойЛист КАК Saby_ПутевойЛист
		|ГДЕ
		|	Saby_ПутевойЛист.Ссылка = &Ссылка";
	
КонецФункции

Процедура ДобавитьТаблицыИзБД(СтруктураДанных, СсылкаНаДокумент, Таблицы)
	
	МассивЗапросов = Новый Массив;
	
	УниверсальныйШаблонЗапроса =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Документ.Saby_ПутевойЛист.%1 КАК ТЧПутевогоЛиста
	|ГДЕ
	|	ТЧПутевогоЛиста.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ЗапросДанных = Новый Запрос;
	
	Для Каждого ИмяТаблицы Из Таблицы Цикл
		
		Если ДобавленаТаблицаОтветственных(МассивЗапросов, ИмяТаблицы, ЗапросДанных)
			Или ДобавленаТаблицаЮрЛиц(МассивЗапросов, ИмяТаблицы, ЗапросДанных) Тогда
			Продолжить;
		КонецЕсли;
			
		ТекстЗапроса = СтрШаблон(УниверсальныйШаблонЗапроса, ИмяТаблицы);
		
		МассивЗапросов.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	РазделительЗапросов = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ЗапросДанных.Текст = СтрСоединить(МассивЗапросов, РазделительЗапросов);
	ЗапросДанных.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Результат = ЗапросДанных.ВыполнитьПакет();
	Индекс = 0;
	Пока Индекс < Таблицы.Количество() Цикл
		СтруктураДанных.Вставить(Таблицы[Индекс], Результат[Индекс].Выгрузить());
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ДобавитьТаблицуКонтактнойИнформацииОформителя(СтруктураДанных);
	
КонецПроцедуры

Процедура ДобавитьТаблицуКонтактнойИнформацииОформителя(СтруктураДанных)
	
	Если Не СтруктураДанных.Реквизиты.Свойство("Оформитель") Тогда
		Возврат;
	КонецЕсли;
	
	МассивЮрЛиц = Новый Массив;
	МассивЮрЛиц.Добавить(СтруктураДанных.Реквизиты.Оформитель);
	
	СтруктураДанных.Вставить(
		"КонтактныеДанные",
		Saby_ТНОбщегоНазначенияСервер.КонтактнаяИнформацияИзБазы(МассивЮрЛиц));
		
	РольОформитель = Перечисления.Saby_РолиКонтрагентов.Оформитель;
		
	Для Каждого СтруктураКИ Из СтруктураДанных.КонтактныеДанные Цикл
		СтруктураКИ.Вставить("Роль", РольОформитель);
	КонецЦикла;
		
КонецПроцедуры

Функция ДобавленаТаблицаОтветственных(МассивЗапросов, ИмяТаблицы, ЗапросДанных)
	
	РезультатФункции = Ложь;
	
	ШаблонЗапросаОтветственныхЛиц =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Документ.Saby_ПутевойЛист.ОтветственныеЛица КАК Saby_ПутевойЛистОтветственныеЛица
	|ГДЕ
	|	Saby_ПутевойЛистОтветственныеЛица.Ссылка = &Ссылка
	|	И Saby_ПутевойЛистОтветственныеЛица.Роль = &Роль
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если ИмяТаблицы = "Водители" Тогда
		ИмяПараметра = "РольВодитель";
		Роль = Перечисления.Saby_РолиОтветственных.Водитель;
	ИначеЕсли ИмяТаблицы = "ОтветственныйМедосмотрВыезд" Тогда
		ИмяПараметра = "РольМедосмотрВыезд";
		Роль = Перечисления.Saby_РолиОтветственных.МедосмотрВыезд;
	ИначеЕсли ИмяТаблицы = "ОтветственныйТехосмотр" Тогда
		ИмяПараметра = "РольТехосмотр";
		Роль = Перечисления.Saby_РолиОтветственных.Техосмотр;
	ИначеЕсли ИмяТаблицы = "ОтветственныйОдометрВыезд" Тогда
		ИмяПараметра = "РольОдометрВыезд";
		Роль = Перечисления.Saby_РолиОтветственных.ОдометрВыезд;
	ИначеЕсли ИмяТаблицы = "ОтветственныйОдометрЗаезд" Тогда
		ИмяПараметра = "РольОдометрЗаезд";
		Роль = Перечисления.Saby_РолиОтветственных.ОдометрЗаезд;
	ИначеЕсли ИмяТаблицы = "ОтветственныйМедосмотрЗаезд" Тогда
		ИмяПараметра = "РольМедосмотрЗаезд";
		Роль = Перечисления.Saby_РолиОтветственных.МедосмотрЗаезд;
	Иначе
		ИмяПараметра = "";
		Роль = Неопределено;
	КонецЕсли;
	
	Если Роль <> Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ШаблонЗапросаОтветственныхЛиц, "&Роль", "&" + ИмяПараметра);
		
		ЗапросДанных.УстановитьПараметр(ИмяПараметра, Роль);
		
		МассивЗапросов.Добавить(ТекстЗапроса);
		
		РезультатФункции = Истина;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДобавленаТаблицаЮрЛиц(МассивЗапросов, ИмяТаблицы, ЗапросДанных)
	
	РезультатФункции = Ложь;
	
	ШаблонЗапросаДанныхЮрЛиц =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Документ.Saby_ПутевойЛист.ДанныеЮрЛиц КАК Saby_ПутевойЛистДанныеЮрЛиц
	|ГДЕ
	|	Saby_ПутевойЛистДанныеЮрЛиц.Ссылка = &Ссылка
	|	И Saby_ПутевойЛистДанныеЮрЛиц.Роль = &Роль
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если ИмяТаблицы = "ДанныеЮрЛицМедосмотрВыезд" Тогда
		ИмяПараметра = "РольЮрМедосмотрВыезд";
		Роль = Перечисления.Saby_РолиКонтрагентов.МедосмотрВыезд;
	ИначеЕсли ИмяТаблицы = "ДанныеЮрЛицМедосмотрЗаезд" Тогда
		ИмяПараметра = "РольЮрМедосмотрЗаезд";
		Роль = Перечисления.Saby_РолиКонтрагентов.МедосмотрЗаезд;
	Иначе
		ИмяПараметра = "";
		Роль = Неопределено;
	КонецЕсли;
	
	Если Роль <> Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ШаблонЗапросаДанныхЮрЛиц, "&Роль", "&" + ИмяПараметра);
		
		ЗапросДанных.УстановитьПараметр(ИмяПараметра, Роль);
		
		МассивЗапросов.Добавить(ТекстЗапроса);
		
		РезультатФункции = Истина;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ДанныеДокумента

#Область Выгрузка

Процедура ВложениеНаВыгрузку(ТекущийЭтап, ДанныеТитула, СтруктураТитула)
	
	Если Перечисления.Saby_ТипТитулаЭПЛ.ЭтоПервыйТитул(ТекущийЭтап) Тогда
		ТитулВыпуск(ДанныеТитула, СтруктураТитула);
	ИначеЕсли ТекущийЭтап = Перечисления.Saby_ТипТитулаЭПЛ.ПредрейсовыйМедосмотр Тогда
		ТитулПредрейсовыйМедосмотр(ДанныеТитула, СтруктураТитула);
	ИначеЕсли ТекущийЭтап = Перечисления.Saby_ТипТитулаЭПЛ.ПредрейсовыйТехосмотр Тогда
		ТитулПредрейсовыйТехосмотр(ДанныеТитула, СтруктураТитула);
	ИначеЕсли ТекущийЭтап = Перечисления.Saby_ТипТитулаЭПЛ.Выпускающий Тогда
		ТитулВыпускающий(ДанныеТитула, СтруктураТитула);
	ИначеЕсли ТекущийЭтап = Перечисления.Saby_ТипТитулаЭПЛ.Принимающий Тогда
		ТитулПринимающий(ДанныеТитула, СтруктураТитула);
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ТитулВыпуск(ДанныеДокумента, СтруктураТитула)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	// Отдельно вынесены общие данные документа
	Дата               = Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(РеквизитыОбъекта.Дата, Истина);
	ПризнакНачалаРейса = Перечисления.Saby_ПризнакНачалаРейса.КодПоЗначению(РеквизитыОбъекта.ПризнакНачалаРейса);
	ВидПеревозки       = Перечисления.Saby_ВидПеревозки.КодПоЗначению(РеквизитыОбъекта.ВидПеревозки);
	
	ПослерейсовыйМедосмотрТребуется = ?(РеквизитыОбъекта.ПослерейсовыйМедосмотрТребуется, "1", "2");
	
	ВидКоммерческойПеревозки = Перечисления.Saby_ВидКоммерческойПеревозки.КодПоЗначению(
		РеквизитыОбъекта.ВидКоммерческойПеревозки);
		
	ВидТранспортногоСообщения = Перечисления.Saby_ВидСообщенияЭПЛ.КодПоЗначению(
		РеквизитыОбъекта.ВидТранспортногоСообщения);
		
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("Номер",                    РеквизитыОбъекта.Номер);
	СтруктураДокумента.Вставить("Дата",                     Дата);
	СтруктураДокумента.Вставить("ПризнакНачалаРейса",       ПризнакНачалаРейса);
	СтруктураДокумента.Вставить("ПослерейсовыйМедосмотр",   ПослерейсовыйМедосмотрТребуется);
	СтруктураДокумента.Вставить("ВидПеревозки",             ВидПеревозки);
	СтруктураДокумента.Вставить("ВидКоммерческойПеревозки", ВидКоммерческойПеревозки);
	СтруктураДокумента.Вставить("ВидСообщения",             ВидТранспортногоСообщения);
	
	СтруктураДокумента.Вставить("Оформитель", Saby_ТНВыгрузкаСервер.ДанныеЮрЛица("Оформитель", ДанныеДокумента, Истина));
	
	ДобавитьСрокПутевогоЛиста(СтруктураДокумента, РеквизитыОбъекта);
	
	СтруктураТитула.Вставить("Документ", СтруктураДокумента);
	
	СтруктураТитула.Вставить("Маршрут", ДанныеУзлаМаршрут(ДанныеДокумента));
	
	СтруктураТитула.Вставить(
		"ТранспортноеСредство",
		Saby_ТНВыгрузкаСервер.ТранспортНаВыгрузку(ДанныеДокумента.ТранспортныеСредства, , Истина));
		
	СтруктураТитула.ТранспортноеСредство.Вставить(
		"Прицеп", Saby_ТНВыгрузкаСервер.ПрицепыНаВыгрузку(ДанныеДокумента.ТранспортныеСредства, Истина));
	
	СтруктураТитула.Вставить("Водители", Saby_ТНВыгрузкаСервер.ВодителиНаВыгрузку(ДанныеДокумента.Водители, Новый Массив));
	
	ДобавитьМедосмотрДляОнлайна(СтруктураТитула, ДанныеДокумента, Истина);
	
	ДобавитьТехосмотрДляОнлайна(СтруктураТитула, ДанныеДокумента);
	
	Если РеквизитыОбъекта.ПослерейсовыйМедосмотрТребуется Тогда
		ДобавитьМедосмотрДляОнлайна(СтруктураТитула, ДанныеДокумента, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТитулПредрейсовыйМедосмотр(ДанныеДокумента, СтруктураТитула)
	
	ДобавитьМедосмотрДляОнлайна(СтруктураТитула, ДанныеДокумента, Истина);
	
	СтруктураТитула.Вставить("Водители", Saby_ТНВыгрузкаСервер.ВодителиНаВыгрузку(ДанныеДокумента.Водители, Новый Массив));
	
КонецПроцедуры

Процедура ТитулПредрейсовыйТехосмотр(ДанныеДокумента, СтруктураТитула)
	
	ДобавитьТехосмотрДляОнлайна(СтруктураТитула, ДанныеДокумента);
	
	СтруктураТитула.Вставить(
		"ТранспортноеСредство",
		Saby_ТНВыгрузкаСервер.ТранспортНаВыгрузку(ДанныеДокумента.ТранспортныеСредства, , Истина));
		
	СтруктураТитула.ТранспортноеСредство.Вставить(
		"Прицеп", Saby_ТНВыгрузкаСервер.ПрицепыНаВыгрузку(ДанныеДокумента.ТранспортныеСредства, Истина));
	
КонецПроцедуры

Процедура ТитулВыпускающий(ДанныеДокумента, СтруктураТитула)
	
	Выпуск = Новый Структура;
	
	ОтветственныйОдометрВыезд = ДанныеДокумента.ОтветственныйОдометрВыезд[0];
	
	Ответственный = Новый Структура;
	Ответственный.Вставить("Фамилия",   ОтветственныйОдометрВыезд.Фамилия);
	Ответственный.Вставить("Имя",       ОтветственныйОдометрВыезд.Имя);
	Ответственный.Вставить("Отчество",  ОтветственныйОдометрВыезд.Отчество);
	Ответственный.Вставить("Должность", ОтветственныйОдометрВыезд.Должность);
	
	Выпуск.Вставить("Ответственный", Ответственный);
	
	ПризнакНачалаРейса = ДанныеДокумента.Реквизиты.ПризнакНачалаРейса;
	
	Выезд = Новый Структура;
	Выезд.Вставить("Одометр", Формат(ДанныеДокумента.Реквизиты.Выезд_Одометр, "ЧЦ=7; ЧДЦ=0; ЧГ="));
	Выезд.Вставить(
		"ДатаВремя",
		Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(ДанныеДокумента.Реквизиты.Выезд_ДатаВремя));
		
	Если ПризнакНачалаРейса = Перечисления.Saby_ПризнакНачалаРейса.ВыездСПарковки Тогда
		Выпуск.Вставить("Выезд", Выезд);
	Иначе
		Выпуск.Вставить("ПриемТС", Выезд);
	КонецЕсли;
	
	СтруктураТитула.Вставить("Выпуск", Выпуск);
	
	Приемка = Новый Структура;
	
	ОтветственныйОдометрЗаезд = ДанныеДокумента.ОтветственныйОдометрЗаезд[0];
	
	Ответственный = Новый Структура;
	Ответственный.Вставить("Фамилия",   ОтветственныйОдометрЗаезд.Фамилия);
	Ответственный.Вставить("Имя",       ОтветственныйОдометрЗаезд.Имя);
	Ответственный.Вставить("Отчество",  ОтветственныйОдометрЗаезд.Отчество);
	Ответственный.Вставить("Должность", ОтветственныйОдометрЗаезд.Должность);
	
	Приемка.Вставить("Ответственный", Ответственный);
	
	СтруктураТитула.Вставить("Приемка", Приемка);
	
	ПризнакНачалаРейса = Перечисления.Saby_ПризнакНачалаРейса.КодПоЗначению(ПризнакНачалаРейса);
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("ПризнакНачалаРейса", ПризнакНачалаРейса);
	СтруктураТитула.Вставить("Документ", СтруктураДокумента);
	
КонецПроцедуры

Процедура ТитулПринимающий(ДанныеДокумента, СтруктураТитула)
	
	Приемка = Новый Структура;
	
	ПризнакНачалаРейса = ДанныеДокумента.Реквизиты.ПризнакНачалаРейса;
	
	Заезд = Новый Структура;
	Заезд.Вставить("Одометр", Формат(ДанныеДокумента.Реквизиты.Заезд_Одометр, "ЧЦ=7; ЧДЦ=0; ЧГ="));
	Заезд.Вставить(
		"ДатаВремя",
		Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(ДанныеДокумента.Реквизиты.Заезд_ДатаВремя));
		
	Если ПризнакНачалаРейса = Перечисления.Saby_ПризнакНачалаРейса.ВыездСПарковки Тогда
		Приемка.Вставить("Заезд", Заезд);
	Иначе
		Приемка.Вставить("СдачаТС", Заезд);
	КонецЕсли;
	
	ОтветственныйОдометрЗаезд = ДанныеДокумента.ОтветственныйОдометрЗаезд[0];
	
	Ответственный = Новый Структура;
	Ответственный.Вставить("Фамилия",   ОтветственныйОдометрЗаезд.Фамилия);
	Ответственный.Вставить("Имя",       ОтветственныйОдометрЗаезд.Имя);
	Ответственный.Вставить("Отчество",  ОтветственныйОдометрЗаезд.Отчество);
	Ответственный.Вставить("Должность", ОтветственныйОдометрЗаезд.Должность);
	
	Приемка.Вставить("Ответственный", Ответственный);
	
	СтруктураТитула.Вставить("Приемка", Приемка);
	
	ПризнакНачалаРейса = Перечисления.Saby_ПризнакНачалаРейса.КодПоЗначению(ПризнакНачалаРейса);
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("ПризнакОкончанияРейса", ПризнакНачалаРейса);
	СтруктураТитула.Вставить("Документ", СтруктураДокумента);
	
КонецПроцедуры

Функция ДанныеУзлаМаршрут(ДанныеДокумента)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Отправление",      АдресМаршрута(ДанныеДокумента.Реквизиты.МестоОтправления));
	РезультатФункции.Вставить("Пункт",            Новый Массив);
	РезультатФункции.Вставить("Грузоотправитель", Новый Массив);
	
	Для Каждого ДанныеАдресаМаршрута Из ДанныеДокумента.АдресаПунктовВыгрузки Цикл
		СтруктураАдреса = Saby_ТНОбщегоНазначенияСервер.ДесериализоватьЗначение(ДанныеАдресаМаршрута.Структура);
		Если ЗначениеЗаполнено(СтруктураАдреса) Тогда
			РезультатФункции.Пункт.Добавить(АдресМаршрута(ДанныеАдресаМаршрута.Значение, СтруктураАдреса.КодСтраны));
		Иначе
			РезультатФункции.Пункт.Добавить(АдресМаршрута(ДанныеАдресаМаршрута.Значение));
		КонецЕсли;
	КонецЦикла;
	
	РольКонтрагента = Перечисления.Saby_РолиКонтрагентов.Отправитель;
	
	Для Каждого СтрокаДанныхЮрЛиц Из ДанныеДокумента.ДанныеЮрЛиц Цикл
		Если СтрокаДанныхЮрЛиц.Роль <> РольКонтрагента Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанных = Saby_ТНВыгрузкаСервер.ОбщийШаблонЮрЛица();
		ДопПараметры = Saby_ТНВыгрузкаСервер.ДопПараметрыЗаполненияОсновныхДанных(Ложь, Неопределено);
		Saby_ТНВыгрузкаСервер.ОсновныеДанныеЮрЛицаИзДокумента(СтрокаДанныхЮрЛиц, СтруктураДанных, ДопПараметры);
		
		РезультатФункции.Грузоотправитель.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция АдресМаршрута(АдресТекст, КодСтраны = "643")
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("КодСтраны",  КодСтраны);
	РезультатФункции.Вставить("АдресТекст", АдресТекст);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДобавитьСрокПутевогоЛиста(СтруктураДокумента, РеквизитыОбъекта)
	
	Если НачалоДня(РеквизитыОбъекта.ДатаНачалаИсполнения) = НачалоДня(РеквизитыОбъекта.ДатаОкончанияИсполнения) Тогда
		СтруктураДокумента.Вставить("Длительность", "1");
		СтруктураДокумента.Вставить(
			"ДатаИсполнения",
			Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(РеквизитыОбъекта.ДатаНачалаИсполнения, Истина));
	Иначе
		СтруктураДокумента.Вставить("Длительность", "2");
		СтруктураДокумента.Вставить(
			"ДатаНачалаИсполнения",
			Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(РеквизитыОбъекта.ДатаНачалаИсполнения, Истина));
		СтруктураДокумента.Вставить(
			"ДатаКонцаИсполнения",
			Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(РеквизитыОбъекта.ДатаОкончанияИсполнения, Истина));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьМедосмотрДляОнлайна(СтруктураДанных, ДанныеДокумента, ЭтоПредрейсовыйМедосмотр)
	
	Если ЭтоПредрейсовыйМедосмотр Тогда
		
		РольЮрЛица               = "МедосмотрВыезд";
		ОтветственныйЗаМедосмотр = ДанныеДокумента.ОтветственныйМедосмотрВыезд;
		ИмяУзлаМедосмотра        = "Медосмотр";
		ШтатныйСотрудник         = Не ДанныеДокумента.Реквизиты.ДоРейса_МедосмотрСторонняяОрганизация;
		
	Иначе
		
		РольЮрЛица               = "МедосмотрЗаезд";
		ОтветственныйЗаМедосмотр = ДанныеДокумента.ОтветственныйМедосмотрЗаезд;
		ИмяУзлаМедосмотра        = "ПостМедосмотр";
		ШтатныйСотрудник         = Не ДанныеДокумента.Реквизиты.ПослеРейса_МедосмотрСторонняяОрганизация;
		
	КонецЕсли;
	
	Если ОтветственныйЗаМедосмотр.Количество() = 0 Тогда
		СтрокаОтветственногоЗаМедосмотр = ОтветственныйЗаМедосмотр.Добавить();
		СтрокаОтветственногоЗаМедосмотр.Серия     = "";
		СтрокаОтветственногоЗаМедосмотр.Номер     = "";
		СтрокаОтветственногоЗаМедосмотр.Фамилия   = "";
		СтрокаОтветственногоЗаМедосмотр.Имя       = "";
		СтрокаОтветственногоЗаМедосмотр.Отчество  = "";
		СтрокаОтветственногоЗаМедосмотр.Должность = "";
	КонецЕсли;
	
	ОтветственныйЗаМедосмотр = ОтветственныйЗаМедосмотр[0];
	
	Медосмотр = Новый Соответствие;
	
	Лицензия = Новый Структура;
	Лицензия.Вставить("Серия", ОтветственныйЗаМедосмотр.Серия);
	Лицензия.Вставить("Номер", ОтветственныйЗаМедосмотр.Номер);
	Лицензия.Вставить(
		"ДатаВыдачи",
		Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(ОтветственныйЗаМедосмотр.ДатаВыдачи, Истина));
	Лицензия.Вставить(
		"Срок",
		Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(ОтветственныйЗаМедосмотр.ДатаОкончанияДействия, Истина));
		
	Ответственный = Новый Структура;
	Ответственный.Вставить("Фамилия",   ОтветственныйЗаМедосмотр.Фамилия);
	Ответственный.Вставить("Имя",       ОтветственныйЗаМедосмотр.Имя);
	Ответственный.Вставить("Отчество",  ОтветственныйЗаМедосмотр.Отчество);
	Ответственный.Вставить("Должность", ОтветственныйЗаМедосмотр.Должность);
		
	Если ШтатныйСотрудник Тогда
		Ответственный.Вставить("Лицензия", Лицензия);
		Медосмотр.Вставить("Ответственный", Ответственный);
	Иначе
		
		РеквизитыОрганизацииМедработника = Saby_ТНВыгрузкаСервер.ДанныеЮрЛица(РольЮрЛица, ДанныеДокумента, Истина);
		Медосмотр.Вставить("Контрагент", Saby_ТНВыгрузкаСервер.РеквизитыНашейОрганизации(РеквизитыОрганизацииМедработника));
		
		Организация = Новый Структура;
		Организация.Вставить("Лицензия",      Лицензия);
		Организация.Вставить("Ответственный", Ответственный);
		Организация.Вставить("Название",      РеквизитыОрганизацииМедработника.Название.Полное);
		Медосмотр.Вставить("Организация", Организация);
		
	КонецЕсли;
	
	Если ДанныеДокумента.Реквизиты.Свойство("ДоРейса_ДатаВремяМедосмотра") Тогда
		ДобавитьРезультатОсмотра(
			Медосмотр,
			ДанныеДокумента.Реквизиты.ДоРейса_ДатаВремяМедосмотра,
			"");
	КонецЕсли;
	
	Если ДанныеДокумента.Реквизиты.Свойство("ПослеРейса_ДатаВремяМедосмотра") Тогда
		ДобавитьРезультатОсмотра(
			Медосмотр,
			ДанныеДокумента.Реквизиты.ПослеРейса_ДатаВремяМедосмотра,
			"");
	КонецЕсли;
	
	СтруктураДанных.Вставить(ИмяУзлаМедосмотра, Медосмотр);
	
КонецПроцедуры

Процедура ДобавитьТехосмотрДляОнлайна(СтруктураДанных, ДанныеДокумента)
	
	Если ДанныеДокумента.ОтветственныйТехосмотр.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтветственныйЗаТехосмотр = ДанныеДокумента.ОтветственныйТехосмотр[0];
	
	Техосмотр = Новый Структура;
	
	Ответственный = Новый Структура;
	Ответственный.Вставить("Фамилия",   ОтветственныйЗаТехосмотр.Фамилия);
	Ответственный.Вставить("Имя",       ОтветственныйЗаТехосмотр.Имя);
	Ответственный.Вставить("Отчество",  ОтветственныйЗаТехосмотр.Отчество);
	Ответственный.Вставить("Должность", ОтветственныйЗаТехосмотр.Должность);
	Техосмотр.Вставить("Ответственный", Ответственный);
	
	Если ДанныеДокумента.Реквизиты.Свойство("ТО_ДатаВремя") Тогда
		ДобавитьРезультатОсмотра(
			Техосмотр,
			ДанныеДокумента.Реквизиты.ТО_ДатаВремя,
			ДанныеДокумента.Реквизиты.ТО_Комментарий);
	КонецЕсли;
		
	Если ДанныеДокумента.Реквизиты.Свойство("ТО_НеРазрешенВыпускПосле")
		И Не ДанныеДокумента.Реквизиты.ТО_НеРазрешенВыпускПосле Тогда
		
		Техосмотр.Вставить("ВыпускНаЛинию", Новый Структура);
		Техосмотр.ВыпускНаЛинию.Вставить(
			"ДатаВремя",
			Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(ДанныеДокумента.Реквизиты.ТО_ДатаВремяВыпускаВРейс));
	КонецЕсли;
	
	СтруктураДанных.Вставить("Техосмотр", Техосмотр);
	
КонецПроцедуры

Процедура ДобавитьРезультатОсмотра(СтруктураДанных, ДатаВремя, Отметка)
	
	Если Не ЗначениеЗаполнено(ДатаВремя) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Отметка",   Отметка);
	СтруктураРезультата.Вставить("ДатаВремя", Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(ДатаВремя));
	
	СтруктураДанных.Вставить("Результат", СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти // Выгрузка

#Область Загрузка

Процедура ЗагрузкаТитулаВыпуск(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеВыпуск = ДанныеВыпуск(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ДанныеТитула = ДанныеВыпуск[ДанныеВыпуск.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок, ДанныеТитула.ДляДокумента, Перечисления.Saby_РолиКонтрагентов.Оформитель);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		ЗаполнитьОтветственныхЛиц(
			ОбъектДок, ДанныеТитула.ДляДокумента.Водители, Перечисления.Saby_РолиОтветственных.Водитель);
			
		ЗаполнитьАдресаПунктовВыгрузки(ОбъектДок, ДанныеТитула.ДляДокумента);
		
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеВыпуск, ОбъектДок);
	
КонецПроцедуры

Процедура ЗагрузкаТитулаПредрейсовыйМедосмотр(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПредрейсовыйМедосмотр = ДанныеПредрейсовыйМедосмотр(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ДанныеТитула = ДанныеПредрейсовыйМедосмотр[ДанныеПредрейсовыйМедосмотр.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок, ДанныеТитула.ДляДокумента, Перечисления.Saby_РолиКонтрагентов.МедосмотрВыезд);
		
		ЗаполнитьОтветственныхЛиц(
			ОбъектДок, ДанныеТитула.ДляДокумента.ОтветственныеЗаМедосмотр, Перечисления.Saby_РолиОтветственных.МедосмотрВыезд);
		
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеПредрейсовыйМедосмотр, ОбъектДок);
	
КонецПроцедуры

Процедура ЗагрузкаТитулаПредрейсовыйТехосмотр(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПредрейсовыйТехосмотр = ДанныеПредрейсовыйТехосмотр(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ДанныеТитула = ДанныеПредрейсовыйТехосмотр[ДанныеПредрейсовыйТехосмотр.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок, ДанныеТитула.ДляДокумента, Перечисления.Saby_РолиКонтрагентов.Оформитель);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		ЗаполнитьОтветственныхЛиц(
			ОбъектДок, ДанныеТитула.ДляДокумента.ОтветственныеЗаТехосмотр, Перечисления.Saby_РолиОтветственных.Техосмотр);
		
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеПредрейсовыйТехосмотр, ОбъектДок);
	
КонецПроцедуры

Процедура ЗагрузкаТитулаВыпускающий(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеВыпускающий = ДанныеВыпускающий(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ДанныеТитула = ДанныеВыпускающий[ДанныеВыпускающий.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		ЗаполнитьОтветственныхЛиц(
			ОбъектДок, ДанныеТитула.ДляДокумента.ОтветственныеЗаВыпуск, Перечисления.Saby_РолиОтветственных.ОдометрВыезд);
		
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеВыпускающий, ОбъектДок);
	
КонецПроцедуры

Процедура ЗагрузкаТитулаПринимающий(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПринимающий = ДанныеПринимающий(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ДанныеТитула = ДанныеПринимающий[ДанныеПринимающий.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		ЗаполнитьОтветственныхЛиц(
			ОбъектДок, ДанныеТитула.ДляДокумента.ОтветственныеЗаПрием, Перечисления.Saby_РолиОтветственных.ОдометрЗаезд);
		
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеПринимающий, ОбъектДок);
	
КонецПроцедуры

#Область ДанныеТитуловДляЗагрузки

Функция ДанныеВыпуск(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ДляДокумента.Вставить("ДанныеЮрЛиц", Новый Массив);
		
		Документ = Вложение["Документ"];
		
		ДляДокумента.Вставить("НомерСБИС", Документ["Номер"]);
		
		ДляДокумента.Вставить(
			"ПризнакНачалаРейса",
			Перечисления.Saby_ПризнакНачалаРейса.ЗначениеПоКоду(Документ["ПризнакНачалаРейса"]));
			
		ДляДокумента.Вставить("ПослерейсовыйМедосмотрТребуется", Документ["ПослерейсовыйМедосмотр"] = "1");
		
		ДляДокумента.Вставить(
		    "ВидПеревозки",
			Перечисления.Saby_ВидПеревозки.ЗначениеПоКоду(Документ["ВидПеревозки"]));
		
		ДляДокумента.Вставить(
			"ВидКоммерческойПеревозки",
			Перечисления.Saby_ВидКоммерческойПеревозки.ЗначениеПоКоду(Документ["ВидКоммерческойПеревозки"]));
			
		ДляДокумента.Вставить(
			"ВидТранспортногоСообщения",
			Перечисления.Saby_ВидСообщенияЭПЛ.ЗначениеПоКоду(Документ["ВидСообщения"]));
		
		ЗагрузитьДанныеСроковПутевогоЛиста(ДляДокумента, Документ);
		
		ЗагрузитьДанныеОрганизации(ДляДокумента, Документ["Оформитель"], Перечисления.Saby_РолиКонтрагентов.Оформитель);
		
		ЗагрузитьДанныеМаршрутов(ДляДокумента, Вложение["Маршрут"]);
		
		Saby_ТНЗагрузкаСервер.ДанныеТСПрицеповСпецРазрешений(ДляДокумента, Вложение["ТранспортноеСредство"]);
		
		ДляДокумента.Вставить("Водители", Saby_ТНЗагрузкаСервер.ДанныеВодителей(Вложение["Водители"], ДопПараметры));
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = Saby_ТНЗагрузкаСервер.ДанныеДляРегистраТитулов(
			Вложение, ОбъектДок.Ссылка, Титул, ДопПараметры.ИмяМетаданных, Истина);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеПредрейсовыйМедосмотр(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ДляДокумента.Вставить("ДанныеЮрЛиц", Новый Массив);
		
		ЗагрузитьМедосмотр(ДляДокумента, Вложение["Медосмотр"], Истина);
		
		// ВРЕМЕННО!!! Чтобы потестить, пока онлайн не переделает
		Водители = Вложение["Водители"];
		Водители["Водитель"] = Saby_ТНОбщегоНазначенияКлиентСервер.ЗначениеВМассив(
			Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Водители.Водитель"));
		
		ДляДокумента.Вставить("Водители", Saby_ТНЗагрузкаСервер.ДанныеВодителей(Водители, ДопПараметры));
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = Saby_ТНЗагрузкаСервер.ДанныеДляРегистраТитулов(
			Вложение, ОбъектДок.Ссылка, Титул, ДопПараметры.ИмяМетаданных, Истина);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеПредрейсовыйТехосмотр(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ДляДокумента.Вставить("ДанныеЮрЛиц", Новый Массив);
		
		ЗагрузитьДанныеОрганизации(
			ДляДокумента,
			Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Документ.Оформитель"),
			Перечисления.Saby_РолиКонтрагентов.Оформитель);
		
		ЗагрузитьТехосмотр(ДляДокумента, Вложение["Техосмотр"]);
		
		Saby_ТНЗагрузкаСервер.ДанныеТСПрицеповСпецРазрешений(ДляДокумента, Вложение["ТранспортноеСредство"]);
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = Saby_ТНЗагрузкаСервер.ДанныеДляРегистраТитулов(
			Вложение, ОбъектДок.Ссылка, Титул, ДопПараметры.ИмяМетаданных, Истина);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеВыпускающий(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ПризнакНачалаРейса = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Документ.ПризнакНачалаРейса");
		ДляДокумента.Вставить(
			"ПризнакНачалаРейса",
			Перечисления.Saby_ПризнакНачалаРейса.ЗначениеПоКоду(ПризнакНачалаРейса));
			
		ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Выпуск.Выезд.ДатаВремя");
		ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаВремя);
		
		Одометр = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Выпуск.Выезд.Одометр");
		Одометр = ?(ЗначениеЗаполнено(Одометр), Число(Одометр), 0);
			
		ДляДокумента.Вставить("Выезд_ДатаВремя", ДатаВремя);
		ДляДокумента.Вставить("Выезд_Одометр",   Одометр);
		
		Ответственный = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Выпуск.Ответственный");
		
		ОтветственныеЗаВыпуск = Новый Массив;
		СтруктураВыпускающего = Новый Структура;
		ЗагрузитьОтветственного(СтруктураВыпускающего, Ответственный);
		СтруктураВыпускающего.Вставить("Роль", Перечисления.Saby_РолиОтветственных.ОдометрВыезд);
		ОтветственныеЗаВыпуск.Добавить(СтруктураВыпускающего);
		ДляДокумента.Вставить("ОтветственныеЗаВыпуск", ОтветственныеЗаВыпуск);
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = Saby_ТНЗагрузкаСервер.ДанныеДляРегистраТитулов(
			Вложение, ОбъектДок.Ссылка, Титул, ДопПараметры.ИмяМетаданных, Истина);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеПринимающий(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Приемка.Заезд.ДатаВремя");
		ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаВремя);
		
		Одометр = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Приемка.Заезд.Одометр");
		Одометр = ?(ЗначениеЗаполнено(Одометр), Число(Одометр), 0);
			
		ДляДокумента.Вставить("Заезд_ДатаВремя", ДатаВремя);
		ДляДокумента.Вставить("Заезд_Одометр",   Одометр);
		
		Ответственный = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Приемка.Ответственный");
		
		ОтветственныеЗаПрием = Новый Массив;
		СтруктураПринимающего = Новый Структура;
		ЗагрузитьОтветственного(СтруктураПринимающего, Ответственный);
		СтруктураПринимающего.Вставить("Роль", Перечисления.Saby_РолиОтветственных.ОдометрЗаезд);
		ОтветственныеЗаПрием.Добавить(СтруктураПринимающего);
		ДляДокумента.Вставить("ОтветственныеЗаПрием", ОтветственныеЗаПрием);
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = Saby_ТНЗагрузкаСервер.ДанныеДляРегистраТитулов(
			Вложение, ОбъектДок.Ссылка, Титул, ДопПараметры.ИмяМетаданных, Истина);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ДанныеТитуловДляЗагрузки

Процедура ЗаполнитьОтветственныхЛиц(ОбъектДок, ДанныеОтветственныхЛиц, РольОтветственного)
	
	Если ЗначениеЗаполнено(ДанныеОтветственныхЛиц) Тогда
		ОтборОтветственных = Новый Структура;
		ОтборОтветственных.Вставить("Роль", РольОтветственного);
		МассивСтрокДляУдаления = ОбъектДок.ОтветственныеЛица.НайтиСтроки(ОтборОтветственных);
		Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
			ОбъектДок.ОтветственныеЛица.Удалить(СтрокаДляУдаления);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтруктураОтветственного Из ДанныеОтветственныхЛиц Цикл 
		
		СтрокаОтветственного = ОбъектДок.ОтветственныеЛица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОтветственного, СтруктураОтветственного);
		СтрокаОтветственного.Роль = РольОтветственного;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьАдресаПунктовВыгрузки(ОбъектДок, ДляДокумента)
	
	Если Не ДляДокумента.Свойство("АдресаПунктовВыгрузки") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДляДокумента.АдресаПунктовВыгрузки.Количество() > 0 Тогда
		ОбъектДок.АдресаПунктовВыгрузки.Очистить();
	КонецЕсли;
	
	Для Каждого СтрокаПункта Из ДляДокумента.АдресаПунктовВыгрузки Цикл
		НоваяСтрокаПункта = ОбъектДок.АдресаПунктовВыгрузки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПункта, СтрокаПункта);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеСроковПутевогоЛиста(ДляДокумента, ДокументСОнлайна)
	
	Если ДокументСОнлайна["Длительность"] = "1" Тогда
		ДатаНачалаИсполнения = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(
			ДокументСОнлайна["ДатаИсполнения"]);
		ДатаОкончанияИсполнения = ДатаНачалаИсполнения;
	Иначе
		ДатаНачалаИсполнения = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(
			ДокументСОнлайна["ДатаНачалаИсполнения"]);
		ДатаОкончанияИсполнения = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(
			ДокументСОнлайна["ДатаКонцаИсполнения"]);
	КонецЕсли;
	
	ДляДокумента.Вставить("ДатаНачалаИсполнения",    ДатаНачалаИсполнения);
	ДляДокумента.Вставить("ДатаОкончанияИсполнения", ДатаОкончанияИсполнения);
	
КонецПроцедуры

Процедура ЗагрузитьДанныеМаршрутов(ДляДокумента, МаршрутСОнлайна)
	
	Если МаршрутСОнлайна = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДляДокумента.Вставить(
		"МестоОтправления",
		Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(МаршрутСОнлайна, "Отправление.АдресТекст"));
	
	КлючСвязи = 1;
	АдресаПунктовВыгрузки = Новый Массив;
	Для Каждого Пункт Из МаршрутСОнлайна["Пункт"] Цикл
		
		СтруктураПункта = Новый Структура;
		СтруктураПункта.Вставить("Значение", Пункт["АдресТекст"]);
		СтруктураПункта.Вставить("КлючСвязи", КлючСвязи);
		
		АдресаПунктовВыгрузки.Добавить(СтруктураПункта);
		
		КлючСвязи = КлючСвязи + 1;
		
	КонецЦикла;
	ДляДокумента.Вставить("АдресаПунктовВыгрузки", АдресаПунктовВыгрузки);
	
	РольКонтрагента = Перечисления.Saby_РолиКонтрагентов.Отправитель;
	
	Грузоотправители = МаршрутСОнлайна["Грузоотправитель"];
	Если Не ЗначениеЗаполнено(Грузоотправители) Тогда
		Грузоотправители = Новый Массив;
	КонецЕсли;
	
	КлючСвязи = 1;
	Для Каждого Грузоотправитель Из Грузоотправители Цикл
		
		ЗагрузитьДанныеОрганизации(ДляДокумента, Грузоотправитель, РольКонтрагента, КлючСвязи);
		
		КлючСвязи = КлючСвязи + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОрганизации(ДляДокумента, ОрганизацияСОнлайна, Роль, КлючСвязи = 0)
	
	Если Не ЗначениеЗаполнено(ОрганизацияСОнлайна) Тогда
		Возврат;
	КонецЕсли;
	
	Saby_ТНЗагрузкаСервер.ПолучитьЮрЛицо(ОрганизацияСОнлайна);
	
	СтруктураДанныхЮрЛица = Новый Структура;
	Saby_ТНЗагрузкаСервер.ДанныеЮрЛиц(ОрганизацияСОнлайна, Роль, СтруктураДанныхЮрЛица);
	СтруктураДанныхЮрЛица.Вставить("КлючСвязи", КлючСвязи);
	СтруктураДанныхЮрЛица.Вставить("НаименованиеОрганизации", ОрганизацияСОнлайна["Название"]);
		
	ДляДокумента.ДанныеЮрЛиц.Добавить(СтруктураДанныхЮрЛица);
	
КонецПроцедуры

Процедура ЗагрузитьМедосмотр(ДляДокумента, МедосмотрСОнлайна, ЭтоПредрейсовыйМедосмотр)
	
	ОтветственныеЗаМедосмотр = Новый Массив;
	ДляДокумента.Вставить("ОтветственныеЗаМедосмотр", ОтветственныеЗаМедосмотр);
	
	Если Не ЗначениеЗаполнено(МедосмотрСОнлайна) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураМедика = Новый Структура;
	
	ШтатныйСотрудник = Не ЗначениеЗаполнено(МедосмотрСОнлайна["Организация"]);
	
	Лицензия      = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(МедосмотрСОнлайна, "Ответственный.Лицензия");
	Ответственный = МедосмотрСОнлайна["Ответственный"];
	
	Если Не ШтатныйСотрудник Тогда
		
		Если ЭтоПредрейсовыйМедосмотр Тогда
			Роль = Перечисления.Saby_РолиКонтрагентов.МедосмотрВыезд;
		Иначе
			Роль = Перечисления.Saby_РолиКонтрагентов.МедосмотрЗаезд;
		КонецЕсли;
		
		ОрганизацияВСтандартномФормате = НормализоватьДанныеОрганизации(МедосмотрСОнлайна["Организация"]);
		ЗагрузитьДанныеОрганизации(ДляДокумента, ОрганизацияВСтандартномФормате, Роль);
		
	КонецЕсли;
	
	ЗагрузитьОтветственного(СтруктураМедика, Ответственный);
	
	ДатаВыдачи = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(Лицензия["ДатаВыдачи"]);
	Срок       = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(Лицензия["Срок"]);
	
	СтруктураМедика.Вставить("Серия",                 Лицензия["Серия"]);
	СтруктураМедика.Вставить("Номер",                 Лицензия["Номер"]);
	СтруктураМедика.Вставить("ДатаВыдачи",            ДатаВыдачи);
	СтруктураМедика.Вставить("ДатаОкончанияДействия", Срок);
	
	ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(МедосмотрСОнлайна, "Результат.ДатаВремя");
	ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаВремя);
	Отметка   = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(МедосмотрСОнлайна, "Результат.Отметка");
	
	Если ЭтоПредрейсовыйМедосмотр Тогда
		ДляДокумента.Вставить("ДоРейса_МедосмотрСторонняяОрганизация", Не ШтатныйСотрудник);
		ДляДокумента.Вставить("ДоРейса_ДатаВремяМедосмотра",           ДатаВремя);
		ДляДокумента.Вставить("ДоРейса_КомментарииМедосмотра",         Отметка);
		СтруктураМедика.Вставить("Роль", Перечисления.Saby_РолиОтветственных.МедосмотрВыезд);
	Иначе
		ДляДокумента.Вставить("ПослеРейса_МедосмотрСторонняяОрганизация", Не ШтатныйСотрудник);
		ДляДокумента.Вставить("ПослеРейса_ДатаВремяМедосмотра",           ДатаВремя);
		ДляДокумента.Вставить("ПослеРейса_КомментарииМедосмотра",         Отметка);
		СтруктураМедика.Вставить("Роль", Перечисления.Saby_РолиОтветственных.МедосмотрЗаезд);
	КонецЕсли;
	
	ОтветственныеЗаМедосмотр.Добавить(СтруктураМедика);
	
КонецПроцедуры

Процедура ЗагрузитьТехосмотр(ДляДокумента, ТехосмотрСОнлайна)
	
	ОтветственныеЗаТехосмотр = Новый Массив;
	ДляДокумента.Вставить("ОтветственныеЗаТехосмотр", ОтветственныеЗаТехосмотр);
	
	Если Не ЗначениеЗаполнено(ТехосмотрСОнлайна) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураМеханика = Новый Структура;
	
	ЗагрузитьОтветственного(СтруктураМеханика, ТехосмотрСОнлайна["Ответственный"]);
	
	СтруктураМеханика.Вставить("Роль", Перечисления.Saby_РолиОтветственных.Техосмотр);
	
	ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ТехосмотрСОнлайна, "Результат.ДатаВремя");
	ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаВремя);
	Отметка   = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ТехосмотрСОнлайна, "Результат.Отметка");
	
	ДляДокумента.Вставить("ТО_ДатаВремя",   ДатаВремя);
	ДляДокумента.Вставить("ТО_Комментарий", "");
	
	ДатаВыпускаВРейс = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ТехосмотрСОнлайна, "ВыпускНаЛинию.ДатаВремя");
	ДатаВыпускаВРейс = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаВыпускаВРейс);
	
	ДляДокумента.Вставить("ТО_НеРазрешенВыпускПосле", Отметка = "2");
	ДляДокумента.Вставить("ТО_ДатаВремяВыпускаВРейс", ДатаВыпускаВРейс);
	
	ОтветственныеЗаТехосмотр.Добавить(СтруктураМеханика);
	
КонецПроцедуры

Процедура ЗагрузитьОтветственного(СтруктураДляЗаполнения, ОтветственныйСОнлайна)
	
	СтруктураДляЗаполнения.Вставить("Фамилия",   ОтветственныйСОнлайна["Фамилия"]);
	СтруктураДляЗаполнения.Вставить("Имя",       ОтветственныйСОнлайна["Имя"]);
	СтруктураДляЗаполнения.Вставить("Отчество",  ОтветственныйСОнлайна["Отчество"]);
	СтруктураДляЗаполнения.Вставить("Должность", ОтветственныйСОнлайна["Должность"]);
	
КонецПроцедуры

Функция НормализоватьДанныеОрганизации(ОрганизацияСОнлайна)
	
	РеквизитыЮрЛица = Новый Соответствие;
	РеквизитыЮрЛица.Вставить("ИНН",      ОрганизацияСОнлайна["ИНН"]);
	РеквизитыЮрЛица.Вставить("КПП",      ОрганизацияСОнлайна["КПП"]);
	РеквизитыЮрЛица.Вставить("Название", ОрганизацияСОнлайна["Название"]);
	РеквизитыЮрЛица.Вставить("ОГРН",     ОрганизацияСОнлайна["ОГРН"]);
	
	Реквизиты = Новый Соответствие;
	Реквизиты.Вставить("ЮЛ", РеквизитыЮрЛица);
	
	РезультатФункции = Новый Соответствие;
	РезультатФункции.Вставить("Реквизиты", Реквизиты);
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // Загрузка

#КонецОбласти // СлужебныеПроцедурыИФункции