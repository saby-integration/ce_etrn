
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Saby_ТНОбщегоНазначенияСервер.ОграничитьТипыДокументовОснований(ЭтаФорма);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриЧтенииСозданииПослеЗаписиНаСервере();
	Иначе
		Saby_ТНОбщегоНазначенияСервер.УбратьПризнакНеПросмотрен(Объект.Ссылка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Saby_ТНОбщегоНазначенияКлиент.ОбработатьОповещенияДляФормы(ЭтаФорма, ИмяСобытия, Параметр, Источник); 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииПослеЗаписиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриЧтенииСозданииПослеЗаписиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МассивРеквизитов = РеквизитыДляРазделенияДатыИВремя();
	Saby_ТНОбщегоНазначенияСервер.СобратьДатуВремяПоРеквизитам(ЭтаФорма, МассивРеквизитов, ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ДокументОснование

&НаКлиенте
Процедура ДекорацияДокументОснование(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ДокументОснованиеНажатие(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДокументОснование(Команда)
	
	Saby_ТНОбщегоНазначенияКлиент.ОчиститьДокументОснование(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокументовОснований(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.Saby_ВыборТиповЭПД", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ДокументОснование

&НаКлиенте
Процедура ДоРейса_МедосмотрСторонняяОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииСтороннейОрганизации(
		"ДоРейса_МедосмотрСторонняяОрганизация", 
		"МедосмотрВыезд", 
		"ДоРейса_ОрганизацияСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРейса_МедосмотрСторонняяОрганизацияПриИзменении(Элемент)
		
	ПриИзмененииСтороннейОрганизации(
		"ПослеРейса_МедосмотрСторонняяОрганизация", 
		"МедосмотрЗаезд", 
		"ПослеРейса_ОрганизацияСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтороннейОрганизации(ИмяРеквизита, РольСтрокой, ИмяЭлемента)
		
	Если Не Объект[ИмяРеквизита] Тогда 		
		
		УдалитьСтрокуПоРоли("ДанныеЮрЛиц", РольСтрокой);
		ЭтаФорма[ИмяЭлемента] = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
			Объект.ДанныеЮрЛиц, РольСтрокой);
		
	Иначе 
		
		УдалитьСтрокуПоРоли("ОтветственныеЛица", РольСтрокой);
		ОбновитьОтветственноеЛицо(РольСтрокой);
		
	КонецЕсли; 
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры 

#Область ДатаВремяПоОтдельнымРеквизитам

&НаКлиенте
Процедура ТО_ДатаПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТО_ВремяПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТО_ДатаВыпускаВРейсПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТО_ВремяВыпускаВРейсПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Выезд_ДатаПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Выезд_ВремяПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Заезд_ДатаПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Заезд_ВремяПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДоРейса_ДатаМедосмотраПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДоРейса_ВремяМедосмотраПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПослеРейса_ДатаМедосмотраПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПослеРейса_ВремяМедосмотраПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ТранспортныеСредства

&НаКлиенте
Процедура ПрицепыСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	Saby_ТНОбщегоНазначенияКлиент.ПрицепыСтрокойНажатие(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортноеСредствоСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	ПроцедураПослеОбновленияДанныхТранспортныхСредств = Новый ОписаниеОповещения(
		"ПослеОбновленияДанныхТранспортныхСредств",
		ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияКлиент.ТранспортноеСредствоСтрокойНажатие(
		ЭтаФорма,
		СтандартнаяОбработка,
		ПроцедураПослеОбновленияДанныхТранспортныхСредств,
		Элемент.ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПроцедураПослеОбновленияДанныхТранспортныхСредств = Новый ОписаниеОповещения(
		"ПослеОбновленияДанныхТранспортныхСредств",
		ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияКлиент.ПрицепыПриНачалеРедактирования(
		ЭтаФорма,
		ПроцедураПослеОбновленияДанныхТранспортныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПроцедураПослеОбновленияДанныхТранспортныхСредств = Новый ОписаниеОповещения(
		"ПослеОбновленияДанныхТранспортныхСредств",
		ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияКлиент.ПрицепыВыбор(
		ЭтаФорма,
		ВыбраннаяСтрока,
		СтандартнаяОбработка,
		ПроцедураПослеОбновленияДанныхТранспортныхСредств,
		Элементы.ГруппаПрицепы.ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПослеУдаления(Элемент)
	
	ПослеОбновленияДанныхТранспортныхСредств(Неопределено, Неопределено);
	
КонецПроцедуры

#КонецОбласти // ТранспортныеСредства

#Область ОтветственныеЛица

&НаКлиенте
Процедура ВодительСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;		
	ИзменитьДанныеОтветственногоЛица("Водитель");

КонецПроцедуры

&НаКлиенте
Процедура ДоРейса_МедработникНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;		
	ИзменитьДанныеОтветственногоЛица("МедосмотрВыезд", "Медосмотр");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРейса_МедработникНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;		
	ИзменитьДанныеОтветственногоЛица("МедосмотрЗаезд", "Медосмотр");
	
КонецПроцедуры

&НаКлиенте
Процедура ТехосмотрСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;		
	ИзменитьДанныеОтветственногоЛица("Техосмотр");

КонецПроцедуры

&НаКлиенте
Процедура ОдометрВыездСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;		
	ИзменитьДанныеОтветственногоЛица("ОдометрВыезд", "Показания одометра");

КонецПроцедуры

&НаКлиенте
Процедура ОдометрЗаездСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;		
	ИзменитьДанныеОтветственногоЛица("ОдометрЗаезд", "Показания одометра");
	
КонецПроцедуры

#КонецОбласти // ОтветственныеЛица

&НаКлиенте
Процедура ДлительностьИсполненияПериодПриИзменении(Элемент)
	
	Если Не ЭтаФорма.ДлительностьИсполненияПериод Тогда		
		Объект.ДатаОкончанияИсполнения = Объект.ДатаНачалаИсполнения;
	КонецЕсли;
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(Элемент.Имя, Элемент.Имя);
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(ЭтаФорма, "Оформитель", ПараметрыРеквизитаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаИсполненияПриИзменении(Элемент)
	
	Если Не ЭтотОбъект.ДлительностьИсполненияПериод Тогда
		Объект.ДатаОкончанияИсполнения = Объект.ДатаНачалаИсполнения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоРейса_ОрганизацияСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(Элемент.Имя, Элемент.Имя);
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(ЭтаФорма, "МедосмотрВыезд", ПараметрыРеквизитаФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПослеРейса_ОрганизацияСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(Элемент.Имя, Элемент.Имя);
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(ЭтаФорма, "МедосмотрЗаезд", ПараметрыРеквизитаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПеревозкиПриИзменении(Элемент)
	ОбновитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура МестоОтправленияНажатие(Элемент, СтандартнаяОбработка)
	ИзменитьМестоОтправления(СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МестоОтправленияЗаполнить(Элемент, СтандартнаяОбработка)
	ИзменитьМестоОтправления(СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура ПослерейсовыйМедосмотрТребуетсяПриИзменении(Элемент)
	ОбновитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаполнитьЛицензияДоРейсаНажатие(Элемент)			
	ИзменитьДанныеОтветственногоЛица("МедосмотрВыезд", "Медосмотр");	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаполнитьЛицензияПослеРейсаНажатие(Элемент)		
	ИзменитьДанныеОтветственногоЛица("МедосмотрЗаезд", "Медосмотр");
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибки

&НаКлиенте
Процедура ТаблицаОшибокПриАктивизацииСтроки(Элемент)

	Saby_ТНОбщегоНазначенияКлиент.РасшифровкаЗаписиТаблицыОшибок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОшибокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Saby_ТНОбщегоНазначенияКлиент.РасшифровкаЗаписиТаблицыОшибок(ЭтаФорма);

КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибки

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьВСбис(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКоманды", "ВыгрузитьВСбис");
	
	ПроцедураОбменДаннымиЭПЛ = Новый ОписаниеОповещения("ОбменДаннымиЭПЛ", ЭтотОбъект, ДополнительныеПараметры);
	
	Saby_ТНОбщегоНазначенияКлиент.ПроверитьМодифицированностьИПродолжитьВыполнение(ПроцедураОбменДаннымиЭПЛ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДокумент(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКоманды", "ПрочитатьДокумент");
	
	ПроцедураОбменДаннымиЭПЛ = Новый ОписаниеОповещения("ОбменДаннымиЭПЛ", ЭтотОбъект, ДополнительныеПараметры);
	
	Saby_ТНОбщегоНазначенияКлиент.ПроверитьМодифицированностьИПродолжитьВыполнение(ПроцедураОбменДаннымиЭПЛ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛентаВлево(Команда)
	
	СдвинутьЛенту(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛентаВправо(Команда)
	
	СдвинутьЛенту();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоОшибкам(Команда)
	
	ПроцедураОбновитьДанныеПоОшибкамНаКлиенте = Новый ОписаниеОповещения(
		"ОбновитьДанныеПоОшибкамНаКлиенте",
		ЭтотОбъект);
	
	Saby_ТНОбщегоНазначенияКлиент.ПроверитьМодифицированностьИПродолжитьВыполнение(
		ПроцедураОбновитьДанныеПоОшибкамНаКлиенте, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОшибки(Команда)
	
	Элементы.ФормаПоказатьСкрытьОшибки.Пометка = Не Элементы.ФормаПоказатьСкрытьОшибки.Пометка;
	
	ОбновитьВнешнийВидЭлементовОшибок();
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
	ПроцедураОткрытьПечатнуюФорму = Новый ОписаниеОповещения(
		"ОткрытьПечатнуюФорму",
		ЭтотОбъект);
	
	Saby_ТНОбщегоНазначенияКлиент.ПроверитьМодифицированностьИПродолжитьВыполнение(
		ПроцедураОткрытьПечатнуюФорму);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииПослеЗаписиНаСервере()
	
	ЗаполнитьРасчетныеРеквизиты();
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьЛенту(ЭтаФорма, Истина);
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
	ОбновитьВидимостьПоЭтапуИУчастнику();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИДоступностьЭлементов()
		
	ЭтоКоммерческаяПеревозка = (Объект.ВидПеревозки = Перечисления.Saby_ВидПеревозки.КоммерческиеПеревозки);
		
	Элементы.ДоРейса_ОрганизацияСтрокой.Видимость    = Объект.ДоРейса_МедосмотрСторонняяОрганизация;	
	Элементы.ПослеРейса_ОрганизацияСтрокой.Видимость = Объект.ПослеРейса_МедосмотрСторонняяОрганизация; 
	
	Элементы.ДатаОкончанияИсполнения.Видимость            = ЭтаФорма.ДлительностьИсполненияПериод;
	Элементы.ВидКоммерческойПеревозки.Видимость           = ЭтоКоммерческаяПеревозка;
	Элементы.ДекорацияЗаполнитьМестоОтправления.Видимость = Не ЗначениеЗаполнено(Объект.МестоОтправления);
	Элементы.ГруппаМедосмотрПослеРейса.Видимость          = Объект.ПослерейсовыйМедосмотрТребуется;
	
	// Скрытие данных медработников
	Признаки = ПризнакиДокумента();	
		
	СкрытьМедРаботника_ДоРейса = 
		Объект.ДоРейса_МедосмотрСторонняяОрганизация И Признаки.Этапы.ВыпускДоступен; 
		
	СкрытьМедРаботника_ПослеРейса = 
		Объект.ПослеРейса_МедосмотрСторонняяОрганизация И Признаки.Этапы.ВыпускДоступен; 
					
	Элементы.МедосмотрВыездСтрокой.Видимость     = Не СкрытьМедРаботника_ДоРейса; 
	Элементы.ГруппаДоРейса_Лицензия.Видимость    = Не СкрытьМедРаботника_ДоРейса;
	
	Элементы.МедосмотрЗаездСтрокой.Видимость     = Не СкрытьМедРаботника_ПослеРейса;
	Элементы.ГруппаПослеРейса_Лицензия.Видимость = Не СкрытьМедРаботника_ПослеРейса;
	
	// Завершен ДО, блокируем все изменения
	Если Признаки.Этапы.ДОЗавершен Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьПоЭтапуИУчастнику()
	
	Признаки = ПризнакиДокумента();
	
	Элементы.ГруппаДокументОснование.Видимость = Признаки.Исходящий
		И (Признаки.Этапы.ВыпускДоступен Или ЗначениеЗаполнено(Объект.ДокументОснование_Идентификатор));
		
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СтраницаОсновное");
	МассивЭлементов.Добавить("СтраницаМедосмотр");
	МассивЭлементов.Добавить("СтраницаТехОсмотр");
	Saby_ТНОбщегоНазначенияКлиентСервер.ИзменитьВидимостьДоступностьЭлементовФормы(
		ЭтаФорма, "Видимость", Признаки.Этапы.Номер >= 1, МассивЭлементов);
		
	НомерТитулаВыпускающий = 4;
		
	ЭтапВыпускающийИлиПосле = Признаки.Этапы.Номер >= НомерТитулаВыпускающий;
	Элементы.СтраницаПоказанияОдометра.Видимость = ЭтапВыпускающийИлиПосле;
	
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("СтраницаОсновное");
	МассивЭлементов.Добавить("ГруппаНомерДата");
	МассивЭлементов.Добавить("ОрганизацияСтрокой");
	МассивЭлементов.Добавить("ВодительСтрокой");
	МассивЭлементов.Добавить("ТранспортноеСредствоСтрокой");
	МассивЭлементов.Добавить("ГруппаПрицепы");
	МассивЭлементов.Добавить("ПослерейсовыйМедосмотрТребуется");
	МассивЭлементов.Добавить("ГруппаМестоОтправления");
		
	Saby_ТНОбщегоНазначенияКлиентСервер.ИзменитьВидимостьДоступностьЭлементовФормы(
		ЭтаФорма, "ТолькоПросмотр", Не Признаки.Этапы.ВыпускДоступен, МассивЭлементов);
		
	МассивЭлементов.Очистить();	
	МассивЭлементов.Добавить("ДоРейса_МедосмотрСторонняяОрганизация");
	МассивЭлементов.Добавить("ПослеРейса_МедосмотрСторонняяОрганизация");
	
	// Блочим до починки на онлайн
	// Признаки.Этапы.ВыпускДоступен
	Saby_ТНОбщегоНазначенияКлиентСервер.ИзменитьВидимостьДоступностьЭлементовФормы(
		ЭтаФорма, "Доступность", Ложь, МассивЭлементов);    
		
	ОбновитьВидимостьПолейПредрейсовогоМедосмотра(Признаки);
	
	ОбновитьВидимостьПолейПредрейсовогоТехосмотра(Признаки);
	
	ОбновитьВидимостьПолейПослерейсовогоМедосмотра(Признаки);
	
	Элементы.ГруппаВыезд.ТолькоПросмотр = Не Признаки.Этапы.ВыпускающийДоступен;
	Элементы.ГруппаЗаезд.ТолькоПросмотр = Не Признаки.Этапы.ПринимающийДоступен;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьПолейПредрейсовогоМедосмотра(Признаки)
	
	Элементы.ГруппаДоРейса.ТолькоПросмотр = Не (Признаки.Этапы.ПредрейсовыйМедосмотрДоступен
		Или Признаки.Этапы.ВыпускДоступен);
	
	Элементы.ДоРейса_ОрганизацияСтрокой.ТолькоПросмотр = Не Признаки.Этапы.ВыпускДоступен;											
	
	Если Не Элементы.ГруппаДоРейса.ТолькоПросмотр Тогда
		
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("ГруппаДоРейса_ДатаМедосмотра");
		Saby_ТНОбщегоНазначенияКлиентСервер.ИзменитьВидимостьДоступностьЭлементовФормы(
			ЭтаФорма, "ТолькоПросмотр", Не Признаки.Этапы.ПредрейсовыйМедосмотрДоступен, МассивЭлементов);
													
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьПолейПредрейсовогоТехосмотра(Признаки)
	
	Элементы.СтраницаТехОсмотр.ТолькоПросмотр = Не (Признаки.Этапы.ПредрейсовыйТехосмотрДоступен
		                                            Или Признаки.Этапы.ВыпускДоступен);
													
	Если Не Элементы.СтраницаТехОсмотр.ТолькоПросмотр Тогда
		
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("ГруппаТО_Дата");
		МассивЭлементов.Добавить("ГруппаВыпуск_Дата");
		МассивЭлементов.Добавить("ТО_РазрешенВыпускПосле");
		Saby_ТНОбщегоНазначенияКлиентСервер.ИзменитьВидимостьДоступностьЭлементовФормы(
			ЭтаФорма, "ТолькоПросмотр", Не Признаки.Этапы.ПредрейсовыйТехосмотрДоступен, МассивЭлементов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьПолейПослерейсовогоМедосмотра(Признаки)
	
	Элементы.ГруппаПослеРейса.ТолькоПросмотр = Не (Признаки.Этапы.ПослерейсовыйМедосмотрДоступен
		Или Признаки.Этапы.ВыпускДоступен);
												   
	Элементы.ПослеРейса_ОрганизацияСтрокой.ТолькоПросмотр = Не Признаки.Этапы.ВыпускДоступен;											   										   
												   
	Если Не Элементы.ГруппаДоРейса.ТолькоПросмотр Тогда
		
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("ГруппаПослеРейса_ДатаМедосмотра");
		Saby_ТНОбщегоНазначенияКлиентСервер.ИзменитьВидимостьДоступностьЭлементовФормы(
			ЭтаФорма, "ТолькоПросмотр", Не Признаки.Этапы.ПослерейсовыйМедосмотрДоступен, МассивЭлементов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПризнакиДокумента()
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Этапы",     Новый Структура);
	РезультатФункции.Вставить("Исходящий", Объект.Направление = Перечисления.Saby_Направление.Исходящий);
		
	ТипыТитулов = Saby_ТНОбщегоНазначенияСервер.ВсеЗначенияПеречисления("Saby_ТипТитулаЭПЛ");
	
	ДОЗавершен = Saby_ТНОбщегоНазначенияКлиентСервер.ДокументооборотЗавершен(ЭтаФорма);
	
	РезультатФункции.Этапы.Вставить(
		"ВыпускДоступен", ТипТитулаДоступенУчастнику(ТипыТитулов.Выпуск, ДОЗавершен));
	
	РезультатФункции.Этапы.Вставить(
		"ПредрейсовыйМедосмотрДоступен", ТипТитулаДоступенУчастнику(ТипыТитулов.ПредрейсовыйМедосмотр, ДОЗавершен));
	
	РезультатФункции.Этапы.Вставить(
		"ПредрейсовыйТехосмотрДоступен", ТипТитулаДоступенУчастнику(ТипыТитулов.ПредрейсовыйТехосмотр, ДОЗавершен));
	
	РезультатФункции.Этапы.Вставить(
		"ВыпускающийДоступен", ТипТитулаДоступенУчастнику(ТипыТитулов.Выпускающий, ДОЗавершен));
	
	РезультатФункции.Этапы.Вставить(
		"ПринимающийДоступен", ТипТитулаДоступенУчастнику(ТипыТитулов.Принимающий, ДОЗавершен));
	
	РезультатФункции.Этапы.Вставить(
		"ПослерейсовыйМедосмотрДоступен", ТипТитулаДоступенУчастнику(ТипыТитулов.ПослерейсовыйМедосмотр, ДОЗавершен));
	
	РезультатФункции.Этапы.Вставить("ДОЗавершен", ДОЗавершен);
	
	Если РезультатФункции.Этапы.ВыпускДоступен Тогда
		ПорядковыйНомер = 1;
	ИначеЕсли РезультатФункции.Этапы.ПредрейсовыйМедосмотрДоступен Тогда
		ПорядковыйНомер = 2;
	ИначеЕсли РезультатФункции.Этапы.ПредрейсовыйТехосмотрДоступен Тогда
		ПорядковыйНомер = 3;
	ИначеЕсли РезультатФункции.Этапы.ВыпускающийДоступен Тогда
		ПорядковыйНомер = 4;
	ИначеЕсли РезультатФункции.Этапы.ПринимающийДоступен Тогда
		ПорядковыйНомер = 5;
	ИначеЕсли РезультатФункции.Этапы.ПослерейсовыйМедосмотрДоступен Тогда
		ПорядковыйНомер = 6;
	ИначеЕсли ДОЗавершен Тогда
		ПорядковыйНомер = 7;
	Иначе
		ПорядковыйНомер = 8;
	КонецЕсли;
	
	РезультатФункции.Этапы.Вставить("Номер", ПорядковыйНомер);
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Функция ТипТитулаДоступенУчастнику(ТипТитула, ДОЗавершен)
	
	Если Объект.ТекущиеЭтапы.Количество() = 0 Тогда
		Возврат Перечисления.Saby_ТипТитулаЭПЛ.ЭтоПервыйТитул(ТипТитула) И Не ДОЗавершен;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипТитула", ТипТитула);
	Отбор.Вставить("Доступен",  Истина);
	
	НайденныеСтроки = Объект.ТекущиеЭтапы.НайтиСтроки(Отбор);
	
	Возврат НайденныеСтроки.Количество() > 0;
	
КонецФункции

// Заполнение реквизитов формы при изменение, связанной информации
// или первоначальной инициализации формы
&НаСервере
Процедура ЗаполнитьРасчетныеРеквизиты()
	
	// Документ основание
	Если ЗначениеЗаполнено(Объект.ДокументОснование_Идентификатор) Тогда 		
		 ДокументОснование = Документы[Объект.ДокументОснование_ОбъектМетаданных].ПолучитьСсылку(
		 	Объект.ДокументОснование_Идентификатор);
		 Элементы.ДекорацияДокументОснование.Заголовок = СокрЛП(ДокументОснование);
	КонецЕсли;
	
	// Даты. Разложим дату и время по отдельным реквизитам  
	МассивРеквизитов = РеквизитыДляРазделенияДатыИВремя();
	Saby_ТНОбщегоНазначенияСервер.РазложитьДатуВремяПоРеквизитам(ЭтаФорма, МассивРеквизитов);
	
	// ТС
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьТранспортныеСредстваНаФорме(ЭтаФорма);
	
	ОбновитьВсеОтветственныеЛица();
	
	ЭтаФорма.ДлительностьИсполненияПериод = Объект.ДатаНачалаИсполнения <> Объект.ДатаОкончанияИсполнения;
		
	// Активный этап и индикация состояния
	Saby_ТНОбщегоНазначенияСервер.ОтобразитьНаФормеСбисЭтапИСостояние(ЭтаФорма);
			
	ОбновитьВсеОрганизации();	
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсеОтветственныеЛица()
	
	ОбновитьОтветственноеЛицо("Водитель");
	ОбновитьОтветственноеЛицо("МедосмотрВыезд");
	ОбновитьОтветственноеЛицо("МедосмотрЗаезд");
	ОбновитьОтветственноеЛицо("Техосмотр");
	ОбновитьОтветственноеЛицо("ОдометрВыезд");
	ОбновитьОтветственноеЛицо("ОдометрЗаезд");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсеОрганизации()
	
	ЭтаФорма.ОрганизацияСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		Объект.ДанныеЮрЛиц, "Оформитель");
	ЭтаФорма.ДоРейса_ОрганизацияСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		Объект.ДанныеЮрЛиц, "МедосмотрВыезд");
	ЭтаФорма.ПослеРейса_ОрганизацияСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		Объект.ДанныеЮрЛиц, "МедосмотрЗаезд");
	
КонецПроцедуры

#Область ОбработкаОповещений

&НаКлиенте
Процедура ОбработатьОповещениеОбновитьДокумент(Параметр) Экспорт
	
	ЭтаФорма.ТаблицаОшибок.Очистить();
	ЭтаФорма.КоличествоОшибок = 0;
	
	ЭтаФорма.Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеВыполнитьПереход(Параметр) Экспорт
	
	ОбменДаннымиЭПЛ("ОбновитьАктивныйЭтап");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеЗавершениеВыполнитьДействие(Параметр) Экспорт
	
	Если Параметр.status = "error" Тогда
		
		Saby_ТНОбщегоНазначенияКлиент.ОбработатьОшибкиИзФормыВыполнитьДействие(ЭтаФорма, Объект.Ссылка, Параметр);
		
		ЭтаФорма.Прочитать();
		
	Иначе
		
		ОбменДаннымиЭПЛ("ОбновитьАктивныйЭтап");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбновленияДанныхТранспортныхСредств(Результат, ДополнительныеПараметры) Экспорт
	
	ПослеОбновленияДанныхТранспортныхСредствНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДанныхОтветственного(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", РезультатЗакрытия.Роль);
	
	НайденныеСтроки = Объект.ОтветственныеЛица.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		Строка = НайденныеСтроки[0];
	Иначе
		Строка = Объект.ОтветственныеЛица.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Строка, РезультатЗакрытия);
	
	ОбновитьОтветственноеЛицо(РезультатЗакрытия.Роль, , РезультатЗакрытия);
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПечатнуюФорму(Результат, ДополнительныеПараметры) Экспорт
	
	Saby_ТНОбщегоНазначенияКлиент.СоздатьИОткрытьПечатнуюФорму(Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьИДоступностьЭлементовНаКлиенте() Экспорт
	ОбновитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти // ОбработкаОповещений

&НаКлиенте
Процедура ОбменДаннымиЭПЛ(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИмяКоманды = Результат;
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ИмяКоманды") Тогда
		ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	КонецЕсли;
	
	Если ИмяКоманды = "ВыгрузитьВСбис" Тогда
		ДанныеДляОбработки = Новый Массив;
		ПараметрыВыгрузки = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки(Объект.Ссылка);
		ДанныеДляОбработки.Добавить(ПараметрыВыгрузки);
	Иначе
		ДанныеДляОбработки = Новый Массив;
		ПараметрыЗагрузки = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыЗагрузки(Объект.Ссылка);
		Если ИмяКоманды = "ОбновитьАктивныйЭтап" Тогда
			ПараметрыЗагрузки.ТекущийТитул = АктивныйЭтапСтрокой;
			ПараметрыЗагрузки.ТолькоАктивныйЭтап = Истина;
		КонецЕсли;
		ПараметрыЗагрузки.ИзДокумента = Истина;
		ПараметрыЗагрузки.ИмяМетаданных = "Saby_ПутевойЛист";
		ДанныеДляОбработки.Добавить(ПараметрыЗагрузки);
	КонецЕсли;
	
	ДополнительныеПараметрыОбмена = Новый Структура;
	
	Saby_ТНОбщегоНазначенияКлиент.ВыполнитьКомандуСбис(
		ЭтаФорма,
		ИмяКоманды,
		ДанныеДляОбработки,
		ДополнительныеПараметрыОбмена);
		
КонецПроцедуры

#Область Лента

&НаСервере
Процедура СдвинутьЛенту(Знач Вправо = Истина)
	
	Saby_ТНОбщегоНазначенияСервер.СдвинутьЛенту(ЭтаФорма, Вправо);
	
КонецПроцедуры

&НаСервере
Функция ШиринаПоТитулу(ТипТитула) Экспорт
	
	РезультатФункции = 10;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ДекорацияТитулОбработкаНавигационнойСсылки(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Saby_ТНОбщегоНазначенияКлиент.ОбработкаНавигационнойСсылкиЛенты(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьРеквизитИзТитула(НаименованиеТитула) Экспорт
		
	Если НаименованиеТитула = "Выпуск" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ПризнакНачалаРейса;
	ИначеЕсли НаименованиеТитула = "ПредрейсовыйМедосмотр" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ДоРейса_МедосмотрСторонняяОрганизация;
	ИначеЕсли НаименованиеТитула = "ПредрейсовыйТехосмотр" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ТО_ДатаВремя;
	ИначеЕсли НаименованиеТитула = "Выпускающий" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Выезд_ДатаВремя;
	ИначеЕсли НаименованиеТитула = "Принимающий" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Заезд_ДатаВремя;
	ИначеЕсли НаименованиеТитула = "ПослерейсовыйМедосмотр" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ПослеРейса_МедосмотрСторонняяОрганизация;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаименованиеТитула(СтрокаЛенты) Экспорт
	
	ПредставленияТитула = Перечисления.Saby_ТипТитулаЭПЛ.ПредставленияТитула(СтрокаЛенты.ТипТитула);
	СтрокаЛенты.НаименованиеТитула = ПредставленияТитула.Имя;
	
КонецПроцедуры

&НаСервере
Функция ТитулОтрицательноЗавершен(СтрокаЛенты) Экспорт
	
	ОтрицательноЗавершенПослеТО = СтрокаЛенты.ТипТитула = Перечисления.Saby_ТипТитулаЭПЛ.ПредрейсовыйТехосмотр
		И Объект.ТО_НеРазрешенВыпускПосле;
		
	ОтрицательноЗавершенПослеМО = СтрокаЛенты.ТипТитула = Перечисления.Saby_ТипТитулаЭПЛ.ПредрейсовыйМедосмотр
		И Объект.ДоРейса_НеДопущенПослеМедосмотра;
	
	Возврат ОтрицательноЗавершенПослеТО Или ОтрицательноЗавершенПослеМО;
	
КонецФункции

#КонецОбласти // Лента

#Область Ошибки

&НаКлиенте
Процедура ОбновитьДанныеПоОшибкамНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьДанныеПоОшибкамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоОшибкамНаСервере(Знач Ошибки = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ссылка", Объект.Ссылка);
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьДанныеПоОшибкам(
		ЭтаФорма,
		ДополнительныеПараметры,
		Ошибки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВнешнийВидЭлементовОшибок()
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДекорацию(Знач ПараметрыВыделенияДекорации) Экспорт
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьДекорацию(ЭтаФорма, ПараметрыВыделенияДекорации);
	
КонецПроцедуры

#КонецОбласти // Ошибки

&НаСервере
Функция ЗаполнениеНаОснованииINI() Экспорт
	
	Результат = Saby_ТНОбщегоНазначенияСервер.ЗаполнитьНаОснованииINI(Объект, ДокументОснование);	
	Если ЗначениеЗаполнено(Результат) Тогда		
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОграничитьТипыДокументовОснований() Экспорт
	
	МассивТипов = Документы.Saby_ПутевойЛист.ТипыДляЗаполненияНаОсновании();
	
	ТипДокументаОснования = ТипЗнч(ДокументОснование);
	
	Если ЗначениеЗаполнено(ДокументОснование) И МассивТипов.Найти(ТипДокументаОснования) = Неопределено Тогда
		МассивТипов.Добавить(ТипДокументаОснования);
	КонецЕсли;
	
	ТипыОснований.ЗагрузитьЗначения(МассивТипов);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыДляРазделенияДатыИВремя()
	
	Массив = Новый Массив;
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, "ДоРейса_ДатаВремяМедосмотра");	
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, "ПослеРейса_ДатаВремяМедосмотра");	
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, "ТО_ДатаВремя");
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, "ТО_ДатаВремяВыпускаВРейс"); 	
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, "Выезд_ДатаВремя");
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, "Заезд_ДатаВремя");
		
	Возврат Массив;
	
КонецФункции

&НаСервере
Процедура ПослеОбновленияДанныхТранспортныхСредствНаСервере()
	
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьТранспортныеСредстваНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДанныеОтветственногоЛица(РольСтрокой, ИмяФормы = "")
	
	Если ПустаяСтрока(ИмяФормы) Тогда
		ИмяФормы = РольСтрокой;
	КонецЕсли;
	
	ФормаТолькоПросмотр = ФормаОтветственногоТолькоПросмотр(РольСтрокой);
	
	ПараметрыФормы = ДанныеИзТаблицыПоОтбору("ОтветственныеЛица", РольСтрокой);	
	ПараметрыФормы.Вставить("Наименование", ИмяФормы);
	ПараметрыФормы.Вставить("РольСтрокой",  РольСтрокой);
	
	СкрываемыеЭлементы = Новый Массив;
	СкрываемыеЭлементы.Добавить("ГруппаТелефоны");
	
	ПараметрыФормы.Вставить("СкрываемыеЭлементы", СкрываемыеЭлементы);
	
	Если ФормаТолькоПросмотр Тогда		
		ПараметрыФормы.Вставить("ТолькоПросмотр", ФормаТолькоПросмотр);
	КонецЕсли;
	
	Saby_ТНОбщегоНазначенияКлиент.ИзменитьДанныеВодителяОтветственногоЛица(
		ЭтаФорма, 
		ПараметрыФормы, 
		"ПослеВводаДанныхОтветственного"); 
			
КонецПроцедуры

&НаКлиенте
Функция ФормаОтветственногоТолькоПросмотр(РольСтрокой)
	
	Признаки = ПризнакиДокумента();
	ФормаТолькоПросмотр = Признаки.Этапы.ДОЗавершен; 
	Если ФормаТолькоПросмотр Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если РольСтрокой = "МедосмотрВыезд" Тогда
		
		ФормаТолькоПросмотр = Не Признаки.Этапы.ПредрейсовыйМедосмотрДоступен И Не Признаки.Этапы.ВыпускДоступен;
		
	ИначеЕсли РольСтрокой = "МедосмотрЗаезд" Тогда
		
		ФормаТолькоПросмотр = Не Признаки.Этапы.ПослерейсовыйМедосмотрДоступен И Не Признаки.Этапы.ВыпускДоступен;
		
	ИначеЕсли РольСтрокой = "Техосмотр" Тогда
		
		ФормаТолькоПросмотр = Не Признаки.Этапы.ПредрейсовыйТехосмотрДоступен И Не Признаки.Этапы.ВыпускДоступен;
		
	ИначеЕсли РольСтрокой = "ОдометрВыезд" Тогда	
		
		ФормаТолькоПросмотр = Не Признаки.Этапы.ВыпускающийДоступен;
		
	ИначеЕсли РольСтрокой = "ОдометрЗаезд" Тогда
		
		ФормаТолькоПросмотр = Не Признаки.Этапы.ВыпускающийДоступен И Не Признаки.Этапы.ПринимающийДоступен;
		
	ИначеЕсли РольСтрокой = "Водитель" Тогда
		
		ФормаТолькоПросмотр = Не Признаки.Этапы.ВыпускДоступен;
		
	Иначе 
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат ФормаТолькоПросмотр;
	
КонецФункции

&НаСервере
Функция ДанныеИзТаблицыПоОтбору(Знач ИмяТЧ, Роль)
	
	ЭтоЮрЛицо = ИмяТЧ = "ДанныеЮрЛиц";
	
	Если ТипЗнч(Роль) = Тип("Строка") Тогда
		Если ЭтоЮрЛицо Тогда
			Роль = Перечисления.Saby_РолиКонтрагентов[Роль];
		Иначе 	
			Роль = Перечисления.Saby_РолиОтветственных[Роль];
		КонецЕсли;	
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Роль);
	
	НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда                                                        
		
		Строка = НайденныеСтроки[0];
		
		Если ЭтоЮрЛицо Тогда			
			Структура = Saby_ТНОбщегоНазначенияКлиентСервер.СтруктураДанныхЮрЛица();
		Иначе
			Структура = Saby_ТНОбщегоНазначенияСервер.СтруктураДанныхОтветственногоЛица();
		КонецЕсли;
				
		ЗаполнитьЗначенияСвойств(Структура, Строка);
				
	Иначе 		
		Структура = Новый Структура;					
	КонецЕсли;	
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Процедура ОбновитьОтветственноеЛицо(Знач Роль, ЭлементФормы = "", Структура = Неопределено)
	
	Если ПустаяСтрока(ЭлементФормы) Тогда
		ЭлементФормы = СокрЛП(Роль) + "Строкой";
	КонецЕсли;
	
	Если ТипЗнч(Роль) = Тип("Строка") Тогда	
		Роль = Перечисления.Saby_РолиОтветственных[Роль];
	КонецЕсли;
	
	Если Структура = Неопределено Тогда				
		Структура = ДанныеИзТаблицыПоОтбору("ОтветственныеЛица", Роль);		
	КонецЕсли;
		
	Saby_ТНОбщегоНазначенияСервер.ОбновитьОтветственногоНаФорме(ЭтаФорма, ЭлементФормы, Структура); 
			
	ОбновитьДополнительныеРеквизиты(Роль, Структура);		
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДополнительныеРеквизиты(Роль, Структура)
	
	Если Роль = Перечисления.Saby_РолиОтветственных.МедосмотрВыезд Тогда				
		Элементы.ДекорацияЗаполнитьЛицензияДоРейса.Заголовок = СформироватьНаименованиеЛицензии(Структура);		
	ИначеЕсли Роль = Перечисления.Saby_РолиОтветственных.МедосмотрЗаезд Тогда 				
		Элементы.ДекорацияЗаполнитьЛицензияПослеРейса.Заголовок = СформироватьНаименованиеЛицензии(Структура);		
	Иначе
		Возврат;		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьНаименованиеЛицензии(Структура)
	
	Если Не ЗначениеЗаполнено(Структура) Тогда
		Лицензия = "Заполнить";
	Иначе 	
		
		ШаблонЛицензии = "%1 №%2 Действует с %3 по %4";
		
		Лицензия = СтрШаблон(
			ШаблонЛицензии,
			Структура.Серия,
			Структура.Номер,
			Формат(Структура.ДатаВыдачи, "ДФ=dd.MM.yyyy"),
			Формат(Структура.ДатаОкончанияДействия, "ДФ=dd.MM.yyyy"));
		
	КонецЕсли;
	
	Возврат Лицензия;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьМестоОтправления(СтандартнаяОбработка) 
	
	ПараметрыВыбораАдреса = Новый Структура;
	ПараметрыВыбораАдреса.Вставить("Роль",           "Оформитель");
	ПараметрыВыбораАдреса.Вставить("Значение",       Объект.МестоОтправленияЗначение);
	ПараметрыВыбораАдреса.Вставить("ТолькоПросмотр", Элементы.ГруппаМестоОтправления.ТолькоПросмотр);
	
	Saby_ТНОбщегоНазначенияКлиент.АдресНачалоВыбора(ЭтаФорма, ПараметрыВыбораАдреса, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуПоРоли(Знач ИмяТаблицы, Знач РольСтрокой)
	
	Saby_ТНОбщегоНазначенияСервер.УдалитьСтрокуПоРоли(Объект, ИмяТаблицы, РольСтрокой);
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
