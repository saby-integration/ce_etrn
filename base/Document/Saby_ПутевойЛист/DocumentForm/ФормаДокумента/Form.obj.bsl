
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОграничитьТипыДокументовОснованийНаСервере();
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриЧтенииСозданииПослеЗаписиНаСервере();
	Иначе
		Saby_ТНОбщегоНазначенияСервер.УбратьПризнакНеПросмотрен(Объект.Ссылка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Saby_ТНОбщегоНазначенияКлиент.ОбработатьОповещенияДляФормы(ЭтаФорма, ИмяСобытия, Параметр, Источник); 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииПослеЗаписиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриЧтенииСозданииПослеЗаписиНаСервере();
	
	Признаки = ПризнакиДокумента();
	
	ПараметрыЗаписи.Вставить("ЭтоЗаменаВодителя", Признаки.ЭтоЗаменаВодителя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.ЭтоЗаменаВодителя Тогда
		Оповестить("ОбновитьЛенту", , ЭтаФорма.ВладелецФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ДокументОснование

&НаКлиенте
Процедура ДекорацияДокументОснование(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ДокументОснованиеНажатие(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДокументОснование(Команда)
	
	Saby_ТНОбщегоНазначенияКлиент.ОчиститьДокументОснованиеНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокументовОснований(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.Saby_ВыборТиповЭПД", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти // ДокументОснование

&НаКлиенте
Процедура ДоРейса_МедосмотрСторонняяОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииСтороннейОрганизации(
		"ДоРейса_МедосмотрСторонняяОрганизация",
		"МедосмотрВыезд",
		"ДоРейса_ОрганизацияСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРейса_МедосмотрСторонняяОрганизацияПриИзменении(Элемент)
		
	ПриИзмененииСтороннейОрганизации(
		"ПослеРейса_МедосмотрСторонняяОрганизация",
		"МедосмотрЗаезд",
		"ПослеРейса_ОрганизацияСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтороннейОрганизации(ИмяРеквизита, РольСтрокой, ИмяЭлемента)
		
	Если Не Объект[ИмяРеквизита] Тогда 
		
		Saby_ТНОбщегоНазначенияКлиентСервер.УдалитьСтрокиПоРоли(Объект.ДанныеЮрЛиц, РольСтрокой);
		ЭтаФорма[ИмяЭлемента] = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
			Объект.ДанныеЮрЛиц, РольСтрокой);
		
	Иначе 
		
		Saby_ТНОбщегоНазначенияКлиентСервер.УдалитьСтрокиПоРоли(Объект.ОтветственныеЛица, РольСтрокой, Истина);
		ОбновитьОтветственноеЛицо(РольСтрокой);
		
	КонецЕсли; 
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры 

#Область ДатаВремяПоОтдельнымРеквизитам

&НаКлиенте
Процедура ТО_ДатаПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТО_ВремяПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТО_ДатаВыпускаВРейсПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;	
	ПроверкаКорректностиЗаполненияРеквизитов(Элемент, "ГруппаВыпуск_Дата");
	
КонецПроцедуры

&НаКлиенте
Процедура ТО_ВремяВыпускаВРейсПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Выезд_ДатаПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	ПроверкаКорректностиЗаполненияРеквизитов(Элемент, "ГруппаВыезд_ДатаВремя");
	
КонецПроцедуры

&НаКлиенте
Процедура Выезд_ВремяПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	ПроверкаКорректностиЗаполненияРеквизитов(Элемент, "ГруппаВыезд_ДатаВремя");

КонецПроцедуры

&НаКлиенте
Процедура Заезд_ДатаПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;	
	ПроверкаКорректностиЗаполненияРеквизитов(Элемент, "ГруппаЗаезд_ДатаВремя");
	
КонецПроцедуры

&НаКлиенте
Процедура Заезд_ВремяПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;	
	ПроверкаКорректностиЗаполненияРеквизитов(Элемент, "ГруппаЗаезд_ДатаВремя");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоРейса_ДатаМедосмотраПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДоРейса_ВремяМедосмотраПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПослеРейса_ДатаМедосмотраПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПослеРейса_ВремяМедосмотраПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ТранспортныеСредства

&НаКлиенте
Процедура ПрицепыСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	Saby_ТНОбщегоНазначенияКлиент.ПрицепыНажатие(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортноеСредствоСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	ПроцедураПослеОбновленияДанныхТранспортныхСредств = Новый ОписаниеОповещения(
		"ПослеОбновленияДанныхТранспортныхСредств",
		ЭтаФорма);
		
	УстановитьПросмотр = Элементы.СтраницаОсновное.ТолькоПросмотр
							Или Элементы.ТранспортноеСредствоСтрокой.ТолькоПросмотр;
		
	Saby_ТНОбщегоНазначенияКлиент.ТранспортноеСредствоНажатие(
		ЭтаФорма,
		СтандартнаяОбработка,
		ПроцедураПослеОбновленияДанныхТранспортныхСредств,
		УстановитьПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПроцедураПослеОбновленияДанныхТранспортныхСредств = Новый ОписаниеОповещения(
		"ПослеОбновленияДанныхТранспортныхСредств",
		ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияКлиент.ТаблицаПрицеповПриНачалеРедактирования(
		ЭтаФорма,
		ПроцедураПослеОбновленияДанныхТранспортныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПроцедураПослеОбновленияДанныхТранспортныхСредств = Новый ОписаниеОповещения(
		"ПослеОбновленияДанныхТранспортныхСредств",
		ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияКлиент.ТаблицаПрицеповВыбор(
		ЭтаФорма,
		ВыбраннаяСтрока,
		СтандартнаяОбработка,
		ПроцедураПослеОбновленияДанныхТранспортныхСредств,
		Элементы.ГруппаПрицепы.ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПослеУдаления(Элемент)
	
	ПослеОбновленияДанныхТранспортныхСредств(Неопределено, Неопределено);
	
КонецПроцедуры

#КонецОбласти // ТранспортныеСредства

#Область ОтветственныеЛица

#Область Водители

&НаКлиенте
Процедура ВодителиСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭтаФорма.ТекущийЭлемент = Элементы.Водители;
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтветственного = Saby_ТНОбщегоНазначенияСервер.СтруктураОтветственного(
		Объект.ОтветственныеЛица, "", ВыбраннаяСтрока);
	СтруктураОтветственного.Вставить("ТолькоПросмотр", Элементы.СтраницаОсновное.ТолькоПросмотр);
	
	Saby_ТНОбщегоНазначенияКлиент.НачатьРедактированиеОтветственногоЛица(
		ЭтаФорма, СтруктураОтветственного, "Водитель");

КонецПроцедуры

&НаКлиенте
Процедура ВодителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		РольВодитель = ПредопределенноеЗначение("Перечисление.Saby_РолиОтветственных.Водитель");
		
		ОтборПоРоли  = Новый Структура;
		ОтборПоРоли.Вставить("Роль", РольВодитель);
		
		НайденныеСтроки             = Объект.ОтветственныеЛица.НайтиСтроки(ОтборПоРоли);
		КоличествоВодителей         = НайденныеСтроки.Количество();
		КоличествоВодителейМаксимум = 5;
		
		Если КоличествоВодителей = КоличествоВодителейМаксимум Тогда
			
			ТекстПредупреждения = СтрШаблон("ru = 'Количество водителей в путевом листе не должно быть больше %1'",
										КоличествоВодителейМаксимум);
			
			ПоказатьПредупреждение(, Нстр(ТекстПредупреждения));
				
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Для Каждого СтруктураОтбора Из Элемент.ОтборСтрок Цикл
			Элемент.ТекущиеДанные[СтруктураОтбора.Ключ] = СтруктураОтбора.Значение;
		КонецЦикла;
		
		СтруктураОтветственного = Saby_ТНОбщегоНазначенияСервер.СтруктураОтветственного(
			Объект.ОтветственныеЛица, "", Элемент.ТекущаяСтрока);
		
		Saby_ТНОбщегоНазначенияКлиент.НачатьРедактированиеОтветственногоЛица(
			ЭтаФорма, СтруктураОтветственного, "Водитель");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПослеУдаления(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьВодителейНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияОтветственногоЛицаНаФорме(СтруктураОтветственногоЛица) Экспорт
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры
	
#КонецОбласти // Водители

&НаКлиенте
Процедура ДоРейса_МедработникНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИзменитьДанныеОтветственногоЛица("МедосмотрВыезд", "Медосмотр");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРейса_МедработникНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИзменитьДанныеОтветственногоЛица("МедосмотрЗаезд", "Медосмотр");
	
КонецПроцедуры

&НаКлиенте
Процедура ТехосмотрСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИзменитьДанныеОтветственногоЛица("Техосмотр");

КонецПроцедуры

&НаКлиенте
Процедура ОдометрВыездСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИзменитьДанныеОтветственногоЛица("ОдометрВыезд", "Показания одометра");

КонецПроцедуры

&НаКлиенте
Процедура ОдометрЗаездСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИзменитьДанныеОтветственногоЛица("ОдометрЗаезд", "Показания одометра");
	
КонецПроцедуры

#КонецОбласти // ОтветственныеЛица

&НаКлиенте
Процедура ДлительностьИсполненияПериодПриИзменении(Элемент)
	
	Если Не ЭтаФорма.ДлительностьИсполненияПериод Тогда
		Объект.ДатаОкончанияИсполнения = Объект.ДатаНачалаИсполнения;
	КонецЕсли;
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(Элемент.Имя, Элемент.Имя);
	ПараметрыРеквизитаФормы.ТолькоПросмотр = Элементы.СтраницаОсновное.ТолькоПросмотр;
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(ЭтаФорма, "Оформитель", ПараметрыРеквизитаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаИсполненияПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	Если Не ЭтаФорма.ДлительностьИсполненияПериод Тогда
		Объект.ДатаОкончанияИсполнения = Объект.ДатаНачалаИсполнения;
	Иначе
		// проверим корректность периода
		ПроверкаКорректностиЗаполненияРеквизитов(Элемент, "ГруппаДлительностьИсполнения");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияИсполненияПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	ПроверкаКорректностиЗаполненияРеквизитов(Элемент, "ГруппаДлительностьИсполнения");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоРейса_ОрганизацияСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(Элемент.Имя, Элемент.Имя);
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(ЭтаФорма, "МедосмотрВыезд", ПараметрыРеквизитаФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПослеРейса_ОрганизацияСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(Элемент.Имя, Элемент.Имя);
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(ЭтаФорма, "МедосмотрЗаезд", ПараметрыРеквизитаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПеревозкиПриИзменении(Элемент)
	
	Если Объект.ВидПеревозки <> ПредопределенноеЗначение("Перечисление.Saby_ВидПеревозки.КоммерческиеПеревозки") Тогда
		Объект.ВидКоммерческойПеревозки = ПредопределенноеЗначение(
			"Перечисление.Saby_ВидКоммерческойПеревозки.ПустаяСсылка");
	КонецЕсли;
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоОтправленияНажатие(Элемент, СтандартнаяОбработка)
	ИзменитьМестоОтправления(СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МестоОтправленияЗаполнить(Элемент, СтандартнаяОбработка)
	ИзменитьМестоОтправления(СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПослерейсовыйМедосмотрТребуетсяПриИзменении(Элемент)
	ПослерейсовыйМедосмотрТребуетсяПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаполнитьЛицензияДоРейсаНажатие(Элемент)
	ИзменитьДанныеОтветственногоЛица("МедосмотрВыезд", "Медосмотр");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаполнитьЛицензияПослеРейсаНажатие(Элемент)
	ИзменитьДанныеОтветственногоЛица("МедосмотрЗаезд", "Медосмотр");
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибки

&НаКлиенте
Функция СоответствиеТаблицФормыИОбъекта()
	
	СоответствиеТаблицФормыИОбъекта = Новый Соответствие;
	СоответствиеТаблицФормыИОбъекта.Вставить("Водители", "ОтветственныеЛица");
	СоответствиеТаблицФормыИОбъекта.Вставить("Прицепы",  "ТранспортныеСредства");
	
	Возврат СоответствиеТаблицФормыИОбъекта;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаОшибокПриАктивизацииСтроки(Элемент)

	ОбработатьВызовТаблицыОшибок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОшибокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ОбработатьВызовТаблицыОшибок();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВызовТаблицыОшибок()
	
	СоответствиеТаблиц = СоответствиеТаблицФормыИОбъекта();
	Saby_ТНОбщегоНазначенияКлиент.РасшифровкаЗаписиТаблицыОшибок(ЭтаФорма, СоответствиеТаблиц);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибки

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьВСбис(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКоманды", "ВыгрузитьВСбис");
	
	ПроцедураОбменДаннымиЭПЛ = Новый ОписаниеОповещения("ОбменДаннымиЭПЛ", ЭтаФорма, ДополнительныеПараметры);
	
	Saby_ТНОбщегоНазначенияКлиент.ПроверитьМодифицированностьИПродолжитьВыполнение(ПроцедураОбменДаннымиЭПЛ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДокумент(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКоманды", "ПрочитатьДокумент");
	
	ПроцедураОбменДаннымиЭПЛ = Новый ОписаниеОповещения("ОбменДаннымиЭПЛ", ЭтаФорма, ДополнительныеПараметры);
	
	Saby_ТНОбщегоНазначенияКлиент.ПроверитьМодифицированностьИПродолжитьВыполнение(ПроцедураОбменДаннымиЭПЛ);
	
КонецПроцедуры

#Область КомандыЛенты

&НаКлиенте
Процедура ЛентаВлево(Команда)
	
	СдвинутьЛенту(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛентаВправо(Команда)
	
	СдвинутьЛенту(Истина);
	
КонецПроцедуры

#КонецОбласти // КомандыЛенты

&НаКлиенте
Процедура ОбновитьДанныеПоОшибкам(Команда)
	
	ПроцедураОбновитьДанныеПоОшибкамНаКлиенте = Новый ОписаниеОповещения(
		"ОбновитьДанныеПоОшибкамНаКлиенте",
		ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияКлиент.ПроверитьМодифицированностьИПродолжитьВыполнение(
		ПроцедураОбновитьДанныеПоОшибкамНаКлиенте, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОшибки(Команда)
	
	Элементы.ФормаПоказатьСкрытьОшибки.Пометка = Не Элементы.ФормаПоказатьСкрытьОшибки.Пометка;
	
	ОбновитьВнешнийВидЭлементовОшибок();
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
	ПроцедураОткрытьПечатнуюФорму = Новый ОписаниеОповещения(
		"ОткрытьПечатнуюФорму",
		ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияКлиент.ПроверитьМодифицированностьИПродолжитьВыполнение(
		ПроцедураОткрытьПечатнуюФорму);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииПослеЗаписиНаСервере()
	
	ЗаполнитьРасчетныеРеквизиты();
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьЛенту(ЭтаФорма, Истина);
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
	ОбновитьВидимостьПоЭтапуИУчастнику();
	
	Saby_ТНОбщегоНазначенияСервер.УстановитьОтборТаблицыОтветственных(Элементы.Водители, "Водитель");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИДоступностьЭлементов()
	
	ЭтоКоммерческаяПеревозка = (Объект.ВидПеревозки = Перечисления.Saby_ВидПеревозки.КоммерческиеПеревозки);
	
	Элементы.ДоРейса_ОрганизацияСтрокой.Видимость    = Объект.ДоРейса_МедосмотрСторонняяОрганизация;
	Элементы.ПослеРейса_ОрганизацияСтрокой.Видимость = Объект.ПослеРейса_МедосмотрСторонняяОрганизация;
	
	Элементы.ДатаОкончанияИсполнения.Видимость            = ЭтаФорма.ДлительностьИсполненияПериод;
	Элементы.ВидКоммерческойПеревозки.Видимость           = ЭтоКоммерческаяПеревозка;
	Элементы.ДекорацияЗаполнитьМестоОтправления.Видимость = Не ЗначениеЗаполнено(Объект.МестоОтправления);
	Элементы.ГруппаМедосмотрПослеРейса.Видимость          = Объект.ПослерейсовыйМедосмотрТребуется;
	
	// Скрытие данных медработников
	Признаки = ПризнакиДокумента();
	
	СкрытьМедРаботника_ДоРейса = 
		Объект.ДоРейса_МедосмотрСторонняяОрганизация И Признаки.Этапы.ВыпускДоступен;
		
	СкрытьМедРаботника_ПослеРейса = 
		Объект.ПослеРейса_МедосмотрСторонняяОрганизация И Признаки.Этапы.ВыпускДоступен;
		
	Элементы.МедосмотрВыездСтрокой.Видимость     = Не СкрытьМедРаботника_ДоРейса; 
	Элементы.ГруппаДоРейса_Лицензия.Видимость    = Не СкрытьМедРаботника_ДоРейса;
	
	Элементы.МедосмотрЗаездСтрокой.Видимость     = Не СкрытьМедРаботника_ПослеРейса;
	Элементы.ГруппаПослеРейса_Лицензия.Видимость = Не СкрытьМедРаботника_ПослеРейса;
	
	// Завершен ДО, блокируем все изменения
	Если Признаки.Этапы.ДОЗавершен Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// СНИЛС
	Элементы.ВодителиСНИЛС.Видимость = ЭтаФорма.ИспользоватьСНИЛС;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьПоЭтапуИУчастнику()
	
	Признаки = ПризнакиДокумента();
	
	Элементы.ГруппаДокументОснование.Видимость = Признаки.Этапы.ВыпускДоступен
		Или ЗначениеЗаполнено(Объект.ДокументОснование_Идентификатор);
	Элементы.ГруппаКомандыДокументаОснования.Видимость = Признаки.Этапы.ВыпускДоступен;
		
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СтраницаОсновное");
	МассивЭлементов.Добавить("СтраницаМедосмотр");
	Saby_ТНОбщегоНазначенияКлиентСервер.ИзменитьСвойствоЭлементовФормы(
		ЭтаФорма, "Видимость", Признаки.Этапы.Номер >= 1, МассивЭлементов);
	
	Элементы.СтраницаТехОсмотр.Видимость = Признаки.Этапы.Номер >= 1 И Не Признаки.ЭтоЗаменаВодителя;
		
	НомерТитулаВыпускающий = 4;
		
	ЭтапВыпускающийИлиПосле = Признаки.Этапы.Номер >= НомерТитулаВыпускающий;
	Элементы.СтраницаПоказанияОдометра.Видимость = ЭтапВыпускающийИлиПосле;
	
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("СтраницаОсновное");
	МассивЭлементов.Добавить("ГруппаНомерДата");
	МассивЭлементов.Добавить("ВодителиСтрокой");
	МассивЭлементов.Добавить("ГруппаПрицепы");
	МассивЭлементов.Добавить("ПослерейсовыйМедосмотрТребуется");
	МассивЭлементов.Добавить("ГруппаМестоОтправления");
	Saby_ТНОбщегоНазначенияКлиентСервер.ИзменитьСвойствоЭлементовФормы(
		ЭтаФорма, "ТолькоПросмотр", Не Признаки.Этапы.ВыпускДоступен, МассивЭлементов);
		
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ДоРейса_МедосмотрСторонняяОрганизация");
	МассивЭлементов.Добавить("ПослеРейса_МедосмотрСторонняяОрганизация");
	МассивЭлементов.Добавить("МестоОтправления");
	МассивЭлементов.Добавить("ДекорацияЗаполнитьМестоОтправления");
	Saby_ТНОбщегоНазначенияКлиентСервер.ИзменитьСвойствоЭлементовФормы(
		ЭтаФорма, "Доступность", Признаки.Этапы.ВыпускДоступен, МассивЭлементов);

	ОбновитьВидимостьПолейПредрейсовогоМедосмотра(Признаки);
	
	ОбновитьВидимостьПолейПредрейсовогоТехосмотра(Признаки);
	
	ОбновитьВидимостьПолейПослерейсовогоМедосмотра(Признаки);
	
	Элементы.ГруппаВыезд.ТолькоПросмотр = Не Признаки.Этапы.ВыпускающийДоступен;
	Элементы.ГруппаЗаезд.ТолькоПросмотр = Не Признаки.Этапы.ПринимающийДоступен;
	
	ОбновитьДоступностьПолейЗаменыВодителя(Признаки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьПолейПредрейсовогоМедосмотра(Признаки)
	
	Элементы.ГруппаДоРейса.ТолькоПросмотр = Не (Признаки.Этапы.ПредрейсовыйМедосмотрДоступен
		Или Признаки.Этапы.ВыпускДоступен);
	
	Элементы.ДоРейса_ОрганизацияСтрокой.ТолькоПросмотр = Не Признаки.Этапы.ВыпускДоступен;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьПолейПредрейсовогоТехосмотра(Признаки)
	
	Элементы.СтраницаТехОсмотр.ТолькоПросмотр = Не (Признаки.Этапы.ПредрейсовыйТехосмотрДоступен
												Или Признаки.Этапы.ВыпускДоступен);
													
	Если Не Элементы.СтраницаТехОсмотр.ТолькоПросмотр Тогда
		
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("ГруппаВыпуск_Дата");
		МассивЭлементов.Добавить("ТО_РазрешенВыпускПосле");
		Saby_ТНОбщегоНазначенияКлиентСервер.ИзменитьСвойствоЭлементовФормы(
			ЭтаФорма, "ТолькоПросмотр", Не Признаки.Этапы.ПредрейсовыйТехосмотрДоступен, МассивЭлементов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьПолейПослерейсовогоМедосмотра(Признаки)
	
	Элементы.ГруппаПослеРейса.ТолькоПросмотр = Не (Признаки.Этапы.ПослерейсовыйМедосмотрДоступен
		Или Признаки.Этапы.ВыпускДоступен);
												   
	Элементы.ПослеРейса_ОрганизацияСтрокой.ТолькоПросмотр = Не Признаки.Этапы.ВыпускДоступен;											   										   
	
КонецПроцедуры

&НаСервере
Функция ПризнакиДокумента()
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Этапы",     Новый Структура);
	РезультатФункции.Вставить("Исходящий", Объект.Направление = Перечисления.Saby_Направление.Исходящий);
	
	РезультатФункции.Вставить("ЭтоЗаменаВодителя", ЗначениеЗаполнено(Объект.ПЛПредыдущий));
	
	ТипыТитулов = Saby_ТНОбщегоНазначенияСервер.ВсеЗначенияПеречисления("Saby_ТипТитулаЭПЛ");
	
	ДОЗавершен = Saby_ТНОбщегоНазначенияКлиентСервер.ДокументооборотЗавершен(ЭтаФорма);
	
	ВыпускДоступен = Saby_ТНОбщегоНазначенияСервер.ТипТитулаДоступенУчастнику(
		ЭтаФорма,
		Объект.ТекущиеЭтапы,
		ТипыТитулов["Выпуск"],
		ДОЗавершен);
		
	РезультатФункции.Этапы.Вставить("ВыпускДоступен", ВыпускДоступен);
	
	ПредрейсовыйМедосмотрДоступен = Saby_ТНОбщегоНазначенияСервер.ТипТитулаДоступенУчастнику(
		ЭтаФорма,
		Объект.ТекущиеЭтапы,
		ТипыТитулов["ПредрейсовыйМедосмотр"],
		ДОЗавершен);
	
	РезультатФункции.Этапы.Вставить("ПредрейсовыйМедосмотрДоступен", ПредрейсовыйМедосмотрДоступен);
	
	ПредрейсовыйТехосмотрДоступен = Saby_ТНОбщегоНазначенияСервер.ТипТитулаДоступенУчастнику(
		ЭтаФорма,
		Объект.ТекущиеЭтапы,
		ТипыТитулов["ПредрейсовыйТехосмотр"],
		ДОЗавершен);
		
	РезультатФункции.Этапы.Вставить("ПредрейсовыйТехосмотрДоступен", ПредрейсовыйТехосмотрДоступен);
	
	ВыпускающийДоступен = Saby_ТНОбщегоНазначенияСервер.ТипТитулаДоступенУчастнику(
		ЭтаФорма,
		Объект.ТекущиеЭтапы,
		ТипыТитулов["Выпускающий"],
		ДОЗавершен);
		
	РезультатФункции.Этапы.Вставить("ВыпускающийДоступен", ВыпускающийДоступен);
	
	ПринимающийДоступен = Saby_ТНОбщегоНазначенияСервер.ТипТитулаДоступенУчастнику(
		ЭтаФорма,
		Объект.ТекущиеЭтапы,
		ТипыТитулов["Принимающий"],
		ДОЗавершен);
		
	РезультатФункции.Этапы.Вставить("ПринимающийДоступен", ПринимающийДоступен);
	
	ПослерейсовыйМедосмотрДоступен = Saby_ТНОбщегоНазначенияСервер.ТипТитулаДоступенУчастнику(
		ЭтаФорма,
		Объект.ТекущиеЭтапы,
		ТипыТитулов["ПослерейсовыйМедосмотр"],
		ДОЗавершен);
		
	РезультатФункции.Этапы.Вставить("ПослерейсовыйМедосмотрДоступен", ПослерейсовыйМедосмотрДоступен);
	
	РезультатФункции.Этапы.Вставить("ДОЗавершен", ДОЗавершен);
	
	Если РезультатФункции.Этапы.ВыпускДоступен Тогда
		ПорядковыйНомер = 1;
	ИначеЕсли РезультатФункции.Этапы.ПредрейсовыйМедосмотрДоступен Тогда
		ПорядковыйНомер = 2;
	ИначеЕсли РезультатФункции.Этапы.ПредрейсовыйТехосмотрДоступен Тогда
		ПорядковыйНомер = 3;
	ИначеЕсли РезультатФункции.Этапы.ВыпускающийДоступен Тогда
		ПорядковыйНомер = 4;
	ИначеЕсли РезультатФункции.Этапы.ПринимающийДоступен Тогда
		ПорядковыйНомер = 5;
	ИначеЕсли РезультатФункции.Этапы.ПослерейсовыйМедосмотрДоступен Тогда
		ПорядковыйНомер = 6;
	ИначеЕсли ДОЗавершен Тогда
		ПорядковыйНомер = 7;
	Иначе
		ПорядковыйНомер = 8;
	КонецЕсли;
	
	РезультатФункции.Этапы.Вставить("Номер", ПорядковыйНомер);
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Процедура ОбновитьДоступностьПолейЗаменыВодителя(Признаки = Неопределено)
	
	Если Признаки = Неопределено Тогда
		Признаки = ПризнакиДокумента();
	КонецЕсли;
	
	ДоступнаЗаменаВодителя = Признаки.Этапы.ПринимающийДоступен
		И Не Признаки.Этапы.ДОЗавершен
		И Не ДокументЗаменыВодителяУжеЕсть();
		
	Элементы.ФормаДокументSaby_ПутевойЛистСоздатьНаОсновании.Доступность = ДоступнаЗаменаВодителя;
	
	ОснованиеПутевойЛист = ЗначениеЗаполнено(Объект.ДокументОснование_Идентификатор)
		И Объект.ДокументОснование_ОбъектМетаданных = "Saby_ПутевойЛист";
	
	ЭтоПутевойЛистЗаменыВодителя = ЗначениеЗаполнено(Объект.ПЛПредыдущий) Или ОснованиеПутевойЛист;
	
	Если ЭтоПутевойЛистЗаменыВодителя Тогда		
		ПодсказкаПризнакНачалаРейса = ОтображениеПодсказки.Кнопка;
	Иначе
		ПодсказкаПризнакНачалаРейса = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	Элементы.ПризнакНачалаРейса.ОтображениеПодсказки = ПодсказкаПризнакНачалаРейса;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ОрганизацияСтрокой");
	МассивЭлементов.Добавить("ТранспортноеСредствоСтрокой");
	МассивЭлементов.Добавить("ГруппаПрицепы");
	МассивЭлементов.Добавить("ПрицепыСтрокой");
	МассивЭлементов.Добавить("ГруппаДлительностьИсполнения");
	МассивЭлементов.Добавить("ВидПеревозки");
	МассивЭлементов.Добавить("ГруппаВидКоммерческойПеревозки");
	МассивЭлементов.Добавить("ВидТранспортногоСообщения");
	МассивЭлементов.Добавить("ГруппаМестоОтправления");
	МассивЭлементов.Добавить("ГруппаАдресаПогрузкиВыгрузки");
	Saby_ТНОбщегоНазначенияКлиентСервер.ИзменитьСвойствоЭлементовФормы(
		ЭтаФорма, "ТолькоПросмотр", ЭтоПутевойЛистЗаменыВодителя, МассивЭлементов);
	
КонецПроцедуры

// Заполнение реквизитов формы при изменение, связанной информации
// или первоначальной инициализации формы
&НаСервере
Процедура ЗаполнитьРасчетныеРеквизиты()
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	// Документ основание
	Если ЗначениеЗаполнено(Объект.ДокументОснование_Идентификатор) Тогда 
		 ДокументОснование = Документы[Объект.ДокументОснование_ОбъектМетаданных].ПолучитьСсылку(
		 	Новый УникальныйИдентификатор(Объект.ДокументОснование_Идентификатор));
		 Элементы.ДекорацияДокументОснование.Заголовок = СокрЛП(ДокументОснование);
	КонецЕсли;
	
	// ТС
	МодульТНОбщегоНазначенияКлиентСервер.ОбновитьТранспортныеСредстваНаФорме(ЭтаФорма);
	
	// Водители
	МодульТНОбщегоНазначенияКлиентСервер.ОбновитьВодителейНаФорме(ЭтаФорма);
	
	ОбновитьВсеОтветственныеЛица();
	
	ЭтаФорма.ДлительностьИсполненияПериод = Объект.ДатаНачалаИсполнения <> Объект.ДатаОкончанияИсполнения;
		
	// Активный этап и индикация состояния
	Saby_ТНОбщегоНазначенияСервер.ОтобразитьНаФормеСбисЭтапИСостояние(ЭтаФорма);
	
	ОбновитьВсеОрганизации();
	
	// СНИЛС
	ЭтаФорма.ИспользоватьСНИЛС = ХранилищеОбщихНастроек.Загрузить("Saby", "ИспользоватьСНИЛС");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсеОтветственныеЛица()
	
	ОбновитьОтветственноеЛицо("МедосмотрВыезд");
	ОбновитьОтветственноеЛицо("МедосмотрЗаезд");
	ОбновитьОтветственноеЛицо("Техосмотр");
	ОбновитьОтветственноеЛицо("ОдометрВыезд");
	ОбновитьОтветственноеЛицо("ОдометрЗаезд");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсеОрганизации()
	
	ЭтаФорма.ОрганизацияСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		Объект.ДанныеЮрЛиц, "Оформитель");
	ЭтаФорма.ДоРейса_ОрганизацияСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		Объект.ДанныеЮрЛиц, "МедосмотрВыезд");
	ЭтаФорма.ПослеРейса_ОрганизацияСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		Объект.ДанныеЮрЛиц, "МедосмотрЗаезд");
	
КонецПроцедуры

#Область ОбработкаОповещений

&НаКлиенте
Процедура ОбработатьОповещениеОбновитьДокумент(Параметр) Экспорт
	
	ЭтаФорма.ТаблицаОшибок.Очистить();
	ЭтаФорма.КоличествоОшибок = 0;
	
	ЭтаФорма.Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеВыполнитьПереходНаФорме(Параметр) Экспорт
	
	ОбменДаннымиЭПЛ("ОбновитьАктивныйЭтап");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеЗавершениеВыполнитьДействиеНаФорме(Параметр) Экспорт
	
	Если Параметр.status = "error" Тогда
		
		Saby_ТНОбщегоНазначенияКлиент.ОбработатьОшибкиИзФормыВыполнитьДействие(ЭтаФорма, Объект.Ссылка, Параметр);
		
		ЭтаФорма.Прочитать();
		
	Иначе
		
		ОбменДаннымиЭПЛ("ОбновитьАктивныйЭтап");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбновленияДанныхТранспортныхСредств(Результат, ДополнительныеПараметры) Экспорт
	
	ПослеОбновленияДанныхТранспортныхСредствНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДанныхОтветственного(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", РезультатЗакрытия.Роль);
	
	НайденныеСтроки = Объект.ОтветственныеЛица.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		Строка = НайденныеСтроки[0];
	Иначе
		Строка = Объект.ОтветственныеЛица.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Строка, РезультатЗакрытия);
	
	ОбновитьОтветственноеЛицо(РезультатЗакрытия.Роль, , РезультатЗакрытия);
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПечатнуюФорму(Результат, ДополнительныеПараметры) Экспорт
	
	Saby_ТНОбщегоНазначенияКлиент.СоздатьИОткрытьПечатнуюФорму(Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьИДоступностьЭлементовНаКлиенте() Экспорт
	ОбновитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти // ОбработкаОповещений

&НаКлиенте
Процедура ОбменДаннымиЭПЛ(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИмяКоманды = Результат;
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ИмяКоманды") Тогда
		ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	КонецЕсли;
	
	Если ИмяКоманды = "ВыгрузитьВСбис" Тогда
		ДанныеДляОбработки = Новый Массив;
		ПараметрыВыгрузки = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки(Объект.Ссылка);
		ДанныеДляОбработки.Добавить(ПараметрыВыгрузки);
	Иначе
		ДанныеДляОбработки = Новый Массив;
		ПараметрыЗагрузки = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыЗагрузки(Объект.Ссылка);
		Если ИмяКоманды = "ОбновитьАктивныйЭтап" Тогда
			ПараметрыЗагрузки.ТекущийТитул = АктивныйЭтапСтрокой;
			ПараметрыЗагрузки.ТолькоАктивныйЭтап = Истина;
		КонецЕсли;
		ПараметрыЗагрузки.ИзДокумента = Истина;
		ПараметрыЗагрузки.ИмяМетаданных = "Saby_ПутевойЛист";
		ДанныеДляОбработки.Добавить(ПараметрыЗагрузки);
	КонецЕсли;
	
	ДополнительныеПараметрыОбмена = Новый Структура;
	ДополнительныеПараметрыОбмена.Вставить("ДвоичныеДанныеОбработки", Неопределено);
	
	Saby_ТНОбщегоНазначенияКлиент.ВыполнитьКомандуСбис(
		ЭтаФорма,
		ИмяКоманды,
		ДанныеДляОбработки,
		ДополнительныеПараметрыОбмена);
		
КонецПроцедуры

#Область Лента

&НаКлиенте
Процедура ДекорацияТитулОбработкаНавигационнойСсылки(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Saby_ТНОбщегоНазначенияКлиент.ОбработкаНавигационнойСсылкиЛенты(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьРеквизитИзТитула(СтрокаЛенты) Экспорт
	
	Если СтрокаЛенты.НаименованиеТитула = "Выпуск" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ПризнакНачалаРейса;
	ИначеЕсли СтрокаЛенты.НаименованиеТитула = "ПредрейсовыйМедосмотр" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ДоРейса_МедосмотрСторонняяОрганизация;
	ИначеЕсли СтрокаЛенты.НаименованиеТитула = "ПредрейсовыйТехосмотр" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ТО_ДатаВыпускаВРейс;
	ИначеЕсли СтрокаЛенты.НаименованиеТитула = "Выпускающий" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Выезд_Дата;
	ИначеЕсли СтрокаЛенты.НаименованиеТитула = "Принимающий" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Заезд_Дата;
	ИначеЕсли СтрокаЛенты.НаименованиеТитула = "ПослерейсовыйМедосмотр" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ПослеРейса_МедосмотрСторонняяОрганизация;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТитула(НаименованиеТитула, ИдентификаторТитула, Описание) Экспорт
	
	Если Описание <> "ПредыдущийПутевойЛист" И Описание <> "ЗаменаВодителя" Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаДокумент = ПолучитьСсылкуНаПутевойЛист(ИдентификаторТитула);
	
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		ПоказатьЗначение(, СсылкаНаДокумент);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не найден путевой лист по идентификатору %1.";
		Сообщение.Текст = СтрШаблон(Сообщение.Текст, ИдентификаторТитула);
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТитулОтрицательноЗавершен(СтрокаЛенты) Экспорт
	
	ОтрицательноЗавершенПослеТО = СтрокаЛенты.ТипТитула = Перечисления.Saby_ТипТитулаЭПЛ.ПредрейсовыйТехосмотр
		И Объект.ТО_НеРазрешенВыпускПосле;
		
	ОтрицательноЗавершенПослеМО = СтрокаЛенты.ТипТитула = Перечисления.Saby_ТипТитулаЭПЛ.ПредрейсовыйМедосмотр
		И Объект.ДоРейса_НеДопущенПослеМедосмотра;
	
	Возврат ОтрицательноЗавершенПослеТО Или ОтрицательноЗавершенПослеМО;
	
КонецФункции

&НаСервере
Процедура СдвинутьЛенту(Знач Вправо)
	
	Saby_ТНОбщегоНазначенияСервер.СдвинутьЛенту(ЭтаФорма, Вправо);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЛентуНаСервере() Экспорт
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьЛенту(ЭтаФорма, Истина);
	
	ОбновитьВидимостьПоЭтапуИУчастнику();
	
КонецПроцедуры

#КонецОбласти // Лента

#Область Ошибки

&НаКлиенте
Процедура ОбновитьДанныеПоОшибкамНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьДанныеПоОшибкамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоОшибкамНаСервере(Знач Ошибки = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ссылка", Объект.Ссылка);
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьОшибки(
		ЭтаФорма,
		ДополнительныеПараметры,
		Ошибки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВнешнийВидЭлементовОшибок()
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДекорациюНаСервере(Знач ПараметрыВыделенияДекорации) Экспорт
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьДекорацию(ЭтаФорма, ПараметрыВыделенияДекорации);
	
КонецПроцедуры

#КонецОбласти // Ошибки

&НаСервере
Функция ЗаполнениеНаОснованииINI() Экспорт
	
	Результат = Saby_ТНОбщегоНазначенияСервер.ЗаполнитьНаОснованииINI(Объект, ДокументОснование);
	Если ЗначениеЗаполнено(Результат) Тогда
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОграничитьТипыДокументовОснованийНаСервере() Экспорт
	
	Saby_ТНОбщегоНазначенияСервер.ОграничитьТипыДокументовОснований(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура ПослеОбновленияДанныхТранспортныхСредствНаСервере()
	
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьТранспортныеСредстваНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДанныеОтветственногоЛица(РольСтрокой, ИмяФормы = "")
	
	Если ПустаяСтрока(ИмяФормы) Тогда
		ИмяФормы = РольСтрокой;
	КонецЕсли;
	
	ФормаТолькоПросмотр = ФормаОтветственногоТолькоПросмотр(РольСтрокой);
	
	ПараметрыФормы = ДанныеИзТаблицыПоОтбору("ОтветственныеЛица", РольСтрокой);
	ПараметрыФормы.Вставить("Наименование", ИмяФормы);
	ПараметрыФормы.Вставить("РольСтрокой",  РольСтрокой);
	
	СкрываемыеЭлементы = Новый Массив;
	СкрываемыеЭлементы.Добавить("ГруппаТелефоны");
	
	ПараметрыФормы.Вставить("СкрываемыеЭлементы", СкрываемыеЭлементы);
	
	Если ФормаТолькоПросмотр Тогда
		ПараметрыФормы.Вставить("ТолькоПросмотр", ФормаТолькоПросмотр);
	КонецЕсли;
	
	Saby_ТНОбщегоНазначенияКлиент.ИзменитьДанныеВодителяОтветственногоЛица(
		ЭтаФорма,
		ПараметрыФормы,
		"ПослеВводаДанныхОтветственного");
		
КонецПроцедуры

&НаКлиенте
Функция ФормаОтветственногоТолькоПросмотр(РольСтрокой)
	
	Признаки = ПризнакиДокумента();
	ФормаТолькоПросмотр = Признаки.Этапы.ДОЗавершен;
	Если ФормаТолькоПросмотр Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если РольСтрокой = "МедосмотрВыезд" Тогда
		
		ФормаТолькоПросмотр = Не Признаки.Этапы.ПредрейсовыйМедосмотрДоступен И Не Признаки.Этапы.ВыпускДоступен;
		
	ИначеЕсли РольСтрокой = "МедосмотрЗаезд" Тогда
		
		ФормаТолькоПросмотр = Не Признаки.Этапы.ПослерейсовыйМедосмотрДоступен И Не Признаки.Этапы.ВыпускДоступен;
		
	ИначеЕсли РольСтрокой = "Техосмотр" Тогда
		
		ФормаТолькоПросмотр = Не Признаки.Этапы.ПредрейсовыйТехосмотрДоступен И Не Признаки.Этапы.ВыпускДоступен;
		
	ИначеЕсли РольСтрокой = "ОдометрВыезд" Тогда
		
		ФормаТолькоПросмотр = Не Признаки.Этапы.ВыпускающийДоступен;
		
	ИначеЕсли РольСтрокой = "ОдометрЗаезд" Тогда
		
		ФормаТолькоПросмотр = Не Признаки.Этапы.ВыпускающийДоступен И Не Признаки.Этапы.ПринимающийДоступен;
		
	ИначеЕсли РольСтрокой = "Водитель" Тогда
		
		ФормаТолькоПросмотр = Не Признаки.Этапы.ВыпускДоступен;
		
	Иначе 
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат ФормаТолькоПросмотр;
	
КонецФункции

&НаСервере
Функция ДанныеИзТаблицыПоОтбору(Знач ИмяТЧ, Роль)
	
	ЭтоЮрЛицо = ИмяТЧ = "ДанныеЮрЛиц";
	
	Если ТипЗнч(Роль) = Тип("Строка") Тогда
		Если ЭтоЮрЛицо Тогда
			Роль = Перечисления.Saby_РолиКонтрагентов[Роль];
		Иначе 	
			Роль = Перечисления.Saby_РолиОтветственных[Роль];
		КонецЕсли;	
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Роль);
	
	НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		
		Строка = НайденныеСтроки[0];
		
		Если ЭтоЮрЛицо Тогда
			Структура = Saby_ТНОбщегоНазначенияКлиентСервер.ШаблонДанныхЮрЛица();
			Структура.Заполнена = Истина;
		Иначе
			Структура = Saby_ТНОбщегоНазначенияСервер.СтруктураДанныхОтветственногоЛица();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Структура, Строка);
	Иначе 
		Структура = Новый Структура;
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Процедура ОбновитьОтветственноеЛицо(Знач Роль, ЭлементФормы = "", Структура = Неопределено)
	
	Если ПустаяСтрока(ЭлементФормы) Тогда
		ЭлементФормы = СокрЛП(Роль) + "Строкой";
	КонецЕсли;
	
	Если ТипЗнч(Роль) = Тип("Строка") Тогда
		Роль = Перечисления.Saby_РолиОтветственных[Роль];
	КонецЕсли;
	
	Если Структура = Неопределено Тогда
		Структура = ДанныеИзТаблицыПоОтбору("ОтветственныеЛица", Роль);
	КонецЕсли;
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьОтветственногоНаФорме(ЭтаФорма, ЭлементФормы, Структура);
	
	ОбновитьДополнительныеРеквизиты(Роль, Структура);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДополнительныеРеквизиты(Роль, Структура)
	
	Если Роль = Перечисления.Saby_РолиОтветственных.МедосмотрВыезд Тогда
		Элементы.ДекорацияЗаполнитьЛицензияДоРейса.Заголовок = СформироватьНаименованиеЛицензии(Структура);
	ИначеЕсли Роль = Перечисления.Saby_РолиОтветственных.МедосмотрЗаезд Тогда
		Элементы.ДекорацияЗаполнитьЛицензияПослеРейса.Заголовок = СформироватьНаименованиеЛицензии(Структура);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьНаименованиеЛицензии(Структура)
	
	Если Не ЗначениеЗаполнено(Структура) Тогда
		Лицензия = "Заполнить";
	Иначе 	
		
		ШаблонЛицензии = "%1 №%2 Действует с %3 по %4";
		
		Лицензия = СтрШаблон(
			ШаблонЛицензии,
			Структура.Серия,
			Структура.Номер,
			Формат(Структура.ДатаВыдачи, "ДФ=dd.MM.yyyy"),
			Формат(Структура.ДатаОкончанияДействия, "ДФ=dd.MM.yyyy"));
		
	КонецЕсли;
	
	Возврат Лицензия;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьМестоОтправления(СтандартнаяОбработка)
	
	ПараметрыВыбораАдреса = Новый Структура;
	ПараметрыВыбораАдреса.Вставить("Роль",           "Оформитель");
	ПараметрыВыбораАдреса.Вставить("Значение",       Объект.МестоОтправленияЗначение);
	ПараметрыВыбораАдреса.Вставить("Текст",          Объект.МестоОтправления);
	ПараметрыВыбораАдреса.Вставить("ТолькоПросмотр", Элементы.ГруппаМестоОтправления.ТолькоПросмотр);
	
	Saby_ТНОбщегоНазначенияКлиент.АдресНачалоВыбора(ЭтаФорма, ПараметрыВыбораАдреса, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПослерейсовыйМедосмотрТребуетсяПриИзмененииНаСервере()
	
	ОчиститьДанныеПослерейсовогоМедосмотра();
	
	Если Объект.ПослерейсовыйМедосмотрТребуется Тогда
		ЗаполнитьПослерейсовыйМедосмотрНаОснованииПредрейсового();
	КонецЕсли;
	
	ОбновитьОтветственноеЛицо("МедосмотрЗаезд");
	ЭтаФорма.ПослеРейса_ОрганизацияСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		Объект.ДанныеЮрЛиц, "МедосмотрЗаезд");
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеПослерейсовогоМедосмотра()
	
	Объект.ПослеРейса_МедосмотрСторонняяОрганизация = Ложь;
	
	ОтборПоРоли = Новый Структура;
	ОтборПоРоли.Вставить("Роль", ПредопределенноеЗначение("Перечисление.Saby_РолиОтветственных.МедосмотрЗаезд"));
	
	НайденныеОтветственные = Объект.ОтветственныеЛица.НайтиСтроки(ОтборПоРоли);
	Для Каждого СтрокаОтветственного Из НайденныеОтветственные Цикл
		Объект.ОтветственныеЛица.Удалить(СтрокаОтветственного);
	КонецЦикла;
	
	ОтборПоРоли.Вставить("Роль", ПредопределенноеЗначение("Перечисление.Saby_РолиКонтрагентов.МедосмотрЗаезд"));
	
	НайденныеЮрЛица = Объект.ДанныеЮрЛиц.НайтиСтроки(ОтборПоРоли);
	Для Каждого СтрокаЮрЛица Из НайденныеЮрЛица Цикл
		
		ОтборПоРоли.Вставить("КлючСтроки_ДанныеЮрЛиц", СтрокаЮрЛица.КлючСтроки);
		
		НайденныеКонтактныеДанные = Объект.КонтактныеДанные.НайтиСтроки(ОтборПоРоли);
		Для Каждого СтрокаКонтактныхДанных Из НайденныеКонтактныеДанные Цикл
			Объект.КонтактныеДанные.Удалить(СтрокаКонтактныхДанных);
		КонецЦикла;
		
		Объект.ДанныеЮрЛиц.Удалить(СтрокаЮрЛица);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПослерейсовыйМедосмотрНаОснованииПредрейсового()
	
	Объект.ПослеРейса_МедосмотрСторонняяОрганизация = Объект.ДоРейса_МедосмотрСторонняяОрганизация;
	
	ОтборПоРоли = Новый Структура;
	ОтборПоРоли.Вставить("Роль", ПредопределенноеЗначение("Перечисление.Saby_РолиОтветственных.МедосмотрВыезд"));
	
	РольМедосмотрЗаезд = ПредопределенноеЗначение("Перечисление.Saby_РолиОтветственных.МедосмотрЗаезд");
	
	НайденныеОтветственные = Объект.ОтветственныеЛица.НайтиСтроки(ОтборПоРоли);
	Для Каждого СтрокаОтветственного Из НайденныеОтветственные Цикл
		НоваяСтрокаОтветственного = Объект.ОтветственныеЛица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОтветственного, СтрокаОтветственного);
		НоваяСтрокаОтветственного.КлючСтроки = 0;
		НоваяСтрокаОтветственного.Роль       = РольМедосмотрЗаезд;
	КонецЦикла;
	
	ОтборПоРоли.Вставить("Роль", ПредопределенноеЗначение("Перечисление.Saby_РолиКонтрагентов.МедосмотрВыезд"));
	
	РольМедосмотрЗаезд = ПредопределенноеЗначение("Перечисление.Saby_РолиКонтрагентов.МедосмотрЗаезд");
	
	НайденныеЮрЛица = Объект.ДанныеЮрЛиц.НайтиСтроки(ОтборПоРоли);
	Для Каждого СтрокаЮрЛица Из НайденныеЮрЛица Цикл
		
		НоваяСтрокаЮрЛица = Объект.ДанныеЮрЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЮрЛица, СтрокаЮрЛица);
		НоваяСтрокаЮрЛица.КлючСтроки = 0;
		НоваяСтрокаЮрЛица.Роль       = РольМедосмотрЗаезд;
		
		ОтборПоРоли.Вставить("КлючСтроки_ДанныеЮрЛиц", СтрокаЮрЛица.КлючСтроки);
		
		НайденныеКонтактныеДанные = Объект.КонтактныеДанные.НайтиСтроки(ОтборПоРоли);
		Для Каждого СтрокаКонтактныхДанных Из НайденныеКонтактныеДанные Цикл
			НоваяСтрокаКонтактныхДанных = Объект.КонтактныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаКонтактныхДанных, СтрокаКонтактныхДанных);
			НоваяСтрокаКонтактныхДанных.КлючСтроки_ДанныеЮрЛиц = НоваяСтрокаЮрЛица.КлючСтроки;
			НоваяСтрокаКонтактныхДанных.Роль                   = РольМедосмотрЗаезд;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаПутевойЛист(Знач ИдентификаторДокумента)
	
	СсылкаНаДокумент = Документы.Saby_ПутевойЛист.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторДокумента));
	Если Saby_ТНОбщегоНазначенияСервер.СсылкаСуществует(СсылкаНаДокумент) Тогда
		Возврат СсылкаНаДокумент;
	КонецЕсли;
	
	Аккаунт = Saby_ТНОбщегоНазначенияСервер.АвторизованныйАккаунтСтрокой();
	
	ВыборкаСостояния = РегистрыСведений.Saby_Состояние.ПрочитатьПоUID(ИдентификаторДокумента, , Аккаунт);
	Если ВыборкаСостояния.Следующий() Тогда
		Возврат ВыборкаСостояния.Объект;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ДокументЗаменыВодителяУжеЕсть()
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Saby_ПутевойЛист.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Saby_ПутевойЛист КАК Saby_ПутевойЛист
	|ГДЕ
	|	Saby_ПутевойЛист.Ссылка <> &Ссылка
	|	И Saby_ПутевойЛист.ДокументОснование_Идентификатор = &ИдентификаторДокумента";
	
	ЗапросДанных.УстановитьПараметр("Ссылка",                 Объект.Ссылка);
	ЗапросДанных.УстановитьПараметр("ИдентификаторДокумента", Строка(Объект.Ссылка.УникальныйИдентификатор()));
	
	Возврат Не ЗапросДанных.Выполнить().Пустой() Или ЗначениеЗаполнено(Объект.ПЛСледующий);
	
КонецФункции

#Область ПроверкаКорректностиЗаполненияРеквизитов

&НаКлиенте
Процедура ПроверкаКорректностиЗаполненияРеквизитов(Элемент, ИмяЭлементаПодсказки)
	
	ЕстьОшибка = Ложь;
	
	// Проверка что заезд происходит позже чем был выезд
	Если Элемент = Элементы.Заезд_Дата
		Или Элемент = Элементы.Заезд_Время Тогда 
		
		ЕстьОшибка = (Объект.Заезд_ДатаВремя < Объект.Выезд_ДатаВремя);
		
		Если Не ЕстьОшибка Тогда
			ЕстьОшибка = НеВходитВПериодДействияПутевогоЛиста(Объект.Заезд_ДатаВремя);
		КонецЕсли;	
		
		ВключитьОтключитьУсловноеОформление("ОтметкаНеВерногоЗаезда", ЕстьОшибка);		
		
	// дата то в периоде действия путевого листа	
	ИначеЕсли Элемент = Элементы.ТО_ДатаВыпускаВРейс Тогда
					
		ЕстьОшибка = НеВходитВПериодДействияПутевогоЛиста(Объект.ТО_ДатаВремяВыпускаВРейс);				
		ВключитьОтключитьУсловноеОформление("ОтметкаНеВерногоВыпуска", ЕстьОшибка);	
		
	// дата выезда	
	ИначеЕсли Элемент = Элементы.Выезд_Дата
		Или Элемент = Элементы.Выезд_Время Тогда
		
		ЕстьОшибка = НеВходитВПериодДействияПутевогоЛиста(Объект.Выезд_ДатаВремя);		
		ВключитьОтключитьУсловноеОформление("ОтметкаНеВерногоВыезда", ЕстьОшибка);		
		
	ИначеЕсли Элемент = Элементы.ДатаНачалаИсполнения 
		Или Элемент = Элементы.ДатаОкончанияИсполнения Тогда
		
		ЕстьОшибка = (Объект.ДатаНачалаИсполнения > Объект.ДатаОкончанияИсполнения);
		ВключитьОтключитьУсловноеОформление("ОтметкаНеВернойДатыОкончания", ЕстьОшибка);
		
	Иначе
		Возврат;		
	КонецЕсли;	
	
	УстановитьСнятьПодсказкуЭлемента(ИмяЭлементаПодсказки, ЕстьОшибка);
	
КонецПроцедуры

&НаКлиенте
Функция НеВходитВПериодДействияПутевогоЛиста(ДатаПроверки)
	
	Ошибка = (ДатаПроверки < НачалоДня(Объект.ДатаНачалаИсполнения)
				Или КонецДня(Объект.ДатаОкончанияИсполнения) < ДатаПроверки);

    Возврат Ошибка;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСнятьПодсказкуЭлемента(ИмяЭлементаПодсказки, ЕстьОшибка = Ложь)

	Если ЕстьОшибка Тогда
		СпособОтображения = ОтображениеПодсказки.ОтображатьСправа;				
	Иначе 	
		СпособОтображения = ОтображениеПодсказки.Нет;	
	КонецЕсли;
	
	Элементы[ИмяЭлементаПодсказки].ОтображениеПодсказки = СпособОтображения;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьОтключитьУсловноеОформление(Знач ИмяСвойства, Знач ЕстьОшибки)
	
	Отключить = "Отключить" + ИмяСвойства;
	Включить  = "Включить"  + ИмяСвойства;
	
	Для Каждого ЭлементУО Из УсловноеОформление.Элементы Цикл 
		
		Если ЭлементУО.Представление = Отключить Тогда			
			ЭлементУО.Использование = Не ЕстьОшибки;			
		ИначеЕсли ЭлементУО.Представление = Включить Тогда
			ЭлементУО.Использование = ЕстьОшибки;
		Иначе
			Продолжить;
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти // ПроверкаКорректностиЗаполненияРеквизитов

#Область include_etrn_base_Document_ПутевойЛист_DocumentForm_ФормаДокумента_СлужебныеПроцедурыИФункции
#КонецОбласти // include_etrn_base_Document_ПутевойЛист_DocumentForm_ФормаДокумента_СлужебныеПроцедурыИФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
