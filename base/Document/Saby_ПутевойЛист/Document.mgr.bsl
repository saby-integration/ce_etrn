  
#Область ПрограммныйИнтерфейс

// Возвращает массив типов доступных для заполнения на основании.
//
// Параметры:
//  ЗначенияПоУмолчанию - Булево - признак получения типов по умолчанию
//
// Возвращаемое значение:
//   Массив - массив типов выбранных для заполнения на основании.
//
Функция ТипыДляЗаполненияНаОсновании(ЗначенияПоУмолчанию = Ложь) Экспорт
	
	Если Не ЗначенияПоУмолчанию Тогда
		РезультатФункции = ПользовательскиеТипыДляЗаполненияНаОсновании();
	Иначе
		РезультатФункции = Неопределено;
	КонецЕсли;
	
	Если РезультатФункции = Неопределено Тогда
		РезультатФункции = ТипыПоУмолчаниюДляЗаполненияНаОсновании();
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Сохраняет выбранные типы документов для заполнения на основании выбранные пользователем.
//
// Параметры:
//  МассивТипов - Массив - массив типов
//
Процедура СохранитьВыбранныеТипыДляЗаполненияНаОсновании(МассивТипов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеОбщихНастроек.Сохранить("Saby", "ТипыДляЗаполненияНаОснованииДокументаЭПЛ", МассивТипов);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает структуру реквизитов документа, относящиеся титулу
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.Saby_ПутевойЛист - ссылка на документ
//  ТипТитула - ПеречислениеСсылка.Saby_ТипТитулаЭПЛ - ссылка на тип титула
//
// Возвращаемое значение:
//   Структура - структура полученных данных документа
//
Функция ДанныеДокумента(СсылкаНаДокумент, ТипТитула) Экспорт
	
	ТипыТитулов = Saby_ТНОбщегоНазначенияСервер.ВсеЗначенияПеречисления("Saby_ТипТитулаЭПЛ");
	
	ЭтоПервыйТитул = Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов("Saby_ПутевойЛист", "ЭтоПервыйТитул", ТипТитула);
	
	Если ЭтоПервыйТитул Тогда
		
		Возврат ВыгрузкаДанныеВыпуск(СсылкаНаДокумент);
		
	ИначеЕсли ТипТитула = ТипыТитулов["ПредрейсовыйМедосмотр"] Тогда
		
		Возврат ВыгрузкаДанныеПредрейсовыйМедосмотр(СсылкаНаДокумент);
		
	ИначеЕсли ТипТитула = ТипыТитулов["ПредрейсовыйТехосмотр"] Тогда
		
		Возврат ВыгрузкаДанныеПредрейсовыйТехосмотр(СсылкаНаДокумент);
		
	ИначеЕсли ТипТитула = ТипыТитулов["Выпускающий"] Тогда
		
		Возврат ВыгрузкаДанныеВыпускающий(СсылкаНаДокумент);
		
	ИначеЕсли ТипТитула = ТипыТитулов["Принимающий"] Тогда
		
		Возврат ВыгрузкаДанныеПринимающий(СсылкаНаДокумент);
		
	ИначеЕсли ТипТитула = ТипыТитулов["ПослерейсовыйМедосмотр"] Тогда
		
		Возврат ВыгрузкаДанныеПослерейсовыйМедосмотр(СсылкаНаДокумент);
		
	Иначе
		
		Возврат Новый Структура;
		
	КонецЕсли;
	
КонецФункции

// Добавляет данные титулов для выгрузки на онлайн
//
// Параметры:
//  ТекущийЭтап - ПеречислениеСсылка.Saby_ТипТитулаЭПЛ - тип текущего титула
//  ДанныеТитула - Структура - структура реквизитов и таблиц документа для выгрузки
//
// Возвращаемое значение:
//   Структура - структура титула для отправки
//
Функция ВложениеНаВыгрузку(ТекущийЭтап, ДанныеТитула) Экспорт
	
	ЭтоПервыйТитул = Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов("Saby_ПутевойЛист", "ЭтоПервыйТитул", ТекущийЭтап);
	
	Если ЭтоПервыйТитул Тогда
		
		Возврат ТитулВыпуск(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = Перечисления.Saby_ТипТитулаЭПЛ.ПредрейсовыйМедосмотр Тогда
		
		СтруктураТитула = ТитулПредрейсовыйМедосмотр(ДанныеТитула);
		
		СтруктураТитула.Вставить("СторонняяОрганизация", Не СтруктураТитула.ШтатныйСотрудник);
		СтруктураТитула.Удалить("ШтатныйСотрудник");
		
		Возврат СтруктураТитула;
		
	ИначеЕсли ТекущийЭтап = Перечисления.Saby_ТипТитулаЭПЛ.ПредрейсовыйТехосмотр Тогда
		
		Возврат ТитулПредрейсовыйТехосмотр(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = Перечисления.Saby_ТипТитулаЭПЛ.Выпускающий Тогда
		
		Возврат ТитулВыпускающий(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = Перечисления.Saby_ТипТитулаЭПЛ.Принимающий Тогда
		
		Возврат ТитулПринимающий(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = Перечисления.Saby_ТипТитулаЭПЛ.ПослерейсовыйМедосмотр Тогда
		
		СтруктураТитула = ТитулПослерейсовыйМедосмотр(ДанныеТитула);
		
		СтруктураТитула.Вставить("СторонняяОрганизация", Не СтруктураТитула.ШтатныйСотрудник);
		СтруктураТитула.Удалить("ШтатныйСотрудник");
		
		Возврат СтруктураТитула;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

#Область Команды

// Заполняет список команд печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти // Команды

// Возвращает параметры для выполнения ФЛК
//
// Параметры:
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//
// Возвращаемое значение:
//   Структура - структура данных для дальнейшей проверки реквизитов
//
Функция ПараметрыПроверкиРеквизитов(ДанныеДокумента, ПараметрыВыгрузки) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ПроверяемыеРеквизиты", Новый Массив);
	
	ОшибкиПоРеквизитам = Saby_ТНОбщегоНазначенияСервер.СоответствиеРеквизитовОшибок(ПараметрыВыгрузки);
	РезультатФункции.Вставить("ОшибкиПоРеквизитам", ОшибкиПоРеквизитам);
	
	ТипыТитулов = Saby_ТНОбщегоНазначенияСервер.ВсеЗначенияПеречисления("Saby_ТипТитулаЭПЛ");
	
	ЭтоПервыйТитул = Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов(
		"Saby_ПутевойЛист", "ЭтоПервыйТитул", ПараметрыВыгрузки.ТипТитула);
	
	Если ЭтоПервыйТитул Тогда
		
		ДополнитьПроверяемыеРеквизитыЭтапаВыпуск(ДанныеДокумента, РезультатФункции.ПроверяемыеРеквизиты);
		
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов["ПредрейсовыйМедосмотр"] Тогда
		
		ДополнитьПроверяемыеРеквизитыЭтапаПредрейсовыйМедосмотр(РезультатФункции.ПроверяемыеРеквизиты);
		
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов["ПредрейсовыйТехосмотр"] Тогда
		
		ДополнитьПроверяемыеРеквизитыЭтапаПредрейсовыйТехосмотр(РезультатФункции.ПроверяемыеРеквизиты);
		
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов["Выпускающий"] Тогда
		
		ДополнитьПроверяемыеРеквизитыЭтапаВыпускающий(РезультатФункции.ПроверяемыеРеквизиты);
		
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов["Принимающий"] Тогда
		
		ДополнитьПроверяемыеРеквизитыЭтапаПринимающий(РезультатФункции.ПроверяемыеРеквизиты);
		
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов["ПослерейсовыйМедосмотр"] Тогда
		
		ДополнитьПроверяемыеРеквизитыЭтапаПослерейсовыйМедосмотр(РезультатФункции.ПроверяемыеРеквизиты);
		
	Иначе
		РезультатФункции.ПроверяемыеРеквизиты = Новый Массив;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает имя таблицы документа с учетом специфики
//
// Параметры:
//  ИмяТабличнойЧасти - Строка - наименование табличной части из конфигуратора
//  СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - строка табличной части документа
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//
// Возвращаемое значение:
//   Строка - наименование таблицы на форме документа
//
Функция ИмяТЧДокумента(ИмяТабличнойЧасти, СтрокаТабличнойЧасти, ДанныеДокумента) Экспорт
	
	Возврат ИмяТабличнойЧасти;
	
КонецФункции

Функция ПроверятьРеквизитДокумента(ИмяРеквизита, ДанныеДокумента) Экспорт
	
	Если ИмяРеквизита = "ДанныеЮрЛицМедосмотрВыезд" Или ИмяРеквизита = "ДанныеЮрЛицМедосмотрЗаезд" Тогда
		Возврат ПроверятьРеквизитЮрЛиц(Неопределено, Неопределено, Неопределено, ДанныеДокумента);
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает признак необходимости ФЛК реквизитов табличной части документа
//
// Параметры:
//  СтрокаТЧ - СтрокаТаблицыЗначений - строка табличной части документа
//  ИмяТЧ - Строка - имя табличной части документа
//  ИмяРеквизита - Строка - имя реквизита табличной части документа
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//
// Возвращаемое значение:
//   Булево - Истина, если проверять необходимо
//
Функция ПроверятьРеквизитТЧДокумента(СтрокаТЧ, ИмяТЧ, ИмяРеквизита, ДанныеДокумента) Экспорт
	
	Если ИмяТЧ = "ТранспортныеСредства" Тогда
		
		Возврат ПроверятьРеквизитТранспортногоСредства(СтрокаТЧ, ИмяТЧ, ИмяРеквизита);
		
	ИначеЕсли ИмяТЧ = "ДанныеЮрЛицМедосмотрВыезд" Или ИмяТЧ = "ДанныеЮрЛицМедосмотрЗаезд" Тогда
		
		Возврат ПроверятьРеквизитЮрЛиц(СтрокаТЧ, ИмяТЧ, ИмяРеквизита, ДанныеДокумента);
		
	ИначеЕсли ИмяТЧ = "ДанныеЮрЛиц" Тогда
		
		Возврат СтрокаТЧ.Роль = Перечисления.Saby_РолиКонтрагентов.Оформитель;
		
	ИначеЕсли ИмяТЧ = "Водители" Тогда
		
		Возврат ПроверятьРеквизитВодителя(СтрокаТЧ, ИмяРеквизита);
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Выполняет нестандартные проверки ФЛК с логикой сложнее, чем заполнен незаполнен.
//
// Параметры:
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//  ПараметрыПроверкиРеквизитов - Структура - см. функцию ПараметрыПроверкиРеквизитов
//  Ошибки - Массив,Неопределено - массив для накопления ошибок
//
Процедура ВыполнитьДополнительныеПроверкиФЛК(ДанныеДокумента, ПараметрыВыгрузки,
		ПараметрыПроверкиРеквизитов, Ошибки) Экспорт
		
	ТипыТитулов = Saby_ТНОбщегоНазначенияСервер.ВсеЗначенияПеречисления("Saby_ТипТитулаЭПЛ");
	
	ЭтоПервыйТитул = Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов(
		"Saby_ПутевойЛист", "ЭтоПервыйТитул", ПараметрыВыгрузки.ТипТитула);
	
	Если ЭтоПервыйТитул Тогда
		
		ДопПроверкиФЛКВыпуск(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки);
		
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов["ПредрейсовыйТехосмотр"] Тогда
		
		ДопПроверкиФЛКПредрейсовыйТехосмотр(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ВложенияЗагружены(Вложения, Титул, ОбъектДок, ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Вложения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВложенияМассив = Saby_ТНОбщегоНазначенияКлиентСервер.ЗначениеВМассив(Вложения);
	
	Если Титул = Перечисления.Saby_ТипТитулаЭПЛ.Выпуск Тогда
		
		ЗагрузкаТитулаВыпуск(ОбъектДок, ВложенияМассив, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭПЛ.ПредрейсовыйМедосмотр Тогда
		
		ЗагрузкаТитулаПредрейсовыйМедосмотр(ОбъектДок, ВложенияМассив, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭПЛ.ПредрейсовыйТехосмотр Тогда
		
		ЗагрузкаТитулаПредрейсовыйТехосмотр(ОбъектДок, ВложенияМассив, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭПЛ.Выпускающий Тогда
		
		ЗагрузкаТитулаВыпускающий(ОбъектДок, ВложенияМассив, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭПЛ.Принимающий Тогда
		
		ЗагрузкаТитулаПринимающий(ОбъектДок, ВложенияМассив, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭПЛ.ПослерейсовыйМедосмотр Тогда
		
		ЗагрузкаТитулаПослерейсовыйМедосмотр(ОбъектДок, ВложенияМассив, Титул, ДопПараметры);
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ТитулыДляЗагрузки(ОбъектДок, ПараметрыЗагрузки) Экспорт
	
	ТекущиеЗначения = Saby_ТНЗагрузкаСервер.ТекущиеЗначенияДокумента(ОбъектДок, ПараметрыЗагрузки);
	
	Этап = ТекущиеЗначения.Титул;
	
	Если ЗначениеЗаполнено(ТекущиеЗначения.Состояние) Тогда  
	   КодСостояния = Saby_ТНОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеЗначения.Состояние, "ИдентификаторСБИС");
	КонецЕсли;   
	
	ТипыТитулов = Saby_ТНОбщегоНазначенияСервер.ВсеЗначенияПеречисления("Saby_ТипТитулаЭПЛ");
	
    МассивТитуловДляЗагрузки = Новый Массив;
	
	ДОЗавершенУспешно      = 7;
	ДОЗавершенОтрицательно = 9;
	
	Если КодСостояния = ДОЗавершенУспешно
		Или КодСостояния = ДОЗавершенОтрицательно Тогда
		
		Если ПараметрыЗагрузки.ТолькоАктивныйЭтап Тогда
			МассивТитуловДляЗагрузки.Добавить(Этап);
		Иначе
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["ПослерейсовыйМедосмотр"]);
		КонецЕсли;
		
		Возврат МассивТитуловДляЗагрузки;	
		
	КонецЕсли;	
	
	Если ПараметрыЗагрузки.ТолькоАктивныйЭтап Тогда
		
		// В регистре состояния нет данных о текущем этапе, при этом документооборот не завершен.
		Если Этап.Пустая() Тогда
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["Выпуск"]);
		Иначе
			МассивТитуловДляЗагрузки.Добавить(Этап);
		КонецЕсли;
		
	Иначе
		
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["Выпуск"]);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["ПредрейсовыйМедосмотр"]);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["ПредрейсовыйТехосмотр"]);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["Выпускающий"]);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["Принимающий"]);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["ПослерейсовыйМедосмотр"]);
		
	КонецЕсли;
	
	Возврат МассивТитуловДляЗагрузки;

КонецФункции

Функция ТекущиеЭтапыДокумента(Форма) Экспорт
	
	РезультатФункции = Новый Массив;
	
	Для Каждого СтрокаТекущегоТитула Из Форма.Объект.ТекущиеЭтапы Цикл
		РезультатФункции.Добавить(СтрокаТекущегоТитула.ТипТитула);
	КонецЦикла;
	
	Если РезультатФункции.Количество() = 0 И Не Saby_ТНОбщегоНазначенияКлиентСервер.ДокументооборотЗавершен(Форма) Тогда
		РезультатФункции.Добавить(Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов("Saby_ПутевойЛист", "ПервыйТитул"));
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#Область ЗаполнениеНаОснованииИНИИнтерфейс

Функция ШаблонИмениINI() Экспорт
	
	Возврат "Blockly_%1_ЭПЛ_read";
	
КонецФункции

Процедура СформироватьНовыеОснования(СтруктураРезультата, ДанныеИзИНИ) Экспорт
	
	ОформительСсылка = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеИзИНИ, "Документ.ОформительСсылка");
	Если ЗначениеЗаполнено(ОформительСсылка) Тогда
		
		СтруктураОснования = Saby_ТНОбщегоНазначенияСервер.СтруктураОснования(
			ОформительСсылка, Перечисления.Saby_РолиКонтрагентов.Оформитель);
		СтруктураРезультата.НовыеОснования.Добавить(СтруктураОснования);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПодстановки(ДанныеИзИНИ, ПараметрыЗаполнения) Экспорт
	
	Если ПараметрыЗаполнения.РольКонтрагента = Перечисления.Saby_РолиКонтрагентов.Оформитель Тогда
		Документ = Новый Соответствие;
		Документ.Вставить("Оформитель", Saby_ТНОбщегоНазначенияСервер.ДанныеЮрЛицаИзИНИ(ДанныеИзИНИ));
		ДанныеИзИНИ.Вставить("Документ", Документ);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ЗаполнениеНаОснованииИНИИнтерфейс

Функция ДоступныеОрганизацииЭтапы(ОбъектДок, ПараметрыЗагрузки) Экспорт
	
	РезультатФункции = Новый Соответствие;
	
	ДанныеНашейОрганизации = Saby_ТНЗагрузкаСервер.ИННКППОрганизации(
		ПараметрыЗагрузки.ДанныеДокумента["НашаОрганизация"]);
	ДанныеКонтрагента      = Saby_ТНЗагрузкаСервер.ИННКППОрганизации(
		ПараметрыЗагрузки.ДанныеДокумента["Контрагент"]);
	
	// Если есть узел контрагент в полученных данных,
	// то ЭПЛ пришел внешней организации на выполнение медосмотра или техосмотра.
	// Если пришел, то считаем , что доступ есть.
	ЭтапыДоступны = ДанныеКонтрагента.ЕстьДанные;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Роль", Перечисления.Saby_РолиКонтрагентов.Оформитель);
	СтруктураПоиска.Вставить("ИНН",  ДанныеНашейОрганизации.ИНН);
	СтруктураПоиска.Вставить("КПП",  ДанныеНашейОрганизации.КПП);
	
	НайденныеСтроки = ОбъектДок.ДанныеЮрЛиц.НайтиСтроки(СтруктураПоиска);
	
	// Если организация текущего авторизованного пользователя сбис (НашаОрганизация) совпадает с оформителем
	// и организация присутсвует в справочнике организаций,
	// то считаем, что данному пользователю доступно закрытие этапов.
	ЭтоОрганизацияОформитель = НайденныеСтроки.Количество() > 0
		И Saby_ТНОбщегоНазначенияСервер.ОрганизацияПрисутствуетВБазе(СтруктураПоиска.ИНН, СтруктураПоиска.КПП);
	ЭтапыДоступны = ЭтапыДоступны Или ЭтоОрганизацияОформитель;
	
	ВнешниеЭтапы = Новый Массив;
	ВнешниеЭтапы.Добавить("Внешний МО");
	ВнешниеЭтапы.Добавить("Внешний ТО");
	ВнешниеЭтапы.Добавить("Внешний послерейсовый МО");
	
	Для Каждого ТекущийЭтап Из ПараметрыЗагрузки.ДанныеДокумента["ТекущиеЭтапы"] Цикл
		
		НаименованиеЭтапа = ТекущийЭтап["Наименование"];
		
		Если ВнешниеЭтапы.Найти(НаименованиеЭтапа) = Неопределено Тогда
			РезультатФункции.Вставить(НаименованиеЭтапа, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДобавитьДополнительныеДанныеВЛенту(МенеджерВременныхТаблиц, СсылкаНаДокумент) Экспорт
	
	// Пояснения к запросу
	// Если титул в регистре есть то берется период из регистра, иначе берем стандартный период,
	//  соответствующий периоду в Перечисления.Saby_ТипТитулаЭПЛ.СформироватьТаблицуДополнения.
	// Стандартный период титула Выпуск НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, 1), ДЕНЬ).
	// Стандартный период титула Выпускающий НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, 4), ДЕНЬ).
	//
	// Значение ТипТитулаПорядок выбрано так исходя из значений для основных титулов.
	//  Для титула "Предыдущий путевой лист" -1, так как основной титул "Выпуск" имеет порядковый номер 1,
	//    либо 0 если он есть в регистре. Так как предыдущий путевой лист должен отображаться раньше, то -1.
	//  Для титула "Замена водителя" 4.1, так как основной титул "Выпускающий" имеет порядковый номер 4,
	//    либо 0 если он есть в регистре. Так как замена водителя должна отображаться позже, то 4.1.
	//
	// Период и порядок участвуют в сортировке итоговых данных см. РегистрыСведений.Saby_ДанныеТитулов.ДанныеДляЛенты()
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ВложенныйЗапрос.ПериодПервогоТитула) КАК ПериодПервогоТитула,
	|	ВложенныйЗапрос.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	МАКСИМУМ(ВложенныйЗапрос.ПериодТитулаВыпускающий) КАК ПериодТитулаВыпускающий
	|ПОМЕСТИТЬ ДатыТитулов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Saby_ДанныеТитуловСрезПоследних.Период КАК ПериодПервогоТитула,
	|		Saby_ДанныеТитуловСрезПоследних.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|		НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, 4), ДЕНЬ) КАК ПериодТитулаВыпускающий
	|	ИЗ
	|		РегистрСведений.Saby_ДанныеТитулов.СрезПоследних(
	|				,
	|				СсылкаНаДокумент = &СсылкаНаДокумент
	|					И ТипТитула = &ТипТитулаВыпуск) КАК Saby_ДанныеТитуловСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, 1), ДЕНЬ),
	|		Saby_ДанныеТитуловСрезПоследних.СсылкаНаДокумент,
	|		Saby_ДанныеТитуловСрезПоследних.Период
	|	ИЗ
	|		РегистрСведений.Saby_ДанныеТитулов.СрезПоследних(
	|				,
	|				СсылкаНаДокумент = &СсылкаНаДокумент
	|					И ТипТитула = &ТипТитулаВыпускающий) КАК Saby_ДанныеТитуловСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, 1), ДЕНЬ),
	|		&СсылкаНаДокумент,
	|		НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, 4), ДЕНЬ)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.СсылкаНаДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДополнения.Период КАК Период,
	|	ТаблицаДополнения.ТипТитула КАК ТипТитула,
	|	ТаблицаДополнения.ИдентификаторТитула КАК ИдентификаторТитула,
	|	ТаблицаДополнения.Основной КАК Основной,
	|	ТаблицаДополнения.Данные КАК Данные,
	|	ТаблицаДополнения.ТипТитулаОтказа КАК ТипТитулаОтказа,
	|	ТаблицаДополнения.ТипТитулаПорядок КАК ТипТитулаПорядок,
	|	ТаблицаДополнения.ЭтоТекущийЭтап КАК ЭтоТекущийЭтап
	|ПОМЕСТИТЬ РасширеннаяТаблицаДополнения
	|ИЗ
	|	ТаблицаДополнения КАК ТаблицаДополнения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДатыТитулов.ПериодПервогоТитула,
	|	""ПредыдущийПутевойЛист"",
	|	ВЫБОР
	|		КОГДА Saby_ПутевойЛист.ПЛПредыдущий <> """"
	|			ТОГДА Saby_ПутевойЛист.ПЛПредыдущий
	|		ИНАЧЕ Saby_ПутевойЛист.ДокументОснование_Идентификатор
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	&ДанныеПредыдущегоЭПЛ,
	|	ЗНАЧЕНИЕ(Перечисление.Saby_ТипТитулаЭПЛ.ПустаяСсылка),
	|	-1,
	|	ЛОЖЬ
	|ИЗ
	|	ДатыТитулов КАК ДатыТитулов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Saby_ПутевойЛист КАК Saby_ПутевойЛист
	|		ПО ДатыТитулов.СсылкаНаДокумент = Saby_ПутевойЛист.Ссылка
	|ГДЕ
	|	Saby_ПутевойЛист.Ссылка = &СсылкаНаДокумент
	|	И ИСТИНА В (Saby_ПутевойЛист.ПЛПредыдущий <> """", Saby_ПутевойЛист.ДокументОснование_Идентификатор <> """"
	|				И Saby_ПутевойЛист.ДокументОснование_ОбъектМетаданных = ""Saby_ПутевойЛист"")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДатыТитулов.ПериодТитулаВыпускающий,
	|	""ЗаменаВодителя"",
	|	ВЫБОР
	|		КОГДА Saby_ПутевойЛист.ПЛСледующий <> """"
	|			ТОГДА Saby_ПутевойЛист.ПЛСледующий
	|		КОГДА Saby_ПутевойЛист1.Ссылка <> ЗНАЧЕНИЕ(Документ.Saby_ПутевойЛист.ПустаяСсылка)
	|			ТОГДА Saby_ПутевойЛист1.Ссылка
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	&ДанныеСледующегоЭПЛ,
	|	ЗНАЧЕНИЕ(Перечисление.Saby_ТипТитулаЭПЛ.ПустаяСсылка),
	|	4.1,
	|	ЛОЖЬ
	|ИЗ
	|	ДатыТитулов КАК ДатыТитулов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Saby_ПутевойЛист КАК Saby_ПутевойЛист
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Saby_ПутевойЛист КАК Saby_ПутевойЛист1
	|			ПО (Saby_ПутевойЛист1.ДокументОснование_Идентификатор = &УникальныйИдентификаторДокумента)
	|		ПО ДатыТитулов.СсылкаНаДокумент = Saby_ПутевойЛист.Ссылка
	|ГДЕ
	|	Saby_ПутевойЛист.Ссылка = &СсылкаНаДокумент
	|	И ИСТИНА В (Saby_ПутевойЛист.ПЛСледующий <> """", НЕ Saby_ПутевойЛист1.Ссылка ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДополнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасширеннаяТаблицаДополнения.Период КАК Период,
	|	РасширеннаяТаблицаДополнения.ТипТитула КАК ТипТитула,
	|	РасширеннаяТаблицаДополнения.ИдентификаторТитула КАК ИдентификаторТитула,
	|	РасширеннаяТаблицаДополнения.Основной КАК Основной,
	|	РасширеннаяТаблицаДополнения.Данные КАК Данные,
	|	РасширеннаяТаблицаДополнения.ТипТитулаОтказа КАК ТипТитулаОтказа,
	|	РасширеннаяТаблицаДополнения.ТипТитулаПорядок КАК ТипТитулаПорядок,
	|	РасширеннаяТаблицаДополнения.ЭтоТекущийЭтап КАК ЭтоТекущийЭтап
	|ПОМЕСТИТЬ ТаблицаДополнения
	|ИЗ
	|	РасширеннаяТаблицаДополнения КАК РасширеннаяТаблицаДополнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДатыТитулов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РасширеннаяТаблицаДополнения";
	
	ЗапросДанных.УстановитьПараметр("ТипТитулаВыпуск",                  Перечисления.Saby_ТипТитулаЭПЛ.Выпуск);
	ЗапросДанных.УстановитьПараметр("ТипТитулаВыпускающий",             Перечисления.Saby_ТипТитулаЭПЛ.Выпускающий);
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент",                 СсылкаНаДокумент);
	ЗапросДанных.УстановитьПараметр("УникальныйИдентификаторДокумента", Строка(СсылкаНаДокумент.УникальныйИдентификатор()));
	ЗапросДанных.УстановитьПараметр("ТекущаяДата",                      ТекущаяДатаСеанса());
	
	ДанныеПредыдущегоЭПЛ = Новый Структура;
	ДанныеПредыдущегоЭПЛ.Вставить("Представление", "Предыдущий путевой лист");
	ЗапросДанных.УстановитьПараметр("ДанныеПредыдущегоЭПЛ", ЗначениеВСтрокуВнутр(ДанныеПредыдущегоЭПЛ));
	
	ДанныеСледующегоЭПЛ = Новый Структура;
	ДанныеСледующегоЭПЛ.Вставить("Представление", "Замена водителя");
	ЗапросДанных.УстановитьПараметр("ДанныеСледующегоЭПЛ",   ЗначениеВСтрокуВнутр(ДанныеСледующегоЭПЛ));
	
	ЗапросДанных.Выполнить();
	
КонецПроцедуры

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ПользовательскиеТипыДляЗаполненияНаОсновании()
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатФункции = ХранилищеОбщихНастроек.Загрузить("Saby", "ТипыДляЗаполненияНаОснованииДокументаЭПЛ");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ТипыПоУмолчаниюДляЗаполненияНаОсновании()
	
	РезультатФункции = Новый Массив;
	
	СинонимКонфигурации = Метаданные.Синоним;
	
	ДоступныеКонфигурации    = Saby_ТНОбщегоНазначенияСервер.ДоступныеКонфигурации();
	ЭтоДоступнаяКонфигурация = Saby_ТНОбщегоНазначенияСервер.ЭтоДоступнаяКонфигурация(
		СинонимКонфигурации, ДоступныеКонфигурации);
		
	Если Не ЭтоДоступнаяКонфигурация Тогда
		Возврат РезультатФункции;
	КонецЕсли;

	Если Метаданные.Синоним = ДоступныеКонфигурации.УАТ Тогда 
		
		РезультатФункции.Добавить(Тип("ДокументСсылка.уатМаршрутныйЛист"));
		РезультатФункции.Добавить(Тип("ДокументСсылка.уатПутевойЛист"));		
				
	КонецЕсли;	
	
	Возврат РезультатФункции;
		
КонецФункции

#Область ФЛК

Процедура ДополнитьПроверяемыеРеквизитыЭтапаВыпуск(ДанныеДокумента, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Оформитель");
	ПроверяемыеРеквизиты.Добавить("ДанныеЮрЛиц.ИНН");
	
	ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.РегистрационныйНомер");
	ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.Тип");
	ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.Марка");
	ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.Модель");
	ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.ИнвентарныйНомер");
	
	ПроверяемыеРеквизиты.Добавить("Водители");
	ПроверяемыеРеквизиты.Добавить("Водители.Фамилия");
	ПроверяемыеРеквизиты.Добавить("Водители.Имя");
	ПроверяемыеРеквизиты.Добавить("Водители.Серия");
	ПроверяемыеРеквизиты.Добавить("Водители.Номер");
	ПроверяемыеРеквизиты.Добавить("Водители.ДатаВыдачи");
	
	ПроверяемыеРеквизиты.Добавить("ДатаНачалаИсполнения");
	ПроверяемыеРеквизиты.Добавить("ДатаОкончанияИсполнения");
	ПроверяемыеРеквизиты.Добавить("ПризнакНачалаРейса");
	ПроверяемыеРеквизиты.Добавить("ВидПеревозки");
	Если ДанныеДокумента.Реквизиты.ВидПеревозки = Перечисления.Saby_ВидПеревозки.КоммерческиеПеревозки Тогда
		ПроверяемыеРеквизиты.Добавить("ВидКоммерческойПеревозки");
	КонецЕсли;
	ПроверяемыеРеквизиты.Добавить("ВидТранспортногоСообщения");
	ПроверяемыеРеквизиты.Добавить("МестоОтправления");
	
	ВидПеревозкаГрузов = Перечисления.Saby_ВидКоммерческойПеревозки.ПеревозкаНаОснованииДоговораПеревозки;
	
	Если ДанныеДокумента.Реквизиты.ВидКоммерческойПеревозки = ВидПеревозкаГрузов Тогда
		ПроверяемыеРеквизиты.Добавить("АдресаПунктовВыгрузки");
		ПроверяемыеРеквизиты.Добавить("АдресаПунктовВыгрузки.Значение");
	КонецЕсли;
	
	Если ДанныеДокумента.Реквизиты.ДоРейса_МедосмотрСторонняяОрганизация Тогда
		ПроверяемыеРеквизиты.Добавить("ДанныеЮрЛицМедосмотрВыезд");
		ПроверяемыеРеквизиты.Добавить("ДанныеЮрЛицМедосмотрВыезд.НаименованиеОрганизации");
	Иначе
		ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрВыезд");
		ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрВыезд.Фамилия");
		ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрВыезд.Имя");
	КонецЕсли;
	
	// для замены водителя ТО не нужен
	Если ПустаяСтрока(ДанныеДокумента.Реквизиты.ПЛПредыдущий) Тогда
		
		ПроверяемыеРеквизиты.Добавить("ОтветственныйТехосмотр");
		ПроверяемыеРеквизиты.Добавить("ОтветственныйТехосмотр.Фамилия");
		ПроверяемыеРеквизиты.Добавить("ОтветственныйТехосмотр.Имя");
		
	КонецЕсли;
	
	Если ДанныеДокумента.Реквизиты.ПослерейсовыйМедосмотрТребуется Тогда
		Если ДанныеДокумента.Реквизиты.ПослеРейса_МедосмотрСторонняяОрганизация Тогда
			ПроверяемыеРеквизиты.Добавить("ДанныеЮрЛицМедосмотрЗаезд");
			ПроверяемыеРеквизиты.Добавить("ДанныеЮрЛицМедосмотрЗаезд.НаименованиеОрганизации");
		Иначе
			ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрЗаезд.Фамилия");
			ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрЗаезд.Имя");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаПредрейсовыйМедосмотр(ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Водители");
	ПроверяемыеРеквизиты.Добавить("Водители.Фамилия");
	ПроверяемыеРеквизиты.Добавить("Водители.Имя");
	
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрВыезд");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрВыезд.Серия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрВыезд.Номер");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрВыезд.ДатаВыдачи");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрВыезд.ДатаОкончанияДействия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрВыезд.Фамилия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрВыезд.Имя");
	
	ПроверяемыеРеквизиты.Добавить("ДанныеЮрЛицМедосмотрВыезд");
	ПроверяемыеРеквизиты.Добавить("ДанныеЮрЛицМедосмотрВыезд.НаименованиеОрганизации");
	
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаПредрейсовыйТехосмотр(ПроверяемыеРеквизиты)
		
	ПроверяемыеРеквизиты.Добавить("ТО_НеРазрешенВыпускПосле");
	ПроверяемыеРеквизиты.Добавить("ТО_ДатаВремяВыпускаВРейс");
	
	ПроверяемыеРеквизиты.Добавить("ОтветственныйТехосмотр");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйТехосмотр.Фамилия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйТехосмотр.Имя");
		
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаВыпускающий(ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Выезд_ДатаВремя");
	ПроверяемыеРеквизиты.Добавить("Выезд_Одометр");
	
	ПроверяемыеРеквизиты.Добавить("ОтветственныйОдометрВыезд");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйОдометрВыезд.Фамилия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйОдометрВыезд.Имя");
	
	ПроверяемыеРеквизиты.Добавить("ОтветственныйОдометрЗаезд");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйОдометрЗаезд.Фамилия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйОдометрЗаезд.Имя");
	
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаПринимающий(ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Заезд_ДатаВремя");
	ПроверяемыеРеквизиты.Добавить("Заезд_Одометр");
	
	ПроверяемыеРеквизиты.Добавить("ОтветственныйОдометрЗаезд");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйОдометрЗаезд.Фамилия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйОдометрЗаезд.Имя");
	
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаПослерейсовыйМедосмотр(ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Водители");
	ПроверяемыеРеквизиты.Добавить("Водители.Фамилия");
	ПроверяемыеРеквизиты.Добавить("Водители.Имя");
	
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрЗаезд");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрЗаезд.Серия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрЗаезд.Номер");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрЗаезд.ДатаВыдачи");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрЗаезд.ДатаОкончанияДействия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрЗаезд.Фамилия");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйМедосмотрЗаезд.Имя");
	
	ПроверяемыеРеквизиты.Добавить("ДанныеЮрЛицМедосмотрЗаезд");
	ПроверяемыеРеквизиты.Добавить("ДанныеЮрЛицМедосмотрЗаезд.НаименованиеОрганизации");
	
КонецПроцедуры

Процедура ДопПроверкиФЛКВыпуск(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки)
	
	Saby_ТНОбщегоНазначенияСервер.ПроверитьЗаполнениеТранспортногоСредства(
		ДанныеДокумента, Ошибки, ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам);
			
КонецПроцедуры

Процедура ДопПроверкиФЛКПредрейсовыйТехосмотр(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки)
	
	Saby_ТНОбщегоНазначенияСервер.ПроверитьЗаполнениеТранспортногоСредства(
		ДанныеДокумента, Ошибки, ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам);
				
КонецПроцедуры

Функция ПроверятьРеквизитТранспортногоСредства(СтрокаТЧ, ИмяТЧ, ИмяРеквизита)
	
	ЭтоАвтомобиль = СтрокаТЧ.Вид = Перечисления.Saby_ВидыТС.Автомобиль;
	
	Если ЭтоАвтомобиль Тогда
		
		Если ИмяРеквизита = "РегистрационныйНомер" Тогда
			Возврат Не ЗначениеЗаполнено(СтрокаТЧ.ИнвентарныйНомер);
		ИначеЕсли ИмяРеквизита = "ИнвентарныйНомер" Тогда
			Возврат Не ЗначениеЗаполнено(СтрокаТЧ.РегистрационныйНомер);
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		
		Возврат ИмяРеквизита <> "Тип" И ИмяРеквизита <> "ИнвентарныйНомер";
		
	КонецЕсли;
	
КонецФункции

Функция ПроверятьРеквизитЮрЛиц(СтрокаТЧ, ИмяТЧ, ИмяРеквизита, ДанныеДокумента)
	
	МедосмотрПроводитСторонняяОрганизация = Ложь;
	
	Если ДанныеДокумента.Реквизиты.Свойство("ДоРейса_МедосмотрСторонняяОрганизация") Тогда
		МедосмотрПроводитСторонняяОрганизация = МедосмотрПроводитСторонняяОрганизация
			Или ДанныеДокумента.Реквизиты.ДоРейса_МедосмотрСторонняяОрганизация;
	КонецЕсли;
		
	Если ДанныеДокумента.Реквизиты.Свойство("ПослеРейса_МедосмотрСторонняяОрганизация") Тогда
		МедосмотрПроводитСторонняяОрганизация = МедосмотрПроводитСторонняяОрганизация
			Или ДанныеДокумента.Реквизиты.ПослеРейса_МедосмотрСторонняяОрганизация;
	КонецЕсли;
	
	Возврат МедосмотрПроводитСторонняяОрганизация;
	
КонецФункции

Функция ПроверятьРеквизитВодителя(СтрокаТЧ, ИмяРеквизита)
	
	Если ИмяРеквизита = "Серия" Или ИмяРеквизита = "Номер" Или ИмяРеквизита = "ДатаВыдачи" Тогда
		Возврат ЗначениеЗаполнено(СтрокаТЧ.Серия)
			Или ЗначениеЗаполнено(СтрокаТЧ.Номер)
			Или ЗначениеЗаполнено(СтрокаТЧ.ДатаВыдачи);
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти // ФЛК

#Область ДанныеДокумента

Функция ВыгрузкаДанныеВыпуск(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Номер");
	Реквизиты.Добавить("Дата");
	Реквизиты.Добавить("ВидПеревозки");
	Реквизиты.Добавить("ВидТранспортногоСообщения");
	Реквизиты.Добавить("ДокументОснование_Идентификатор");
	Реквизиты.Добавить("ДокументОснование_ОбъектМетаданных");
	Реквизиты.Добавить("Комментарий");
	Реквизиты.Добавить("МестоОтправления");
	Реквизиты.Добавить("Направление");
	Реквизиты.Добавить("НомерСбис");
	Реквизиты.Добавить("Оформитель");
	Реквизиты.Добавить("ПризнакНачалаРейса");
	Реквизиты.Добавить("ПослерейсовыйМедосмотрТребуется");
	Реквизиты.Добавить("ВидКоммерческойПеревозки");
	Реквизиты.Добавить("ДатаНачалаИсполнения");
	Реквизиты.Добавить("ДатаОкончанияИсполнения");
	Реквизиты.Добавить("ДоРейса_МедосмотрСторонняяОрганизация");
	Реквизиты.Добавить("ПослеРейса_МедосмотрСторонняяОрганизация");
	Реквизиты.Добавить("ПЛПредыдущий");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("ТранспортныеСредства");
	Таблицы.Добавить("Водители");
	Таблицы.Добавить("ОтветственныйМедосмотрВыезд");
	Таблицы.Добавить("ОтветственныйМедосмотрЗаезд");
	Таблицы.Добавить("ОтветственныйТехосмотр");
	Таблицы.Добавить("АдресаПунктовВыгрузки");
	Таблицы.Добавить("ДанныеЮрЛиц");
	Таблицы.Добавить("ДанныеЮрЛицМедосмотрВыезд");
	Таблицы.Добавить("ДанныеЮрЛицМедосмотрЗаезд");
	Таблицы.Добавить("КонтактныеДанные");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеПредрейсовыйМедосмотр(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Номер");
	Реквизиты.Добавить("Дата");
	Реквизиты.Добавить("Направление");
	Реквизиты.Добавить("ДоРейса_ДатаВремяМедосмотра");
	Реквизиты.Добавить("ДоРейса_МедосмотрСторонняяОрганизация");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("Водители");
	Таблицы.Добавить("ДанныеЮрЛицМедосмотрВыезд");
	Таблицы.Добавить("ОтветственныйМедосмотрВыезд");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеПредрейсовыйТехосмотр(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Номер");
	Реквизиты.Добавить("Дата");
	Реквизиты.Добавить("ТО_ДатаВремя");
	Реквизиты.Добавить("ТО_ДатаВремяВыпускаВРейс");
	Реквизиты.Добавить("ТО_Комментарий");
	Реквизиты.Добавить("ТО_НеРазрешенВыпускПосле");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("ТранспортныеСредства");
	Таблицы.Добавить("ОтветственныйТехосмотр");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеВыпускающий(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Номер");
	Реквизиты.Добавить("Дата");
	Реквизиты.Добавить("Выезд_ДатаВремя");
	Реквизиты.Добавить("Выезд_Одометр");
	Реквизиты.Добавить("Выезд_ОдометрКомментарии");
	Реквизиты.Добавить("ПризнакНачалаРейса");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("ОтветственныйОдометрВыезд");
	Таблицы.Добавить("ОтветственныйОдометрЗаезд");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеПринимающий(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Номер");
	Реквизиты.Добавить("Дата");
	Реквизиты.Добавить("Заезд_ДатаВремя");
	Реквизиты.Добавить("Заезд_Одометр");
	Реквизиты.Добавить("Заезд_ОдометрКомментарии");
	Реквизиты.Добавить("ПризнакНачалаРейса");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("ОтветственныйОдометрЗаезд");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеПослерейсовыйМедосмотр(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Номер");
	Реквизиты.Добавить("Дата");
	Реквизиты.Добавить("Направление");
	Реквизиты.Добавить("ПослеРейса_ДатаВремяМедосмотра");
	Реквизиты.Добавить("ПослерейсовыйМедосмотрТребуется");
	Реквизиты.Добавить("ПослеРейса_МедосмотрСторонняяОрганизация");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("Водители");
	Таблицы.Добавить("ДанныеЮрЛицМедосмотрЗаезд");
	Таблицы.Добавить("ОтветственныйМедосмотрЗаезд");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы)
	
	РезультатФункции = Новый Структура;
	
	// Ссылка всегда должна быть
	Реквизиты.Добавить("Ссылка");
	
	ТекстЗапросаРеквизитов = ТекстЗапросаРеквизитов();
	
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитыИзБД(
		РезультатФункции, СсылкаНаДокумент, Реквизиты, ТекстЗапросаРеквизитов);
	
	ДобавитьТаблицыИзБД(РезультатФункции, СсылкаНаДокумент, Таблицы);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ТекстЗапросаРеквизитов()
	
	Возврат "ВЫБРАТЬ
		|	Saby_ПутевойЛист.Ссылка КАК Ссылка,
		|	Saby_ПутевойЛист.Номер КАК Номер,
		|	Saby_ПутевойЛист.Дата КАК Дата,
		|	Saby_ПутевойЛист.ВидПеревозки КАК ВидПеревозки,
		|	Saby_ПутевойЛист.ВидТранспортногоСообщения КАК ВидТранспортногоСообщения,
		|	Saby_ПутевойЛист.Выезд_ДатаВремя КАК Выезд_ДатаВремя,
		|	Saby_ПутевойЛист.Выезд_Одометр КАК Выезд_Одометр,
		|	Saby_ПутевойЛист.Выезд_ОдометрКомментарии КАК Выезд_ОдометрКомментарии,
		|	Saby_ПутевойЛист.ДокументОснование_Идентификатор КАК ДокументОснование_Идентификатор,
		|	Saby_ПутевойЛист.ДокументОснование_ОбъектМетаданных КАК ДокументОснование_ОбъектМетаданных,
		|	Saby_ПутевойЛист.ДоРейса_ДатаВремяМедосмотра КАК ДоРейса_ДатаВремяМедосмотра,
		|	Saby_ПутевойЛист.ДоРейса_КомментарииМедосмотра КАК ДоРейса_КомментарииМедосмотра,
		|	Saby_ПутевойЛист.Заезд_ДатаВремя КАК Заезд_ДатаВремя,
		|	Saby_ПутевойЛист.Заезд_Одометр КАК Заезд_Одометр,
		|	Saby_ПутевойЛист.Заезд_ОдометрКомментарии КАК Заезд_ОдометрКомментарии,
		|	Saby_ПутевойЛист.Комментарий КАК Комментарий,
		|	Saby_ПутевойЛист.МестоОтправления КАК МестоОтправления,
		|	Saby_ПутевойЛист.Направление КАК Направление,
		|	Saby_ПутевойЛист.НомерСбис КАК НомерСбис,
		|	Saby_ПутевойЛист.Организация КАК Оформитель,
		|	Saby_ПутевойЛист.ПослеРейса_ДатаВремяМедосмотра КАК ПослеРейса_ДатаВремяМедосмотра,
		|	Saby_ПутевойЛист.ПослеРейса_КомментарииМедосмотра КАК ПослеРейса_КомментарииМедосмотра,
		|	Saby_ПутевойЛист.ПризнакНачалаРейса КАК ПризнакНачалаРейса,
		|	Saby_ПутевойЛист.ТО_ДатаВремя КАК ТО_ДатаВремя,
		|	Saby_ПутевойЛист.ТО_ДатаВремяВыпускаВРейс КАК ТО_ДатаВремяВыпускаВРейс,
		|	Saby_ПутевойЛист.ТО_Комментарий КАК ТО_Комментарий,
		|	Saby_ПутевойЛист.ТО_НеРазрешенВыпускПосле КАК ТО_НеРазрешенВыпускПосле,
		|	Saby_ПутевойЛист.ПослерейсовыйМедосмотрТребуется КАК ПослерейсовыйМедосмотрТребуется,
		|	Saby_ПутевойЛист.ВидКоммерческойПеревозки КАК ВидКоммерческойПеревозки,
		|	Saby_ПутевойЛист.ДатаНачалаИсполнения КАК ДатаНачалаИсполнения,
		|	Saby_ПутевойЛист.ДатаОкончанияИсполнения КАК ДатаОкончанияИсполнения,
		|	Saby_ПутевойЛист.ДоРейса_МедосмотрСторонняяОрганизация КАК ДоРейса_МедосмотрСторонняяОрганизация,
		|	Saby_ПутевойЛист.ПослеРейса_МедосмотрСторонняяОрганизация КАК ПослеРейса_МедосмотрСторонняяОрганизация,
		|   Saby_ПутевойЛист.ПЛПредыдущий КАК ПЛПредыдущий
		|ИЗ
		|	Документ.Saby_ПутевойЛист КАК Saby_ПутевойЛист
		|ГДЕ
		|	Saby_ПутевойЛист.Ссылка = &Ссылка";
	
КонецФункции

Процедура ДобавитьТаблицыИзБД(СтруктураДанных, СсылкаНаДокумент, Таблицы)
	
	МассивЗапросов = Новый Массив;
	
	УниверсальныйШаблонЗапроса =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Документ.Saby_ПутевойЛист.%1 КАК ТЧПутевогоЛиста
	|ГДЕ
	|	ТЧПутевогоЛиста.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ЗапросДанных = Новый Запрос;
	
	Для Каждого ИмяТаблицы Из Таблицы Цикл
		
		Если ДобавленаТаблицаОтветственных(МассивЗапросов, ИмяТаблицы, ЗапросДанных)
			Или ДобавленаТаблицаЮрЛиц(МассивЗапросов, ИмяТаблицы, ЗапросДанных) Тогда
			Продолжить;
		КонецЕсли;
			
		ТекстЗапроса = СтрШаблон(УниверсальныйШаблонЗапроса, ИмяТаблицы);
		
		МассивЗапросов.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	РазделительЗапросов = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ЗапросДанных.Текст = СтрСоединить(МассивЗапросов, РазделительЗапросов);
	ЗапросДанных.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Результат = ЗапросДанных.ВыполнитьПакет();
	Индекс = 0;
	Пока Индекс < Таблицы.Количество() Цикл
		СтруктураДанных.Вставить(Таблицы[Индекс], Результат[Индекс].Выгрузить());
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавленаТаблицаОтветственных(МассивЗапросов, ИмяТаблицы, ЗапросДанных)
	
	РезультатФункции = Ложь;
	
	ШаблонЗапросаОтветственныхЛиц =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Документ.Saby_ПутевойЛист.ОтветственныеЛица КАК Saby_ПутевойЛистОтветственныеЛица
	|ГДЕ
	|	Saby_ПутевойЛистОтветственныеЛица.Ссылка = &Ссылка
	|	И Saby_ПутевойЛистОтветственныеЛица.Роль = &Роль
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если ИмяТаблицы = "Водители" Тогда
		ИмяПараметра = "РольВодитель";
		Роль = Перечисления.Saby_РолиОтветственных.Водитель;
	ИначеЕсли ИмяТаблицы = "ОтветственныйМедосмотрВыезд" Тогда
		ИмяПараметра = "РольМедосмотрВыезд";
		Роль = Перечисления.Saby_РолиОтветственных.МедосмотрВыезд;
	ИначеЕсли ИмяТаблицы = "ОтветственныйТехосмотр" Тогда
		ИмяПараметра = "РольТехосмотр";
		Роль = Перечисления.Saby_РолиОтветственных.Техосмотр;
	ИначеЕсли ИмяТаблицы = "ОтветственныйОдометрВыезд" Тогда
		ИмяПараметра = "РольОдометрВыезд";
		Роль = Перечисления.Saby_РолиОтветственных.ОдометрВыезд;
	ИначеЕсли ИмяТаблицы = "ОтветственныйОдометрЗаезд" Тогда
		ИмяПараметра = "РольОдометрЗаезд";
		Роль = Перечисления.Saby_РолиОтветственных.ОдометрЗаезд;
	ИначеЕсли ИмяТаблицы = "ОтветственныйМедосмотрЗаезд" Тогда
		ИмяПараметра = "РольМедосмотрЗаезд";
		Роль = Перечисления.Saby_РолиОтветственных.МедосмотрЗаезд;
	Иначе
		ИмяПараметра = "";
		Роль = Неопределено;
	КонецЕсли;
	
	Если Роль <> Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ШаблонЗапросаОтветственныхЛиц, "&Роль", "&" + ИмяПараметра);
		
		ЗапросДанных.УстановитьПараметр(ИмяПараметра, Роль);
		
		МассивЗапросов.Добавить(ТекстЗапроса);
		
		РезультатФункции = Истина;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДобавленаТаблицаЮрЛиц(МассивЗапросов, ИмяТаблицы, ЗапросДанных)
	
	РезультатФункции = Ложь;
	
	ШаблонЗапросаДанныхЮрЛиц =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Документ.Saby_ПутевойЛист.ДанныеЮрЛиц КАК Saby_ПутевойЛистДанныеЮрЛиц
	|ГДЕ
	|	Saby_ПутевойЛистДанныеЮрЛиц.Ссылка = &Ссылка
	|	И Saby_ПутевойЛистДанныеЮрЛиц.Роль = &Роль
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если ИмяТаблицы = "ДанныеЮрЛицМедосмотрВыезд" Тогда
		ИмяПараметра = "РольЮрМедосмотрВыезд";
		Роль = Перечисления.Saby_РолиКонтрагентов.МедосмотрВыезд;
	ИначеЕсли ИмяТаблицы = "ДанныеЮрЛицМедосмотрЗаезд" Тогда
		ИмяПараметра = "РольЮрМедосмотрЗаезд";
		Роль = Перечисления.Saby_РолиКонтрагентов.МедосмотрЗаезд;
	Иначе
		ИмяПараметра = "";
		Роль = Неопределено;
	КонецЕсли;
	
	Если Роль <> Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ШаблонЗапросаДанныхЮрЛиц, "&Роль", "&" + ИмяПараметра);
		
		ЗапросДанных.УстановитьПараметр(ИмяПараметра, Роль);
		
		МассивЗапросов.Добавить(ТекстЗапроса);
		
		РезультатФункции = Истина;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ДанныеДокумента

#Область Выгрузка

Функция ТитулВыпуск(ДанныеДокумента)
	
	СтруктураТитула = Новый Структура;
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	// Отдельно вынесены общие данные документа
	Дата               = Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(РеквизитыОбъекта.Дата, Истина);
	ПризнакНачалаРейса = Перечисления.Saby_ПризнакНачалаРейса.КодПоЗначению(РеквизитыОбъекта.ПризнакНачалаРейса);
	ВидПеревозки       = Перечисления.Saby_ВидПеревозки.КодПоЗначению(РеквизитыОбъекта.ВидПеревозки);
	
	ПослерейсовыйМедосмотрТребуется = ?(РеквизитыОбъекта.ПослерейсовыйМедосмотрТребуется, "1", "2");
	
	ВидКоммерческойПеревозки = Перечисления.Saby_ВидКоммерческойПеревозки.КодПоЗначению(
		РеквизитыОбъекта.ВидКоммерческойПеревозки);
		
	ВидТранспортногоСообщения = Перечисления.Saby_ВидСообщенияЭПЛ.КодПоЗначению(
		РеквизитыОбъекта.ВидТранспортногоСообщения);
		
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("Номер",                    РеквизитыОбъекта.Номер);
	СтруктураДокумента.Вставить("Дата",                     Дата);
	СтруктураДокумента.Вставить("ПризнакНачалаРейса",       ПризнакНачалаРейса);
	СтруктураДокумента.Вставить("ПослерейсовыйМедосмотр",   ПослерейсовыйМедосмотрТребуется);
	СтруктураДокумента.Вставить("ВидПеревозки",             ВидПеревозки);
	СтруктураДокумента.Вставить("ВидКоммерческойПеревозки", ВидКоммерческойПеревозки);
	СтруктураДокумента.Вставить("ВидСообщения",             ВидТранспортногоСообщения);
	
	СтруктураДокумента.Вставить("Оформитель", Saby_ТНВыгрузкаСервер.ДанныеЮрЛица("Оформитель", ДанныеДокумента, Истина));
	
	ДобавитьСрокПутевогоЛиста(СтруктураДокумента, РеквизитыОбъекта);
	
	СтруктураТитула.Вставить("Документ", СтруктураДокумента);
	
	СтруктураТитула.Вставить("Маршрут", ДанныеУзлаМаршрут(ДанныеДокумента));
	
	СтруктураТитула.Вставить(
		"ТранспортноеСредство",
		Saby_ТНВыгрузкаСервер.ТранспортНаВыгрузку(ДанныеДокумента.ТранспортныеСредства, , Истина));
		
	СтруктураТитула.ТранспортноеСредство.Вставить(
		"Прицеп", Saby_ТНВыгрузкаСервер.ПрицепыНаВыгрузку(ДанныеДокумента.ТранспортныеСредства, Истина));
	
	СтруктураТитула.Вставить("Водители", Saby_ТНВыгрузкаСервер.ВодителиНаВыгрузку(ДанныеДокумента.Водители, Новый Массив));
	ДобавитьДанныеСотрудникаПоВодителям(СтруктураТитула);
	
	ДобавитьМедосмотрДляОнлайна(СтруктураТитула, ДанныеДокумента, Истина);
	
	ДобавитьТехосмотрДляОнлайна(СтруктураТитула, ДанныеДокумента);
	
	Если РеквизитыОбъекта.ПослерейсовыйМедосмотрТребуется Тогда
		ДобавитьМедосмотрДляОнлайна(СтруктураТитула, ДанныеДокумента, Ложь);
	КонецЕсли;
	
	ДобавитьЗаменуВодителя(СтруктураТитула, РеквизитыОбъекта.ПЛПредыдущий);
	
	Возврат СтруктураТитула;
	
КонецФункции

Функция ТитулПредрейсовыйМедосмотр(ДанныеДокумента)
	
	СтруктураТитула = Новый Структура;
	
	ДобавитьМедосмотрДляОнлайна(СтруктураТитула, ДанныеДокумента, Истина);
	
	Возврат СтруктураТитула;
		
КонецФункции

Функция ТитулПредрейсовыйТехосмотр(ДанныеДокумента)
	
	СтруктураТитула = Новый Структура;
	
	ДобавитьТехосмотрДляОнлайна(СтруктураТитула, ДанныеДокумента);
	
	СтруктураТитула.Вставить(
		"ТранспортноеСредство",
		Saby_ТНВыгрузкаСервер.ТранспортНаВыгрузку(ДанныеДокумента.ТранспортныеСредства, , Истина));
		
	СтруктураТитула.ТранспортноеСредство.Вставить(
		"Прицеп", Saby_ТНВыгрузкаСервер.ПрицепыНаВыгрузку(ДанныеДокумента.ТранспортныеСредства, Истина));
	
	Возврат СтруктураТитула;
	
КонецФункции

Функция ТитулВыпускающий(ДанныеДокумента)
	
	СтруктураТитула = Новый Структура;
	
	Выпуск = Новый Структура;
	
	ДобавитьОтветственного(СтруктураТитула, Выпуск, ДанныеДокумента.ОтветственныйОдометрВыезд[0]);
	
	ПризнакНачалаРейса = ДанныеДокумента.Реквизиты.ПризнакНачалаРейса;
	
	Выезд = Новый Структура;
	Выезд.Вставить("Одометр", Формат(ДанныеДокумента.Реквизиты.Выезд_Одометр, "ЧЦ=7; ЧДЦ=0; ЧГ="));
	Выезд.Вставить(
		"ДатаВремя",
		Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(ДанныеДокумента.Реквизиты.Выезд_ДатаВремя));
		
	Если ПризнакНачалаРейса = Перечисления.Saby_ПризнакНачалаРейса.ВыездСПарковки Тогда
		Выпуск.Вставить("Выезд", Выезд);
	Иначе
		Выпуск.Вставить("ПриемТС", Выезд);
	КонецЕсли;
	
	СтруктураТитула.Вставить("Выпуск", Выпуск);
	
	Приемка = Новый Структура;
	ДобавитьОтветственного(СтруктураТитула, Приемка, ДанныеДокумента.ОтветственныйОдометрЗаезд[0]);
	
	СтруктураТитула.Вставить("Приемка", Приемка);
	
	ПризнакНачалаРейса = Перечисления.Saby_ПризнакНачалаРейса.КодПоЗначению(ПризнакНачалаРейса);
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("ПризнакНачалаРейса", ПризнакНачалаРейса);
	СтруктураТитула.Вставить("Документ", СтруктураДокумента);
	
	Возврат СтруктураТитула;
	
КонецФункции

Функция ТитулПринимающий(ДанныеДокумента)
	
	СтруктураТитула = Новый Структура;
	
	Приемка = Новый Структура;
	
	ПризнакНачалаРейса = ДанныеДокумента.Реквизиты.ПризнакНачалаРейса;
	
	Заезд = Новый Структура;
	Заезд.Вставить("Одометр", Формат(ДанныеДокумента.Реквизиты.Заезд_Одометр, "ЧЦ=7; ЧДЦ=0; ЧГ="));
	Заезд.Вставить(
		"ДатаВремя",
		Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(ДанныеДокумента.Реквизиты.Заезд_ДатаВремя));
		
	Если ПризнакНачалаРейса = Перечисления.Saby_ПризнакНачалаРейса.ВыездСПарковки Тогда
		Приемка.Вставить("Заезд", Заезд);
	Иначе
		Приемка.Вставить("СдачаТС", Заезд);
	КонецЕсли;
	
	ДобавитьОтветственного(СтруктураТитула, Приемка, ДанныеДокумента.ОтветственныйОдометрЗаезд[0]);
	
	СтруктураТитула.Вставить("Приемка", Приемка);
	
	ПризнакНачалаРейса = Перечисления.Saby_ПризнакНачалаРейса.КодПоЗначению(ПризнакНачалаРейса);
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("ПризнакОкончанияРейса", ПризнакНачалаРейса);
	СтруктураТитула.Вставить("Документ", СтруктураДокумента);
	
	Возврат СтруктураТитула;
	
КонецФункции

Функция ТитулПослерейсовыйМедосмотр(ДанныеДокумента)
	
	СтруктураТитула = Новый Структура;
	
	ДобавитьМедосмотрДляОнлайна(СтруктураТитула, ДанныеДокумента, Ложь);
	
	Возврат СтруктураТитула;
	
КонецФункции

Функция ДанныеУзлаМаршрут(ДанныеДокумента)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Отправление",      АдресМаршрута(ДанныеДокумента.Реквизиты.МестоОтправления));
	РезультатФункции.Вставить("Пункт",            Новый Массив);
	РезультатФункции.Вставить("Грузоотправитель", Новый Массив);
	
	Для Каждого ДанныеАдресаМаршрута Из ДанныеДокумента.АдресаПунктовВыгрузки Цикл
		СтруктураАдреса = Saby_ТНОбщегоНазначенияСервер.ДесериализоватьЗначение(ДанныеАдресаМаршрута.Структура);
		Если ЗначениеЗаполнено(СтруктураАдреса) Тогда
			РезультатФункции.Пункт.Добавить(АдресМаршрута(ДанныеАдресаМаршрута.Значение, СтруктураАдреса.КодСтраны));
		Иначе
			РезультатФункции.Пункт.Добавить(АдресМаршрута(ДанныеАдресаМаршрута.Значение));
		КонецЕсли;
	КонецЦикла;
	
	РольКонтрагента = Перечисления.Saby_РолиКонтрагентов.Отправитель;
	
	Для Каждого СтрокаДанныхЮрЛиц Из ДанныеДокумента.ДанныеЮрЛиц Цикл
		Если СтрокаДанныхЮрЛиц.Роль <> РольКонтрагента Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанных = Saby_ТНВыгрузкаСервер.ОбщийШаблонЮрЛица(ДанныеДокумента.Реквизиты.Ссылка);
		ДопПараметры = Saby_ТНВыгрузкаСервер.ДопПараметрыЗаполненияОсновныхДанных(Ложь, Неопределено);
		Saby_ТНВыгрузкаСервер.ОсновныеДанныеЮрЛицаИзДокумента(СтрокаДанныхЮрЛиц, СтруктураДанных, ДопПараметры);
		
		РезультатФункции.Грузоотправитель.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция АдресМаршрута(АдресТекст, КодСтраны = "643")
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("КодСтраны",  КодСтраны);
	РезультатФункции.Вставить("АдресТекст", АдресТекст);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДобавитьСрокПутевогоЛиста(СтруктураДокумента, РеквизитыОбъекта)
	
	Если НачалоДня(РеквизитыОбъекта.ДатаНачалаИсполнения) = НачалоДня(РеквизитыОбъекта.ДатаОкончанияИсполнения) Тогда
		СтруктураДокумента.Вставить("Длительность", "1");
		СтруктураДокумента.Вставить(
			"ДатаИсполнения",
			Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(РеквизитыОбъекта.ДатаНачалаИсполнения, Истина));
	Иначе
		СтруктураДокумента.Вставить("Длительность", "2");
		СтруктураДокумента.Вставить(
			"ДатаНачалаИсполнения",
			Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(РеквизитыОбъекта.ДатаНачалаИсполнения, Истина));
		СтруктураДокумента.Вставить(
			"ДатаКонцаИсполнения",
			Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(РеквизитыОбъекта.ДатаОкончанияИсполнения, Истина));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьМедосмотрДляОнлайна(СтруктураДанных, ДанныеДокумента, ЭтоПредрейсовыйМедосмотр)
	
	КлючДанныхЮрЛиц = "ДанныеЮрЛиц";
	
	Если ЭтоПредрейсовыйМедосмотр Тогда
		
		РольЮрЛица               = "МедосмотрВыезд";
		ОтветственныйЗаМедосмотр = ДанныеДокумента.ОтветственныйМедосмотрВыезд;
		ИмяУзлаМедосмотра        = "Медосмотр";
		ШтатныйСотрудник         = Не ДанныеДокумента.Реквизиты.ДоРейса_МедосмотрСторонняяОрганизация;
		
		Если Не ДанныеДокумента.Свойство(КлючДанныхЮрЛиц) Тогда
			ДанныеДокумента.Вставить(КлючДанныхЮрЛиц, ДанныеДокумента.ДанныеЮрЛицМедосмотрВыезд);
		КонецЕсли;
		
	Иначе
		
		РольЮрЛица               = "МедосмотрЗаезд";
		ОтветственныйЗаМедосмотр = ДанныеДокумента.ОтветственныйМедосмотрЗаезд;
		ИмяУзлаМедосмотра        = "ПостМедосмотр";
		ШтатныйСотрудник         = Не ДанныеДокумента.Реквизиты.ПослеРейса_МедосмотрСторонняяОрганизация;
		
		Если Не ДанныеДокумента.Свойство(КлючДанныхЮрЛиц) Тогда
			ДанныеДокумента.Вставить(КлючДанныхЮрЛиц, ДанныеДокумента.ДанныеЮрЛицМедосмотрЗаезд);
		КонецЕсли;
		
	КонецЕсли;
	
	ОтветственныйЗаполнен = Истина;
	Если ОтветственныйЗаМедосмотр.Количество() = 0 Тогда
		СтрокаОтветственногоЗаМедосмотр = ОтветственныйЗаМедосмотр.Добавить();
		СтрокаОтветственногоЗаМедосмотр.Серия     = "";
		СтрокаОтветственногоЗаМедосмотр.Номер     = "";
		СтрокаОтветственногоЗаМедосмотр.Фамилия   = "";
		СтрокаОтветственногоЗаМедосмотр.Имя       = "";
		СтрокаОтветственногоЗаМедосмотр.Отчество  = "";
		СтрокаОтветственногоЗаМедосмотр.Должность = "";
		ОтветственныйЗаполнен = Ложь;
	КонецЕсли;
	
	ОтветственныйЗаМедосмотр = ОтветственныйЗаМедосмотр[0];
	
	Медосмотр = Новый Соответствие;
	
	Лицензия = Новый Структура;
	Лицензия.Вставить("Серия", ОтветственныйЗаМедосмотр.Серия);
	Лицензия.Вставить("Номер", ОтветственныйЗаМедосмотр.Номер);
	Лицензия.Вставить(
		"ДатаВыдачи",
		Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(ОтветственныйЗаМедосмотр.ДатаВыдачи, Истина));
	Лицензия.Вставить(
		"Срок",
		Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(ОтветственныйЗаМедосмотр.ДатаОкончанияДействия, Истина));
		
	Ответственный = Новый Структура;
	Ответственный.Вставить("Фамилия",         ОтветственныйЗаМедосмотр.Фамилия);
	Ответственный.Вставить("Имя",             ОтветственныйЗаМедосмотр.Имя);
	Ответственный.Вставить("Отчество",        ОтветственныйЗаМедосмотр.Отчество);
	Ответственный.Вставить("Должность",       ОтветственныйЗаМедосмотр.Должность);
	Ответственный.Вставить("ИдентификаторИС", ИдентификаторИССотрудника(ОтветственныйЗаМедосмотр));
	
	Если ШтатныйСотрудник И ДанныеДокумента.Реквизиты.Направление = Перечисления.Saby_Направление.Исходящий Тогда
		
		Ответственный.Вставить("Лицензия", Лицензия);
		Медосмотр.Вставить("Ответственный", Ответственный);
		
	Иначе
		
		РеквизитыОрганизацииМедработника = Saby_ТНВыгрузкаСервер.ДанныеЮрЛица(РольЮрЛица, ДанныеДокумента, Истина);
		Медосмотр.Вставить("Контрагент", Saby_ТНВыгрузкаСервер.РеквизитыНашейОрганизации(РеквизитыОрганизацииМедработника));
		
		Организация = Новый Структура;
		Организация.Вставить("Лицензия",      Лицензия);
		Организация.Вставить("Ответственный", Ответственный);
		Организация.Вставить("Название",      РеквизитыОрганизацииМедработника.Название.Полное);
		
		Медосмотр.Вставить("Организация", Организация);
		
	КонецЕсли;
	
	Если ОтветственныйЗаполнен Тогда
		ДобавитьДанныеСотрудников(СтруктураДанных, Ответственный);
	КонецЕсли;
	
	Если ДанныеДокумента.Реквизиты.Свойство("ДоРейса_ДатаВремяМедосмотра") Тогда
		ДобавитьРезультатОсмотра(
			Медосмотр,
			ДанныеДокумента.Реквизиты.ДоРейса_ДатаВремяМедосмотра,
			"");
	КонецЕсли;
	
	Если ДанныеДокумента.Реквизиты.Свойство("ПослеРейса_ДатаВремяМедосмотра") Тогда
		ДобавитьРезультатОсмотра(
			Медосмотр,
			ДанныеДокумента.Реквизиты.ПослеРейса_ДатаВремяМедосмотра,
			"");
	КонецЕсли;
	
	СтруктураДанных.Вставить(ИмяУзлаМедосмотра, Медосмотр);
	
	СтруктураДанных.Вставить("ШтатныйСотрудник", ШтатныйСотрудник);
	
КонецПроцедуры

Процедура ДобавитьТехосмотрДляОнлайна(СтруктураДанных, ДанныеДокумента)
	
	Если ДанныеДокумента.ОтветственныйТехосмотр.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтветственныйЗаТехосмотр = ДанныеДокумента.ОтветственныйТехосмотр[0];
	
	Техосмотр = Новый Структура;
	
	Ответственный = Новый Структура;
	Ответственный.Вставить("Фамилия",         ОтветственныйЗаТехосмотр.Фамилия);
	Ответственный.Вставить("Имя",             ОтветственныйЗаТехосмотр.Имя);
	Ответственный.Вставить("Отчество",        ОтветственныйЗаТехосмотр.Отчество);
	Ответственный.Вставить("Должность",       ОтветственныйЗаТехосмотр.Должность);
	Ответственный.Вставить("ИдентификаторИС", ИдентификаторИССотрудника(ОтветственныйЗаТехосмотр));
	Техосмотр.Вставить("Ответственный", Ответственный);
	
	ДобавитьДанныеСотрудников(СтруктураДанных, Ответственный);
	
	Если ДанныеДокумента.Реквизиты.Свойство("ТО_ДатаВремя") Тогда
		ДобавитьРезультатОсмотра(
			Техосмотр,
			ДанныеДокумента.Реквизиты.ТО_ДатаВремя,
			ДанныеДокумента.Реквизиты.ТО_Комментарий);
	КонецЕсли;
		
	Если ДанныеДокумента.Реквизиты.Свойство("ТО_НеРазрешенВыпускПосле")
		И Не ДанныеДокумента.Реквизиты.ТО_НеРазрешенВыпускПосле Тогда
		
		Техосмотр.Вставить("ВыпускНаЛинию", Новый Структура);
		Техосмотр.ВыпускНаЛинию.Вставить(
			"ДатаВремя",
			Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(ДанныеДокумента.Реквизиты.ТО_ДатаВремяВыпускаВРейс));
	КонецЕсли;
	
	СтруктураДанных.Вставить("Техосмотр", Техосмотр);
	
КонецПроцедуры

Процедура ДобавитьРезультатОсмотра(СтруктураДанных, ДатаВремя, Отметка)
	
	Если Не ЗначениеЗаполнено(ДатаВремя) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Отметка",   Отметка);
	
	СтруктураДанных.Вставить("Результат", СтруктураРезультата);
	
КонецПроцедуры

Процедура ДобавитьДанныеСотрудникаПоВодителям(СтруктураТитула)
	
	Для Каждого СтруктураВодителя Из СтруктураТитула.Водители.Водитель Цикл
		СтруктураВодителя.Вставить("ИдентификаторИС", ИдентификаторИССотрудника(СтруктураВодителя));
		ДобавитьДанныеСотрудников(СтруктураТитула, СтруктураВодителя);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеСотрудников(СтруктураТитула, СтруктураОтветственного)
	
	Если Не СтруктураТитула.Свойство("ДанныеСотрудников") Тогда
		СтруктураТитула.Вставить("ДанныеСотрудников", Новый Массив);
	КонецЕсли;
	
	Сотрудник = Новый Структура;
	Сотрудник.Вставить("Фамилия",         СтруктураОтветственного.Фамилия);
	Сотрудник.Вставить("Имя",             СтруктураОтветственного.Имя);
	Сотрудник.Вставить("Отчество",        СтруктураОтветственного.Отчество);
	Сотрудник.Вставить("ИдентификаторИС", ИдентификаторИССотрудника(СтруктураОтветственного));
	
	Для Каждого СтруктураСотрудника Из СтруктураТитула.ДанныеСотрудников Цикл
		Если СтруктураСотрудника.ИдентификаторИС = Сотрудник.ИдентификаторИС Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураТитула.ДанныеСотрудников.Добавить(Сотрудник);
	
КонецПроцедуры

Функция ИдентификаторИССотрудника(СтруктураОтветственного)
	
	МассивФИО = Новый Массив;
	МассивФИО.Добавить(СокрЛП(СтруктураОтветственного.Фамилия));
	МассивФИО.Добавить(СокрЛП(СтруктураОтветственного.Имя));
	МассивФИО.Добавить(СокрЛП(СтруктураОтветственного.Отчество));
	
	Возврат СтрСоединить(МассивФИО, "");
	
КонецФункции

Процедура ДобавитьОтветственного(СтруктураТитула, СтруктураДанных, СтрокаОтветственного)
	
	Ответственный = Новый Структура;
	Ответственный.Вставить("Фамилия",         СтрокаОтветственного.Фамилия);
	Ответственный.Вставить("Имя",             СтрокаОтветственного.Имя);
	Ответственный.Вставить("Отчество",        СтрокаОтветственного.Отчество);
	Ответственный.Вставить("Должность",       СтрокаОтветственного.Должность);
	Ответственный.Вставить("ИдентификаторИС", ИдентификаторИССотрудника(СтрокаОтветственного));
	
	ДобавитьДанныеСотрудников(СтруктураТитула, Ответственный);
	
	СтруктураДанных.Вставить("Ответственный", Ответственный);
	
КонецПроцедуры

Процедура ДобавитьЗаменуВодителя(СтруктураТитула, ПЛПредыдущий)

	Если ПустаяСтрока(ПЛПредыдущий) Тогда 
		Возврат;
	КонецЕсли;	
		
	СтруктураТитула.Документ.Вставить("ПредыдущийИдентификаторВИ", ПЛПредыдущий);
	
КонецПроцедуры

#КонецОбласти // Выгрузка

#Область Загрузка

Процедура ЗагрузкаТитулаВыпуск(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеВыпуск = ДанныеВыпуск(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ДанныеТитула = ДанныеВыпуск[ДанныеВыпуск.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок, ДанныеТитула.ДляДокумента, Перечисления.Saby_РолиКонтрагентов.Оформитель);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьОтветственныхЛиц(
			ОбъектДок, ДанныеТитула.ДляДокумента.Водители, Перечисления.Saby_РолиОтветственных.Водитель);
			
		ЗаполнитьАдресаПунктовВыгрузки(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьОтветственныхЛиц(
			ОбъектДок, ДанныеТитула.ДляДокумента.ОтветственныеЗаМедосмотр, Перечисления.Saby_РолиОтветственных.МедосмотрВыезд);
			
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок, ДанныеТитула.ДляДокумента, Перечисления.Saby_РолиКонтрагентов.МедосмотрВыезд);
			
		Saby_ТНЗагрузкаСервер.ЗаполнитьОтветственныхЛиц(
			ОбъектДок, ДанныеТитула.ДляДокумента.ОтветственныеЗаТехосмотр, Перечисления.Saby_РолиОтветственных.Техосмотр);
			
		Saby_ТНЗагрузкаСервер.ЗаполнитьОтветственныхЛиц(
			ОбъектДок,
			ДанныеТитула.ДляДокумента.ОтветственныеЗаМедосмотрЗаезд,
			Перечисления.Saby_РолиОтветственных.МедосмотрЗаезд);
			
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок, ДанныеТитула.ДляДокумента, Перечисления.Saby_РолиКонтрагентов.МедосмотрЗаезд);
		
	КонецЕсли;
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеВыпуск, ОбъектДок, ДопПараметры.ИмяМетаданных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузкаТитулаПредрейсовыйМедосмотр(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПредрейсовыйМедосмотр = ДанныеПредрейсовыйМедосмотр(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	ДанныеТитула = ДанныеПредрейсовыйМедосмотр[ДанныеПредрейсовыйМедосмотр.ВГраница()];
	ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок, ДанныеТитула.ДляДокумента, Перечисления.Saby_РолиКонтрагентов.МедосмотрВыезд);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьОтветственныхЛиц(
			ОбъектДок, ДанныеТитула.ДляДокумента.ОтветственныеЗаМедосмотр, Перечисления.Saby_РолиОтветственных.МедосмотрВыезд);
			
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(
		ДанныеПредрейсовыйМедосмотр, ОбъектДок, ДопПараметры.ИмяМетаданных);
	
КонецПроцедуры

Процедура ЗагрузкаТитулаПредрейсовыйТехосмотр(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПредрейсовыйТехосмотр = ДанныеПредрейсовыйТехосмотр(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	ДанныеТитула = ДанныеПредрейсовыйТехосмотр[ДанныеПредрейсовыйТехосмотр.ВГраница()];
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьОтветственныхЛиц(
			ОбъектДок, ДанныеТитула.ДляДокумента.ОтветственныеЗаТехосмотр, Перечисления.Saby_РолиОтветственных.Техосмотр);
			
	Иначе
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента, "ТО_НеРазрешенВыпускПосле");
			
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(
		ДанныеПредрейсовыйТехосмотр, ОбъектДок, ДопПараметры.ИмяМетаданных);
	
КонецПроцедуры

Процедура ЗагрузкаТитулаВыпускающий(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеВыпускающий = ДанныеВыпускающий(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ДанныеТитула = ДанныеВыпускающий[ДанныеВыпускающий.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьОтветственныхЛиц(
			ОбъектДок, ДанныеТитула.ДляДокумента.ОтветственныеЗаВыпуск, Перечисления.Saby_РолиОтветственных.ОдометрВыезд);
			
		Saby_ТНЗагрузкаСервер.ЗаполнитьОтветственныхЛиц(
			ОбъектДок, ДанныеТитула.ДляДокумента.ОтветственныеЗаПрием, Перечисления.Saby_РолиОтветственных.ОдометрЗаезд);
			
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеВыпускающий, ОбъектДок, ДопПараметры.ИмяМетаданных);
	
КонецПроцедуры

Процедура ЗагрузкаТитулаПринимающий(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПринимающий = ДанныеПринимающий(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ДанныеТитула = ДанныеПринимающий[ДанныеПринимающий.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьОтветственныхЛиц(
			ОбъектДок, ДанныеТитула.ДляДокумента.ОтветственныеЗаПрием, Перечисления.Saby_РолиОтветственных.ОдометрЗаезд);
		
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеПринимающий, ОбъектДок, ДопПараметры.ИмяМетаданных);
	
КонецПроцедуры

Процедура ЗагрузкаТитулаПослерейсовыйМедосмотр(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПослерейсовыйМедосмотр = ДанныеПослерейсовыйМедосмотр(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ДанныеТитула = ДанныеПослерейсовыйМедосмотр[ДанныеПослерейсовыйМедосмотр.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок, ДанныеТитула.ДляДокумента, Перечисления.Saby_РолиКонтрагентов.МедосмотрЗаезд);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьОтветственныхЛиц(
			ОбъектДок,
			ДанныеТитула.ДляДокумента.ОтветственныеЗаМедосмотрЗаезд,
			Перечисления.Saby_РолиОтветственных.МедосмотрЗаезд);
		
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(
		ДанныеПослерейсовыйМедосмотр, ОбъектДок, ДопПараметры.ИмяМетаданных);
	
КонецПроцедуры

#Область ДанныеТитуловДляЗагрузки

Функция ДанныеВыпуск(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ДляДокумента.Вставить("ДанныеЮрЛиц",      Новый Массив);
		ДляДокумента.Вставить("КонтактныеДанные", Новый Массив);
		
		ЗагрузитьДанныеДокумента(ДляДокумента, Вложение["Документ"], ДопПараметры);
		
		ЗагрузитьДанныеМаршрутов(ДляДокумента, Вложение["Маршрут"]);
		
		Saby_ТНЗагрузкаСервер.ДанныеТСПрицеповСпецРазрешений(ДляДокумента, Вложение["ТранспортноеСредство"]);
		
		ДляДокумента.Вставить("Водители", Saby_ТНЗагрузкаСервер.ДанныеВодителей(Вложение["Водители"], ДопПараметры));
		
		ЗагрузитьСтороныВыпуск(ДляДокумента, ДопПараметры);
		
		ДляРегистра = СтруктураДанныхДляРегистра(ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных);
		
		РезультатФункции.Добавить(Saby_ТНЗагрузкаСервер.СтруктураТитула(Титул, ДляДокумента, ДляРегистра));
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеПредрейсовыйМедосмотр(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ДляДокумента.Вставить("ДанныеЮрЛиц",      Новый Массив);
		ДляДокумента.Вставить("КонтактныеДанные", Новый Массив);
		
		ЗагрузитьМедосмотр(ДляДокумента, Вложение["Медосмотр"], Истина, ДопПараметры);
		Если ДляДокумента.ДоРейса_НеДопущенПослеМедосмотра Тогда
			ЗаполнитьИдентификаторИДатуТитулаОтказа(Вложение, ДопПараметры.Событие, Титул);
		КонецЕсли;
		
		ДляРегистра     = СтруктураДанныхДляРегистра(ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных);
		СтруктураТитула = Saby_ТНЗагрузкаСервер.СтруктураТитула(Титул, ДляДокумента, ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеПредрейсовыйТехосмотр(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ЗагрузитьТехосмотр(ДляДокумента, Вложение["Техосмотр"]);
		
		Saby_ТНЗагрузкаСервер.ДанныеТСПрицеповСпецРазрешений(ДляДокумента, Вложение["ТранспортноеСредство"]);
		
		ДляРегистра = СтруктураДанныхДляРегистра(ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных);
		
		РезультатФункции.Добавить(Saby_ТНЗагрузкаСервер.СтруктураТитула(Титул, ДляДокумента, ДляРегистра));
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеВыпускающий(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ПризнакНачалаРейса = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Документ.ПризнакНачалаРейса");
		ДляДокумента.Вставить(
			"ПризнакНачалаРейса",
			Перечисления.Saby_ПризнакНачалаРейса.ЗначениеПоКоду(ПризнакНачалаРейса));
		
		Если ДляДокумента.ПризнакНачалаРейса = Перечисления.Saby_ПризнакНачалаРейса.ВыездСПарковки Тогда
			ПутьДатаВремя = "Выпуск.Выезд.ДатаВремя";
			ПутьОдометр = "Выпуск.Выезд.Одометр";
		Иначе
			ПутьДатаВремя = "Выпуск.ПриемТС.ДатаВремя";
			ПутьОдометр = "Выпуск.ПриемТС.Одометр";
		КонецЕсли;
		
		ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, ПутьДатаВремя);
		ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаВремя);
		
		Одометр = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, ПутьОдометр);
		Одометр = ?(ЗначениеЗаполнено(Одометр), Число(Одометр), 0);
			
		ДляДокумента.Вставить("Выезд_ДатаВремя", ДатаВремя);
		ДляДокумента.Вставить("Выезд_Одометр",   Одометр);
		
		Ответственный = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Выпуск.Ответственный");
		
		ОтветственныеЗаВыпуск = Новый Массив;
		СтруктураВыпускающего = Новый Структура;
		Saby_ТНЗагрузкаСервер.ЗагрузитьОтветственного(СтруктураВыпускающего, Ответственный);
		СтруктураВыпускающего.Вставить("Роль", Перечисления.Saby_РолиОтветственных.ОдометрВыезд);
		ОтветственныеЗаВыпуск.Добавить(СтруктураВыпускающего);
		ДляДокумента.Вставить("ОтветственныеЗаВыпуск", ОтветственныеЗаВыпуск);
		
		ЗагрузитьСтороныВыпускающий(ДляДокумента, ДопПараметры.Стороны);
		
		ДляРегистра = СтруктураДанныхДляРегистра(ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных);
		
		РезультатФункции.Добавить(Saby_ТНЗагрузкаСервер.СтруктураТитула(Титул, ДляДокумента, ДляРегистра));
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеПринимающий(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ПризнакОкончанияРейса = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Документ.ПризнакОкончанияРейса");
		ДляДокумента.Вставить(
			"ПризнакОкончанияРейса",
			Перечисления.Saby_ПризнакНачалаРейса.ЗначениеПоКоду(ПризнакОкончанияРейса));
		
		Если ДляДокумента.ПризнакОкончанияРейса = Перечисления.Saby_ПризнакНачалаРейса.ВыездСПарковки Тогда
			ПутьДатаВремя = "Приемка.Заезд.ДатаВремя";
			ПутьОдометр = "Приемка.Заезд.Одометр";
		Иначе
			ПутьДатаВремя = "Приемка.СдачаТС.ДатаВремя";
			ПутьОдометр = "Приемка.СдачаТС.Одометр";
		КонецЕсли;
		
		ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, ПутьДатаВремя);
		ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаВремя);
		
		Одометр = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, ПутьОдометр);
		Одометр = ?(ЗначениеЗаполнено(Одометр), Число(Одометр), 0);
			
		ДляДокумента.Вставить("Заезд_ДатаВремя", ДатаВремя);
		ДляДокумента.Вставить("Заезд_Одометр",   Одометр);
		
		Ответственный = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Приемка.Ответственный");
		
		ОтветственныеЗаПрием = Новый Массив;
		СтруктураПринимающего = Новый Структура;
		Saby_ТНЗагрузкаСервер.ЗагрузитьОтветственного(СтруктураПринимающего, Ответственный);
		СтруктураПринимающего.Вставить("Роль", Перечисления.Saby_РолиОтветственных.ОдометрЗаезд);
		ОтветственныеЗаПрием.Добавить(СтруктураПринимающего);
		ДляДокумента.Вставить("ОтветственныеЗаПрием", ОтветственныеЗаПрием);
		
		ДляРегистра = СтруктураДанныхДляРегистра(ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных);
		
		РезультатФункции.Добавить(Saby_ТНЗагрузкаСервер.СтруктураТитула(Титул, ДляДокумента, ДляРегистра));
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции
	
Функция ДанныеПослерейсовыйМедосмотр(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ДляДокумента.Вставить("ДанныеЮрЛиц",      Новый Массив);
		ДляДокумента.Вставить("КонтактныеДанные", Новый Массив);
		
		ЗагрузитьМедосмотр(ДляДокумента, Вложение["ПостМедосмотр"], Ложь, ДопПараметры);
						
		ДляРегистра     = СтруктураДанныхДляРегистра(ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных);
		СтруктураТитула = Saby_ТНЗагрузкаСервер.СтруктураТитула(Титул, ДляДокумента, ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);				
		
	КонецЦикла;
	
	Возврат РезультатФункции;

КонецФункции

Функция СтруктураДанныхДляРегистра(ОбъектДок, Вложение, Титул, ИмяМетаданных, СохранитьДанные = Ложь)
	
	Основной = Не Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов("Saby_ПутевойЛист", "ЭтоДинамическийТитул", Титул);
	
	СтруктураДанныхДляРегистра = Saby_ТНЗагрузкаСервер.СтруктураДанныхДляРегистра(ОбъектДок.Ссылка, Титул, Основной);
	СтруктураДанныхДляРегистра.Просмотрено     = Истина;
	СтруктураДанныхДляРегистра.СохранитьДанные = СохранитьДанные;
	
	Вложение.Вставить("ЗагруженВРегистр", Вложение["ЗагруженВРегистр"] Или Вложение["ИдентификаторВложенияТитула"] = "");
	
	Возврат Saby_ТНЗагрузкаСервер.ДанныеДляРегистраТитулов(Вложение, ИмяМетаданных, СтруктураДанныхДляРегистра);
		
КонецФункции

Процедура ЗаполнитьИдентификаторИДатуТитулаОтказа(Вложение, СобытияСОнлайна, Титул)
	
	СтруктураСобытия = Неопределено;
	
	Для Каждого СобытиеСоответствие Из СобытияСОнлайна Цикл
		
		ТитулСобытия = Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов(
			"Saby_ПутевойЛист", "ЗначениеПоПредставлению", СобытиеСоответствие["Название"]);
		Если ТитулСобытия = Титул Тогда
			СтруктураСобытия = СобытиеСоответствие;
		КонецЕсли;
		
	КонецЦикла;
	
	ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(СтруктураСобытия["ДатаВремя"]);
	
	Вложение.Вставить("ДатаВложенияТитула",          ДатаВремя);
	Вложение.Вставить("ИдентификаторВложенияТитула", СтруктураСобытия["Идентификатор"]);
	
КонецПроцедуры

#КонецОбласти // ДанныеТитуловДляЗагрузки

Процедура ЗаполнитьАдресаПунктовВыгрузки(ОбъектДок, ДляДокумента)
	
	Если Не ДляДокумента.Свойство("АдресаПунктовВыгрузки") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДляДокумента.АдресаПунктовВыгрузки.Количество() > 0 Тогда
		ОбъектДок.АдресаПунктовВыгрузки.Очистить();
	КонецЕсли;
	
	Для Каждого СтрокаПункта Из ДляДокумента.АдресаПунктовВыгрузки Цикл
		НоваяСтрокаПункта = ОбъектДок.АдресаПунктовВыгрузки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПункта, СтрокаПункта);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеДокумента(ДляДокумента, ДокументСОнлайна, ДопПараметры)
	
	Если Не ЗначениеЗаполнено(ДокументСОнлайна) Тогда
		Возврат;
	КонецЕсли;
		
	ДляДокумента.Вставить("НомерСБИС", ДокументСОнлайна["Номер"]);
	
	ДляДокумента.Вставить(
		"ПризнакНачалаРейса",
		Перечисления.Saby_ПризнакНачалаРейса.ЗначениеПоКоду(ДокументСОнлайна["ПризнакНачалаРейса"]));
		
	ДляДокумента.Вставить("ПослерейсовыйМедосмотрТребуется", ДокументСОнлайна["ПослерейсовыйМедосмотр"] = "1");
	
	ДляДокумента.Вставить(
	    "ВидПеревозки",
		Перечисления.Saby_ВидПеревозки.ЗначениеПоКоду(ДокументСОнлайна["ВидПеревозки"]));
	
	ДляДокумента.Вставить(
		"ВидКоммерческойПеревозки",
		Перечисления.Saby_ВидКоммерческойПеревозки.ЗначениеПоКоду(ДокументСОнлайна["ВидКоммерческойПеревозки"]));
		
	ДляДокумента.Вставить(
		"ВидТранспортногоСообщения",
		Перечисления.Saby_ВидСообщенияЭПЛ.ЗначениеПоКоду(ДокументСОнлайна["ВидСообщения"]));
	
	ЗагрузитьДанныеСроковПутевогоЛиста(ДляДокумента, ДокументСОнлайна);
	
	РольОформитель = Перечисления.Saby_РолиКонтрагентов.Оформитель;
	Если ЗначениеЗаполнено(ДопПараметры.СторонняяОрганизация) Тогда
		ПодстановкиЮрЛиц = Saby_ТНЗагрузкаСервер.НормализованныеДанныеЮрЛица(ДопПараметры.СторонняяОрганизация);
		КонтактыОформителя = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДокументСОнлайна, "Оформитель.Контакты");
		ПодстановкиЮрЛиц.Вставить("Контакты", КонтактыОформителя);
		Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеЮрЛиц(ДляДокумента, ПодстановкиЮрЛиц, РольОформитель);
	Иначе
		Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеЮрЛиц(ДляДокумента, ДокументСОнлайна["Оформитель"], РольОформитель);
	КонецЕсли;
	
	ЗагрузитьЗаменуВодителя(ДляДокумента, ДопПараметры);
		
	Если Не ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДляДокумента = Saby_ТНОбщегоНазначенияСервер.СтруктураБезПустыхЗначений(ДляДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеСроковПутевогоЛиста(ДляДокумента, ДокументСОнлайна)
	
	Если ДокументСОнлайна["Длительность"] = "1" Тогда
		ДатаНачалаИсполнения = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(
			ДокументСОнлайна["ДатаИсполнения"]);
		ДатаОкончанияИсполнения = ДатаНачалаИсполнения;
	Иначе
		ДатаНачалаИсполнения = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(
			ДокументСОнлайна["ДатаНачалаИсполнения"]);
		ДатаОкончанияИсполнения = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(
			ДокументСОнлайна["ДатаКонцаИсполнения"]);
	КонецЕсли;
	
	ДляДокумента.Вставить("ДатаНачалаИсполнения",    ДатаНачалаИсполнения);
	ДляДокумента.Вставить("ДатаОкончанияИсполнения", ДатаОкончанияИсполнения);
	
КонецПроцедуры

Процедура ЗагрузитьДанныеМаршрутов(ДляДокумента, МаршрутСОнлайна)
	
	Если МаршрутСОнлайна = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДляДокумента.Вставить(
		"МестоОтправления",
		Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(МаршрутСОнлайна, "Отправление.АдресТекст"));
	
	КлючСтроки = 1;
	АдресаПунктовВыгрузки = Новый Массив;
	Для Каждого Пункт Из МаршрутСОнлайна["Пункт"] Цикл
		
		СтруктураПункта = Новый Структура;
		СтруктураПункта.Вставить("Значение",   Пункт["АдресТекст"]);
		СтруктураПункта.Вставить("КлючСтроки", КлючСтроки);
		
		АдресаПунктовВыгрузки.Добавить(СтруктураПункта);
		
		КлючСтроки = КлючСтроки + 1;
		
	КонецЦикла;
	ДляДокумента.Вставить("АдресаПунктовВыгрузки", АдресаПунктовВыгрузки);
	
	Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеЮрЛиц(ДляДокумента, МаршрутСОнлайна["Грузоотправитель"], "Отправитель");
	
КонецПроцедуры

Процедура ЗагрузитьМедосмотр(ДляДокумента, МедосмотрСОнлайна, ЭтоПредрейсовыйМедосмотр, ДопПараметры)
	
	ИмяТаблицы = ?(ЭтоПредрейсовыйМедосмотр, "ОтветственныеЗаМедосмотр", "ОтветственныеЗаМедосмотрЗаезд");
	
	Если Не ДляДокумента.Свойство(ИмяТаблицы) Тогда
		ДляДокумента.Вставить(ИмяТаблицы, Новый Массив);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МедосмотрСОнлайна) Тогда
		Возврат;
	КонецЕсли;
	
	ШтатныйСотрудник = ЭтоШтатныйМедик(МедосмотрСОнлайна, ДопПараметры);
	
	Ответственный = МедосмотрСОнлайна["Ответственный"];
	
	Если ЗначениеЗаполнено(МедосмотрСОнлайна["Организация"]) Тогда
		
		Если ЭтоПредрейсовыйМедосмотр Тогда
			Роль = Перечисления.Saby_РолиКонтрагентов.МедосмотрВыезд;
		Иначе
			Роль = Перечисления.Saby_РолиКонтрагентов.МедосмотрЗаезд;
		КонецЕсли;
		
		ПодстановкиЮрЛиц = Saby_ТНЗагрузкаСервер.НормализованныеДанныеЮрЛица(МедосмотрСОнлайна["Организация"]);
		Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеЮрЛиц(ДляДокумента, ПодстановкиЮрЛиц, Роль);
		
	КонецЕсли;
	
	СтруктураМедика = Новый Структура;
	Saby_ТНЗагрузкаСервер.ЗагрузитьОтветственного(СтруктураМедика, Ответственный);
	Если СтруктураМедика.Имя <> Неопределено Тогда
		Лицензия      = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Ответственный, "Лицензия");
		ДатаВыдачи    = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(Лицензия["ДатаВыдачи"]);
		Срок          = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(Лицензия["Срок"]);
		РольМедосмотр = ?(ЭтоПредрейсовыйМедосмотр,
			Перечисления.Saby_РолиОтветственных.МедосмотрВыезд,
			Перечисления.Saby_РолиОтветственных.МедосмотрЗаезд);
		
		СтруктураМедика.Вставить("Серия",                 Лицензия["Серия"]);
		СтруктураМедика.Вставить("Номер",                 Лицензия["Номер"]);
		СтруктураМедика.Вставить("ДатаВыдачи",            ДатаВыдачи);
		СтруктураМедика.Вставить("ДатаОкончанияДействия", Срок);
		СтруктураМедика.Вставить("Роль",                  РольМедосмотр);
		
		ДляДокумента[ИмяТаблицы].Добавить(СтруктураМедика);
	КонецЕсли;
	
	ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(МедосмотрСОнлайна, "Результат.ДатаВремя");
	ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаВремя);
	Отметка   = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(МедосмотрСОнлайна, "Результат.Отметка");
	Допущен   = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(МедосмотрСОнлайна, "Результат.Допуск");
	// Допущен = Неопределено так как в узле "Стороны" нет узла "Результат"
	Допущен   = Допущен = Неопределено Или Допущен = "1";
	
	Если ЭтоПредрейсовыйМедосмотр Тогда
		ДляДокумента.Вставить("ДоРейса_МедосмотрСторонняяОрганизация", Не ШтатныйСотрудник);
		ДляДокумента.Вставить("ДоРейса_ДатаВремяМедосмотра",           ДатаВремя);
		ДляДокумента.Вставить("ДоРейса_КомментарииМедосмотра",         Отметка);
		ДляДокумента.Вставить("ДоРейса_НеДопущенПослеМедосмотра",      Не Допущен);
	Иначе
		ДляДокумента.Вставить("ПослеРейса_МедосмотрСторонняяОрганизация", Не ШтатныйСотрудник);
		ДляДокумента.Вставить("ПослеРейса_ДатаВремяМедосмотра",           ДатаВремя);
		ДляДокумента.Вставить("ПослеРейса_КомментарииМедосмотра",         Отметка);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоШтатныйМедик(МедосмотрСОнлайна, ДопПараметры)
	
	ЮрЛица = Новый Структура;
	ЮрЛица.Вставить("ДанныеЮрЛиц",      Новый Массив);
	ЮрЛица.Вставить("КонтактныеДанные", Новый Массив);
	
	// Неважно какая роль, нужно просто получить структуру юр лица в стандартном плоском формате.
	ИскусственнаяРоль = Перечисления.Saby_РолиКонтрагентов.СторонаДокумента;
	
	ПодстановкиЮрЛиц = Saby_ТНЗагрузкаСервер.НормализованныеДанныеЮрЛица(МедосмотрСОнлайна["Организация"]);
	Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеЮрЛиц(ЮрЛица, ПодстановкиЮрЛиц, ИскусственнаяРоль);
	
	Если ЮрЛица.ДанныеЮрЛиц.Количество() > 0 Тогда
		СтруктураЮрЛицаМедосмотр = ЮрЛица.ДанныеЮрЛиц[0];
	Иначе
		СтруктураЮрЛицаМедосмотр = Saby_ТНОбщегоНазначенияКлиентСервер.СтруктураДанныхЮрЛица();
	КонецЕсли;
	
	ЮрЛица.ДанныеЮрЛиц.Очистить();
	ЮрЛица.КонтактныеДанные.Очистить();
	
	// Если нет описания сторонней организации, то считаем сторонняя организация указана в данных медосмотра
	СтруктураЮрЛицаСторонняяОрганизация = СтруктураЮрЛицаМедосмотр;
	Если ЗначениеЗаполнено(ДопПараметры.СторонняяОрганизация) Тогда
		ПодстановкиЮрЛиц = Saby_ТНЗагрузкаСервер.НормализованныеДанныеЮрЛица(ДопПараметры.СторонняяОрганизация);
		Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеЮрЛиц(ЮрЛица, ПодстановкиЮрЛиц, ИскусственнаяРоль);
		
		Если ЮрЛица.ДанныеЮрЛиц.Количество() > 0 Тогда
			СтруктураЮрЛицаСторонняяОрганизация = ЮрЛица.ДанныеЮрЛиц[0];
		КонецЕсли;
	КонецЕсли;
	
	ЮрЛица.ДанныеЮрЛиц.Очистить();
	ЮрЛица.КонтактныеДанные.Очистить();
	
	Если ЗначениеЗаполнено(ДопПараметры.НашаОрганизация) Тогда
		ПодстановкиЮрЛиц = Saby_ТНЗагрузкаСервер.НормализованныеДанныеЮрЛица(ДопПараметры.НашаОрганизация);
		Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеЮрЛиц(ЮрЛица, ПодстановкиЮрЛиц, ИскусственнаяРоль);
		
		Если ЮрЛица.ДанныеЮрЛиц.Количество() > 0 Тогда
			СтруктураЮрЛицаНашаОрганизация = ЮрЛица.ДанныеЮрЛиц[0];
		КонецЕсли;
	КонецЕсли;
	
	ЭтоНашаОрганизация = Saby_ТНОбщегоНазначенияКлиентСервер.ЮрЛицаСовпадают(
		СтруктураЮрЛицаНашаОрганизация, СтруктураЮрЛицаСторонняяОрганизация);
	
	Если ЭтоНашаОрганизация Тогда
		СтруктураЮрЛицаСторонняяОрганизация = СтруктураЮрЛицаМедосмотр;
	КонецЕсли;
	
	РезультатФункции = Не СтруктураЮрЛицаМедосмотр.Заполнена
		Или Не Saby_ТНОбщегоНазначенияКлиентСервер.ЮрЛицаСовпадают(СтруктураЮрЛицаМедосмотр, СтруктураЮрЛицаСторонняяОрганизация);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗагрузитьТехосмотр(ДляДокумента, ТехосмотрСОнлайна, ТолькоОтветственный = Ложь)
	
	ОтветственныеЗаТехосмотр = Новый Массив;
	ДляДокумента.Вставить("ОтветственныеЗаТехосмотр", ОтветственныеЗаТехосмотр);
	
	Если Не ЗначениеЗаполнено(ТехосмотрСОнлайна) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураМеханика = Новый Структура;
	Saby_ТНЗагрузкаСервер.ЗагрузитьОтветственного(СтруктураМеханика, ТехосмотрСОнлайна["Ответственный"]);
	Если СтруктураМеханика.Имя <> Неопределено Тогда
		СтруктураМеханика.Вставить("Роль", Перечисления.Saby_РолиОтветственных.Техосмотр);
		ОтветственныеЗаТехосмотр.Добавить(СтруктураМеханика);
	КонецЕсли;
	
	Если Не ТолькоОтветственный Тогда
		
		ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ТехосмотрСОнлайна, "Результат.ДатаВремя");
		ДатаВремя = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаВремя);
		Отметка   = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ТехосмотрСОнлайна, "Результат.Отметка");
		
		ДляДокумента.Вставить("ТО_ДатаВремя",   ДатаВремя);
		ДляДокумента.Вставить("ТО_Комментарий", "");
		
		ДатаВыпускаВРейс = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ТехосмотрСОнлайна, "ВыпускНаЛинию.ДатаВремя");
		ДатаВыпускаВРейс = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаВыпускаВРейс);
		
		ДляДокумента.Вставить("ТО_НеРазрешенВыпускПосле", Отметка = "2");
		ДляДокумента.Вставить("ТО_ДатаВремяВыпускаВРейс", ДатаВыпускаВРейс);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьСтороныВыпуск(ДляДокумента, ДопПараметры)
	
	Медосмотр = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДопПараметры.Стороны, "Медосмотр");
	ЗагрузитьМедосмотр(ДляДокумента, Медосмотр, Истина, ДопПараметры);
	
	ПостМедосмотр = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДопПараметры.Стороны, "ПостМедосмотр");
	ЗагрузитьМедосмотр(ДляДокумента, ПостМедосмотр, Ложь, ДопПараметры);
	
	Техосмотр = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДопПараметры.Стороны, "Техосмотр");
	ЗагрузитьТехосмотр(ДляДокумента, Техосмотр, Истина);
	
КонецПроцедуры

Процедура ЗагрузитьСтороныВыпускающий(ДляДокумента, Стороны)
	
	ОтветственныеЗаПрием = Новый Массив;
	ДляДокумента.Вставить("ОтветственныеЗаПрием", ОтветственныеЗаПрием);
	
	Если Не ЗначениеЗаполнено(Стороны) Тогда
		Возврат;
	КонецЕсли;
	
	Ответственный = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Стороны, "Приемка.Ответственный");
	
	СтруктураПринимающего = Новый Структура;
	Saby_ТНЗагрузкаСервер.ЗагрузитьОтветственного(СтруктураПринимающего, Ответственный);
	СтруктураПринимающего.Вставить("Роль", Перечисления.Saby_РолиОтветственных.ОдометрЗаезд);
	ОтветственныеЗаПрием.Добавить(СтруктураПринимающего);
	
КонецПроцедуры

Процедура ЗагрузитьЗаменуВодителя(ДляДокумента, ДопПараметры)
	
	Если Не ЗначениеЗаполнено(ДопПараметры.ЗаменаВодителя) Тогда
		Возврат;
	КонецЕсли;
		
	ПЛПредыдущий = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДопПараметры.ЗаменаВодителя, "ПЛПредыдущий.Идентификатор");
	ПЛСледующий  = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДопПараметры.ЗаменаВодителя, "ПЛСледующий.Идентификатор");
	
	ДляДокумента.Вставить("ПЛПредыдущий", ПЛПредыдущий);
	ДляДокумента.Вставить("ПЛСледующий",  ПЛСледующий);
	
	// найдем ссылку на замену водителя, чтобы установить основание
	Если ЗначениеЗаполнено(ПЛПредыдущий) Тогда
		
		СсылкаНаОснование = Saby_ТНОбщегоНазначенияСервер.ДокументПоИдентификаторуСбис(ПЛПредыдущий);
		Если ЗначениеЗаполнено(СсылкаНаОснование) Тогда
			ИмяМетаданных = Saby_ТНОбщегоНазначенияСервер.ИмяМетаданныхДокумента(СсылкаНаОснование);
			
			ДляДокумента.Вставить("ДокументОснование_Идентификатор",    СсылкаНаОснование.УникальныйИдентификатор());
			ДляДокумента.Вставить("ДокументОснование_ОбъектМетаданных", ИмяМетаданных);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Загрузка

#КонецОбласти // СлужебныеПроцедурыИФункции