                                 
#Область ПрограммныйИнтерфейс

// Возвращает массив типов доступных для заполнения на основании.
//
// Параметры:
//  ЗначенияПоУмолчанию - Булево - признак получения типов по умолчанию
//
// Возвращаемое значение:
//   Массив - массив типов выбранных для заполнения на основании.
//
Функция ТипыДляЗаполненияНаОсновании(ЗначенияПоУмолчанию = Ложь) Экспорт
	
	Если Не ЗначенияПоУмолчанию Тогда
		РезультатФункции = ПользовательскиеТипыДляЗаполненияНаОсновании();
	Иначе
		РезультатФункции = Неопределено;
	КонецЕсли;
	
	Если РезультатФункции = Неопределено Тогда
		РезультатФункции = ТипыПоУмолчаниюДляЗаполненияНаОсновании();
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Сохраняет выбранные типы документов для заполнения на основании выбранные пользователем.
//
// Параметры:
//  МассивТипов - Массив - массив типов
//
Процедура СохранитьВыбранныеТипыДляЗаполненияНаОсновании(МассивТипов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеОбщихНастроек.Сохранить("Saby", "ТипыДляЗаполненияНаОснованииДокументаЗнП", МассивТипов);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает структуру реквизитов документа, относящиеся титулу
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.Saby_ЗаказНаПеревозку - ссылка на документ
//  ТипТитула - ПеречислениеСсылка.Saby_ТипТитулаЗнП - ссылка на тип титула
//
// Возвращаемое значение:
//   Структура - структура полученных данных документа
//
Функция ДанныеДокумента(СсылкаНаДокумент, ТипТитула) Экспорт
	
	ЭтоПервыйТитул = Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов("Saby_ЗаказНаПеревозку", "ЭтоПервыйТитул", ТипТитула);
	
	Если ЭтоПервыйТитул Тогда
		
		РезультатФункции = ВыгрузкаДанныеОформление(СсылкаНаДокумент);
		
	ИначеЕсли ТипТитула = Перечисления.Saby_ТипТитулаЗнП.Утверждение Тогда
		
		РезультатФункции = ВыгрузкаДанныеУтверждение(СсылкаНаДокумент);
		
	Иначе
		
		РезультатФункции = Новый Структура;
		
	КонецЕсли;
	
	РезультатФункции.Вставить("ТипТитула", ТипТитула);
	
	Возврат РезультатФункции;
	
КонецФункции

// Добавляет данные титулов для выгрузки на онлайн
//
// Параметры:
//  ТекущийЭтап - ПеречислениеСсылка.Saby_ТипДокументаЗнП - тип текущего титула
//  ДанныеТитула - Структура - структура реквизитов и таблиц документа для выгрузки
//
// Возвращаемое значение:
//   Структура - структура титула для отправки
//
Функция ВложениеНаВыгрузку(ТекущийЭтап, ДанныеТитула) Экспорт
	
	ЭтоПервыйТитул = Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов("Saby_ЗаказНаПеревозку", "ЭтоПервыйТитул", ТекущийЭтап);
	
	Если ЭтоПервыйТитул Тогда
		
		Возврат ТитулОформление(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = Перечисления.Saby_ТипТитулаЗнП.Утверждение Тогда
		
		СтруктураТитула = ТитулУтверждение(ДанныеТитула);
		
		СтруктураТитула.Вставить("СторонняяОрганизация", Истина);
		
		Возврат СтруктураТитула;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции
 
#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

#Область Команды

// Заполняет список команд печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти // Команды

#Область ИнтерфейсФЛК

// Возвращает параметры для выполнения ФЛК
//
// Параметры:
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//
// Возвращаемое значение:
//   Структура - структура данных для дальнейшей проверки реквизитов
//
Функция ПараметрыПроверкиРеквизитов(ДанныеДокумента, ПараметрыВыгрузки) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ПроверяемыеРеквизиты", Новый Массив);
		
	ЭтоПервыйТитул = Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов(
		"Saby_ЗаказНаПеревозку", "ЭтоПервыйТитул", ПараметрыВыгрузки.ТипТитула);
	
	Если ЭтоПервыйТитул Тогда
		
		ДополнитьПроверяемыеРеквизитыЭтапаОформление(ДанныеДокумента, РезультатФункции.ПроверяемыеРеквизиты);
		
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = Перечисления.Saby_ТипТитулаЗнП.Утверждение Тогда
		
		ДополнитьПроверяемыеРеквизитыЭтапаУтверждение(ДанныеДокумента, РезультатФункции.ПроверяемыеРеквизиты);
		
	Иначе
		РезультатФункции.ПроверяемыеРеквизиты = Новый Массив;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает имя таблицы документа с учетом специфики
//
// Параметры:
//  ИмяТабличнойЧасти - Строка - наименование табличной части из конфигуратора
//  СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - строка табличной части документа
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//
// Возвращаемое значение:
//   Строка - наименование таблицы на форме документа
//
Функция ИмяТЧДокумента(ИмяТабличнойЧасти, СтрокаТабличнойЧасти, ДанныеДокумента) Экспорт
	
	Если ИмяТабличнойЧасти = "ДанныеЮрЛиц"
		И СтрокаТабличнойЧасти.Роль = Перечисления.Saby_РолиКонтрагентов.УполномоченноеЛицо Тогда
		РезультатФункции = "УполномоченныеЛицаЗаказчика";
	ИначеЕсли ИмяТабличнойЧасти = "ОтветственныеЛица"
		И СтрокаТабличнойЧасти.Роль = Перечисления.Saby_РолиОтветственных.Водитель Тогда
		РезультатФункции = "Водители";
	Иначе 
		РезультатФункции = ИмяТабличнойЧасти;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПроверятьРеквизитДокумента(ИмяРеквизита, ДанныеДокумента) Экспорт
	
	Если ИмяРеквизита = "ПредставительЗаказчикаНаименование" Или ИмяРеквизита = "ПредставительЗаказчика_Основание" Тогда
		Возврат ДанныеДокумента.ПредставительЗаказчика;
	ИначеЕсли ИмяРеквизита = "Договор" Тогда
		Возврат ДанныеДокумента.ТипДокумента = Перечисления.Saby_ТипДокументаЗнП.Заявка;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает признак необходимости ФЛК реквизитов табличной части документа
//
// Параметры:
//  СтрокаТЧ - СтрокаТаблицыЗначений - строка табличной части документа
//  ИмяТЧ - Строка - имя табличной части документа
//  ИмяРеквизита - Строка - имя реквизита табличной части документа
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//
// Возвращаемое значение:
//   Булево - Истина, если проверять необходимо
//
Функция ПроверятьРеквизитТЧДокумента(СтрокаТЧ, ИмяТЧ, ИмяРеквизита, ДанныеДокумента) Экспорт
	
	Если ИмяТЧ = "ДанныеЮрЛиц" Тогда
		Возврат СтрокаТЧ.Роль = Перечисления.Saby_РолиКонтрагентов.УполномоченноеЛицоПеревозчика
			И ДанныеДокумента.ТипТитула = Перечисления.Saby_ТипТитулаЗнП.Утверждение;
	ИначеЕсли ИмяТЧ = "ОтветственныеЛица" Тогда
		Возврат ПроверятьРеквизитОтветственного(СтрокаТЧ, ИмяРеквизита);
	ИначеЕсли ИмяТЧ = "УполномоченныеЛицаЗаказчика" Тогда
		Возврат Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов(
			"Saby_ЗаказНаПеревозку", "ЭтоПервыйТитул", ДанныеДокумента.ТипТитула);		
	ИначеЕсли ИмяТЧ = "СпецРазрешения" Тогда
		Возврат ПроверятьРеквизитыСпецРазрешения(СтрокаТЧ, ИмяРеквизита);
	ИначеЕсли ИмяТЧ = "АдресаПунктовВыгрузки" Тогда
		Возврат ИмяРеквизита <> "ОрганизацияСтрока" Или СтрокаТЧ.ЭтоПогрузка;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Изменяет параметры реквизита для отображения ошибки.
//
// Параметры:
//  СтрокаТЧ - СтрокаТаблицыЗначений - строка табличной части документа
//  ИмяТЧ - Строка - имя табличной части документа
//  Реквизит - Структура - см. функцию ФЛК()
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//
// Возвращаемое значение:
//   Структура - см. функцию ФЛК
//
Функция ИзменитьРеквизитТЧ(СтрокаТЧ, ИмяТЧ, Реквизит, ДанныеДокумента) Экспорт
	
	Если ИмяТЧ = "Водители" Тогда
		НовыйРеквизит = РеквизитВодителя(Реквизит.РеквизитОбъекта);
	ИначеЕсли ИмяТЧ = "УполномоченныеЛицаЗаказчика" Тогда
		НовыйРеквизит = РеквизитУполномоченногоЛицаЗаказчика(Реквизит.РеквизитОбъекта);
	Иначе
		НовыйРеквизит = Неопределено;
	КонецЕсли;
	
	Если НовыйРеквизит = Неопределено Тогда
		Возврат Реквизит;
	КонецЕсли;
	
	Возврат НовыйРеквизит;
	
КонецФункции

// Выполняет нестандартные проверки ФЛК с логикой сложнее, чем заполнен незаполнен.
//
// Параметры:
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//  Ошибки - Массив,Неопределено - массив для накопления ошибок
//
Процедура ВыполнитьДополнительныеПроверкиФЛК(ДанныеДокумента, ПараметрыВыгрузки, Ошибки) Экспорт
		
	ЭтоПервыйТитул = Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов(
		"Saby_ЗаказНаПеревозку", "ЭтоПервыйТитул", ПараметрыВыгрузки.ТипТитула);
		
	Если ЭтоПервыйТитул Тогда
		
		ДопПроверкиФЛКОформление(ДанныеДокумента, ПараметрыВыгрузки, Ошибки);
		
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = Перечисления.Saby_ТипТитулаЗнП.Утверждение Тогда
		
		ДопПроверкиФЛКУтверждение(ДанныеДокумента, ПараметрыВыгрузки, Ошибки);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти // ИнтерфейсФЛК

Функция ТекущиеЭтапыДокумента(Форма) Экспорт
	
	РезультатФункции = Новый Массив;
	
	ДанныеСостояния = Saby_ТНОбщегоНазначенияСервер.ДанныеСостоянияОбъекта(Форма.Объект.Ссылка);
	Если ДанныеСостояния <> Неопределено Тогда
		ТекущийТитул = Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов(
			"Saby_ЗаказНаПеревозку", "ЗначениеПоПредставлению", ДанныеСостояния.АктивныйЭтап);
	Иначе
		ТекущийТитул = Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов("Saby_ЗаказНаПеревозку", "ПервыйТитул");
	КонецЕсли;
	
	РезультатФункции.Добавить(ТекущийТитул);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ВложенияЗагружены(Вложения, Титул, ОбъектДок, ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Вложения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВложенияМассив = Saby_ТНОбщегоНазначенияКлиентСервер.ЗначениеВМассив(Вложения);
	
	Если Титул = Перечисления.Saby_ТипТитулаЗнП.Оформление Тогда
		
		ЗагрузкаТитулаОформление(ОбъектДок, ВложенияМассив, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЗнП.Утверждение Тогда
		
		ЗагрузкаТитулаУтверждение(ОбъектДок, ВложенияМассив, Титул, ДопПараметры);
				
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ТитулыДляЗагрузки(ОбъектДок, ПараметрыЗагрузки) Экспорт
	
	ТекущиеЗначения = Saby_ТНЗагрузкаСервер.ТекущиеЗначенияДокумента(ОбъектДок, ПараметрыЗагрузки);
	
	Этап = ТекущиеЗначения.Титул;
	
	Если ЗначениеЗаполнено(ТекущиеЗначения.Состояние) Тогда  
	   КодСостояния = Saby_ТНОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеЗначения.Состояние, "ИдентификаторСБИС");
	КонецЕсли;   
	
	ТипыТитулов = Saby_ТНОбщегоНазначенияСервер.ВсеЗначенияПеречисления("Saby_ТипТитулаЗнП");
	
    МассивТитуловДляЗагрузки = Новый Массив;
	
	ДОЗавершенУспешно      = 7;
	ДОЗавершенОтрицательно = 9;
	
	Если КодСостояния = ДОЗавершенУспешно
		Или КодСостояния = ДОЗавершенОтрицательно Тогда
		
		Если ПараметрыЗагрузки.ТолькоАктивныйЭтап Тогда
			МассивТитуловДляЗагрузки.Добавить(Этап);
		Иначе
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["Утверждение"]);
		КонецЕсли;
		
		Возврат МассивТитуловДляЗагрузки;	
		
	КонецЕсли;	
	
	Если ПараметрыЗагрузки.ТолькоАктивныйЭтап Тогда
		
		// В регистре состояния нет данных о текущем этапе, при этом документооборот не завершен.
		Если Этап.Пустая() Тогда
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["Оформление"]);
		Иначе
			МассивТитуловДляЗагрузки.Добавить(Этап);
		КонецЕсли;
		
	Иначе
		
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["Оформление"]);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["Утверждение"]);
		
	КонецЕсли;
	
	Возврат МассивТитуловДляЗагрузки;

КонецФункции

#Область ЗаполнениеНаОснованииИНИИнтерфейс

Функция ШаблонИмениINI() Экспорт
	
	Возврат "Blockly_%1_ЗнП_read";
	
КонецФункции

Процедура СформироватьНовыеОснования(СтруктураРезультата, ДанныеИзИНИ) Экспорт
	
	ГрузоотправительСсылка = ДанныеИзИНИ["ГрузоотправительСсылка"];
	
	Если ЗначениеЗаполнено(ГрузоотправительСсылка) Тогда
		
		СтруктураОснования = Saby_ТНОбщегоНазначенияСервер.СтруктураОснования(
			ГрузоотправительСсылка, "Отправитель");
		СтруктураРезультата.НовыеОснования.Добавить(СтруктураОснования);
		
	КонецЕсли;
	
	ГрузоперевозчикСсылка = ДанныеИзИНИ["ГрузоперевозчикСсылка"];
	Если ЗначениеЗаполнено(ГрузоперевозчикСсылка) Тогда
		СтруктураОснования = Saby_ТНОбщегоНазначенияСервер.СтруктураОснования(
			ГрузоперевозчикСсылка, "Перевозчик");
		СтруктураРезультата.НовыеОснования.Добавить(СтруктураОснования);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПодстановки(ДанныеИзИНИ, ПараметрыЗаполнения) Экспорт
	
	Если ПараметрыЗаполнения.РольКонтрагента = "Отправитель" Тогда
		ДополнитьПодстановкиГрузоотправителя(ДанныеИзИНИ, ПараметрыЗаполнения);
	ИначеЕсли ПараметрыЗаполнения.РольКонтрагента = "Перевозчик" Тогда
		ДополнитьПодстановкиГрузоперевозчика(ДанныеИзИНИ, ПараметрыЗаполнения);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ЗаполнениеНаОснованииИНИИнтерфейс

Функция ДоступныеОрганизацииЭтапы(ОбъектДок, ПараметрыЗагрузки) Экспорт
	
	РезультатФункции = Новый Соответствие;
	
	ДанныеНашейОрганизации = Saby_ТНЗагрузкаСервер.ИННКППОрганизации(
		ПараметрыЗагрузки.ДанныеДокумента["НашаОрганизация"]);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Роль", Перечисления.Saby_РолиКонтрагентов.Отправитель);
	СтруктураПоиска.Вставить("ИНН",  ДанныеНашейОрганизации.ИНН);
	СтруктураПоиска.Вставить("КПП",  ДанныеНашейОрганизации.КПП);
	НайденныеСтроки = ОбъектДок.ДанныеЮрЛиц.НайтиСтроки(СтруктураПоиска);
	
	ЭтоОрганизацияОтправитель = НайденныеСтроки.Количество() > 0
		И Saby_ТНОбщегоНазначенияСервер.ОрганизацияПрисутствуетВБазе(СтруктураПоиска.ИНН, СтруктураПоиска.КПП);
		
	СтруктураПоиска.Вставить("Роль", Перечисления.Saby_РолиКонтрагентов.Перевозчик);
	НайденныеСтроки = ОбъектДок.ДанныеЮрЛиц.НайтиСтроки(СтруктураПоиска);
	
	ЭтоОрганизацияПеревозчик = НайденныеСтроки.Количество() > 0
		И Saby_ТНОбщегоНазначенияСервер.ОрганизацияПрисутствуетВБазе(СтруктураПоиска.ИНН, СтруктураПоиска.КПП);
	
	Для Каждого ТекущийЭтап Из ПараметрыЗагрузки.ДанныеДокумента["ТекущиеЭтапы"] Цикл
		
		НаименованиеЭтапа = ТекущийЭтап["Наименование"];
		
		ЭтапДоступен = (НаименованиеЭтапа = "Оформление" И ЭтоОрганизацияОтправитель)
			Или (НаименованиеЭтапа = "Утверждение" И ЭтоОрганизацияПеревозчик);

		Если ЭтапДоступен Тогда
			РезультатФункции.Вставить(НаименованиеЭтапа, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДобавитьДополнительныеДанныеВЛенту(МенеджерВременныхТаблиц, СсылкаНаДокумент) Экспорт
	
	Возврат ;
	
КонецПроцедуры

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ПользовательскиеТипыДляЗаполненияНаОсновании()
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатФункции = ХранилищеОбщихНастроек.Загрузить("Saby", "ТипыДляЗаполненияНаОснованииДокументаЗнП");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ТипыПоУмолчаниюДляЗаполненияНаОсновании()
	
	РезультатФункции = Новый Массив;
	
	СинонимКонфигурации = Метаданные.Синоним;
	
	ДоступныеКонфигурации    = Saby_ТНОбщегоНазначенияСервер.ДоступныеКонфигурации();
	ЭтоДоступнаяКонфигурация = Saby_ТНОбщегоНазначенияСервер.ЭтоДоступнаяКонфигурация(
		СинонимКонфигурации, ДоступныеКонфигурации);
		
	Если Не ЭтоДоступнаяКонфигурация Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Если Метаданные.Синоним <> ДоступныеКонфигурации.УАТ Тогда
		
		РезультатФункции.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		РезультатФункции.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
		РезультатФункции.Добавить(Тип("ДокументСсылка.ПеремещениеТоваров"));
		РезультатФункции.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		
		Если Метаданные.Синоним <> ДоступныеКонфигурации.Бух3 Тогда			
			РезультатФункции.Добавить(Тип("ДокументСсылка.ОтгрузкаТоваровСХранения"));
		    РезультатФункции.Добавить(Тип("ДокументСсылка.ПередачаТоваровХранителю"));			
		КонецЕсли;	
		
		Если Метаданные.Синоним = ДоступныеКонфигурации.ЕРП Тогда			
			
			РезультатФункции.Добавить(Тип("ДокументСсылка.ВозвратСырьяДавальцу"));
			РезультатФункции.Добавить(Тип("ДокументСсылка.ПередачаДавальцу"));
			РезультатФункции.Добавить(Тип("ДокументСсылка.ПередачаСырьяПереработчику"));
			
		ИначеЕсли Метаданные.Синоним = ДоступныеКонфигурации.КА Тогда						
			
			РезультатФункции.Добавить(Тип("ДокументСсылка.ПередачаСырьяПереработчику"));
			
		Иначе
			
			Возврат РезультатФункции;
			
		КонецЕсли;
						
	КонецЕсли;	
	
	Возврат РезультатФункции;
		
КонецФункции

#Область ФЛК

Функция ФЛК(РеквизитОбъектаЗнП, ЭлементФормыЗнП, ОшибкаЗнП)
	
	Возврат Saby_ТНОбщегоНазначенияСервер.СтруктураФЛК(РеквизитОбъектаЗнП, ЭлементФормыЗнП, ОшибкаЗнП);
	
КонецФункции

Процедура ДополнитьПроверяемыеРеквизитыЭтапаОформление(ДанныеДокумента, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить(ФЛК("Заказчик", "ОтправительСтрокой", "Не заполнен заказчик"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("ПредставительЗаказчикаНаименование", "ОформительСтрокой", "Не заполнено наименование представителя заказчика"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("ПредставительЗаказчика_Основание", "Оформитель_Основание", "Не заполнено основание представителя заказчика"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Перевозчик", "ПеревозчикСтрокой", "Не заполнен перевозчик"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Договор", "Договор", "Не заполнен договор"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("СпецУсловия", "СпецУсловия", "Не заполнены указания для выполнения норм установленных законодательством РФ"));
		
	ФЛК = ФЛК("ТребованияКТС",
		"ТребованияКТС",
		"Не заполнены требования о необходимости предоставления ТС для перевозки пищевых продуктов");
	ПроверяемыеРеквизиты.Добавить(ФЛК);
		
	
	ПроверяемыеРеквизиты.Добавить(ФЛК("ПодачаАдрес", "ДекорацияЗаполнитьПодачаТС", "Не заполнен адрес пункта подачи ТС"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("ПодачаДатаВремя", "ПодачаДата", "Не заполнена дата подачи ТС"));
	
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("АдресаПунктовВыгрузки", "АдресаПунктовВыгрузки", "В списке пунктов погрузки/выгрузки не введено ни одной строки"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("АдресаПунктовВыгрузки.Значение", "АдресаПунктовВыгрузкиЗначение", "Не заполнен адрес погрузки/выгрузки"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("АдресаПунктовВыгрузки.ДатаВремя", "АдресаПунктовВыгрузкиДатаВремя", "Не заполнена дата погрузки/выгрузки"));
	ФЛК = ФЛК("АдресаПунктовВыгрузки.ОрганизацияСтрока",
		"АдресаПунктовВыгрузкиОрганизацияСтрока",
		"Не заполнена организация пункта погрузки");
	ПроверяемыеРеквизиты.Добавить(ФЛК);
	
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы", "Грузы", "В списке грузов не введено ни одной строки"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы.Тип", "ГрузыТип", "Не заполнен тип груза"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы.НаименованиеГруза", "ГрузыНаименование", "Не заполнено наименование груза"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы.Состояние", "ГрузыСостояние", "Не заполнено состояние груза"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы.Количество", "ГрузыКоличество", "Не заполнено количество в грузе"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы.МассаБрутто", "ГрузыМассаБрутто", "Не заполнена масса брутто груза"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы.ВидТары", "ГрузыВидТары", "Не заполнен вид тары в грузе"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("Грузы.МетодОпределенияМассы", "ГрузыМетодОпределенияМассы", "Не заполнен метод определения массы грузовых мест"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы.Объем", "ГрузыОбъем", "Не заполнен объем грузовых мест"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы.Длина", "ГрузыДлина", "Не заполнена длина грузового места"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы.Ширина", "ГрузыШирина", "Не заполнена ширина грузового места"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы.Высота", "ГрузыВысота", "Не заполнена высота грузового места"));
	ФЛК = ФЛК("Грузы.РаспределениеПоДлинеПлатформы",
		"ГрузыРаспределениеПоДлинеПлатформы",
		"Не указана возможность распределения груза по длине платформы");
	ПроверяемыеРеквизиты.Добавить(ФЛК);
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы.Делимость", "ГрузыДелимость", "Не заполнена делимость груза"));
	
	ПроверяемыеРеквизиты.Добавить(ФЛК("ТипТС", "ТипТС", "Не заполнен тип ТС"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("ГрузоподъемностьТС", "ГрузоподъемностьТС", "Не заполнена грузоподъемность ТС"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("ВместимостьТС", "ВместимостьТС", "Не заполнена вместимость ТС"));
	
	ФЛК = ФЛК("ДанныеЮрЛиц.Полномочия",
		"УполномоченноеЛицоПеревозчика_Полномочия",
		"Не заполнены полномочия уполномоченного лица перевозчика");
	ПроверяемыеРеквизиты.Добавить(ФЛК);
	ФЛК = ФЛК("ДанныеЮрЛиц.Основание",
		"УполномоченноеЛицоПеревозчика_Основание",
		"Не заполнено основание уполномоченного лица перевозчика");
	ПроверяемыеРеквизиты.Добавить(ФЛК);
	
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаУтверждение(ДанныеДокумента, ПроверяемыеРеквизиты)
	
	ПрицепыРегистрационныйНомер = "ПрицепыРегистрационныйНомер";
	
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("ТранспортныеСредства.РегистрационныйНомер", ПрицепыРегистрационныйНомер, "Не заполнен регистрационный номер"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("ТранспортныеСредства.ТипВладения", ПрицепыРегистрационныйНомер, "Не заполнен тип владения"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("ТранспортныеСредства.Тип", ПрицепыРегистрационныйНомер, "Не заполнен тип"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("ТранспортныеСредства.Марка", "ПрицепыМарка", "Не заполнена марка"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("ТранспортныеСредства.Грузоподъемность", ПрицепыРегистрационныйНомер, "Не заполнена грузоподъемность"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("ТранспортныеСредства.Вместимость", ПрицепыРегистрационныйНомер, "Не заполнена вместимость"));
	
	ПолеОтветственныйЗаПеревозкуСтрокой = "ОтветственныйЗаПеревозкуСтрокой";
	
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("ОтветственныеЛица.Фамилия", ПолеОтветственныйЗаПеревозкуСтрокой, "Не заполнена фамилия ответственного"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("ОтветственныеЛица.Имя", ПолеОтветственныйЗаПеревозкуСтрокой, "Не заполнено имя ответственного"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("ОтветственныеЛица.ИНН", "", ""));
	ПроверяемыеРеквизиты.Добавить(ФЛК("ОтветственныеЛица.Серия", "", ""));
	ПроверяемыеРеквизиты.Добавить(ФЛК("ОтветственныеЛица.Номер", "", ""));
	ПроверяемыеРеквизиты.Добавить(ФЛК("ОтветственныеЛица.ДатаВыдачи", "", ""));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("ОтветственныеЛица.Телефоны", ПолеОтветственныйЗаПеревозкуСтрокой, "Не заполнен телефон ответственного"));
		
	ФЛК = ФЛК("ДанныеЮрЛиц.Полномочия",
		"УполномоченноеЛицоПеревозчика_Полномочия",
		"Не заполнены полномочия уполномоченного лица перевозчика");
	ПроверяемыеРеквизиты.Добавить(ФЛК);
	ФЛК = ФЛК("ДанныеЮрЛиц.Основание",
		"УполномоченноеЛицоПеревозчика_Основание",
		"Не заполнено основание уполномоченного лица перевозчика");
	ПроверяемыеРеквизиты.Добавить(ФЛК);
	
	ПроверяемыеРеквизиты.Добавить(ФЛК("СпецРазрешения.Вид", "СпецРазрешенияВид", "Не заполнен вид в списке спец разрешений"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("СпецРазрешения.Дата", "СпецРазрешенияДата", "Не заполнена дата в списке спец разрешений"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("СпецРазрешения.Номер", "СпецРазрешенияНомер", "Не заполнен номер в списке спец разрешений"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("СпецРазрешения.Срок", "СпецРазрешенияСрок", "Не заполнен срок в списке спец разрешений"));
	ФЛК = ФЛК("СпецРазрешения.НаименованиеОрганаВласти",
		"СпецРазрешенияНаименованиеОрганаВласти",
		"Не заполнено наименование органа власти в списке спец разрешений");
	ПроверяемыеРеквизиты.Добавить(ФЛК);
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("СпецРазрешения.ИД", "СпецРазрешенияИД", "Не заполнен идентификатор в списке спец разрешений"));
	
КонецПроцедуры

Процедура ДопПроверкиФЛКОформление(ДанныеДокумента, ПараметрыВыгрузки, Ошибки)
	
	ИмяТелефон = "Телефон";
	
	СтруктураОшибки = ФЛК("Отправитель_Телефон", "Отправитель_Телефон", "Не заполнен телефон заказчика");
	Saby_ТНОбщегоНазначенияСервер.ПроверитьКонтактныеДанные(ДанныеДокумента, "Отправитель", ИмяТелефон, Ошибки, СтруктураОшибки);
	
	СтруктураОшибки = ФЛК("Перевозчик_Телефон", "Перевозчик_Телефон", "Не заполнен телефон перевозчика");
	Saby_ТНОбщегоНазначенияСервер.ПроверитьКонтактныеДанные(ДанныеДокумента, "Перевозчик", ИмяТелефон, Ошибки, СтруктураОшибки);
		
КонецПроцедуры

Процедура ДопПроверкиФЛКУтверждение(ДанныеДокумента, ПараметрыВыгрузки, Ошибки)
	
	СоответствиеОшибок = Новый Соответствие;
	СоответствиеОшибок.Вставить(
		"ТранспортноеСредствоДокумент",
		ФЛК("ТранспортноеСредствоДокумент", "ТранспортноеСредствоСтрокой", "Не заполнен документ владения у транспортного средства"));
	СоответствиеОшибок.Вставить(
		"Прицепы.ПрицепДокумент",
		ФЛК("Прицепы.ПрицепДокумент", "ПрицепыРегистрационныйНомер", "Не заполнен документ владения в списке прицепов"));
	Saby_ТНОбщегоНазначенияСервер.ПроверитьЗаполнениеТипаВладения(ДанныеДокумента, Ошибки, СоответствиеОшибок);
	
КонецПроцедуры

Функция ПроверятьРеквизитОтветственного(СтрокаТЧ, ИмяРеквизита)
	
	Возврат СтрокаТЧ.Роль = Перечисления.Saby_РолиОтветственных.Ответственный
		И (ИмяРеквизита = "Фамилия" Или ИмяРеквизита = "Имя" Или ИмяРеквизита = "Телефоны");
	
КонецФункции

// Возвращает признак необходимости проверки реквизитов спец разрешений
//
// Параметры:
//  СтрокаТЧ - СтрокаТаблицыЗначений - строка таблицы, в которой проверяются реквизиты
//  ИмяРеквизита - Строка - имя текущего проверяемого реквизита
//
// Возвращаемое значение:
//   Булево - Истина, если реквизит необходимо проверять
//
Функция ПроверятьРеквизитыСпецРазрешения(СтрокаТЧ, ИмяРеквизита)
		
	Если ИмяРеквизита = "ИД" Тогда
		
		Возврат
			Не ЗначениеЗаполнено(СтрокаТЧ.Номер) 
			Или Не ЗначениеЗаполнено(СтрокаТЧ.Дата)
			Или Не ЗначениеЗаполнено(СтрокаТЧ.Срок)
			Или Не ЗначениеЗаполнено(СтрокаТЧ.Вид)
			Или Не ЗначениеЗаполнено(СтрокаТЧ.НаименованиеОрганаВласти);
			
	Иначе
		Возврат Не ЗначениеЗаполнено(СтрокаТЧ.ИД);
	КонецЕсли;	
		
КонецФункции

Функция РеквизитВодителя(ИмяРеквизита)
	
	ВодителиВУ = "ВодителиВУ";
	
	Если ИмяРеквизита = "Фамилия" Тогда
		Возврат ФЛК("Водители.Фамилия", "ВодителиФИО", "Не заполнена фамилия водителя");
	ИначеЕсли ИмяРеквизита = "Имя" Тогда
		Возврат ФЛК("Водители.Имя", "ВодителиФИО", "Не заполнена имя водителя");
	ИначеЕсли ИмяРеквизита = "ИНН" Тогда
		Возврат ФЛК("Водители.ИНН", "ВодителиИНН", "Не заполнена ИНН водителя");
	ИначеЕсли ИмяРеквизита = "Серия" Тогда
		Возврат ФЛК("Водители.Серия", ВодителиВУ, "Не заполнена серия водительского удостоверения");
	ИначеЕсли ИмяРеквизита = "Номер" Тогда
		Возврат ФЛК("Водители.Номер", ВодителиВУ, "Не заполнен номер водительского удостоверения");
	ИначеЕсли ИмяРеквизита = "ДатаВыдачи" Тогда
		Возврат ФЛК("Водители.ДатаВыдачи", ВодителиВУ, "Не заполнена дата выдачи водительского удостоверения");
	ИначеЕсли ИмяРеквизита = "Телефоны" Тогда
		Возврат ФЛК("Водители.Телефоны", ВодителиВУ, "Не заполнен телефон водителя");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция РеквизитУполномоченногоЛицаЗаказчика(ИмяРеквизита)
	
	Если ИмяРеквизита = "Полномочия" Тогда
		Возврат ФЛК("УполномоченныеЛицаЗаказчика.Полномочия",
			"УполномоченныеЛицаЗаказчикаПолномочия",
			"Не заполнены полномочия уполномоченного лица заказчика");
	ИначеЕсли ИмяРеквизита = "Основание" Тогда
		Возврат ФЛК("УполномоченныеЛицаЗаказчика.Основание",
			"УполномоченныеЛицаЗаказчикаОснование",
			"Не заполнено основание уполномоченного лица заказчика");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти // ФЛК

#Область ЗаполнениеНаОснованииINI

Процедура ДополнитьПодстановкиГрузоотправителя(ДанныеИзИНИ, ПараметрыЗаполнения)
	
	ДанныеИзИНИ.Вставить("Грузоотправитель", Saby_ТНОбщегоНазначенияСервер.ДанныеЮрЛицаИзИНИ(ДанныеИзИНИ));
	
КонецПроцедуры

Процедура ДополнитьПодстановкиГрузоперевозчика(ДанныеИзИНИ, ПараметрыЗаполнения)
	
	ДанныеИзИНИ.Вставить("Грузоперевозчик", Saby_ТНОбщегоНазначенияСервер.ДанныеЮрЛицаИзИНИ(ДанныеИзИНИ));
	
КонецПроцедуры

#КонецОбласти // ЗаполнениеНаОснованииINI

#Область ДанныеДокумента

Функция ВыгрузкаДанныеОформление(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Номер");
	Реквизиты.Добавить("Дата");
	Реквизиты.Добавить("ВместимостьТС");
	Реквизиты.Добавить("ГрузоподъемностьТС");
	Реквизиты.Добавить("ТипТС");
	Реквизиты.Добавить("КузовТС");
	Реквизиты.Добавить("ПогрузкаТС");
	Реквизиты.Добавить("Договор");
	Реквизиты.Добавить("ВлажностьОт");
	Реквизиты.Добавить("ВлажностьДо");
	Реквизиты.Добавить("ТемператураОт");
	Реквизиты.Добавить("ТемператураДо");
	Реквизиты.Добавить("ИныеУсловия");
	Реквизиты.Добавить("ПредельныйСрок");
	Реквизиты.Добавить("ПредставительЗаказчика");
	Реквизиты.Добавить("ПредставительЗаказчикаНаименование");
	Реквизиты.Добавить("ПредставительЗаказчика_Основание");
	Реквизиты.Добавить("ТребованияКТС");
	Реквизиты.Добавить("СпецУсловия");
	Реквизиты.Добавить("ПодачаАдрес");
	Реквизиты.Добавить("ПодачаДатаВремя");
	Реквизиты.Добавить("ПодачаПредельныйИнтервал");
	Реквизиты.Добавить("КонечнаяТочкаАдрес");
	Реквизиты.Добавить("Отправитель_Экспедитор");
	Реквизиты.Добавить("Заказчик");
	Реквизиты.Добавить("Перевозчик");
	Реквизиты.Добавить("ТипДокумента");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("Грузы");
	Таблицы.Добавить("ДанныеЮрЛиц");
	Таблицы.Добавить("КонтактныеДанные");
	Таблицы.Добавить("АдресаПунктовВыгрузки");
	Таблицы.Добавить("АдресаПромежуточныхПунктов");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеУтверждение(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("ВалютаКод");
	Реквизиты.Добавить("ВалютаНаименование");
	Реквизиты.Добавить("СтавкаНДС");
    Реквизиты.Добавить("Сумма");
	Реквизиты.Добавить("СуммаБезНДС");
	Реквизиты.Добавить("СуммаСНДС");
	Реквизиты.Добавить("МеханизмРасчета");
		
	Таблицы = Новый Массив;
	Таблицы.Добавить("ДанныеЮрЛиц");
	Таблицы.Добавить("КонтактныеДанные");
	Таблицы.Добавить("ТранспортныеСредства");	
	Таблицы.Добавить("ОтветственныеЛица");
	Таблицы.Добавить("СпецРазрешения");
	Таблицы.Добавить("Водители");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы)
	
	РезультатФункции = Новый Структура;
	
	РезультатФункции.Вставить("ИмяМетаданных", "Saby_ЗаказНаПеревозку");
	
	// Ссылка всегда должна быть
	Реквизиты.Добавить("Ссылка");
	
	ТекстЗапросаРеквизитов = ТекстЗапросаРеквизитов();
	ШаблонЗапросаТаблиц    = ШаблонЗапросаТаблиц();
	
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитыИзБД(
		РезультатФункции, СсылкаНаДокумент, Реквизиты, ТекстЗапросаРеквизитов);
	
	НестандартныеЗапросыТаблиц = НестандартныеЗапросыТаблиц(Таблицы);
	
	Saby_ТНОбщегоНазначенияСервер.ДобавитьТаблицыИзБД(
		РезультатФункции, СсылкаНаДокумент, Таблицы, ШаблонЗапросаТаблиц, НестандартныеЗапросыТаблиц);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ТекстЗапросаРеквизитов()
	
	Возврат
	"ВЫБРАТЬ
    |	Saby_ЗаказНаПеревозку.Ссылка КАК Ссылка,
    |	Saby_ЗаказНаПеревозку.ВерсияДанных КАК ВерсияДанных,
    |	Saby_ЗаказНаПеревозку.ПометкаУдаления КАК ПометкаУдаления,
    |	Saby_ЗаказНаПеревозку.Номер КАК Номер,
    |	Saby_ЗаказНаПеревозку.Дата КАК Дата,
    |	Saby_ЗаказНаПеревозку.Проведен КАК Проведен,
    |	Saby_ЗаказНаПеревозку.ВалютаКод КАК ВалютаКод,
    |	Saby_ЗаказНаПеревозку.ВалютаНаименование КАК ВалютаНаименование,
    |	Saby_ЗаказНаПеревозку.ВлажностьДо КАК ВлажностьДо,
    |	Saby_ЗаказНаПеревозку.ВлажностьОт КАК ВлажностьОт,
    |	Saby_ЗаказНаПеревозку.ВместимостьТС КАК ВместимостьТС,
    |	Saby_ЗаказНаПеревозку.ГрузоподъемностьТС КАК ГрузоподъемностьТС,
    |	Saby_ЗаказНаПеревозку.ДатаИзменения КАК ДатаИзменения,
    |	Saby_ЗаказНаПеревозку.Договор КАК Договор,
    |	Saby_ЗаказНаПеревозку.ДокументОснование_Идентификатор КАК ДокументОснование_Идентификатор,
    |	Saby_ЗаказНаПеревозку.ДокументОснование_ОбъектМетаданных КАК ДокументОснование_ОбъектМетаданных,
    |	Saby_ЗаказНаПеревозку.Заказчик КАК Заказчик,
    |	Saby_ЗаказНаПеревозку.ИныеУсловия КАК ИныеУсловия,
    |	Saby_ЗаказНаПеревозку.Комментарий КАК Комментарий,
    |	Saby_ЗаказНаПеревозку.КонечнаяТочкаАдрес КАК КонечнаяТочкаАдрес,
    |	Saby_ЗаказНаПеревозку.КонечнаяТочкаАдресСтруктура КАК КонечнаяТочкаАдресСтруктура,
    |	Saby_ЗаказНаПеревозку.КузовТС КАК КузовТС,
    |	Saby_ЗаказНаПеревозку.МеханизмРасчета КАК МеханизмРасчета,
    |	Saby_ЗаказНаПеревозку.Направление КАК Направление,
    |	Saby_ЗаказНаПеревозку.НомерСбис КАК НомерСбис,
    |	Saby_ЗаказНаПеревозку.Перевозчик КАК Перевозчик,
    |	Saby_ЗаказНаПеревозку.ПогрузкаТС КАК ПогрузкаТС,
    |	Saby_ЗаказНаПеревозку.ПодачаАдрес КАК ПодачаАдрес,
    |	Saby_ЗаказНаПеревозку.ПодачаАдресСтруктура КАК ПодачаАдресСтруктура,
    |	Saby_ЗаказНаПеревозку.ПодачаДатаВремя КАК ПодачаДатаВремя,
	|	Saby_ЗаказНаПеревозку.ПодачаПредельныйИнтервал КАК ПодачаПредельныйИнтервал,
    |	Saby_ЗаказНаПеревозку.ПредельныйСрок КАК ПредельныйСрок,
    |	Saby_ЗаказНаПеревозку.ПредставительЗаказчика КАК ПредставительЗаказчика,
	|	Saby_ЗаказНаПеревозку.ПредставительЗаказчикаНаименование КАК ПредставительЗаказчикаНаименование,
    |	Saby_ЗаказНаПеревозку.ПредставительЗаказчика_Основание КАК ПредставительЗаказчика_Основание,
    |	Saby_ЗаказНаПеревозку.СпецУсловия КАК СпецУсловия,
    |	Saby_ЗаказНаПеревозку.СтавкаНДС КАК СтавкаНДС,
    |	Saby_ЗаказНаПеревозку.Сумма КАК Сумма,
    |	Saby_ЗаказНаПеревозку.СуммаБезНДС КАК СуммаБезНДС,
    |	Saby_ЗаказНаПеревозку.СуммаСНДС КАК СуммаСНДС,
    |	Saby_ЗаказНаПеревозку.ТемператураДо КАК ТемператураДо,
    |	Saby_ЗаказНаПеревозку.ТемператураОт КАК ТемператураОт,
    |	Saby_ЗаказНаПеревозку.ТипДокумента КАК ТипДокумента,
    |	Saby_ЗаказНаПеревозку.ТипТС КАК ТипТС,
    |	Saby_ЗаказНаПеревозку.ТранспортноеСредствоСтрокой КАК ТранспортноеСредствоСтрокой,
    |	Saby_ЗаказНаПеревозку.ТребованияКТС КАК ТребованияКТС,
    |	Saby_ЗаказНаПеревозку.Представление КАК Представление,
    |	Saby_ЗаказНаПеревозку.МоментВремени КАК МоментВремени,
	|	ЛОЖЬ КАК Отправитель_Экспедитор
    |ИЗ
    |	Документ.Saby_ЗаказНаПеревозку КАК Saby_ЗаказНаПеревозку
    |ГДЕ
    |	Saby_ЗаказНаПеревозку.Ссылка = &Ссылка";
	
КонецФункции

Функция ШаблонЗапросаТаблиц()
	
	Возврат
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Документ.Saby_ЗаказНаПеревозку.%1 КАК ТЧЗаказаНаПеревозку
	|ГДЕ
	|	ТЧЗаказаНаПеревозку.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
КонецФункции

Функция НестандартныеЗапросыТаблиц(Таблицы)
	
	РезультатФункции = Новый Соответствие;
	
	Для Каждого ИмяТаблицы Из Таблицы Цикл
		
		ТекстЗапроса = Неопределено;
		
		Если ИмяТаблицы = "Грузы" Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Saby_ЗаказНаПеревозкуГрузы.Тип КАК Тип,
			|	Saby_ЗаказНаПеревозкуГрузы.МассаБрутто КАК МассаБрутто,
			|	Saby_ЗаказНаПеревозкуГрузы.МассаНетто КАК МассаНетто,
			|	Saby_ЗаказНаПеревозкуГрузы.Высота КАК Высота,
			|	Saby_ЗаказНаПеревозкуГрузы.Длина КАК Длина,
			|	Saby_ЗаказНаПеревозкуГрузы.Количество КАК КоличествоМест,
			|	Saby_ЗаказНаПеревозкуГрузы.КоличествоПаллет КАК КоличествоПаллет,
			|	Saby_ЗаказНаПеревозкуГрузы.Объем КАК Объем,
			|	Saby_ЗаказНаПеревозкуГрузы.Ширина КАК Ширина,
			|	Saby_ЗаказНаПеревозкуГрузы.Количество КАК Количество,
			|	Saby_ЗаказНаПеревозкуГрузы.Количество КАК КоличествоГрузовыхМест,
			|	Saby_ЗаказНаПеревозкуГрузы.Наименование КАК НаименованиеГруза,
			|	Saby_ЗаказНаПеревозкуГрузы.Состояние КАК Состояние,
			|	Saby_ЗаказНаПеревозкуГрузы.ВидТары КАК ВидТары,
			|	Saby_ЗаказНаПеревозкуГрузы.ВидТары.Код КАК ТараКод,
			|	Saby_ЗаказНаПеревозкуГрузы.Договор КАК Договор,
			|	Saby_ЗаказНаПеревозкуГрузы.КлючСтроки_ДанныеЮрЛиц КАК КлючСтроки_ДанныеЮрЛиц,
			|	Saby_ЗаказНаПеревозкуГрузы.КлючСтроки КАК КлючСтроки,
			|	Saby_ЗаказНаПеревозкуГрузы.МетодОпределенияМассы КАК МетодОпределенияМассы,
			|	Saby_ЗаказНаПеревозкуГрузы.РаспределениеПоДлинеПлатформы КАК РаспределениеПоДлинеПлатформы,
			|	Saby_ЗаказНаПеревозкуГрузы.Делимость КАК Делимость,
			|	Saby_ЗаказНаПеревозкуГрузы.ПогрузкаВодителем КАК ПогрузкаВодителем,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз КАК ОпасныйГруз,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.Наименование КАК Наименование,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.НомерООН КАК НомерООН,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ТехническоеНаименование КАК ТехническоеНаименование,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.Комментарий КАК Комментарий,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.Класс КАК Класс,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.КлассификационныйКод КАК КлассификационныйКод,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ГруппаУпаковкиЗначение КАК ГруппаУпаковкиЗначение,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ЗнакОпасности КАК ЗнакОпасности,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ОграничениеПроездаЧерезТуннели КАК ОграничениеПроездаЧерезТуннели,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.НазваниеРадионуклида КАК НазваниеРадионуклида,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ФизИХимФорма КАК ФизХимФорма,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.МаксАктивность КАК РадиоактивныйМаксАктивность,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.КатегорияУпаковки КАК КатегорияУпаковки,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ТранспортныйИндекс КАК ТранспортныйИндекс,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ИндексБезопасности КАК ИндексБезопасности,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ОпознавательныйЗнак КАК ОпознавательныйЗнак,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ПолнаяАктивность КАК РадиоактивныйПолнаяАктивность,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.МассаНеттоВзрывчатый КАК МассаНеттоВзрывчатый,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.МассаНеттоВзрывчатыйВсего КАК МассаНеттоВзрывчатыйВсего,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ПроцентСмеси КАК ПроцентСмеси,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ДатаИстеченияУдержания КАК ДатаИстеченияУдержания,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.КонтрольнаяТемпература КАК ТемператураКонтрольная,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.АварийнаяТемпература КАК ТемператураАварийная,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.Представление КАК Представление
			|ИЗ
			|	Документ.Saby_ЗаказНаПеревозку.Грузы КАК Saby_ЗаказНаПеревозкуГрузы
			|ГДЕ
			|	Saby_ЗаказНаПеревозкуГрузы.Ссылка = &Ссылка";
			
		ИначеЕсли ИмяТаблицы = "Водители" Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Saby_ЗаказНаПеревозкуОтветственныеЛица.Ссылка КАК Ссылка,
			|	Saby_ЗаказНаПеревозкуОтветственныеЛица.НомерСтроки КАК НомерСтроки,
			|	Saby_ЗаказНаПеревозкуОтветственныеЛица.КлючСтроки КАК КлючСтроки,
			|	Saby_ЗаказНаПеревозкуОтветственныеЛица.ИНН КАК ИНН,
			|	Saby_ЗаказНаПеревозкуОтветственныеЛица.Серия КАК Серия,
			|	Saby_ЗаказНаПеревозкуОтветственныеЛица.Номер КАК Номер,
			|	Saby_ЗаказНаПеревозкуОтветственныеЛица.ДатаВыдачи КАК ДатаВыдачи,
			|	Saby_ЗаказНаПеревозкуОтветственныеЛица.Фамилия КАК Фамилия,
			|	Saby_ЗаказНаПеревозкуОтветственныеЛица.Имя КАК Имя,
			|	Saby_ЗаказНаПеревозкуОтветственныеЛица.Отчество КАК Отчество,
			|	Saby_ЗаказНаПеревозкуОтветственныеЛица.Телефоны КАК Телефоны,
			|	Saby_ЗаказНаПеревозкуОтветственныеЛица.Роль КАК Роль,
			|	Saby_ЗаказНаПеревозкуОтветственныеЛица.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
			|	Saby_ЗаказНаПеревозкуОтветственныеЛица.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
			|	Saby_ЗаказНаПеревозкуОтветственныеЛица.Должность КАК Должность,
			|	Saby_ЗаказНаПеревозкуОтветственныеЛица.ШтатныйСотрудник КАК ШтатныйСотрудник
			|ИЗ
			|	Документ.Saby_ЗаказНаПеревозку.ОтветственныеЛица КАК Saby_ЗаказНаПеревозкуОтветственныеЛица
			|ГДЕ
			|	Saby_ЗаказНаПеревозкуОтветственныеЛица.Ссылка = &Ссылка
			|	И Saby_ЗаказНаПеревозкуОтветственныеЛица.Роль = ЗНАЧЕНИЕ(Перечисление.Saby_РолиОтветственных.Водитель)";
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ТекстЗапроса <> Неопределено Тогда
			РезультатФункции.Вставить(ИмяТаблицы, ТекстЗапроса);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ДанныеДокумента

#Область Выгрузка

#Область Выгрузка_Оформление

Функция ТитулОформление(ДанныеДокумента)
	
	СтруктураТитула = Новый Структура;
	
	Документ = Новый Структура;
	Документ.Вставить("Номер", ДанныеДокумента.Номер);
	СтруктураТитула.Вставить("Документ", Документ);
	
	ПараметрыТС = Новый Структура;
	ПараметрыТС.Вставить("Вместимость",      ДанныеДокумента.ВместимостьТС);
	ПараметрыТС.Вставить("Грузоподъемность", ДанныеДокумента.ГрузоподъемностьТС);
	ПараметрыТС.Вставить("Тип",              ДанныеДокумента.ТипТС);
	ПараметрыТС.Вставить("ТипКузова",        ДанныеДокумента.КузовТС);
	ПараметрыТС.Вставить("ТипПогрузки",      ДанныеДокумента.ПогрузкаТС);
	
	СтруктураТитула.Вставить("ПараметрыТС", ПараметрыТС);
	
	МассивДокументов = Новый Массив();
	МассивДокументов.Добавить(ДанныеДокумента.Договор);
	МассивДокументов.Добавить(ДанныеДокумента.ПредставительЗаказчика_Основание);
	ДанныеДокументов = Saby_ТНОбщегоНазначенияСервер.РеквизитыДокументовСбис(МассивДокументов);
	
	ДанныеДоговора = ДанныеДокументов.Получить(ДанныеДокумента.Договор);
	Если ДанныеДоговора <> Неопределено Тогда
				
		ОбработатьСлужебныеСвойстваСтруктурыДокумента(ДанныеДоговора, ДанныеДоговора.ДатаВремя);	
		СтруктураТитула.Вставить("Договор", ДанныеДоговора);
		
	КонецЕсли;
	
	СтруктураТитула.Вставить("Маршрут", Маршрут(ДанныеДокумента));
	
	ЗаполнитьПредставителяЗаказчика(СтруктураТитула, ДанныеДокумента, ДанныеДокументов);
	
	СтруктураТитула.Вставить("УсловияПеревозки", УсловияПеревозки(ДанныеДокумента));
	
	СтруктураТитула.Вставить("Груз", Груз(ДанныеДокумента));
	
	СтруктураТитула.Вставить(
		"Грузоперевозчик", Saby_ТНВыгрузкаСервер.ДанныеЮрЛица("Перевозчик", ДанныеДокумента, Истина));
	
	СтруктураТитула.Вставить(
		"Грузоотправитель", Saby_ТНВыгрузкаСервер.ДанныеЮрЛица("Отправитель", ДанныеДокумента, Истина));
	
	ЗаполнитьУполномоченныхЛиц(СтруктураТитула.Грузоотправитель, ДанныеДокумента, "УполномоченноеЛицо");
	
	Возврат СтруктураТитула;
	
КонецФункции

Функция Маршрут(ДанныеДокумента)
	
	ИмяКлючаНазвание = "Название";
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("КонечныйПункт",      Новый Структура);
	РезультатФункции.Вставить("Отправление",        Новый Структура);
	РезультатФункции.Вставить("ПромежуточныйПункт", Новый Массив);
	РезультатФункции.Вставить("Пункт",              Новый Массив);
	
	РезультатФункции.КонечныйПункт.Вставить(ИмяКлючаНазвание, ДанныеДокумента.КонечнаяТочкаАдрес);
	
	ПодачаДатаВремя = Saby_ТНВыгрузкаСервер.СтруктураДатаВремя(ДанныеДокумента.ПодачаДатаВремя, , Истина);
	
	ПодачаПредельныйИнтервал = Дата(
		Год(ДанныеДокумента.ПодачаДатаВремя),
		Месяц(ДанныеДокумента.ПодачаДатаВремя),
		День(ДанныеДокумента.ПодачаДатаВремя),
		Час(ДанныеДокумента.ПодачаПредельныйИнтервал),
		Минута(ДанныеДокумента.ПодачаПредельныйИнтервал),
		Секунда(ДанныеДокумента.ПодачаПредельныйИнтервал));
		
	ПодачаПредельныйИнтервал = Saby_ТНВыгрузкаСервер.СтруктураДатаВремя(ПодачаПредельныйИнтервал, , Истина);
	
	ПодачаТС = Новый Структура;
	ПодачаТС.Вставить("ДатаВремя",                           ПодачаДатаВремя.Значение);
	ПодачаТС.Вставить("ДатаВремяНаличиеUTC",                 ПодачаДатаВремя.ЕстьЧасовойПояс);
	ПодачаТС.Вставить("ПредельныйИнтервалВремени",           ТолькоВремя(ПодачаПредельныйИнтервал.Значение));
	ПодачаТС.Вставить("ПредельныйИнтервалВремениНаличиеUTC", ПодачаПредельныйИнтервал.ЕстьЧасовойПояс);
	РезультатФункции.Отправление.Вставить("ПодачаТС", ПодачаТС);
	РезультатФункции.Отправление.Вставить("АдресТекст", ДанныеДокумента.ПодачаАдрес);
	
	Для Каждого СтрокаПромежуточногоПункта Из ДанныеДокумента.АдресаПромежуточныхПунктов Цикл
		СтруктураПромежуточногоПункта = Новый Структура;
		СтруктураПромежуточногоПункта.Вставить(ИмяКлючаНазвание, СтрокаПромежуточногоПункта.Значение);
		РезультатФункции.ПромежуточныйПункт.Добавить(СтруктураПромежуточногоПункта);
	КонецЦикла;
	
	Для Каждого СтрокаПункта Из ДанныеДокумента.АдресаПунктовВыгрузки Цикл
		СтруктураПункта = Новый Структура;
		СтруктураПункта.Вставить("АдресТекст", СтрокаПункта.Значение);
		
		ДатаВремя       = Saby_ТНВыгрузкаСервер.СтруктураДатаВремя(СтрокаПункта.ДатаВремя, , Истина);
		ДопустимоеВремя = Saby_ТНВыгрузкаСервер.СтруктураДатаВремя(СтрокаПункта.ДопустимоеВремя, , Истина);
		
		ТипОперации = Формат(СтрокаПункта.ЭтоПогрузка, "БЛ=Выгрузка; БИ=Погрузка");
		
		Операция = Новый Структура;
		Операция.Вставить("ДатаВремя",                           ДатаВремя.Значение);
		Операция.Вставить("ДатаВремяНаличиеUTC",                 ДатаВремя.ЕстьЧасовойПояс);
		Операция.Вставить("ПредельныйИнтервалВремени",           ТолькоВремя(ДопустимоеВремя.Значение));
		Операция.Вставить("ПредельныйИнтервалВремениНаличиеUTC", ДопустимоеВремя.ЕстьЧасовойПояс);
		Операция.Вставить("Тип",                                 ТипОперации);
		
		СтруктураПункта.Вставить("Операция", Операция);
		
		СтрокаЮрЛица = ДанныеДокумента.ДанныеЮрЛиц.Найти(СтрокаПункта.КлючСтроки_ДанныеЮрЛиц, "КлючСтроки");
		Если СтрокаЮрЛица <> Неопределено Тогда
			СтруктураПункта.Вставить("Организация", Новый Структура);
			СтруктураПункта.Организация.Вставить("ИНН", СтрокаЮрЛица.ИНН);
			СтруктураПункта.Организация.Вставить(ИмяКлючаНазвание, СтрокаЮрЛица.НаименованиеОрганизации);
		КонецЕсли;
		
		РезультатФункции.Пункт.Добавить(СтруктураПункта);
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьПредставителяЗаказчика(СтруктураТитула, ДанныеДокумента, ДанныеДокументов)
	
	Если Не ДанныеДокумента.ПредставительЗаказчика Тогда
		Возврат;
	КонецЕсли;
	
	Составитель = ДанныеДокумента.ПредставительЗаказчикаНаименование;
	
	Если Не ЗначениеЗаполнено(Составитель) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураТитула.Вставить("Файл", Новый Структура);		
	СтруктураТитула.Файл.Вставить("Составитель", Новый Структура);
	
	СтруктураТитула.Файл.Составитель.Вставить("Наименование", Составитель);
	
	Если ЗначениеЗаполнено(ДанныеДокумента.ПредставительЗаказчика_Основание) Тогда
		ДанныеОснования = ДанныеДокументов.Получить(ДанныеДокумента.ПредставительЗаказчика_Основание);
		Если ДанныеОснования <> Неопределено Тогда
							
			ОбработатьСлужебныеСвойстваСтруктурыДокумента(ДанныеОснования, ДанныеОснования.ДатаВремя);								
			Основание = Новый Структура;
			Основание.Вставить("Документ", ДанныеОснования);
			СтруктураТитула.Файл.Составитель.Вставить("Основание", Основание);
			
		КонецЕсли;
	КонецЕсли;
	
	СтруктураТитула.Документ.Вставить(
		"Оформитель",
		Saby_ТНВыгрузкаСервер.ДанныеЮрЛица("Оформитель", ДанныеДокумента, Истина));
	
КонецПроцедуры

Функция УсловияПеревозки(РеквизитыОбъекта)
	
	РезультатФункции = Новый Структура;
	
	ФорматЧисловогоЗначения = "ЧЦ=5; ЧДЦ=2; ЧРД=.";
	
	КлиматическийРежим = Новый Структура;
	КлиматическийРежим.Вставить("Влажность",   Новый Структура);
	КлиматическийРежим.Влажность.Вставить(
		"Минимальная",  Формат(РеквизитыОбъекта.ВлажностьОт, ФорматЧисловогоЗначения));
	КлиматическийРежим.Влажность.Вставить(
		"Максимальная", Формат(РеквизитыОбъекта.ВлажностьДо, ФорматЧисловогоЗначения));
	КлиматическийРежим.Вставить("Температура", Новый Структура);
	КлиматическийРежим.Температура.Вставить(
		"Минимальная",  Формат(РеквизитыОбъекта.ТемператураОт, ФорматЧисловогоЗначения));
	КлиматическийРежим.Температура.Вставить(
		"Максимальная", Формат(РеквизитыОбъекта.ТемператураДо, ФорматЧисловогоЗначения));
	
	РезультатФункции.Вставить("КлиматическийРежим",                    КлиматическийРежим);
	РезультатФункции.Вставить("Иные",                                  РеквизитыОбъекта.ИныеУсловия);
	РезультатФункции.Вставить("ПредельныйСрок",                        РеквизитыОбъекта.ПредельныйСрок);
	РезультатФункции.Вставить("ТребованияПоПеревозкеПищевыхПродуктов", РеквизитыОбъекта.ТребованияКТС);
	РезультатФункции.Вставить("УказанияНорм",                          РеквизитыОбъекта.СпецУсловия);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ТолькоВремя(ДатаВремяСтрокой)
	
	РазделительВремени = "T";
	Если Найти(ДатаВремяСтрокой, РазделительВремени) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	МассивЗначений = СтрРазделить(ДатаВремяСтрокой, РазделительВремени);
	
	Возврат МассивЗначений[МассивЗначений.ВГраница()];
	
КонецФункции

#Область Груз

Функция Груз(ДанныеДокумента)
	
	МассивПозиций = Новый Массив;
	
	МассивДокументов = ДанныеДокумента.Грузы.ВыгрузитьКолонку("Договор");
	ДанныеДокументов = Saby_ТНОбщегоНазначенияСервер.РеквизитыДокументовСбис(МассивДокументов);
	
	Контейнер = Перечисления.Saby_ТипГруза.Контейнер;
	
	Для Каждого СтрокаГруза Из ДанныеДокумента.Грузы Цикл
		
		СтруктураГруза = ШаблонГруза();
		
		ЗаполнитьЗначенияСвойств(СтруктураГруза, СтрокаГруза, , "ОпасныйГруз");
		
		СтруктураГруза.Наименование = СтрокаГруза.НаименованиеГруза;
		
		МетодОпределенияМассы = Перечисления.Saby_МетодОпределенияМассы.КодПоМетодуОпределенияМассы(
			СтрокаГруза.МетодОпределенияМассы, Истина);		
						
		РаспределениеПоДлинеПлатформы = Формат(СтрокаГруза.РаспределениеПоДлинеПлатформы, "БЛ=1; БИ=0");
		Делимость                     = Формат(СтрокаГруза.Делимость,                     "БЛ=0; БИ=1");
		ПогрузкаВодителем             = Формат(СтрокаГруза.ПогрузкаВодителем,             "БЛ=1; БИ=0");
		ГруженностьКонтейнера         = Формат(СтрокаГруза.Тип = Контейнер,               "БЛ=;  БИ=0");
		
		СтруктураГруза.МетодОпределенияМассы         = МетодОпределенияМассы;
		СтруктураГруза.РаспределениеПоДлинеПлатформы = РаспределениеПоДлинеПлатформы;
		СтруктураГруза.Делимость                     = Делимость;
		СтруктураГруза.ПогрузкаВодителем             = ПогрузкаВодителем;
		СтруктураГруза.ГруженностьКонтейнера         = ГруженностьКонтейнера;
		
		ДанныеДоговора = ДанныеДокументов.Получить(СтрокаГруза.Договор);
		Если ДанныеДоговора <> Неопределено Тогда
			Если ДанныеДоговора.Свойство("ДатаВремя") Тогда
				ОбработатьСлужебныеСвойстваСтруктурыДокумента(ДанныеДоговора, ДанныеДоговора.ДатаВремя);
			КонецЕсли;
			СтруктураГруза.Вставить("Договор", ДанныеДоговора);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаГруза.КлючСтроки_ДанныеЮрЛиц) Тогда
			
			ДанныеОрганизации = ДанныеОрганизации(ДанныеДокумента, СтрокаГруза.КлючСтроки_ДанныеЮрЛиц);			
			ДанныеОрганизации.Вставить("Ссылка", ДанныеДокумента.Ссылка);
			
			СтруктураГруза.Вставить(
				"Заказчик",
				Saby_ТНВыгрузкаСервер.ДанныеЮрЛица(ДанныеОрганизации.РольСтрокой, ДанныеОрганизации, Истина));
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаГруза.ОпасныйГруз) Тогда
			
			ОпасныеГрузыИзДокумента = Новый Массив;
			ОпасныйГруз             = Новый Массив;
			
			ОпасныеГрузыИзДокумента.Добавить(СтрокаГруза);
						
			Saby_ТНВыгрузкаСервер.ЗаполнитьОпасныйГрузДляВыгрузки(ОпасныеГрузыИзДокумента, ОпасныйГруз);						
			СтруктураГруза.ОпасныйГруз = ОпасныйГруз[0];
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураГруза.Параметры, СтрокаГруза);
		СтруктураГруза.Параметры.Масса.Брутто = Формат(СтрокаГруза.МассаБрутто, "ЧДЦ=3; ЧРД=.; ЧГ=");
		СтруктураГруза.Параметры.Масса.Нетто  = Формат(СтрокаГруза.МассаНетто,  "ЧДЦ=3; ЧРД=.; ЧГ=");
		
		ЗаполнитьЗначенияСвойств(СтруктураГруза.ПунктыПогрузкиВыгрузки, СтрокаГруза);
		
		МассивПозиций.Добавить(СтруктураГруза);
		
	КонецЦикла;
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Позиция", МассивПозиций);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ШаблонГруза()
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Договор",                       "");
	РезультатФункции.Вставить("Заказчик",                      "");
	РезультатФункции.Вставить("ОпасныйГруз",                   Новый Структура);
	РезультатФункции.Вставить("Параметры",                     Saby_ТНВыгрузкаСервер.ШаблонПараметровГруза());
	РезультатФункции.Вставить("ПунктыПогрузкиВыгрузки",        Новый Структура);
	РезультатФункции.Вставить("ГруженностьКонтейнера",         "");
	РезультатФункции.Вставить("Делимость",                     "");
	РезультатФункции.Вставить("ДопИнформация",                 "");
	РезультатФункции.Вставить("МетодОпределенияМассы",         "");
	РезультатФункции.Вставить("Наименование",                  "");
	РезультатФункции.Вставить("ПогрузкаВодителем",             "");
	РезультатФункции.Вставить("РаспределениеПоДлинеПлатформы", "");
	РезультатФункции.Вставить("Состояние",                     "");
	РезультатФункции.Вставить("ТараКод",                       "");
	РезультатФункции.Вставить("ТараМасса",                     "");
	
	РезультатФункции.ПунктыПогрузкиВыгрузки.Вставить("КоличествоГрузовыхМест", "");
	
	РезультатФункции.Параметры.Вставить("Масса", Новый Структура);
	РезультатФункции.Параметры.Масса.Вставить("Брутто", 0);
	РезультатФункции.Параметры.Масса.Вставить("Нетто",  0);
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // Груз

Функция ДанныеОрганизации(ДанныеДокумента, КлючСтроки_ДанныеЮрЛиц)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДанныеЮрЛиц",      Новый Массив);
	РезультатФункции.Вставить("КонтактныеДанные", Новый Массив);
	РезультатФункции.Вставить("РольСтрокой",      "");
	РезультатФункции.Вставить("ИмяМетаданных",    ДанныеДокумента.ИмяМетаданных);
	
	ОтборЮрЛиц = Новый Структура();
	ОтборЮрЛиц.Вставить("КлючСтроки", КлючСтроки_ДанныеЮрЛиц);
	
	РезультатФункции.ДанныеЮрЛиц = ДанныеДокумента.ДанныеЮрЛиц.НайтиСтроки(ОтборЮрЛиц);
		
	Если РезультатФункции.ДанныеЮрЛиц.Количество() > 0 Тогда
		
		Роль = РезультатФункции.ДанныеЮрЛиц[0].Роль;
		МетаданныеПеречисления = Роль.Метаданные();
		ИменаПеречисления = Saby_ТНОбщегоНазначенияСервер.ВсеЗначенияПеречисленияПоСинониму(МетаданныеПеречисления.Имя);
			
		РезультатФункции.РольСтрокой = ИменаПеречисления[СокрЛП(Роль)];
		
	КонецЕсли;
	
	ОтборКИ = Новый Структура();
	ОтборКИ.Вставить("КлючСтроки_ДанныеЮрЛиц", КлючСтроки_ДанныеЮрЛиц);

	РезультатФункции.КонтактныеДанные = ДанныеДокумента.КонтактныеДанные.НайтиСтроки(ОтборКИ);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ОбработатьСлужебныеСвойстваСтруктурыДокумента(ДанныеДокумента, ДатаДокумента)
	
	ДанныеДокумента.Вставить("Дата", Формат(ДатаДокумента, "ДФ=dd.MM.yyyy"));
	
	УдаляемыеСвойства = Новый Массив;
	УдаляемыеСвойства.Добавить("ДатаВремя");
	УдаляемыеСвойства.Добавить("Тип");
	
	Saby_ТНОбщегоНазначенияСервер.УдалитьСвойстваИзСтруктуры(ДанныеДокумента, УдаляемыеСвойства);
				
 КонецПроцедуры
 
#КонецОбласти // Выгрузка_Оформление 
 
#Область Выгрузка_Утверждение 

Функция ТитулУтверждение(ДанныеДокумента)
	
	СтруктураТитула = Новый Структура;
	
	СтруктураТитула.Вставить("СтоимостьПеревозки", СтоимостьПеревозки(ДанныеДокумента));
	
	// ТС и прицеп
	СтруктураТитула.Вставить(
		"ТранспортноеСредство",
		Saby_ТНВыгрузкаСервер.ПодстановкиТранспортногоСредства(ДанныеДокумента.ТранспортныеСредства));
	
	СтруктураТитула.ТранспортноеСредство.Вставить(
		"Прицеп", Saby_ТНВыгрузкаСервер.ПодстановкиПрицепов(ДанныеДокумента.ТранспортныеСредства));
	
	СтруктураТитула.ТранспортноеСредство.Вставить(
		"СпецУсловия", Saby_ТНВыгрузкаСервер.СпецУсловия(ДанныеДокумента.СпецРазрешения));
	
	// Грузоперевозчик
	Грузоперевозчик = Новый Структура;
	
	// Уполномоченные лица
	ЗаполнитьУполномоченныхЛиц(Грузоперевозчик, ДанныеДокумента, "УполномоченноеЛицоПеревозчика");
	
	ДанныеОтветственного = Saby_ТНОбщегоНазначенияСервер.СтруктураОтветственного(
		ДанныеДокумента.ОтветственныеЛица, "Ответственный");
		
	Грузоперевозчик.Вставить("Ответственный", ОтветственноеЛицо(ДанныеОтветственного));
	
	СтруктураТитула.Вставить("Грузоперевозчик", Грузоперевозчик);
	
	// Водители
	СтруктураТитула.Вставить("Водители", ВодителиДляВыгрузки(ДанныеДокумента));
	
	Возврат СтруктураТитула;
	
КонецФункции

Функция СтоимостьПеревозки(Реквизиты)
	
	СтоимостьПеревозки = Новый Структура;
	СтоимостьПеревозки.Вставить("Валюта", Новый Структура);
	СтоимостьПеревозки.Вставить("Налог",  Новый Структура);
	
	// Валюта
	Если ЗначениеЗаполнено(Реквизиты.ВалютаКод) Тогда
		КодВалюта          = Реквизиты.ВалютаКод;
		ВалютаНаименование = Реквизиты.ВалютаНаименование;
	Иначе
		КодВалюта          = "643";
		ВалютаНаименование = "Российский рубль";
	КонецЕсли;
	
	СтоимостьПеревозки.Валюта.Вставить("Код",          КодВалюта);
	СтоимостьПеревозки.Валюта.Вставить("Наименование", ВалютаНаименование);
	
	// Ставка НДС
	СтоимостьПеревозки.Налог.Вставить("Ставка", Реквизиты.СтавкаНДС);
	
	СтоимостьПеревозки.Вставить("БезНДС",     Реквизиты.СуммаБезНДС);
	СтоимостьПеревозки.Вставить("ВключаяНДС", Реквизиты.СуммаСНДС);
	СтоимостьПеревозки.Вставить("Расчет",     Реквизиты.МеханизмРасчета);
	
    Возврат СтоимостьПеревозки;
	
КонецФункции

Функция ОтветственноеЛицо(ДанныеОтветственного)
	
	Ответственный = Новый Структура;
	Ответственный.Вставить("Имя",      "");
	Ответственный.Вставить("Отчество", "");
	Ответственный.Вставить("Фамилия",  "");
	Ответственный.Вставить("Телефон",  "");
	
	ЗаполнитьЗначенияСвойств(Ответственный, ДанныеОтветственного);
	
	Saby_ТНВыгрузкаСервер.ЗаполнитьТелефоныОтветственного(ДанныеОтветственного, Ответственный);
	
	Возврат Ответственный;
	
КонецФункции

Функция ВодителиДляВыгрузки(ДанныеДокумента)
	
	Водители = Новый Массив;
	
	Отбор = Новый Структура("Роль", Перечисления.Saby_РолиОтветственных.Водитель);
	СтрокиВодителей = ДанныеДокумента.ОтветственныеЛица.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаВодитель Из СтрокиВодителей Цикл
		
		ИндексСтроки = СтрокаВодитель.НомерСтроки - 1;
		
		Водитель = Saby_ТНОбщегоНазначенияСервер.СтруктураОтветственного(
			ДанныеДокумента.ОтветственныеЛица, 
			"Водитель", 
			ИндексСтроки);		
		
		Водители.Добавить(Водитель);		
		
	КонецЦикла;
	
	Исключения = Новый Массив;
	Исключения.Добавить("СведенияПЭП");
	Исключения.Добавить("ПутевойЛист");
		
	ДанныеВодителей = Saby_ТНВыгрузкаСервер.ПодстановкиВодителя(Водители, Новый Массив, Исключения);
	
	Возврат ДанныеВодителей;
	
КонецФункции

#КонецОбласти // Выгрузка_Утверждение

Процедура ЗаполнитьУполномоченныхЛиц(СтруктураДляДобавленияЛиц, ДанныеДокумента, РольСтрокой)
	
	Роль = Перечисления.Saby_РолиКонтрагентов[РольСтрокой];
	
	ОтборУполномоченных = Новый Структура;
	ОтборУполномоченных.Вставить("Роль", Роль);
	
	НайденныеУполномоченные = ДанныеДокумента.ДанныеЮрЛиц.НайтиСтроки(ОтборУполномоченных);
	
	Если НайденныеУполномоченные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("Ссылка",           ДанныеДокумента.Ссылка);
	ДанныеОрганизации.Вставить("ИмяМетаданных",    ДанныеДокумента.ИмяМетаданных);
	ДанныеОрганизации.Вставить("ДанныеЮрЛиц",      Новый Массив);
	ДанныеОрганизации.Вставить("КонтактныеДанные", ДанныеДокумента.КонтактныеДанные);
	
	МассивДокументов = ДанныеДокумента.ДанныеЮрЛиц.ВыгрузитьКолонку("Основание");
	ДанныеДокументов = Saby_ТНОбщегоНазначенияСервер.РеквизитыДокументовСбис(МассивДокументов);
	
	МассивУполномоченныхЛиц = Новый Массив;
	
	Для Каждого СтрокаЮрЛица Из НайденныеУполномоченные Цикл
		
		ДанныеОрганизации.ДанныеЮрЛиц.Очистить();
		ДанныеОрганизации.ДанныеЮрЛиц.Добавить(СтрокаЮрЛица);
		
		СтруктураОрганизации = Saby_ТНВыгрузкаСервер.ДанныеЮрЛица(РольСтрокой, ДанныеОрганизации, Истина);
		
		ДанныеОснования = ДанныеДокументов.Получить(СтрокаЮрЛица.Основание);
		Если ДанныеОснования <> Неопределено Тогда
			ОбработатьСлужебныеСвойстваСтруктурыДокумента(ДанныеОснования, ДанныеОснования.Дата);	
			СтруктураОрганизации.Вставить("Документ",   ДанныеОснования);
			СтруктураОрганизации.Вставить("Полномочия", СтрокаЮрЛица.Полномочия);
		КонецЕсли;
		
		МассивУполномоченныхЛиц.Добавить(СтруктураОрганизации);
		
	КонецЦикла;
	
	Если Роль = Перечисления.Saby_РолиКонтрагентов.УполномоченноеЛицоПеревозчика Тогда
		СтруктураДляДобавленияЛиц.Вставить("УполномоченноеЛицо", МассивУполномоченныхЛиц[0]);
	Иначе
		СтруктураДляДобавленияЛиц.Вставить("УполномоченныеЛица", МассивУполномоченныхЛиц);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Выгрузка

#Область Загрузка

Процедура ЗагрузкаТитулаОформление(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеОформление = ДанныеОформление(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	ДанныеТитула = ДанныеОформление[ДанныеОформление.ВГраница()];
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
				
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		ЗаполнитьСтрокиТаблицы(ОбъектДок, ДанныеТитула.ДляДокумента, "АдресаПромежуточныхПунктов");
		
		ЗаполнитьСтрокиТаблицы(ОбъектДок, ДанныеТитула.ДляДокумента, "АдресаПунктовВыгрузки");
		
		РолиДляЗаполнения = Новый Массив;
		РолиДляЗаполнения.Добавить(Перечисления.Saby_РолиКонтрагентов.Отправитель);
		РолиДляЗаполнения.Добавить(Перечисления.Saby_РолиКонтрагентов.Перевозчик);
		РолиДляЗаполнения.Добавить(Перечисления.Saby_РолиКонтрагентов.Отгрузчик);
		РолиДляЗаполнения.Добавить(Перечисления.Saby_РолиКонтрагентов.Заказчик);
		РолиДляЗаполнения.Добавить(Перечисления.Saby_РолиКонтрагентов.УполномоченноеЛицо);
		РолиДляЗаполнения.Добавить(Перечисления.Saby_РолиКонтрагентов.Оформитель);
		Для Каждого РольДляЗаполнения Из РолиДляЗаполнения Цикл
			Если НеобходимоЗаполнитьДанныеЮрЛиц(ДопПараметры, РольДляЗаполнения) Тогда
				Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
					ОбъектДок, ДанныеТитула.ДляДокумента, РольДляЗаполнения, ДопПараметры);
			КонецЕсли;
		КонецЦикла;
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеПоГрузам(ОбъектДок, ДанныеТитула.ДляДокумента, ДопПараметры);
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента, "НомерСбис");
		
	КонецЕсли;
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеОформление, ОбъектДок, ДопПараметры.ИмяМетаданных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузкаТитулаУтверждение(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеУтверждение = ДанныеУтверждение(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	ДанныеТитула = ДанныеУтверждение[ДанныеУтверждение.ВГраница()];
	ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок, ДанныеТитула.ДляДокумента, Перечисления.Saby_РолиКонтрагентов.УполномоченноеЛицоПеревозчика, ДопПараметры);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьОтветственныхЛиц(
			ОбъектДок,
			ДанныеТитула.ДляДокумента.ОтветственныеЗаПеревозку,
			Перечисления.Saby_РолиОтветственных.Ответственный);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьОтветственныхЛиц(
			ОбъектДок,
			ДанныеТитула.ДляДокумента.ОтветственныеЛица,
			Перечисления.Saby_РолиОтветственных.Водитель);
		
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(
		ДанныеУтверждение, ОбъектДок, ДопПараметры.ИмяМетаданных);
	
КонецПроцедуры

#Область ДанныеТитуловДляЗагрузки

Функция ДанныеОформление(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		ДляДокумента.Вставить("КлючСтроки",       ДопПараметры.КлючСтроки);
		ДляДокумента.Вставить("Валюта",           Неопределено);
		ДляДокумента.Вставить("ДанныеЮрЛиц",      Новый Массив);
		ДляДокумента.Вставить("КонтактныеДанные", Новый Массив);
		ДляДокумента.Вставить("ДокументыЭПД",     Новый Массив);
						
		// Документ
		ЗагрузитьДанныеДокумента(ДляДокумента, Вложение["Документ"], ДопПараметры);
		
		// Документы ЭПД
		ЗагрузитьДанныеДокументовЭПД(ДляДокумента, Вложение);
		
        // Маршрут
	    ЗагрузитьМаршрут(ДляДокумента, Вложение["Маршрут"]);
		
	    // Условия перевозки
	    ЗагрузитьУсловияПеревозки(ДляДокумента, Вложение["УсловияПеревозки"]);
		
		// Параметры ТС
		ЗагрузитьПараметрыТС(ДляДокумента, Вложение["ПараметрыТС"]);
		
		// Груз
		Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеПоГрузам(ДляДокумента, Вложение["Груз"], ДопПараметры.ЗагрузкаСОнлайна, Ложь);
		
		// ЮрЛица
		ЗаполнитьДанныеЮрЛиц(ДляДокумента, Вложение);
				
		ДляРегистра = СтруктураДанныхДляРегистра(ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных);
		
		РезультатФункции.Добавить(Saby_ТНЗагрузкаСервер.СтруктураТитула(Титул, ДляДокумента, ДляРегистра));
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеУтверждение(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок, Титул, Вложения, ДопПараметры);
		
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		ДляДокумента.Вставить("КлючСтроки",       ДопПараметры.КлючСтроки);
		ДляДокумента.Вставить("ДанныеЮрЛиц",      Новый Массив);
		ДляДокумента.Вставить("КонтактныеДанные", Новый Массив);
		ДляДокумента.Вставить("ДокументыЭПД",     Новый Массив);
		
		ЗагрузитьДанныеПоСтоимости(ДляДокумента, Вложение["СтоимостьПеревозки"]);
		
		СтруктураОтветственного = Новый Структура;
		Saby_ТНЗагрузкаСервер.ЗагрузитьОтветственного(
			СтруктураОтветственного,
			Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Грузоперевозчик.Ответственный"));
		СтруктураОтветственного.Вставить("Роль", Перечисления.Saby_РолиОтветственных.Ответственный);
		
		ДляДокумента.Вставить("ОтветственныеЗаПеревозку", Новый Массив);
		ДляДокумента.ОтветственныеЗаПеревозку.Добавить(СтруктураОтветственного);
					
		УполномоченноеЛицо = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "Грузоперевозчик.УполномоченноеЛицо");
		Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеЮрЛиц(ДляДокумента, УполномоченноеЛицо, "УполномоченноеЛицоПеревозчика");
		
		Saby_ТНЗагрузкаСервер.ДанныеТСПрицеповСпецРазрешений(ДляДокумента, Вложение["ТранспортноеСредство"]);
		
		Saby_ТНЗагрузкаСервер.ДанныеВодителей(ДляДокумента, Вложение["Водители"], ДопПараметры);
		
		ЗагрузитьКомментарийОтрицательногоЗавершения(ДляДокумента, Вложение);
		
		ДляРегистра = СтруктураДанныхДляРегистра(ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных);
		
		РезультатФункции.Добавить(Saby_ТНЗагрузкаСервер.СтруктураТитула(Титул, ДляДокумента, ДляРегистра));
		
	КонецЦикла;
			
	Возврат РезультатФункции;
	
КонецФункции

Функция СтруктураДанныхДляРегистра(ОбъектДок, Вложение, Титул, ИмяМетаданных, СохранитьДанные = Ложь)
	
	Основной = Не Saby_ТНОбщегоНазначенияСервер.РезультатФункцииТитулов("Saby_ЗаказНаПеревозку", "ЭтоДинамическийТитул", Титул);
	
	СтруктураДанныхДляРегистра = Saby_ТНЗагрузкаСервер.ШаблонСтруктурыДанныхДляРегистра(ОбъектДок.Ссылка, Титул, Основной);
	СтруктураДанныхДляРегистра.Просмотрено     = Истина;
	СтруктураДанныхДляРегистра.СохранитьДанные = СохранитьДанные;
	
	Вложение.Вставить("ЗагруженВРегистр", Вложение["ЗагруженВРегистр"] Или Вложение["ИдентификаторВложенияТитула"] = "");
	
	Возврат Saby_ТНЗагрузкаСервер.ДанныеДляРегистраТитулов(Вложение, ИмяМетаданных, СтруктураДанныхДляРегистра);
		
КонецФункции

#КонецОбласти // ДанныеТитуловДляЗагрузки

Процедура ЗагрузитьДанныеДокумента(ДляДокумента, ДокументСОнлайна, ДопПараметры)
	
	Если Не ЗначениеЗаполнено(ДокументСОнлайна) Тогда
		Возврат;
	КонецЕсли;
		
	ДляДокумента.Вставить("НомерСБИС", ДокументСОнлайна["Номер"]);
	
	ТипДокумента = ДокументСОнлайна["Тип"];
	Если ДопПараметры.ЗагрузкаСОнлайна Или ЗначениеЗаполнено(ТипДокумента) Тогда
		ЗначениеТипа = Перечисления.Saby_ТипДокументаЗнП.ЗначениеПоКоду(ТипДокумента);
		ДляДокумента.Вставить("ТипДокумента", ЗначениеТипа);
	КонецЕсли;	
	
	Если Не ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДляДокумента = Saby_ТНОбщегоНазначенияСервер.СтруктураБезПустыхЗначений(ДляДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьМаршрут(ДляДокумента, Маршрут)
	
	Если Не ЗначениеЗаполнено(Маршрут) Тогда
		Возврат;
	КонецЕсли;
	
	// Конечный пункт
	ДляДокумента.Вставить(
		"КонечнаяТочкаАдрес",
		Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Маршрут, "КонечныйПункт.Название"));
	
	// Отправление
	Отправление = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Маршрут, "Отправление");
	
	ДляДокумента.Вставить(
		"ПодачаАдрес",
		Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Отправление, "АдресТекст"));
	
	// Подача ТС
	ПодачаДата = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Отправление, "ПодачаТС.ДатаВремя");
	ПодачаДата = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ПодачаДата);
	
	ДляДокумента.Вставить("ПодачаДатаВремя", ПодачаДата);
	
	Интервал = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Отправление, "ПодачаТС.ПредельныйИнтервалВремени");
	Интервал = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВоВремя(Интервал);
	
	ДляДокумента.Вставить("ПодачаПредельныйИнтервал", Интервал);
	
	ЗагрузитьПромежуточныеПункты(ДляДокумента, Маршрут);
	
	ЗагрузитьПунктыВыгрузки(ДляДокумента, Маршрут);
	
КонецПроцедуры

Процедура ЗагрузитьПромежуточныеПункты(ДляДокумента, Маршрут)
	
	ПромежуточныеПункты = Маршрут["ПромежуточныйПункт"];
	
	Если Не ЗначениеЗаполнено(ПромежуточныеПункты) Тогда
		Возврат;
	КонецЕсли;
	
	АдресаПромежуточныхПунктов = Новый Массив;
	Для Каждого Пункт Из ПромежуточныеПункты Цикл
		
		НазваниеПункта = Пункт["Название"];
		
		Если Не ЗначениеЗаполнено(НазваниеПункта) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПункта = Новый Структура;
		СтруктураПункта.Вставить("Значение", НазваниеПункта);
		
		АдресаПромежуточныхПунктов.Добавить(СтруктураПункта);
		
	КонецЦикла;
	
	ДляДокумента.Вставить("АдресаПромежуточныхПунктов", АдресаПромежуточныхПунктов);
	
КонецПроцедуры

Процедура ЗагрузитьПунктыВыгрузки(ДляДокумента, Маршрут)
	
	Пункты = Маршрут["Пункт"];
	Если Не ЗначениеЗаполнено(Пункты) Тогда
		Возврат;
	КонецЕсли;
	
	АдресаПунктовВыгрузки = Новый Массив;	
	Для Каждого Пункт Из Пункты Цикл
		
		АдресТекст = Пункт["АдресТекст"];
		
		Если Не ЗначениеЗаполнено(АдресТекст) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПункта = Новый Структура;
		СтруктураПункта.Вставить("Значение", АдресТекст);
		
		// Операция
		ДатаВремяСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Пункт, "Операция.ДатаВремя");		
		СтруктураПункта.Вставить(
			"ДатаВремя",
			Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаВремяСтрокой));
		
		ИнтервалСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Пункт, "Операция.ПредельныйИнтервалВремени");		
		СтруктураПункта.Вставить(
			"ДопустимоеВремя", 
			Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВоВремя(ИнтервалСтрокой));
		 			
		Тип = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Пункт, "Операция.Тип");
		СтруктураПункта.Вставить("ЭтоПогрузка", Тип = "Погрузка");
		
		Если СтруктураПункта.ЭтоПогрузка Тогда
			СтруктураПункта.Вставить(
				"ОрганизацияСтрока", 
				Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Пункт, "Организация.Название"));
			
			СтруктураПункта.Вставить(
				"ОрганизацияИНН",
				Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Пункт, "Организация.ИНН"));
				
			ДобавитьДанныеЮрЛицПункта(ДляДокумента, СтруктураПункта);
		КонецЕсли;
			
		АдресаПунктовВыгрузки.Добавить(СтруктураПункта);
		
	КонецЦикла;
	
	ДляДокумента.Вставить("АдресаПунктовВыгрузки", АдресаПунктовВыгрузки);
	
КонецПроцедуры

Процедура ДобавитьДанныеЮрЛицПункта(ДляДокумента, СтруктураПункта)
	
	Если Не ЗначениеЗаполнено(СтруктураПункта.ОрганизацияИНН) Тогда
		Возврат;
	КонецЕсли;
	
	КлючСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НовыйКлючОсновнойСтроки(ДляДокумента, "ДанныеЮрЛиц");
	
	СтруктураУполномоченногоЛица = Saby_ТНОбщегоНазначенияКлиентСервер.ШаблонДанныхЮрЛица();
	СтруктураУполномоченногоЛица.Роль                    = Перечисления.Saby_РолиКонтрагентов.Отгрузчик;
	СтруктураУполномоченногоЛица.ИНН                     = СтруктураПункта.ОрганизацияИНН;
	СтруктураУполномоченногоЛица.НаименованиеОрганизации = СтруктураПункта.ОрганизацияСтрока;
	СтруктураУполномоченногоЛица.КлючСтроки              = КлючСтроки;
	
	ДляДокумента.ДанныеЮрЛиц.Добавить(СтруктураУполномоченногоЛица);
	
	СтруктураПункта.Вставить("КлючСтроки_ДанныеЮрЛиц", КлючСтроки);
	
КонецПроцедуры

Процедура ЗагрузитьУсловияПеревозки(ДляДокумента, УсловияПеревозки)
	
	Если Не ЗначениеЗаполнено(УсловияПеревозки) Тогда
		Возврат;
	КонецЕсли;
	
	// УсловияПеревозки
	СпецУсловия    = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(УсловияПеревозки, "УказанияНорм");
	ПредельныйСрок = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(УсловияПеревозки, "ПредельныйСрок");
	ИныеУсловия    = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(УсловияПеревозки, "Иные");
	ТребованияКТС  = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(УсловияПеревозки, 
						"ТребованияПоПеревозкеПищевыхПродуктов");
	
	ДляДокумента.Вставить("СпецУсловия",    СпецУсловия);		
	ДляДокумента.Вставить("ПредельныйСрок", ПредельныйСрок);		
	ДляДокумента.Вставить("ИныеУсловия",    ИныеУсловия);		
	ДляДокумента.Вставить("ТребованияКТС",  ТребованияКТС);
		
	// Климатический режим
	КлиматическийРежим = УсловияПеревозки["КлиматическийРежим"];
	
	ВлажностьОт   = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(КлиматическийРежим, "Влажность.Минимальная");
	ВлажностьДо   = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(КлиматическийРежим, "Влажность.Максимальная");
	ТемператураОт = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(КлиматическийРежим, "Температура.Минимальная");
	ТемператураДо = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(КлиматическийРежим, "Температура.Максимальная");	
				
	ДляДокумента.Вставить("ВлажностьОт",   ВлажностьОт);		
	ДляДокумента.Вставить("ВлажностьДо",   ВлажностьДо);		
	ДляДокумента.Вставить("ТемператураОт", ТемператураОт);		
	ДляДокумента.Вставить("ТемператураДо", ТемператураДо);
	
КонецПроцедуры

Процедура ЗагрузитьПараметрыТС(ДляДокумента, ПараметрыТС)
	
	Если Не ЗначениеЗаполнено(ПараметрыТС) Тогда
		Возврат;
	КонецЕсли;                            
	
	ТипТС      = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
					ПараметрыТС, "Тип");
				
	КузовТС    = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
					ПараметрыТС, "ТипКузова");
				
	ПогрузкаТС = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
					ПараметрыТС, "ТипПогрузки");
					
	ДляДокумента.Вставить("ТипТС",      ТипТС);	
	ДляДокумента.Вставить("КузовТС",    КузовТС);		
	ДляДокумента.Вставить("ПогрузкаТС", ПогрузкаТС);
									
	ГрузоподъемностьТС = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
							ПараметрыТС, "Грузоподъемность");
	ВместимостьТС      = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
							ПараметрыТС, "Вместимость");
			
	ДляДокумента.Вставить("ГрузоподъемностьТС", ГрузоподъемностьТС);		
	ДляДокумента.Вставить("ВместимостьТС",      ВместимостьТС);	

КонецПроцедуры

Процедура ЗагрузитьДанныеДокументовЭПД(ДляДокумента, ДанныеДокументов)
	
	Если Не ЗначениеЗаполнено(ДанныеДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	НачальныйИндекс = ДляДокумента.ДокументыЭПД.Количество();
	
	Договор = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеДокументов, "Договор");
	ЕстьДоговор = ДляДокумента.Свойство("ТипДокумента")
		И ДляДокумента.ТипДокумента = Перечисления.Saby_ТипДокументаЗнП.Заявка
		И ЗначениеЗаполнено(Договор);
		
	Если ЕстьДоговор Тогда
		Saby_ТНЗагрузкаСервер.ЗагрузитьДокументыЭПД(ДляДокумента, Договор, Перечисления.Saby_ТипыДокумента.ДоговорПеревозки);
	КонецЕсли;
	
	СоставительОснование = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеДокументов, "Файл.Составитель.Основание");
	Saby_ТНЗагрузкаСервер.ЗагрузитьДокументыЭПД(
		ДляДокумента, СоставительОснование, Перечисления.Saby_ТипыДокумента.СоставительНаОсновании);
	
	Saby_ТНЗагрузкаСервер.ЗаполнитьСсылкиНаДокументЭПД(ДляДокумента);
	
	Для ИндексДокументаЭПД = НачальныйИндекс По ДляДокумента.ДокументыЭПД.ВГраница() Цикл
		СтруктураДокументаЭПД = ДляДокумента.ДокументыЭПД[ИндексДокументаЭПД];
		Если СтруктураДокументаЭПД.Тип = Перечисления.Saby_ТипыДокумента.ДоговорПеревозки Тогда
			ДляДокумента.Вставить("Договор", СтруктураДокументаЭПД.Ссылка);
		Иначе
			ДляДокумента.Вставить("Составитель_НаОснованииДокумент", СтруктураДокументаЭПД.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиТаблицы(ОбъектДок, ДляДокумента, НазваниеТаблицы)
	
	Если Не ДляДокумента.Свойство(НазваниеТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДок[НазваниеТаблицы].Очистить();
	
	Для Каждого СтрокаТаблицы Из ДляДокумента[НазваниеТаблицы] Цикл
		НоваяСтрока = ОбъектДок[НазваниеТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЮрЛиц(ДляДокумента, Вложение)
	
	Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеЮрЛиц(ДляДокумента, Вложение["Грузоотправитель"], "Отправитель");
	Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеЮрЛиц(ДляДокумента, Вложение["Грузоперевозчик"], "Перевозчик");
	
	УполномоченныеЛица = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
		Вложение, "Грузоотправитель.УполномоченныеЛица");
	Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеЮрЛиц(ДляДокумента, УполномоченныеЛица, "УполномоченноеЛицо");
	
	ГрузоотправительСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		ДляДокумента.ДанныеЮрЛиц, "Отправитель");
	
	// Составитель
	Основание = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Файл.Составитель.Основание.Документ");
	Если ЗначениеЗаполнено(Основание) Тогда 
	
		Составитель = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Файл.Составитель.Наименование");
		ДляДокумента.Вставить("ПредставительЗаказчикаНаименование", Составитель);
		
		СтруктураДанныхЮрЛица = Saby_ТНОбщегоНазначенияКлиентСервер.ШаблонДанныхЮрЛица();
		СтруктураДанныхЮрЛица.Роль                    = Перечисления.Saby_РолиКонтрагентов.Оформитель;
		СтруктураДанныхЮрЛица.НаименованиеОрганизации = Составитель;
		СтруктураДанныхЮрЛица.КлючСтроки              = Saby_ТНОбщегоНазначенияКлиентСервер.НовыйКлючОсновнойСтроки(
															ДляДокумента, "ДанныеЮрЛиц");
		
		ДляДокумента.ДанныеЮрЛиц.Добавить(СтруктураДанныхЮрЛица);
		
		Тип = Перечисления.Saby_ТипыДокумента.СоставительНаОсновании;	
		ОснованиеСсылка = Saby_ТНЗагрузкаСервер.СсылкаНаДокументЭПД(ДляДокумента, Основание, Тип);
		
		ДляДокумента.Вставить("ПредставительЗаказчика_Основание", ОснованиеСсылка);
		СтруктураДанныхЮрЛица.Основание = ОснованиеСсылка; 
		
	КонецЕсли;
	
	ЭтоПредставитель = (ЗначениеЗаполнено(Составитель) И ГрузоотправительСтрокой <> Составитель);
	ДляДокумента.Вставить("ПредставительЗаказчика", ЭтоПредставитель);
	
КонецПроцедуры

Процедура ДополнитьКонтактнуюИнформацию(КонтактныеДанные, МассивКИ, КлючСтроки_ДанныеЮрЛиц = 0)
	
	Если Не ЗначениеЗаполнено(МассивКИ) Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого ЭлементКИ Из МассивКИ Цикл
		ЭлементКИ.Вставить("КлючСтроки_ДанныеЮрЛиц", КлючСтроки_ДанныеЮрЛиц);
		КонтактныеДанные.Добавить(ЭлементКИ);	
	КонецЦикла;
		
КонецПроцедуры

Функция НеобходимоЗаполнитьДанныеЮрЛиц(ДопПараметры, Роль)
	
	Если Не ДопПараметры.ПараметрыОснования.Свойство("РольКонтрагента")
		Или Не ЗначениеЗаполнено(ДопПараметры.ПараметрыОснования.РольКонтрагента) Тогда
		Возврат Истина;
	Иначе
		Возврат ДопПараметры.ПараметрыОснования.РольКонтрагента = СокрЛП(Роль);
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьДанныеПоСтоимости(ДляДокумента, СтоимостьПеревозки)
	
	Если СтоимостьПеревозки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДляДокумента.Вставить(
		"ВалютаКод",          Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(СтоимостьПеревозки, "Валюта.Код"));
	ДляДокумента.Вставить(
		"ВалютаНаименование", Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(СтоимостьПеревозки, "Валюта.Наименование"));
	
	СтавкаНДС = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(СтоимостьПеревозки, "Налог.Ставка");
	Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда 	
		СтавкаНДС = "без НДС";
	КонецЕсли;
	ДляДокумента.Вставить("СтавкаНДС",       СтавкаНДС);
	ДляДокумента.Вставить("СуммаБезНДС",     СтоимостьПеревозки["БезНДС"]);
	ДляДокумента.Вставить("СуммаСНДС",       СтоимостьПеревозки["ВключаяНДС"]);
	ДляДокумента.Вставить("Сумма",           СтоимостьПеревозки["ВключаяНДС"]);
	ДляДокумента.Вставить("МеханизмРасчета", СтоимостьПеревозки["Расчет"]);
	
КонецПроцедуры

Процедура ЗагрузитьКомментарийОтрицательногоЗавершения(ДляДокумента, Вложение)
	
	ОтветПеревозчика = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Документ.Ответ.Значение");
	ОтказаноВПриемке = ОтветПеревозчика = "2";
	
	Если ОтказаноВПриемке Тогда
		ДляДокумента.Вставить(
			"КомментарийУведомление",
			Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Документ.Ответ.Причина"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Загрузка

#КонецОбласти // СлужебныеПроцедурыИФункции
