                                 
#Область ПрограммныйИнтерфейс

// Возвращает массив типов доступных для заполнения на основании.
//
// Параметры:
//  ЗначенияПоУмолчанию - Булево - признак получения типов по умолчанию
//
// Возвращаемое значение:
//   Массив - массив типов выбранных для заполнения на основании.
//
Функция ТипыДляЗаполненияНаОсновании(ЗначенияПоУмолчанию = Ложь) Экспорт
	
	Если Не ЗначенияПоУмолчанию Тогда
		РезультатФункции = ПользовательскиеТипыДляЗаполненияНаОсновании();
	Иначе
		РезультатФункции = Неопределено;
	КонецЕсли;
	
	Если РезультатФункции = Неопределено Тогда
		РезультатФункции = ТипыПоУмолчаниюДляЗаполненияНаОсновании();
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Сохраняет выбранные типы документов для заполнения на основании выбранные пользователем.
//
// Параметры:
//  МассивТипов - Массив - массив типов
//
Процедура СохранитьВыбранныеТипыДляЗаполненияНаОсновании(МассивТипов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеОбщихНастроек.Сохранить("Saby", "ТипыДляЗаполненияНаОснованииДокументаЗнП", МассивТипов);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает структуру реквизитов документа, относящиеся титулу
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.Saby_ЗаказНаПеревозку - ссылка на документ
//  ТипТитула - ПеречислениеСсылка.Saby_ТипТитулаЗнП - ссылка на тип титула
//
// Возвращаемое значение:
//   Структура - структура полученных данных документа
//
Функция ДанныеДокумента(СсылкаНаДокумент, ТипТитула) Экспорт
	
	Если Перечисления.Saby_ТипТитулаЗнП.ЭтоПервыйТитул(ТипТитула) Тогда
		
		Возврат ВыгрузкаДанныеОформление(СсылкаНаДокумент);
		
	ИначеЕсли ТипТитула = Перечисления.Saby_ТипТитулаЗнП.Подтверждение Тогда
		
		Возврат ВыгрузкаДанныеПодтверждение(СсылкаНаДокумент);
		
	Иначе
		
		Возврат Новый Структура;
		
	КонецЕсли;
	
КонецФункции

// Добавляет данные титулов для выгрузки на онлайн
//
// Параметры:
//  ТекущийЭтап - ПеречислениеСсылка.Saby_ТипДокументаЗнП - тип текущего титула
//  ДанныеТитула - Структура - структура реквизитов и таблиц документа для выгрузки
//
// Возвращаемое значение:
//   Структура - структура титула для отправки
//
Функция ВложениеНаВыгрузку(ТекущийЭтап, ДанныеТитула) Экспорт
	
	Если Перечисления.Saby_ТипТитулаЗнП.ЭтоПервыйТитул(ТекущийЭтап) Тогда
		
		Возврат ТитулОформление(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = Перечисления.Saby_ТипТитулаЗнП.Подтверждение Тогда
		
		СтруктураТитула = ТитулПодтверждение(ДанныеТитула);
		
		СтруктураТитула.Вставить("СторонняяОрганизация", Истина);
		
		Возврат СтруктураТитула;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции
 
#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

#Область Команды

// Заполняет список команд печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти // Команды

Функция МенеджерТитулов() Экспорт
	
	Возврат Перечисления.Saby_ТипТитулаЗнП;
	
КонецФункции

#Область ИнтерфейсФЛК

// Возвращает параметры для выполнения ФЛК
//
// Параметры:
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//
// Возвращаемое значение:
//   Структура - структура данных для дальнейшей проверки реквизитов
//
Функция ПараметрыПроверкиРеквизитов(ДанныеДокумента, ПараметрыВыгрузки) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ПроверяемыеРеквизиты", Новый Массив);
	
	ОшибкиПоРеквизитам = Saby_ТНОбщегоНазначенияСервер.СоответствиеРеквизитовОшибок(ПараметрыВыгрузки);
	РезультатФункции.Вставить("ОшибкиПоРеквизитам", ОшибкиПоРеквизитам);
	
	Если Перечисления.Saby_ТипТитулаЗнП.ЭтоПервыйТитул(ПараметрыВыгрузки.ТипТитула) Тогда
		
		ДополнитьПроверяемыеРеквизитыЭтапаОформление(ДанныеДокумента, РезультатФункции.ПроверяемыеРеквизиты);
		
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = Перечисления.Saby_ТипТитулаЗнП.Подтверждение Тогда
		
		ДополнитьПроверяемыеРеквизитыЭтапаПодтверждение(РезультатФункции.ПроверяемыеРеквизиты);
		
	Иначе
		РезультатФункции.ПроверяемыеРеквизиты = Новый Массив;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает имя таблицы документа с учетом специфики
//
// Параметры:
//  ИмяТабличнойЧасти - Строка - наименование табличной части из конфигуратора
//  СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - строка табличной части документа
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//
// Возвращаемое значение:
//   Строка - наименование таблицы на форме документа
//
Функция ИмяТЧДокумента(ИмяТабличнойЧасти, СтрокаТабличнойЧасти, ДанныеДокумента) Экспорт
	
	Возврат ИмяТабличнойЧасти;
	
КонецФункции

Функция ПроверятьРеквизитДокумента(ИмяРеквизита, ДанныеДокумента) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак необходимости ФЛК реквизитов табличной части документа
//
// Параметры:
//  СтрокаТЧ - СтрокаТаблицыЗначений - строка табличной части документа
//  ИмяТЧ - Строка - имя табличной части документа
//  ИмяРеквизита - Строка - имя реквизита табличной части документа
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//
// Возвращаемое значение:
//   Булево - Истина, если проверять необходимо
//
Функция ПроверятьРеквизитТЧДокумента(СтрокаТЧ, ИмяТЧ, ИмяРеквизита, ДанныеДокумента) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Выполняет нестандартные проверки ФЛК с логикой сложнее, чем заполнен незаполнен.
//
// Параметры:
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//  ПараметрыПроверкиРеквизитов - Структура - см. функцию ПараметрыПроверкиРеквизитов
//  Ошибки - Массив,Неопределено - массив для накопления ошибок
//
Процедура ВыполнитьДополнительныеПроверкиФЛК(ДанныеДокумента, ПараметрыВыгрузки,
		ПараметрыПроверкиРеквизитов, Ошибки) Экспорт
		
	Если Перечисления.Saby_ТипТитулаЗнП.ЭтоПервыйТитул(ПараметрыВыгрузки.ТипТитула) Тогда
		
		ДопПроверкиФЛКОформление(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки);
		
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = Перечисления.Saby_ТипТитулаЗнП.Подтверждение Тогда
		
		ДопПроверкиФЛКПодтверждение(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти // ИнтерфейсФЛК

Функция ТекущиеЭтапыДокумента(Форма) Экспорт
	
	РезультатФункции = Новый Массив;
	
	ДанныеСостояния = Saby_ТНОбщегоНазначенияСервер.ДанныеСостоянияОбъекта(Форма.Объект.Ссылка);
	Если ДанныеСостояния <> Неопределено Тогда
		ТекущийТитул = Перечисления.Saby_ТипТитулаЗнП.ЗначениеПоПредставлению(ДанныеСостояния.АктивныйЭтап);
	Иначе
		ТекущийТитул = Перечисления.Saby_ТипТитулаЗнП.ПервыйТитул();
	КонецЕсли;
	
	РезультатФункции.Добавить(ТекущийТитул);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ВложенияЗагружены(Вложения, Титул, ОбъектДок, ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Вложения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВложенияМассив = Saby_ТНОбщегоНазначенияКлиентСервер.ЗначениеВМассив(Вложения);
	
	Если Титул = Перечисления.Saby_ТипТитулаЗнП.Оформление Тогда
		
		ЗагрузкаТитулаОформление(ОбъектДок, ВложенияМассив, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЗнП.Подтверждение Тогда
		
		ЗагрузкаТитулаПодтверждение(ОбъектДок, ВложенияМассив, Титул, ДопПараметры);
				
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ТитулыДляЗагрузки(ОбъектДок, ПараметрыЗагрузки) Экспорт
	
	ТекущиеЗначения = Saby_ТНЗагрузкаСервер.ТекущиеЗначенияДокумента(ОбъектДок, ПараметрыЗагрузки);
	
	Этап = ТекущиеЗначения.Титул;
	
	Если ЗначениеЗаполнено(ТекущиеЗначения.Состояние) Тогда  
	   КодСостояния = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеЗначения.Состояние, "ИдентификаторСБИС");
	КонецЕсли;   
	
	ТипыТитулов = Saby_ТНОбщегоНазначенияСервер.ВсеЗначенияПеречисления("Saby_ТипТитулаЗнП");
	
    МассивТитуловДляЗагрузки = Новый Массив;
	
	ДОЗавершенУспешно      = 7;
	ДОЗавершенОтрицательно = 9;
	
	Если КодСостояния = ДОЗавершенУспешно
		Или КодСостояния = ДОЗавершенОтрицательно Тогда
		
		Если ПараметрыЗагрузки.ТолькоАктивныйЭтап Тогда
			МассивТитуловДляЗагрузки.Добавить(Этап);
		Иначе
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.Подтверждение);
		КонецЕсли;
		
		Возврат МассивТитуловДляЗагрузки;	
		
	КонецЕсли;	
	
	Если ПараметрыЗагрузки.ТолькоАктивныйЭтап Тогда
		
		// В регистре состояния нет данных о текущем этапе, при этом документооборот не завершен.
		Если Этап.Пустая() Тогда
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.Оформление);
		Иначе
			МассивТитуловДляЗагрузки.Добавить(Этап);
		КонецЕсли;
		
	Иначе
		
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.Оформление);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.Подтверждение);
		
	КонецЕсли;
	
	Возврат МассивТитуловДляЗагрузки;

КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ПользовательскиеТипыДляЗаполненияНаОсновании()
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатФункции = ХранилищеОбщихНастроек.Загрузить("Saby", "ТипыДляЗаполненияНаОснованииДокументаЗнП");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ТипыПоУмолчаниюДляЗаполненияНаОсновании()
	
	РезультатФункции = Новый Массив;
	
	СинонимКонфигурации = Метаданные.Синоним;
	
	ДоступныеКонфигурации    = Saby_ТНОбщегоНазначенияСервер.ДоступныеКонфигурации();
	ЭтоДоступнаяКонфигурация = Saby_ТНОбщегоНазначенияСервер.ЭтоДоступнаяКонфигурация(
		СинонимКонфигурации, ДоступныеКонфигурации);
		
	Если Не ЭтоДоступнаяКонфигурация Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Возврат РезультатФункции;
		
КонецФункции

#Область ФЛК

Процедура ДополнитьПроверяемыеРеквизитыЭтапаОформление(ДанныеДокумента, ПроверяемыеРеквизиты)
	
	Возврат;
	
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаПодтверждение(ПроверяемыеРеквизиты)
		
	Возврат;
	
КонецПроцедуры

Процедура ДопПроверкиФЛКОформление(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки)
	
	Возврат;
		
КонецПроцедуры

Процедура ДопПроверкиФЛКПодтверждение(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки)
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти // ФЛК

#Область ДанныеДокумента

Функция ВыгрузкаДанныеОформление(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Номер");
	Реквизиты.Добавить("Дата");
	Реквизиты.Добавить("ВместимостьТС");
	Реквизиты.Добавить("ГрузоподъемностьТС");
	Реквизиты.Добавить("ТипТС");
	Реквизиты.Добавить("КузовТС");
	Реквизиты.Добавить("ПогрузкаТС");
	Реквизиты.Добавить("Договор");
	Реквизиты.Добавить("ВлажностьОт");
	Реквизиты.Добавить("ВлажностьДо");
	Реквизиты.Добавить("ТемператураОт");
	Реквизиты.Добавить("ТемператураДо");
	Реквизиты.Добавить("ИныеУсловия");
	Реквизиты.Добавить("ПредельныйСрок");
	Реквизиты.Добавить("ПредставительЗаказчика");
	Реквизиты.Добавить("ПредставительЗаказчика_Основание");
	Реквизиты.Добавить("ТребованияКТС");
	Реквизиты.Добавить("СпецУсловия");
	Реквизиты.Добавить("ПодачаАдрес");
	Реквизиты.Добавить("КонечнаяТочкаАдрес");
	Реквизиты.Добавить("ПодачаДатаВремя");
	Реквизиты.Добавить("Отправитель_Экспедитор");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("Грузы");
	Таблицы.Добавить("ДанныеЮрЛиц");
	Таблицы.Добавить("АдресаПунктовВыгрузки");
	Таблицы.Добавить("АдресаПромежуточныхПунктов");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеПодтверждение(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Номер");
	Реквизиты.Добавить("Дата");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("Водители");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы)
	
	РезультатФункции = Новый Структура;
	
	// Ссылка всегда должна быть
	Реквизиты.Добавить("Ссылка");
	
	ТекстЗапросаРеквизитов = ТекстЗапросаРеквизитов();
	ШаблонЗапросаТаблиц    = ШаблонЗапросаТаблиц();
	
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитыИзБД(
		РезультатФункции, СсылкаНаДокумент, Реквизиты, ТекстЗапросаРеквизитов);
	
	НестандартныеЗапросыТаблиц = НестандартныеЗапросыТаблиц(Таблицы);
	
	Saby_ТНОбщегоНазначенияСервер.ДобавитьТаблицыИзБД(
		РезультатФункции, СсылкаНаДокумент, Таблицы, ШаблонЗапросаТаблиц, НестандартныеЗапросыТаблиц);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ТекстЗапросаРеквизитов()
	
	Возврат
	"ВЫБРАТЬ
    |	Saby_ЗаказНаПеревозку.Ссылка КАК Ссылка,
    |	Saby_ЗаказНаПеревозку.ВерсияДанных КАК ВерсияДанных,
    |	Saby_ЗаказНаПеревозку.ПометкаУдаления КАК ПометкаУдаления,
    |	Saby_ЗаказНаПеревозку.Номер КАК Номер,
    |	Saby_ЗаказНаПеревозку.Дата КАК Дата,
    |	Saby_ЗаказНаПеревозку.Проведен КАК Проведен,
    |	Saby_ЗаказНаПеревозку.ВалютаКод КАК ВалютаКод,
    |	Saby_ЗаказНаПеревозку.ВалютаНаименование КАК ВалютаНаименование,
    |	Saby_ЗаказНаПеревозку.ВлажностьДо КАК ВлажностьДо,
    |	Saby_ЗаказНаПеревозку.ВлажностьОт КАК ВлажностьОт,
    |	Saby_ЗаказНаПеревозку.ВместимостьТС КАК ВместимостьТС,
    |	Saby_ЗаказНаПеревозку.ГрузоподъемностьТС КАК ГрузоподъемностьТС,
    |	Saby_ЗаказНаПеревозку.ДатаИзменения КАК ДатаИзменения,
    |	Saby_ЗаказНаПеревозку.Договор КАК Договор,
    |	Saby_ЗаказНаПеревозку.ДокументОснование_Идентификатор КАК ДокументОснование_Идентификатор,
    |	Saby_ЗаказНаПеревозку.ДокументОснование_ОбъектМетаданных КАК ДокументОснование_ОбъектМетаданных,
    |	Saby_ЗаказНаПеревозку.Заказчик КАК Заказчик,
    |	Saby_ЗаказНаПеревозку.ИныеУсловия КАК ИныеУсловия,
    |	Saby_ЗаказНаПеревозку.Комментарий КАК Комментарий,
    |	Saby_ЗаказНаПеревозку.КонечнаяТочкаАдрес КАК КонечнаяТочкаАдрес,
    |	Saby_ЗаказНаПеревозку.КонечнаяТочкаАдресСтруктура КАК КонечнаяТочкаАдресСтруктура,
    |	Saby_ЗаказНаПеревозку.КузовТС КАК КузовТС,
    |	Saby_ЗаказНаПеревозку.МеханизмРасчета КАК МеханизмРасчета,
    |	Saby_ЗаказНаПеревозку.Направление КАК Направление,
    |	Saby_ЗаказНаПеревозку.НомерСбис КАК НомерСбис,
    |	Saby_ЗаказНаПеревозку.Перевозчик КАК Перевозчик,
    |	Saby_ЗаказНаПеревозку.ПогрузкаТС КАК ПогрузкаТС,
    |	Saby_ЗаказНаПеревозку.ПодачаАдрес КАК ПодачаАдрес,
    |	Saby_ЗаказНаПеревозку.ПодачаАдресСтруктура КАК ПодачаАдресСтруктура,
    |	Saby_ЗаказНаПеревозку.ПодачаДатаВремя КАК ПодачаДатаВремя,
    |	Saby_ЗаказНаПеревозку.ПредельныйСрок КАК ПредельныйСрок,
    |	Saby_ЗаказНаПеревозку.ПредставительЗаказчика КАК ПредставительЗаказчика,
    |	Saby_ЗаказНаПеревозку.ПредставительЗаказчика_Основание КАК ПредставительЗаказчика_Основание,
    |	Saby_ЗаказНаПеревозку.СпецУсловия КАК СпецУсловия,
    |	Saby_ЗаказНаПеревозку.СтавкаНДС КАК СтавкаНДС,
    |	Saby_ЗаказНаПеревозку.Сумма КАК Сумма,
    |	Saby_ЗаказНаПеревозку.СуммаБезНДС КАК СуммаБезНДС,
    |	Saby_ЗаказНаПеревозку.СуммаСНДС КАК СуммаСНДС,
    |	Saby_ЗаказНаПеревозку.ТемператураДо КАК ТемператураДо,
    |	Saby_ЗаказНаПеревозку.ТемператураОт КАК ТемператураОт,
    |	Saby_ЗаказНаПеревозку.ТипДокумента КАК ТипДокумента,
    |	Saby_ЗаказНаПеревозку.ТипТС КАК ТипТС,
    |	Saby_ЗаказНаПеревозку.ТранспортноеСредствоСтрокой КАК ТранспортноеСредствоСтрокой,
    |	Saby_ЗаказНаПеревозку.ТребованияКТС КАК ТребованияКТС,
    |	Saby_ЗаказНаПеревозку.Представление КАК Представление,
    |	Saby_ЗаказНаПеревозку.МоментВремени КАК МоментВремени,
	|	ЛОЖЬ КАК Отправитель_Экспедитор
    |ИЗ
    |	Документ.Saby_ЗаказНаПеревозку КАК Saby_ЗаказНаПеревозку
    |ГДЕ
    |	Saby_ЗаказНаПеревозку.Ссылка = &Ссылка";
	
КонецФункции

Функция ШаблонЗапросаТаблиц()
	
	Возврат
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Документ.Saby_ЗаказНаПеревозку.%1 КАК ТЧЗаказаНаПеревозку
	|ГДЕ
	|	ТЧЗаказаНаПеревозку.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
КонецФункции

Функция НестандартныеЗапросыТаблиц(Таблицы)
	
	РезультатФункции = Новый Соответствие;
	
	Для Каждого ИмяТаблицы Из Таблицы Цикл
		
		ТекстЗапроса = Неопределено;
		
		Если ИмяТаблицы = "Грузы" Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Saby_ЗаказНаПеревозкуГрузы.МассаБрутто КАК МассаБрутто,
			|	Saby_ЗаказНаПеревозкуГрузы.МассаНетто КАК МассаНетто,
			|	Saby_ЗаказНаПеревозкуГрузы.Высота КАК Высота,
			|	Saby_ЗаказНаПеревозкуГрузы.Длина КАК Длина,
			|	Saby_ЗаказНаПеревозкуГрузы.Количество КАК КоличествоМест,
			|	Saby_ЗаказНаПеревозкуГрузы.КоличествоПаллет КАК КоличествоПаллет,
			|	Saby_ЗаказНаПеревозкуГрузы.Объем КАК Объем,
			|	Saby_ЗаказНаПеревозкуГрузы.Ширина КАК Ширина,
			|	Saby_ЗаказНаПеревозкуГрузы.Количество КАК КоличествоГрузовыхМест,
			|	Saby_ЗаказНаПеревозкуГрузы.Наименование КАК Наименование,
			|	Saby_ЗаказНаПеревозкуГрузы.Состояние КАК Состояние,
			|	Saby_ЗаказНаПеревозкуГрузы.ВидТары.Код КАК ТараКод,
			|	Saby_ЗаказНаПеревозкуГрузы.Договор КАК Договор,
			|	Saby_ЗаказНаПеревозкуГрузы.КлючСтроки_ДанныеЮрЛиц КАК КлючСтроки_ДанныеЮрЛиц,
			|	Saby_ЗаказНаПеревозкуГрузы.КлючСтроки КАК КлючСтроки,
			|	Saby_ЗаказНаПеревозкуГрузы.МетодОпределенияМассы КАК МетодОпределенияМассы,
			|	Saby_ЗаказНаПеревозкуГрузы.РаспределениеПоДлинеПлатформы КАК РаспределениеПоДлинеПлатформы,
			|	Saby_ЗаказНаПеревозкуГрузы.Делимость КАК Делимость,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз КАК ОпасныйГруз,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.Наименование КАК НаименованиеОтгрузочное,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.НомерООН КАК НомерООН,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ТехническоеНаименование КАК НаименованиеТехническое,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.Комментарий КАК Комментарий,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.Класс КАК Класс,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.КлассификационныйКод КАК КлассификационныйКод,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ГруппаУпаковкиЗначение КАК ГруппаУпаковки,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ЗнакОпасности КАК ЗнакОпасности,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ОграничениеПроездаЧерезТуннели КАК КодОграниченияПроездТуннеля,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.НазваниеРадионуклида КАК НазваниеРадионуклида,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ФизИХимФорма КАК ФизХимФорма,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.МаксАктивность КАК РадиоактивныйМаксАктивность,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.КатегорияУпаковки КАК КатегорияУпаковки,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ТранспортныйИндекс КАК ТранспортныйИндекс,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ИндексБезопасности КАК ИндексБезопасности,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ОпознавательныйЗнак КАК ОпознавательныйЗнак,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ПолнаяАктивность КАК РадиоактивныйПолнаяАктивность,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.МассаНеттоВзрывчатый КАК МассаНеттоВзрывчатый,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.МассаНеттоВзрывчатыйВсего КАК МассаНеттоВзрывчатыйВсего,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ПроцентСмеси КАК ПроцентСмеси,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.ДатаИстеченияУдержания КАК ДатаИстеченияУдержания,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.КонтрольнаяТемпература КАК ТемператураКонтрольная,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.АварийнаяТемпература КАК ТемператураАварийная,
			|	Saby_ЗаказНаПеревозкуГрузы.ОпасныйГруз.Представление КАК Представление
			|ИЗ
			|	Документ.Saby_ЗаказНаПеревозку.Грузы КАК Saby_ЗаказНаПеревозкуГрузы
			|ГДЕ
			|	Saby_ЗаказНаПеревозкуГрузы.Ссылка = &Ссылка";
			
		ИначеЕсли ИмяТаблицы = "ОпасныеГрузы" Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Saby_ЗнП_ОпаснГрузы.Ссылка КАК СсылкаДокумент,
			|	Saby_ЗнП_ОпаснГрузы.НомерСтроки КАК НомерСтроки,
			|	Saby_ЗнП_ОпаснГрузы.КлючСтроки_Грузы КАК КлючСтроки_Грузы,
			|	Saby_ОпасныеГрузы.Ссылка КАК ОпасныйГруз,
			|	Saby_ОпасныеГрузы.Наименование КАК НаименованиеОтгрузочное,
			|	Saby_ОпасныеГрузы.НомерООН КАК НомерООН,
			|	Saby_ОпасныеГрузы.ТехническоеНаименование КАК НаименованиеТехническое,
			|	Saby_ОпасныеГрузы.Комментарий КАК Комментарий,
			|	Saby_ОпасныеГрузы.Класс КАК Класс,
			|	Saby_ОпасныеГрузы.КлассификационныйКод КАК КлассификационныйКод,
			|	Saby_ОпасныеГрузы.ГруппаУпаковкиЗначение КАК ГруппаУпаковки,
			|	Saby_ОпасныеГрузы.ЗнакОпасности КАК ЗнакОпасности,
			|	Saby_ОпасныеГрузы.ОграничениеПроездаЧерезТуннели КАК КодОграниченияПроездТуннеля,
			|	Saby_ОпасныеГрузы.НазваниеРадионуклида КАК НазваниеРадионуклида,
			|	Saby_ОпасныеГрузы.ФизИХимФорма КАК ФизХимФорма,
			|	Saby_ОпасныеГрузы.МаксАктивность КАК РадиоактивныйМаксАктивность,
			|	Saby_ОпасныеГрузы.КатегорияУпаковки КАК КатегорияУпаковки,
			|	Saby_ОпасныеГрузы.ТранспортныйИндекс КАК ТранспортныйИндекс,
			|	Saby_ОпасныеГрузы.ИндексБезопасности КАК ИндексБезопасности,
			|	Saby_ОпасныеГрузы.ОпознавательныйЗнак КАК ОпознавательныйЗнак,
			|	Saby_ОпасныеГрузы.ПолнаяАктивность КАК РадиоактивныйПолнаяАктивность,
			|	Saby_ОпасныеГрузы.МассаНеттоВзрывчатый КАК МассаНеттоВзрывчатый,
			|	Saby_ОпасныеГрузы.МассаНеттоВзрывчатыйВсего КАК МассаНеттоВзрывчатыйВсего,
			|	Saby_ОпасныеГрузы.ПроцентСмеси КАК ПроцентСмеси,
			|	Saby_ОпасныеГрузы.ДатаИстеченияУдержания КАК ДатаИстеченияУдержания,
			|	Saby_ОпасныеГрузы.КонтрольнаяТемпература КАК ТемператураКонтрольная,
			|	Saby_ОпасныеГрузы.АварийнаяТемпература КАК ТемператураАварийная,
			|	Saby_ОпасныеГрузы.Представление КАК Представление
			|ИЗ
			|	Документ.Saby_ЗаказНаПеревозку.ОпасныеГрузы КАК Saby_ЗнП_ОпаснГрузы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Saby_ОпасныеГрузы КАК Saby_ОпасныеГрузы
			|		ПО Saby_ЗнП_ОпаснГрузы.ОпасныйГруз = Saby_ОпасныеГрузы.Ссылка
			|ГДЕ
			|	Saby_ЗнП_ОпаснГрузы.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	КлючСтроки_Грузы";
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ТекстЗапроса <> Неопределено Тогда
			РезультатФункции.Вставить(ИмяТаблицы, ТекстЗапроса);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ДанныеДокумента

#Область Выгрузка

Функция ТитулОформление(ДанныеДокумента)
	
	СтруктураТитула = Новый Структура;
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	Документ = Новый Структура;
	Документ.Вставить("Номер", РеквизитыОбъекта.Номер);
	СтруктураТитула.Вставить("Документ", Документ);
	
	ПараметрыТС = Новый Структура;
	ПараметрыТС.Вставить("Вместимость",      РеквизитыОбъекта.ВместимостьТС);
	ПараметрыТС.Вставить("Грузоподъемность", РеквизитыОбъекта.ГрузоподъемностьТС);
	ПараметрыТС.Вставить("Тип",              РеквизитыОбъекта.ТипТС);
	ПараметрыТС.Вставить("ТипКузова",        РеквизитыОбъекта.КузовТС);
	ПараметрыТС.Вставить("ТипПогрузки",      РеквизитыОбъекта.ПогрузкаТС);
	
	СтруктураТитула.Вставить("ПараметрыТС", ПараметрыТС);
	
	МассивДокументов = Новый Массив();
	МассивДокументов.Добавить(РеквизитыОбъекта.Договор);
	МассивДокументов.Добавить(РеквизитыОбъекта.ПредставительЗаказчика_Основание);
	ДанныеДокументов = Saby_ТНОбщегоНазначенияСервер.РеквизитыДокументовСбис(МассивДокументов);
	
	ДанныеДоговора = ДанныеДокументов.Получить(РеквизитыОбъекта.Договор);
	Если ДанныеДоговора <> Неопределено Тогда
		ДанныеДоговора.Вставить("ДатаВремя", Saby_ТНВыгрузкаСервер.СтруктураДатаВремя(ДанныеДоговора.ДатаВремя, , Истина));
		СтруктураТитула.Вставить("Договор", ДанныеДоговора);
	КонецЕсли;
	
	СтруктураТитула.Вставить("Маршрут", Маршрут(ДанныеДокумента));
	
	ЗаполнитьПредставителяЗаказчика(СтруктураТитула, ДанныеДокумента, ДанныеДокументов);
	
	СтруктураТитула.Вставить("УсловияПеревозки", УсловияПеревозки(РеквизитыОбъекта));
	
	СтруктураТитула.Вставить("Груз", Груз(ДанныеДокумента));
	
	СтруктураТитула.Вставить(
		"Грузоперевозчик", Saby_ТНВыгрузкаСервер.ДанныеЮрЛица("Перевозчик", ДанныеДокумента, Истина));
	
	СтруктураТитула.Вставить(
		"Грузоотправитель", Saby_ТНВыгрузкаСервер.ДанныеЮрЛица("Отправитель", ДанныеДокумента, Истина));
	
	ЗаполнитьУполномоченныхЛиц(СтруктураТитула.Грузоотправитель, ДанныеДокумента, "УполномоченноеЛицо");
	
	Возврат СтруктураТитула;
	
КонецФункции

Функция ТитулПодтверждение(ДанныеДокумента)
	
	СтруктураТитула = Новый Структура;
	
	Возврат СтруктураТитула;
		
КонецФункции

Функция Маршрут(ДанныеДокумента)
	
	ИмяКлючаНазвание = "Название";
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("КонечныйПункт",      Новый Структура);
	РезультатФункции.Вставить("Отправление",        Новый Структура);
	РезультатФункции.Вставить("ПромежуточныйПункт", Новый Массив);
	РезультатФункции.Вставить("Пункт",              Новый Массив);
	
	РезультатФункции.КонечныйПункт.Вставить(ИмяКлючаНазвание, ДанныеДокумента.Реквизиты.КонечнаяТочкаАдрес);
	
	ПодачаДатаВремя = Saby_ТНВыгрузкаСервер.СтруктураДатаВремя(ДанныеДокумента.Реквизиты.ПодачаДатаВремя, , Истина);
	
	ПодачаТС = Новый Структура;
	ПодачаТС.Вставить("ДатаВремя",                           ПодачаДатаВремя.Значение);
	ПодачаТС.Вставить("ДатаВремяНаличиеUTC",                 ПодачаДатаВремя.ЕстьЧасовойПояс);
	ПодачаТС.Вставить("ПредельныйИнтервалВремени",           ПодачаДатаВремя.Значение);
	ПодачаТС.Вставить("ПредельныйИнтервалВремениНаличиеUTC", ПодачаДатаВремя.ЕстьЧасовойПояс);
	РезультатФункции.Отправление.Вставить("ПодачаТС", ПодачаТС);
	РезультатФункции.Отправление.Вставить("АдресТекст", ДанныеДокумента.Реквизиты.ПодачаАдрес);
	
	Для Каждого СтрокаПромежуточногоПункта Из ДанныеДокумента.АдресаПромежуточныхПунктов Цикл
		СтруктураПромежуточногоПункта = Новый Структура;
		СтруктураПромежуточногоПункта.Вставить(ИмяКлючаНазвание, СтрокаПромежуточногоПункта.Значение);
		РезультатФункции.ПромежуточныйПункт.Добавить(СтруктураПромежуточногоПункта);
	КонецЦикла;
	
	Для Каждого СтрокаПункта Из ДанныеДокумента.АдресаПунктовВыгрузки Цикл
		СтруктураПункта = Новый Структура;
		СтруктураПункта.Вставить("АдресТекст", СтрокаПункта.Значение);
		
		ДатаВремя       = Saby_ТНВыгрузкаСервер.СтруктураДатаВремя(СтрокаПункта.ДатаВремя, , Истина);
		ДопустимоеВремя = Saby_ТНВыгрузкаСервер.СтруктураДатаВремя(СтрокаПункта.ДопустимоеВремя, , Истина);
		
		ТипОперации = Формат(СтрокаПункта.ЭтоПогрузка, "БЛ=Выгрузка; БИ=Погрузка");
		
		Операция = Новый Структура;
		Операция.Вставить("ДатаВремя",                           ДатаВремя.Значение);
		Операция.Вставить("ДатаВремяНаличиеUTC",                 ДатаВремя.ЕстьЧасовойПояс);
		Операция.Вставить("ПредельныйИнтервалВремени",           ДопустимоеВремя.Значение);
		Операция.Вставить("ПредельныйИнтервалВремениНаличиеUTC", ДопустимоеВремя.ЕстьЧасовойПояс);
		Операция.Вставить("Тип",                                 ТипОперации);
		СтруктураПункта.Вставить("Операция", Операция);
		
		СтрокаЮрЛица = ДанныеДокумента.ДанныеЮрЛиц.Найти(СтрокаПункта.КлючСтроки_ДанныеЮрЛиц, "КлючСтроки");
		Если СтрокаЮрЛица <> Неопределено Тогда
			СтруктураПункта.Вставить("Организация", Новый Структура);
			СтруктураПункта.Организация.Вставить("ИНН",      СтрокаЮрЛица.ИНН);
			СтруктураПункта.Организация.Вставить(ИмяКлючаНазвание, СтрокаЮрЛица.НаименованиеОрганизации);
		КонецЕсли;
		
		РезультатФункции.Пункт.Добавить(СтруктураПункта);
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьПредставителяЗаказчика(СтруктураТитула, ДанныеДокумента, ДанныеДокументов)
	
	Если Не ДанныеДокумента.Реквизиты.ПредставительЗаказчика Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураТитула.Вставить("Файл", Новый Структура);
	СтруктураТитула.Файл.Вставить(
		"Составитель",
		Saby_ТНВыгрузкаСервер.ДанныеЮрЛица("Оформитель", ДанныеДокумента, Истина));
	
	СтруктураТитула.Файл.Составитель.Вставить("ДанныеЮрЛица", Новый Структура("Адрес,Контакты,Название,Реквизиты"));
	ЗаполнитьЗначенияСвойств(СтруктураТитула.Файл.Составитель.ДанныеЮрЛица, СтруктураТитула.Файл.Составитель);
	
	Если ЗначениеЗаполнено(ДанныеДокумента.Реквизиты.ПредставительЗаказчика_Основание) Тогда
		ДанныеОснования = ДанныеДокументов.Получить(ДанныеДокумента.Реквизиты.ПредставительЗаказчика_Основание);
		Если ДанныеОснования <> Неопределено Тогда
			ДанныеОснования.Вставить(
			"ДатаВремя", Saby_ТНВыгрузкаСервер.СтруктураДатаВремя(ДанныеОснования.ДатаВремя, , Истина));
			
			СтруктураТитула.Файл.Составитель.Вставить("Основание", ДанныеОснования);
			СтруктураТитула.Файл.Составитель.Основание.Вставить("Документ", ДанныеОснования);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УсловияПеревозки(РеквизитыОбъекта)
	
	РезультатФункции = Новый Структура;
	
	ФорматЧисловогоЗначения = "ЧЦ=5; ЧДЦ=2";
	
	КлиматическийРежим = Новый Структура;
	КлиматическийРежим.Вставить("Влажность",   Новый Структура);
	КлиматическийРежим.Влажность.Вставить(
		"Минимальная",  Формат(РеквизитыОбъекта.ВлажностьОт, ФорматЧисловогоЗначения));
	КлиматическийРежим.Влажность.Вставить(
		"Максимальная", Формат(РеквизитыОбъекта.ВлажностьДо, ФорматЧисловогоЗначения));
	КлиматическийРежим.Вставить("Температура", Новый Структура);
	КлиматическийРежим.Температура.Вставить(
		"Минимальная",  Формат(РеквизитыОбъекта.ТемператураОт, ФорматЧисловогоЗначения));
	КлиматическийРежим.Температура.Вставить(
		"Максимальная", Формат(РеквизитыОбъекта.ТемператураДо, ФорматЧисловогоЗначения));
	
	РезультатФункции.Вставить("КлиматическийРежим",                    КлиматическийРежим);
	РезультатФункции.Вставить("Иные",                                  РеквизитыОбъекта.ИныеУсловия);
	РезультатФункции.Вставить("ПредельныйСрок",                        РеквизитыОбъекта.ПредельныйСрок);
	РезультатФункции.Вставить("ТребованияПоПеревозкеПищевыхПродуктов", РеквизитыОбъекта.ТребованияКТС);
	РезультатФункции.Вставить("УказанияНорм",                          РеквизитыОбъекта.СпецУсловия);
	
	Возврат РезультатФункции;
	
КонецФункции

#Область Груз

Функция Груз(ДанныеДокумента)
	
	МассивПозиций = Новый Массив;
	
	МассивДокументов = ДанныеДокумента.Грузы.ВыгрузитьКолонку("Договор");
	ДанныеДокументов = Saby_ТНОбщегоНазначенияСервер.РеквизитыДокументовСбис(МассивДокументов);
	
	Для Каждого СтрокаГруза Из ДанныеДокумента.Грузы Цикл
		
		СтруктураГруза = ШаблонГруза();
		
		ЗаполнитьЗначенияСвойств(СтруктураГруза, СтрокаГруза, , "ОпасныйГруз");
		
		МетодОпределенияМассы = Перечисления.Saby_МетодОпределенияМассы.КодПоЗначению(
			СтрокаГруза.МетодОпределенияМассы, Истина);		
			
		РаспределениеПоДлинеПлатформы = Формат(СтрокаГруза.РаспределениеПоДлинеПлатформы, "БЛ=0; БИ=1");
		Делимость                     = Формат(СтрокаГруза.Делимость,                     "БЛ=0; БИ=1");
		
		СтруктураГруза.МетодОпределенияМассы         = МетодОпределенияМассы;
		СтруктураГруза.РаспределениеПоДлинеПлатформы = РаспределениеПоДлинеПлатформы;
		СтруктураГруза.Делимость                     = Делимость;
		
		ДанныеДоговора = ДанныеДокументов.Получить(СтрокаГруза.Договор);
		Если ДанныеДоговора <> Неопределено Тогда
			ДанныеДоговора.Вставить("ДатаВремя", Saby_ТНВыгрузкаСервер.СтруктураДатаВремя(ДанныеДоговора.ДатаВремя, , Истина));
			СтруктураГруза.Вставить("Договор", ДанныеДоговора);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаГруза.КлючСтроки_ДанныеЮрЛиц) Тогда
			ДанныеОрганизации = ДанныеОрганизации(ДанныеДокумента, СтрокаГруза.КлючСтроки_ДанныеЮрЛиц);
			СтруктураГруза.Вставить(
				"Заказчик",
				Saby_ТНВыгрузкаСервер.ДанныеЮрЛица(ДанныеОрганизации.РольСтрокой, ДанныеОрганизации, Истина));
		КонецЕсли;
		
		ОпасныеГрузыИзДокумента = Новый Массив;
		ОпасныеГрузыИзДокумента.Добавить(СтрокаГруза);
		Saby_ТНВыгрузкаСервер.ЗаполнитьОпасныйГруз(ОпасныеГрузыИзДокумента, СтруктураГруза.ОпасныйГруз);
		
		ЗаполнитьЗначенияСвойств(СтруктураГруза.Параметры, СтрокаГруза);
		
		ЗаполнитьЗначенияСвойств(СтруктураГруза.ПунктыПогрузкиВыгрузки, СтрокаГруза);
		
		МассивПозиций.Добавить(СтруктураГруза);
		
	КонецЦикла;
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Позиция", МассивПозиций);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ШаблонГруза()
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Договор",                       Неопределено);
	РезультатФункции.Вставить("Заказчик",                      Неопределено);
	РезультатФункции.Вставить("ОпасныйГруз",                   Новый Массив);
	РезультатФункции.Вставить("Параметры",                     Saby_ТНВыгрузкаСервер.ШаблонПараметровГруза());
	РезультатФункции.Вставить("ПунктыПогрузкиВыгрузки",        Новый Структура);
	РезультатФункции.Вставить("ГруженностьКонтейнера",         "");
	РезультатФункции.Вставить("Делимость",                     "");
	РезультатФункции.Вставить("ДопИнформация",                 "");
	РезультатФункции.Вставить("МетодОпределенияМассы",         "");
	РезультатФункции.Вставить("Наименование",                  "");
	РезультатФункции.Вставить("ПогрузкаВодителем",             "");
	РезультатФункции.Вставить("РаспределениеПоДлинеПлатформы", "");
	РезультатФункции.Вставить("Состояние",                     "");
	РезультатФункции.Вставить("ТараКод",                       "");
	РезультатФункции.Вставить("ТараМасса",                     "");
	
	РезультатФункции.ПунктыПогрузкиВыгрузки.Вставить("КоличествоГрузовыхМест", "");
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // Груз

Функция ДанныеОрганизации(ДанныеДокумента, КлючСтроки_ДанныеЮрЛиц)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Реквизиты",   Новый Структура);
	РезультатФункции.Вставить("ДанныеЮрЛиц", Новый Массив);
	РезультатФункции.Вставить("РольСтрокой", "");
	
	ОтборЮрЛиц = Новый Структура();
	ОтборЮрЛиц.Вставить("КлючСтроки", КлючСтроки_ДанныеЮрЛиц);
	
	РезультатФункции.ДанныеЮрЛиц = ДанныеДокумента.ДанныеЮрЛиц.НайтиСтроки(ОтборЮрЛиц);
	
	Если РезультатФункции.ДанныеЮрЛиц.Количество() > 0 Тогда
		Роль = РезультатФункции.ДанныеЮрЛиц[0].Роль;
		МетаданныеПеречисления = Роль.Метаданные();
		ИндексРоли = Перечисления[МетаданныеПеречисления.Имя].Индекс(Роль);
		МетаданныеПеречисления = МетаданныеПеречисления.ЗначенияПеречисления[ИндексРоли];
		РезультатФункции.РольСтрокой = МетаданныеПеречисления.Имя;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьУполномоченныхЛиц(СтруктураДляДобавленияЛиц, ДанныеДокумента, РольСтрокой)
	
	Роль = Перечисления.Saby_РолиКонтрагентов[РольСтрокой];
	
	ОтборУполномоченных = Новый Структура;
	ОтборУполномоченных.Вставить("Роль", Роль);
	
	НайденныеУполномоченные = ДанныеДокумента.ДанныеЮрЛиц.НайтиСтроки(ОтборУполномоченных);
	
	Если НайденныеУполномоченные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДляДобавленияЛиц.Вставить("УполномоченныеЛица", Новый Массив);
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("Реквизиты",   Новый Структура);
	ДанныеОрганизации.Вставить("ДанныеЮрЛиц", Новый Массив);
	
	Для Каждого СтрокаЮрЛица Из НайденныеУполномоченные Цикл
		
		ДанныеОрганизации.ДанныеЮрЛиц.Очистить();
		ДанныеОрганизации.ДанныеЮрЛиц.Добавить(СтрокаЮрЛица);
		
		СтруктураОрганизации = Saby_ТНВыгрузкаСервер.ДанныеЮрЛица(РольСтрокой, ДанныеОрганизации, Истина);
		СтруктураОрганизации.Вставить("Полномочия", СтрокаЮрЛица.Полномочия);
		
		СтруктураДляДобавленияЛиц.УполномоченныеЛица.Добавить(СтруктураОрганизации);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Выгрузка

#Область Загрузка

Процедура ЗагрузкаТитулаОформление(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеОформление = ДанныеОформление(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ДанныеТитула = ДанныеОформление[ДанныеОформление.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
				
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		ЗаполнитьСтрокиТаблицы(ОбъектДок, ДанныеТитула.ДляДокумента, "АдресаПромежуточныхПунктов");
		
		ЗаполнитьСтрокиТаблицы(ОбъектДок, ДанныеТитула.ДляДокумента, "АдресаПунктовВыгрузки");
		
		// Груз 
	    Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеПоГрузам(
			ОбъектДок, 
			ДанныеТитула.ДляДокумента["Груз"], 
			ДопПараметры.ЗагрузкаСОнлайна);
			
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок, ДанныеТитула.ДляДокумента, Перечисления.Saby_РолиКонтрагентов.Отправитель);
			
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок, ДанныеТитула.ДляДокумента, Перечисления.Saby_РолиКонтрагентов.Перевозчик);
				
	КонецЕсли;
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеОформление, ОбъектДок, ДопПараметры.ИмяМетаданных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузкаТитулаПодтверждение(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПодтверждение = ДанныеПодтверждение(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	ДанныеТитула = ДанныеПодтверждение[ДанныеПодтверждение.ВГраница()];
	ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок, ДанныеТитула.ДляДокумента, Перечисления.Saby_РолиКонтрагентов.МедосмотрВыезд);
		
		//ЗаполнитьОтветственныхЛиц(
		//	ОбъектДок, ДанныеТитула.ДляДокумента.ОтветственныеЗаМедосмотр, Перечисления.Saby_РолиОтветственных.МедосмотрВыезд);
			
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(
		ДанныеПодтверждение, ОбъектДок, ДопПараметры.ИмяМетаданных);
	
КонецПроцедуры

#Область ДанныеТитуловДляЗагрузки

Функция ДанныеОформление(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;		
		ДляДокумента.Вставить("ДанныеЮрЛиц", Новый Массив);
						
		// Документ
		ЗагрузитьДанныеДокумента(ДляДокумента, Вложение["Документ"], ДопПараметры);
		
		// Документы ЭПД
		ЗагрузитьДанныеДокументовЭПД(ДляДокумента, Вложение);
		
        // Маршрут
	    ЗагрузитьМаршрут(ДляДокумента, Вложение["Маршрут"]);
		
	    // Условия перевозки
	    ЗагрузитьУсловияПеревозки(ДляДокумента, Вложение["УсловияПеревозки"]);
		
		// Параметры ТС
		ЗагрузитьПараметрыТС(ДляДокумента, Вложение["ПараметрыТС"]);
		
		// Груз
		ДляДокумента.Вставить("Груз", Вложение["Груз"]);
		
		// Saby_ТНЗагрузкаСервер.ДанныеТСПрицеповСпецРазрешений(ДляДокумента, Вложение["ТранспортноеСредство"]);
		
		// ДляДокумента.Вставить("Водители", Saby_ТНЗагрузкаСервер.ДанныеВодителей(Вложение["Водители"], ДопПараметры));
		
		//////////////////////////
		//////////////////////////// уполном. лица заказчика
		//////////////////////////ДанныеЮрЛиц
				
		// ПредставительЗаказчика
		// Грузоперевозчик
        // Грузоотправитель
		// Груз // Маркировки // ОпасныеГрузы // СведенияГосСистем // Контейнеры
		
		ЗаполнитьДанныеЮрЛиц(ДляДокумента, Вложение);
				
		ДляРегистра = СтруктураДанныхДляРегистра(ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных);
		
		РезультатФункции.Добавить(Saby_ТНЗагрузкаСервер.СтруктураТитула(Титул, ДляДокумента, ДляРегистра));
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеПодтверждение(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения, ДопПараметры);
		
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;		
		ДляДокумента.Вставить("ДанныеЮрЛиц", Новый Массив);
		
		ДляРегистра = СтруктураДанныхДляРегистра(ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных);
		
		РезультатФункции.Добавить(Saby_ТНЗагрузкаСервер.СтруктураТитула(Титул, ДляДокумента, ДляРегистра));
		
	КонецЦикла;
			
	Возврат РезультатФункции;
	
КонецФункции

Функция СтруктураДанныхДляРегистра(ОбъектДок, Вложение, Титул, ИмяМетаданных, СохранитьДанные = Ложь)
	
	Основной = Не Перечисления.Saby_ТипТитулаЗнП.ЭтоДинамическийТитул(Титул);
	
	СтруктураДанныхДляРегистра = Saby_ТНЗагрузкаСервер.СтруктураДанныхДляРегистра(ОбъектДок.Ссылка, Титул, Основной);
	СтруктураДанныхДляРегистра.Просмотрено     = Истина;
	СтруктураДанныхДляРегистра.СохранитьДанные = СохранитьДанные;
	
	Вложение.Вставить("ЗагруженВРегистр", Вложение["ЗагруженВРегистр"] Или Вложение["ИдентификаторВложенияТитула"] = "");
	
	Возврат Saby_ТНЗагрузкаСервер.ДанныеДляРегистраТитулов(Вложение, ИмяМетаданных, СтруктураДанныхДляРегистра);
		
КонецФункции

#КонецОбласти // ДанныеТитуловДляЗагрузки

Процедура ЗагрузитьДанныеДокумента(ДляДокумента, ДокументСОнлайна, ДопПараметры)
	
	Если Не ЗначениеЗаполнено(ДокументСОнлайна) Тогда
		Возврат;
	КонецЕсли;
		
	ДляДокумента.Вставить("НомерСБИС", ДокументСОнлайна["Номер"]);
	
	ДляДокумента.Вставить(
	    "ТипДокумента",
		Перечисления.Saby_ТипДокументаЗнП.ЗначениеПоКоду(ДокументСОнлайна["Тип"]));
	
	Если Не ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДляДокумента = Saby_ТНОбщегоНазначенияСервер.СтруктураБезПустыхЗначений(ДляДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьМаршрут(ДляДокумента, Маршрут)
	
	Если Не ЗначениеЗаполнено(Маршрут) Тогда
		Возврат;
	КонецЕсли;	
	
	// Конечный пункт
	ДляДокумента.Вставить(
		"КонечнаяТочкаАдрес", 
		Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Маршрут, "КонечныйПункт.Название"));
	
	// Отправление
	Отправление = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Маршрут, "Отправление");
		
	ДляДокумента.Вставить(
		"ПодачаАдрес", 
		Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Отправление, "АдресТекст"));
	
	// Подача ТС
	ПодачаДата = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Отправление, "ПодачаТС.ДатаВремя");		
	ПодачаДата = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ПодачаДата);
	
	ДляДокумента.Вставить(
		"ПодачаДатаВремя", 
		ПодачаДата);
				
	Интервал = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Отправление, 
		"ПодачаТС.ПредельныйИнтервалВремени");			
	Интервал = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВоВремя(Интервал);
	
	ДляДокумента.Вставить(
			"ПодачаПредельныйИнтервал", 
			Интервал);		
		
	// Промежуточные пункты
	ПромежуточныеПункты = Маршрут["ПромежуточныйПункт"];
	
	АдресаПромежуточныхПунктов = Новый Массив;
	
	Если ЗначениеЗаполнено(ПромежуточныеПункты) Тогда
		Для Каждого Пункт Из ПромежуточныеПункты Цикл
			
			СтруктураПункта = Новый Структура;
			СтруктураПункта.Вставить("Значение", Пункт["Название"]);
			
			АдресаПромежуточныхПунктов.Добавить(СтруктураПункта);
			
		КонецЦикла;
	КонецЕсли;
	
	ДляДокумента.Вставить("АдресаПромежуточныхПунктов", АдресаПромежуточныхПунктов);
		
	// Пункты выгрузки
	Пункты = Маршрут["Пункт"];
		
	АдресаПунктовВыгрузки = Новый Массив;
	Если ЗначениеЗаполнено(Пункты) Тогда
		
		Для Каждого Пункт Из Пункты Цикл
			
			СтруктураПункта = Новый Структура;
			СтруктураПункта.Вставить("Значение", Пункт["АдресТекст"]);
			
			// Операция
			ДатаВремяСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Пункт, "Операция.ДатаВремя");		
			СтруктураПункта.Вставить(
				"ДатаВремя",
				Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаВремяСтрокой));
			
			ИнтервалСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Пункт, "Операция.ПредельныйИнтервалВремени");		
			СтруктураПункта.Вставить(
				"ДопустимоеВремя", 
				Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВоВремя(ИнтервалСтрокой));
			 			
			Тип = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Пункт, "Операция.Тип");			
			СтруктураПункта.Вставить("ЭтоПогрузка", Тип = "Погрузка");
			
			// Организация
			СтруктураПункта.Вставить("ОрганизацияСтрока", 
			Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Пункт, "Организация.Название"));
			
			СтруктураПункта.Вставить("ОрганизацияИНН",
			Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Пункт, "Организация.ИНН"));
			
			АдресаПунктовВыгрузки.Добавить(СтруктураПункта);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДляДокумента.Вставить("АдресаПунктовВыгрузки", АдресаПунктовВыгрузки);
	
КонецПроцедуры

Процедура ЗагрузитьУсловияПеревозки(ДляДокумента, УсловияПеревозки)
	
	Если Не ЗначениеЗаполнено(УсловияПеревозки) Тогда
		Возврат;
	КонецЕсли;
		
	ДляДокумента.Вставить("СпецУсловия", Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
		УсловияПеревозки, "УказанияНорм"));
		
	ДляДокумента.Вставить("ПредельныйСрок", Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
		УсловияПеревозки, "ПредельныйСрок"));
		
	ДляДокумента.Вставить("ИныеУсловия", Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
		УсловияПеревозки, "Иные"));
		
	ДляДокумента.Вставить("ТребованияКТС", Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
		УсловияПеревозки, "ТребованияПоПеревозкеПищевыхПродуктов"));
		
	// Климатический режим
	КлиматическийРежим = УсловияПеревозки["КлиматическийРежим"];
	
	ДляДокумента.Вставить("ВлажностьОт", Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
		КлиматическийРежим, "Влажность.Минимальная"));
		
	ДляДокумента.Вставить("ВлажностьДо", Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
		КлиматическийРежим, "Влажность.Максимальная"));
		
	ДляДокумента.Вставить("ТемператураОт", Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
		КлиматическийРежим, "Температура.Минимальная"));
		
	ДляДокумента.Вставить("ТемператураДо", Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
		КлиматическийРежим, "Температура.Максимальная"));
	
КонецПроцедуры

Процедура ЗагрузитьПараметрыТС(ДляДокумента, ПараметрыТС)
	
	Если Не ЗначениеЗаполнено(ПараметрыТС) Тогда
		Возврат;
	КонецЕсли;                            
			
	ДляДокумента.Вставить("ТипТС", Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
		ПараметрыТС, "Тип"));
	
	ДляДокумента.Вставить("КузовТС", Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
		ПараметрыТС, "ТипКузова"));
		
	ДляДокумента.Вставить("ПогрузкаТС", Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
		ПараметрыТС, "ТипПогрузки"));
		
	ДляДокумента.Вставить("ГрузоподъемностьТС", Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
		ПараметрыТС, "Грузоподъемность"));
		
	ДляДокумента.Вставить("ВместимостьТС", Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
		ПараметрыТС, "Вместимость"));	

КонецПроцедуры

Процедура ЗагрузитьДанныеДокументовЭПД(ДляДокумента, ДанныеДокументов)
		
	Если Не ЗначениеЗаполнено(ДанныеДокументов) Тогда 
		Возврат;
	КонецЕсли;
		
	ТЗ = Saby_ТНЗагрузкаСервер.ТаблицаДокументовЭПД();
		
	Договор              = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеДокументов, "Договор");
	СоставительОснование = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
		ДанныеДокументов, "Файл.Составитель.Основание");
			
	НомерСтроки = 0;
		
	// Договор
	Если ЗначениеЗаполнено(Договор) Тогда 
		НС = ТЗ.Добавить();
		Тип = Перечисления.Saby_ТипыДокумента.ДоговорПеревозки;
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеСтрокиТаблицыДокументовЭПД(НС, Договор, Тип, НомерСтроки);
	КонецЕсли;
	
	// Составитель на основание
	Если ЗначениеЗаполнено(СоставительОснование) Тогда 
		НС = ТЗ.Добавить();	
		Тип = Перечисления.Saby_ТипыДокумента.СоставительНаОсновании;
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеСтрокиТаблицыДокументовЭПД(НС, СоставительОснование, Тип, НомерСтроки);
	КонецЕсли;
	
	Если Не ТЗ.Количество() Тогда
		Возврат;
	КонецЕсли;
		
	// Получим ссылки на существующие и новые документы
	СоответствиеДокументов = Saby_ТНЗагрузкаСервер.НайтиСоздатьДокументЭПД(ТЗ);
		
	// Заполняем данные по документам
	Для Каждого СтрокаДок Из ТЗ Цикл
		
		СсылкаДок = СоответствиеДокументов.Получить(СтрокаДок.НомерСтроки);
		
		Если СтрокаДок.ТипДок = Перечисления.Saby_ТипыДокумента.ДоговорПеревозки Тогда			
			ДляДокумента.Вставить("Договор", СсылкаДок);			
		Иначе			
			ДляДокумента.Вставить("Составитель_НаОснованииДокумент", СсылкаДок);			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиТаблицы(ОбъектДок, ДляДокумента, НазваниеТаблицы)
	
	Если Не ДляДокумента.Свойство(НазваниеТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДляДокумента[НазваниеТаблицы].Количество() > 0 Тогда
		ОбъектДок[НазваниеТаблицы].Очистить();
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ДляДокумента[НазваниеТаблицы] Цикл
		НоваяСтрока = ОбъектДок[НазваниеТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЮрЛиц(ДляДокумента, Вложение)
	
	РольОтправитель  = Перечисления.Saby_РолиКонтрагентов.Отправитель;
	РольПеревозчик   = Перечисления.Saby_РолиКонтрагентов.Перевозчик;

	КонтактныеДанные = Новый Массив;
	
	// Отправитель
	Грузоотправитель = Вложение["Грузоотправитель"];
	Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеОрганизации(ДляДокумента, Грузоотправитель, РольОтправитель);
	КИГрузоотправитель = Saby_ТНЗагрузкаСервер.КонтактнаяИнформация(Грузоотправитель, РольОтправитель);
	ДополнитьКонтактнуюИнформацию(КонтактныеДанные, КИГрузоотправитель);
	
	// Перевозчик
	Грузоперевозчик = Вложение["Грузоперевозчик"];
	Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеОрганизации(ДляДокумента, Грузоперевозчик,  РольПеревозчик);
	КИГрузоперевозчик = Saby_ТНЗагрузкаСервер.КонтактнаяИнформация(Грузоперевозчик, РольПеревозчик);	
	ДополнитьКонтактнуюИнформацию(КонтактныеДанные, КИГрузоперевозчик);
		
	Составитель = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Файл.Составитель.Наименование"); 
	ДляДокумента.Вставить("ПредставительЗаказчика",             ЗначениеЗаполнено(Составитель));
	ДляДокумента.Вставить("ПредставительЗаказчикаНаименование", Составитель);			
	
	ДляДокумента.Вставить("КонтактныеДанные", КонтактныеДанные);
	
КонецПроцедуры

Процедура ДополнитьКонтактнуюИнформацию(КонтактныеДанные, МассивКИ)
	
	Если Не ЗначениеЗаполнено(МассивКИ) Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого ЭлементКИ Из МассивКИ Цикл		
		КонтактныеДанные.Добавить(ЭлементКИ);	
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти // Загрузка

#КонецОбласти // СлужебныеПроцедурыИФункции
