           
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Saby_ТНОбщегоНазначенияСервер.ОграничитьТипыДокументовОснований(ЭтаФорма);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриЧтенииСозданииПослеЗаписиНаСервере();
	Иначе
		Saby_ТНОбщегоНазначенияСервер.УбратьПризнакНеПросмотрен(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
	Saby_ТНОбщегоНазначенияКлиент.НастроитьДополнительныеКонтакты(
		ЭтаФорма, "Отправитель,Перевозчик,УполномоченноеЛицоПеревозчика");
		
	СтрокаЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(
		Объект.ДанныеЮрЛиц, "УполномоченноеЛицоПеревозчика");
	Saby_ТНОбщегоНазначенияКлиент.ЗаполнитьДополнительныеПоляЮрЛица(
		ЭтаФорма, СтрокаЮрЛиц, "Полномочия,Основание", "УполномоченноеЛицоПеревозчика");
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МассивРеквизитов = РеквизитыДляРазделенияДатыИВремя();
	Saby_ТНОбщегоНазначенияСервер.СобратьДатуВремяПоРеквизитам(ЭтаФорма, МассивРеквизитов, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриЧтенииСозданииПослеЗаписиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииПослеЗаписиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Saby_ТНОбщегоНазначенияКлиент.ОбработатьОповещенияДляФормы(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	
	Если Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.Saby_ТипДокументаЗнП.Заказ") Тогда
		Объект.Договор = "";
	КонецЕсли;
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(Элемент.Имя, Элемент.Имя);
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(ЭтаФорма, "Отправитель", ПараметрыРеквизитаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправитель_ТелефонПриИзменении(Элемент)
	
	РолиЮрЛиц = РолиЮрЛиц("Отправитель");
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонПриИзменении(ЭтаФорма, ЭтаФорма.Отправитель_Телефон, РолиЮрЛиц, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправитель_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     РолиЮрЛиц("Отправитель"));
	ПараметрыВыбораТелефона.Вставить("Значение", ЭтаФорма.Отправитель_Телефон);
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонНачалоВыбора(ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставительЗаказчикаПриИзменении(Элемент)
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставительЗаказчикаСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(Элемент.Имя, Элемент.Имя);
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(ЭтаФорма, "Оформитель", ПараметрыРеквизитаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(Элемент.Имя, Элемент.Имя);
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(ЭтаФорма, "Перевозчик", ПараметрыРеквизитаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик_ТелефонПриИзменении(Элемент)
	
	РолиЮрЛиц = РолиЮрЛиц("Перевозчик");
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонПриИзменении(ЭтаФорма, ЭтаФорма.Перевозчик_Телефон, РолиЮрЛиц, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     РолиЮрЛиц("Перевозчик"));
	ПараметрыВыбораТелефона.Вставить("Значение", ЭтаФорма.Перевозчик_Телефон);
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонНачалоВыбора(ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаполнитьПодачаТСНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбораАдреса = Новый Структура;
	ПараметрыВыбораАдреса.Вставить("Роль",           "ПодачаТС");
	ПараметрыВыбораАдреса.Вставить("Значение",       Объект.ПодачаАдресСтруктура);
	ПараметрыВыбораАдреса.Вставить("ТолькоПросмотр", Ложь);
	
	Saby_ТНОбщегоНазначенияКлиент.АдресНачалоВыбора(ЭтаФорма, ПараметрыВыбораАдреса, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаполнитьКонечнаяТочкаНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбораАдреса = Новый Структура;
	ПараметрыВыбораАдреса.Вставить("Роль",           "КонечнаяТочка");
	ПараметрыВыбораАдреса.Вставить("Значение",       Объект.КонечнаяТочкаАдресСтруктура);
	ПараметрыВыбораАдреса.Вставить("ТолькоПросмотр", Ложь);
	
	Saby_ТНОбщегоНазначенияКлиент.АдресНачалоВыбора(ЭтаФорма, ПараметрыВыбораАдреса, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УполномоченноеЛицоПеревозчикаСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(Элемент.Имя, Элемент.Имя);
	ПараметрыРеквизитаФормы.ДополнительныеПоля = "Основание,Полномочия";
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(ЭтаФорма, "УполномоченноеЛицоПеревозчика", ПараметрыРеквизитаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УполномоченноеЛицоПеревозчика_ТелефонПриИзменении(Элемент)
	
	РолиЮрЛиц = РолиЮрЛиц("УполномоченноеЛицоПеревозчика");
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонПриИзменении(
		ЭтаФорма, ЭтаФорма.УполномоченноеЛицоПеревозчика_Телефон, РолиЮрЛиц, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УполномоченноеЛицоПеревозчика_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением,
		СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     РолиЮрЛиц("УполномоченноеЛицоПеревозчика"));
	ПараметрыВыбораТелефона.Вставить("Значение", ЭтаФорма.УполномоченноеЛицоПеревозчика_Телефон);
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонНачалоВыбора(ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортноеСредствоСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	Saby_ТНОбщегоНазначенияКлиент.ТранспортноеСредствоСтрокойНажатие(
		ЭтаФорма,
		СтандартнаяОбработка,
		Неопределено,
		Элемент.ТолькоПросмотр);
		
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	Saby_ТНОбщегоНазначенияКлиент.ПрицепыСтрокойНажатие(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ЭтаФорма.ТекущийЭлемент = Элементы.Водители;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйЗаПеревозкуСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтветственного = СтруктураОтветственного(Объект.ОтветственныеЛица, "Ответственный");
	
	Saby_ТНОбщегоНазначенияКлиент.НачатьРедактированиеОтветственногоЛица(
		ЭтаФорма, СтруктураОтветственного, "Ответственный");
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтправительКонтактныеДанные

&НаКлиенте
Процедура ОтправительКонтактныеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ЕстьДанныеЮрЛица("Отправитель") Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан Заказчик!";
		Сообщение.Поле  = "ОтправительСтрокой";
		Сообщение.Сообщить();		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактныеДанныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Если Копирование Тогда
			Элементы.ОтправительКонтактныеДанные.ТекущиеДанные.Основной = Ложь;
		КонецЕсли;
		ОбработатьНовуюСтрокуКонтактнойИнформации(Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактныеДанныеПослеУдаления(Элемент)
	
	РолиЮрЛиц = РолиЮрЛиц("Отправитель");
	ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(РолиЮрЛиц);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактныеДанныеЗначениеПриИзменении(Элемент)
	
	РолиЮрЛиц = РолиЮрЛиц("Отправитель");
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхПриИзменении(
		ЭтаФорма, Элементы.ОтправительКонтактныеДанные.ТекущиеДанные, РолиЮрЛиц);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактныеДанныеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	РолиЮрЛиц = РолиЮрЛиц("Отправитель");
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхНачалоВыбора(
		ЭтаФорма, Элементы.ОтправительКонтактныеДанные.ТекущиеДанные, РолиЮрЛиц, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыОтправительКонтактныеДанные

#Область ОбработчикиСобытийЭлементовТаблицыФормыПеревозчикКонтактныеДанные

&НаКлиенте
Процедура ПеревозчикКонтактныеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ЕстьДанныеЮрЛица("Перевозчик") Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан Перевозчик!";
		Сообщение.Поле  = "ПеревозчикСтрокой";
		Сообщение.Сообщить();		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикКонтактныеДанныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Если Копирование Тогда
			Элементы.ПеревозчикКонтактныеДанные.ТекущиеДанные.Основной = Ложь;
		КонецЕсли;
		ОбработатьНовуюСтрокуКонтактнойИнформации(Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикКонтактныеДанныеПослеУдаления(Элемент)
	
	РолиЮрЛиц = РолиЮрЛиц("Перевозчик");
	ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(РолиЮрЛиц);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикКонтактныеДанныеЗначениеПриИзменении(Элемент)
	
	РолиЮрЛиц = РолиЮрЛиц("Перевозчик");
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхПриИзменении(
		ЭтаФорма, Элементы.ПеревозчикКонтактныеДанные.ТекущиеДанные, РолиЮрЛиц);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикКонтактныеДанныеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	РолиЮрЛиц = РолиЮрЛиц("Перевозчик");
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхНачалоВыбора(
		ЭтаФорма, Элементы.ПеревозчикКонтактныеДанные.ТекущиеДанные, РолиЮрЛиц, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыПеревозчикКонтактныеДанные

#Область ОбработчикиСобытийЭлементовТаблицыФормыАдресаПунктовВыгрузки

&НаКлиенте
Процедура АдресаПунктовВыгрузкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОрганизацияВТаблицеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, "Отгрузчик");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаПунктовВыгрузкиЗначениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ПараметрыВыбораАдреса = Новый Структура;
	ПараметрыВыбораАдреса.Вставить("Роль",           "АдресаПунктовВыгрузки");
	ПараметрыВыбораАдреса.Вставить("Значение",       Элементы.АдресаПунктовВыгрузки.ТекущиеДанные.Структура);
	ПараметрыВыбораАдреса.Вставить("ТолькоПросмотр", Ложь);
	
	Saby_ТНОбщегоНазначенияКлиент.АдресНачалоВыбора(ЭтаФорма, ПараметрыВыбораАдреса, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаПунктовВыгрузкиДатаВремяПриИзменении(Элемент)
	
	ОбновитьДатуДопустимогоВремени(Элементы.АдресаПунктовВыгрузки.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаПунктовВыгрузкиДопустимоеВремяПриИзменении(Элемент)
	
	ОбновитьДатуДопустимогоВремени(Элементы.АдресаПунктовВыгрузки.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыАдресаПунктовВыгрузки

#Область ОбработчикиСобытийЭлементовТаблицыФормыАдресаПромежуточныхПунктов

&НаКлиенте
Процедура АдресаПромежуточныхПунктовЗначениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ПараметрыВыбораАдреса = Новый Структура;
	ПараметрыВыбораАдреса.Вставить("Роль",           "АдресаПромежуточныхПунктов");
	ПараметрыВыбораАдреса.Вставить("Значение",       Элементы.АдресаПромежуточныхПунктов.ТекущиеДанные.Структура);
	ПараметрыВыбораАдреса.Вставить("ТолькоПросмотр", Ложь);
	
	Saby_ТНОбщегоНазначенияКлиент.АдресНачалоВыбора(ЭтаФорма, ПараметрыВыбораАдреса, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыАдресаПромежуточныхПунктов

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрузы

&НаКлиенте
Процедура ГрузыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОрганизацияВТаблицеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, "Заказчик");
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриАктивизацииСтроки(Элемент)
	
	СтруктураСвязанныхТаблиц = СвязанныеСГрузомТаблицы();
	Saby_ТНОбщегоНазначенияКлиентСервер.УстановитьОтборПоСвязаннымТаблицам(ЭтаФорма, СтруктураСвязанныхТаблиц);
		
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПередУдалением(Элемент, Отказ)
	
	СтруктураСвязанныхТаблиц = СвязанныеСГрузомТаблицы();
	Saby_ТНОбщегоНазначенияКлиентСервер.УдалитьСтрокиСвязанныхТаблиц(ЭтаФорма, СтруктураСвязанныхТаблиц);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаГруза = Элементы.Грузы.ТекущиеДанные;		
		СтрокаГруза.КлючСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НовыйКлючОсновнойСтроки(ЭтаФорма, "Грузы");
		Если Не Копирование Тогда 
			СтрокаГруза.Тип = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.Saby_ТипГруза.Груз");			
		КонецЕсли;
		
		СтруктураСвязанныхТаблиц = СвязанныеСГрузомТаблицы();
		Saby_ТНОбщегоНазначенияКлиентСервер.УстановитьОтборПоСвязаннымТаблицам(ЭтаФорма, СтруктураСвязанныхТаблиц);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыГрузы

#Область ОбработчикиСобытийЭлементовТаблицыФормыМаркировки

&НаКлиенте
Процедура МаркировкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Saby_ТНОбщегоНазначенияКлиент.ПередНачаломДобавленияСтрокиСвязаннойТаблицы(ЭтаФорма, "Грузы", Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура МаркировкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТаблицы = Элементы.Груз_АдресаПунктов.ТекущиеДанные;
		СтрокаТаблицы.КлючСтроки_Грузы = Saby_ТНОбщегоНазначенияКлиентСервер.НовыйКлючСвязаннойСтроки(ЭтаФорма, "Грузы");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыМаркировки

#Область ОбработчикиСобытийЭлементовТаблицыФормыОпасныеГрузы

&НаКлиенте
Процедура ОпасныеГрузыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Saby_ТНОбщегоНазначенияКлиент.ПередНачаломДобавленияСтрокиСвязаннойТаблицы(ЭтаФорма, "Грузы", Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпасныеГрузыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТаблицы = Элементы.ОпасныеГрузы.ТекущиеДанные;
		СтрокаТаблицы.КлючСтроки_Грузы = Saby_ТНОбщегоНазначенияКлиентСервер.НовыйКлючСвязаннойСтроки(ЭтаФорма, "Грузы");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыОпасныеГрузы

#Область ОбработчикиСобытийЭлементовТаблицыФормыСведенияГосСистем

&НаКлиенте
Процедура СведенияГосСистемПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Saby_ТНОбщегоНазначенияКлиент.ПередНачаломДобавленияСтрокиСвязаннойТаблицы(ЭтаФорма, "Грузы", Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияГосСистемПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТаблицы = Элементы.СведенияГосСистем.ТекущиеДанные;
		СтрокаТаблицы.КлючСтроки_Грузы = Saby_ТНОбщегоНазначенияКлиентСервер.НовыйКлючСвязаннойСтроки(ЭтаФорма, "Грузы");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыСведенияГосСистем

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтейнеры

&НаКлиенте
Процедура КонтейнерыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Saby_ТНОбщегоНазначенияКлиент.ПередНачаломДобавленияСтрокиСвязаннойТаблицы(ЭтаФорма, "Грузы", Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтейнерыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТаблицы = Элементы.Контейнеры.ТекущиеДанные;
		СтрокаТаблицы.КлючСтроки_Грузы = Saby_ТНОбщегоНазначенияКлиентСервер.НовыйКлючСвязаннойСтроки(ЭтаФорма, "Грузы");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыКонтейнеры

#Область ОбработчикиСобытийЭлементовТаблицыФормыУполномоченныеЛицаЗаказчика

&НаКлиенте
Процедура УполномоченныеЛицаЗаказчикаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(
			"НаименованиеОрганизации",
			"УполномоченныеЛицаЗаказчикаНаименованиеОрганизации",
			ВыбраннаяСтрока);
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(ЭтаФорма, "УполномоченноеЛицо", ПараметрыРеквизитаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УполномоченныеЛицаЗаказчикаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Для Каждого СтруктураОтбора Из Элемент.ОтборСтрок Цикл
			Элемент.ТекущиеДанные[СтруктураОтбора.Ключ] = СтруктураОтбора.Значение;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(
			"НаименованиеОрганизации",
			"УполномоченныеЛицаЗаказчикаНаименованиеОрганизации",
			Элементы.УполномоченныеЛицаЗаказчика.ТекущаяСтрока);
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(ЭтаФорма, "УполномоченноеЛицо", ПараметрыРеквизитаФормы);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыУполномоченныеЛицаЗаказчика

#Область ОбработчикиСобытийЭлементовТаблицыФормыУполномоченноеЛицоПеревозчикаКонтактныеДанные

&НаКлиенте
Процедура УполномоченноеЛицоПеревозчикаКонтактныеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование,
		Родитель, Группа, Параметр)
	
	Если Не ЕстьДанныеЮрЛица("УполномоченноеЛицоПеревозчика") Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указано уполномоченное лицо перевозчика!";
		Сообщение.Поле  = "УполномоченноеЛицоПеревозчикаСтрокой";
		Сообщение.Сообщить();		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УполномоченноеЛицоПеревозчикаКонтактныеДанныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Если Копирование Тогда
			Элементы.УполномоченноеЛицоПеревозчикаКонтактныеДанные.ТекущиеДанные.Основной = Ложь;
		КонецЕсли;
		ОбработатьНовуюСтрокуКонтактнойИнформации(Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УполномоченноеЛицоПеревозчикаКонтактныеДанныеПослеУдаления(Элемент)
	
	РолиЮрЛиц = РолиЮрЛиц("УполномоченноеЛицоПеревозчика");
	ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(РолиЮрЛиц);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура УполномоченноеЛицоПеревозчикаКонтактныеДанныеЗначениеПриИзменении(Элемент)
	
	РолиЮрЛиц = РолиЮрЛиц("УполномоченноеЛицоПеревозчика");
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхПриИзменении(
		ЭтаФорма, Элементы.ПеревозчикКонтактныеДанные.ТекущиеДанные, РолиЮрЛиц);
	
КонецПроцедуры

&НаКлиенте
Процедура УполномоченноеЛицоПеревозчикаКонтактныеДанныеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением,
		СтандартнаяОбработка)
	
	РолиЮрЛиц = РолиЮрЛиц("УполномоченноеЛицоПеревозчика");
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхНачалоВыбора(
		ЭтаФорма, Элементы.ПеревозчикКонтактныеДанные.ТекущиеДанные, РолиЮрЛиц, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыУполномоченноеЛицоПеревозчикаКонтактныеДанные

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрицепы

&НаКлиенте
Процедура ПрицепыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Saby_ТНОбщегоНазначенияКлиент.ПрицепыВыбор(
		ЭтаФорма,
		ВыбраннаяСтрока,
		СтандартнаяОбработка,
		Неопределено,
		Элементы.ГруппаПрицепы.ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Saby_ТНОбщегоНазначенияКлиент.ПрицепыПриНачалеРедактирования(
		ЭтаФорма,
		Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПослеУдаления(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьТранспортныеСредстваНаФорме(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыПрицепы

#Область ОбработчикиСобытийЭлементовТаблицыФормыВодители

&НаКлиенте
Процедура ВодителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтруктураОтветственного = СтруктураОтветственного(Объект.ОтветственныеЛица, "", ВыбраннаяСтрока);
	
	Saby_ТНОбщегоНазначенияКлиент.НачатьРедактированиеОтветственногоЛица(ЭтаФорма, СтруктураОтветственного, "Водитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Для Каждого СтруктураОтбора Из Элемент.ОтборСтрок Цикл
			Элемент.ТекущиеДанные[СтруктураОтбора.Ключ] = СтруктураОтбора.Значение;
		КонецЦикла;
		
		СтруктураОтветственного = СтруктураОтветственного(Объект.ОтветственныеЛица, "", Элемент.ТекущаяСтрока);
		
		Saby_ТНОбщегоНазначенияКлиент.НачатьРедактированиеОтветственногоЛица(ЭтаФорма, СтруктураОтветственного, "Водитель");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПослеУдаления(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьВодителейНаФорме(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыВодители

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьВСбис(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКоманды", "ВыгрузитьВСбис");
	
	ПроцедураОбменДаннымиЗнП = Новый ОписаниеОповещения("ОбменДаннымиЗнП", ЭтотОбъект, ДополнительныеПараметры);
	
	Saby_ТНОбщегоНазначенияКлиент.ПроверитьМодифицированностьИПродолжитьВыполнение(ПроцедураОбменДаннымиЗнП);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДокумент(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКоманды", "ПрочитатьДокумент");
	
	ПроцедураОбменДаннымиЗнП = Новый ОписаниеОповещения("ОбменДаннымиЗнП", ЭтотОбъект, ДополнительныеПараметры);
	
	Saby_ТНОбщегоНазначенияКлиент.ПроверитьМодифицированностьИПродолжитьВыполнение(ПроцедураОбменДаннымиЗнП);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииПослеЗаписиНаСервере()
	
	ЗаполнитьРасчетныеРеквизиты();
	
	// ToDo: Вставить сюда обновление ленты
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
	// ToDo: Вставить сюда обновление видимости по этапу и участнику
	
	СтруктураСвязанныхТаблиц = СвязанныеСГрузомТаблицы();
	Saby_ТНОбщегоНазначенияКлиентСервер.УстановитьОтборПоСвязаннымТаблицам(ЭтаФорма, СтруктураСвязанныхТаблиц);
	
	УстановитьОтборУполномоченныхЛиц();
	
	УстановитьОтборВодителей();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасчетныеРеквизиты()
	
	// Активный этап и индикация состояния
	Saby_ТНОбщегоНазначенияСервер.ОтобразитьНаФормеСбисЭтапИСостояние(ЭтаФорма);
	
	// Документ основание
	Если ЗначениеЗаполнено(Объект.ДокументОснование_Идентификатор) Тогда
		ДокументОснование = Документы[Объект.ДокументОснование_ОбъектМетаданных].ПолучитьСсылку(
			Объект.ДокументОснование_Идентификатор);
		Элементы.ДекорацияДокументОснование.Заголовок = СокрЛП(ДокументОснование);
	КонецЕсли;
	
	ЭтаФорма.ОтправительСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		Объект.ДанныеЮрЛиц, "Отправитель");
		
	ЭтаФорма.ПеревозчикСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		Объект.ДанныеЮрЛиц, "Перевозчик");
		
	ЭтаФорма.УполномоченноеЛицоПеревозчикаСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		Объект.ДанныеЮрЛиц, "УполномоченноеЛицоПеревозчика");
	
	// Телефоны
	РолиЮрЛиц = РолиЮрЛиц("Отправитель,Перевозчик,УполномоченноеЛицо,УполномоченноеЛицоПеревозчика");
	ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(РолиЮрЛиц);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметры);
	
	// Даты. Разложим дату и время по отдельным реквизитам  
	МассивРеквизитов = РеквизитыДляРазделенияДатыИВремя();
	Saby_ТНОбщегоНазначенияСервер.РазложитьДатуВремяПоРеквизитам(ЭтаФорма, МассивРеквизитов);
	
	// ТС
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьТранспортныеСредстваНаФорме(ЭтаФорма);
	
	// Водители
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьВодителейНаФорме(ЭтаФорма);
	
	СтруктураОтветственного = СтруктураОтветственного(Объект.ОтветственныеЛица, "Ответственный");
	Saby_ТНОбщегоНазначенияСервер.ОбновитьОтветственногоНаФорме(
		ЭтаФорма, "ОтветственныйЗаПеревозкуСтрокой", СтруктураОтветственного);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИДоступностьЭлементов()
	
	Элементы.ГруппаПредставительЗаказчика.Видимость = Объект.ПредставительЗаказчика;
	
	Элементы.Договор.ТолькоПросмотр = Объект.ТипДокумента = Перечисления.Saby_ТипДокументаЗнП.Заказ;
	
	Элементы.ДекорацияЗаполнитьПодачаТС.Видимость      = Не ЗначениеЗаполнено(Объект.ПодачаАдрес);
	Элементы.ДекорацияЗаполнитьКонечнаяТочка.Видимость = Не ЗначениеЗаполнено(Объект.КонечнаяТочкаАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменДаннымиЗнП(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИмяКоманды = Результат;
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ИмяКоманды") Тогда
		ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	КонецЕсли;
	
	Если ИмяКоманды = "ВыгрузитьВСбис" Тогда
		ДанныеДляОбработки = Новый Массив;
		ПараметрыВыгрузки = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки(Объект.Ссылка);
		ДанныеДляОбработки.Добавить(ПараметрыВыгрузки);
	Иначе
		ДанныеДляОбработки = Новый Массив;
		ПараметрыЗагрузки = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыЗагрузки(Объект.Ссылка);
		Если ИмяКоманды = "ОбновитьАктивныйЭтап" Тогда
			ПараметрыЗагрузки.ТекущийТитул = АктивныйЭтапСтрокой;
			ПараметрыЗагрузки.ТолькоАктивныйЭтап = Истина;
		КонецЕсли;
		ПараметрыЗагрузки.ИзДокумента = Истина;
		ПараметрыЗагрузки.ИмяМетаданных = "Saby_ЗаказНаПеревозку";
		ДанныеДляОбработки.Добавить(ПараметрыЗагрузки);
	КонецЕсли;
	
	ДополнительныеПараметрыОбмена = Новый Структура;
	
	Saby_ТНОбщегоНазначенияКлиент.ВыполнитьКомандуСбис(
		ЭтаФорма,
		ИмяКоманды,
		ДанныеДляОбработки,
		ДополнительныеПараметрыОбмена);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНовуюСтрокуКонтактнойИнформации(ИмяТЧ)
	
	Роль = ПредопределенноеЗначение("Перечисление.Saby_РолиКонтрагентов.ПустаяСсылка");
	
    Отбор = Новый Структура;
	Отбор.Вставить("Роль", Роль);
	
	НайденныеСтроки = Объект.КонтактныеДанные.НайтиСтроки(Отбор);
	Для Каждого Строка Из НайденныеСтроки Цикл 
		Строка.Роль                   = Элементы[ИмяТЧ].ОтборСтрок.Роль;
		Строка.КлючСтроки_ДанныеЮрЛиц = Элементы[ИмяТЧ].ОтборСтрок.КлючСтроки_ДанныеЮрЛиц;
	КонецЦикла;
				
КонецПроцедуры

&НаКлиенте
Функция ЕстьДанныеЮрЛица(Роль)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", ПредопределенноеЗначение("Перечисление.Saby_РолиКонтрагентов." + Роль));
	
	Возврат Объект.ДанныеЮрЛиц.НайтиСтроки(Отбор).Количество() > 0;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьВидимостьИДоступностьЭлементовНаКлиенте() Экспорт
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Функция РеквизитыДляРазделенияДатыИВремя()
	
	Массив = Новый Массив;
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, "ПодачаДатаВремя");	
		
	Возврат Массив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СвязанныеСГрузомТаблицы()
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Грузы", Новый Массив);
	
	РезультатФункции.Грузы.Добавить("Груз_АдресаПунктов");
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Функция РолиЮрЛиц(Знач РольСтрокой)
	
	РезультатФункции = Новый Массив;
	
	МассивРолей = СтрРазделить(РольСтрокой, ",");
	
	Для Каждого СтрокаЮрЛиц Из Объект.ДанныеЮрЛиц Цикл
		
		ИмяРоли = Перечисления.Saby_РолиКонтрагентов.ИмяРоли(СтрокаЮрЛиц.Роль);
		
		Если МассивРолей.Найти(ИмяРоли) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанных = Saby_ТНОбщегоНазначенияКлиентСервер.СтруктураДанныхРолей();
		ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаЮрЛиц);
		СтруктураДанных.РольСтрокой = ИмяРоли;
		
		Если ИмяРоли = "УполномоченноеЛицо" Тогда
			СтруктураДанных.ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(
				"", "", СтрокаЮрЛиц.ПолучитьИдентификатор());
		КонецЕсли;
		
		РезультатФункции.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборУполномоченныхЛиц()
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Перечисления.Saby_РолиКонтрагентов.УполномоченноеЛицо);
	
	ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
	Элементы.УполномоченныеЛицаЗаказчика.ОтборСтрок = ОтборСтрок;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборВодителей()
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Перечисления.Saby_РолиОтветственных.Водитель);
	
	ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
	Элементы.Водители.ОтборСтрок = ОтборСтрок;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияВТаблицеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, РольСтрокой)
	
	ИмяКолонки = СтрЗаменить(Поле.Имя, Элемент.Имя, "");
	
	Если ИмяКолонки <> "ОрганизацияСтрока" И ИмяКолонки <> "ОтправительСтрока" Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтрокиДанныхЮрЛиц = Неопределено;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСтроки", Элемент.ТекущиеДанные.КлючСтроки_ДанныеЮрЛиц);
	НайденныеСтроки = Объект.ДанныеЮрЛиц.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ИдентификаторСтрокиДанныхЮрЛиц = НайденныеСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(
		ИмяКолонки,
		Поле.Имя,
		ИдентификаторСтрокиДанныхЮрЛиц);
	
	ПараметрыРеквизитаФормы.ЭтоСтрокаТаблицы            = Истина;
	ПараметрыРеквизитаФормы.ИмяИсходнойТаблицы          = Элемент.Имя;
	ПараметрыРеквизитаФормы.ИдентификаторИсходнойСтроки = ВыбраннаяСтрока;
		
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(ЭтаФорма, РольСтрокой, ПараметрыРеквизитаФормы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураОтветственного(ОтветственныеЛица, РольСтрокой, ИдентификаторСтроки = Неопределено)
	
	РезультатФункции = Saby_ТНОбщегоНазначенияКлиентСервер.СтруктураОтветственногоЛица();
	
	Если ИдентификаторСтроки = Неопределено Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Роль", ПредопределенноеЗначение("Перечисление.Saby_РолиОтветственных." + РольСтрокой));
		
		НайденныеСтроки = ОтветственныеЛица.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(РезультатФункции, НайденныеСтроки[0]);
			РезультатФункции.ИдентификаторСтроки = НайденныеСтроки[0].ПолучитьИдентификатор();
		Иначе
			РезультатФункции.Роль = СтруктураПоиска.Роль;
		КонецЕсли;
	Иначе
		СтрокаОтветственного = ОтветственныеЛица.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗаполнитьЗначенияСвойств(РезультатФункции, СтрокаОтветственного);
		РезультатФункции.ИдентификаторСтроки = ИдентификаторСтроки;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ПослеРедактированияОтветственногоЛица(СтруктураОтветственногоЛица, РольСтрокой) Экспорт
	
	Если РольСтрокой = "Ответственный" Тогда
		ЭтаФорма.ОтветственныйЗаПеревозкуСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеФИО(
			СтруктураОтветственногоЛица);
		Если Не ЗначениеЗаполнено(ЭтаФорма.ОтветственныйЗаПеревозкуСтрокой) Тогда
			ЭтаФорма.ОтветственныйЗаПеревозкуСтрокой = "Заполнить";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДатуДопустимогоВремени(ИдентификаторСтроки)
	
	СтрокаПункта = Объект.АдресаПунктовВыгрузки.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтрокаПункта.ДопустимоеВремя = Дата(
		Год(СтрокаПункта.ДатаВремя),
		Месяц(СтрокаПункта.ДатаВремя),
		День(СтрокаПункта.ДатаВремя),
		Час(СтрокаПункта.ДопустимоеВремя),
		Минута(СтрокаПункта.ДопустимоеВремя),
		Секунда(СтрокаПункта.ДопустимоеВремя));
	
КонецПроцедуры

#Область ОбработкаОповещений

&НаКлиенте
Процедура ОбработатьОповещениеОбновитьДокумент(Параметр) Экспорт
	
	ЭтаФорма.ТаблицаОшибок.Очистить();
	ЭтаФорма.КоличествоОшибок = 0;
	
	ЭтаФорма.Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеВыполнитьПереход(Параметр) Экспорт
	
	ОбменДаннымиЗнП("ОбновитьАктивныйЭтап");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеЗавершениеВыполнитьДействие(Параметр) Экспорт
	
	Если Параметр.status = "error" Тогда
		
		Saby_ТНОбщегоНазначенияКлиент.ОбработатьОшибкиИзФормыВыполнитьДействие(ЭтаФорма, Объект.Ссылка, Параметр);
		
		ЭтаФорма.Прочитать();
		
	Иначе
		
		ОбменДаннымиЗнП("ОбновитьАктивныйЭтап");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработкаОповещений

#Область Ошибки

&НаКлиенте
Процедура ОбновитьДанныеПоОшибкамНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьДанныеПоОшибкамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоОшибкамНаСервере(Знач Ошибки = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ссылка", Объект.Ссылка);
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьДанныеПоОшибкам(
		ЭтаФорма,
		ДополнительныеПараметры,
		Ошибки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВнешнийВидЭлементовОшибок()
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДекорацию(Знач ПараметрыВыделенияДекорации) Экспорт
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьДекорацию(ЭтаФорма, ПараметрыВыделенияДекорации);
	
КонецПроцедуры

#КонецОбласти // Ошибки

#КонецОбласти // СлужебныеПроцедурыИФункции
