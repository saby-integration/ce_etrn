
#Область ПрограммныйИнтерфейс

// Загружает изменения по документам из списка.
//
// Параметры:
//  СтруктураПараметров - Структура - параметры загрузки
//
// Возвращаемое значение:
//   Структура - с фиксированными ключами см. в конце функции
//
Функция ЗагрузкаДокументовПоИзменениям(СтруктураПараметров) Экспорт
		
	КоличествоЗагружено = 0;
	ЗагрузкаПрошлаУспешно = Истина;
	
	// Изменения для последующей обработки
	СписокИзменений = СписокИзмененийДокументов(СтруктураПараметров);
	Если СписокИзменений <> Неопределено Тогда 
		
		// Создание новых или изменение существующих документов
		ОбработатьИзмененияДокументов(СписокИзменений, КоличествоЗагружено);
		
	КонецЕсли;
	
	Если КоличествоЗагружено <> СписокИзменений.Количество() Тогда
		ЗагрузкаПрошлаУспешно = Ложь;
	КонецЕсли;	
			
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Количество",        КоличествоЗагружено);
	СтруктураДанных.Вставить("Успешно",           ЗагрузкаПрошлаУспешно);
	СтруктураДанных.Вставить("ВсегоДокументов",   СписокИзменений.Количество());
	СтруктураДанных.Вставить("УспешныеДокументы", Новый Массив);
	
	Возврат СтруктураДанных;
	
КонецФункции

// Отправляет документ в сбис
//
// Параметры:
//  МассивДокументы - Массив - массив документов для отправки
//  context_params - Структура - параметры для отправки запросов на онлайн.
//  ДопПараметры - Структура - дополнительные параметры отправки.
//
// Возвращаемое значение:
//   Структура - с фиксированными ключами см. в конце функции
//
Функция ЗаписатьДокументВСбис(МассивДокументы, context_params, ДопПараметры = Неопределено) Экспорт
	
	КоличествоЗагружено       = 0;
	УспешныеДокументы         = Новый Массив;
	СписокДокументовСОшибками = Новый Соответствие;
	
	Если ДопПараметры <> Неопределено Тогда 
		ЭтоОтрицательныйПереход = ДопПараметры.Свойство("ДанныеТитула")
									И ДопПараметры.Свойство("ОтрицательныйПереход")
								  	И ДопПараметры.ОтрицательныйПереход;
	Иначе 
		ЭтоОтрицательныйПереход = Ложь;						
	КонецЕсли;
	
	ДопПараметры.Вставить("ЭтоОтрицательныйПереход",   ЭтоОтрицательныйПереход);
	ДопПараметры.Вставить("СписокДокументовСОшибками", СписокДокументовСОшибками); 
	ДопПараметры.Вставить("УспешныеДокументы",         УспешныеДокументы);
	ДопПараметры.Вставить("КоличествоЗагружено",       КоличествоЗагружено);
	
	Для Каждого Ссылка Из МассивДокументы Цикл
		
		Ошибки = ОшибкиФЛК(Ссылка, ДопПараметры);
		Если ЗначениеЗаполнено(Ошибки) Тогда
			СписокДокументовСОшибками.Вставить(Ссылка, Ошибки);
			Продолжить;
		КонецЕсли;
		
		Ошибки = Неопределено;
		ДопПараметры.Вставить("Ошибки", Ошибки);
		
		ОбъектОбработки = Обработки.SABY.Создать();
				
		ДанныеВложения = ВыгрузкаВложения(Ссылка, ДопПараметры, context_params, ОбъектОбработки);
		Если ДанныеВложения = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		// По динамическим титулам идем в обход общей формы выполнить действие
	    ВыполнитьПереход(ДанныеВложения, ДопПараметры, context_params, ОбъектОбработки);
		
		// Запишем данные в регистр по итогам выполнения команд
		Если ДанныеВложения.УстановитьЭтап 
			Или ДанныеВложения.УстановитьИД Тогда
			
			Параметры = Новый Структура;
			Параметры.Вставить("ИД",           ДанныеВложения.ИдСбис);
			Параметры.Вставить("АктивныйЭтап", ДанныеВложения.ТекущийЭтап);
			Параметры.Вставить("Ссылка",       Ссылка);
			Параметры.Вставить("Загрузка",     Истина);
			Параметры.Вставить("Состояние",    Неопределено);
			Параметры.Вставить("СбисИд",       Неопределено);
			
			УстановитьИДИСтатус(Параметры);
						
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьОшибокВЖурналРегистрации(СписокДокументовСОшибками);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Количество",           ДопПараметры.КоличествоЗагружено);
	СтруктураДанных.Вставить("Успешно",              Не ЗначениеЗаполнено(СписокДокументовСОшибками));
	СтруктураДанных.Вставить("ВсегоДокументов",      МассивДокументы.Количество());
	СтруктураДанных.Вставить("СписокДокументов",     СписокДокументовСОшибками);
	СтруктураДанных.Вставить("УспешныеДокументы",    УспешныеДокументы);
	СтруктураДанных.Вставить("ЭтоДинамическийТитул", ДопПараметры <> Неопределено И ДопПараметры.Свойство("ДанныеТитула"));
	
	Возврат СтруктураДанных;
		
КонецФункции

// Читает документ с онлайна
//
// Параметры:
//  МассивДокументы - Массив - массив документов для чтения.
//  context_params - Структура - параметры для отправки запросов на онлайн.
//  ДополнительныеПараметры - Структура - дополнительные параметры отправки.
//
// Возвращаемое значение:
//   Структура - с фиксированными ключами см. в конце функции
//
Функция ПрочитатьДокументИзСбис(МассивДокументы, context_params, ДополнительныеПараметры) Экспорт
	
	КоличествоЗагружено       = 0;
	УспешныеДокументы         = Новый Массив;
	СписокДокументовСОшибками = Новый Соответствие;
	
	ЗагружатьПечатнуюФорму = Константы.Saby_ХранитьПечатныеФормыВБД.Получить();
	
	Для Каждого Ссылка Из МассивДокументы Цикл
		
		Ошибки = Неопределено;
			
		Данные = РегистрыСведений.Saby_Состояние.ПрочитатьПоОбъекту(Ссылка);
		Если Данные <> Неопределено Тогда 
			ИДСбис = Данные.UID;
		Иначе 
			ИДСбис = "";
		КонецЕсли;
		
		// документа нет в сбис. данные не загрузить
		Если Не ЗначениеЗаполнено(ИДСбис) Тогда 
			ТекстОшибки = "У документа нет идентификатора Сбис, обновление данных не возможно!";					
			ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);			
			СписокДокументовСОшибками.Вставить(Ссылка, Ошибки); 
			Продолжить;                             
		КонецЕсли;
			
	    ОбъектОбработки = Обработки.SABY.Создать();
		
		Параметры = Новый Структура;
		Параметры.Вставить("Идентификатор", ИДСбис);
		Параметры.Вставить("ДопПоля",       "ДопДействия,ТекущиеЭтапы,Подстановки,Расширение");
		
		Попытка		
			Результат = ОбъектОбработки.local_helper_read_document(context_params, Параметры); 		
		Исключение
			
			ИнфоОшибки = ИнформацияОбОшибке();
			ТекстОшибки = ПричинаОшибки(ИнфоОшибки.Описание);					
			ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
			
			СписокДокументовСОшибками.Вставить(Ссылка, Ошибки); 
			Продолжить;
			
		КонецПопытки;
		
		// Загрузим что пришло....... 
		Попытка                 
										
			ПараметрыЗагрузки = Saby_ТНЗагрузкаСервер.ПараметрыЗагрузкиДанныхДокумента();
			ПараметрыЗагрузки.ИДСбис             = ИДСбис;
			ПараметрыЗагрузки.ДанныеДокумента    = Результат;
			ПараметрыЗагрузки.Ссылка             = Ссылка;
			ПараметрыЗагрузки.ИзДокумента        = ДополнительныеПараметры.ИзДокумента;
			ПараметрыЗагрузки.ТолькоАктивныйЭтап = ДополнительныеПараметры.ТолькоАктивныйЭтап;
			Если ДополнительныеПараметры.ТекущийТитул <> Неопределено Тогда
				ПараметрыЗагрузки.ТекущийТитул = ДополнительныеПараметры.ТекущийТитул;
			КонецЕсли;
			
			Saby_ТНЗагрузкаСервер.ЗагрузкаДанныхДокумента(ПараметрыЗагрузки);  
			
			УспешныеДокументы.Добавить(Ссылка);
			КоличествоЗагружено = КоличествоЗагружено + 1;
			
			Если ЗагружатьПечатнуюФорму Тогда
				ПараметрыЗагрузкиПечатнойФормы = ПараметрыЗагрузкиПечатнойФормыИзСбис(Ссылка, context_params);
				ЗагрузитьПечатнуюФормуДокументаИзСбис(ПараметрыЗагрузкиПечатнойФормы, Результат["СсылкаНаPDF"]);
			КонецЕсли;
			
		Исключение 
			
			ИнфоОшибки = ИнформацияОбОшибке();
			ТекстОшибки = ПричинаОшибки(ИнфоОшибки.Описание);					
			ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
			
			СписокДокументовСОшибками.Вставить(Ссылка, Ошибки); 
			Продолжить;
			
		КонецПопытки;		
			
	КонецЦикла;
	
	Справочники.Saby_ОпасныеГрузы.ДозаполнитьНовыеЭлементыДаннымиСОнлайна();
	Справочники.Saby_ВидыУпаковки.ДозаполнитьНовыеЭлементыДаннымиСОнлайна();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Количество",           КоличествоЗагружено);
	СтруктураДанных.Вставить("Успешно",              Не ЗначениеЗаполнено(СписокДокументовСОшибками));
	СтруктураДанных.Вставить("ВсегоДокументов",      МассивДокументы.Количество());
	СтруктураДанных.Вставить("СписокДокументов",     СписокДокументовСОшибками);
	СтруктураДанных.Вставить("УспешныеДокументы",    УспешныеДокументы);
	СтруктураДанных.Вставить("ЭтоДинамическийТитул", Ложь);
	
	Возврат СтруктураДанных;
	
КонецФункции

// Читает только конкретный титул с онлайна.
//
// Параметры:
//  МассивДокументы - Массив - массив документов для чтения.
//  context_params - Структура - параметры для отправки запросов на онлайн.
//  ДополнительныеПараметры - Структура - дополнительные параметры отправки.
//
// Возвращаемое значение:
//   Структура - с фиксированными ключами см. в конце функции
//
Функция ОбновитьАктивныйЭтапИзСбис(МассивДокументы, context_params, ДополнительныеПараметры) Экспорт
	
	ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыЧтенияДокументаИзСБИС(ДополнительныеПараметры);
	ДопПараметры.ТолькоАктивныйЭтап = Истина;
	ДопПараметры.ТекущийТитул = ДополнительныеПараметры.ТекущийТитул;
	
	Возврат ПрочитатьДокументИзСбис(МассивДокументы, context_params, ДопПараметры);
		
КонецФункции

// Обновляет данные в регистре Saby_Состояние по документу.
//
// Параметры:
//  Параметры - Структура - данные для записи
//
Процедура УстановитьИДИСтатус(Параметры) Экспорт
	
	АктивныйЭтап = Параметры.АктивныйЭтап;
	
	Если ЗначениеЗаполнено(Параметры.ИД) Тогда
		
		Если АктивныйЭтап <> Неопределено 
			И Параметры.Загрузка Тогда
			АктивныйЭтап = Перечисления.Saby_ТипТитулаЭтрН.ЗначениеПоКоду(АктивныйЭтап);
		КонецЕсли;	
				
		РегистрыСведений.Saby_Состояние.ОбновитьПоUID(
			Параметры.ИД, 
			АктивныйЭтап, 
			Параметры.Состояние, 
			Параметры.Ссылка, , ,
			Параметры.СбисИД);	
		
	КонецЕсли;

КонецПроцедуры

// Возвращает результат форматно-логического контроля перед отправкой в СБИС.
//
// Параметры:
//  Ссылка - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на документ для проверки.
//  ДопПараметры - Структура - дополнительные параметры проверки
//
// Возвращаемое значение:
//   Массив - массив структур ошибок
//
Функция ОшибкиФЛК(Ссылка, ДопПараметры = Неопределено) Экспорт
	
	Ошибки = Неопределено;
	
	// Для динамических титулов данные существуют только на форме, поэтому проверка происходит на форме
	Если ДопПараметры <> Неопределено И ДопПараметры.Свойство("ДанныеТитула") Тогда
		Возврат Ошибки;
	КонецЕсли;
	
	ДопУсловияПроверок = ДопУсловияПроверок(ДопПараметры);
	
	ТипТитула = ТекущийТипТитула(Ссылка, ДопПараметры);
	
	ДанныеДокумента = Saby_ТНВыгрузкаСервер.ЗначенияРеквизитовТранспортнойНакладной(
		ТипТитула, Ссылка, ДополнительныеДанныеПоТитулам(ТипТитула));

	Если ДанныеДокумента = Неопределено Тогда
		Возврат Ошибки;
	КонецЕсли;
	
	ДанныеДокумента.Вставить("ТекущийЭтап", ТипТитула);
	
	ПроверяемыеРеквизиты = ПроверяемыеРеквизитыЭтапа(ДанныеДокумента, ДопУсловияПроверок);
	
	СоответствиеРеквизитовОшибок = СоответствиеРеквизитовОшибок();
	
	ПроверитьЗаполненНеЗаполнен(ДанныеДокумента, ПроверяемыеРеквизиты, Ошибки, СоответствиеРеквизитовОшибок);
	
	Если Не ЗначениеЗаполнено(ТипТитула) Тогда
		
		ИмяТелефон = "Телефон";
		
		ПроверитьКонтактныеДанные(ДанныеДокумента, "Отправитель", ИмяТелефон, Ошибки, СоответствиеРеквизитовОшибок);
		ПроверитьКонтактныеДанные(ДанныеДокумента, "Получатель", ИмяТелефон, Ошибки, СоответствиеРеквизитовОшибок);
		ПроверитьКонтактныеДанные(ДанныеДокумента, "Перевозчик", ИмяТелефон, Ошибки, СоответствиеРеквизитовОшибок);
		
		Если ДанныеДокумента.Реквизиты.Владелец_Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.ДругоеЮрЛицо Тогда
			ПроверитьКонтактныеДанные(ДанныеДокумента, "ВладелецОбъекта", ИмяТелефон, Ошибки, СоответствиеРеквизитовОшибок);
		КонецЕсли;
		
		Если ДопУсловияПроверок.ПроверятьПоляОтгрузчика И Не ДопУсловияПроверок.ПроверятьПоляСОХ Тогда
			ПроверитьКонтактныеДанные(ДанныеДокумента, "Отгрузчик", ИмяТелефон, Ошибки, СоответствиеРеквизитовОшибок);
		КонецЕсли;
		
		ПроверитьЗаполнениеТранспортногоСредства(ДанныеДокумента, Ошибки, СоответствиеРеквизитовОшибок);
		
		ПроверитьЗаполнениеТипаВладения(ДанныеДокумента, Ошибки, СоответствиеРеквизитовОшибок);
		
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции

// Проверяет заполнение реквизита автомобиля
//
// Параметры:
//  ДанныеДокумента - Структура - структура данных документа
//  Ошибки - Массив - массив для накопления ошибок
//  СоответствиеРеквизитовОшибок - Соответствие - соответствие реквизитов формы и объекта.
//
Процедура ПроверитьЗаполнениеТранспортногоСредства(ДанныеДокумента, Ошибки, СоответствиеРеквизитовОшибок) Экспорт
	
	Автомобиль = Перечисления.Saby_ВидыТС.Автомобиль;
	
	НайденнаяСтрока = ДанныеДокумента.ТранспортныеСредства.Найти(Автомобиль, "Вид");
	Если НайденнаяСтрока = Неопределено Тогда
		
		СтруктураДанныхОшибки = СоответствиеРеквизитовОшибок.Получить("ТранспортныеСредства");
			ДобавитьОшибкуПользователю(
				Ошибки,
				"ТранспортноеСредствоСтрокой",
				СтруктураДанныхОшибки.Ошибка,
				СтруктураДанныхОшибки.РеквизитОбъекта,
				СтруктураДанныхОшибки.ЭлементФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение документов подтверждающих владение транспортным средством
//
// Параметры:
//  ДанныеДокумента - Структура - структура данных документа
//  Ошибки - Массив - массив для накопления ошибок
//  СоответствиеРеквизитовОшибок - Соответствие - соответствие реквизитов формы и объекта.
//
Процедура ПроверитьЗаполнениеТипаВладения(ДанныеДокумента, Ошибки, СоответствиеРеквизитовОшибок) Экспорт
	
	Для Каждого СтрокаТС Из ДанныеДокумента.ТранспортныеСредства Цикл
		
		Если Не Перечисления.Saby_ТипыВладенияТС.ТребуетПодтвержденияВладения(СтрокаТС.ТипВладения) Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьОшибки = Ложь;
		
		Если Не ЗначениеЗаполнено(СтрокаТС.ОснованияВладения) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		ОснованияВладения = ЗначениеИзСтрокиВнутр(СтрокаТС.ОснованияВладения);
		
		Если ОснованияВладения.Количество() = 0 Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Не ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьОшибкуТипаВладения(СтрокаТС, Ошибки, СоответствиеРеквизитовОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив типов доступных для заполнения на основании.
//
// Параметры:
//  ЗначенияПоУмолчанию - Булево - признак получения типов по умолчанию
//
// Возвращаемое значение:
//   Массив - массив типов выбранных для заполнения на основании.
//
Функция ТипыДляЗаполненияНаОсновании(ЗначенияПоУмолчанию = Ложь) Экспорт
	
	Если Не ЗначенияПоУмолчанию Тогда
		РезультатФункции = ПользовательскиеТипыДляЗаполненияНаОсновании();
	Иначе
		РезультатФункции = Неопределено;
	КонецЕсли;
	
	Если РезультатФункции = Неопределено Тогда
		РезультатФункции = ТипыПоУмолчаниюДляЗаполненияНаОсновании();
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Сохраняет выбранные типы документов для заполнения на основании выбранные пользователем.
//
// Параметры:
//  МассивТипов - Массив - массив типов
//
Процедура СохранитьВыбранныеТипыДляЗаполненияНаОсновании(МассивТипов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеОбщихНастроек.Сохранить("Saby", "ТипыДляЗаполненияНаОснованииДокументаТРН", МассивТипов);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет документ на основании другого документа с помощью ИНИ.
//
// Параметры:
//  Объект - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения.
//  ДокументОснование - ДокументСсылка - ссылка на документ основание.
//
// Возвращаемое значение:
//   Структура - результат заполнения на основании ИНИ
//
Функция ЗаполнитьНаОснованииINI(Объект, ДокументОснование) Экспорт
	
	ПараметрыЗаполнения = ПараметрыЗаполненияНаОснованииINI();
	
	ПараметрыЗаполнения.Объект = Объект;
	
	ПерваяИтерация = Истина;
	
	ОснованияДляЗаполнения = ДанныеОснованийДляЗаполненияНаОснованииINI(ДокументОснование);
	Для Каждого СтруктураОснования Из ОснованияДляЗаполнения Цикл
		
		ПараметрыЗаполнения.ini_name             = СтруктураОснования.ini_name;
		ПараметрыЗаполнения.Основание            = СтруктураОснования.Основание;
		ПараметрыЗаполнения.ЭтоВыбранныйДокумент = СтруктураОснования.Основание = ДокументОснование;
		ПараметрыЗаполнения.ЭтоПервоеОснование   = ПерваяИтерация;
		ПараметрыЗаполнения.РольКонтрагента      = СтруктураОснования.РольКонтрагента;
		
		РезультатФункции = РезультатЗаполненияНаОснованииINI(ПараметрыЗаполнения);
		
		Если РезультатФункции.Ошибка Тогда
			Прервать;
		КонецЕсли;
		
		ДобавитьОснованияДляЗаполнения(ОснованияДляЗаполнения, РезультатФункции);
		
		ПерваяИтерация = Ложь;
		
	КонецЦикла;
	
	Если РезультатФункции.Ошибка Тогда 					
		РезультатФункции.Вставить("ТекстЗаголовка", "Ошибка");		
		РезультатФункции.Вставить("Картинка",       БиблиотекаКартинок["Saby_Ошибка32"]); 		
	Иначе                                                        		
		РезультатФункции.Вставить("ТекстЗаголовка", "Выполнено");
		РезультатФункции.Вставить("Картинка",       БиблиотекаКартинок["Saby_Успешно32"]);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции	

// Возвращает дату последней успешной загрузки.
//
// Возвращаемое значение:
//   Дата - дата последней успешной загрузки.
//
Функция ПоследнееУспешноЗагруженноеИзменение() Экспорт
	
	ДатаЗагрузки = Неопределено;
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ
	 |	МАКСИМУМ(Saby_ТранспортнаяНакладная.ДатаИзменения) КАК ДатаИзменения
	 |ИЗ
	 |	Документ.Saby_ТранспортнаяНакладная КАК Saby_ТранспортнаяНакладная";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.ДатаИзменения) Тогда 
			ДатаЗагрузки = Выборка.ДатаИзменения;              
		КонецЕсли;
	КонецЕсли;	
			
	Возврат ДатаЗагрузки;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

// Загружает печатную форму из СБИС.
//
// Параметры:
//  ПараметрыЗагрузки - Структура - параметры загрузки
//  URLФайлаВСбис - Строка - адрес печатной формы pdf
//  ВзятьИзБазыЕслиЕсть - Булево - признак получения печатной формы из базы.
//
// Возвращаемое значение:
//   СправочникСсылка.Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы - присоединенный файл печатной формы.
//
Функция ЗагрузитьПечатнуюФормуДокументаИзСбис(ПараметрыЗагрузки, URLФайлаВСбис = Неопределено,
		ВзятьИзБазыЕслиЕсть = Ложь) Экспорт
	
	СтруктураПрисоединенногоФайла = СтруктураПрисоединенногоФайла(ПараметрыЗагрузки);
	
	Если ВзятьИзБазыЕслиЕсть И ЗначениеЗаполнено(СтруктураПрисоединенногоФайла.СсылкаНаПрисоединенныйФайл) Тогда
		Возврат СтруктураПрисоединенногоФайла.СсылкаНаПрисоединенныйФайл;
	КонецЕсли;
	
	ВременноеХранилище = АдресДвоичныхДанныхФайлаЭТрН(ПараметрыЗагрузки, URLФайлаВСбис);
	
	Если Не ЗначениеЗаполнено(ВременноеХранилище) Тогда
		Возврат Справочники.Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы.ПустаяСсылка();
	КонецЕсли;
	
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	ПараметрыФайла.Автор              = Пользователи.АвторизованныйПользователь();
	ПараметрыФайла.ВладелецФайлов     = ПараметрыЗагрузки.СсылкаНаДокумент;
	ПараметрыФайла.ИмяБезРасширения   = СтруктураПрисоединенногоФайла.ИмяБезРасширения;
	ПараметрыФайла.РасширениеБезТочки = СтруктураПрисоединенногоФайла.РасширениеБезТочки;
	
	Возврат РаботаСФайлами.ДобавитьФайл(
		ПараметрыФайла,
		ВременноеХранилище, , ,
		СтруктураПрисоединенногоФайла.СсылкаНаПрисоединенныйФайл);
	
КонецФункции

// Возвращает двоичные данные файла печатной формы из СБИС.
//
// Параметры:
//  ПараметрыЗагрузки - Структура - параметры загрузки
//  URLФайлаВСбис - Строка - адрес печатной формы pdf
//
// Возвращаемое значение:
//   Строка - адрес двоичных данных файла печатной формы.
//
Функция АдресДвоичныхДанныхФайлаЭТрН(ПараметрыЗагрузки, URLФайлаВСбис = Неопределено) Экспорт
	
	РезультатФункции = Неопределено;
	
	Если URLФайлаВСбис = Неопределено Тогда
		URLФайлаВСбис = СсылкаНаPDF(ПараметрыЗагрузки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(URLФайлаВСбис) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = ПараметрыЗагрузки.ОбъектОбработки.local_helper_download_from_link(
		ПараметрыЗагрузки.context_params,
		URLФайлаВСбис);
	
	РезультатФункции = ПоместитьВоВременноеХранилище(
		ДвоичныеДанныеФайла,
		ПараметрыЗагрузки.УникальныйИдентификаторФормы);
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает параметры для загрузки печатной формы из СБИС.
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.Saby_ТранспортнаяНакладная - ссылка на документ
//  context_params - Структура - параметры для отправки запросов на онлайн.
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор формы,
//    в хранилище которой сохраняется печатная форма.
//
// Возвращаемое значение:
//   Структура - структура параметров.
//
Функция ПараметрыЗагрузкиПечатнойФормыИзСбис(Знач СсылкаНаДокумент = Неопределено,
		context_params = Неопределено, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("СсылкаНаДокумент",             СсылкаНаДокумент);
	РезультатФункции.Вставить("УИДСбис",                      "");
	РезультатФункции.Вставить("Номер",                        "");
	РезультатФункции.Вставить("Дата",                         Дата(1, 1, 1, 0, 0, 0));
	РезультатФункции.Вставить("ОбъектОбработки",              Обработки.SABY.Создать());
	РезультатФункции.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	РезультатФункции.Вставить("СписокДокументов",             Неопределено);
	
	Если context_params = Неопределено Тогда
		РезультатФункции.Вставить("context_params", Saby_Core.ПроверитьНаличиеПараметровПодключения());
	Иначе
		РезультатФункции.Вставить("context_params", context_params);
	КонецЕсли;
	
	Если СсылкаНаДокумент <> Неопределено Тогда
		ЗаполнитьПараметрыЗагрузкиПечатнойФормыПоСсылке(РезультатФункции);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Проверяет заполненность реквизитов документа.
//
// Параметры:
//  ДанныеДокумента - Структура - структура реквизитов и табличных часте документа
//  МассивПроверяемыхРеквизитов - Массив - массив строк наименований реквизитов для проверки
//    Для реквизитов табличных частей реквизиты указываются через точку. Сначала имя табличной части а потом реквизит.
//  Ошибки - Массив - массив структур ошибок. Расхождения по реквизитам.
//  СоответствиеРеквизитовОшибок - Соответствие - в качестве ключей указывается имена реквизитов,
//    а значением является структура данных см. функцию СоответствиеРеквизитовОшибок()
//
Процедура ПроверитьЗаполненНеЗаполнен(ДанныеДокумента, МассивПроверяемыхРеквизитов,
		Ошибки, СоответствиеРеквизитовОшибок) Экспорт
	
	Перем ПроверяемыеРеквизитыТЧ;
	
	ТабличныеЧасти = Новый Структура;
	
	// Проверка реквизитов объекта и заполнение структуры по реквизитам табличных частей.
	Для Каждого Реквизит Из МассивПроверяемыхРеквизитов Цикл
		
		ПозицияТочки = СтрНайти(Реквизит, ".");
		
		Если ПозицияТочки > 0 Тогда 
			// В случае если указан реквизит табличной части			
			ПроверкаРеквизитаТабличнойЧасти(Реквизит, ПроверяемыеРеквизитыТЧ, ПозицияТочки, ТабличныеЧасти);				
		Иначе 
			// В случае если указан реквизит объекта
			ПроверкаРеквизитаОбъекта(Реквизит, ДанныеДокумента, СоответствиеРеквизитовОшибок, Ошибки);			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка реквизитов в табличных частях
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		ИмяТабличнойЧасти = ТабличнаяЧасть.Ключ;
		ТЧ = ДанныеДокумента[ТабличнаяЧасть.Ключ];
		МассивРеквизитов = ТабличнаяЧасть.Значение;
		
		// Цикл по всем строкам табличной части.
		Для ИндексСтроки = 0 По ТЧ.Количество() - 1 Цикл
			
			// Цикл по всем проверяемым реквизитам для текущей табличной части.
			Для НомерРеквизита = 0 По МассивРеквизитов.Количество() - 1 Цикл
				
				ИмяРеквизита = МассивРеквизитов[НомерРеквизита];
				
				ИмяТЧ = ПолучитьИмяТЧОтметок(ИмяТабличнойЧасти, ТЧ[ИндексСтроки], ДанныеДокумента);
				
				СтруктураДанныхОшибки = СоответствиеРеквизитовОшибок.Получить(ИмяТЧ + "." + ИмяРеквизита);
				
				Если Не ЗначениеЗаполнено(ТЧ[ИндексСтроки][ИмяРеквизита]) Тогда
					
					ПолеОшибки = СтрШаблон(
						"Объект.%1",
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, ИндексСтроки + 1, ИмяРеквизита));

					ДобавитьОшибкуПользователю(
						Ошибки,
						ПолеОшибки,
						СтруктураДанныхОшибки.Ошибка,
						СтруктураДанныхОшибки.РеквизитОбъекта,
						СтруктураДанныхОшибки.ЭлементФормы,
						ИндексСтроки);
					
				КонецЕсли;				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивПроверяемыхРеквизитов.Очистить();
	
КонецПроцедуры

// Возвращает соответствие имен реквизитов и структур данных для отображения ошибки ФЛК.
//
// Возвращаемое значение:
//   Соответствие - ключами являются имена реквизитов, а значениями структура данных по ошибке.
//     Структура данных состоит из
//       * РеквизитОбъекта - Строка - имя реквизита объекта
//       * ЭлементФормы - Строка - имя элемента формы, в котором выводится реквизит.
//       * Ошибка - Строка - описание ошибки понятное для пользователя.
//
Функция СоответствиеРеквизитовОшибок() Экспорт
	
	РезультатФункции = Новый Соответствие;
	
	ТабДокОшибок = ПолучитьМакет("ФЛК");
	
	НомерСтроки = 2;
	Пока ЗначениеЗаполнено(ТабДокОшибок.Область(НомерСтроки, 1).Текст) Цикл
		
		РеквизитОбъекта = СокрЛП(ТабДокОшибок.Область(НомерСтроки, 1, НомерСтроки, 1).Текст);
		ЭлементФормы    = СокрЛП(ТабДокОшибок.Область(НомерСтроки, 2, НомерСтроки, 2).Текст);
		Ошибка          = СокрЛП(ТабДокОшибок.Область(НомерСтроки, 3, НомерСтроки, 3).Текст);
		
		СтруктураДанныхОшибки = Новый Структура;
		СтруктураДанныхОшибки.Вставить("РеквизитОбъекта", РеквизитОбъекта);
		СтруктураДанныхОшибки.Вставить("ЭлементФормы",    ЭлементФормы);
		СтруктураДанныхОшибки.Вставить("Ошибка",          Ошибка);
		
		РезультатФункции.Вставить(РеквизитОбъекта, СтруктураДанныхОшибки);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#Область Команды

// Заполняет список команд печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти // Команды

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ДанныеЭтапа(СоответствиеДанных)
	
	Возврат СоответствиеДанных["Этап"];
	
КонецФункции

#Область ЗагрузкаИзменений

Функция СписокИзмененийДокументов(СтруктураПараметров)
	
	РезультатФункции = Новый Соответствие;
	
	ПараметрыПолученияИзменений = ПараметрыПолученияИзменений(СтруктураПараметров);
	
	ЕстьИзменения = Истина;
	Пока ЕстьИзменения Цикл
		
		ИзмененияПоДокументам = СледующиеИзмененияДокументов(ПараметрыПолученияИзменений, ЕстьИзменения);
		
		ИдентификаторПоследнегоСобытия = "";
		Для Каждого Изменение Из ИзмененияПоДокументам Цикл
			
			ДобавитьИзменение(РезультатФункции, Изменение, ИдентификаторПоследнегоСобытия);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ИдентификаторПоследнегоСобытия) Тогда
			ПараметрыПолученияИзменений.Параметры.Вставить("ИдентификаторСобытия", ИдентификаторПоследнегоСобытия);
		Иначе
			ПараметрыПолученияИзменений.Параметры.Удалить("ИдентификаторСобытия");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПараметрыПолученияИзменений(СтруктураПараметров)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ОбъектОбработки", Обработки.SABY.Создать());
	РезультатФункции.Вставить("context_params",  СтруктураПараметров.context_params);
	РезультатФункции.Вставить("Параметры",       Новый Структура);
	
	РазмерСтраницы = 30;
	
	Навигация = Новый Структура;
	Навигация.Вставить("РазмерСтраницы", Формат(РазмерСтраницы, "ЧГ=0"));
	
	РезультатФункции.Параметры.Вставить("Навигация", Навигация);
	
	Если СтруктураПараметров.ДопПараметры.Свойство("Начало")
		И ЗначениеЗаполнено(СтруктураПараметров.ДопПараметры.Начало) Тогда
		
		ДатаС = СтруктураПараметров.ДопПараметры.Начало;
		ПараметрДатаС = Формат(ДатаС, "ДФ='dd.MM.yyyy ЧЧ.мм.сс'");
		РезультатФункции.Параметры.Вставить("ДатаВремяС", ПараметрДатаС);
		
	КонецЕсли;
	
	Если СтруктураПараметров.ДопПараметры.Свойство("Окончание")
		И ЗначениеЗаполнено(СтруктураПараметров.ДопПараметры.Окончание) Тогда
		
		ДатаПо = СтруктураПараметров.ДопПараметры.Окончание;
		ПараметрДатаПо = Формат(ДатаПо, "ДФ='dd.MM.yyyy ЧЧ.мм.сс'");
		РезультатФункции.Параметры.Вставить("ДатаВремяПо", ПараметрДатаПо);
		
	КонецЕсли;
	
	РезультатФункции.Параметры.Вставить("Тип",                "ConsignmentNote");
	РезультатФункции.Параметры.Вставить("ДопПоля",            "ДопДействия,ТекущиеЭтапы,Подстановки");
    РезультатФункции.Параметры.Вставить("ПолныйСертификатЭП", "Нет");
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СледующиеИзмененияДокументов(ПараметрыПолученияИзменений, ЕстьИзменения)
	
	РезультатФункции = Новый Массив;
	
	Попытка                                                                                      
		
		СоответствиеИзменений = ПараметрыПолученияИзменений.ОбъектОбработки.local_helper_read_changes(
			ПараметрыПолученияИзменений.context_params, ПараметрыПолученияИзменений.Параметры);
		
		РезультатФункции = СоответствиеИзменений["Документ"];
		ЕстьИзменения    = Булево(СоответствиеИзменений["Навигация"]["ЕстьЕще"]);
		
	Исключение
		
		ЕстьИзменения = Ложь;
		
		ИнфОбОшибке = ИнформацияОбОшибке();		
		Описание    = "Ошибка загрузки из Сбис";
			
		Saby_ТНОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации(Неопределено, Описание, ИнфОбОшибке);
		
	КонецПопытки;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДобавитьИзменение(Изменения, ИзменениеСОнлайна, ПоследнийИдентификатор)
	
	ДанныеПодстановок = ИзменениеСОнлайна["Подстановки"];
	Если Не ЗначениеЗаполнено(ДанныеПодстановок) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторДокумента = ИзменениеСОнлайна["Идентификатор"];
	
	// Изменения с онлайна приходят не сгруппированные по документу.
	// Поэтому группируем их по идентификатору документа
	ИзмененияПоДокументу = Изменения.Получить(ИдентификаторДокумента);
	Если ИзмененияПоДокументу = Неопределено Тогда
		
		ИзмененияПоДокументу = Новый Соответствие;
		ИзмененияПоДокументу.Вставить("Подстановки",  Новый Соответствие);
		ИзмененияПоДокументу.Вставить("ИдТитулов",    Новый Соответствие);
		ИзмененияПоДокументу.Вставить("Номер",        ИзменениеСОнлайна["Номер"]);
		ИзмененияПоДокументу.Вставить("Название",     ИзменениеСОнлайна["Название"]);
		ИзмененияПоДокументу.Вставить("Направление",  ИзменениеСОнлайна["Направление"]);
		ИзмененияПоДокументу.Вставить("Состояние",    ИзменениеСОнлайна["Состояние"]);
		ИзмененияПоДокументу.Вставить("Событие",      Новый Массив);
		ИзмененияПоДокументу.Вставить("ТекущиеЭтапы", ИзменениеСОнлайна["ТекущиеЭтапы"]);
		ИзмененияПоДокументу.Вставить("ДопДействия",  ИзменениеСОнлайна["ДопДействия"]);
		
		Изменения.Вставить(ИдентификаторДокумента, ИзмененияПоДокументу);
		
	КонецЕсли;
	
	Если ДанныеПодстановок <> Неопределено Тогда
		Для Каждого Подстановки Из ДанныеПодстановок Цикл
			ДобавитьПодстановкуТитула(ИзмененияПоДокументу, Подстановки.Ключ, Подстановки.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеСобытия = ИзменениеСОнлайна["Событие"];
	Если ДанныеСобытия <> Неопределено Тогда
		Для Каждого Событие Из ДанныеСобытия Цикл
			ДобавитьСобытие(ИзмененияПоДокументу, Событие);
			ПоследнийИдентификатор = Событие["Идентификатор"];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПодстановкуТитула(ИзмененияПоДокументу, КодТитулаОнлайна, ЗначенияПодстановок)
	
	Титул = Перечисления.Saby_ТипТитулаЭтрН.ЗначениеПоКоду(КодТитулаОнлайна);
	ПредставленияТитула = Перечисления.Saby_ТипТитулаЭтрН.ПредставленияТитула(Титул);
	
	Для Каждого ДанныеТитула Из ЗначенияПодстановок Цикл
		
		УдалитьНеиспользуемуюИнформациюВПодстановках(ДанныеТитула, Титул, ПредставленияТитула);
		
		МассивТитулов = ИзмененияПоДокументу["Подстановки"][КодТитулаОнлайна];
		Если МассивТитулов = Неопределено Тогда
			МассивТитулов = Новый Массив;
			ИзмененияПоДокументу["Подстановки"].Вставить(КодТитулаОнлайна, МассивТитулов);
		КонецЕсли;
		
		ИндексТитула = ИзмененияПоДокументу["ИдТитулов"][ДанныеТитула["ИдентификаторВложенияТитула"]];
		Если ИндексТитула = Неопределено Тогда
			МассивТитулов.Добавить(ДанныеТитула);
			ИндексТитула = МассивТитулов.ВГраница();
			ИзмененияПоДокументу["ИдТитулов"].Вставить(ДанныеТитула["ИдентификаторВложенияТитула"], ИндексТитула);
		Иначе
			МассивТитулов[ИндексТитула] = ДанныеТитула;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНеиспользуемуюИнформациюВПодстановках(ДанныеТитула, Титул, ПредставленияТитула)
	
	ДанныеТитула.Вставить(
		"ДатаВложенияТитула",
		Saby_ТНОбщегоНазначенияСервер.ДатаВложения(ДанныеТитула, Титул));
		
	ДанныеТитула.Вставить(
		"ИдентификаторВложенияТитула",
		Saby_ТНОбщегоНазначенияСервер.ИдентификаторВложения(ДанныеТитула, Титул));
	
	Если ДанныеТитула[ПредставленияТитула.КодТитула] <> Неопределено Тогда
		ДанныеТитула.Вставить(ПредставленияТитула.КодТитула, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСобытие(ИзмененияПоДокументу, Событие)
	
	СобытиеСоответствие = Новый Соответствие;
	СобытиеСоответствие.Вставить("ДатаВремя",     Дата(1, 1, 1));
	СобытиеСоответствие.Вставить("Идентификатор", "");
	
	ЗаполнитьЗначенияСвойств(СобытиеСоответствие, Событие);
	
	ИзмененияПоДокументу["Событие"].Добавить(СобытиеСоответствие);
	
КонецПроцедуры

Процедура ОбработатьИзмененияДокументов(СписокИзменений, Количество)
	
	// ToDo: Загружаем все что пришло
	// если документ уже есть можно загружать данные по титулам
	// учесть что могли быть выполнены доп операции
	
	ЗагружатьПечатнуюФорму = Константы.Saby_ХранитьПечатныеФормыВБД.Получить();
	ПараметрыЗагрузкиПечатнойФормы = ПараметрыЗагрузкиПечатнойФормыИзСбис();
	
	Для Каждого Изменение Из СписокИзменений Цикл 
				
		Попытка 
			
			ПараметрыЗагрузки = Saby_ТНЗагрузкаСервер.ПараметрыЗагрузкиДанныхДокумента();
			ПараметрыЗагрузки.ИДСбис          = Изменение.Ключ;
			ПараметрыЗагрузки.ДанныеДокумента = Изменение.Значение;
			
			СсылкаДокумент = Saby_ТНЗагрузкаСервер.ЗагрузкаДанныхДокумента(ПараметрыЗагрузки);  
			Если ЗначениеЗаполнено(СсылкаДокумент) Тогда 
				Количество = Количество + 1;
				Если ЗагружатьПечатнуюФорму Тогда
					ПараметрыЗагрузкиПечатнойФормы.СсылкаНаДокумент = СсылкаДокумент;
					ЗаполнитьПараметрыЗагрузкиПечатнойФормыПоСсылке(ПараметрыЗагрузкиПечатнойФормы);
					ЗагрузитьПечатнуюФормуДокументаИзСбис(ПараметрыЗагрузкиПечатнойФормы, Изменение.Значение["СсылкаНаPDF"]);
				КонецЕсли;
			КонецЕсли;
					
		Исключение
			
			Описание = "Ошибка загрузки из Сбис";
			Текст    = "Документ " + Изменение.Значение["Название"] + " (id:" + Изменение.Ключ + ")";
			
			Saby_ТНОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации(Неопределено, Описание, Текст);
			Продолжить;
			
		КонецПопытки;
				
	КонецЦикла;
	
	Справочники.Saby_ОпасныеГрузы.ДозаполнитьНовыеЭлементыДаннымиСОнлайна();
	Справочники.Saby_ВидыУпаковки.ДозаполнитьНовыеЭлементыДаннымиСОнлайна();
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаИзменений

#Область ФЛК

Функция ТекущийТипТитула(СсылкаНаДокумент, ДопПараметры = Неопределено)
	
	ДанныеСостояния = РегистрыСведений.Saby_Состояние.ПрочитатьПоОбъекту(СсылкаНаДокумент);
	Если ДопПараметры <> Неопределено И ДопПараметры.Свойство("Этап") Тогда
		РезультатФункции = Перечисления.Saby_ТипТитулаЭтрН.ЗначениеПоПредставлению(ДопПараметры.Этап);
	ИначеЕсли ДанныеСостояния <> Неопределено Тогда 	
		РезультатФункции = Перечисления.Saby_ТипТитулаЭтрН.ЗначениеПоПредставлению(ДанныеСостояния.АктивныйЭтап);
	Иначе
		РезультатФункции = Неопределено;
	КонецЕсли;
	
	Если РезультатФункции = Неопределено Тогда
		РезультатФункции = Перечисления.Saby_ТипТитулаЭтрН.ПустаяСсылка();
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#Область ПроверяемыеРеквизиты

Функция ДопУсловияПроверок(ДопПараметры = Неопределено)
	
	ПроверятьПоляСОХ = ДопПараметры <> Неопределено
		И ДопПараметры.Свойство("ПроверятьСОХ")
		И ДопПараметры.ПроверятьСОХ;
		
	ПроверятьПоляОтгрузчика = ДопПараметры <> Неопределено
		И ДопПараметры.Свойство("ПроверятьПоляОтгрузчика")
		И ДопПараметры.ПроверятьПоляОтгрузчика;
		
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ПроверятьПоляСОХ",        ПроверятьПоляСОХ);
	РезультатФункции.Вставить("ПроверятьПоляОтгрузчика", ПроверятьПоляОтгрузчика);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПроверяемыеРеквизитыЭтапа(ДанныеДокумента, ДопУсловияПроверок)
	
	ПроверяемыеРеквизиты = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ДанныеДокумента.ТекущийЭтап) Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаПогрузка(ПроверяемыеРеквизиты, ДанныеДокумента, ДопУсловияПроверок);
	Иначе
		Если ДанныеДокумента.ТекущийЭтап = Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза Тогда
			ДополнитьПроверяемыеРеквизитыЭтапаПриемкаГруза(ПроверяемыеРеквизиты);
		КонецЕсли;
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("Отметки.ДатаВремя");
	ПроверяемыеРеквизиты.Добавить("Отметки.Описание");
	ПроверяемыеРеквизиты.Добавить("Акты.Документ");
	ПроверяемыеРеквизиты.Добавить("Штрафы.Расчет");
	
	Возврат ПроверяемыеРеквизиты;
	
КонецФункции

Процедура ДополнитьПроверяемыеРеквизитыЭтапаПогрузка(ПроверяемыеРеквизиты, ДанныеДокумента, ДопУсловияПроверок)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	ПроверяемыеРеквизиты.Добавить("Направление");
	ПроверяемыеРеквизиты.Добавить("Отправитель");
	
	Если ДопУсловияПроверок.ПроверятьПоляСОХ Тогда
		ПроверяемыеРеквизиты.Добавить("Составитель");
		ПроверяемыеРеквизиты.Добавить("Составитель_НаОснованииДокумент");
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("Получатель");
	ПроверяемыеРеквизиты.Добавить("Перевозчик");
	ПроверяемыеРеквизиты.Добавить("Погрузка_Адрес");
	ПроверяемыеРеквизиты.Добавить("Отправитель_АдресДоставки");
	ПроверяемыеРеквизиты.Добавить("Отправитель_ЗаявкаНомер");
	ПроверяемыеРеквизиты.Добавить("Отправитель_ЗаявкаДата");
	
	ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.РегистрационныйНомер");
	ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.Грузоподъемность");
	ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.Вместимость");
	
	ПроверяемыеРеквизиты.Добавить("Водители");
	
	Если ЗначениеЗаполнено(РеквизитыОбъекта.Отправитель_Экспедитор) И РеквизитыОбъекта.Отправитель_Экспедитор Тогда
		ПроверяемыеРеквизиты.Добавить("Заказчик");
		ПроверяемыеРеквизиты.Добавить("Заказчик_Договор");
	КонецЕсли;
	
	Если РеквизитыОбъекта.Владелец_Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.Неизвестен Тогда
		ПроверяемыеРеквизиты.Добавить("Владелец_НеизвестенПричина");
	КонецЕсли;
	
	Если ДанныеДокумента.ТекущийЭтап = Перечисления.Saby_ТипТитулаЭтрН.ПустаяСсылка()
		И РеквизитыОбъекта.Владелец_Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.ДругоеЮрЛицо Тогда
		ПроверяемыеРеквизиты.Добавить("ВладелецОбъекта");
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("Грузы");
	ПроверяемыеРеквизиты.Добавить("Грузы.Тип");
	ПроверяемыеРеквизиты.Добавить("Грузы.Наименование");
	ПроверяемыеРеквизиты.Добавить("Грузы.Состояние");
	ПроверяемыеРеквизиты.Добавить("Грузы.Количество");
	ПроверяемыеРеквизиты.Добавить("Грузы.МассаБрутто");
	ПроверяемыеРеквизиты.Добавить("Грузы.СпособУпаковки");
	ПроверяемыеРеквизиты.Добавить("Грузы.ВидТары");
	
	Если ЗначениеЗаполнено(ДанныеДокумента.Грузы) Тогда		
		Отбор = Новый Структура("Тип", Перечисления.Saby_ТипГруза.Контейнер);
		ЕстьТипГрузаКонтейнер = ДанныеДокумента.Грузы.НайтиСтроки(Отбор).Количество() > 0;
		Если ЕстьТипГрузаКонтейнер Тогда
			ПроверяемыеРеквизиты.Добавить("Контейнеры");
			ПроверяемыеРеквизиты.Добавить("Контейнеры.Номер");
			ПроверяемыеРеквизиты.Добавить("Контейнеры.Количество");
			ПроверяемыеРеквизиты.Добавить("Отправитель_СопроводительнаяВедомость");
		КонецЕсли;
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("Погрузка_КоличествоМест");
	ПроверяемыеРеквизиты.Добавить("Погрузка_Масса");
	ПроверяемыеРеквизиты.Добавить("Погрузка_МассаМетодРасчета");
	
	Если ДопУсловияПроверок.ПроверятьПоляОтгрузчика Тогда
		Если Не ДопУсловияПроверок.ПроверятьПоляСОХ Тогда
			ПроверяемыеРеквизиты.Добавить("Отгрузчик");
		КонецЕсли;
		ПроверяемыеРеквизиты.Добавить("Отгрузка_НаОснованииДокумент");
		ПроверяемыеРеквизиты.Добавить("Отгрузка_ОтветственныйСтруктура");
		ПроверяемыеРеквизиты.Добавить("Отгрузка_ОтветственныйДолжность");
		ПроверяемыеРеквизиты.Добавить("Отгрузка_ОтветственныйНаОсновании");
	КонецЕсли;
	
	РольПолучатель = Перечисления.Saby_РолиКонтрагентов.Получатель;
	Если РеквизитыОбъекта.ИнициаторПереадресации = РольПолучатель Тогда
		ПроверяемыеРеквизиты.Добавить("ИнициаторПереадресацииПодтверждение");
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("Отправитель_ДоставитьДо");
	ПроверяемыеРеквизиты.Добавить("Погрузка_ДатаВремя");
	ПроверяемыеРеквизиты.Добавить("Погрузка_ДатаВремяПрибыл");
	ПроверяемыеРеквизиты.Добавить("Погрузка_ДатаВремяУбыл");
	
	ПроверяемыеРеквизиты.Добавить("Маркировки.Значение");
	ПроверяемыеРеквизиты.Добавить("ОпасныеГрузы.ОпасныйГруз");
	
	ПроверяемыеРеквизиты.Добавить("СпецРазрешения.Номер");
	ПроверяемыеРеквизиты.Добавить("СпецРазрешения.Дата");
	ПроверяемыеРеквизиты.Добавить("СпецРазрешения.Срок");
	
	ПроверяемыеРеквизиты.Добавить("КонтактныеДанные.Тип");
	ПроверяемыеРеквизиты.Добавить("КонтактныеДанные.Значение");
	
	ПроверяемыеРеквизиты.Добавить("ПутевыеЛисты.Документ");
	
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаПриемкаГруза(ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Выгрузка_КоличествоМест");
	ПроверяемыеРеквизиты.Добавить("Выгрузка_МассаБрутто");
	ПроверяемыеРеквизиты.Добавить("Выгрузка_МассаМетодРасчета");
	ПроверяемыеРеквизиты.Добавить("Выгрузка_Состояние");
	
	ПроверяемыеРеквизиты.Добавить("Выгрузка_ДатаВремяПрибыл");
	ПроверяемыеРеквизиты.Добавить("Выгрузка_ДатаВремяУбыл");
	
КонецПроцедуры 

Функция ДополнительныеДанныеПоТитулам(ТипТитула)
	
	РезультатФункции = Новый Соответствие;
	
	ДопДанные = Новый Структура;
	ДопДанные.Вставить("Реквизиты", Новый Массив);
	ДопДанные.Вставить("Таблицы",   Новый Массив);
	
	Если Не ЗначениеЗаполнено(ТипТитула) Тогда
		
		ДопДанные.Реквизиты.Добавить("Направление");
		ДопДанные.Реквизиты.Добавить("ТипВладенияТС");
		
	КонецЕсли;
	
	РезультатФункции.Вставить(ТипТитула, ДопДанные);
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ПроверяемыеРеквизиты

Процедура ПроверкаРеквизитаТабличнойЧасти(Реквизит, ПроверяемыеРеквизитыТЧ, ПозицияТочки, ТабличныеЧасти)
	
	ДлинаСтроки       = СтрДлина(Реквизит);
	ИмяТабличнойЧасти = Лев(Реквизит, ПозицияТочки - 1);
	ИмяРеквизита      = Прав(Реквизит, ДлинаСтроки - ПозицияТочки);
	
	// Сохранение проверяемого реквизита табличной части в структуру
	Если НЕ ТабличныеЧасти.Свойство(ИмяТабличнойЧасти, ПроверяемыеРеквизитыТЧ) Тогда
		ПроверяемыеРеквизитыТЧ = Новый Массив;
		ТабличныеЧасти.Вставить(ИмяТабличнойЧасти, ПроверяемыеРеквизитыТЧ);
	КонецЕсли;
	
	ПроверяемыеРеквизитыТЧ.Добавить(ИмяРеквизита);
	
КонецПроцедуры

Процедура ПроверкаРеквизитаОбъекта(Реквизит, ДанныеДокумента, СоответствиеРеквизитовОшибок, Ошибки)
	
	Если ДанныеДокумента.Реквизиты.Свойство(Реквизит) Тогда
		ЗначениеРеквизитаЗаполнено = ЗначениеЗаполнено(ДанныеДокумента.Реквизиты[Реквизит]);
	Иначе
		ЗначениеРеквизитаЗаполнено = ЗначениеЗаполнено(ДанныеДокумента[Реквизит]);
	КонецЕсли;
	
	Если Не ЗначениеРеквизитаЗаполнено Тогда
		
		СтруктураДанныхОшибки = СоответствиеРеквизитовОшибок.Получить(Реквизит);
		
		ДобавитьОшибкуПользователю(
		Ошибки,
		СтрШаблон("Объект.%1", Реквизит),
		СтруктураДанныхОшибки.Ошибка,
		СтруктураДанныхОшибки.РеквизитОбъекта,
		СтруктураДанныхОшибки.ЭлементФормы);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьКонтактныеДанные(ДанныеДокумента, Роль, Тип, Ошибки, СоответствиеРеквизитовОшибок)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Перечисления.Saby_РолиКонтрагентов[Роль]);
	Отбор.Вставить("Тип",  Перечисления.ТипыКонтактнойИнформации[Тип]);
	
	ИмяРеквизита = Роль + "_" + Тип;
	
	СтруктураДанныхОшибки = СоответствиеРеквизитовОшибок.Получить(ИмяРеквизита);
	
	НайденныеСтроки = ДанныеДокумента.КонтактныеДанные.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		ДобавитьОшибкуПользователю(
			Ошибки, 
			ИмяРеквизита, 
			СтруктураДанныхОшибки.Ошибка,
			СтруктураДанныхОшибки.РеквизитОбъекта,
			СтруктураДанныхОшибки.ЭлементФормы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстДляОднойОшибки, РеквизитОбъекта = "",
		ЭлементФормы = "", ИндексСтроки = 0)
	
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Структура;
		Ошибки.Вставить("СписокОшибок", Новый Массив);
		Ошибки.Вставить("ГруппыОшибок", Новый Соответствие);
	КонецЕсли;
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("ПолеОшибки",          ПолеОшибки);
	Ошибка.Вставить("ТекстДляОднойОшибки", ТекстДляОднойОшибки);
	Ошибка.Вставить("РеквизитОбъекта",     РеквизитОбъекта);
	Ошибка.Вставить("ЭлементФормы",        ЭлементФормы);
	Ошибка.Вставить("ИндексСтроки",        ИндексСтроки);
	
	Ошибки.СписокОшибок.Добавить(Ошибка);
	
КонецПроцедуры

Функция ПолучитьИмяТЧОтметок(ИмяТабличнойЧасти, СтрокаТабличнойЧасти, ДанныеДокумента)
    
	РезультатФункции = ИмяТабличнойЧасти;
	
	ТабличныеЧастиОтметок = Новый Массив;
	ТабличныеЧастиОтметок.Добавить("Отметки");
	ТабличныеЧастиОтметок.Добавить("Акты");
	ТабличныеЧастиОтметок.Добавить("Штрафы");
	
	Если ТабличныеЧастиОтметок.Найти(ИмяТабличнойЧасти) = Неопределено Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	СтрокаДляПроверки = Неопределено;
	Если ИмяТабличнойЧасти = "Отметки" Тогда
		СтрокаДляПроверки = СтрокаТабличнойЧасти;
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("КлючСтроки", СтрокаТабличнойЧасти.КлючСтроки_Отметки);
		
		СтрокиОтметок = ДанныеДокумента.Отметки.НайтиСтроки(Отбор);
		Если СтрокиОтметок.Количество() > 0 Тогда
			СтрокаДляПроверки = СтрокиОтметок[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоОтметкиВыгрузки(СтрокаДляПроверки) Тогда
		РезультатФункции = РезультатФункции + "_Выгрузка";
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ЭтоОтметкиВыгрузки(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Роль = Перечисления.Saby_РолиКонтрагентов.Получатель Тогда
		Возврат Истина;
	ИначеЕсли СтрокаТабличнойЧасти.Роль = Перечисления.Saby_РолиКонтрагентов.Перевозчик Тогда
		Возврат СтрокаТабличнойЧасти.Этап = Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза
			Или СтрокаТабличнойЧасти.Этап = Перечисления.Saby_ТипТитулаЭтрН.ВыдачаГруза;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьОшибкуТипаВладения(СтрокаТС, Ошибки, СоответствиеРеквизитовОшибок)
	
	Если СтрокаТС.Вид = Перечисления.Saby_ВидыТС.Автомобиль Тогда
		СтруктураДанныхОшибки = СоответствиеРеквизитовОшибок.Получить("ТранспортноеСредствоДокумент");
		ДобавитьОшибкуПользователю(
			Ошибки,
			"ТранспортноеСредствоСтрокой",
			СтруктураДанныхОшибки.Ошибка,
			СтруктураДанныхОшибки.РеквизитОбъекта,
			СтруктураДанныхОшибки.ЭлементФормы);
	Иначе
		СтруктураДанныхОшибки = СоответствиеРеквизитовОшибок.Получить("Прицепы.ПрицепДокумент");
		ДобавитьОшибкуПользователю(
			Ошибки,
			СтрШаблон("Объект.ТранспортныеСредства[%1]", СтрокаТС.НомерСтроки),
			СтруктураДанныхОшибки.Ошибка,
			СтруктураДанныхОшибки.РеквизитОбъекта,
			СтруктураДанныхОшибки.ЭлементФормы,
			СтрокаТС.НомерСтроки - 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ФЛК

Функция РезультатПолученияXMLИзСбис(Ссылка, ДопПараметры, context_params, ОбъектОбработки)
	
	ДанныеДокумента = Saby_ТНВыгрузкаСервер.ДанныеДляВыгрузки(Ссылка, ДопПараметры);
	Если Не ЗначениеЗаполнено(ДанныеДокумента) Тогда 
		Возврат Неопределено;
	КонецЕсли;	
		
	ПараметрыМетода  = Новый Структура;
	ПараметрыМетода.Вставить("Документ", ДанныеДокумента); 
	
	Ответ = ОбъектОбработки.local_helper_exec_method(
		context_params, "СБИС.СгенерироватьВложение", ПараметрыМетода, Истина);
	ДанныеОтвета = Ответ["result"];
	
	Вложение = ДанныеОтвета["Вложение"][0];
	Файл     = Вложение["Файл"];
	
	// проверка входящих данных
	// Проверка = ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(Файл["ДвоичныеДанные"]), КодировкаТекста.ANSI);
	
	Если ДанныеДокумента.Свойство("Идентификатор") Тогда 
		ИдСбис = ДанныеДокумента.Идентификатор;
	Иначе 	 
		ИдСбис = "";
	КонецЕсли;
	
	Если ДанныеДокумента.Вложение[0].Свойство("НашаОрганизация") Тогда
		НашаОрганизация = ДанныеДокумента.Вложение[0].НашаОрганизация;
	Иначе 
		НашаОрганизация = Неопределено;
	КонецЕсли;
		
	ОтветСтруктура = Новый Структура;
	ОтветСтруктура.Вставить("Файл",            Файл);
	ОтветСтруктура.Вставить("ИДСбис",          ИдСбис);
	ОтветСтруктура.Вставить("Этап",            ДанныеДокумента.Вложение[0].Подтип);
	ОтветСтруктура.Вставить("НашаОрганизация", НашаОрганизация);
	
	Возврат ОтветСтруктура;
	
КонецФункции

Функция ЗаписатьНовыйДокументВСбис(ДанныеXML, context_params, ОбъектОбработки)
	
	Если ДанныеXML.Свойство("Вложение") Тогда
		Возврат РезультатЗаписиНовогоДокументаВСБИС(ДанныеXML, context_params, ОбъектОбработки);
	КонецЕсли;
	
	Файл   = ДанныеXML.Файл;
		
	ФайлСтруктура = Новый Структура;
	ФайлСтруктура.Вставить("Имя",            Файл["Имя"]);
	ФайлСтруктура.Вставить("ДвоичныеДанные", Файл["ДвоичныеДанные"]);
	
	СтруктураВложения = Новый Структура;
	СтруктураВложения.Вставить("Файл", ФайлСтруктура);
	
	МассивВложений = Новый Массив;
	МассивВложений.Добавить(СтруктураВложения);
	
	Параметры = Новый Структура;	
	Параметры.Вставить("Тип",      "ConsignmentNote");	
	Параметры.Вставить("Вложение", МассивВложений); 
	
	Если ЗначениеЗаполнено(ДанныеXML.ИдСбис) Тогда 
		Параметры.Вставить("Идентификатор", ДанныеXML.ИдСбис);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеXML.НашаОрганизация) Тогда
		Параметры.Вставить("НашаОрганизация", ДанныеXML.НашаОрганизация);
	КонецЕсли;
		
	ДокСбис = ОбъектОбработки.local_helper_write_document(context_params, Параметры); 
	
	Возврат ДокСбис;
	
КонецФункции

Функция РезультатЗаписиНовогоДокументаВСБИС(ДанныеДокумента, context_params, ОбъектОбработки)
	
	Параметры = Новый Структура;
	Параметры.Вставить("Документ", ДанныеДокумента);
	
	Если ДанныеДокумента.Свойство("Идентификатор") Тогда 
		Параметры.Вставить("Идентификатор", ДанныеДокумента.Идентификатор);
	КонецЕсли;
	
	Если ДанныеДокумента.Вложение[0].Свойство("НашаОрганизация") Тогда
		Параметры.Вставить("НашаОрганизация", ДанныеДокумента.Вложение[0].НашаОрганизация);
	КонецЕсли;
		
	ДокСбис = ОбъектОбработки.local_helper_write_document(context_params, Параметры); 
	
	Возврат ДокСбис;
	
КонецФункции

Функция ЗаписатьВложениеДляДокументаСбис(Файл, ИдСбис, context, ОбъектОбработки)
	
	ФайлСтруктура = Новый Структура;
	ФайлСтруктура.Вставить("Имя",            Файл["Имя"]);
	ФайлСтруктура.Вставить("ДвоичныеДанные", Файл["ДвоичныеДанные"]);
	
	СтруктураВложения = Новый Структура; 
	СтруктураВложения.Вставить("Файл", ФайлСтруктура);
	
	МассивВложений = Новый Массив;
	МассивВложений.Добавить(СтруктураВложения);
			
	Параметры = Новый Структура;		
	Параметры.Вставить("Идентификатор", ИдСбис);
	Параметры.Вставить("Вложение",      МассивВложений);
	
    Результат = ОбъектОбработки.local_helper_write_attachment(context, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДействиеКПереходуСбис(Параметры, ДанныеДляПодписания)
	
	context_params  = Параметры.context_params;
    ОбъектОбработки = Параметры.ОбъектОбработки;
	
	СтруктураЭтапа = ЗначениеСледующегоЭтапа(
		Параметры.ТекущийЭтап,
		Параметры.ОтрицательныйПереход,
		Параметры.ПричинаОтрицательногоПерехода,
		ДанныеДляПодписания);
		
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("Идентификатор", Параметры.ИД); 
	ПараметрыДействия.Вставить("Этап",          СтруктураЭтапа);
		
	Результат = ОбъектОбработки.local_helper_prepare_action(context_params, ПараметрыДействия);
	
	Структура = Новый Структура;
	Структура.Вставить("Результат",         Результат);
	Структура.Вставить("ПараметрыДействия", ПараметрыДействия);
	
	Возврат Структура;
	
КонецФункции

Функция ВыполнитьДействиеВСбис(Параметры)
	
	ОбъектОбработки = Параметры.ОбъектОбработки;

	РезультатВыполнить = ОбъектОбработки.local_helper_execute_action(
		Параметры.context_params, Параметры.ПараметрыДействия);		

	Массив = Новый Массив();
	Массив.Добавить(Параметры.Ссылка); 
	
	ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыЧтенияДокументаИзСБИС();
	ДопПараметры.ТекущийТитул = Параметры.ДинамическийТитул;
	
	РезультатПрочитать = ОбновитьАктивныйЭтапИзСбис(Массив, Параметры.context_params, ДопПараметры);
			
	Возврат РезультатПрочитать;
	
КонецФункции

Функция ПричинаОшибки(Описание) 
	
	Попытка
		Структура = ЗначениеИзСтрокиВнутр(Описание);
	Исключение
		// может прийти не десеарилизуемая строка
		Возврат Описание;
	КонецПопытки;
    	
	Если ТипЗнч(Структура.detail) = Тип("Строка") Тогда 
		ПодробноеОписание = Структура.detail;		
	ИначеЕсли ЗначениеЗаполнено(Структура.detail) Тогда  
		ПодробноеОписание = Структура.detail["error"]["details"];
	Иначе
		ПодробноеОписание = "";
	КонецЕсли;	
	
	ТекстОшибки = Структура.message + ?(ПустаяСтрока(ПодробноеОписание), "", " - " + ПодробноеОписание);
	
	Возврат ТекстОшибки; 
	
КонецФункции	

Функция ЗначениеСледующегоЭтапа(ТекущийЭтап, ОтрицательныйПереход, ПричинаОтрицательногоПерехода, ДанныеДляПодписания)
	
	Комментарий = "";
	
	Если ТекущийЭтап = "1110343" Тогда
		
		Этап       = "Переадресовка";
		// ИдЭтап = "327a0052-6b11-49eb-ba7a-c74c90938902";
		
		Действие   = "Переадресован";
		ИдДействие = "7b9b3f53-6549-4e37-8c49-650a7e41296c";
		
	ИначеЕсли ТекущийЭтап = "1110344" Тогда
		
		Этап       = "Замена водителей/ТС";
		// ИдЭтап = "7b4c733f-3639-41a5-9e7c-bdac7e9d9a93";
		
		Действие   = "Замена водителей/ТС";
		ИдДействие = "8a458ae4-5a38-497d-b4ec-424e14cc64ed";
		
	ИначеЕсли ТекущийЭтап = "1167009" Тогда
		
		Этап       = "Уведомление о переадресовке";
		// ИдЭтап = "bc2bb0b5-194f-40be-afd2-e43e01ed4baf";
		
		Действие   = "Уведомить";
		ИдДействие = "3f9da9bb-6cff-4d9f-aa97-99891079e4dd";
		
	ИначеЕсли ТекущийЭтап = "1110345" Тогда
		
		Этап       = "Изменить стоимость";
		// ИдЭтап = "a03b3162-615f-49b4-916e-aa49a559e404";
		
		Действие   = "Согласовать";
		ИдДействие = "c1c702d6-f686-4baf-aa0f-52f4baee2e66";
		
	ИначеЕсли ТекущийЭтап = "1110346" Тогда
		
		Этап       = "Согласовать стоимость";
		// ИдЭтап = "49c91f1d-1860-46ab-8279-d42ea215b0ce";
		
		Если ОтрицательныйПереход Тогда			
			Действие    = "Отклонено";
			ИдДействие  = "cc83d6a2-1c02-4246-8dc0-280f5ef9c9aa";
			Комментарий = ПричинаОтрицательногоПерехода;
		Иначе			
			Действие   = "Согласовано";
			ИдДействие = "9c4737f5-24a9-40e8-9d21-6b1122293550";			
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураДействия = Новый Структура;
    СтруктураДействия.Вставить("Название",      Действие);
	СтруктураДействия.Вставить("Идентификатор", ИдДействие);
	СтруктураДействия.Вставить("Комментарий",   Комментарий);
	
	Если ДанныеДляПодписания <> Неопределено
		И ДанныеДляПодписания.Свойство("СертификатДок")
		И ДанныеДляПодписания.СертификатДок <> Неопределено Тогда
		СтруктураДействия.Вставить("Сертификат", ДанныеДляПодписания.СертификатДок);
	КонецЕсли;
	
	СтруктураЭтапа = Новый Структура;
	СтруктураЭтапа.Вставить("Действие", СтруктураДействия);
	
	СтруктураЭтапа.Вставить("Название", Этап);
	
	Возврат СтруктураЭтапа;
	
КонецФункции

Процедура УдалитьЛишниеДействия(Этап)
	
	Если Не ЗначениеЗаполнено(Этап) Тогда 
		Возврат;
	КонецЕсли;
		
	Для Каждого Элемент Из Этап Цикл 
		
		Действия = Элемент["Действие"];
		Если Не ЗначениеЗаполнено(Действия) Тогда 
			Продолжить;
		КонецЕсли;
		
		НовыеДействия = Новый Массив;
		
		Для Каждого Действие Из Действия Цикл 
			Если Действие["Название"] <> "Переназначить" Тогда 
				НовыеДействия.Добавить(Действие);
			КонецЕсли;
		КонецЦикла;
		
		Элемент.Вставить("Действие", НовыеДействия);
		
	КонецЦикла;
		
КонецПроцедуры

// Выполним подготовку и переход "хардкодом" по динамическому титулу
// из-за не возможности использовать общий механизм делаем прямой вызов нужных методов
// Параметры:
//	Параметры - Структура - параметры выполнения перехода на след. этап
//
Процедура ВыполнитьПереходПоДинамическомуТитулу(Параметры)
	
	Ссылка             = Параметры.Ссылка;	
	ДокументыСОшибками = Параметры.ДокументыСОшибками;
	Ошибки             = Параметры.Ошибки;
	ЕстьОшибки         = Ложь;
	
	Упал = Ложь;
	
	// 1. Подготовить действие. получим данные для осуществления перехода на след. этап 
	Попытка
		РезультатПодготовкиССертификатами = ПодготовитьДействиеССертификатами(Параметры);
		ДанныеДляПодписания = РезультатПодготовкиССертификатами.ДанныеДляПодписания;
		РезультатПодготовки = РезультатПодготовкиССертификатами.РезультатПодготовки;
	Исключение
		Упал = Истина;
	КонецПопытки;
	
	Если Упал Тогда
		
		Попытка
			РезультатПодготовкиССертификатами = ПодготовитьДействиеССертификатами(Параметры);
			ДанныеДляПодписания = РезультатПодготовкиССертификатами.ДанныеДляПодписания;
			РезультатПодготовки = РезультатПодготовкиССертификатами.РезультатПодготовки;
		Исключение
			ИнфоОшибки = ИнформацияОбОшибке();
			ТекстОшибки = ПричинаОшибки(ИнфоОшибки.Описание);						
			ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
			
			ДокументыСОшибками.Вставить(Ссылка, Ошибки);			
			ЕстьОшибки = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	// при ошибках не выполняем переход 
	Если Не ЕстьОшибки Тогда 
		
		// 2. Выполнить действие. Перейдем на след. этап 
		Попытка
			
			ДобавитьЛокальнуюПодписьЕслиОнаЕсть(Параметры, РезультатПодготовки, ДанныеДляПодписания);
			
			// дополним исходные параметры
			Параметры.Вставить("ПараметрыДействия", РезультатПодготовки.ПараметрыДействия);			
			Итог = ВыполнитьДействиеВСбис(Параметры);
									
		Исключение
			
			ИнфоОшибки = ИнформацияОбОшибке();
			ТекстОшибки = ПричинаОшибки(ИнфоОшибки.Описание);					
			ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
			
			ДокументыСОшибками.Вставить(Ссылка, Ошибки);
			
			СостояниеКод = 6; // Ошибка
			
			Состояние = Справочники.Saby_СостоянияОбъектов.ПолучитьСтатусДокументаСБИС(СостояниеКод);
			
			ПараметрыСтатус = Новый Структура;
			ПараметрыСтатус.Вставить("ИД",           Параметры.Ид);
			ПараметрыСтатус.Вставить("АктивныйЭтап", Параметры.Этап);
			ПараметрыСтатус.Вставить("Ссылка",       Ссылка);
			ПараметрыСтатус.Вставить("Загрузка",     Истина);
			ПараметрыСтатус.Вставить("Состояние",    Состояние);
			ПараметрыСтатус.Вставить("СбисИд",       "");
			
			УстановитьИДИСтатус(ПараметрыСтатус);
						
		КонецПопытки;
											
	КонецЕсли;
		
КонецПроцедуры

// Выгрузка вложения в формате xml и дальнейшая отправка его в записать документ или вложение
//
// Параметры:
//	Ссылка - ДокументСсылка.Saby_ТранспортнаяНакладная - выгружаемый документ 
//	ДопПараметры - Структура - дополнительные параметры выгрузки 
//	context_params - Струкутра - данные авторизации
//  ОбъектОбработки - ОбработкаОбъект - объект обработки для вызова экспортных процедур
//
// Возвращаемое значение:
//	Структура - итог выгрузки документа
//
Функция ВыгрузкаВложения(Ссылка, ДопПараметры, context_params, ОбъектОбработки)
	
	Если ТипЗнч(Ссылка) <> Тип("ДокументСсылка.Saby_ТранспортнаяНакладная") Тогда
		Возврат РезультатВыгрузкиВложения(Ссылка, ДопПараметры, context_params, ОбъектОбработки);
	КонецЕсли;
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Ссылка",           Ссылка);
	РезультатФункции.Вставить("ВыполнитьПереход", Ложь);
	РезультатФункции.Вставить("ТекущийЭтап",      Неопределено);
	РезультатФункции.Вставить("УстановитьИД",     Ложь);
	РезультатФункции.Вставить("УстановитьЭтап",   Ложь);
	РезультатФункции.Вставить("ИДСбис",           "");
	РезультатФункции.Вставить("Этап",             Неопределено);
	
	Ошибки = ДопПараметры.Ошибки;
		
	СписокДокументовСОшибками = ДопПараметры.СписокДокументовСОшибками;
	УспешныеДокументы         = ДопПараметры.УспешныеДокументы;
	
	Если ДопПараметры.ЭтоОтрицательныйПереход Тогда
		
		РезультатФункции.ВыполнитьПереход = Истина;
		
		Если ДопПараметры.Этап = "Согласовать стоимость" Тогда
			РезультатФункции.ТекущийЭтап = "1110346";
		КонецЕсли;
				
		ДанныеСостояния = РегистрыСведений.Saby_Состояние.ПрочитатьПоОбъекту(Ссылка);
		РезультатФункции.ИДСбис = ДанныеСостояния.UID;
		
		Возврат РезультатФункции;
		
	КонецЕсли;
		
	Попытка
		
		// 1. Выгрузим наш документ в сбис формата json и получим xml вложения
		//    в результате получим данные для создания документа в сбис
		ОтветXML = РезультатПолученияXMLИзСбис(Ссылка, ДопПараметры, context_params, ОбъектОбработки);
		Если Не ЗначениеЗаполнено(ОтветXML) Тогда  
			
			ТекстОшибки = "Не сформирован файл json для генерации вложения!";
			ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
			
			СписокДокументовСОшибками.Вставить(Ссылка, Ошибки); 			
			Возврат Неопределено;
			
		КонецЕсли;	
		
		РезультатФункции.ТекущийЭтап = ОтветXML.Этап;
		ТекущийЭтапСсылка = Перечисления.Saby_ТипТитулаЭтрН.ЗначениеПоКоду(РезультатФункции.ТекущийЭтап);
		
		РезультатФункции.ИдСбис = ОтветXML.ИдСбис;
		
		// 2. Отправим в сбис полученное вложение документа
		//    передадим полученный ранее xml в формате двоичных данных		       
		
		// на 1 этапе записываем документ, далее прикрепляем вложения
		Если РезультатФункции.ТекущийЭтап = "1110339" Тогда  
			
			ДокСбис = ЗаписатьНовыйДокументВСбис(ОтветXML, context_params, ОбъектОбработки);
			
			РезультатФункции.ИДСбис       = ДокСбис["Идентификатор"];
			РезультатФункции.УстановитьИД = Истина;
			
			РезультатФункции.Этап = ДанныеЭтапа(ДокСбис);
			
		Иначе 	
			// для существующего документа пишем только вложение
			РезультатВложения = ЗаписатьВложениеДляДокументаСбис(
				ОтветXML.Файл, РезультатФункции.ИДСбис, context_params, ОбъектОбработки);
			РезультатФункции.Этап = ДанныеЭтапа(РезультатВложения);
			
		КонецЕсли;
		
		Если Перечисления.Saby_ТипТитулаЭтрН.ЭтоДинамическийТитул(ТекущийЭтапСсылка) Тогда					
			РезультатФункции.ВыполнитьПереход = Истина;  					
		Иначе 
			
			// если титул не динамический
			// исключаем не нужные переходы
			УдалитьЛишниеДействия(РезультатФункции.Этап);
			
			СтруктураОтвет = ДанныеУспешнойЗагрузкиДокумента(
				Ссылка, РезультатФункции.Этап, Ложь, ДопПараметры.КоличествоЗагружено);
			УспешныеДокументы.Добавить(СтруктураОтвет);				
			
			РезультатФункции.УстановитьЭтап = Истина;	
			
		КонецЕсли;
		
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		ТекстОшибки = ПричинаОшибки(ИнфоОшибки.Описание);					
		ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);     
		
		СписокДокументовСОшибками.Вставить(Ссылка, Ошибки);				
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат РезультатФункции;
	
КонецФункции

// Выгрузка вложения в формате xml и дальнейшая отправка его в записать документ или вложение
//
// Параметры:
//	Ссылка - ДокументСсылка.Saby_ТранспортнаяНакладная - выгружаемый документ 
//	ДопПараметры - Структура - дополнительные параметры выгрузки 
//	context_params - Струкутра - данные авторизации
//  ОбъектОбработки - ОбработкаОбъект - объект обработки для вызова экспортных процедур
//
// Возвращаемое значение:
//	Структура - итог выгрузки документа
//
Функция РезультатВыгрузкиВложения(Ссылка, ДопПараметры, context_params, ОбъектОбработки)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Ссылка",           Ссылка);
	РезультатФункции.Вставить("ВыполнитьПереход", Ложь);
	РезультатФункции.Вставить("ТекущийЭтап",      Неопределено);
	РезультатФункции.Вставить("УстановитьИД",     Ложь);
	РезультатФункции.Вставить("УстановитьЭтап",   Ложь);
	РезультатФункции.Вставить("ИДСбис",           "");
	РезультатФункции.Вставить("Этап",             Неопределено);
	
	Ошибки = ДопПараметры.Ошибки;
	
	Если ДопПараметры.ЭтоОтрицательныйПереход Тогда
		
		РезультатФункции.ВыполнитьПереход = Истина;
		
		Если ДопПараметры.Этап = "Согласовать стоимость" Тогда
			РезультатФункции.ТекущийЭтап = "1110346";
		КонецЕсли;
				
		ДанныеСостояния = РегистрыСведений.Saby_Состояние.ПрочитатьПоОбъекту(Ссылка);
		РезультатФункции.ИДСбис = ДанныеСостояния.UID;
		
		Возврат РезультатФункции;
		
	КонецЕсли;
		
	Попытка
		
		ДанныеДокумента = Saby_ТНВыгрузкаСервер.ДанныеДляВыгрузки(Ссылка, ДопПараметры);
		Если Не ЗначениеЗаполнено(ДанныеДокумента) Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
		РезультатФункции.ТекущийЭтап = ДанныеДокумента.Вложение[0].Подтип;
		ТекущийЭтапСсылка = Перечисления.Saby_ТипТитулаЭтрН.ЗначениеПоКоду(РезультатФункции.ТекущийЭтап);
		
		ДокСбис = ЗаписатьНовыйДокументВСбис(ДанныеДокумента, context_params, ОбъектОбработки);
		
		РезультатФункции.ИДСбис       = ДокСбис["Идентификатор"];
		РезультатФункции.УстановитьИД = Истина;
		
		РезультатФункции.Этап = ДанныеЭтапа(ДокСбис);
					
		Если Перечисления.Saby_ТипТитулаЭтрН.ЭтоДинамическийТитул(ТекущийЭтапСсылка) Тогда					
			РезультатФункции.ВыполнитьПереход = Истина;  					
		Иначе 
			
			// если титул не динамический
			// исключаем не нужные переходы
			УдалитьЛишниеДействия(РезультатФункции.Этап);
			
			СтруктураОтвет = ДанныеУспешнойЗагрузкиДокумента(
				Ссылка, РезультатФункции.Этап, Ложь, ДопПараметры.КоличествоЗагружено);
			ДопПараметры.УспешныеДокументы.Добавить(СтруктураОтвет);				
			
			РезультатФункции.УстановитьЭтап = Истина;	
			
		КонецЕсли;
		
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		ТекстОшибки = ПричинаОшибки(ИнфоОшибки.Описание);
		ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
		
		ДопПараметры.СписокДокументовСОшибками.Вставить(Ссылка, Ошибки);
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат РезультатФункции;
	
КонецФункции

// Переход по динамичемкому титулу делаем самостоятельно без общей формы
//
// Параметры:
//	ДанныеВложения - Структура - данные записанного вложения для перехода 
//  ДопПараметры - Структура - дополнительные параметры выгрузки
//  context_params - Струкутра - данные авторизации 
//  ОбъектОбработки - ОбработкаОбъект - объект обработки для вызова экспортных процедур
//
Процедура ВыполнитьПереход(ДанныеВложения, ДопПараметры, context_params, ОбъектОбработки)
	
	Если Не ДанныеВложения.ВыполнитьПереход Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка            = ДанныеВложения.Ссылка;
	УспешныеДокументы = ДопПараметры.УспешныеДокументы;
	Ошибки            = ДопПараметры.Ошибки;
	
	// ПРИ ОТРИЦАТЕЛЬНОМ ПЕРЕХОДЕ ЭТАП НАДО ПОЛУЧИТЬ СРАЗУ
	
	ДинамическийТитул = Перечисления.Saby_ТипТитулаЭтрН.ЗначениеПоКоду(ДанныеВложения.ТекущийЭтап);
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ДокументыСОшибками",   ДопПараметры.СписокДокументовСОшибками);
	ПараметрыВыполнения.Вставить("context_params",       context_params);
	ПараметрыВыполнения.Вставить("ОбъектОбработки",      ОбъектОбработки);
	ПараметрыВыполнения.Вставить("Ссылка",               Ссылка);
	ПараметрыВыполнения.Вставить("ИД",                   ДанныеВложения.ИДСбис);
	ПараметрыВыполнения.Вставить("Ошибки",               Ошибки);
	ПараметрыВыполнения.Вставить("Этап",                 ДанныеВложения.Этап);
	ПараметрыВыполнения.Вставить("ТекущийЭтап",          ДанныеВложения.ТекущийЭтап);
	ПараметрыВыполнения.Вставить("ДинамическийТитул",    СокрЛП(ДинамическийТитул));
	ПараметрыВыполнения.Вставить("ОтрицательныйПереход", ДопПараметры.ЭтоОтрицательныйПереход);
	
	ПараметрыВыполнения.Вставить(
		"ПричинаОтрицательногоПерехода",
		?(ДопПараметры.Свойство("ПричинаОтрицательногоПерехода"), ДопПараметры.ПричинаОтрицательногоПерехода, ""));
	
	ВыполнитьПереходПоДинамическомуТитулу(ПараметрыВыполнения);
	
	// Успешно выполнили переход по динамическому списку
	Если Не ЗначениеЗаполнено(Ошибки) Тогда
		
		Этап = ПараметрыВыполнения.Этап;
		СтруктураОтвет = ДанныеУспешнойЗагрузкиДокумента(Ссылка, Этап, Истина, ДопПараметры.КоличествоЗагружено);
		УспешныеДокументы.Добавить(СтруктураОтвет);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьДействиеССертификатами(Параметры)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДанныеДляПодписания", ДанныеДляПодписания(Параметры));
	
	РезультатФункции.Вставить(
		"РезультатПодготовки",
		ПодготовитьДействиеКПереходуСбис(Параметры, РезультатФункции.ДанныеДляПодписания));
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеДляПодписания(Параметры, РезультатЗапроса = Неопределено)
	
	ДоступныеСертификаты = ДоступныеЛокальныеСертификаты(Параметры, РезультатЗапроса);
	
	Возврат Параметры.ОбъектОбработки.сбисОпределитьДанныеДляПодписания(
		Неопределено, Неопределено, ДоступныеСертификаты);
	
КонецФункции

Процедура ДобавитьЛокальнуюПодписьЕслиОнаЕсть(Параметры, РезультатПодготовки, ДанныеДляПодписания)
	
	Если Не ЗначениеЗаполнено(ДанныеДляПодписания) Тогда
		ДанныеДляПодписания = ДанныеДляПодписания(Параметры, РезультатПодготовки["Результат"]);
		Если Не ЗначениеЗаполнено(ДанныеДляПодписания) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ВложенияДляДобавленияПодписи = РезультатПодготовки["Результат"]["Этап"][0]["Вложение"];
	
	Контекст = Новый Структура("params", Параметры.context_params);
	
	ТипДанныхПодписания = ДанныеДляПодписания["Тип"];
	Если ТипДанныхПодписания = "Дистанционное" Тогда
		Параметры.ОбъектОбработки.ПодписатьДистанционно(
			Контекст,
			ВложенияДляДобавленияПодписи,
			ДанныеДляПодписания["СертификатДляПодписания"]);
	ИначеЕсли ТипДанныхПодписания = "ЛокальноеНаСервере" Тогда
		Параметры.ОбъектОбработки.ПодписатьНаСервере(
			Контекст,
			ВложенияДляДобавленияПодписи,
			ДанныеДляПодписания["СертификатДляПодписания"]);
	ИначеЕсли ТипДанныхПодписания = "ЛокальноеНаКлиенте" Тогда
		Параметры.ОбъектОбработки.ПодписатьНаКлиенте(
			Контекст,
			ВложенияДляДобавленияПодписи,
			ДанныеДляПодписания,
			Неопределено);
	КонецЕсли;
	
	ДанныеПодписи = ДанныеПодписи(ВложенияДляДобавленияПодписи);
	
	СтруктураПодписи = Новый Структура;
	СтруктураПодписи.Вставить("Файл", Новый Структура);
	СтруктураПодписи.Файл.Вставить("ДвоичныеДанные", ДанныеПодписи.ДвоичныеДанные);
	
	МассивПодписей = Новый Массив;
	МассивПодписей.Добавить(СтруктураПодписи);
	
	СтруктураВложения = Новый Структура;
	СтруктураВложения.Вставить("Идентификатор", ДанныеПодписи.Идентификатор);
	СтруктураВложения.Вставить("Подпись", МассивПодписей);
	
	МассивВложений = Новый Массив;
	МассивВложений.Добавить(СтруктураВложения);
	
	РезультатПодготовки.ПараметрыДействия.Этап.Вставить("Вложение", МассивВложений);
	
КонецПроцедуры

Функция ДоступныеЛокальныеСертификаты(Параметры, РезультатЗапроса = Неопределено)
	
	РезультатФункции = Новый Соответствие;
	
	УзелСертификат = "Сертификат";
	
	РезультатФункции.Вставить("ТребуетПодписания", "Да");
	РезультатФункции.Вставить(УзелСертификат, Новый Массив);
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Идентификатор", Параметры.Ид);
	ПараметрыМетода.Вставить("ДопПоля",       "ЭтапВернутьВсеСертификаты");
	
	Если РезультатЗапроса = Неопределено Тогда
		Результат = Параметры.ОбъектОбработки.local_helper_read_document(Параметры.context_params, ПараметрыМетода);
	Иначе
		Результат = РезультатЗапроса;
	КонецЕсли;
	
	Если Результат["Этап"] = Неопределено Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Для Каждого Этап Из Результат["Этап"] Цикл
		Для Каждого Сертификат Из Этап["Действие"][0][УзелСертификат] Цикл			
			
			Если Сертификат["Ключ"]["Тип"] = "Дистанционный" 
				Или Сертификат["Ключ"]["Тип"] = "Клиентский" Тогда
				РезультатФункции["Сертификат"].Добавить(Сертификат);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеПодписи(ВложенияДляДобавленияПодписи)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДвоичныеДанные", ВложенияДляДобавленияПодписи[0]["Подпись"][0].Файл.ДвоичныеДанные);
	РезультатФункции.Вставить("Идентификатор",  ВложенияДляДобавленияПодписи[0]["Идентификатор"]);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеУспешнойЗагрузкиДокумента(Ссылка, Этап, ДинамическийТитул, КоличествоЗагружено)
	
	КоличествоЗагружено = КоличествоЗагружено + 1;
	
	СтруктураОтвет = Новый Структура;
	СтруктураОтвет.Вставить("Ключ",              Ссылка);
	СтруктураОтвет.Вставить("Этап",              Этап);
	СтруктураОтвет.Вставить("ДинамическийТитул", ДинамическийТитул);
	
	Возврат СтруктураОтвет;
			
КонецФункции

#Область ЗаполнениеНаОснованииINI

Функция ДанныеОснованийДляЗаполненияНаОснованииINI(ДокументОснование)
	
	ОписаниеТипаОснования = Новый ОписаниеТипов;
	ОписаниеТипаОснования = Новый ОписаниеТипов(ОписаниеТипаОснования, Справочники.ТипВсеСсылки().Типы());
	ОписаниеТипаОснования = Новый ОписаниеТипов(ОписаниеТипаОснования, Документы.ТипВсеСсылки().Типы());
	
	ОписаниеТипаИмениИНИ = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(128, ДопустимаяДлина.Переменная));
	ОписаниеТипаРолейКонтрагентов = Новый ОписаниеТипов("ПеречислениеСсылка.Saby_РолиКонтрагентов");
	
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("Основание",       ОписаниеТипаОснования);
	РезультатФункции.Колонки.Добавить("ini_name",        ОписаниеТипаИмениИНИ);
	РезультатФункции.Колонки.Добавить("РольКонтрагента", ОписаниеТипаРолейКонтрагентов);
	
	ШаблонИмениINI = "Blockly_%1_ЭТрН_read";
	ИмяМетаданных = Saby_ТНОбщегоНазначенияСервер.ИмяМетаданныхДокумента(ДокументОснование);
	
	СтруктураОснования = РезультатФункции.Добавить();
	СтруктураОснования.Основание = ДокументОснование;
	СтруктураОснования.ini_name  = СтрШаблон(ШаблонИмениINI, ИмяМетаданных);
	
	ЕстьТранспортнаяНакладнаяВКонфигурации = Метаданные.Документы.Найти("ТранспортнаяНакладная") <> Неопределено;
	Если ЕстьТранспортнаяНакладнаяВКонфигурации Тогда
		
		ЭтоТранспортнаяНакладная = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ТранспортнаяНакладная");
		
		Если ЭтоТранспортнаяНакладная Тогда
			ЗапросДанных = Новый Запрос;
			ЗапросДанных.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование КАК Ссылка
			|ИЗ
			|	Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
			|ГДЕ
			|	ТранспортнаяНакладнаяДокументыОснования.Ссылка = &ДокументОснование
			|	И НЕ ТранспортнаяНакладнаяДокументыОснования.Ссылка.ПометкаУдаления";
			
			ЗапросДанных.УстановитьПараметр("ДокументОснование", ДокументОснование);
			
			ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
			Если ВыборкаДанных.Следующий() Тогда
				
				ИмяМетаданных = Saby_ТНОбщегоНазначенияСервер.ИмяМетаданныхДокумента(ВыборкаДанных.Ссылка);
				
				СтруктураОснования = РезультатФункции.Вставить(0);
				СтруктураОснования.Основание = ВыборкаДанных.Ссылка;
				СтруктураОснования.ini_name  = СтрШаблон(ШаблонИмениINI, ИмяМетаданных);
				
			КонецЕсли;
		Иначе
			ЗапросДанных = Новый Запрос;
			ЗапросДанных.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТранспортнаяНакладнаяДокументыОснования.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
			|ГДЕ
			|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование = &ДокументОснование
			|	И НЕ ТранспортнаяНакладнаяДокументыОснования.Ссылка.ПометкаУдаления";
			
			ЗапросДанных.УстановитьПараметр("ДокументОснование", ДокументОснование);
			
			ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
			Если ВыборкаДанных.Следующий() Тогда
				
				СтруктураОснования = РезультатФункции.Добавить();
				СтруктураОснования.Основание = ВыборкаДанных.Ссылка;
				СтруктураОснования.ini_name  = "Blockly_ТранспортнаяНакладная_ЭТрН_read";
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДобавитьОснованияДляЗаполнения(ОснованияДляЗаполнения, РезультатФункции)
	
	Если Не РезультатФункции.Свойство("НовыеОснования") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("РольКонтрагента");
	
	Для Каждого НовоеОснование Из РезультатФункции.НовыеОснования Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, НовоеОснование);
		НайденныеСтроки = ОснованияДляЗаполнения.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтруктураОснования = НайденныеСтроки[0];
		Иначе
			СтруктураОснования = ОснованияДляЗаполнения.Добавить();
		КонецЕсли;
		
		СтруктураОснования.Основание       = НовоеОснование.Основание;
		СтруктураОснования.ini_name        = "Blockly_ДанныеКонтрагентаОрганизации_ЭТрН_read";
		СтруктураОснования.РольКонтрагента = НовоеОснование.РольКонтрагента;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьНовыеОснования(СтруктураРезультата, ДанныеИзИНИ)
	
	ГрузоотправительСсылка = ДанныеИзИНИ["ГрузоотправительСсылка"];
	
	Если ЗначениеЗаполнено(ГрузоотправительСсылка) Тогда
		
		СтруктураОснования = СтруктураОснования(ГрузоотправительСсылка, Перечисления.Saby_РолиКонтрагентов.Отправитель);
		СтруктураРезультата.НовыеОснования.Добавить(СтруктураОснования);
		
	КонецЕсли;
	
	ГрузополучательСсылка = ДанныеИзИНИ["ГрузополучательСсылка"];
	Если ЗначениеЗаполнено(ГрузополучательСсылка) Тогда
		СтруктураОснования = СтруктураОснования(ГрузополучательСсылка, Перечисления.Saby_РолиКонтрагентов.Получатель);
		СтруктураРезультата.НовыеОснования.Добавить(СтруктураОснования);
	КонецЕсли;
	
	ГрузоперевозчикСсылка = ДанныеИзИНИ["ГрузоперевозчикСсылка"];
	Если ЗначениеЗаполнено(ГрузоперевозчикСсылка) Тогда
		СтруктураОснования = СтруктураОснования(ГрузоперевозчикСсылка, Перечисления.Saby_РолиКонтрагентов.Перевозчик);
		СтруктураРезультата.НовыеОснования.Добавить(СтруктураОснования);
	КонецЕсли;
	
	ЗаказчикСсылка = ДанныеИзИНИ["ЗаказчикСсылка"];
	Если ЗначениеЗаполнено(ЗаказчикСсылка) Тогда
		СтруктураОснования = СтруктураОснования(ЗаказчикСсылка, Перечисления.Saby_РолиКонтрагентов.Заказчик);
		СтруктураРезультата.НовыеОснования.Добавить(СтруктураОснования);
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураОснования(Основание, РольКонтрагента)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Основание",       Основание);
	РезультатФункции.Вставить("РольКонтрагента", РольКонтрагента);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДополнитьПодстановки(ДанныеИзИНИ, ПараметрыЗаполнения)
	
	Если ПараметрыЗаполнения.РольКонтрагента = Перечисления.Saby_РолиКонтрагентов.Отправитель Тогда
		ДополнитьПодстановкиГрузоотправителя(ДанныеИзИНИ, ПараметрыЗаполнения);
	ИначеЕсли ПараметрыЗаполнения.РольКонтрагента = Перечисления.Saby_РолиКонтрагентов.Получатель Тогда
		ДополнитьПодстановкиГрузополучателя(ДанныеИзИНИ, ПараметрыЗаполнения);
	ИначеЕсли ПараметрыЗаполнения.РольКонтрагента = Перечисления.Saby_РолиКонтрагентов.Перевозчик Тогда
		ДополнитьПодстановкиГрузоперевозчика(ДанныеИзИНИ, ПараметрыЗаполнения);
	ИначеЕсли ПараметрыЗаполнения.РольКонтрагента = Перечисления.Saby_РолиКонтрагентов.Заказчик Тогда
		ДополнитьПодстановкиЗаказчика(ДанныеИзИНИ, ПараметрыЗаполнения);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПодстановкиГрузоотправителя(ДанныеИзИНИ, ПараметрыЗаполнения)
	
	Если Не ЗапрещеноЗаполнять("ПунктПогрузки", ПараметрыЗаполнения) Тогда
		ПунктПогрузкиВыгрузки = ДанныеИзИНИ["ПунктПогрузкиВыгрузки"];
		Если ПунктПогрузкиВыгрузки <> Неопределено Тогда
			ДанныеИзИНИ.Вставить("ПунктПогрузки", ПунктПогрузкиВыгрузки);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗапрещеноЗаполнять("Грузоотправитель", ПараметрыЗаполнения) Тогда
		ДанныеИзИНИ.Вставить("Грузоотправитель", ДанныеЮрЛица(ДанныеИзИНИ));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПодстановкиГрузополучателя(ДанныеИзИНИ, ПараметрыЗаполнения)
	
	Если Не ЗапрещеноЗаполнять("ПунктВыгрузки", ПараметрыЗаполнения) Тогда
		ПунктПогрузкиВыгрузки = ДанныеИзИНИ["ПунктПогрузкиВыгрузки"];
		Если ПунктПогрузкиВыгрузки <> Неопределено Тогда
			ДанныеИзИНИ.Вставить("ПунктВыгрузки", ПунктПогрузкиВыгрузки);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗапрещеноЗаполнять("Грузополучатель", ПараметрыЗаполнения) Тогда
		ДанныеИзИНИ.Вставить("Грузополучатель", ДанныеЮрЛица(ДанныеИзИНИ));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПодстановкиГрузоперевозчика(ДанныеИзИНИ, ПараметрыЗаполнения)
	
	Если Не ЗапрещеноЗаполнять("Грузоперевозчик", ПараметрыЗаполнения) Тогда
		ДанныеИзИНИ.Вставить("Грузоперевозчик", ДанныеЮрЛица(ДанныеИзИНИ));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПодстановкиЗаказчика(ДанныеИзИНИ, ПараметрыЗаполнения)
	
	Если Не ЗапрещеноЗаполнять("Заказчик", ПараметрыЗаполнения) Тогда
		ДанныеИзИНИ.Вставить("Заказчик", ДанныеЮрЛица(ДанныеИзИНИ));
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеЮрЛица(ДанныеИзИНИ)
	
	РезультатФункции = Новый Соответствие;
	РезультатФункции.Вставить("Контакты",  ДанныеИзИНИ["Контакты"]);
	РезультатФункции.Вставить("Адрес",     ДанныеИзИНИ["Адрес"]);
	РезультатФункции.Вставить("Реквизиты", ДанныеИзИНИ["Реквизиты"]);
	РезультатФункции.Вставить("Название",  ДанныеИзИНИ["Название"]);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура УстановитьЗапретЗаполнения(ПараметрыЗаполнения)
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Saby_ТранспортнаяНакладная.Погрузка_Адрес КАК Погрузка_Адрес,
	|	Saby_ТранспортнаяНакладная.Отправитель_АдресДоставки КАК Отправитель_АдресДоставки
	|ИЗ
	|	Документ.Saby_ТранспортнаяНакладная КАК Saby_ТранспортнаяНакладная
	|ГДЕ
	|	Saby_ТранспортнаяНакладная.Ссылка = &Ссылка";
	
	ЗапросДанных.УстановитьПараметр("Ссылка", ПараметрыЗаполнения.Объект.Ссылка);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		
		Если ЗначениеЗаполнено(ВыборкаДанных.Погрузка_Адрес) Тогда
			ПараметрыЗаполнения.ЗапретЗаполнения.Вставить("ПунктПогрузки", Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаДанных.Отправитель_АдресДоставки) Тогда
			ПараметрыЗаполнения.ЗапретЗаполнения.Вставить("ПунктВыгрузки", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапрещеноЗаполнять(ИмяПоля, ПараметрыЗаполнения)
	
	Возврат ПараметрыЗаполнения.ЗапретЗаполнения[ИмяПоля] <> Неопределено;
	
КонецФункции

Функция ПараметрыЗаполненияНаОснованииINI()
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ini_name",             "");
	РезультатФункции.Вставить("Объект",               Неопределено);
	РезультатФункции.Вставить("Основание",            Неопределено);
	РезультатФункции.Вставить("ЭтоВыбранныйДокумент", Ложь);
	РезультатФункции.Вставить("ЭтоПервоеОснование",   Ложь);
	РезультатФункции.Вставить("ТранспортБлокли",      Обработки.SABY.Создать());
	РезультатФункции.Вставить("context_params",       Saby_Core.ПроверитьНаличиеПараметровПодключения());
	РезультатФункции.Вставить("РольКонтрагента",      Перечисления.Saby_РолиКонтрагентов.ПустаяСсылка());
	РезультатФункции.Вставить("ЗапретЗаполнения",     Новый Соответствие);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция РезультатЗаполненияНаОснованииINI(ПараметрыЗаполнения)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ТекстСообщения", "");
	РезультатФункции.Вставить("Ошибка",         Ложь);
	РезультатФункции.Вставить("НовыеОснования", Новый Массив);
	
	ConnectionId = Неопределено; 
	Если ПараметрыЗаполнения.context_params = Неопределено Тогда 
		
		РезультатФункции.ТекстСообщения = "Нет входа в учетную запись!";
		РезультатФункции.Ошибка = Истина;
		Возврат РезультатФункции;
		
	КонецЕсли;
	
	ПараметрыЗаполнения.context_params.Свойство("ConnectionId", ConnectionId);
	
	ПараметрыВызова	= Новый Соответствие();
	ПараметрыВызова.Вставить("params",          ПараметрыЗаполнения.context_params);
	ПараметрыВызова.Вставить("commands_result", Новый Массив);
	ПараметрыВызова.Вставить("endpoint",        "");
	ПараметрыВызова.Вставить("operation_uuid",  СокрЛП(Новый УникальныйИдентификатор));
	ПараметрыВызова.Вставить("ini_name",        ПараметрыЗаполнения.ini_name);
	ПараметрыВызова.Вставить("connection_uuid", ConnectionId);
	ПараметрыВызова.Вставить("ref",             ПараметрыЗаполнения.Основание);
	
	Попытка
		XMLИниФайл = ПараметрыЗаполнения.ТранспортБлокли.Load_ini(ПараметрыЗаполнения.ini_name, ПараметрыВызова);		
	Исключение
		XMLИниФайл = Неопределено;
	КонецПопытки;
	 	
	Если Не (ТипЗнч(XMLИниФайл) = Тип("Строка") И Врег(Лев(XMLИниФайл, 4)) = "<XML") Тогда
		РезультатФункции.ТекстСообщения = "Не найдена INI для данного типа документа";
		РезультатФункции.Ошибка = Истина; 
		Возврат РезультатФункции;
	КонецЕсли;	
	
	Результат = ПараметрыЗаполнения.ТранспортБлокли.API_BLOCKLY_RUN(ПараметрыВызова);
	
	Если Результат.status <> "complete" Тогда
		РезультатФункции.ТекстСообщения = "Ошибка расчета INI. Данные не получены";
		РезультатФункции.Ошибка = Истина;
		Возврат РезультатФункции;
	КонецЕсли;
	
	ДанныеИзИНИ = Результат.data;
	
	СформироватьНовыеОснования(РезультатФункции, ДанныеИзИНИ);
	ДополнитьПодстановки(ДанныеИзИНИ, ПараметрыЗаполнения);
	
	Подстановки = Новый Соответствие;
	ЭТрН_Погрузка = Новый Соответствие;
	ЭТрН_Погрузка.Вставить("ЭТрН_1110339", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеИзИНИ));
	Подстановки.Вставить("Подстановки", ЭТрН_Погрузка);
	
	ПараметрыЗагрузки = Saby_ТНЗагрузкаСервер.ПараметрыЗагрузкиДанныхДокумента();
	ПараметрыЗагрузки.ДанныеДокумента          = Подстановки;
	ПараметрыЗагрузки.Ссылка                   = ПараметрыЗаполнения.Объект.Ссылка;
	ПараметрыЗагрузки.ИдСбис                   = Неопределено;
	ПараметрыЗагрузки.ИзДокумента              = Истина;
	ПараметрыЗагрузки.ЭтоЗаполнениеСПомощьюINI = Истина;
	
	Если ПараметрыЗаполнения.ЭтоВыбранныйДокумент Тогда
		ПараметрыЗагрузки.ДокументОснование = ПараметрыЗаполнения.Основание; 
	КонецЕсли;
	
	Saby_ТНЗагрузкаСервер.ЗагрузкаДанныхДокумента(ПараметрыЗагрузки);
	
	УстановитьЗапретЗаполнения(ПараметрыЗаполнения);
	
	РезультатФункции.ТекстСообщения = "Заполнение на основании завершено";
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ЗаполнениеНаОснованииINI

Функция ТипыПоУмолчаниюДляЗаполненияНаОсновании()
	
	РезультатФункции = Новый Массив;
	
	ДоступныеКонфигурации = Saby_ТНОбщегоНазначенияСервер.ДоступныеКонфигурации();
	
	СинонимКонфигурации = Метаданные.Синоним;
	
	Если Не ЭтоДоступнаяКонфигурация(СинонимКонфигурации, ДоступныеКонфигурации)
		Или СинонимКонфигурации = ДоступныеКонфигурации.УАТ Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	РезультатФункции.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
	РезультатФункции.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	РезультатФункции.Добавить(Тип("ДокументСсылка.ПеремещениеТоваров"));
	РезультатФункции.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	
	Если СинонимКонфигурации <> ДоступныеКонфигурации.Бух3 Тогда
		РезультатФункции.Добавить(Тип("ДокументСсылка.ОтгрузкаТоваровСХранения"));  
		РезультатФункции.Добавить(Тип("ДокументСсылка.ПередачаТоваровХранителю"));
		РезультатФункции.Добавить(Тип("ДокументСсылка.ТранспортнаяНакладная"));
	КонецЕсли;
	
	Если Метаданные.Синоним = ДоступныеКонфигурации.ЕРП Тогда 
		
		РезультатФункции.Добавить(Тип("ДокументСсылка.ВозвратСырьяДавальцу"));		
		РезультатФункции.Добавить(Тип("ДокументСсылка.ПередачаДавальцу"));
		РезультатФункции.Добавить(Тип("ДокументСсылка.ПередачаСырьяПереработчику"));
		
	КонецЕсли;
	
	Если Метаданные.Синоним = ДоступныеКонфигурации.КА Тогда
		
		РезультатФункции.Добавить(Тип("ДокументСсылка.ПередачаСырьяПереработчику"));
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ЭтоДоступнаяКонфигурация(СинонимКонфигурации, ДоступныеКонфигурации)
	
	РезультатФункции = Ложь;
	
	Для Каждого КлючЗначение Из ДоступныеКонфигурации Цикл
		Если КлючЗначение.Значение = СинонимКонфигурации Тогда
			РезультатФункции = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПользовательскиеТипыДляЗаполненияНаОсновании()
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатФункции = ХранилищеОбщихНастроек.Загрузить("Saby", "ТипыДляЗаполненияНаОснованииДокументаТРН");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаписьОшибокВЖурналРегистрации(СписокДокументов) 
	
	Если ТипЗнч(СписокДокументов) <> Тип("Соответствие") Тогда
		Возврат; 
	КонецЕсли;
		
	// Запись ошибок в ЖР
	Если СписокДокументов.Количество() Тогда
		
		Для Каждого ОшибкиДокумента Из СписокДокументов Цикл   
			
			МассивОшибок = ОписанияОшибок(ОшибкиДокумента.Значение.СписокОшибок);
			
			Описание = "Не выгружен документ " + СокрЛП(ОшибкиДокумента.Ключ);
			Текст    = СтрСоединить(МассивОшибок, Символы.ПС);
									
			Saby_ТНОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации(ОшибкиДокумента.Ключ, Описание, Текст);
						
		КонецЦикла;	
				
	КонецЕсли;
	
КонецПроцедуры

Функция ОписанияОшибок(СписокОшибок)

	РезультатФункции = Новый Массив;

	Для Каждого СтруктураОшибки Из СписокОшибок Цикл

		РезультатФункции.Добавить(СтруктураОшибки.ТекстДляОднойОшибки);

	КонецЦикла;

	Возврат РезультатФункции;

КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ПечатнаяФормаPDFИзСБИС

Процедура ЗаполнитьПараметрыЗагрузкиПечатнойФормыПоСсылке(Параметры, ПовторноеПолучение = Ложь)
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Saby_Состояние.UID, """") КАК UID,
	|	Saby_ТранспортнаяНакладная.Номер КАК Номер,
	|	Saby_ТранспортнаяНакладная.Дата КАК Дата
	|ИЗ
	|	Документ.Saby_ТранспортнаяНакладная КАК Saby_ТранспортнаяНакладная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Saby_Состояние КАК Saby_Состояние
	|		ПО (Saby_Состояние.Объект = Saby_ТранспортнаяНакладная.Ссылка)
	|ГДЕ
	|	Saby_ТранспортнаяНакладная.Ссылка = &СсылкаНаДокумент";
	
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент", Параметры.СсылкаНаДокумент);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		
		Параметры.УИДСбис = ВыборкаДанных.UID;
		Параметры.Номер   = ВыборкаДанных.Номер;
		Параметры.Дата    = ВыборкаДанных.Дата;
		
	КонецЕсли;
	
	Если Не ПовторноеПолучение И Параметры.УИДСбис = "" Тогда
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(Параметры.СсылкаНаДокумент);
		РезультатЗаписи = ЗаписатьДокументВСбис(МассивДокументов, Параметры.context_params);
		Если РезультатЗаписи.Успешно Тогда
			ЗаполнитьПараметрыЗагрузкиПечатнойФормыПоСсылке(Параметры, Истина);
		Иначе
			Параметры.СписокДокументов = РезультатЗаписи.СписокДокументов;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СсылкаНаPDF(ПараметрыЗагрузки)
	
	РезультатФункции = Неопределено;
	
	Если Не ЗначениеЗаполнено(ПараметрыЗагрузки.УИДСбис) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Идентификатор", ПараметрыЗагрузки.УИДСбис);
	Параметры.Вставить("ДопПоля",       "");
	
	Попытка		
		
		Результат = ПараметрыЗагрузки.ОбъектОбработки.local_helper_read_document(
			ПараметрыЗагрузки.context_params,
			Параметры);

		РезультатФункции = Результат["СсылкаНаPDF"];
		
	Исключение
		
		ИнфоОшибки = ИнформацияОбОшибке();
		
		Saby_ТНОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации(
			ПараметрыЗагрузки.СсылкаНаДокумент,
			"Не удалось получить печатную форму",
			ИнфоОшибки.Описание);
		
	КонецПопытки;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СтруктураПрисоединенногоФайла(ПараметрыЗагрузки)
	
	ШаблонИмениФайла = "ЭТрН №%1 от №%2 (%3)";
	
	ИмяБезРасширения = СтрШаблон(
		ШаблонИмениФайла,
		ПараметрыЗагрузки.Номер,
		Формат(ПараметрыЗагрузки.Дата, "ДФ=dd.MM.yyyy"),
		ПараметрыЗагрузки.УИДСбис);
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ИмяБезРасширения",           ИмяБезРасширения);
	РезультатФункции.Вставить("РасширениеБезТочки",         "pdf");
	РезультатФункции.Вставить("СсылкаНаПрисоединенныйФайл", Неопределено);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы КАК Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы
	|ГДЕ
	|	НЕ Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы.ПометкаУдаления
	|	И Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы.Наименование ПОДОБНО ""%&Наименование%""";
	
	ЗапросДанных.Текст = СтрЗаменить(ЗапросДанных.Текст, "&Наименование", ПараметрыЗагрузки.УИДСбис);
	ЗапросДанных.УстановитьПараметр("ВладелецФайла", ПараметрыЗагрузки.СсылкаНаДокумент);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		НайденнаяСсылка = ВыборкаДанных.Ссылка;
	Иначе
		НайденнаяСсылка = Справочники.Saby_ТранспортнаяНакладнаяПрисоединенныеФайлы.ПустаяСсылка();
	КонецЕсли;
	
	Если Не НайденнаяСсылка.Пустая() Тогда
		РезультатФункции.СсылкаНаПрисоединенныйФайл = НайденнаяСсылка;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ПечатнаяФормаPDFИзСБИС
