
#Область ПрограммныйИнтерфейс

// Возвращает массив типов доступных для заполнения на основании.
//
// Параметры:
//  ЗначенияПоУмолчанию - Булево - признак получения типов по умолчанию
//
// Возвращаемое значение:
//   Массив - массив типов выбранных для заполнения на основании.
//
Функция ТипыДляЗаполненияНаОсновании(ЗначенияПоУмолчанию = Ложь) Экспорт
	
	Если Не ЗначенияПоУмолчанию Тогда
		РезультатФункции = ПользовательскиеТипыДляЗаполненияНаОсновании();
	Иначе
		РезультатФункции = Неопределено;
	КонецЕсли;
	
	Если РезультатФункции = Неопределено Тогда
		РезультатФункции = ТипыПоУмолчаниюДляЗаполненияНаОсновании();
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Сохраняет выбранные типы документов для заполнения на основании выбранные пользователем.
//
// Параметры:
//  МассивТипов - Массив - массив типов
//
Процедура СохранитьВыбранныеТипыДляЗаполненияНаОсновании(МассивТипов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеОбщихНастроек.Сохранить("Saby", "ТипыДляЗаполненияНаОснованииДокументаТРН", МассивТипов);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет документ на основании другого документа с помощью ИНИ.
//
// Параметры:
//  Объект - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения.
//  ДокументОснование - ДокументСсылка - ссылка на документ основание.
//
// Возвращаемое значение:
//   Структура - результат заполнения на основании ИНИ
//
Функция ЗаполнитьНаОснованииINI(Объект, ДокументОснование) Экспорт
	
	ПараметрыЗаполнения = ПараметрыЗаполненияНаОснованииINI();
	
	ПараметрыЗаполнения.Объект = Объект;
	
	ПерваяИтерация = Истина;
	
	ОснованияДляЗаполнения = ДанныеОснованийДляЗаполненияНаОснованииINI(ДокументОснование);
	Для Каждого СтруктураОснования Из ОснованияДляЗаполнения Цикл
		
		ПараметрыЗаполнения.ini_name             = СтруктураОснования.ini_name;
		ПараметрыЗаполнения.Основание            = СтруктураОснования.Основание;
		ПараметрыЗаполнения.ЭтоВыбранныйДокумент = СтруктураОснования.Основание = ДокументОснование;
		ПараметрыЗаполнения.ЭтоПервоеОснование   = ПерваяИтерация;
		ПараметрыЗаполнения.РольКонтрагента      = СтруктураОснования.РольКонтрагента;
		
		РезультатФункции = РезультатЗаполненияНаОснованииINI(ПараметрыЗаполнения);
		
		Если РезультатФункции.Ошибка Тогда
			Прервать;
		КонецЕсли;
		
		ДобавитьОснованияДляЗаполнения(ОснованияДляЗаполнения, РезультатФункции);
		
		ПерваяИтерация = Ложь;
		
	КонецЦикла;
	
	Если РезультатФункции.Ошибка Тогда 					
		РезультатФункции.Вставить("ТекстЗаголовка", "Ошибка");		
		РезультатФункции.Вставить("Картинка",       БиблиотекаКартинок["Saby_Ошибка32"]); 		
	Иначе                                                        		
		РезультатФункции.Вставить("ТекстЗаголовка", "Выполнено");
		РезультатФункции.Вставить("Картинка",       БиблиотекаКартинок["Saby_Успешно32"]);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции	

// Возвращает структуру реквизитов документа, относящиеся титулу
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.Saby_ПутевойЛист - ссылка на документ
//  ТипТитула - ПеречислениеСсылка.Saby_ТипТитулаЭПЛ - ссылка на тип титула
//
// Возвращаемое значение:
//   Структура - структура полученных данных документа
//
Функция ДанныеДокумента(СсылкаНаДокумент, ТипТитула) Экспорт
	
	ТипыТитулов = Перечисления.Saby_ТипТитулаЭтрН.ВсеТипыТитулов();
	
	Если Не ЗначениеЗаполнено(ТипТитула) Или ТипТитула = ТипыТитулов.Погрузка Тогда
		
		Возврат ВыгрузкаДанныеПогрузка(СсылкаНаДокумент);
				
	ИначеЕсли ТипТитула = ТипыТитулов.ПолучениеГруза Тогда
		
		Возврат ВыгрузкаДанныеПолучениеГруза(СсылкаНаДокумент);
		
	ИначеЕсли ТипТитула = ТипыТитулов.ПриемкаГруза Тогда
		
		Возврат ВыгрузкаДанныеПриемкаГруза(СсылкаНаДокумент);
		
	ИначеЕсли ТипТитула = ТипыТитулов.ВыдачаГруза Тогда    
		
		Возврат ВыгрузкаДанныеВыдачаГруза(СсылкаНаДокумент);  
				
	Иначе 	
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Получает данные документа для выгрузки в формате подстановок
//
// Параметры:
//  ДанныеДокумента - Структура - структура данных документа
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//
// Возвращаемое значение:
//   Структура - структура данных для выгрузки в формате подстановок.
//     * Идентификатор - Строка - идентификатор документа СБИС
//     * Вложение - Массив - массив структур вложений в формате подстановок.
//
Функция ДанныеДляВыгрузки(ДанныеДокумента, ПараметрыВыгрузки) Экспорт
	
    СтруктураВложения = ВложениеНаВыгрузку(ПараметрыВыгрузки.ТипТитула, ДанныеДокумента);
	Если ЗначениеЗаполнено(СтруктураВложения) Тогда
		
		ПараметрыДокументаДляАПИ = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыДокументаДляАПИ(
			ПараметрыВыгрузки.ИмяМетаданных);
		
		Вложение = Новый Структура;
		Вложение.Вставить("Тип",         ПараметрыДокументаДляАПИ.ТипДляВыгрузки);
		Вложение.Вставить("Подтип",      СтруктураВложения.Титул);
		Вложение.Вставить("Подстановка", СтруктураВложения.Вложение);
		
		// Регламент для документа. Ошибка на онлайн с подстановкой иного регламента
		Регламент = Новый Структура;		
		Регламент.Вставить("Название", ПараметрыДокументаДляАПИ.Регламент);
		Вложение.Вставить("Регламент", Регламент);		
		
		// обход ошибки с не верной подстановкой организации
		Saby_ТНВыгрузкаСервер.ЗаполнитьНашуОрганизацию(Вложение, ПараметрыВыгрузки);
		
		ДокументСтруктура = Новый Структура;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИдентификаторСБИС) Тогда
			ДокументСтруктура.Вставить("Идентификатор", ПараметрыВыгрузки.ИдентификаторСБИС);
		КонецЕсли;
		
		МассивВложений = Новый Массив;
		МассивВложений.Добавить(Вложение);
		ДокументСтруктура.Вставить("Вложение", МассивВложений);
		
	Иначе
		ДокументСтруктура = Новый Структура;
	КонецЕсли;
	
	Возврат ДокументСтруктура;
	
КонецФункции

// Получает дату из подстановок указанного титула, полученного с онлайна.
//
// Параметры:
//  Вложение - Соответствие - значение подстановок с онлайна.
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - титул, для которого получаем дату.
//  СтруктураВложения - Структура - структура данных вложения.
//
// Возвращаемое значение:
//   Дата - значение даты
//
Функция ДатаВложения(Вложение, Титул, СтруктураВложения = Неопределено) Экспорт
	
	Если Вложение["ДатаВложенияТитула"] <> Неопределено Тогда
		
		РезультатФункции = Вложение["ДатаВложенияТитула"];
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.Погрузка Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "1110339.Файл.Документ.ДатИнфГО")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "1110339.Файл.Документ.ВрИнфГО");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ПолучениеГруза Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "1110340.Файл.Документ.ДатИнфПрвПрием")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "1110340.Файл.Документ.ВрИнфПрвПрием");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "1110341.Файл.Документ.ДатИнфГП")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "1110341.Файл.Документ.ВрИнфГП");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ВыдачаГруза Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "1110342.Файл.Документ.ДатИнфПрвВыд")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "1110342.Файл.Документ.ВрИнфПрвВыд");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.Переадресовка Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "1110343.Файл.Документ.ДатаИнфПА")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "1110343.Файл.Документ.ВрИнфПА");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ПереадресовкаУведомление Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "1167009.Файл.Документ.ДатаУвПА")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "1167009.Файл.Документ.ВрУвПА");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ЗаменаВодителяТС Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "1110344.Файл.Документ.ДатИнфЗамен")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "1110344.Файл.Документ.ВрИнфЗамен");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.СогласованиеСтоимости Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "1110346.Файл.Документ.ДатПУДИнфГО")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "1110346.Файл.Документ.ВрПУДИнфГО");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ИзменениеСтоимости Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "1110345.Файл.Документ.ДатПУДИнфПрв")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "1110345.Файл.Документ.ВрПУДИнфПрв");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.УведомлениеОУточнении Тогда
		
		ДатаСтрокой = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Документ.Данные.ДатаПол")
			+ " "
			+ Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Документ.Данные.ВремяПол");
		
		РезультатФункции = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаСтрокой);
		
    Иначе 	
		
		РезультатФункции = Неопределено;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Получает идентификатор из подстановок указанного титула, полученного с онлайна.
//
// Параметры:
//  Вложение - Соответствие - значение подстановок с онлайна.
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - титул, для которого получаем дату.
//  СтруктураВложения - Структура - структура данных вложения.
//
// Возвращаемое значение:
//   Строка - идентификатор титула
//
Функция ИдентификаторВложения(Вложение, Титул, СтруктураВложения = Неопределено) Экспорт
    
	ПредставленияТитула = Перечисления.Saby_ТипТитулаЭтрН.ПредставленияТитула(Титул);
	
	Если Вложение["ИдентификаторВложенияТитула"] <> Неопределено Тогда
		ИдФайл = Вложение["ИдентификаторВложенияТитула"];
	ИначеЕсли ПредставленияТитула.КодТитула = "1115113" Тогда
		ИдФайл = Вложение["Документ"]["Данные"]["ИдФайл"];
	Иначе
		ИдФайл = Вложение[ПредставленияТитула.КодТитула]["Файл"]["ИдФайл"];
	КонецЕсли;
	
	РезультатФункции = Прав(ИдФайл, 36);
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

Функция МенеджерТитулов() Экспорт
	
	Возврат Перечисления.Saby_ТипТитулаЭтрН;
	
КонецФункции

// Возвращает параметры для выполнения ФЛК
//
// Параметры:
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//
// Возвращаемое значение:
//   Структура - структура данных для дальнейшей проверки реквизитов
//
Функция ПараметрыПроверкиРеквизитов(ДанныеДокумента, ПараметрыВыгрузки) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ПроверяемыеРеквизиты", Новый Массив);
	
	ОшибкиПоРеквизитам = Saby_ТНОбщегоНазначенияСервер.СоответствиеРеквизитовОшибок(ПараметрыВыгрузки);
	РезультатФункции.Вставить("ОшибкиПоРеквизитам", ОшибкиПоРеквизитам);
	
	ТекущийЭтап = ПараметрыВыгрузки.ТипТитула;
	
	ТипыТитулов = Перечисления.Saby_ТипТитулаЭтрН.ВсеТипыТитулов();
	
	Если Перечисления.Saby_ТипТитулаЭтрН.ЭтоПервыйТитул(ТекущийЭтап) Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаПогрузка(
			ДанныеДокумента, РезультатФункции.ПроверяемыеРеквизиты, ПараметрыВыгрузки);
	ИначеЕсли ТекущийЭтап = ТипыТитулов.ПриемкаГруза Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаПриемкаГруза(РезультатФункции.ПроверяемыеРеквизиты);
	ИначеЕсли ТекущийЭтап = ТипыТитулов.Переадресовка Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаПереадресовка(РезультатФункции.ПроверяемыеРеквизиты);
	ИначеЕсли ТекущийЭтап = ТипыТитулов.ПереадресовкаУведомление Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаУведомлениеОПереадресовке(РезультатФункции.ПроверяемыеРеквизиты);
	ИначеЕсли ТекущийЭтап = ТипыТитулов.ЗаменаВодителяТС Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаЗаменаВодителяТС(ДанныеДокумента, РезультатФункции.ПроверяемыеРеквизиты);
	ИначеЕсли ТекущийЭтап = ТипыТитулов.ИзменениеСтоимости Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаИзменениеСтоимости(РезультатФункции.ПроверяемыеРеквизиты);
	ИначеЕсли ТекущийЭтап = ТипыТитулов.СогласованиеСтоимости Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаСогласованиеСтоимости(РезультатФункции.ПроверяемыеРеквизиты);
	Иначе
		РезультатФункции.ПроверяемыеРеквизиты = Новый Массив;
	КонецЕсли;
	
	РезультатФункции.ПроверяемыеРеквизиты.Добавить("Отметки.ДатаВремя");
	РезультатФункции.ПроверяемыеРеквизиты.Добавить("Отметки.Описание");
	РезультатФункции.ПроверяемыеРеквизиты.Добавить("Акты.Документ");
	РезультатФункции.ПроверяемыеРеквизиты.Добавить("Штрафы.Расчет");
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает имя таблицы документа с учетом специфики
//
// Параметры:
//  ИмяТабличнойЧасти - Строка - наименование табличной части из конфигуратора
//  СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - строка табличной части документа
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//
// Возвращаемое значение:
//   Строка - наименование таблицы на форме документа
//
Функция ИмяТЧДокумента(ИмяТабличнойЧасти, СтрокаТабличнойЧасти, ДанныеДокумента) Экспорт
    
	РезультатФункции = ИмяТабличнойЧасти;
	
	ТабличныеЧастиОтметок = Новый Массив;
	ТабличныеЧастиОтметок.Добавить("Отметки");
	ТабличныеЧастиОтметок.Добавить("Акты");
	ТабличныеЧастиОтметок.Добавить("Штрафы");
	
	Если ТабличныеЧастиОтметок.Найти(ИмяТабличнойЧасти) = Неопределено Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	СтрокаДляПроверки = Неопределено;
	Если ИмяТабличнойЧасти = "Отметки" Тогда
		СтрокаДляПроверки = СтрокаТабличнойЧасти;
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("КлючСтроки", СтрокаТабличнойЧасти.КлючСтроки_Отметки);
		
		СтрокиОтметок = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ДанныеДокумента.Отметки, Отбор);
		Если СтрокиОтметок.Количество() > 0 Тогда
			СтрокаДляПроверки = СтрокиОтметок[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоОтметкиВыгрузки(СтрокаДляПроверки) Тогда
		РезультатФункции = РезультатФункции + "_Выгрузка";
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПроверятьРеквизитДокумента(ИмяРеквизита, ДанныеДокумента) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак необходимости ФЛК реквизитов табличной части документа
//
// Параметры:
//  СтрокаТЧ - СтрокаТаблицыЗначений - строка табличной части документа
//  ИмяТЧ - Строка - имя табличной части документа
//  ИмяРеквизита - Строка - имя реквизита табличной части документа
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//
// Возвращаемое значение:
//   Булево - Истина, если проверять необходимо
//
Функция ПроверятьРеквизитТЧДокумента(СтрокаТЧ, ИмяТЧ, ИмяРеквизита, ДанныеДокумента) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Выполняет нестандартные проверки ФЛК с логикой сложнее, чем заполнен незаполнен.
//
// Параметры:
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//  ПараметрыПроверкиРеквизитов - Структура - см. функцию ПараметрыПроверкиРеквизитов
//  Ошибки - Массив,Неопределено - массив для накопления ошибок
//
Процедура ВыполнитьДополнительныеПроверкиФЛК(ДанныеДокумента, ПараметрыВыгрузки,
		ПараметрыПроверкиРеквизитов, Ошибки) Экспорт
		
	ТипыТитулов = Перечисления.Saby_ТипТитулаЭтрН.ВсеТипыТитулов();
		
	Если Перечисления.Saby_ТипТитулаЭтрН.ЭтоПервыйТитул(ПараметрыВыгрузки.ТипТитула) Тогда
		
		ДопПроверкиФЛКПогрузка(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки);
			
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов.Переадресовка Тогда
		
		ДопПроверкиФЛКПереадресовка(ДанныеДокумента, ПараметрыПроверкиРеквизитов, Ошибки);
		
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов.ПереадресовкаУведомление Тогда
		
		ДопПроверкиФЛКУведомлениеОПереадресовке(ДанныеДокумента, ПараметрыПроверкиРеквизитов, Ошибки);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#Область Команды

// Заполняет список команд печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти // Команды

Функция ВложенияЗагружены(Вложения, Титул, ОбъектДок, ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Вложения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Основные титулы
	Если Титул = Перечисления.Saby_ТипТитулаЭтрН.Погрузка Тогда 
		ЗагрузкаТитулПогрузка(ОбъектДок, Вложения, Титул, ДопПараметры); 
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ПолучениеГруза Тогда 
		ЗагрузкаТитулПолучениеГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза Тогда
		ЗагрузкаТитулПриемкаГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ВыдачаГруза Тогда
		ЗагрузкаТитулВыдачаГруза(ОбъектДок, Вложения, Титул, ДопПараметры); 		
		
	// Динамические титулы	
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.Переадресовка Тогда
		ЗагрузкаТитулПереадресовка(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ПереадресовкаУведомление Тогда 	
		ЗагрузкаТитулУведомлениеОПереадресовке(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ЗаменаВодителяТС Тогда 	
		ЗагрузкаТитулЗаменаВодителяТС(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.ИзменениеСтоимости Тогда 	
		ЗагрузкаТитулИзменениеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.СогласованиеСтоимости Тогда	
		ЗагрузкаТитулСогласованиеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	// Отрицательное завершение ДО	
	ИначеЕсли Титул = Перечисления.Saby_ТипТитулаЭтрН.УведомлениеОУточнении Тогда
		ЗагрузкаТитулУведомленияОУточнении(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
			
КонецФункции

Функция ТитулыДляЗагрузки(ОбъектДок, ПараметрыЗагрузки) Экспорт
	
	ТекущиеЗначения = Saby_ТНЗагрузкаСервер.ТекущиеЗначенияДокумента(ОбъектДок, ПараметрыЗагрузки);
	
	Этап = ТекущиеЗначения.Титул;
	
	Если ЗначениеЗаполнено(ТекущиеЗначения.Состояние) Тогда  
	   КодСостояния = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеЗначения.Состояние, "ИдентификаторСБИС");
	КонецЕсли;   
	
	ТипыТитулов = Перечисления.Saby_ТипТитулаЭтрН.ВсеТипыТитулов();
	
    МассивТитуловДляЗагрузки = Новый Массив;
	
	ДОЗавершенУспешно      = 7;
	ДОЗавершенОтрицательно = 9;
	
	Если КодСостояния = ДОЗавершенУспешно
		Или КодСостояния = ДОЗавершенОтрицательно Тогда
		
		Если ПараметрыЗагрузки.ТолькоАктивныйЭтап Тогда
			МассивТитуловДляЗагрузки.Добавить(Этап);
		Иначе
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ВыдачаГруза);
			// - стоимость может быть изменена уже после завершения ДО
			// исключение из общей схемы
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ИзменениеСтоимости);
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.СогласованиеСтоимости);
		КонецЕсли;
		
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.УведомлениеОУточнении);
		
		Возврат МассивТитуловДляЗагрузки;	
		
	КонецЕсли;	
	
	// Если динамический титул, то всегда читаем только его.
	// Никакие дополнительные данные не нужны, так как его считываем сразу после отправки, когда основные титулы загружены.
	Если Перечисления.Saby_ТипТитулаЭтрН.ЭтоДинамическийТитул(Этап) Тогда
		
		МассивТитуловДляЗагрузки.Добавить(Этап);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.УведомлениеОУточнении);
		
		Возврат МассивТитуловДляЗагрузки;
		
	КонецЕсли;
	
	Если ПараметрыЗагрузки.ТолькоАктивныйЭтап Тогда
		
		// В регистре состояния нет данных о текущем этапе, при этом документооборот не завершен.
		Если Этап.Пустая() Тогда
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.Погрузка);
		Иначе
			МассивТитуловДляЗагрузки.Добавить(Этап);
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.УведомлениеОУточнении);
		КонецЕсли;
		
	Иначе
		
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.Погрузка);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ПолучениеГруза);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ПриемкаГруза);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ВыдачаГруза);
		
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.Переадресовка);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ЗаменаВодителяТС);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ПереадресовкаУведомление);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.ИзменениеСтоимости);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.СогласованиеСтоимости);
		
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов.УведомлениеОУточнении);
		
	КонецЕсли;
	
	Возврат МассивТитуловДляЗагрузки;

КонецФункции

Функция ТекущиеЭтапыДокумента(Форма) Экспорт
	
	РезультатФункции = Новый Массив;
	
	ДанныеСостояния = РегистрыСведений.Saby_Состояние.ПрочитатьПоОбъекту(Форма.Объект.Ссылка);
	Если ДанныеСостояния <> Неопределено Тогда
		ТекущийТитул = Перечисления.Saby_ТипТитулаЭтрН.ЗначениеПоПредставлению(ДанныеСостояния.АктивныйЭтап);
	Иначе
		ТекущийТитул = Перечисления.Saby_ТипТитулаЭтрН.ПервыйТитул();
	КонецЕсли;
	
	РезультатФункции.Добавить(ТекущийТитул);
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

#Область ФЛК

Процедура ДополнитьПроверяемыеРеквизитыЭтапаПогрузка(ДанныеДокумента, ПроверяемыеРеквизиты, ПараметрыВыгрузки)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	ПроверяемыеРеквизиты.Добавить("Направление");
	ПроверяемыеРеквизиты.Добавить("Отправитель");
	
	Если ПараметрыВыгрузки.ПроверятьПоляСОХ Тогда
		ПроверяемыеРеквизиты.Добавить("Составитель");
		ПроверяемыеРеквизиты.Добавить("Составитель_НаОснованииДокумент");
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("Получатель");
	ПроверяемыеРеквизиты.Добавить("Перевозчик");
	ПроверяемыеРеквизиты.Добавить("Погрузка_Адрес");
	ПроверяемыеРеквизиты.Добавить("Отправитель_АдресДоставки");
	ПроверяемыеРеквизиты.Добавить("Отправитель_ЗаявкаНомер");
	ПроверяемыеРеквизиты.Добавить("Отправитель_ЗаявкаДата");
	
	ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.РегистрационныйНомер");
	ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.Грузоподъемность");
	ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.Вместимость");
	ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.ТипВладения");
	
	ПроверяемыеРеквизиты.Добавить("Водители");
	
	Если ЗначениеЗаполнено(РеквизитыОбъекта.Отправитель_Экспедитор) И РеквизитыОбъекта.Отправитель_Экспедитор Тогда
		ПроверяемыеРеквизиты.Добавить("Заказчик");
		ПроверяемыеРеквизиты.Добавить("Заказчик_Договор");
	КонецЕсли;
	
	Если РеквизитыОбъекта.Владелец_Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.Неизвестен Тогда
		ПроверяемыеРеквизиты.Добавить("Владелец_НеизвестенПричина");
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.ПустаяСсылка()
		И РеквизитыОбъекта.Владелец_Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.ДругоеЮрЛицо Тогда
		ПроверяемыеРеквизиты.Добавить("ВладелецОбъекта");
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("Грузы");
	ПроверяемыеРеквизиты.Добавить("Грузы.Тип");
	ПроверяемыеРеквизиты.Добавить("Грузы.Наименование");
	ПроверяемыеРеквизиты.Добавить("Грузы.Состояние");
	ПроверяемыеРеквизиты.Добавить("Грузы.Количество");
	ПроверяемыеРеквизиты.Добавить("Грузы.МассаБрутто");
	ПроверяемыеРеквизиты.Добавить("Грузы.СпособУпаковки");
	ПроверяемыеРеквизиты.Добавить("Грузы.ВидТары");
	
	Грузы = ДанныеДокумента.Грузы;
	Если ЗначениеЗаполнено(Грузы) Тогда		
		Отбор = Новый Структура("Тип", Перечисления.Saby_ТипГруза.Контейнер);
		ЕстьТипГрузаКонтейнер = Грузы.НайтиСтроки(Отбор).Количество() > 0;
		Если ЕстьТипГрузаКонтейнер Тогда
			ПроверяемыеРеквизиты.Добавить("Контейнеры");
			ПроверяемыеРеквизиты.Добавить("Контейнеры.Номер");
			ПроверяемыеРеквизиты.Добавить("Контейнеры.Количество");
			ПроверяемыеРеквизиты.Добавить("Отправитель_СопроводительнаяВедомость");
		КонецЕсли;
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("Погрузка_КоличествоМест");
	ПроверяемыеРеквизиты.Добавить("Погрузка_Масса");
	ПроверяемыеРеквизиты.Добавить("Погрузка_МассаМетодРасчета");
	
	Если ПараметрыВыгрузки.ПроверятьПоляОтгрузчика Тогда
		Если Не ПараметрыВыгрузки.ПроверятьПоляСОХ Тогда
			ПроверяемыеРеквизиты.Добавить("Отгрузчик");
		КонецЕсли;
		ПроверяемыеРеквизиты.Добавить("Отгрузка_НаОснованииДокумент");
		ПроверяемыеРеквизиты.Добавить("Отгрузка_ОтветственныйСтруктура");
		ПроверяемыеРеквизиты.Добавить("Отгрузка_ОтветственныйДолжность");
		ПроверяемыеРеквизиты.Добавить("Отгрузка_ОтветственныйНаОсновании");
	КонецЕсли;
	
	РольПолучатель = Перечисления.Saby_РолиКонтрагентов.Получатель;
	Если РеквизитыОбъекта.ИнициаторПереадресации = РольПолучатель Тогда
		ПроверяемыеРеквизиты.Добавить("ИнициаторПереадресацииПодтверждение");
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("Погрузка_ДатаВремя");
	ПроверяемыеРеквизиты.Добавить("Погрузка_ДатаВремяПрибыл");
	ПроверяемыеРеквизиты.Добавить("Погрузка_ДатаВремяУбыл");
	
	ПроверяемыеРеквизиты.Добавить("Маркировки.Значение");
	ПроверяемыеРеквизиты.Добавить("ОпасныеГрузы.ОпасныйГруз");
	
	ПроверяемыеРеквизиты.Добавить("СпецРазрешения.Номер");
	ПроверяемыеРеквизиты.Добавить("СпецРазрешения.Дата");
	ПроверяемыеРеквизиты.Добавить("СпецРазрешения.Срок");
	
	ПроверяемыеРеквизиты.Добавить("КонтактныеДанные.Тип");
	ПроверяемыеРеквизиты.Добавить("КонтактныеДанные.Значение");
	
	ПроверяемыеРеквизиты.Добавить("ПутевыеЛисты.Документ");
	
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаПриемкаГруза(ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Выгрузка_КоличествоМест");
	ПроверяемыеРеквизиты.Добавить("Выгрузка_МассаБрутто");
	ПроверяемыеРеквизиты.Добавить("Выгрузка_МассаМетодРасчета");
	ПроверяемыеРеквизиты.Добавить("Выгрузка_Состояние");
	
	ПроверяемыеРеквизиты.Добавить("Выгрузка_ДатаВремя");
	ПроверяемыеРеквизиты.Добавить("Выгрузка_ДатаВремяПрибыл");
	ПроверяемыеРеквизиты.Добавить("Выгрузка_ДатаВремяУбыл");
	
КонецПроцедуры 

Процедура ДополнитьПроверяемыеРеквизитыЭтапаПереадресовка(ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("ПереадресовкаНаОсновании");
	
	ПроверяемыеРеквизиты.Добавить("Отправитель_АдресДоставки");
	ПроверяемыеРеквизиты.Добавить("Отправитель_ДоставитьДо");
		
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаУведомлениеОПереадресовке(ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("ОформилСтруктура");
	
	ПроверяемыеРеквизиты.Добавить("Отправитель_АдресДоставки");
	ПроверяемыеРеквизиты.Добавить("Отправитель_ДоставитьДо");
		
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаЗаменаВодителяТС(ДанныеДокумента, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("ДатаВремяЗамены");
	Если ДанныеДокумента.Реквизиты.ТипСмены  = "Описание" Тогда
		ПроверяемыеРеквизиты.Добавить("ПричинаЗамены");
	Иначе
		ПроверяемыеРеквизиты.Добавить("ДокументЗамены");
	КонецЕсли;
	
	Если ДанныеДокумента.Реквизиты.ЗаменаТС Тогда
		ПроверяемыеРеквизиты.Добавить("СпецРазрешения.Номер");
		ПроверяемыеРеквизиты.Добавить("СпецРазрешения.Дата");
		ПроверяемыеРеквизиты.Добавить("СпецРазрешения.Срок");
	КонецЕсли;
	
	Если ДанныеДокумента.Реквизиты.ЗаменаТС Или ДанныеДокумента.Реквизиты.ЗаменаПрицепы Тогда
		ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства");
		ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.РегистрационныйНомер");
		ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.Грузоподъемность");
		ПроверяемыеРеквизиты.Добавить("ТранспортныеСредства.Вместимость");
	КонецЕсли;
	
	Если ДанныеДокумента.Реквизиты.ЗаменаВодители Тогда
		ПроверяемыеРеквизиты.Добавить("Водители");
		ПроверяемыеРеквизиты.Добавить("Водители.ФИО");
		ПроверяемыеРеквизиты.Добавить("ПутевыеЛисты.Документ");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаИзменениеСтоимости(ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Сумма");
	
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаСогласованиеСтоимости(ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Сумма");
	
КонецПроцедуры

Процедура ПроверитьКонтактныеДанные(ДанныеДокумента, Роль, Тип, Ошибки, СоответствиеРеквизитовОшибок)
	
	Если Не ЗначениеЗаполнено(Роль) Тогда
		РольСсылка = Перечисления.Saby_РолиКонтрагентов.ПустаяСсылка();
	Иначе
		РольСсылка = Перечисления.Saby_РолиКонтрагентов[Роль];
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", РольСсылка);
	Отбор.Вставить("Тип",  Перечисления.ТипыКонтактнойИнформации[Тип]);
	
	ИмяРеквизита = Роль + "_" + Тип;
	
	СтруктураДанныхОшибки = СоответствиеРеквизитовОшибок.Получить(ИмяРеквизита);
	
	НайденныеСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ДанныеДокумента.КонтактныеДанные, Отбор);	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(
			Ошибки, 
			ИмяРеквизита, 
			СтруктураДанныхОшибки.Ошибка,
			СтруктураДанныхОшибки.РеквизитОбъекта,
			СтруктураДанныхОшибки.ЭлементФормы);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоОтметкиВыгрузки(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Роль = Перечисления.Saby_РолиКонтрагентов.Получатель Тогда
		Возврат Истина;
	ИначеЕсли СтрокаТабличнойЧасти.Роль = Перечисления.Saby_РолиКонтрагентов.Перевозчик Тогда
		Возврат СтрокаТабличнойЧасти.Этап = Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза
			Или СтрокаТабличнойЧасти.Этап = Перечисления.Saby_ТипТитулаЭтрН.ВыдачаГруза;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ДопПроверкиФЛКПогрузка(ДанныеДокумента, ПараметрыВыгрузки, ПараметрыПроверкиРеквизитов, Ошибки)
	
	ИмяТелефон = "Телефон";
	
	ПроверитьКонтактныеДанные(
		ДанныеДокумента, "Отправитель", ИмяТелефон, Ошибки, ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам);
		
	ПроверитьКонтактныеДанные(
		ДанныеДокумента, "Получатель", ИмяТелефон, Ошибки, ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам);
		
	ПроверитьКонтактныеДанные(
		ДанныеДокумента, "Перевозчик", ИмяТелефон, Ошибки, ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам);
		
	Владелец_Тип = ДанныеДокумента.Реквизиты.Владелец_Тип;
	Если Владелец_Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.ДругоеЮрЛицо Тогда
		ПроверитьКонтактныеДанные(
			ДанныеДокумента, "ВладелецОбъекта", ИмяТелефон, Ошибки, ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПроверятьПоляОтгрузчика И Не ПараметрыВыгрузки.ПроверятьПоляСОХ Тогда
		ПроверитьКонтактныеДанные(
			ДанныеДокумента, "Отгрузчик", ИмяТелефон, Ошибки, ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам);
	КонецЕсли;
	
	Saby_ТНОбщегоНазначенияСервер.ПроверитьЗаполнениеТранспортногоСредства(
		ДанныеДокумента, Ошибки, ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам);
	
	Saby_ТНОбщегоНазначенияСервер.ПроверитьЗаполнениеТипаВладения(
		ДанныеДокумента, Ошибки, ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам);
	
КонецПроцедуры

Процедура ДопПроверкиФЛКПереадресовка(ДанныеДокумента, ПараметрыПроверкиРеквизитов, Ошибки)
	
	Если ЗначениеЗаполнено(ДанныеДокумента.Реквизиты.Получатель) Тогда
		ПроверитьКонтактныеДанные(
			ДанныеДокумента, "Получатель", "Телефон", Ошибки, ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДопПроверкиФЛКУведомлениеОПереадресовке(ДанныеДокумента, ПараметрыПроверкиРеквизитов, Ошибки)
	
	Структура = Saby_ТНОбщегоНазначенияСервер.ДесериализоватьЗначение(ДанныеДокумента.Реквизиты.ОформилСтруктура);
	
	Если Не Структура.Свойство("Фамилия") Или Не ЗначениеЗаполнено(Структура.Фамилия) Тогда
		ИмяРеквизита = "Оформил";
		
		СтруктураДанныхОшибки = ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам.Получить(ИмяРеквизита);
		
		Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(
			Ошибки, 
			ИмяРеквизита, 
			СтруктураДанныхОшибки.Ошибка,
			СтруктураДанныхОшибки.РеквизитОбъекта,
			СтруктураДанныхОшибки.ЭлементФормы);
	КонецЕсли;
	
	Если Не Структура.Свойство("Телефоны") Или Не ЗначениеЗаполнено(Структура.Телефоны) Тогда
		ИмяРеквизита = "Оформил_Телефон";
		
		СтруктураДанныхОшибки = ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам.Получить(ИмяРеквизита);
		
		Saby_ТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(
			Ошибки, 
			ИмяРеквизита, 
			СтруктураДанныхОшибки.Ошибка,
			СтруктураДанныхОшибки.РеквизитОбъекта,
			СтруктураДанныхОшибки.ЭлементФормы);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДанныеДокумента.Реквизиты.Получатель) Тогда
		ПроверитьКонтактныеДанные(
			ДанныеДокумента, "Получатель", "Телефон", Ошибки, ПараметрыПроверкиРеквизитов.ОшибкиПоРеквизитам);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ФЛК

#Область ЗаполнениеНаОснованииINI

Функция ДанныеОснованийДляЗаполненияНаОснованииINI(ДокументОснование)
	
	ОписаниеТипаОснования = Новый ОписаниеТипов;
	ОписаниеТипаОснования = Новый ОписаниеТипов(ОписаниеТипаОснования, Справочники.ТипВсеСсылки().Типы());
	ОписаниеТипаОснования = Новый ОписаниеТипов(ОписаниеТипаОснования, Документы.ТипВсеСсылки().Типы());
	
	ОписаниеТипаИмениИНИ = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(128, ДопустимаяДлина.Переменная));
	ОписаниеТипаРолейКонтрагентов = Новый ОписаниеТипов("ПеречислениеСсылка.Saby_РолиКонтрагентов");
	
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("Основание",       ОписаниеТипаОснования);
	РезультатФункции.Колонки.Добавить("ini_name",        ОписаниеТипаИмениИНИ);
	РезультатФункции.Колонки.Добавить("РольКонтрагента", ОписаниеТипаРолейКонтрагентов);
	
	ШаблонИмениINI = "Blockly_%1_ЭТрН_read";
	ИмяМетаданных = Saby_ТНОбщегоНазначенияСервер.ИмяМетаданныхДокумента(ДокументОснование);
	
	СтруктураОснования = РезультатФункции.Добавить();
	СтруктураОснования.Основание = ДокументОснование;
	СтруктураОснования.ini_name  = СтрШаблон(ШаблонИмениINI, ИмяМетаданных);
	
	ЕстьТранспортнаяНакладнаяВКонфигурации = Метаданные.Документы.Найти("ТранспортнаяНакладная") <> Неопределено;
	Если ЕстьТранспортнаяНакладнаяВКонфигурации Тогда
		
		ЭтоТранспортнаяНакладная = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ТранспортнаяНакладная");
		
		Если ЭтоТранспортнаяНакладная Тогда
			ЗапросДанных = Новый Запрос;
			ЗапросДанных.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование КАК Ссылка
			|ИЗ
			|	Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
			|ГДЕ
			|	ТранспортнаяНакладнаяДокументыОснования.Ссылка = &ДокументОснование
			|	И НЕ ТранспортнаяНакладнаяДокументыОснования.Ссылка.ПометкаУдаления";
			
			ЗапросДанных.УстановитьПараметр("ДокументОснование", ДокументОснование);
			
			ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
			Если ВыборкаДанных.Следующий() Тогда
				
				ИмяМетаданных = Saby_ТНОбщегоНазначенияСервер.ИмяМетаданныхДокумента(ВыборкаДанных.Ссылка);
				
				СтруктураОснования = РезультатФункции.Вставить(0);
				СтруктураОснования.Основание = ВыборкаДанных.Ссылка;
				СтруктураОснования.ini_name  = СтрШаблон(ШаблонИмениINI, ИмяМетаданных);
				
			КонецЕсли;
		Иначе
			ЗапросДанных = Новый Запрос;
			ЗапросДанных.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТранспортнаяНакладнаяДокументыОснования.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
			|ГДЕ
			|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование = &ДокументОснование
			|	И НЕ ТранспортнаяНакладнаяДокументыОснования.Ссылка.ПометкаУдаления";
			
			ЗапросДанных.УстановитьПараметр("ДокументОснование", ДокументОснование);
			
			ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
			Если ВыборкаДанных.Следующий() Тогда
				
				СтруктураОснования = РезультатФункции.Добавить();
				СтруктураОснования.Основание = ВыборкаДанных.Ссылка;
				СтруктураОснования.ini_name  = "Blockly_ТранспортнаяНакладная_ЭТрН_read";
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДобавитьОснованияДляЗаполнения(ОснованияДляЗаполнения, РезультатФункции)
	
	Если Не РезультатФункции.Свойство("НовыеОснования") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("РольКонтрагента");
	
	Для Каждого НовоеОснование Из РезультатФункции.НовыеОснования Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, НовоеОснование);
		НайденныеСтроки = ОснованияДляЗаполнения.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтруктураОснования = НайденныеСтроки[0];
		Иначе
			СтруктураОснования = ОснованияДляЗаполнения.Добавить();
		КонецЕсли;
		
		СтруктураОснования.Основание       = НовоеОснование.Основание;
		СтруктураОснования.ini_name        = "Blockly_ДанныеКонтрагентаОрганизации_ЭТрН_read";
		СтруктураОснования.РольКонтрагента = НовоеОснование.РольКонтрагента;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьНовыеОснования(СтруктураРезультата, ДанныеИзИНИ)
	
	ГрузоотправительСсылка = ДанныеИзИНИ["ГрузоотправительСсылка"];
	
	Если ЗначениеЗаполнено(ГрузоотправительСсылка) Тогда
		
		СтруктураОснования = СтруктураОснования(ГрузоотправительСсылка, Перечисления.Saby_РолиКонтрагентов.Отправитель);
		СтруктураРезультата.НовыеОснования.Добавить(СтруктураОснования);
		
	КонецЕсли;
	
	ГрузополучательСсылка = ДанныеИзИНИ["ГрузополучательСсылка"];
	Если ЗначениеЗаполнено(ГрузополучательСсылка) Тогда
		СтруктураОснования = СтруктураОснования(ГрузополучательСсылка, Перечисления.Saby_РолиКонтрагентов.Получатель);
		СтруктураРезультата.НовыеОснования.Добавить(СтруктураОснования);
	КонецЕсли;
	
	ГрузоперевозчикСсылка = ДанныеИзИНИ["ГрузоперевозчикСсылка"];
	Если ЗначениеЗаполнено(ГрузоперевозчикСсылка) Тогда
		СтруктураОснования = СтруктураОснования(ГрузоперевозчикСсылка, Перечисления.Saby_РолиКонтрагентов.Перевозчик);
		СтруктураРезультата.НовыеОснования.Добавить(СтруктураОснования);
	КонецЕсли;
	
	ЗаказчикСсылка = ДанныеИзИНИ["ЗаказчикСсылка"];
	Если ЗначениеЗаполнено(ЗаказчикСсылка) Тогда
		СтруктураОснования = СтруктураОснования(ЗаказчикСсылка, Перечисления.Saby_РолиКонтрагентов.Заказчик);
		СтруктураРезультата.НовыеОснования.Добавить(СтруктураОснования);
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураОснования(Основание, РольКонтрагента)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Основание",       Основание);
	РезультатФункции.Вставить("РольКонтрагента", РольКонтрагента);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДополнитьПодстановки(ДанныеИзИНИ, ПараметрыЗаполнения)
	
	Если ПараметрыЗаполнения.РольКонтрагента = Перечисления.Saby_РолиКонтрагентов.Отправитель Тогда
		ДополнитьПодстановкиГрузоотправителя(ДанныеИзИНИ, ПараметрыЗаполнения);
	ИначеЕсли ПараметрыЗаполнения.РольКонтрагента = Перечисления.Saby_РолиКонтрагентов.Получатель Тогда
		ДополнитьПодстановкиГрузополучателя(ДанныеИзИНИ, ПараметрыЗаполнения);
	ИначеЕсли ПараметрыЗаполнения.РольКонтрагента = Перечисления.Saby_РолиКонтрагентов.Перевозчик Тогда
		ДополнитьПодстановкиГрузоперевозчика(ДанныеИзИНИ, ПараметрыЗаполнения);
	ИначеЕсли ПараметрыЗаполнения.РольКонтрагента = Перечисления.Saby_РолиКонтрагентов.Заказчик Тогда
		ДополнитьПодстановкиЗаказчика(ДанныеИзИНИ, ПараметрыЗаполнения);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПодстановкиГрузоотправителя(ДанныеИзИНИ, ПараметрыЗаполнения)
	
	Если Не ЗапрещеноЗаполнять("ПунктПогрузки", ПараметрыЗаполнения) Тогда
		ПунктПогрузкиВыгрузки = ДанныеИзИНИ["ПунктПогрузкиВыгрузки"];
		Если ПунктПогрузкиВыгрузки <> Неопределено Тогда
			ДанныеИзИНИ.Вставить("ПунктПогрузки", ПунктПогрузкиВыгрузки);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗапрещеноЗаполнять("Грузоотправитель", ПараметрыЗаполнения) Тогда
		ДанныеИзИНИ.Вставить("Грузоотправитель", ДанныеЮрЛицаИзИНИ(ДанныеИзИНИ));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПодстановкиГрузополучателя(ДанныеИзИНИ, ПараметрыЗаполнения)
	
	Если Не ЗапрещеноЗаполнять("ПунктВыгрузки", ПараметрыЗаполнения) Тогда
		ПунктПогрузкиВыгрузки = ДанныеИзИНИ["ПунктПогрузкиВыгрузки"];
		Если ПунктПогрузкиВыгрузки <> Неопределено Тогда
			ДанныеИзИНИ.Вставить("ПунктВыгрузки", ПунктПогрузкиВыгрузки);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗапрещеноЗаполнять("Грузополучатель", ПараметрыЗаполнения) Тогда
		ДанныеИзИНИ.Вставить("Грузополучатель", ДанныеЮрЛицаИзИНИ(ДанныеИзИНИ));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПодстановкиГрузоперевозчика(ДанныеИзИНИ, ПараметрыЗаполнения)
	
	Если Не ЗапрещеноЗаполнять("Грузоперевозчик", ПараметрыЗаполнения) Тогда
		ДанныеИзИНИ.Вставить("Грузоперевозчик", ДанныеЮрЛицаИзИНИ(ДанныеИзИНИ));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПодстановкиЗаказчика(ДанныеИзИНИ, ПараметрыЗаполнения)
	
	Если Не ЗапрещеноЗаполнять("Заказчик", ПараметрыЗаполнения) Тогда
		ДанныеИзИНИ.Вставить("Заказчик", ДанныеЮрЛицаИзИНИ(ДанныеИзИНИ));
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеЮрЛицаИзИНИ(ДанныеИзИНИ)
	
	РезультатФункции = Новый Соответствие;
	РезультатФункции.Вставить("Контакты",  ДанныеИзИНИ["Контакты"]);
	РезультатФункции.Вставить("Адрес",     ДанныеИзИНИ["Адрес"]);
	РезультатФункции.Вставить("Реквизиты", ДанныеИзИНИ["Реквизиты"]);
	РезультатФункции.Вставить("Название",  ДанныеИзИНИ["Название"]);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура УстановитьЗапретЗаполнения(ПараметрыЗаполнения)
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Saby_ТранспортнаяНакладная.Погрузка_Адрес КАК Погрузка_Адрес,
	|	Saby_ТранспортнаяНакладная.Отправитель_АдресДоставки КАК Отправитель_АдресДоставки
	|ИЗ
	|	Документ.Saby_ТранспортнаяНакладная КАК Saby_ТранспортнаяНакладная
	|ГДЕ
	|	Saby_ТранспортнаяНакладная.Ссылка = &Ссылка";
	
	ЗапросДанных.УстановитьПараметр("Ссылка", ПараметрыЗаполнения.Объект.Ссылка);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		
		Если ЗначениеЗаполнено(ВыборкаДанных.Погрузка_Адрес) Тогда
			ПараметрыЗаполнения.ЗапретЗаполнения.Вставить("ПунктПогрузки", Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаДанных.Отправитель_АдресДоставки) Тогда
			ПараметрыЗаполнения.ЗапретЗаполнения.Вставить("ПунктВыгрузки", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапрещеноЗаполнять(ИмяПоля, ПараметрыЗаполнения)
	
	Возврат ПараметрыЗаполнения.ЗапретЗаполнения[ИмяПоля] <> Неопределено;
	
КонецФункции

Функция ПараметрыЗаполненияНаОснованииINI()
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ini_name",             "");
	РезультатФункции.Вставить("Объект",               Неопределено);
	РезультатФункции.Вставить("Основание",            Неопределено);
	РезультатФункции.Вставить("ЭтоВыбранныйДокумент", Ложь);
	РезультатФункции.Вставить("ЭтоПервоеОснование",   Ложь);
	РезультатФункции.Вставить("ТранспортБлокли",      Обработки.SABY.Создать());
	РезультатФункции.Вставить("context_params",       Saby_Core.ПроверитьНаличиеПараметровПодключения());
	РезультатФункции.Вставить("РольКонтрагента",      Перечисления.Saby_РолиКонтрагентов.ПустаяСсылка());
	РезультатФункции.Вставить("ЗапретЗаполнения",     Новый Соответствие);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция РезультатЗаполненияНаОснованииINI(ПараметрыЗаполнения)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ТекстСообщения", "");
	РезультатФункции.Вставить("Ошибка",         Ложь);
	РезультатФункции.Вставить("НовыеОснования", Новый Массив);
	
	ConnectionId = Неопределено; 
	Если ПараметрыЗаполнения.context_params = Неопределено Тогда 
		
		РезультатФункции.ТекстСообщения = "Нет входа в учетную запись!";
		РезультатФункции.Ошибка = Истина;
		Возврат РезультатФункции;
		
	КонецЕсли;
	
	ПараметрыЗаполнения.context_params.Свойство("ConnectionId", ConnectionId);
	
	ПараметрыВызова	= Новый Соответствие();
	ПараметрыВызова.Вставить("params",          ПараметрыЗаполнения.context_params);
	ПараметрыВызова.Вставить("commands_result", Новый Массив);
	ПараметрыВызова.Вставить("endpoint",        "");
	ПараметрыВызова.Вставить("operation_uuid",  СокрЛП(Новый УникальныйИдентификатор));
	ПараметрыВызова.Вставить("ini_name",        ПараметрыЗаполнения.ini_name);
	ПараметрыВызова.Вставить("connection_uuid", ConnectionId);
	ПараметрыВызова.Вставить("ref",             ПараметрыЗаполнения.Основание);
	
	Попытка
		XMLИниФайл = ПараметрыЗаполнения.ТранспортБлокли.Load_ini(ПараметрыЗаполнения.ini_name, ПараметрыВызова);		
	Исключение
		XMLИниФайл = Неопределено;
	КонецПопытки;
	 	
	Если Не (ТипЗнч(XMLИниФайл) = Тип("Строка") И Врег(Лев(XMLИниФайл, 4)) = "<XML") Тогда
		РезультатФункции.ТекстСообщения = "Не найдена INI для данного типа документа";
		РезультатФункции.Ошибка = Истина; 
		Возврат РезультатФункции;
	КонецЕсли;	
	
	Результат = ПараметрыЗаполнения.ТранспортБлокли.API_BLOCKLY_RUN(ПараметрыВызова);
	
	Если Результат.status <> "complete" Тогда
		РезультатФункции.ТекстСообщения = "Ошибка расчета INI. Данные не получены";
		РезультатФункции.Ошибка = Истина;
		Возврат РезультатФункции;
	КонецЕсли;
	
	ДанныеИзИНИ = Результат.data;
	
	СформироватьНовыеОснования(РезультатФункции, ДанныеИзИНИ);
	ДополнитьПодстановки(ДанныеИзИНИ, ПараметрыЗаполнения);
	
	ПервыйТитул = Перечисления.Saby_ТипТитулаЭтрН.ПервыйТитул();
	ПредставленияТитула = Перечисления.Saby_ТипТитулаЭтрН.ПредставленияТитула(ПервыйТитул);
	
	МассивПодстановок = Новый Массив;
	МассивПодстановок.Добавить(ДанныеИзИНИ);
	
	Подстановки = Новый Соответствие;
	ЭТрН_Погрузка = Новый Соответствие;
	ЭТрН_Погрузка.Вставить(ПредставленияТитула.ИмяПодстановки, МассивПодстановок);
	Подстановки.Вставить("Подстановки", ЭТрН_Погрузка);
	
	ИмяМетаданных = Saby_ТНОбщегоНазначенияСервер.ИмяМетаданныхДокумента(ПараметрыЗаполнения.Объект.Ссылка);
	
	ПараметрыЗагрузки = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыЗагрузки();
	ПараметрыЗагрузки.ДанныеДокумента          = Подстановки;
	ПараметрыЗагрузки.Ссылка                   = ПараметрыЗаполнения.Объект.Ссылка;
	ПараметрыЗагрузки.ИдСбис                   = Неопределено;
	ПараметрыЗагрузки.ИзДокумента              = Истина;
	ПараметрыЗагрузки.ЭтоЗаполнениеСПомощьюINI = Истина;
	ПараметрыЗагрузки.ИмяМетаданных            = ИмяМетаданных;
	
	Если ПараметрыЗаполнения.ЭтоВыбранныйДокумент Тогда
		ПараметрыЗагрузки.ДокументОснование = ПараметрыЗаполнения.Основание; 
	КонецЕсли;
	
	Saby_ТНЗагрузкаСервер.ЗагрузкаДанныхДокумента(ПараметрыЗагрузки);
	
	УстановитьЗапретЗаполнения(ПараметрыЗаполнения);
	
	РезультатФункции.ТекстСообщения = "Заполнение на основании завершено";
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ЗаполнениеНаОснованииINI

Функция ТипыПоУмолчаниюДляЗаполненияНаОсновании()
	
	РезультатФункции = Новый Массив;
	
	СинонимКонфигурации = Метаданные.Синоним;
	
	ДоступныеКонфигурации    = Saby_ТНОбщегоНазначенияСервер.ДоступныеКонфигурации();
	ЭтоДоступнаяКонфигурация = Saby_ТНОбщегоНазначенияСервер.ЭтоДоступнаяКонфигурация(
		СинонимКонфигурации, ДоступныеКонфигурации);
		
	Если Не ЭтоДоступнаяКонфигурация
		Или СинонимКонфигурации = ДоступныеКонфигурации.УАТ Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	РезультатФункции.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
	РезультатФункции.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	РезультатФункции.Добавить(Тип("ДокументСсылка.ПеремещениеТоваров"));
	РезультатФункции.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	
	Если СинонимКонфигурации <> ДоступныеКонфигурации.Бух3 Тогда
		РезультатФункции.Добавить(Тип("ДокументСсылка.ОтгрузкаТоваровСХранения"));  
		РезультатФункции.Добавить(Тип("ДокументСсылка.ПередачаТоваровХранителю"));
		РезультатФункции.Добавить(Тип("ДокументСсылка.ТранспортнаяНакладная"));
	КонецЕсли;
	
	Если Метаданные.Синоним = ДоступныеКонфигурации.ЕРП Тогда 
		
		РезультатФункции.Добавить(Тип("ДокументСсылка.ВозвратСырьяДавальцу"));		
		РезультатФункции.Добавить(Тип("ДокументСсылка.ПередачаДавальцу"));
		РезультатФункции.Добавить(Тип("ДокументСсылка.ПередачаСырьяПереработчику"));
		
	КонецЕсли;
	
	Если Метаданные.Синоним = ДоступныеКонфигурации.КА Тогда
		
		РезультатФункции.Добавить(Тип("ДокументСсылка.ПередачаСырьяПереработчику"));
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПользовательскиеТипыДляЗаполненияНаОсновании()
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатФункции = ХранилищеОбщихНастроек.Загрузить("Saby", "ТипыДляЗаполненияНаОснованииДокументаТРН");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатФункции;
	
КонецФункции

#Область ДанныеДокумента

Функция ВыгрузкаДанныеПогрузка(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Номер");
	Реквизиты.Добавить("Дата");
	Реквизиты.Добавить("Отправитель_СопроводительнаяВедомость");
	Реквизиты.Добавить("Заказчик_Договор");
	Реквизиты.Добавить("Отгрузка_НаОснованииДокумент");
	Реквизиты.Добавить("Отгрузка_ОтветственныйНаОсновании");
	Реквизиты.Добавить("ИнициаторПереадресацииПодтверждение");
	Реквизиты.Добавить("Отправитель");
	Реквизиты.Добавить("Получатель");
	Реквизиты.Добавить("Перевозчик");
	Реквизиты.Добавить("Составитель");
	Реквизиты.Добавить("Заказчик");
	Реквизиты.Добавить("РасчетПеревозки");
	Реквизиты.Добавить("Отправитель_ДоставитьДо");
	Реквизиты.Добавить("АдресДоставкиЗначение");
	Реквизиты.Добавить("Отправитель_АдресДоставки");
	Реквизиты.Добавить("Погрузка_ДатаВремя");
	Реквизиты.Добавить("Погрузка_Адрес");
	Реквизиты.Добавить("АдресПогрузкиЗначение");
	Реквизиты.Добавить("Отправитель_ТемператураОт");
	Реквизиты.Добавить("Отправитель_ТемператураДо");
	Реквизиты.Добавить("Отправитель_ВлажностьОт");
	Реквизиты.Добавить("Отправитель_ВлажностьДо");
	Реквизиты.Добавить("ИнициаторПереадресации");
	Реквизиты.Добавить("Отправитель_НормыПеревозки");
	Реквизиты.Добавить("Отправитель_ОграничениеСкорости");
	Реквизиты.Добавить("Отправитель_Пломба");
	Реквизиты.Добавить("Отправитель_ДоставитьСрок");
	Реквизиты.Добавить("Отправитель_ПерегрузкаЗапрещена");
	Реквизиты.Добавить("Владелец_Тип");
	Реквизиты.Добавить("Отгрузчик");
	Реквизиты.Добавить("ВладелецОбъекта");
	Реквизиты.Добавить("Владелец_НеизвестенПричина");
	Реквизиты.Добавить("Погрузка_КоличествоМест");
	Реквизиты.Добавить("Погрузка_Масса");
	Реквизиты.Добавить("Погрузка_МассаМетодРасчета");
	Реквизиты.Добавить("Погрузка_Состояние");
	Реквизиты.Добавить("Погрузка_ДатаВремяПрибыл");
	Реквизиты.Добавить("Погрузка_ДатаВремяУбыл");
	Реквизиты.Добавить("Отгрузка_ОтветственныйДолжность");
	Реквизиты.Добавить("Отгрузка_ОтветственныйСтруктура");
	Реквизиты.Добавить("Отправитель_ЗаявкаДата");
	Реквизиты.Добавить("Отправитель_ЗаявкаНомер");
	Реквизиты.Добавить("Отправитель_Экспедитор");
	Реквизиты.Добавить("Составитель_НаОснованииДокумент");
	Реквизиты.Добавить("Направление");
	Реквизиты.Добавить("ТипВладенияТС");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("СопроводительныеДокументы");
	Таблицы.Добавить("ДанныеЮрЛиц");
	Таблицы.Добавить("КонтактныеДанные");
	Таблицы.Добавить("ТранспортныеСредства");
	Таблицы.Добавить("СпецРазрешения");
	Таблицы.Добавить("Водители");
	Таблицы.Добавить("ПутевыеЛисты");
	Таблицы.Добавить("Отметки");
	Таблицы.Добавить("Акты");
	Таблицы.Добавить("Штрафы");
	Таблицы.Добавить("Грузы");
	Таблицы.Добавить("Контейнеры");
	Таблицы.Добавить("Маркировки");
	Таблицы.Добавить("СведенияГосСистем");
	Таблицы.Добавить("ОпасныеГрузы");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеПолучениеГруза(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Перевозчик_ПриемкаДатаВремя");
	Реквизиты.Добавить("Перевозчик_ПриемкаДатаВремяПрибыл");
	Реквизиты.Добавить("Перевозчик_ПриемкаДатаВремяУбыл");
	Реквизиты.Добавить("Перевозчик_ЗамечанияПоПогрузочнымРаботам");
	Реквизиты.Добавить("Перевозчик_ПогрузкаЗамечанияПоКоличеству");
	Реквизиты.Добавить("Перевозчик_ПогрузкаЗамечанияПоМассе");
	Реквизиты.Добавить("Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("Отметки");
	Таблицы.Добавить("Акты");
	Таблицы.Добавить("Штрафы");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеПриемкаГруза(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Выгрузка_ДатаВремя");
	Реквизиты.Добавить("Выгрузка_ДатаВремяПрибыл");
	Реквизиты.Добавить("Выгрузка_ДатаВремяУбыл");
	Реквизиты.Добавить("Выгрузка_МассаБрутто");
	Реквизиты.Добавить("Выгрузка_МассаНетто");
	Реквизиты.Добавить("Выгрузка_МассаМетодРасчета");
	Реквизиты.Добавить("Выгрузка_КоличествоМест");
	Реквизиты.Добавить("Выгрузка_Объем");
	Реквизиты.Добавить("Выгрузка_Состояние");
	Реквизиты.Добавить("Отправитель_ДоставитьДо");
	Реквизиты.Добавить("АдресДоставкиЗначение");
	Реквизиты.Добавить("Отправитель_АдресДоставки");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("Отметки");
	Таблицы.Добавить("Акты");
	Таблицы.Добавить("Штрафы");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеВыдачаГруза(СсылкаНаДокумент)
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Перевозчик_ВыгрузкаДатаВремя");
	Реквизиты.Добавить("Перевозчик_ВыгрузкаДатаВремяПрибыл");
	Реквизиты.Добавить("Перевозчик_ВыгрузкаДатаВремяУбыл");
	Реквизиты.Добавить("Перевозчик_ЗамечанияПоРазгрузочнымРаботам");
	Реквизиты.Добавить("Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза");
	
	Таблицы = Новый Массив;
	Таблицы.Добавить("Отметки");
	Таблицы.Добавить("Акты");
	Таблицы.Добавить("Штрафы");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы);
	
КонецФункции

Функция ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы)
	
	РезультатФункции = Новый Структура;
	
	// Ссылка всегда должна быть
	Реквизиты.Добавить("Ссылка");
	
	ТекстЗапросаРеквизитов = ТекстЗапросаРеквизитов();
	
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитыИзБД(
		РезультатФункции, СсылкаНаДокумент, Реквизиты, ТекстЗапросаРеквизитов);
	
	ДобавитьТаблицыИзБД(РезультатФункции, СсылкаНаДокумент, Таблицы);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ТекстЗапросаРеквизитов()
	
	Возврат "ВЫБРАТЬ
		|	Saby_ТН.Ссылка КАК Ссылка,
		|	Saby_ТН.Номер КАК Номер,
		|	Saby_ТН.Дата КАК Дата,
		|	Saby_ТН.ВладелецОбъекта КАК ВладелецОбъекта,
		|	Saby_ТН.Владелец_НеизвестенПричина КАК Владелец_НеизвестенПричина,
		|	Saby_ТН.Владелец_Тип КАК Владелец_Тип,
		|	Saby_ТН.Выгрузка_ДатаВремя КАК Выгрузка_ДатаВремя,
		|	Saby_ТН.Выгрузка_ДатаВремяПрибыл КАК Выгрузка_ДатаВремяПрибыл,
		|	Saby_ТН.Выгрузка_ДатаВремяУбыл КАК Выгрузка_ДатаВремяУбыл,
		|	Saby_ТН.Выгрузка_КоличествоМест КАК Выгрузка_КоличествоМест,
		|	Saby_ТН.Выгрузка_МассаБрутто КАК Выгрузка_МассаБрутто,
		|	Saby_ТН.Выгрузка_МассаНетто КАК Выгрузка_МассаНетто,
		|	Saby_ТН.Выгрузка_МассаМетодРасчета КАК Выгрузка_МассаМетодРасчета,
		|	Saby_ТН.Выгрузка_Состояние КАК Выгрузка_Состояние,
		|	Saby_ТН.Отправитель КАК Отправитель,
		|	Saby_ТН.Отправитель_АдресДоставки КАК Отправитель_АдресДоставки,
		|	Saby_ТН.Отправитель_ВлажностьДо КАК Отправитель_ВлажностьДо,
		|	Saby_ТН.Отправитель_ВлажностьОт КАК Отправитель_ВлажностьОт,
		|	Saby_ТН.Отправитель_ДоставитьДо КАК Отправитель_ДоставитьДо,
		|	Saby_ТН.Отправитель_ДоставитьСрок КАК Отправитель_ДоставитьСрок,
		|	Saby_ТН.Отправитель_ЗаявкаДата КАК Отправитель_ЗаявкаДата,
		|	Saby_ТН.Отправитель_ЗаявкаНомер КАК Отправитель_ЗаявкаНомер,
		|	Saby_ТН.ИнициаторПереадресации КАК ИнициаторПереадресации,
		|	Saby_ТН.ИнициаторПереадресацииПодтверждение КАК ИнициаторПереадресацииПодтверждение,
		|	Saby_ТН.Отправитель_НормыПеревозки КАК Отправитель_НормыПеревозки,
		|	Saby_ТН.Отправитель_ОграничениеСкорости КАК Отправитель_ОграничениеСкорости,
		|	Saby_ТН.Отправитель_ПерегрузкаЗапрещена КАК Отправитель_ПерегрузкаЗапрещена,
		|	Saby_ТН.Отправитель_Пломба КАК Отправитель_Пломба,
		|	Saby_ТН.Отправитель_СопроводительнаяВедомость КАК Отправитель_СопроводительнаяВедомость,
		|	Saby_ТН.Отправитель_ТемператураДо КАК Отправитель_ТемператураДо,
		|	Saby_ТН.Отправитель_ТемператураОт КАК Отправитель_ТемператураОт,
		|	Saby_ТН.Отправитель_Экспедитор КАК Отправитель_Экспедитор,
		|	Saby_ТН.Получатель КАК Получатель,
		|	Saby_ТН.Комментарий КАК Комментарий,
		|	Saby_ТН.Отгрузка_НаОснованииДокумент КАК Отгрузка_НаОснованииДокумент,
		|	Saby_ТН.Отгрузчик КАК Отгрузчик,
		|	Saby_ТН.Отгрузка_ОтветственныйСтруктура КАК Отгрузка_ОтветственныйСтруктура,
		|	Saby_ТН.Отгрузка_ОтветственныйНаОсновании КАК Отгрузка_ОтветственныйНаОсновании,
		|	Saby_ТН.Отгрузка_ОтветственныйДолжность КАК Отгрузка_ОтветственныйДолжность,
		|	Saby_ТН.Перевозчик КАК Перевозчик,
		|	Saby_ТН.Перевозчик_ВыгрузкаДатаВремя КАК Перевозчик_ВыгрузкаДатаВремя,
		|	Saby_ТН.Перевозчик_ВыгрузкаДатаВремяПрибыл КАК Перевозчик_ВыгрузкаДатаВремяПрибыл,
		|	Saby_ТН.Перевозчик_ВыгрузкаДатаВремяУбыл КАК Перевозчик_ВыгрузкаДатаВремяУбыл,
		|	Saby_ТН.Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза КАК Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза,
		|	Saby_ТН.Перевозчик_ЗамечанияПоПогрузочнымРаботам КАК Перевозчик_ЗамечанияПоПогрузочнымРаботам,
		|	Saby_ТН.Перевозчик_ЗамечанияПоРазгрузочнымРаботам КАК Перевозчик_ЗамечанияПоРазгрузочнымРаботам,
		|	Saby_ТН.Перевозчик_ПогрузкаЗамечанияПоКоличеству КАК Перевозчик_ПогрузкаЗамечанияПоКоличеству,
		|	Saby_ТН.Перевозчик_ПогрузкаЗамечанияПоМассе КАК Перевозчик_ПогрузкаЗамечанияПоМассе,
		|	Saby_ТН.Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза КАК Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза,
		|	Saby_ТН.Перевозчик_ПриемкаДатаВремя КАК Перевозчик_ПриемкаДатаВремя,
		|	Saby_ТН.Перевозчик_ПриемкаДатаВремяПрибыл КАК Перевозчик_ПриемкаДатаВремяПрибыл,
		|	Saby_ТН.Перевозчик_ПриемкаДатаВремяУбыл КАК Перевозчик_ПриемкаДатаВремяУбыл,
		|	Saby_ТН.Погрузка_Адрес КАК Погрузка_Адрес,
		|	Saby_ТН.Погрузка_ДатаВремя КАК Погрузка_ДатаВремя,
		|	Saby_ТН.Погрузка_ДатаВремяПрибыл КАК Погрузка_ДатаВремяПрибыл,
		|	Saby_ТН.Погрузка_ДатаВремяУбыл КАК Погрузка_ДатаВремяУбыл,
		|	Saby_ТН.Погрузка_КоличествоМест КАК Погрузка_КоличествоМест,
		|	Saby_ТН.Погрузка_Масса КАК Погрузка_Масса,
		|	Saby_ТН.Погрузка_МассаМетодРасчета КАК Погрузка_МассаМетодРасчета,
		|	Saby_ТН.Погрузка_Состояние КАК Погрузка_Состояние,
		|	Saby_ТН.Приемка_МассаБрутто КАК Приемка_МассаБрутто,
		|	Saby_ТН.Приемка_МассаНетто КАК Приемка_МассаНетто,
		|	Saby_ТН.Выгрузка_Объем КАК Выгрузка_Объем,
		|	Saby_ТН.Приемка_КоличествоМест КАК Приемка_КоличествоМест,
		|	Saby_ТН.Направление КАК Направление,
		|	Saby_ТН.Заказчик КАК Заказчик,
		|	Saby_ТН.Заказчик_Договор КАК Заказчик_Договор,
		|	Saby_ТН.Представление КАК Представление,
		|	Saby_ТН.Валюта КАК Валюта,
		|	Saby_ТН.ДатаИзменения КАК ДатаИзменения,
		|	Saby_ТН.АдресДоставкиЗначение КАК АдресДоставкиЗначение,
		|	Saby_ТН.АдресПогрузкиЗначение КАК АдресПогрузкиЗначение,
		|	Saby_ТН.Составитель КАК Составитель,
		|	Saby_ТН.Составитель_НаОснованииДокумент КАК Составитель_НаОснованииДокумент
		|ИЗ
		|	Документ.Saby_ТранспортнаяНакладная КАК Saby_ТН
		|ГДЕ
		|	Saby_ТН.Ссылка = &Ссылка";
	
КонецФункции

Процедура ДобавитьТаблицыИзБД(СтруктураДанных, СсылкаНаДокумент, Таблицы)
	
	МассивЗапросов = Новый Массив;
	
	УниверсальныйШаблонЗапроса =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Документ.Saby_ТранспортнаяНакладная.%1 КАК ТЧТранспортнойНакладной
	|ГДЕ
	|	ТЧТранспортнойНакладной.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Для Каждого ИмяТаблицы Из Таблицы Цикл
		
		Если ИмяТаблицы = "Грузы" Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Saby_ТН_Грузы.Ссылка КАК СсылкаДокумент,
			|	Saby_ТН_Грузы.НомерСтроки КАК НомерСтроки,
			|	Saby_ТН_Грузы.Тип КАК Тип,
			|	Saby_ТН_Грузы.Наименование КАК Наименование,
			|	Saby_ТН_Грузы.Заказчик КАК Заказчик,
			|	Saby_ТН_Грузы.Состояние КАК Состояние,
			|	Saby_ТН_Грузы.Количество КАК КоличествоМест,
			|	Saby_ТН_Грузы.Количество КАК Количество,
			|	Saby_ТН_Грузы.МассаБрутто КАК МассаБрутто,
			|	Saby_ТН_Грузы.Объем КАК Объем,
			|	Saby_ТН_Грузы.СпособУпаковки КАК Упаковка,
			|	Saby_ТН_Грузы.СпособУпаковки КАК СпособУпаковки,
			|	Saby_ТН_Грузы.ВидТары КАК ВидТары,
			|	Saby_ТН_Грузы.МассаНетто КАК МассаНетто,
			|	Saby_ТН_Грузы.Длина КАК Длина,
			|	Saby_ТН_Грузы.Ширина КАК Ширина,
			|	Saby_ТН_Грузы.Высота КАК Высота,
			|	Saby_ТН_Грузы.КоличествоПаллет КАК КоличествоПаллет,
			|	Saby_ТН_Грузы.Стоимость КАК СтоимостьВключаяНДС,
			|	Saby_ТН_Грузы.Плотность КАК Плотность,
			|	Saby_ТН_Грузы.КлючСтроки КАК КлючСтроки,
			|	Saby_ТН_Грузы.Валюта КАК Валюта,
			|	Saby_ТН_Грузы.НаименованиеГосСистемы КАК НаименованиеГосСистемы,
			|	Saby_ТН_Грузы.УчетнаяЕдиницаГосСистемы КАК УчетнаяЕдиницаГосСистемы,
			|	Saby_ТН_Грузы.ИнаяИнформацияГосСистемы КАК ИнаяИнформацияГосСистемы,
			|	ЕСТЬNULL(Saby_ТН_Грузы.ВидТары.Код, """") КАК ТараКод,
			|	ЕСТЬNULL(Saby_ТН_Грузы.Валюта.Код, """") КАК ВалютаКод
			|ИЗ
			|	Документ.Saby_ТранспортнаяНакладная.Грузы КАК Saby_ТН_Грузы
			|ГДЕ
			|	Saby_ТН_Грузы.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
		ИначеЕсли ИмяТаблицы = "ОпасныеГрузы" Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Saby_ТН_ОпаснГрузы.Ссылка КАК СсылкаДокумент,
			|	Saby_ТН_ОпаснГрузы.НомерСтроки КАК НомерСтроки,
			|	Saby_ТН_ОпаснГрузы.КлючСтроки_Грузы КАК КлючСтроки_Грузы,
			|	Saby_ОпасныеГрузы.Ссылка КАК ОпасныйГруз,
			|	Saby_ОпасныеГрузы.Наименование КАК НаименованиеОтгрузочное,
			|	Saby_ОпасныеГрузы.НомерООН КАК НомерООН,
			|	Saby_ОпасныеГрузы.ТехническоеНаименование КАК НаименованиеТехническое,
			|	Saby_ОпасныеГрузы.Комментарий КАК Комментарий,
			|	Saby_ОпасныеГрузы.Класс КАК Класс,
			|	Saby_ОпасныеГрузы.КлассификационныйКод КАК КлассификационныйКод,
			|	Saby_ОпасныеГрузы.ГруппаУпаковкиЗначение КАК ГруппаУпаковки,
			|	Saby_ОпасныеГрузы.ЗнакОпасности КАК ЗнакОпасности,
			|	Saby_ОпасныеГрузы.ОграничениеПроездаЧерезТуннели КАК КодОграниченияПроездТуннеля,
			|	Saby_ОпасныеГрузы.НазваниеРадионуклида КАК НазваниеРадионуклида,
			|	Saby_ОпасныеГрузы.ФизИХимФорма КАК ФизХимФорма,
			|	Saby_ОпасныеГрузы.МаксАктивность КАК РадиоактивныйМаксАктивность,
			|	Saby_ОпасныеГрузы.КатегорияУпаковки КАК КатегорияУпаковки,
			|	Saby_ОпасныеГрузы.ТранспортныйИндекс КАК ТранспортныйИндекс,
			|	Saby_ОпасныеГрузы.ИндексБезопасности КАК ИндексБезопасности,
			|	Saby_ОпасныеГрузы.ОпознавательныйЗнак КАК ОпознавательныйЗнак,
			|	Saby_ОпасныеГрузы.ПолнаяАктивность КАК РадиоактивныйПолнаяАктивность,
			|	Saby_ОпасныеГрузы.МассаНеттоВзрывчатый КАК МассаНеттоВзрывчатый,
			|	Saby_ОпасныеГрузы.МассаНеттоВзрывчатыйВсего КАК МассаНеттоВзрывчатыйВсего,
			|	Saby_ОпасныеГрузы.ПроцентСмеси КАК ПроцентСмеси,
			|	Saby_ОпасныеГрузы.ДатаИстеченияУдержания КАК ДатаИстеченияУдержания,
			|	Saby_ОпасныеГрузы.КонтрольнаяТемпература КАК ТемператураКонтрольная,
			|	Saby_ОпасныеГрузы.АварийнаяТемпература КАК ТемператураАварийная,
			|	Saby_ОпасныеГрузы.Представление КАК Представление
			|ИЗ
			|	Документ.Saby_ТранспортнаяНакладная.ОпасныеГрузы КАК Saby_ТН_ОпаснГрузы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Saby_ОпасныеГрузы КАК Saby_ОпасныеГрузы
			|		ПО Saby_ТН_ОпаснГрузы.ОпасныйГруз = Saby_ОпасныеГрузы.Ссылка
			|ГДЕ
			|	Saby_ТН_ОпаснГрузы.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	КлючСтроки_Грузы";
			
		ИначеЕсли ИмяТаблицы = "ТранспортныеСредства" Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.Ссылка КАК Ссылка,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.НомерСтроки КАК НомерСтроки,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.Вид КАК Вид,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.РегистрационныйНомер КАК РегистрационныйНомер,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.Тип КАК Тип,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.Марка КАК Марка,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.ВИН КАК ВИН,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.НомерСТС КАК НомерСТС,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.Грузоподъемность КАК Грузоподъемность,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.Вместимость КАК Вместимость,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.ТипВладения КАК ТипВладения,
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.ОснованияВладения КАК ОснованияВладения
			|ИЗ
			|	Документ.Saby_ТранспортнаяНакладная.ТранспортныеСредства КАК Saby_ТранспортнаяНакладнаяТранспортныеСредства
			|ГДЕ
			|	Saby_ТранспортнаяНакладнаяТранспортныеСредства.Ссылка = &Ссылка";
			
		Иначе
			
			ТекстЗапроса = СтрШаблон(УниверсальныйШаблонЗапроса, ИмяТаблицы);
			
		КонецЕсли;
		
		МассивЗапросов.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	РазделительЗапросов = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст = СтрСоединить(МассивЗапросов, РазделительЗапросов);
	ЗапросДанных.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Результат = ЗапросДанных.ВыполнитьПакет();
	Индекс = 0;
	Пока Индекс < Таблицы.Количество() Цикл
		СтруктураДанных.Вставить(Таблицы[Индекс], Результат[Индекс].Выгрузить());
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ДанныеДокумента

#Область Выгрузка

#Область ВыгрузитьДокументВJson

Функция ВложениеНаВыгрузку(ТекущийЭтап, ДанныеТитула)
	
	ТипыТитулов = Перечисления.Saby_ТипТитулаЭтрН.ВсеТипыТитулов();
	
	Если Не ЗначениеЗаполнено(ТекущийЭтап) Или ТекущийЭтап = ТипыТитулов.Погрузка Тогда
		
		СтруктураВложения = ТитулПогрузка(ДанныеТитула);
				
	ИначеЕсли ТекущийЭтап = ТипыТитулов.ПолучениеГруза Тогда
		
		СтруктураВложения = ТитулПолучениеГруза(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов.ПриемкаГруза Тогда
		
		СтруктураВложения = ТитулПриемкаГруза(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов.ВыдачаГруза Тогда    
		
		СтруктураВложения = ТитулВыдачаГруза(ДанныеТитула);  
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов.Переадресовка Тогда	
		
		СтруктураВложения = ТитулПереадресовка(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов.ПереадресовкаУведомление Тогда		
		
		СтруктураВложения = ТитулУведомлениеОПереадресовке(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов.ЗаменаВодителяТС Тогда		
		
		СтруктураВложения = ТитулЗаменаВодителя(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов.ИзменениеСтоимости Тогда		
		
		СтруктураВложения = ТитулИзменениеСтоимости(ДанныеТитула);

	ИначеЕсли ТекущийЭтап = ТипыТитулов.СогласованиеСтоимости Тогда
		
		СтруктураВложения = ТитулСогласованиеСтоимости(ДанныеТитула);
		
	Иначе 	
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
	ПредставленияТитула = Перечисления.Saby_ТипТитулаЭтрН.ПредставленияТитула(ТекущийЭтап);
	
	Структура = Новый Структура;
	Структура.Вставить("Титул",    ПредставленияТитула.КодТитула);
	Структура.Вставить("Вложение", СтруктураВложения);
		
	Возврат Структура;

КонецФункции

// Титул "1110339" Грузоотправитель погрузка
//
// Параметры:
// 	ДанныеДокумента - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
Функция ТитулПогрузка(ДанныеДокумента)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
		
	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;
	
	// Отдельно вынесены общие данные документа
	Дата = Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(РеквизитыОбъекта.Дата, Истина);
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("Номер", РеквизитыОбъекта.Номер);
	СтруктураДокумента.Вставить("Дата",	 Дата);
		
	ОбщаяСтруктура.Вставить("Документ", СтруктураДокумента);
	
	// Получим данные по всем вложенным документам 
	СопроводительныеДокументы = ВложенныеДокументы(ДанныеДокумента);
	
	// Данные по участникам документооборота
	ОбщаяСтруктура.Вставить(
		"Грузоотправитель",
		Saby_ТНВыгрузкаСервер.ДанныеЮрЛица("Отправитель", ДанныеДокумента, Истина));
	ОбщаяСтруктура.Вставить(
		"Грузополучатель",
		Saby_ТНВыгрузкаСервер.ДанныеЮрЛица("Получатель",  ДанныеДокумента));
	ОбщаяСтруктура.Вставить(
		"Грузоперевозчик",
		Saby_ТНВыгрузкаСервер.ДанныеЮрЛица("Перевозчик",  ДанныеДокумента));
	
	Если ЗначениеЗаполнено(РеквизитыОбъекта.Составитель) Тогда
		ОбщаяСтруктура.Вставить("Файл",             Новый Структура);
		ОбщаяСтруктура.Файл.Вставить(
			"Составитель",
			Saby_ТНВыгрузкаСервер.ДанныеСоставителя(ДанныеДокумента));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыОбъекта.Заказчик) Тогда 
		ОбщаяСтруктура.Вставить("Заказчик", Saby_ТНВыгрузкаСервер.ДанныеЮрЛица("Заказчик", ДанныеДокумента));
	КонецЕсли;
	
	// Дополнительные документы 
	Если ЗначениеЗаполнено(СопроводительныеДокументы.РасчетПеревозки) Тогда 
		ОбщаяСтруктура.Грузоотправитель.Вставить("ОснованиеРасчета", СопроводительныеДокументы.РасчетПеревозки);
	КонецЕсли;
		
	// Адреса доставки/погрузки
	ОбщаяСтруктура.Вставить("ПунктВыгрузки", ПунктВыгрузки(РеквизитыОбъекта));
	ОбщаяСтруктура.Вставить("ПунктПогрузки", ПунктПогрузки(РеквизитыОбъекта));
	
	// Условия перевозки, переехали из погрузки... нужен тест подставновки после выноса
	ИнициаторПодтверждение = СопроводительныеДокументы.ИнициаторПодтверждение;
	УсловияПеревозки      = УсловияПеревозки(ДанныеДокумента, ИнициаторПодтверждение);
	
	ОбщаяСтруктура.Вставить("УсловияПеревозки", УсловияПеревозки);
	
	// Погрузка
	Погрузка = ДанныеПогрузки(ДанныеДокумента, 
		СопроводительныеДокументы.ОснованиеОтгрузки, СопроводительныеДокументы.ОснованиеПолномочий);
	
	ОбщаяСтруктура.Вставить("Погрузка", Погрузка);
	
	// - удалим из общей структуры сопр. документов
	СопроводительныеДокументы.Удалить("РасчетПеревозки");
	СопроводительныеДокументы.Удалить("ОснованиеОтгрузки");
	СопроводительныеДокументы.Удалить("ОснованиеПолномочий");
	
	// Сопроводительные документы
	ОбщаяСтруктура.Вставить("СопроводительныеДокументы", СопроводительныеДокументы);
	
	// Транспорт и все с ним связанное 
	ОбщаяСтруктура.Вставить(
		"ТранспортноеСредство", Saby_ТНВыгрузкаСервер.ТранспортНаВыгрузку(ДанныеДокумента.ТранспортныеСредства));
	
	ОбщаяСтруктура.ТранспортноеСредство.Вставить(
		"Прицеп", Saby_ТНВыгрузкаСервер.ПрицепыНаВыгрузку(ДанныеДокумента.ТранспортныеСредства));
	ОбщаяСтруктура.ТранспортноеСредство.Вставить(
		"СпецУсловия", Saby_ТНВыгрузкаСервер.СпецУсловия(ДанныеДокумента.СпецРазрешения));
	
	ОбщаяСтруктура.Вставить(
		"Водители", Saby_ТНВыгрузкаСервер.ВодителиНаВыгрузку(ДанныеДокумента.Водители, ДанныеДокумента.ПутевыеЛисты));
	
	// Отметки, штрафы, акты
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Перечисления.Saby_ТипТитулаЭтрН.Погрузка);
	
	ОбщаяСтруктура.Вставить("Отметки", ОтметкиПоТитулу(ДанныеДокумента, Отбор));
	
	// Груз
	ОбщаяСтруктура.Вставить("Груз", ДанныеГруза(ДанныеДокумента));
	
	// Заявка на перевозку
	ОбщаяСтруктура.Вставить("ЗаявкаНаПеревозку", ЗаявкаНаПеревозку(РеквизитыОбъекта));
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110340" Перевозчик приемка груза
//
// Параметры:
// 	ДанныеДокумента - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
Функция ТитулПолучениеГруза(ДанныеДокумента)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
    Замечания = Новый Структура;
	
	ПриемкаДата = СтруктураВремя(РеквизитыОбъекта.Перевозчик_ПриемкаДатаВремя);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяПостановки", ПриемкаДата, Истина);
	
	ПрибылДата = СтруктураВремя(РеквизитыОбъекта.Перевозчик_ПриемкаДатаВремяПрибыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяПрибытия", ПрибылДата, Истина);
	
	УбылДата = СтруктураВремя(РеквизитыОбъекта.Перевозчик_ПриемкаДатаВремяУбыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяУбытия", УбылДата, Истина);
	
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ВыполненныеРаботы", 
		РеквизитыОбъекта.Перевозчик_ЗамечанияПоПогрузочнымРаботам);
		
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "КоличествоМест",
		РеквизитыОбъекта.Перевозчик_ПогрузкаЗамечанияПоКоличеству);
		
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "МассаГруза",
		РеквизитыОбъекта.Перевозчик_ПогрузкаЗамечанияПоМассе);
		
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "СостояниеГруза",
		РеквизитыОбъекта.Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза);
	
	Погрузка = Новый Структура;
	Погрузка.Вставить("ЗамечанияПеревозчика", Замечания);
	
	ОбщаяСтруктура = Новый Структура;
	ОбщаяСтруктура.Вставить("Погрузка", Погрузка);
	
	// Отметки, штрафы, акты
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Перечисления.Saby_ТипТитулаЭтрН.ПолучениеГруза);
	
	ОбщаяСтруктура.Вставить("Отметки", ОтметкиПоТитулу(ДанныеДокумента, Отбор));
		
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110341" Грузополучатель получение груза
//
// Параметры:
// 	ДанныеДокумента - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулПриемкаГруза(ДанныеДокумента)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
    ОбщаяСтруктура = Новый Структура;
	
	ПрибылДата = СтруктураВремя(РеквизитыОбъекта.Выгрузка_ДатаВремяПрибыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(ОбщаяСтруктура, "ДатаВремяПрибытия", ПрибылДата, Истина);
	
	УбылДата = СтруктураВремя(РеквизитыОбъекта.Выгрузка_ДатаВремяУбыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(ОбщаяСтруктура, "ДатаВремяУбытия", УбылДата, Истина);
			
	Груз = Новый Структура;
	
	Масса = Новый Структура;
	Масса.Вставить("Брутто",           РеквизитыОбъекта.Выгрузка_МассаБрутто);
	Масса.Вставить("Нетто",            РеквизитыОбъекта.Выгрузка_МассаНетто);
	Масса.Вставить(
		"МетодОпределения",
		Перечисления.Saby_МетодОпределенияМассы.КодПоЗначению(РеквизитыОбъекта.Выгрузка_МассаМетодРасчета));
	
	Груз.Вставить("Масса", Масса);
	
	Груз.Вставить("КоличествоМест", РеквизитыОбъекта.Выгрузка_КоличествоМест);
	Груз.Вставить("Объем",          РеквизитыОбъекта.Выгрузка_Объем);

	Состояние = Новый Структура;
	ДобавитьСвойствоВСтруктуруСКонтролем(Состояние, "Общее", РеквизитыОбъекта.Выгрузка_Состояние);
	
	ДобавитьСвойствоВСтруктуруСКонтролем(ОбщаяСтруктура, "Состояние", Состояние);
	ДобавитьСвойствоВСтруктуруСКонтролем(Груз,           "Состояние", Состояние);
	
	ОбщаяСтруктура.Вставить("Груз", Груз);
	
	// Груз - пока игнорим.... хз надо ли мне выгружать
	// КоличествоМест
	// КоличествоПаллет
	// МассаБрутто
	// МассаНетто
	// Наименование
	// Объем
	// Плотность
	// Состояние
	
	// Отметки, штрафы, акты
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза);
	
	Итог = Новый Структура;
	Итог.Вставить("Выгрузка",      ОбщаяСтруктура);
	Итог.Вставить("Отметки",       ОтметкиПоТитулу(ДанныеДокумента, Отбор));
	Итог.Вставить("ПунктВыгрузки", ПунктВыгрузки(РеквизитыОбъекта, Истина));
	
	Возврат Итог;
	
КонецФункции

// Титул "1110342" Выдача груза перевозчиком
//
// Параметры:
// 	ДанныеДокумента - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулВыдачаГруза(ДанныеДокумента)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	Замечания = Новый Структура;
	
	ПостановкаДата = СтруктураВремя(РеквизитыОбъекта.Перевозчик_ВыгрузкаДатаВремя);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяПостановки", ПостановкаДата, Истина);
	
	ПрибылДата = СтруктураВремя(РеквизитыОбъекта.Перевозчик_ВыгрузкаДатаВремяПрибыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяПрибытия", ПрибылДата, Истина); 
	
	УбылДата = СтруктураВремя(РеквизитыОбъекта.Перевозчик_ВыгрузкаДатаВремяУбыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяУбытия", УбылДата, Истина);
	
	ДобавитьСвойствоВСтруктуруСКонтролем(
		Замечания, "ВыполненныеРаботы", РеквизитыОбъекта.Перевозчик_ЗамечанияПоРазгрузочнымРаботам);
	ДобавитьСвойствоВСтруктуруСКонтролем(
		Замечания, "СостояниеГруза",    РеквизитыОбъекта.Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза);
	
	СтруктураЗамечаний = Новый Структура;
	СтруктураЗамечаний.Вставить("ЗамечанияПеревозчика", Замечания);
	
	// Отметки, штрафы, акты
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Перечисления.Saby_ТипТитулаЭтрН.ВыдачаГруза);
	Отметки = ОтметкиПоТитулу(ДанныеДокумента, Отбор);
	
	ОбщаяСтруктура = Новый Структура;
	ОбщаяСтруктура.Вставить("Выгрузка", СтруктураЗамечаний);
	ОбщаяСтруктура.Вставить("Отметки",  Отметки);
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110343" Перевозчик переадресовка
//
// Параметры:
// 	ДанныеТитула - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулПереадресовка(ДанныеТитула)
	
	РеквизитыОбъекта = ДанныеТитула.Реквизиты;
	
	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;
	
	// Пункт выгрузки
	ОбщаяСтруктура.Вставить("ПунктВыгрузки", ПунктВыгрузки(РеквизитыОбъекта));
	
	// Грузополучатель
	ОбщаяСтруктура.Вставить("Грузополучатель", Saby_ТНВыгрузкаСервер.ДанныеЮрЛица("Получатель", ДанныеТитула));
	
	ОбщаяСтруктура.Вставить("Причина", РеквизитыОбъекта.Причина);
	
	Переадресовка = Новый Структура;
	Переадресовка.Вставить("ДатаВремя", СтруктураВремя(РеквизитыОбъекта.Переадресовка_ДатаВремя, , Истина));
	
	// Отметки
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Перечисления.Saby_ТипТитулаЭтрН.Переадресовка);
	
	ОбщаяСтруктура.Вставить("Отметки", ОтметкиПоТитулу(ДанныеТитула, Отбор));
		
	// Основание
	Основание = РеквизитыОбъекта.ПереадресовкаНаОсновании;
	Если ЗначениеЗаполнено(Основание) Тогда  
		
		ДанныеДок = РеквизитыОдиночногоДокументаЭТрН(Основание);
		
		Переадресовка.Вставить("Основание", Новый Структура);
			
		ДанныеДок.Вставить("ДатаВремя", СтруктураВремя(ДанныеДок.ДатаВремя, , Истина)); // меняем формат даты
		Переадресовка.Основание.Вставить("Документ", ДанныеДок);
		
	КонецЕсли;
	
	ОбщаяСтруктура.Вставить("Переадресовка", Переадресовка);
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1167009" Уведомление о переадресовке
//
// Параметры:
// 	ДанныеТитула - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулУведомлениеОПереадресовке(ДанныеТитула)

	РеквизитыОбъекта = ДанныеТитула.Реквизиты;
	
	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;
	
	// Пункт выгрузки
	ОбщаяСтруктура.Вставить("ПунктВыгрузки", ПунктВыгрузки(РеквизитыОбъекта));
	
	// Грузополучатель
	Если ЗначениеЗаполнено(РеквизитыОбъекта.Получатель) Тогда 
		ОбщаяСтруктура.Вставить("Грузополучатель", Saby_ТНВыгрузкаСервер.ДанныеЮрЛица("Получатель", ДанныеТитула));
	КонецЕсли;
	
	Уведомление = Новый Структура;	
	Уведомление.Вставить("Причина", РеквизитыОбъекта.Причина);
	
	Если ЗначениеЗаполнено(РеквизитыОбъекта.ОформилСтруктура) Тогда
		Оформил = Оформил(РеквизитыОбъекта.ОформилСтруктура);
		Уведомление.Вставить("Отправитель", Оформил);
	КонецЕсли;
	
	// Основание
	Основание = РеквизитыОбъекта.ПереадресовкаНаОсновании;
	Если ЗначениеЗаполнено(Основание) Тогда 
		
	    ДанныеДокумента = РеквизитыОдиночногоДокументаЭТрН(Основание);
				
		СопроводительныеДокументы = Новый Структура;
		СопроводительныеДокументы.Вставить("Отгрузка", ДанныеДокумента);
		
		ОбщаяСтруктура.Вставить("СопроводительныеДокументы", СопроводительныеДокументы);
		
	КонецЕсли;
		
	Переадресовка = Новый Структура;
	Переадресовка.Вставить("Уведомление", Уведомление);
	
	ОбщаяСтруктура.Вставить("Переадресовка", Переадресовка);
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110344" Перевозчик замена водителя 
//
// Параметры:
// 	ДанныеТитула - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулЗаменаВодителя(ДанныеТитула)
	
	РеквизитыОбъекта = ДанныеТитула.Реквизиты;
	
	МассивДокументов = Новый Массив();
	
	ОснованиеЗамены = РеквизитыОбъекта.ПричинаЗамены;
	Если Не ЗначениеЗаполнено(ОснованиеЗамены) Тогда
		ОснованиеЗамены = РеквизитыОбъекта.ДокументЗамены;
	КонецЕсли;
	
	Если ТипЗнч(ОснованиеЗамены) = Тип("СправочникСсылка.Saby_ДокументыТрН") Тогда
		МассивДокументов.Добавить(ОснованиеЗамены);
	КонецЕсли;
	
	ОснованиеПередачиГрузаТС = РеквизитыОбъекта.ОснованиеПередачиГрузаТС;
	Если ЗначениеЗаполнено(ОснованиеПередачиГрузаТС) Тогда
		МассивДокументов.Добавить(ОснованиеПередачиГрузаТС);
	КонецЕсли;
	
    ДанныеДокументов = Saby_ТНОбщегоНазначенияСервер.РеквизитыДокументовСбис(МассивДокументов);
	
	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;
	ОбщаяСтруктура.Вставить("ТранспортноеСредство", Новый Структура);
	
	// Водители + основание передачи....
	Если ЗначениеЗаполнено(ДанныеТитула.Водители) Тогда 
		Водители = Saby_ТНВыгрузкаСервер.ВодителиНаВыгрузку(ДанныеТитула.Водители, ДанныеТитула.ПутевыеЛисты);
		ОбщаяСтруктура.Вставить("Водители", Водители);
	КонецЕсли;
	
	// Транспорт и все с ним связанное
	Транспорт = Saby_ТНВыгрузкаСервер.ТранспортНаВыгрузку(ДанныеТитула.ТранспортныеСредства);
	Если ЗначениеЗаполнено(Транспорт.РегНомер) Тогда
		ОбщаяСтруктура.ТранспортноеСредство = Транспорт;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеТитула.СпецРазрешения) Тогда
		СпецУсловия = Saby_ТНВыгрузкаСервер.СпецУсловия(ДанныеТитула.СпецРазрешения);
		ОбщаяСтруктура.ТранспортноеСредство.Вставить("СпецУсловия", СпецУсловия); 
	КонецЕсли;

	Если ЗначениеЗаполнено(ОснованиеПередачиГрузаТС) Тогда
		
		ДанныеДокументаПередачи = ДанныеДокументов.Получить(ОснованиеПередачиГрузаТС);
		
		ДокументПередачи = Новый Структура; 
		ДокументПередачи.Вставить("ПередачаГруза", ДанныеДокументаПередачи);
		
		ОбщаяСтруктура.ТранспортноеСредство.Вставить("Документ", ДокументПередачи);
		
	КонецЕсли;
	
	// Прицепы
	Прицепы = Saby_ТНВыгрузкаСервер.ПрицепыНаВыгрузку(ДанныеТитула.ТранспортныеСредства);
	Если Прицепы.Количество() > 0 Тогда
		ОбщаяСтруктура.ТранспортноеСредство.Вставить("Прицеп", Прицепы);
	КонецЕсли;
	
	// Отметки
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", Перечисления.Saby_ТипТитулаЭтрН.ЗаменаВодителяТС);
	
	ОбщаяСтруктура.Вставить("Отметки", ОтметкиПоТитулу(ДанныеТитула, Отбор));
	
	// Основание
	Если ЗначениеЗаполнено(ОснованиеЗамены) Тогда  
		
		ДанныеОснования = Новый Структура;
		
		Если ТипЗнч(ОснованиеЗамены) = Тип("Строка") Тогда 
			ДанныеОснования.Вставить("Текст", ОснованиеЗамены);
		Иначе 	
					
			ДанныеДок = ДанныеДокументов.Получить(ОснованиеЗамены);
			ДанныеДок.Удалить("Тип");
			ДанныеДок.Удалить("Ссылка");
			
			ДанныеОснования.Вставить("Документ", ДанныеДок);
			
		КонецЕсли;
		
		ЗаменаВодителяТС = Новый Структура;
		ЗаменаВодителяТС.Вставить("Основание", ДанныеОснования);
		ЗаменаВодителяТС.Вставить("ДатаВремя", СтруктураВремя(РеквизитыОбъекта.ДатаВремяЗамены, , Истина));
		
		ОбщаяСтруктура.Вставить("ЗаменаВодителяТС", ЗаменаВодителяТС);
		
	КонецЕсли;
		
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110345" Изменение стоимости 
//
// Параметры:
// 	ДанныеТитула - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулИзменениеСтоимости(ДанныеТитула)
	
	РеквизитыОбъекта = ДанныеТитула.Реквизиты;
	
	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;

    Перевозчик = Новый Структура;
	Перевозчик.Вставить("Название", Новый Структура);
	Перевозчик.Название.Вставить("Полное", СокрЛП(РеквизитыОбъекта.Перевозчик));
	
	ПоРасчетномуСчету = РеквизитыОбъекта.Свойство("РасчетныйСчетПеревозчик") 
		И ЗначениеЗаполнено(РеквизитыОбъекта.РасчетныйСчетПеревозчик);
	
	Если ПоРасчетномуСчету Тогда		
		ДанныеБанкСчета = РеквизитыБанковскогоСчета(РеквизитыОбъекта.РасчетныйСчетПеревозчик);		
	Иначе 	
				
		ДанныеБанкСчета = Новый Структура;
		ДанныеБанкСчета.Вставить("НомерСчета", РеквизитыОбъекта.НомерСчетаПеревозчик);
		ДанныеБанкСчета.Вставить("Банк",       Новый Структура);
		
		// Банк
		ДанныеБанкСчета.Банк.Вставить("Наименование", Новый Структура);
		ДанныеБанкСчета.Банк.Наименование.Вставить("Полное", РеквизитыОбъекта.БанкНазваниеПеревозчик);

		ДанныеБанкСчета.Банк.Вставить("БИК",      РеквизитыОбъекта.БанкБИКПеревозчик);
		ДанныеБанкСчета.Банк.Вставить("КоррСчет", РеквизитыОбъекта.БанкКоррСчетПеревозчик);
		
	КонецЕсли;
	
	Перевозчик.Вставить("Реквизиты", Новый Структура);
	Перевозчик.Реквизиты.Вставить("Банковские", ДанныеБанкСчета);
	
	ОбщаяСтруктура.Вставить("Грузоперевозчик", Перевозчик);
	
	СтруктураСтоимости = Новый Структура;	
	СтруктураСтоимости.Вставить("ВключаяНДС",  РеквизитыОбъекта.Сумма); 
	СтруктураСтоимости.Вставить("БезНДС",      РеквизитыОбъекта.СуммаБезНДС);     
	СтруктураСтоимости.Вставить("Расчет",      РеквизитыОбъекта.Условия);	
		
	// рубль по умолчанию. RUB - символьный код. 
	// добавить валюту. реквизит документа. Наименование - символьный код
	СтруктураСтоимости.Вставить("Валюта", Новый Структура);
	СтруктураСтоимости.Валюта.Вставить("Код",          "643");
	СтруктураСтоимости.Валюта.Вставить("Наименование", "Российский рубль"); 

	// Налог
	СтруктураСтоимости.Вставить("Налог", Новый Структура);
	СтруктураСтоимости.Налог.Вставить("Ставка", Saby_ТНОбщегоНазначенияСервер.ЗначениеСтавкиНДС(РеквизитыОбъекта.Ставка));
    СтруктураСтоимости.Налог.Вставить("Сумма",  РеквизитыОбъекта.СуммаНДС);
	
	ОбщаяСтруктура.Вставить("СтоимостьПеревозки", СтруктураСтоимости);
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110346" Согласование стоимости 
//
// Параметры:
// 	ДанныеТитула - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулСогласованиеСтоимости(ДанныеТитула)

	РеквизитыОбъекта = ДанныеТитула.Реквизиты;
	
	// Собираем общую структуру документа	
	ОбщаяСтруктура = Новый Структура; 
	
	КлючПолногоНаименования = "Полное";
	
	Грузоотправитель = Новый Структура;
	Грузоотправитель.Вставить("Название", Новый Структура);
	Грузоотправитель.Название.Вставить(КлючПолногоНаименования, СокрЛП(РеквизитыОбъекта.Отправитель));
	
	ПоРасчетномуСчету = РеквизитыОбъекта.Свойство("РасчетныйСчет") 
		И ЗначениеЗаполнено(РеквизитыОбъекта.РасчетныйСчет);
	
	Если ПоРасчетномуСчету Тогда 				
		ДанныеБанкСчета = РеквизитыБанковскогоСчета(РеквизитыОбъекта.РасчетныйСчет);		
	Иначе 	
						
		ДанныеБанкСчета = Новый Структура;
		ДанныеБанкСчета.Вставить("НомерСчета", РеквизитыОбъекта.НомерСчета);
		ДанныеБанкСчета.Вставить("Банк",       Новый Структура);
		
		// Банк
		ДанныеБанкСчета.Банк.Вставить("Наименование", Новый Структура);
		ДанныеБанкСчета.Банк.Наименование.Вставить(КлючПолногоНаименования, РеквизитыОбъекта.БанкНазвание);

		ДанныеБанкСчета.Банк.Вставить("БИК",      РеквизитыОбъекта.БанкБИК);
		ДанныеБанкСчета.Банк.Вставить("КоррСчет", РеквизитыОбъекта.БанкКоррСчет);
		
	КонецЕсли;
		
	Грузоотправитель.Вставить("Реквизиты", Новый Структура);
	Грузоотправитель.Реквизиты.Вставить("Банковские", ДанныеБанкСчета);
		
	ОбщаяСтруктура.Вставить("Грузоотправитель", Грузоотправитель);
		
	// из формы
	Если РеквизитыОбъекта.ТипПлательщик <> "Отправитель" Тогда 
		
		ИнойПлательщик = Новый Структура;
		
		ИнойПлательщик.Вставить("Название", Новый Структура);
		ИнойПлательщик.Название.Вставить(КлючПолногоНаименования, СокрЛП(РеквизитыОбъекта.Плательщик));
		
		// Основание                                          
		Основание = РеквизитыОбъекта.ОснованиеОплаты;
		Если ЗначениеЗаполнено(Основание) Тогда 
			
			ДанныеДокумента = РеквизитыОдиночногоДокументаЭТрН(Основание);
			
			ИнойПлательщик.Вставить("Основание", ДанныеДокумента);
						
		КонецЕсли;
		
		ОбщаяСтруктура.Вставить("ИнойПлательщик", ИнойПлательщик); 		
		
	КонецЕсли;
		
	Возврат ОбщаяСтруктура;
	
КонецФункции

#Область Груз

Функция ДанныеГруза(ДанныеДокумента)
	
	ДанныеГруза = Новый Массив;
		
	Для Каждого Строка Из ДанныеДокумента.Грузы Цикл 
		
		ПараметрыСтроки = ШаблонПозицииГруза();		
		ЗаполнитьЗначенияСвойствГруза(ПараметрыСтроки, Строка);
				
		// обработаем данные строки и перейдем к связанным данным		
		СвязанныеДанные = СвязанныеДанныеСГрузом(ДанныеДокумента, Строка.КлючСтроки);
		
		Если СвязанныеДанные.Контейнеры.Номер.Количество()  Тогда 							
			ПараметрыСтроки.Вставить("Контейнер", СвязанныеДанные.Контейнеры);
			ПараметрыСтроки.Наименование = "Контейнер"; 
		КонецЕсли;
		
		Если СвязанныеДанные.Маркировки.Количество() Тогда 
			ПараметрыСтроки.Вставить("Маркировка",  СвязанныеДанные.Маркировки);
		КонецЕсли;
		
		Если СвязанныеДанные.ОпасныеГрузы.Количество() Тогда 
			ПараметрыСтроки.Вставить("ОпасныйГруз", СвязанныеДанные.ОпасныеГрузы);  		
		КонецЕсли;
		
		Если СвязанныеДанные.СведенияГосСистем.Количество() Тогда 
			
			СведенияГИС = Новый Структура;           
			// заполним по данным строки 
			СведенияГИС.Вставить("Наименование",     Строка.НаименованиеГосСистемы);
			СведенияГИС.Вставить("УчетнаяЕдиница",   Строка.УчетнаяЕдиницаГосСистемы);
			СведенияГИС.Вставить("ДругаяИнформация", Строка.ИнаяИнформацияГосСистемы);
			СведенияГИС.Вставить("Идентификатор",    СвязанныеДанные.СведенияГосСистем);
			
			ПараметрыСтроки.Вставить("СведенияГИС", СведенияГИС);
			
			ПараметрыСтроки.УчетГИС = Истина;
			
		КонецЕсли;
					
		ДанныеГруза.Добавить(ПараметрыСтроки);
		
	КонецЦикла;
	
	СтруктураСтоимости = Новый Структура;	
	СтруктураСтоимости.Вставить("Всего",  ДанныеДокумента.Грузы.Итог("СтоимостьВключаяНДС")); // СтоимостьВсего
	СтруктураСтоимости.Вставить("Валюта", Новый Структура);
	
	// рубль по умолчанию. RUB - символьный код. 
	// добавить валюту. реквизит документа. Наименование - символьный код
	СтруктураСтоимости.Валюта.Вставить("Код",          "643");
	СтруктураСтоимости.Валюта.Вставить("Наименование", "Российский рубль"); 
	
	СтруктураГруза = Новый Структура; 
	СтруктураГруза.Вставить("ИнформационноеПоле", Новый Структура);	
	СтруктураГруза.Вставить("Позиция",            ДанныеГруза);
	СтруктураГруза.Вставить("Стоимость",          СтруктураСтоимости);
		
	Возврат СтруктураГруза;
	
КонецФункции

// Поиск и заполнение данных по связанным табличным частям
//
// Параметры:
//  ДанныеДокумента - Соответствие - данные документа с онлайна
//  КлючСтроки - Число - числовое значение ключа строки
//
// Возвращаемое значение:
//   Структура - данные связанные с гурзом (контейнеры, маркировки, опасные грузы)
//
Функция СвязанныеДанныеСГрузом(ДанныеДокумента, КлючСтроки)
		
	Контейнеры = Новый Структура;
	Контейнеры.Вставить("Номер",      Новый Массив);
	Контейнеры.Вставить("Количество", 0);
	
	Маркировки        = Новый Массив;
	ОпасныеГрузы      = Новый Массив;	
	СведенияГосСистем = Новый Массив;	
		
	Отбор = Новый Структура;
	Отбор.Вставить("КлючСтроки_Грузы", КлючСтроки);
	
	НайденныеСтроки = ДанныеДокумента.Контейнеры.НайтиСтроки(Отбор);
	Для Каждого Контейнер Из НайденныеСтроки Цикл 
		
		Структура = СтруктураСоЗначением(Контейнер.Номер);
		Контейнеры.Номер.Добавить(Структура); 
		
		Контейнеры.Количество = Контейнеры.Количество + Контейнер.Количество;
		
	КонецЦикла;	
	
	НайденныеСтроки = ДанныеДокумента.Маркировки.НайтиСтроки(Отбор);
	Для Каждого Маркировка Из НайденныеСтроки Цикл 		
		Структура = СтруктураСоЗначением(Маркировка.Значение);
		Маркировки.Добавить(Структура);				
	КонецЦикла;
	
	НайденныеСтроки = ДанныеДокумента.ОпасныеГрузы.НайтиСтроки(Отбор);
	Для Каждого Опасный Из НайденныеСтроки Цикл 
		
		ОпасныйСтруктура = ШаблонОпасногоГруза();
		ЗаполнитьЗначенияСвойств(ОпасныйСтруктура, Опасный);
						
		ОпасныйСтруктура.Вставить(
			"Класс", Перечисления.Saby_КлассыОпасностиГрузов.КодПоЗначению(Опасный.Класс));
		ОпасныйСтруктура.Вставить(
			"УпаковкаГруппа", Перечисления.Saby_ГруппыУпаковки.КодПоЗначению(Опасный.ГруппаУпаковки));
		ОпасныйСтруктура.Вставить(
			"КодОграниченияПроездТуннеля",
			Перечисления.Saby_КодыОграниченийПроездаЧерезТуннели.КодПоЗначению(Опасный.КодОграниченияПроездТуннеля));
				
		ОпасныеГрузы.Добавить(ОпасныйСтруктура);
				
	КонецЦикла;	
	
	НайденныеСтроки = ДанныеДокумента.СведенияГосСистем.НайтиСтроки(Отбор);
	Для Каждого Сведения Из НайденныеСтроки Цикл 		
		Структура = СтруктураСоЗначением(Сведения.Идентификатор);
		СведенияГосСистем.Добавить(Структура);
	КонецЦикла;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Контейнеры",        Контейнеры);
	СтруктураДанных.Вставить("Маркировки",        Маркировки);
	СтруктураДанных.Вставить("ОпасныеГрузы",      ОпасныеГрузы);
	СтруктураДанных.Вставить("СведенияГосСистем", СведенияГосСистем);
	
	Возврат СтруктураДанных;
		
КонецФункции

Функция СтруктураСоЗначением(Значение)
	
	Возврат Новый Структура("Значение", Значение);
	
КонецФункции

Функция ШаблонПозицииГруза()  
	
	СтруктураГруза = Новый Структура;
	СтруктураГруза.Вставить("Наименование",       "");
	СтруктураГруза.Вставить("КодНоменклатуры",    "");
	СтруктураГруза.Вставить("Состояние",          "");
	СтруктураГруза.Вставить("Упаковка",           "");
	СтруктураГруза.Вставить("ТараКод",            "");
	
	СтруктураГруза.Вставить("УчетГИС",            Ложь);
	СтруктураГруза.Вставить("ДопИнформация",      "");
	СтруктураГруза.Вставить("Заказчик",           Новый Структура);
	
	// Параметры
	ПараметрыГруза = Новый Структура;
	ПараметрыГруза.Вставить("КоличествоПаллет",   0);
	ПараметрыГруза.Вставить("КоличествоМест",     0);
	ПараметрыГруза.Вставить("Плотность",          0);
	ПараметрыГруза.Вставить("Объем",              0);
    ПараметрыГруза.Вставить("Высота",             0);
	ПараметрыГруза.Вставить("Длина",              0);
	ПараметрыГруза.Вставить("Ширина",             0);
	
	Масса = Новый Структура; 
	Масса.Вставить("Нетто",  0);
	Масса.Вставить("Брутто", 0);	
	ПараметрыГруза.Вставить("Масса", Масса);
	
	СтруктураГруза.Вставить("Параметры", ПараметрыГруза);
	
	// Стоимость
	Стоимость = Новый Структура;
	
	Валюта = Новый Структура;		
	Валюта.Вставить("Код",          "");
	Валюта.Вставить("Наименование", "");
	
	Стоимость.Вставить("Валюта",     Валюта);	
	Стоимость.Вставить("ВключаяНДС", 0);
		
	СтруктураГруза.Вставить("Стоимость", Стоимость);
	
	Возврат СтруктураГруза;
	
КонецФункции

Процедура ЗаполнитьЗначенияСвойствГруза(ПараметрыСтроки, Строка)
	
	// Заполнили что смогли 
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, Строка);
	
	// Параметры             
	Параметры = ПараметрыСтроки.Параметры;
	ЗаполнитьЗначенияСвойств(Параметры, Строка);
	Параметры.Масса.Нетто  = Строка.МассаНетто; 
	Параметры.Масса.Брутто = Строка.МассаБрутто;	
	
	// Стоимость
	ПараметрыСтроки.Стоимость.ВключаяНДС = Строка.СтоимостьВключаяНДС;
	Если ЗначениеЗаполнено(Строка.ВалютаКод) Тогда 
		ПараметрыСтроки.Стоимость.Валюта.Код = Строка.ВалютаКод; 
		// Наименование может меняться - Рубль, Рубль РФ...
	Иначе 
		ПараметрыСтроки.Стоимость.Валюта.Код          = "643";
		ПараметрыСтроки.Стоимость.Валюта.Наименование = "Российский рубль";
	КонецЕсли;
	
КонецПроцедуры
	
Функция ШаблонОпасногоГруза()
	
    ОпасныйГруз = Новый Структура;
	ОпасныйГруз.Вставить("НаименованиеТехническое");
	ОпасныйГруз.Вставить("НаименованиеОтгрузочное");
	ОпасныйГруз.Вставить("ИндексБезопасности");
    ОпасныйГруз.Вставить("ОпознавательныйЗнак");
	ОпасныйГруз.Вставить("ВзрывчатыйМассаНетто");
	ОпасныйГруз.Вставить("ВзрывчатыйМассаНеттоДляВсех");
	ОпасныйГруз.Вставить("ПроцентныйСоставСмеси");
	ОпасныйГруз.Вставить("ДатаИстеченияУдержания");
	ОпасныйГруз.Вставить("ТемператураАварийная");
	ОпасныйГруз.Вставить("ТемператураКонтрольная");
	ОпасныйГруз.Вставить("НомерООН");
	ОпасныйГруз.Вставить("Описание");
	ОпасныйГруз.Вставить("Класс");
	ОпасныйГруз.Вставить("КлассификационныйКод");
	ОпасныйГруз.Вставить("ЗнакОпасности");
	ОпасныйГруз.Вставить("КодОграниченияПроездТуннеля");
	ОпасныйГруз.Вставить("ФизХимФорма");
	ОпасныйГруз.Вставить("РадиоактивныйМаксАктивность");
	ОпасныйГруз.Вставить("РадиоактивныйПолнаяАктивность");
	ОпасныйГруз.Вставить("РадиоактивныйРадионуклид");
	ОпасныйГруз.Вставить("УпаковкаКатегория");
	ОпасныйГруз.Вставить("УпаковкаГруппа");
	ОпасныйГруз.Вставить("ТранспортныйИндекс"); 
	
	Возврат ОпасныйГруз;
	
КонецФункции

#КонецОбласти // Груз 

#Область СопроводительныеДокументы

Функция ВложенныеДокументы(ДанныеДокумента)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	// Все сопроводительные документы    	
	ТЗ_ДокументыГруз      = ДанныеДокумента.СопроводительныеДокументы;
	СопроводительнаяВедомость = РеквизитыОбъекта.Отправитель_СопроводительнаяВедомость;
	ДоговорПеревозки      = РеквизитыОбъекта.Заказчик_Договор;
	ОтгрузкаОснование     = РеквизитыОбъекта.Отгрузка_НаОснованииДокумент;
	ОснованиеПолномочий   = РеквизитыОбъекта.Отгрузка_ОтветственныйНаОсновании;
	ИнициаторПодтверждение = РеквизитыОбъекта.ИнициаторПереадресацииПодтверждение;
	
	КГрузу            = Новый Массив;
	КТрН              = Новый Массив;
	ПередачиЦенностей = Новый Массив;
	
	// получаем данные всех документов за 1 раз
	Массив = Новый Массив;	
	ДополнитьМассивВложеннымиДокументами(СопроводительнаяВедомость, Массив);
	ДополнитьМассивВложеннымиДокументами(ДоговорПеревозки,          Массив);
	ДополнитьМассивВложеннымиДокументами(ТЗ_ДокументыГруз,          Массив, "СопроводительныйДокумент");
	ДополнитьМассивВложеннымиДокументами(ОтгрузкаОснование,         Массив);
	ДополнитьМассивВложеннымиДокументами(ОснованиеПолномочий,       Массив);
	ДополнитьМассивВложеннымиДокументами(ИнициаторПодтверждение,    Массив);
	
	УдаляемыеКолонки = Новый Массив;
	УдаляемыеКолонки.Добавить("Ссылка");
	УдаляемыеКолонки.Добавить("Тип");
	
	// Обработка полученных данных 	
	Соответствие = Saby_ТНОбщегоНазначенияСервер.РеквизитыДокументовСбис(Массив);
	Для Каждого Строка Из ТЗ_ДокументыГруз Цикл   
		
		Данные = Соответствие.Получить(Строка.СопроводительныйДокумент);
		
		СтруктураДокумента = ОбщегоНазначения.СкопироватьРекурсивно(Данные);
		УдалитьСвойстваИзСтруктуры(СтруктураДокумента, УдаляемыеКолонки);
		
		Если Данные.Тип = Перечисления.Saby_ТипыДокумента.КГрузу Тогда
			КГрузу.Добавить(СтруктураДокумента);
		ИначеЕсли Данные.Тип = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей Тогда
		    ПередачиЦенностей.Добавить(СтруктураДокумента);					
		Иначе 	
			// Общие к Транспортной накладной 
		    КТрН.Добавить(СтруктураДокумента);				
		КонецЕсли; 
		
	КонецЦикла;	
			
	Структура = Новый Структура;
	Структура.Вставить("РасчетПеревозки",          Новый Структура);
	Структура.Вставить("ДоговорНаУслугиПеревозки", ДанныеВложенногоДокумента(Соответствие, ДоговорПеревозки));
	Структура.Вставить("ТранспортнаяНакладная",    КТрН);   // *
	Структура.Вставить("Груз",                     КГрузу); // *
	Структура.Вставить("Отгрузка",                 ПередачиЦенностей); // *
	Структура.Вставить("Ведомость",                ДанныеВложенногоДокумента(Соответствие, СопроводительнаяВедомость));
	Структура.Вставить("ОснованиеОтгрузки",        ДанныеВложенногоДокумента(Соответствие, ОтгрузкаОснование));
	Структура.Вставить("ОснованиеПолномочий",      ДанныеВложенногоДокумента(Соответствие, ОснованиеПолномочий));
	Структура.Вставить("ИнициаторПодтверждение",   ДанныеВложенногоДокумента(Соответствие, ИнициаторПодтверждение));
	
    Возврат Структура;

КонецФункции

Процедура ДополнитьМассивВложеннымиДокументами(Источник, Массив, ИмяКолонки = "")
	
	Если ТипЗнч(Источник) = Тип("ТаблицаЗначений") Тогда
		
		Для Каждого Строка Из Источник Цикл
			Если ЗначениеЗаполнено(Строка[ИмяКолонки]) Тогда 
				Массив.Добавить(Строка[ИмяКолонки]);   
			КонецЕсли;			
		КонецЦикла;
					
	Иначе 
		
		Если ЗначениеЗаполнено(Источник) Тогда 
			Массив.Добавить(Источник);
		КонецЕсли;
				
	КонецЕсли;
			
КонецПроцедуры

Функция ДанныеВложенногоДокумента(Соответствие, Ключ)
	
	Структура = Новый Структура;
	
	// если данные есть в документе - они есть в соответствии
	Если ЗначениеЗаполнено(Ключ) Тогда 
		Структура = Соответствие.Получить(Ключ);
		Если ЗначениеЗаполнено(Структура) Тогда 
			Структура.Удалить("Ссылка");
			Структура.Удалить("Тип");    
		КонецЕсли;	
	КонецЕсли;
 
	Возврат Структура;
	
КонецФункции

#КонецОбласти // СопроводительныеДокументы  

#Область Отметки

Функция ОтметкиПоТитулу(ДанныеДокумента, Отбор = Неопределено)
	
	Отметки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ДанныеДокумента.Отметки, Отбор);
	
	КолонкиИсключение = Новый Массив;
	КолонкиИсключение.Добавить("НомерСтроки");
	КолонкиИсключение.Добавить("Этап");
	КолонкиИсключение.Добавить("Роль");
	КолонкиИсключение.Добавить("КлючСтроки"); 
	
	МассивОтметок = Новый Массив;
	
	Для Каждого Строка Из Отметки Цикл  
		
		АктыИШтрафы = АктыИШтрафы(Строка.КлючСтроки, ДанныеДокумента);
		
		Отметка = Новый Структура;
		Отметка.Вставить("ДатаВремя",  СтруктураВремя(Строка.ДатаВремя));
		Отметка.Вставить("Описание",  Строка.Описание);
		
		Если АктыИШтрафы.АктыВзвешивания.Количество() Тогда 
			Отметка.Вставить("АктыВзвешивания", АктыИШтрафы.АктыВзвешивания);
		КонецЕсли;
			
		Если АктыИШтрафы.АктыКоммерческие.Количество() Тогда 
			Отметка.Вставить("Акты", АктыИШтрафы.АктыКоммерческие); 
		КонецЕсли;
		
		Если АктыИШтрафы.Штраф.Количество() Тогда 
			Отметка.Вставить("Штрафы", АктыИШтрафы.Штраф);		
		КонецЕсли;
				
		МассивОтметок.Добавить(Отметка);
		
	КонецЦикла;
	
	СтруктураОтметок = Новый Структура;
	СтруктураОтметок.Вставить("Отметка", МассивОтметок);
	
	Возврат СтруктураОтметок;
	
КонецФункции

Функция АктыИШтрафы(КлючСтроки, ДанныеДокумента)
	
	МассивАкты    = Новый Массив; 
	МассивАктыКом = Новый Массив;
    МассивШтрафы  = Новый Массив;
			
	КолонкиИсключение = Новый Массив;
	КолонкиИсключение.Добавить("НомерСтроки");
	КолонкиИсключение.Добавить("КлючСтроки_Отметки");
	
	Отбор = Новый Структура;
	Отбор.Вставить("КлючСтроки_Отметки", КлючСтроки);
	
	МассивАктовРасчет = Новый Массив;
	
	Если Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("Акты", ДанныеДокумента) Тогда
	
		НайденныеСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ДанныеДокумента.Акты, Отбор);
		Для Каждого Строка Из НайденныеСтроки Цикл 		
			МассивАктовРасчет.Добавить(Строка.Документ);	
		КонецЦикла;
		
		ДанныеДокументов = Saby_ТНОбщегоНазначенияСервер.РеквизитыДокументовСбис(МассивАктовРасчет);
		Для Каждого Док Из МассивАктовРасчет Цикл
			
			ДанныеАкта = ДанныеДокументов.Получить(Док);
			Если ДанныеАкта.Тип = Перечисления.Saby_ТипыДокумента.АктВзвешивания Тогда 
			    МассивАкты.Добавить(ДанныеАкта);
			Иначе 
				МассивАктыКом.Добавить(ДанныеАкта);
			КонецЕсли;
						
			ДанныеАкта.Удалить("Тип");
			ДанныеАкта.Удалить("Ссылка");
					
		КонецЦикла;
		
	КонецЕсли;
	
	Если Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство("Штрафы", ДанныеДокумента) Тогда
	
	    НайденныеСтроки = Saby_ТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ДанныеДокумента.Штрафы, Отбор);
			
		Для Каждого Строка Из НайденныеСтроки Цикл 
			
			Штраф = Новый Структура;
			Штраф.Вставить("Итог",       Строка.Сумма); 
			Штраф.Вставить("Количество", Строка.Количество);
			Штраф.Вставить("Расчет",     Строка.Расчет);
			
			Штраф.Вставить("Валюта", Новый Структура);
			Штраф.Валюта.Вставить("Итог",    Строка.Сумма);
			Штраф.Валюта.Вставить("КодОКВ",  "643");
			Штраф.Валюта.Вставить("НаимОКВ", "Российский рубль");
							
			МассивШтрафы.Добавить(Штраф);               
			
		КонецЦикла;
		
	КонецЕсли;
	
	Структура = Новый Структура; 
	Структура.Вставить("АктыКоммерческие", МассивАктыКом);
	Структура.Вставить("АктыВзвешивания",  МассивАкты);
	Структура.Вставить("Штраф",            МассивШтрафы);
		
	Возврат Структура;
	
КонецФункции

#КонецОбласти // Отметки

#Область Этапы

// Условия перевозки согласно формату подстановок
//  Параметры:
//   ДанныеДокумента - Структура - структура данных полученых из объекта выгрузки
//  ИнициаторПодтверждение - Структура - данные документа подтверждающего полномочия инициатора
//  Возвращаемое значение:
//   Структура - данные условий перевозки
//
Функция УсловияПеревозки(ДанныеДокумента, ИнициаторПодтверждение)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	// Условия перевозки
    СтруктураУсловия = Новый Структура;
		
	// Климатический режим
	СтруктураКлимат = Новый Структура;
	ТемператураОт = РеквизитыОбъекта.Отправитель_ТемператураОт;
	ТемператураДо = РеквизитыОбъекта.Отправитель_ТемператураДо;
	
	ТемператураЗаполнена = ЗначенияЗаполнены(ТемператураОт, ТемператураДо);	
	Если ТемператураЗаполнена Тогда  
		СтруктураКлимат.Вставить("Температура", Новый Структура);
		СтруктураКлимат.Температура.Вставить("Минимальная",  ТемператураОт);
		СтруктураКлимат.Температура.Вставить("Максимальная", ТемператураДо);
	КонецЕсли;
			
	ВлажностьОт = РеквизитыОбъекта.Отправитель_ВлажностьОт;
	ВлажностьДо = РеквизитыОбъекта.Отправитель_ВлажностьДо;
	
	ВлажностьЗаполнена = ЗначенияЗаполнены(ВлажностьОт, ВлажностьДо);
	Если ВлажностьЗаполнена Тогда 
		СтруктураКлимат.Вставить("Влажность", Новый Структура);
		СтруктураКлимат.Влажность.Вставить("Минимальная",  ВлажностьОт);
		СтруктураКлимат.Влажность.Вставить("Максимальная", ВлажностьДо);
	КонецЕсли;
	
	СтруктураУсловия.Вставить("КлиматическийРежим", СтруктураКлимат);
	
	СтруктураУсловия.Вставить("Маршрут", Новый Структура); // нет данных для заполнения
	
	// Переадресовка                          
	Переадресовка = Новый Структура;	
	Переадресовка.Вставить("Контакты", Новый Структура);	
	
	Роль = РеквизитыОбъекта.ИнициаторПереадресации;
	
	Контакты = Saby_ТНВыгрузкаСервер.КонтактыЮрЛица(ДанныеДокумента.КонтактныеДанные, Роль);
	Если ЗначениеЗаполнено(Контакты.Телефоны) Тогда 
		Переадресовка.Контакты.Вставить("Телефон", Контакты.Телефоны);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакты.Емейлы) Тогда 
		Переадресовка.Контакты.Вставить("ЭлектроннаяПочта", Контакты.Емейлы);
	КонецЕсли;
		
	// документ подтверждения полномочий 
	Если ЗначениеЗаполнено(ИнициаторПодтверждение) Тогда 
		Переадресовка.Вставить("ПодтверждениеПолномочий", ИнициаторПодтверждение);	
	КонецЕсли;
		
	Переадресовка.Вставить(
		"КтоПереадресует", Перечисления.Saby_РолиКонтрагентов.КодПоЗначению(РеквизитыОбъекта.ИнициаторПереадресации));
	
	СтруктураУсловия.Вставить("Переадресовка", Переадресовка); 
	// - 
		
	СтруктураУсловия.Вставить("ИнформационноеПоле",  Новый Структура); // источника информации нет 
	СтруктураУсловия.Вставить("Нормы",               РеквизитыОбъекта.Отправитель_НормыПеревозки);
	СтруктураУсловия.Вставить("ОграничениеСкорости", РеквизитыОбъекта.Отправитель_ОграничениеСкорости);	
	СтруктураУсловия.Вставить("Пломба",              РеквизитыОбъекта.Отправитель_Пломба);
    СтруктураУсловия.Вставить("СрокДоставки",        РеквизитыОбъекта.Отправитель_ДоставитьСрок);

	СтруктураУсловия.Вставить("ПерегрузкаЗапрещена", Число(РеквизитыОбъекта.Отправитель_ПерегрузкаЗапрещена));
	
	Возврат СтруктураУсловия;
	
КонецФункции

// Расчет что хотя бы одно из значений заполнено
//  Параметры:
//   Значение1 - ЛюбойТип - первое значение для проверки
//   Значение2 - ЛюбойТип - второе значение для проверки
//  Возвращаемое значение:
//   Булево - оба значения не заполнены
//
Функция ЗначенияЗаполнены(Значение1, Значение2)
	
	Заполнены = ЗначениеЗаполнено(Значение1) Или ЗначениеЗаполнено(Значение2);	
	Возврат Заполнены;
	
КонецФункции

Функция ДанныеПогрузки(ДанныеДокумента, ОснованиеОтгрузки, ОснованиеПолномочий) 
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
    Структура = Новый Структура;
		
	// ВладелецОбъекта
	ВладелецПункта = Новый Структура;	
	Если РеквизитыОбъекта.Владелец_Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.Отправитель Тогда
		
		ВладелецПункта.Вставить("Грузоотправитель", Saby_ТНВыгрузкаСервер.ДанныеЮрЛица("Отгрузчик", ДанныеДокумента));
		
	Иначе
		
		ДругойВладелец = Новый Структура;
		ДругойВладелец.Вставить("Контрагент", Saby_ТНВыгрузкаСервер.ДанныеЮрЛица("ВладелецОбъекта", ДанныеДокумента));
		ВладелецПункта.Вставить("Другой",     ДругойВладелец);
		
	КонецЕсли;	
		
	ВладелецПункта.Вставить(
		"Тип", Перечисления.Saby_ВладелецОбъектаОтгрузки.КодПоЗначению(РеквизитыОбъекта.Владелец_Тип));
	
	Если РеквизитыОбъекта.Владелец_Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.Неизвестен Тогда 
		Причина = СокрЛП(РеквизитыОбъекта.Владелец_НеизвестенПричина);		
	Иначе 
		Причина = "";
	КонецЕсли;
		
	ВладелецПункта.Вставить("ПочемуНеизвестен", Причина);	
		
	Структура.Вставить("ВладелецПункта", ВладелецПункта);
	// -
	
	// Груз
	Груз = Новый Структура;
	Груз.Вставить("Масса",          Новый Структура);
	Груз.Вставить("Состояние",      Новый Структура);
	Груз.Вставить("КоличествоМест", РеквизитыОбъекта.Погрузка_КоличествоМест);
	
	Груз.Масса.Вставить("Брутто",           РеквизитыОбъекта.Погрузка_Масса);
	Груз.Масса.Вставить(
		"МетодОпределения",
		Перечисления.Saby_МетодОпределенияМассы.КодПоЗначению(РеквизитыОбъекта.Погрузка_МассаМетодРасчета)); 
	
	// Остояние кузова и упаковки нет на данный момент
	Груз.Состояние.Вставить("Кузова",   "");
	Груз.Состояние.Вставить("Тары",     СокрЛП(РеквизитыОбъекта.Погрузка_Состояние));
	Груз.Состояние.Вставить("Упаковки", "");
	
	Структура.Вставить("Груз", Груз); 
	// -
			
	// Кто делает погрузку	
    КтоПогружает = ЛицоОтгрузки(ДанныеДокумента, ОснованиеОтгрузки, ОснованиеПолномочий);
		
	Структура.Вставить("КтоПогружает",       КтоПогружает);
	Структура.Вставить("ДатаВремяПрибытия",  СтруктураВремя(РеквизитыОбъекта.Погрузка_ДатаВремяПрибыл));
	Структура.Вставить("ДатаВремяУбытия",    СтруктураВремя(РеквизитыОбъекта.Погрузка_ДатаВремяУбыл));
	Структура.Вставить("ИнформационноеПоле", Новый Структура); // нет источника
			
	Возврат Структура;
	
КонецФункции

Функция ЛицоОтгрузки(ДанныеДокумента, ОснованиеОтгрузки, ОснованиеПолномочий)
	
	РеквизитыОбъекта = ДанныеДокумента.Реквизиты;
	
	Тип = 1;	
	Если ЗначениеЗаполнено(РеквизитыОбъекта.Отгрузчик) 
		И РеквизитыОбъекта.Отправитель <> РеквизитыОбъекта.Отгрузчик Тогда
		
		Тип = 2; 
		
	КонецЕсли;
	
	// Грузоотправитель - если тип 1 то должен заполнится сам
	
	Другой = Новый Структура;	
	
	ТипДругогоОтправителя = 2;
	Если Тип = ТипДругогоОтправителя Тогда 
		
		Другой.Вставить("Контрагент", Saby_ТНВыгрузкаСервер.ДанныеЮрЛица("Отгрузчик", ДанныеДокумента));
		
		Если ЗначениеЗаполнено(ОснованиеОтгрузки) Тогда 
			Другой.Вставить("ДокументОснование", ОснованиеОтгрузки);       
		КонецЕсли;
			
		Работник = Новый Структура;
		Работник.Вставить("Должность", СокрЛП(РеквизитыОбъекта.Отгрузка_ОтветственныйДолжность));
		
		Ответственный = РеквизитыОбъекта.Отгрузка_ОтветственныйСтруктура;
		Если ЗначениеЗаполнено(Ответственный) Тогда
			
			ДанныеОтветственного = ЗначениеИзСтрокиВнутр(Ответственный);
						
			Работник.Вставить("Фамилия",  ДанныеОтветственного.Фамилия);
			Работник.Вставить("Имя",      ДанныеОтветственного.Имя);
			Работник.Вставить("Отчество", ДанныеОтветственного.Отчество);
			
		КонецЕсли;
			
		СтруктураОснПолномочий = Новый Структура;
		Если ЗначениеЗаполнено(ОснованиеПолномочий) Тогда 		 
			СтруктураОснПолномочий.Вставить("Документ", ОснованиеПолномочий); 			
		Иначе 
			СтруктураОснПолномочий.Вставить("ДолжностныеОбязанности", "Должностные обязанности");
		КонецЕсли;
					
		Работник.Вставить("ОснованиеПолномочий", СтруктураОснПолномочий); 
						
		Другой.Вставить("Работник", Работник);
						
	КонецЕсли;
	
	// ОснованиеДоступа
    Структура = Новый Структура;	
	Структура.Вставить("Тип",              Тип);
	Структура.Вставить("Другой",           Другой);
	Структура.Вставить("ОснованиеДоступа", "");
		
	Возврат Структура;
	
КонецФункции

#КонецОбласти // Этапы

#Область ПунктыПогрузкиВыгрузки

Функция ПунктПогрузки(РеквизитыОбъекта)

	СтруктураПункта = ШаблонПункта(РеквизитыОбъекта.Погрузка_ДатаВремя);
	
	// ToDo: структуру из АдресПогрузкиЗначение 
	СтруктураПункта.Адрес.Фактический.Текст = РеквизитыОбъекта.Погрузка_Адрес;
		
	Возврат СтруктураПункта;
	
КонецФункции

Функция ПунктВыгрузки(РеквизитыОбъекта, ЭтоПриемка = Ложь)
	
	Если ЭтоПриемка Тогда
		СтруктураПункта = ШаблонПункта(РеквизитыОбъекта.Выгрузка_ДатаВремя);
	Иначе
		СтруктураПункта = ШаблонПункта(РеквизитыОбъекта.Отправитель_ДоставитьДо);
	КонецЕсли;
	
	ЗаполнитьСтруктуруАресаИзСтроки(СтруктураПункта.Адрес.Фактический, РеквизитыОбъекта.АдресДоставкиЗначение);
	СтруктураПункта.Адрес.Фактический.Текст = РеквизитыОбъекта.Отправитель_АдресДоставки;
		
	Возврат СтруктураПункта;
	
КонецФункции

Функция ШаблонПункта(ДатаВремя)
	
	Структура = Новый Структура;
	
	СтруктураДатаВремя = СтруктураВремя(ДатаВремя);
	Структура.Вставить("ДатаВремя", СтруктураДатаВремя);
	Структура.Вставить("Адрес",     Saby_ТНВыгрузкаСервер.ШаблонФактАдрес());
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти // ПунктыПогрузкиВыгрузки

Функция ЗаявкаНаПеревозку(РеквизитыОбъекта)
	
	ПорядковыйНомер = Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(
		РеквизитыОбъекта.Отправитель_ЗаявкаНомер, Истина);
	
	Структура = Новый Структура;
	Структура.Вставить("Дата",            РеквизитыОбъекта.Отправитель_ЗаявкаДата);
	Структура.Вставить("ПорядковыйНомер", ПорядковыйНомер);
	
    Возврат Структура;
	
КонецФункции

Функция Оформил(ОформилСтруктураСтрокой)
	
	ОформилСтруктура = ЗначениеИзСтрокиВнутр(ОформилСтруктураСтрокой);
	
	РезультатФункции = Новый Структура;
	
	РезультатФункции.Вставить("Фамилия",  ОформилСтруктура.Фамилия);
	РезультатФункции.Вставить("Имя",      ОформилСтруктура.Имя);
	РезультатФункции.Вставить("Отчество", ОформилСтруктура.Отчество);
	
	МассивТелефонов = Новый Массив;
	Для Каждого Телефон Из ОформилСтруктура.Телефоны Цикл
		СтруктураТелефон = Новый Структура;
		СтруктураТелефон.Вставить("Значение", Телефон);
		МассивТелефонов.Добавить(СтруктураТелефон);
	КонецЦикла;
	
	МассивЭлектроннойПочты = Новый Массив;
	СтруктураЭлектроннойПочты = Новый Структура;
	СтруктураЭлектроннойПочты.Вставить("Значение", ОформилСтруктура.ЭлектроннаяПочта);
	МассивЭлектроннойПочты.Добавить(СтруктураЭлектроннойПочты);
	
	Контакты = Новый Структура;
	Контакты.Вставить("Телефон",          МассивТелефонов);
	Контакты.Вставить("ЭлектроннаяПочта", МассивЭлектроннойПочты);
	
	РезультатФункции.Вставить("Контакты", Контакты);
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ВыгрузитьДокументВJson

Функция СтруктураВремя(ДатаВремя, БезВремени = Ложь, СоСмещением = Истина)
		
	Значение = Saby_ТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(ДатаВремя, БезВремени, СоСмещением);
	
	Если Не БезВремени И СтрНайти(Значение, "+") > 0 Тогда 
		ЕстьЧасовойПояс = 1;
	Иначе 
		ЕстьЧасовойПояс = 0;
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("ЕстьЧасовойПояс", ЕстьЧасовойПояс); // 0 нет, 1 - есть
	Структура.Вставить("Значение",        Значение);
	
	Возврат Структура;
	
КонецФункции

Процедура ДобавитьСвойствоВСтруктуруСКонтролем(Структура, ИмяСвойства, Данные, ЭтоВремя = Ложь)
	
	ЗаполнитьСвойство = Ложь;
	
	Если ЭтоВремя Тогда
		Если ЗначениеЗаполнено(Данные.Значение) Тогда		
			ЗаполнитьСвойство = Истина; 
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Данные) Тогда   	
			ЗаполнитьСвойство = Истина;
		КонецЕсли;
	КонецЕсли; 	
	
	Если ЗаполнитьСвойство Тогда 
		Структура.Вставить(ИмяСвойства, Данные);		
	КонецЕсли;
		
КонецПроцедуры

Функция РеквизитыОдиночногоДокументаЭТрН(Ссылка)
	
	Массив = Новый Массив();
	Массив.Добавить(Ссылка);
	
	ДанныеДокументов = Saby_ТНОбщегоНазначенияСервер.РеквизитыДокументовСбис(Массив);
	
	ДанныеДок = ДанныеДокументов.Получить(Ссылка);
	ДанныеДок.Удалить("Тип");
	ДанныеДок.Удалить("Ссылка");
	
	Возврат ДанныеДок;

КонецФункции

// Данные банковского счета по ссылке
// Параметры:
//	БанковскийСчет - СправочникСсылка.БанковскиеСчетаКонтрагентов - счет для получения данных расч. счета контрагента
//	               - СправочникСсылка.БанковскиеСчетаОрганизаций - счет для получения данных расч. счета организации
//                 - СправочникСсылка.БанковскиеСчета - счет для получения данных 
//	                 (в некоторых конфигурация справочник единый)
//
// Возвращаемое значение:
//	Структура - реквизиты счета
//
Функция РеквизитыБанковскогоСчета(БанковскийСчет)
	
	Структура = Новый Структура;
	Структура.Вставить("НомерСчета", "");
	Структура.Вставить("Банк",       Новый Структура);
	
	// Банк
	Структура.Банк.Вставить("Наименование", Новый Структура);
	Структура.Банк.Наименование.Вставить("Полное", "");
	
	Структура.Банк.Вставить("БИК",      "");
	Структура.Банк.Вставить("КоррСчет", "");
		
	ЕстьСправочникБанкСчета = Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено;
		 
	Если ЕстьСправочникБанкСчета Тогда 
		
		// нет корр счета в стандратном получении данных счета	
		РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			БанковскийСчет, "НомерСчета, Банк.Наименование, Банк.Код, Банк.КоррСчет");
		
		Если ЗначениеЗаполнено(РеквизитыСчета) Тогда
			
			Структура.Банк.Наименование.Полное = РеквизитыСчета.БанкНаименование;
			
			Структура.НомерСчета    = РеквизитыСчета.НомерСчета;
			Структура.Банк.БИК      = РеквизитыСчета.БанкКод;
			Структура.Банк.КоррСчет = РеквизитыСчета.БанкКоррСчет;
			
		КонецЕсли;		
		
	Иначе 
		
		ЗаполнитьДанныеБанковскогоСчета(БанковскийСчет, Структура);
						
	КонецЕсли;	
	
	Возврат Структура;
	
КонецФункции

Процедура ЗаполнитьДанныеБанковскогоСчета(БанковскийСчет, Структура)
	
	Если ТипЗнч(БанковскийСчет) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда 
		
		ИмяСправочника = "БанковскиеСчетаОрганизаций";
		РеквизитыСчета = Справочники[ИмяСправочника].ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет); 
		
	Иначе 
		
		ИмяСправочника = "БанковскиеСчетаКонтрагентов";
		РеквизитыСчета = Справочники[ИмяСправочника].ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыСчета) Тогда
		
		Если РеквизитыСчета.Свойство("БИКБанка") Тогда 
			ИмяБик = "БИКБанка"; 
		Иначе 
			ИмяБик = "БИК";
		КонецЕсли;
		
		Если РеквизитыСчета.Свойство("НаименованиеБанка") Тогда 
			ИмяБанка = РеквизитыСчета.НаименованиеБанка; 
		Иначе 
			ИмяБанка = СокрЛП(РеквизитыСчета.Банк);
		КонецЕсли;
		
		Структура.Банк.Наименование.Полное = ИмяБанка;
		
		Структура.НомерСчета    = РеквизитыСчета.НомерСчета;
		Структура.Банк.БИК      = РеквизитыСчета[ИмяБик];
		Структура.Банк.КоррСчет = РеквизитыСчета.КоррСчет;
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура УдалитьСвойстваИзСтруктуры(Структура, Массив)
	
	Для Каждого ЭлементМассива Из Массив Цикл
		Структура.Удалить(ЭлементМассива);	
	КонецЦикла;
		
КонецПроцедуры

// Заполняет структуру адреса для подстановок
//
// Параметры:
//  СтруктураАдреса - Структура - ОбщийШаблонАдреса())
//  АдресЗначение - Строка - результат выполнения ЗначениеВJSON(ОбщийШаблонАдреса())
//
Процедура ЗаполнитьСтруктуруАресаИзСтроки(СтруктураАдреса, АдресЗначение)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(АдресЗначение);  		
	СтруктураАдресаИзСтроки = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Если СтруктураАдресаИзСтроки <> Неопределено Тогда
		ЗаполнитьСтруктуруАдреса(СтруктураАдреса, СтруктураАдресаИзСтроки);
		
		СтруктураАдреса.Структура.Вставить("КодСтраны", СтруктураАдреса.КодСтраны);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруАдреса(Приемник, Источник)
	
	Для Каждого КлючЗначение Из Приемник Цикл
		
		ЗначениеИзИсточника = Неопределено;
		
		Если Не Источник.Свойство(КлючЗначение.Ключ, ЗначениеИзИсточника) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура") Тогда
			ЗаполнитьСтруктуруАдреса(КлючЗначение.Значение, ЗначениеИзИсточника);
		Иначе
			Приемник.Вставить(КлючЗначение.Ключ, ЗначениеИзИсточника);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Выгрузка

#Область Загрузка

#Область ЗагрузитьДокументИзJson

#Область Титулы

// Титул "1110339"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулПогрузка(ОбъектДок, Вложения, Титул, ДопПараметры)
		
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеПогрузка = ДанныеПогрузка(ОбъектДок, Вложения, Титул, ДопПараметры);
		РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеПогрузка, ОбъектДок);
	КонецЕсли;
	
	Если ДопПараметры.ТолькоАктивныйЭтап Тогда
		Возврат;
	КонецЕсли;
	
	// Тилул одиночный
	СтруктураДок = Вложения[0];
	Если Не ЗначениеЗаполнено(СтруктураДок) Тогда 
		Возврат;
	КонецЕсли;	
	
	// основные данные и участники документа	
	// - Документ
	ЗаполнитьДанныеШапкиДокумента(ОбъектДок, СтруктураДок);
	
	Saby_ТНЗагрузкаСервер.ЗаполнитьУчастникаДокумента(
		"Отправитель", СтруктураДок["Грузоотправитель"], ОбъектДок, ОбъектДок.Отправитель);
	Saby_ТНЗагрузкаСервер.ЗаполнитьУчастникаДокумента(
		"Получатель",  СтруктураДок["Грузополучатель"],  ОбъектДок, ОбъектДок.Получатель);
	Saby_ТНЗагрузкаСервер.ЗаполнитьУчастникаДокумента(
		"Перевозчик",  СтруктураДок["Грузоперевозчик"],  ОбъектДок, ОбъектДок.Перевозчик);
	Saby_ТНЗагрузкаСервер.ЗаполнитьУчастникаДокумента(
		"Заказчик",    СтруктураДок["Заказчик"],         ОбъектДок, ОбъектДок.Заказчик);
	Saby_ТНЗагрузкаСервер.ЗаполнитьУчастникаДокумента(
		"Отгрузчик",   СтруктураДок["Отгрузчик"],        ОбъектДок, ОбъектДок.Отправитель);
	
	ЗаполнитьСоставителя(Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(СтруктураДок, "Файл.Составитель"), ОбъектДок);
	
	// Экспедитор
	ОбъектДок.Отправитель_Экспедитор = ЗначениеЗаполнено(ОбъектДок.Заказчик)
		И ОбъектДок.Отправитель <> ОбъектДок.Заказчик;
	
	ДанныеПунктаПогрузки = ДанныеПунктаПогрузки(СтруктураДок["ПунктПогрузки"]);
	ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеПунктаПогрузки);
	
	ДанныеПунктаВыгрузки = ДанныеПунктаВыгрузки(СтруктураДок["ПунктВыгрузки"]);
	ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеПунктаВыгрузки);
	
	// Условия перевозки
	ЗаполнитьУсловияПеревозки(ОбъектДок, СтруктураДок["УсловияПеревозки"]);
	
	// СопроводительныеДокументы
	// Сопроводительная ведомость, Договор перевозки, Документы к грузу, К Трн, Передачи ценностей 
	ЗаполнитьДанныеДокументовТрН(ОбъектДок, СтруктураДок["СопроводительныеДокументы"]);
	
	// ТранспортноеСредство и прицепы
	// Водители и СпецРазрешения
	СтруктураТС = Новый Структура;
	Saby_ТНЗагрузкаСервер.ДанныеТСПрицеповСпецРазрешений(СтруктураТС, СтруктураДок["ТранспортноеСредство"]);
	Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, СтруктураТС);
	
	ДанныеВодителей = Saby_ТНЗагрузкаСервер.ДанныеВодителей(СтруктураДок["Водители"], ДопПараметры);
	Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеВодителей(ОбъектДок, ДанныеВодителей);
			
	// Погрузка
	ЗаполнитьДанныеПогрузки(ОбъектДок, СтруктураДок["Погрузка"]);
	
	// Груз, опасный груз, контейнеры, гос системы, маркировка 
	ЗаполнитьДанныеПоГрузам(ОбъектДок, СтруктураДок["Груз"], ДопПараметры.ЗагрузкаСОнлайна);
	
	// Отметки по всем титулам, акты и штрафы 
	ЗаполнитьДанныеПоОтметкамДокумента(ОбъектДок, СтруктураДок["Отметки"], Титул);
	
КонецПроцедуры

// Титул "1110340"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулПолучениеГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПолучениеГруза = ДанныеПолучениеГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеПолучениеГруза, ОбъектДок);
	
	Если ДопПараметры.ТолькоАктивныйЭтап Тогда
		Возврат;
	КонецЕсли;
	
	// Одиночный титул 
	Данные = Вложения[0];	
	
	Погрузка = Данные["Погрузка"];			
	Если ЗначениеЗаполнено(Погрузка) Тогда 
		
		ИмяПараметраДаты = "Значение";
		
		Замечания = Погрузка["ЗамечанияПеревозчика"];
		
		ДатаПостановки = Замечания["ДатаВремяПостановки"];
		Если ЗначениеЗаполнено(ДатаПостановки) Тогда
			ОбъектДок.Перевозчик_ПриемкаДатаВремя = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(
				ДатаПостановки[ИмяПараметраДаты]);
		КонецЕсли;
		
		ДатаПрибытия = Замечания["ДатаВремяПрибытия"];
		Если ЗначениеЗаполнено(ДатаПрибытия) Тогда
			ОбъектДок.Перевозчик_ПриемкаДатаВремяПрибыл = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(
				ДатаПрибытия[ИмяПараметраДаты]);
		КонецЕсли;
		
		ДатаУбытия = Замечания["ДатаВремяУбытия"];
		Если ЗначениеЗаполнено(ДатаУбытия) Тогда
			ОбъектДок.Перевозчик_ПриемкаДатаВремяУбыл = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(
				ДатаУбытия[ИмяПараметраДаты]);
		КонецЕсли;
		
		Параметры = Saby_ТНОбщегоНазначенияСервер.ПараметрыСвойстваСКонтролем(ОбъектДок, Замечания);
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
			Параметры, "Перевозчик_ЗамечанияПоПогрузочнымРаботам",     "ВыполненныеРаботы");
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
			Параметры, "Перевозчик_ПогрузкаЗамечанияПоКоличеству",     "КоличествоМест");
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
			Параметры, "Перевозчик_ПогрузкаЗамечанияПоМассе",          "МассаГруза");
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
			Параметры, "Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза", "СостояниеГруза");
		
	КонецЕсли;
	
	// Отметки по всем титулам, акты и штрафы 
	ЗаполнитьДанныеПоОтметкамДокумента(ОбъектДок, Данные["Отметки"], Титул);
			
КонецПроцедуры

// Титул "1110341"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулПриемкаГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПриемкаГруза = ДанныеПриемкаГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ДанныеТитула = ДанныеПриемкаГруза[ДанныеПриемкаГруза.ВГраница()];
		
		ДанныеДляДокументаБезПустыхЗначений = СтруктураБезПустыхЗначений(ДанныеТитула.ДляДокумента);
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеДляДокументаБезПустыхЗначений, , "Отметки");
		
		ЗаполнитьДанныеПоОтметкам(ОбъектДок, ДанныеТитула.ДляДокумента.Отметки, ДанныеТитула.Титул);
		
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеПриемкаГруза, ОбъектДок);
			
КонецПроцедуры

// Титул "1110342"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулВыдачаГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеВыдачаГруза = ДанныеВыдачаГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ДанныеТитула = ДанныеВыдачаГруза[ДанныеВыдачаГруза.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента, , "Отметки");
		
		ЗаполнитьДанныеПоОтметкам(ОбъектДок, ДанныеТитула.ДляДокумента.Отметки, ДанныеТитула.Титул);
		
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеВыдачаГруза, ОбъектДок);
	
КонецПроцедуры

// Титул "1110343"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулПереадресовка(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеПереадресовка = ДанныеПереадресовка(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе
		ДанныеПереадресовка = Вложения;
	КонецЕсли;
	ДанныеТитула = ДанныеПереадресовка[ДанныеПереадресовка.ВГраница()];
	
	ДанныеДляДокументаБезПустыхЗначений = СтруктураБезПустыхЗначений(ДанныеТитула.ДляДокумента);
	ЗаполнитьЗначенияСвойств(
		ОбъектДок,
		ДанныеДляДокументаБезПустыхЗначений,
		,
		"Отметки,ДанныеЮрЛиц,КонтактныеДанные");
	
	ЗаполнитьДанныеПоОтметкам(ОбъектДок, ДанныеТитула.ДляДокумента.Отметки, ДанныеТитула.Титул);
	
	Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
		ОбъектДок,
		ДанныеТитула.ДляДокумента,
		Перечисления.Saby_РолиКонтрагентов["Получатель"]);
	
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеПереадресовка, ОбъектДок);
	
КонецПроцедуры

// Титул "1167009"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулУведомлениеОПереадресовке(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеУведомлениеОПереадресовке = ДанныеУведомлениеОПереадресовке(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе 
		ДанныеУведомлениеОПереадресовке = Вложения;
	КонецЕсли;
	
	Если Не ДопПараметры.ЗагрузкаСОнлайна Тогда
		
		ДанныеТитула = ДанныеУведомлениеОПереадресовке[ДанныеУведомлениеОПереадресовке.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента, , "Отметки,ДанныеЮрЛиц,КонтактныеДанные");
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок,
			ДанныеТитула.ДляДокумента,
			Перечисления.Saby_РолиКонтрагентов["Получатель"]);
		
		// КИ Оформителя
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок,
			ДанныеТитула.ДляДокумента,
			Перечисления.Saby_РолиКонтрагентов.ПустаяСсылка());
							
	КонецЕсли;
	
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеУведомлениеОПереадресовке, ОбъектДок);
	
КонецПроцедуры	

// Титул "1110344"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулЗаменаВодителяТС(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеЗаменаВодителяТС = ДанныеЗаменаВодителяТС(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе
		ДанныеЗаменаВодителяТС = Вложения;
	КонецЕсли;
	
	Для Каждого ДанныеТитула Из ДанныеЗаменаВодителяТС Цикл
		
		ДанныеДляДокументаБезПустыхЗначений = СтруктураБезПустыхЗначений(ДанныеТитула.ДляДокумента);
		ЗаполнитьЗначенияСвойств(
			ОбъектДок,
			ДанныеДляДокументаБезПустыхЗначений,
			,
			"Отметки,Водители,ТранспортныеСредства,СпецРазрешения");
		
		ЗаполнитьДанныеПоОтметкам(ОбъектДок, ДанныеТитула.ДляДокумента.Отметки, ДанныеТитула.Титул);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеВодителей(ОбъектДок, ДанныеТитула.ДляДокумента.Водители);
		
	КонецЦикла;
	
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеЗаменаВодителяТС, ОбъектДок); 
	
КонецПроцедуры

// Титул "1110345"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулИзменениеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры)  
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеИзменения = ДанныеИзменениеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе
		
		ДанныеИзменения = Вложения;		
		ДанныеТитула    = ДанныеИзменения[ДанныеИзменения.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
		
	КонецЕсли;
	 
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеИзменения, ОбъектДок);
	
КонецПроцедуры

// Титул "1110346"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулСогласованиеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеСогласования = ДанныеСогласованиеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе
		
		ДанныеСогласования = Вложения;
		ДанныеТитула       = ДанныеСогласования[ДанныеСогласования.ВГраница()]; 
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
		
	КонецЕсли;
		
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеСогласования, ОбъектДок);
	
КонецПроцедуры

// Титул "1115113"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулУведомленияОУточнении(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеУведомлениеОУточнении = ДанныеУведомлениеОУточнении(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе 
		ДанныеУведомлениеОУточнении = Вложения;
	КонецЕсли;
	
	ДанныеТитула = ДанныеУведомлениеОУточнении[ДанныеУведомлениеОУточнении.ВГраница()];
	
	ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
	
	РегистрыСведений.Saby_ДанныеТитулов.ЗаписатьДанные(ДанныеУведомлениеОУточнении, ОбъектДок);
	
КонецПроцедуры
	
#КонецОбласти // Титулы

#Область ДанныеОсновныхТитулов

Функция ДанныеПогрузка(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = Saby_ТНЗагрузкаСервер.ДанныеДляРегистраТитулов(
			Вложение, ОбъектДок.Ссылка, Титул, ДопПараметры.ИмяМетаданных, Истина);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеПолучениеГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = Saby_ТНЗагрузкаСервер.ДанныеДляРегистраТитулов(
			Вложение, ОбъектДок.Ссылка, Титул, ДопПараметры.ИмяМетаданных, Истина);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеПриемкаГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ДатаВремяВыгрузки = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "ПунктВыгрузки.ДатаВремя.Значение");
		Если ЗначениеЗаполнено(ДатаВремяВыгрузки) Тогда
			ДляДокумента.Вставить(
				"Выгрузка_ДатаВремя",
				Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаВремяВыгрузки));
		КонецЕсли;
		
		ДатаПрибытия = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Выгрузка.ДатаВремяПрибытия.Значение");
		Если ЗначениеЗаполнено(ДатаПрибытия) Тогда
			ДляДокумента.Вставить(
				"Выгрузка_ДатаВремяПрибыл",
				Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаПрибытия));
		КонецЕсли;
		
		ДатаУбытия = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Выгрузка.ДатаВремяУбытия.Значение");
		Если ЗначениеЗаполнено(ДатаУбытия) Тогда 
			ДляДокумента.Вставить(
				"Выгрузка_ДатаВремяУбыл",
				Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаУбытия));
		КонецЕсли;
		
		Масса = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Выгрузка.Груз.Масса");
		Если ЗначениеЗаполнено(Масса) Тогда 
			
			ДляДокумента.Вставить("Выгрузка_МассаБрутто", Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(Масса["Брутто"]));
			ДляДокумента.Вставить("Выгрузка_МассаНетто", Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(Масса["Нетто"]));
			
			МетодОпределения = Перечисления.Saby_МетодОпределенияМассы.ЗначениеПоКоду(Масса["МетодОпределения"]);
			ДляДокумента.Вставить("Выгрузка_МассаМетодРасчета", МетодОпределения);

		КонецЕсли;
		
		ГрузВыгрузка = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Выгрузка.Груз");
		Если ЗначениеЗаполнено(ГрузВыгрузка) Тогда
			ДляДокумента.Вставить(
				"Выгрузка_КоличествоМест", Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(ГрузВыгрузка["КоличествоМест"]));
			ДляДокумента.Вставить("Выгрузка_Объем", Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(ГрузВыгрузка["Объем"]));
		КонецЕсли;
		
		Состояние = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Выгрузка.Груз.Состояние.Общее");
		Если ЗначениеЗаполнено(Состояние) Тогда 
			ДляДокумента.Вставить("Выгрузка_Состояние", Состояние);
		КонецЕсли;
				
		ДляДокумента.Вставить("Отметки", ДанныеПоОтметкам(Вложение["Отметки"], Титул));
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = Saby_ТНЗагрузкаСервер.ДанныеДляРегистраТитулов(
			Вложение, ОбъектДок.Ссылка, Титул, ДопПараметры.ИмяМетаданных, Истина);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеВыдачаГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ДатаПостановки = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "Выгрузка.ЗамечанияПеревозчика.ДатаВремяПостановки.Значение");
		Если ЗначениеЗаполнено(ДатаПостановки) Тогда 
			ДляДокумента.Вставить(
				"Перевозчик_ВыгрузкаДатаВремя",
				Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаПостановки));
		КонецЕсли;
		
		ДатаПрибытия = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "Выгрузка.ЗамечанияПеревозчика.ДатаВремяПрибытия.Значение");
		Если ЗначениеЗаполнено(ДатаПрибытия) Тогда 
			ДляДокумента.Вставить(
				"Перевозчик_ВыгрузкаДатаВремяПрибыл",
				Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаПрибытия));
		КонецЕсли;
		
		ДатаУбытия = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "Выгрузка.ЗамечанияПеревозчика.ДатаВремяУбытия.Значение");
		Если ЗначениеЗаполнено(ДатаУбытия) Тогда 
			ДляДокумента.Вставить(
				"Перевозчик_ВыгрузкаДатаВремяУбыл",
				Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаУбытия));
		КонецЕсли;
		
		ВыполненныеРаботы = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "Выгрузка.ЗамечанияПеревозчика.ВыполненныеРаботы");
		Если ВыполненныеРаботы <> Неопределено Тогда
			ДляДокумента.Вставить("Перевозчик_ЗамечанияПоРазгрузочнымРаботам", ВыполненныеРаботы);
		КонецЕсли;
		
		СостояниеГруза = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "Выгрузка.ЗамечанияПеревозчика.СостояниеГруза");
		Если СостояниеГруза <> Неопределено Тогда
			ДляДокумента.Вставить("Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза", СостояниеГруза);
		КонецЕсли;
		
		ДляДокумента.Вставить("Отметки", ДанныеПоОтметкам(Вложение["Отметки"], Титул));
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = Saby_ТНЗагрузкаСервер.ДанныеДляРегистраТитулов(
			Вложение, ОбъектДок.Ссылка, Титул, ДопПараметры.ИмяМетаданных, Истина);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ДанныеОсновныхТитулов

#Область ДанныеДинамическихТитулов

// Титул "1110343"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
// Возвращаемое значение:
//	Структура - данные титула в формате подстановок
//
Функция ДанныеПереадресовка(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения, ДопПараметры);
	
	РольКонтрагентаПолучатель = Перечисления.Saby_РолиКонтрагентов["Получатель"];
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ДляДокумента = ДанныеПунктаВыгрузки(Вложение["ПунктВыгрузки"], ДляДокумента);

		ДляДокумента.Вставить("Отметки", ДанныеПоОтметкам(Вложение["Отметки"], Титул));
		
		ДанныеГрузополучателя = Вложение["Грузополучатель"];
		
		ДляДокумента.Вставить("Получатель",  Saby_ТНЗагрузкаСервер.ПолучитьЮрЛицо(ДанныеГрузополучателя));
		ДляДокумента.Вставить(
			"ДанныеЮрЛиц", Saby_ТНЗагрузкаСервер.ДанныеЮрЛиц(ДанныеГрузополучателя, РольКонтрагентаПолучатель));
		ДляДокумента.Вставить(
			"КонтактныеДанные", Saby_ТНЗагрузкаСервер.КонтактнаяИнформация(ДанныеГрузополучателя, РольКонтрагентаПолучатель));
				
		Основание = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Переадресовка.Основание.Документ");
		Если ЗначениеЗаполнено(Основание) Тогда 
			
			Тип = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей;
			ОснованиеСсылка = Saby_ТНЗагрузкаСервер.ЗагрузитьОдиночныйДокументЭТрН(Основание, Тип);				

			ДляДокумента.Вставить("ПереадресовкаНаОсновании", ОснованиеСсылка);
						
		КонецЕсли;
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = Saby_ТНЗагрузкаСервер.ДанныеДляРегистраТитулов(
			Вложение, ОбъектДок.Ссылка, Титул, ДопПараметры.ИмяМетаданных, ДопПараметры.Просмотрено);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Титул "1167009"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
// Возвращаемое значение:
//	Структура - данные титула в формате подстановок
//
Функция ДанныеУведомлениеОПереадресовке(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения, ДопПараметры);
	
	РольКонтрагентаПолучатель = Перечисления.Saby_РолиКонтрагентов.Получатель;
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ДляДокумента = ДанныеПунктаВыгрузки(Вложение["ПунктВыгрузки"], ДляДокумента);

		ДляДокумента.Вставить("Отметки", ДанныеПоОтметкам(Вложение["Отметки"], Титул));
		
		Грузополучатель = Вложение["Грузополучатель"];
		ДляДокумента.Вставить("Получатель",       Saby_ТНЗагрузкаСервер.ПолучитьЮрЛицо(Грузополучатель));
		ДляДокумента.Вставить(
			"ДанныеЮрЛиц", Saby_ТНЗагрузкаСервер.ДанныеЮрЛиц(Грузополучатель, РольКонтрагентаПолучатель));
		ДляДокумента.Вставить(
			"КонтактныеДанные", Saby_ТНЗагрузкаСервер.КонтактнаяИнформация(Грузополучатель, РольКонтрагентаПолучатель));
		
		СопроводительныеДокументы = Вложение["СопроводительныеДокументы"];
		Если ЗначениеЗаполнено(СопроводительныеДокументы) Тогда
			
			Основание = СопроводительныеДокументы["Отгрузка"];
			
			Тип = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей;
			ОснованиеСсылка = Saby_ТНЗагрузкаСервер.ЗагрузитьОдиночныйДокументЭТрН(Основание, Тип);				
				
			ДляДокумента.Вставить("ПереадресовкаНаОсновании", ОснованиеСсылка);
			
		КонецЕсли;	
		
		Причина = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Переадресовка.Уведомление.Причина");
		Если ЗначениеЗаполнено(Причина) Тогда
			ДляДокумента.Вставить("Причина", Причина);
		КонецЕсли;
		
		Оформитель = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Переадресовка.Уведомление.Отправитель");
		ЗаполнитьДанныеОформителя(Оформитель, ДляДокумента);
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = Saby_ТНЗагрузкаСервер.ДанныеДляРегистраТитулов(
			Вложение, ОбъектДок.Ссылка, Титул, ДопПараметры.ИмяМетаданных, ДопПараметры.Просмотрено);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Титул "1110344"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
// Возвращаемое значение:
//	Структура - данные титула в формате подстановок
//
Функция ДанныеЗаменаВодителяТС(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ДанныеЗамены = Вложение["ЗаменаВодителяТС"];
		
		ДляДокумента.Вставить(
			"ДатаВремяЗамены",
			Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДанныеЗамены["ДатаВремя"]["Значение"]));
		
		Saby_ТНЗагрузкаСервер.ДанныеТСПрицеповСпецРазрешений(ДляДокумента, Вложение["ТранспортноеСредство"]);
		
		ДляДокумента.Вставить("Водители", Saby_ТНЗагрузкаСервер.ДанныеВодителей(Вложение["Водители"], ДопПараметры));

		ДляДокумента.Вставить("Отметки",  ДанныеПоОтметкам(Вложение["Отметки"], Титул));
		
		ПричинаЗамены = ДанныеЗамены["Основание"]["Текст"];
		Если Не ЗначениеЗаполнено(ПричинаЗамены) Тогда
			ПричинаЗамены = "";
		КонецЕсли;
		ДляДокумента.Вставить("ПричинаЗамены", ПричинаЗамены);
		
		Основание = ДанныеЗамены["Основание"]["Документ"];
		Если ЗначениеЗаполнено(Основание) Тогда 
			Тип = Перечисления.Saby_ТипыДокумента.КТранспортнойНакладной;
			ДокументЗамены = Saby_ТНЗагрузкаСервер.ЗагрузитьОдиночныйДокументЭТрН(Основание, Тип);
			ДляДокумента.Вставить("ДокументЗамены", ДокументЗамены);
		КонецЕсли;
		
		// пока не требуется:
	    // - Водители.Документ
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = Saby_ТНЗагрузкаСервер.ДанныеДляРегистраТитулов(
			Вложение, ОбъектДок.Ссылка, Титул, ДопПараметры.ИмяМетаданных, ДопПараметры.Просмотрено);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Титул "1110345"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
// Возвращаемое значение:
//	Структура - данные титула в формате подстановок
//
Функция ДанныеИзменениеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;		
		ДляДокумента.Вставить("Перевозчик", ОбъектДок.Перевозчик);
		
		ДанныеСчетаСОнлайна = ДанныеСчетаИзРеквизитовОнлайна(Вложение["Грузоперевозчик"], ОбъектДок.Перевозчик);
		Для Каждого КлючЗначение Из ДанныеСчетаСОнлайна Цикл
			ДляДокумента.Вставить(КлючЗначение.Ключ + "Перевозчик", КлючЗначение.Значение);
		КонецЦикла;
				
		Стоимость = Вложение["СтоимостьПеревозки"]; 
		Если ЗначениеЗаполнено(Стоимость) Тогда 
			
			Если ЗначениеЗаполнено(Стоимость["Налог"]) Тогда 	
				СтавкаНДС = Saby_ТНОбщегоНазначенияСервер.ЗначениеСтавкиНДС(Стоимость["Налог"]["Ставка"], Истина);
			Иначе 
				СтавкаНДС = "без НДС";
			КонецЕсли;
		
			ДляДокумента.Вставить("Сумма",       Стоимость["ВключаяНДС"]);
			ДляДокумента.Вставить("Условия",     Стоимость["Расчет"]);
			ДляДокумента.Вставить("СуммаБезНДС", Стоимость["БезНДС"]);			
			ДляДокумента.Вставить("Ставка",      СтавкаНДС);
				
		КонецЕсли;
				
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = Saby_ТНЗагрузкаСервер.ДанныеДляРегистраТитулов(
			Вложение, ОбъектДок.Ссылка, Титул, ДопПараметры.ИмяМетаданных, ДопПараметры.Просмотрено);
		
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
	
    	РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;

КонецФункции

// Титул "1110346"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
// Возвращаемое значение:
//	Структура - данные титула в формате подстановок
//
Функция ДанныеСогласованиеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры)

	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;			
		ДляДокумента.Вставить("Отправитель", ОбъектДок.Отправитель);		
		
		ИнойПлательщик = Вложение["ИнойПлательщик"];
		Если ЗначениеЗаполнено(ИнойПлательщик) Тогда
			
			Плательщик = КонтрагентОрганизацияПоНаименованию(ИнойПлательщик["Название"]["Полное"]);	
			
			Основание = ИнойПлательщик["Основание"]; 			
			Если ЗначениеЗаполнено(Основание) Тогда 
				
				Тип = Перечисления.Saby_ТипыДокумента.ОснованиеОплатыПеревозки;
				ОснованиеСсылка = Saby_ТНЗагрузкаСервер.ЗагрузитьОдиночныйДокументЭТрН(Основание, Тип);				
				
				ДляДокумента.Вставить("ОснованиеОплаты", ОснованиеСсылка);
				
			КонецЕсли;
			
			ДляДокумента.Вставить("ТипПлательщик", "ДругоеЮрЛицо");
			
		Иначе 	
			Плательщик = ОбъектДок.Отправитель;			
		КонецЕсли;
		
		ДляДокумента.Вставить("Плательщик", Плательщик);
		
		ДанныеСчетаСОнлайна = ДанныеСчетаИзРеквизитовОнлайна(Вложение["Грузоотправитель"], ОбъектДок.Отправитель);
		Для Каждого КлючЗначение Из ДанныеСчетаСОнлайна Цикл
			ДляДокумента.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
					
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = Saby_ТНЗагрузкаСервер.ДанныеДляРегистраТитулов(
			Вложение, ОбъектДок.Ссылка, Титул, ДопПараметры.ИмяМетаданных, ДопПараметры.Просмотрено);
		
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);		
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ДанныеДинамическихТитулов

#Область ДанныеОтрицательногоЗавершенияДО

// Титул "1115113"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
// Возвращаемое значение:
//	Структура - данные титула в формате подстановок
//
Функция ДанныеУведомлениеОУточнении(ОбъектДок, Вложения, Титул, ДопПараметры)

	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = РегистрыСведений.Saby_ДанныеТитулов.ВложенияДляЗагрузки(
		ОбъектДок.Ссылка, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ОбъектДок.ЗаполнитьПрошлыйТитулДляВложения(Вложение, Титул);
		ПрошлыйТитул = Вложение["ПрошлыйТитул"];
		
		ДляДокумента.Вставить("Представление", ПрошлыйТитул.Представление);
		
		ПричинаОтказа = Вложение["СведенияОбУточнении"];
		Если ЗначениеЗаполнено(ПричинаОтказа) Тогда
			ДляДокумента.Вставить("КомментарийУведомление", "Комментарий: " + ПричинаОтказа["ТекстУведУточ"]);
		КонецЕсли;
		
		СтруктураТитула = Новый Структура;
		СтруктураТитула.Вставить("Титул",        Титул);
		СтруктураТитула.Вставить("ДляДокумента", ДляДокумента);
		
		ДляРегистра = Saby_ТНЗагрузкаСервер.ДанныеДляРегистраТитулов(
			Вложение,
			ОбъектДок.Ссылка,
			Титул,
			ДопПараметры.ИмяМетаданных,
			ДопПараметры.Просмотрено,
			ПрошлыйТитул.Тип);
		СтруктураТитула.Вставить("ДляРегистра",  ДляРегистра);
		
		РезультатФункции.Добавить(СтруктураТитула);
		
	КонецЦикла;
	
	Возврат РезультатФункции;

КонецФункции // ДанныеУведомлениеОУточнении()

#КонецОбласти // ДанныеОтрицательногоЗавершенияДО

Процедура ЗаполнитьДанныеШапкиДокумента(ОбъектДок, ИсходнаяСтруктура)
	
	ЗаявкаНаПеревозку = ИсходнаяСтруктура["ЗаявкаНаПеревозку"];
	Если ЗначениеЗаполнено(ЗаявкаНаПеревозку) Тогда		
		ОбъектДок.Отправитель_ЗаявкаНомер = ЗаявкаНаПеревозку["ПорядковыйНомер"];
		ОбъектДок.Отправитель_ЗаявкаДата  = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(
			ЗаявкаНаПеревозку["Дата"]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПогрузки(ОбъектДок, Погрузка)
	
	Если Не ЗначениеЗаполнено(Погрузка) Тогда 
		Возврат;
	КонецЕсли;
								
	// Дата/время 
	ВремяПрибытия = Погрузка["ДатаВремяПрибытия"];
	ВремяУбытия   = Погрузка["ДатаВремяУбытия"];
	
	Если ЗначениеЗаполнено(ВремяПрибытия) Тогда  
		ОбъектДок.Погрузка_ДатаВремяПрибыл = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(
			ВремяПрибытия["Значение"]);
	Иначе 
		ОбъектДок.Погрузка_ДатаВремяПрибыл = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВремяУбытия) Тогда 
		ОбъектДок.Погрузка_ДатаВремяУбыл = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ВремяУбытия["Значение"]);
	Иначе 	
		ОбъектДок.Погрузка_ДатаВремяУбыл = ""; 
	КонецЕсли;
	
	Масса = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Погрузка, "Груз.Масса");
	Если ЗначениеЗаполнено(Масса) Тогда
		ОбъектДок.Погрузка_Масса = Масса["Брутто"];
		МетодОпределения = Перечисления.Saby_МетодОпределенияМассы.ЗначениеПоКоду(Масса["МетодОпределения"]);
		ОбъектДок.Погрузка_МассаМетодРасчета = МетодОпределения;
	КонецЕсли;
	
	КоличествоМест = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Погрузка, "Груз.КоличествоМест");
	Если ЗначениеЗаполнено(КоличествоМест) Тогда
		ОбъектДок.Погрузка_КоличествоМест = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(КоличествоМест);
	КонецЕсли;
	
	// Состояние
	Массив = Новый Массив;
	Тара = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Погрузка, "Груз.Состояние.Тары");
	Если ЗначениеЗаполнено(Тара) Тогда 
		Массив.Добавить(Тара);    
	КонецЕсли;
	Кузов = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Погрузка, "Груз.Состояние.Кузова"); 
	Если ЗначениеЗаполнено(Кузов) Тогда		
		Массив.Добавить(Кузов);
	КонецЕсли;
	Упаковка = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Погрузка, "Груз.Состояние.Упаковки");
	Если ЗначениеЗаполнено(Упаковка) Тогда 
		Массив.Добавить(Упаковка);
	КонецЕсли;
	ОбъектДок.Погрузка_Состояние = СокрЛП(СтрСоединить(Массив, " "));
	
	ЗаполнитьДанныеКтоПогружает(ОбъектДок, Погрузка["КтоПогружает"]);
	
	ЗаполнитьДанныеВладельца(ОбъектДок, Погрузка["ВладелецПункта"]);
			
КонецПроцедуры

#Область ПунктыПогрузкиИВыгрузки

Функция ДанныеПунктаПогрузки(ДанныеПогрузкиСОнлайна, СтруктураДляЗаполнения = Неопределено)
	
	Если СтруктураДляЗаполнения = Неопределено Тогда
		СтруктураДляЗаполнения = Новый Структура;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеПогрузкиСОнлайна) Тогда 
		Возврат СтруктураДляЗаполнения;
	КонецЕсли;
	
	АдресФактПогрузка = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеПогрузкиСОнлайна, "Адрес.Фактический");
	Если ЗначениеЗаполнено(АдресФактПогрузка) Тогда 
					
		ДанныеАдресаПогрузка = Saby_ТНЗагрузкаСервер.ПреобразоватьСтруктуруАдреса(АдресФактПогрузка);
		Если ЗначениеЗаполнено(ДанныеАдресаПогрузка) Тогда 
			СтруктураДляЗаполнения.Вставить("Погрузка_Адрес",        ДанныеАдресаПогрузка.АдресСтрокой);
			СтруктураДляЗаполнения.Вставить("АдресПогрузкиЗначение", ДанныеАдресаПогрузка.АдресСтруктурой);
		КонецЕсли;
					
	КонецЕсли;
	
	ДатаВремяПогрузки = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеПогрузкиСОнлайна, "ДатаВремя.Значение");
	Если ДатаВремяПогрузки <> Неопределено Тогда
		СтруктураДляЗаполнения.Вставить(
			"Погрузка_ДатаВремя",
			Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаВремяПогрузки));
	КонецЕсли;
	
	Возврат СтруктураДляЗаполнения;
	
КонецФункции

Функция ДанныеПунктаВыгрузки(ДанныеВыгрузкиСОнлайна, СтруктураДляЗаполнения = Неопределено)
	
	Если СтруктураДляЗаполнения = Неопределено Тогда
		СтруктураДляЗаполнения = Новый Структура;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеВыгрузкиСОнлайна) Тогда 
		Возврат СтруктураДляЗаполнения;
	КонецЕсли;
	
	АдресФактВыгрузка = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеВыгрузкиСОнлайна, "Адрес.Фактический");
	Если ЗначениеЗаполнено(АдресФактВыгрузка) Тогда 
		
		ДанныеАдресаВыгрузка = Saby_ТНЗагрузкаСервер.ПреобразоватьСтруктуруАдреса(АдресФактВыгрузка);
		Если ЗначениеЗаполнено(ДанныеАдресаВыгрузка) Тогда
			СтруктураДляЗаполнения.Вставить("Отправитель_АдресДоставки", ДанныеАдресаВыгрузка.АдресСтрокой);
			СтруктураДляЗаполнения.Вставить("АдресДоставкиЗначение",     ДанныеАдресаВыгрузка.АдресСтруктурой);
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаВремяВыгрузки = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеВыгрузкиСОнлайна, "ДатаВремя.Значение");
	Если ДатаВремяВыгрузки <> Неопределено Тогда
		СтруктураДляЗаполнения.Вставить(
			"Отправитель_ДоставитьДо",
			Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(ДатаВремяВыгрузки));
		СтруктураДляЗаполнения.Вставить("Выгрузка_ДатаВремя",      СтруктураДляЗаполнения.Отправитель_ДоставитьДо);
	КонецЕсли;
	
	Возврат СтруктураДляЗаполнения;
	
КонецФункции

#КонецОбласти // ПунктыПогрузкиИВыгрузки

Процедура ЗаполнитьУсловияПеревозки(ОбъектДок, УсловияПеревозки)
	
	Если УсловияПеревозки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
			
	Параметры = Saby_ТНОбщегоНазначенияСервер.ПараметрыСвойстваСКонтролем(ОбъектДок, УсловияПеревозки);
	
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
		Параметры, "Отправитель_НормыПеревозки",      "Нормы"); 	
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
		Параметры, "Отправитель_ПерегрузкаЗапрещена", "ПерегрузкаЗапрещена", Истина);	
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
		Параметры, "Отправитель_Пломба",              "Пломба");
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
		Параметры, "Отправитель_ДоставитьСрок",       "СрокДоставки");
	Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
		Параметры, "Отправитель_ОграничениеСкорости", "ОграничениеСкорости");
	
	// Климатический режим
	КлиматическийРежим = УсловияПеревозки["КлиматическийРежим"]; 
	Если ЗначениеЗаполнено(КлиматическийРежим) Тогда  
		
		Температура = КлиматическийРежим["Температура"]; 
		Если ЗначениеЗаполнено(Температура) Тогда 
			Параметры.Источник = Температура;
			Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
				Параметры, "Отправитель_ТемператураОт", "Минимальная",  Истина);
			Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
				Параметры, "Отправитель_ТемператураДо", "Максимальная", Истина);
		КонецЕсли;
		
		Влажность = КлиматическийРежим["Влажность"];
		Если ЗначениеЗаполнено(Влажность) Тогда
			Параметры.Источник = Влажность;
			Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
				Параметры, "Отправитель_ВлажностьОт", "Минимальная",  Истина);
			Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
				Параметры, "Отправитель_ВлажностьДо", "Максимальная", Истина);
		КонецЕсли;
				
	КонецЕсли;
	
	// Маршрут
	// ToDo: сейчас маршрутов нет даже в метаданных 
	
	// переадресация       
	Переадресовка = УсловияПеревозки["Переадресовка"];
	Если ЗначениеЗаполнено(Переадресовка) Тогда 
		
		ОбъектДок.ИнициаторПереадресации = Перечисления.Saby_РолиКонтрагентов.ЗначениеПоКоду(
			Переадресовка["КтоПереадресует"]);
			
		Подтверждение = Переадресовка["ПодтверждениеПолномочий"];
		Если ЗначениеЗаполнено(Подтверждение) Тогда 
			
			Тип = Перечисления.Saby_ТипыДокумента.ПравоПереадресации;				
			ПодтверждениеСсылка = Saby_ТНЗагрузкаСервер.ЗагрузитьОдиночныйДокументЭТрН(Подтверждение, Тип);
						
			ОбъектДок.ИнициаторПереадресацииПодтверждение = ПодтверждениеСсылка;
			
		КонецЕсли;
			
	КонецЕсли;
	
	// ToDo: нет заполнения по этим полям 
	// - Контакты - либо грузоотправителя или грузополучателя 
	// - ПодтверждениеПолномочий
		
КонецПроцедуры

Процедура ЗаполнитьДанныеКтоПогружает(ОбъектДок, КтоПогружает)
	
	Если КтоПогружает = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	// Кто погружает
	// Грузоотправитель или другой 
	Если КтоПогружает["Тип"] = "2" Тогда		
		
		ДругойПогрузчик = КтоПогружает["Другой"];
		
		// другое юр лицо  
		Контрагент = ДругойПогрузчик["Контрагент"];
		Saby_ТНЗагрузкаСервер.ЗаполнитьУчастникаДокумента("Отгрузчик", Контрагент, ОбъектДок);		
		
		// Работник          
		Работник = ДругойПогрузчик["Работник"];
		Если ЗначениеЗаполнено(Работник) Тогда 
			
			Работник = ДругойПогрузчик["Работник"];
			
			СтруктураРаботника = Новый Структура;
			СтруктураРаботника.Вставить("Фамилия",  Работник["Фамилия"]);
			СтруктураРаботника.Вставить("Имя",      Работник["Имя"]);
			СтруктураРаботника.Вставить("Отчество", Работник["Отчество"]);
			
			ОбъектДок.Отгрузка_ОтветственныйСтруктура = ЗначениеВСтрокуВнутр(СтруктураРаботника);
			
			Если ЗначениеЗаполнено(Работник["Должность"]) Тогда				
				ОбъектДок.Отгрузка_ОтветственныйДолжность = Работник["Должность"];								
			КонецЕсли;						
			
		КонецЕсли;
		
	Иначе 	
		
		// Грузооправитель
		ОбъектДок.Отгрузчик = ОбъектДок.Отправитель;		
			
	КонецЕсли;	
		
	ЗаполнитьДокументыКтоПогружает(ОбъектДок, КтоПогружает);
	
КонецПроцедуры

Процедура ЗаполнитьДокументыКтоПогружает(ОбъектДок, КтоПогружает)
	
	// Погружает отправитель
	Если КтоПогружает["Тип"] <> "2" Тогда
		Возврат;
	КонецЕсли;
	
	// Документы владения
	ТЗ = Saby_ТНЗагрузкаСервер.ТаблицаДокументовТрН();
	НомерСтроки = 0;
	
	// ДокументОснование 
	ДокументОснование = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(КтоПогружает, "Другой.ДокументОснование");
	Если ЗначениеЗаполнено(ДокументОснование) Тогда 			
		НС = ТЗ.Добавить();
		Тип = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей;
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, ДокументОснование, Тип, НомерСтроки);
	КонецЕсли;
	
	ДокПолномочий = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
		КтоПогружает, "Другой.Работник.ОснованиеПолномочий.Документ");
	Если ЗначениеЗаполнено(ДокПолномочий) Тогда
		НС = ТЗ.Добавить();
		Тип = Перечисления.Saby_ТипыДокумента.ОтветственныйНаОсновании;
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, ДокПолномочий, Тип, НомерСтроки);
	Иначе
		ОбъектДок.Отгрузка_ОтветственныйНаОсновании = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(
			КтоПогружает,
			"Другой.Работник.ОснованиеПолномочий.ДолжностныеОбязанности");
	КонецЕсли;
	
	Если ТЗ.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	СоответствиеДокументов = Saby_ТНЗагрузкаСервер.НайтиСоздатьДокументТрН(ТЗ);
		
	// Заполняем данные
	Для Каждого СтрокаДок Из ТЗ Цикл 
		
		ДокументОснования = СоответствиеДокументов.Получить(СтрокаДок.НомерСтроки);
		Если СтрокаДок.ТипДок = Перечисления.Saby_ТипыДокумента.ПередачиЦенностей Тогда 
			ОбъектДок.Отгрузка_НаОснованииДокумент = ДокументОснования;
		ИначеЕсли СтрокаДок.ТипДок = Перечисления.Saby_ТипыДокумента.ОтветственныйНаОсновании Тогда 	
			ОбъектДок.Отгрузка_ОтветственныйНаОсновании = ДокументОснования;
		Иначе
			Продолжить;
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеВладельца(ОбъектДок, ВладелецПунктаСОнлайна)
	
	Если Не ЗначениеЗаполнено(ВладелецПунктаСОнлайна) Тогда 
		Возврат;
	КонецЕсли;
	
	Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.ЗначениеПоКоду(ВладелецПунктаСОнлайна["Тип"]);
	
	ОбъектДок.Владелец_Тип = Тип;
	
	Если Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.Отправитель Тогда
		
		ОбъектДок.ВладелецОбъекта = ОбъектДок.Отправитель;
		// нет своих КИ... возможно скопировать из грузоотправителя
		
	ИначеЕсли Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.ДругоеЮрЛицо Тогда
		
		Контрагент = ВладелецПунктаСОнлайна["Другой"]["Контрагент"];
		Saby_ТНЗагрузкаСервер.ЗаполнитьУчастникаДокумента("ВладелецОбъекта", Контрагент, ОбъектДок);
		
	Иначе
		// Неизввестен
		Параметры = Saby_ТНОбщегоНазначенияСервер.ПараметрыСвойстваСКонтролем(ОбъектДок, ВладелецПунктаСОнлайна);
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
			Параметры, "Владелец_НеизвестенПричина", "ПочемуНеизвестен");
	КонецЕсли;
	
КонецПроцедуры

#Область ЗагрузкаГруза

Процедура ЗаполнитьДанныеПоГрузам(ОбъектДок, ДанныеГруз, ЗагрузкаСОнлайна)
	
	Если Не ЗначениеЗаполнено(ДанныеГруз) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДок.Валюта = ВалютаПоДаннымОнлайна(ДанныеГруз, ЗагрузкаСОнлайна, ОбъектДок.Валюта);
	
	МаксКлюч = 1; 
	
	Позиции = ДанныеГруз["Позиция"];	
	Если Не ЗначениеЗаполнено(Позиции) Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектДок.Грузы.Очистить();
	ОбъектДок.Контейнеры.Очистить();
	ОбъектДок.Маркировки.Очистить();
	ОбъектДок.ОпасныеГрузы.Очистить();
	ОбъектДок.СведенияГосСистем.Очистить();
	
	Для Каждого Груз Из Позиции Цикл 
		
		НС = ОбъектДок.Грузы.Добавить();				
		
		НС.КлючСтроки = МаксКлюч; 
		
		Параметры = Saby_ТНОбщегоНазначенияСервер.ПараметрыСвойстваСКонтролем(НС, Груз);
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "СпособУпаковки", "Упаковка");
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Примечание",     "ДопИнформация");
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Состояние");
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Наименование");
		
		// Параметры груза
		ПараметрыГруза = Груз["Параметры"];
		Если ЗначениеЗаполнено(ПараметрыГруза) Тогда
			
			Параметры.Источник = ПараметрыГруза;
			
			Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Количество",       "КоличествоМест", Истина);
			Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "КоличествоПаллет", ,                 Истина);
			
			Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Длина",     , Истина);
			Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Высота",    , Истина);
			Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Ширина",    , Истина);
			Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Объем",     , Истина);
			Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "Плотность", , Истина);
								
		КонецЕсли;
		
		МассаГруза = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Груз, "Параметры.Масса");
		Если ЗначениеЗаполнено(МассаГруза) Тогда 
			
			Параметры.Источник = МассаГруза; 
			Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "МассаБрутто", "Брутто");
			Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(Параметры, "МассаНетто",  "Нетто");
			
		КонецЕсли;
		
		Стоимость = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(Груз, "Стоимость.ВключаяНДС");
		НС.Стоимость = ?(ЗначениеЗаполнено(Стоимость), Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(Стоимость), 0);
		НС.Валюта = ВалютаПоДаннымОнлайна(Груз, ЗагрузкаСОнлайна);
		НС.ВидТары = НайтиСоздатьВидУпаковки(Груз["ТараКод"]);  			
		
		Контейнеры = Груз["Контейнер"];
		НС.Тип = ?(ЗначениеЗаполнено(Контейнеры), Перечисления.Saby_ТипГруза.Контейнер, Перечисления.Saby_ТипГруза.Груз);
		ЗаполнитьКонтейнеры(Контейнеры, ОбъектДок, МаксКлюч);
		
		ЗаполнитьМаркировки(Груз["Маркировка"], ОбъектДок, МаксКлюч);
		
		ЗаполнитьОпасныеГрузы(Груз["ОпасныйГруз"], ОбъектДок, МаксКлюч);
		
		ЗаполнитьСведенияГИС(Груз["СведенияГИС"], ОбъектДок, НС, МаксКлюч);
		
		МаксКлюч = МаксКлюч + 1;
		
	КонецЦикла;	
		
КонецПроцедуры

Функция НайтиСоздатьВидУпаковки(Код)
	
	Если Код = Неопределено Тогда
		Возврат Справочники.Saby_ВидыУпаковки.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаВидУпаковки = Справочники.Saby_ВидыУпаковки.НайтиПоКоду(Код);
	Если Не ЗначениеЗаполнено(СсылкаВидУпаковки) Тогда 		
		
		ОбъектВидУпаковки = Справочники.Saby_ВидыУпаковки.СоздатьЭлемент();
		ОбъектВидУпаковки.Код          = Код;
		ОбъектВидУпаковки.Наименование = Код;
		
		ОбъектВидУпаковки.Записать();
		
		СсылкаВидУпаковки  = ОбъектВидУпаковки.Ссылка;
		
	КонецЕсли;
	
	Возврат СсылкаВидУпаковки;
	
КонецФункции
	
Функция ОпасныйГруз(СтрокаОпасн)
	
	СсылкаОГ = Справочники.Saby_ОпасныеГрузы.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(СтрокаОпасн) 
		Или Не ЗначениеЗаполнено(СтрокаОпасн["Наименование"]) Тогда 
		Возврат СсылкаОГ;
	КонецЕсли;	
			
	// поиск существующей записи 
	Наименование = СтрокаОпасн["Наименование"];
	ОтгрузочноеНаименование = Наименование["Отгрузочное"];
	
	// 1 поиск по наименованию
	СсылкаОГ = Справочники.Saby_ОпасныеГрузы.НайтиПоНаименованию(ОтгрузочноеНаименование);
	// 2 поиск по тех наименованию
	Если Не ЗначениеЗаполнено(СсылкаОГ) Тогда 
		СсылкаОГ = Справочники.Saby_ОпасныеГрузы.НайтиПоРеквизиту("ТехническоеНаименование", Наименование["Техническое"]);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаОГ) Тогда 
		
		ОбъектОГ = Справочники.Saby_ОпасныеГрузы.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ОбъектОГ, СтрокаОпасн); 
		
		ОбъектОГ.УстановитьНовыйКод();
		ОбъектОГ.Наименование            = ОтгрузочноеНаименование;
		ОбъектОГ.ПолноеНаименование      = ОтгрузочноеНаименование;
		ОбъектОГ.ТехническоеНаименование = Наименование["Техническое"];
		
		Если ЗначениеЗаполнено(СтрокаОпасн["Класс"]) Тогда
			ОбъектОГ.Класс = Перечисления.Saby_КлассыОпасностиГрузов.ЗначениеПоКоду(СтрокаОпасн["Класс"]);
		КонецЕсли;
		
		Упаковка = СтрокаОпасн["Упаковка"];
		Если ЗначениеЗаполнено(Упаковка) Тогда
			
			ОбъектОГ.ГруппаУпаковки         = Упаковка["Группа"];
			ОбъектОГ.КатегорияУпаковки      = Упаковка["Категория"];
			ОбъектОГ.ГруппаУпаковкиЗначение = Перечисления.Saby_ГруппыУпаковки.ЗначениеПоКоду(Упаковка["Группа"]);
			
		КонецЕсли;
						
		Температура = СтрокаОпасн["Температура"];
		Если ЗначениеЗаполнено(Температура) Тогда 
			
			ОбъектОГ.КонтрольнаяТемпература = Температура["Контрольная"];
			ОбъектОГ.АварийнаяТемпература   = Температура["Аварийная"];
			
		КонецЕсли;		
		
		Радиоактивный = СтрокаОпасн["Радиоактивный"];
		Если ЗначениеЗаполнено(Радиоактивный) Тогда
			
			ОбъектОГ.НазваниеРадионуклида = Радиоактивный["Радионуклид"];
			ОбъектОГ.ПолнаяАктивность     = Радиоактивный["ПолнаяАктивность"];
			ОбъектОГ.МаксАктивность       = Радиоактивный["МаксАктивность"];
			
		КонецЕсли;		
		
		Взрывчатый = СтрокаОпасн["Взрывчатый"];
		Если ЗначениеЗаполнено(Взрывчатый) Тогда 
			
			ОбъектОГ.МассаНеттоВзрывчатый      = Взрывчатый["МассаНетто"];
			ОбъектОГ.МассаНеттоВзрывчатыйВсего = Взрывчатый["МассаНеттоДляВсех"];
						
		КонецЕсли;		
		
		Параметры = Saby_ТНОбщегоНазначенияСервер.ПараметрыСвойстваСКонтролем(ОбъектОГ, СтрокаОпасн);
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
			Параметры, "НомерООН",             "НомерООН");
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
			Параметры, "ФизИХимФорма",         "ФизХимФорма");
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
			Параметры, "ТранспортныйИндекс",   "ТранспортныйИндекс");
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
			Параметры, "ЗнакОпасности",        "ЗнакОпасности");
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
			Параметры, "ИндексБезопасности",   "ИндексБезопасности");
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
			Параметры, "ОпознавательныйЗнак",  "ОпознавательныйЗнак");
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
			Параметры, "ПроцентСмеси",         "ПроцентныйСоставСмеси");
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
			Параметры, "Комментарий",          "Описание");
		Saby_ТНОбщегоНазначенияСервер.ЗаполнитьСвойствоСКонтролем(
			Параметры, "КлассификационныйКод", "КлассификационныйКод");
		
		ОбъектОГ.Записать();
		
		СсылкаОГ = ОбъектОГ.Ссылка;
		
	КонецЕсли;
	
	Возврат СсылкаОГ;
	
КонецФункции

Процедура ЗаполнитьКонтейнеры(Контейнеры, ОбъектДок, МаксКлюч)
	
	Если Не ЗначениеЗаполнено(Контейнеры) Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Контейнер Из Контейнеры Цикл						
		КоличествоКонтейнеров = Контейнер["Количество"];
		Для Каждого СтрокаКонт Из Контейнер["Номер"] Цикл								
			
			НСКонт = ОбъектДок.Контейнеры.Добавить();
			НСКонт.Номер            = СтрокаКонт["Значение"];
			НСКонт.КлючСтроки_Грузы = МаксКлюч;
			
			Если ЗначениеЗаполнено(КоличествоКонтейнеров) Тогда 
				НСКонт.Количество = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(КоличествоКонтейнеров);
			Иначе 
				НСКонт.Количество = 1;
			КонецЕсли;	
			
		КонецЦикла;						
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМаркировки(Маркировка, ОбъектДок, МаксКлюч)
	
	Если Не ЗначениеЗаполнено(Маркировка) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаМарк Из Маркировка Цикл
		
		НСМарк = ОбъектДок.Маркировки.Добавить();
		НСМарк.Значение         = СтрокаМарк["Значение"]; 
		НСМарк.КлючСтроки_Грузы = МаксКлюч;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОпасныеГрузы(ОпасныйГруз, ОбъектДок, МаксКлюч)
	
	Если Не ЗначениеЗаполнено(ОпасныйГруз) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОпасн Из ОпасныйГруз Цикл
		
		ОпасныйГруз = ОпасныйГруз(СтрокаОпасн);
		Если Не ЗначениеЗаполнено(ОпасныйГруз) Тогда
			Продолжить;
		КонецЕсли;
		
		НСОпасныйГруз = ОбъектДок.ОпасныеГрузы.Добавить();
		НСОпасныйГруз.КлючСтроки_Грузы = МаксКлюч;
		НСОпасныйГруз.ОпасныйГруз      = ОпасныйГруз(СтрокаОпасн);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияГИС(СведенияГИС, ОбъектДок, НС, МаксКлюч)
	
	Если Не ЗначениеЗаполнено(СведенияГИС) Тогда  
		Возврат;
	КонецЕсли;
				
	НС.НаименованиеГосСистемы   = СведенияГИС["Наименование"];
	НС.УчетнаяЕдиницаГосСистемы = СведенияГИС["УчетнаяЕдиница"];
	НС.ИнаяИнформацияГосСистемы = СведенияГИС["ДругаяИнформация"];
	
	Для Каждого СтрокаГос Из СведенияГИС["Идентификатор"] Цикл
		
		НСГос = ОбъектДок.СведенияГосСистем.Добавить();
		НСГос.КлючСтроки_Грузы = МаксКлюч;
		НСГос.Идентификатор    = СтрокаГос["Значение"];
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВалютаПоДаннымОнлайна(ДанныеГруз, ЗагрузкаСОнлайна, Знач ЗначениеПоУмолчанию = Неопределено)
	
	КодВалютыРубль = "643";
	
	Если ЗначениеПоУмолчанию = Неопределено Тогда
		ЗначениеПоУмолчанию = ВалютаПоКоду(КодВалютыРубль);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеГруз["Стоимость"]) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
			
	Валюта = Saby_ТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеГруз, "Стоимость.Валюта");
	Если ЗначениеЗаполнено(Валюта) Тогда
		
		КодВалюты = Валюта["Код"];
		
		Если ЗагрузкаСОнлайна 
			Или Не ЗагрузкаСОнлайна 
			И ЗначениеЗаполнено(КодВалюты) Тогда
			
			Возврат ВалютаПоКоду(КодВалюты);
			
		КонецЕсли;
	КонецЕсли;
	
    Возврат ЗначениеПоУмолчанию;
	
КонецФункции

Функция ВалютаПоКоду(Код)
	
	РезультатФункции = Справочники.Валюты.ПустаяСсылка();
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Валюта.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюта
	|ГДЕ
	|	Валюта.Код = &Код";
	
	ЗапросДанных.УстановитьПараметр("Код", Код);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		РезультатФункции = ВыборкаДанных.Ссылка;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ЗагрузкаГруза

#Область ЗагрузкаОтметок

Функция ДанныеПоОтметкам(ОтметкиСОнлайна, Титул)
	
	РезультатФункции = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ОтметкиСОнлайна) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	ЗначениеРоли = ЗначениеРолиПоТекущемуТитулу(Титул);
	
	Для Каждого Отметка Из ОтметкиСОнлайна["Отметка"] Цикл
		
		СтруктураОтметки = Новый Структура;
		
		СтруктураОтметки.Вставить("Описание",  Отметка["Описание"]);
		СтруктураОтметки.Вставить(
			"ДатаВремя",
			Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(Отметка["ДатаВремя"]["Значение"]));
		СтруктураОтметки.Вставить("Этап",      Титул);
		СтруктураОтметки.Вставить("Роль",      ЗначениеРоли);

		СтруктураОтметки.Вставить("Штрафы",    ДанныеШтрафовПоОтметкам(Отметка["Штрафы"]));
		СтруктураОтметки.Вставить("Акты",      ДанныеАктовПоОтметкам(Отметка["АктыВзвешивания"], Отметка["Акты"]));
		
		РезультатФункции.Добавить(СтруктураОтметки);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеШтрафовПоОтметкам(ШтрафыСОнлайна)
	
	РезультатФункции = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ШтрафыСОнлайна) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Для Каждого Штраф Из ШтрафыСОнлайна Цикл 
		
		СтруктураШтрафа = Новый Структура;
		// ToDo:  Валюта 
		СтруктураШтрафа.Вставить("Количество", Штраф["Количество"]);
		СтруктураШтрафа.Вставить("Сумма",      Штраф["Итог"]);
		СтруктураШтрафа.Вставить("Расчет",     Штраф["Расчет"]);
		
		РезультатФункции.Добавить(СтруктураШтрафа);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеАктовПоОтметкам(АктыВзвешиванияСОнлайна, АктыКоммерческиеСОнлайна)
	
	РезультатФункции = Новый Массив;
	
	НомерСтроки = 0;
		
	ТаблицаАктов = Saby_ТНЗагрузкаСервер.ТаблицаДокументовТрН();
	
	Saby_ТНЗагрузкаСервер.ДокументыТрН(
		АктыВзвешиванияСОнлайна, 
		ТаблицаАктов, 
		Перечисления.Saby_ТипыДокумента.АктВзвешивания,
	    НомерСтроки);
	
	Saby_ТНЗагрузкаСервер.ДокументыТрН(
		АктыКоммерческиеСОнлайна, 
		ТаблицаАктов, 
		Перечисления.Saby_ТипыДокумента.АктКоммерческий,
	    НомерСтроки);
	
	// Получим ссылки на существующие и новые документы СправочникСсылка.Saby_ДокументыТрН
	СоответствиеДокументов = Saby_ТНЗагрузкаСервер.НайтиСоздатьДокументТрН(ТаблицаАктов);
	
	Для Каждого СтрокаАкта Из ТаблицаАктов Цикл
		
		СсылкаНаСправочник = СоответствиеДокументов.Получить(СтрокаАкта.НомерСтроки);
		
		СтруктураАкта = Новый Структура;
		СтруктураАкта.Вставить("Документ", СсылкаНаСправочник);
		
		РезультатФункции.Добавить(СтруктураАкта);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьДанныеПоОтметкам(ОбъектДок, Отметки, Титул)
	
	КлючСтроки   = МаксимальныйКлючОтметки(ОбъектДок.Отметки);
	ЗначениеРоли = ЗначениеРолиПоТекущемуТитулу(Титул);
	
	Saby_ТНОбщегоНазначенияСервер.ЗачисткаОтметокШтрафовАктов(ОбъектДок, Титул, ЗначениеРоли);
	
	Для Каждого СтруктураОтметки Из Отметки Цикл
		
		СтрокаОтметки = ОбъектДок.Отметки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОтметки, СтруктураОтметки);
		СтрокаОтметки.КлючСтроки = КлючСтроки;
		
		Для Каждого СтруктураШтрафа Из СтруктураОтметки.Штрафы Цикл
			СтрокаШтрафа = ОбъектДок.Штрафы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаШтрафа, СтруктураШтрафа);
			СтрокаШтрафа.КлючСтроки_Отметки = КлючСтроки;
		КонецЦикла;
		
		Для Каждого СтруктураАкта Из СтруктураОтметки.Акты Цикл
			СтрокаАкта = ОбъектДок.Акты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаАкта, СтруктураАкта);
			СтрокаАкта.КлючСтроки_Отметки = КлючСтроки;
		КонецЦикла;
		
		КлючСтроки = КлючСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоОтметкамДокумента(ОбъектДок, Отметки, Титул)
	
	// ToDo: Возможно понадобится фильтр по этапам...
	// очистка отметок и штрафов
	
	Если Не ЗначениеЗаполнено(Отметки) Тогда 
		Возврат;
	КонецЕсли;
		
	МаксКлюч = МаксимальныйКлючОтметки(ОбъектДок.Отметки);
		
	ЗначениеРоли = ЗначениеРолиПоТекущемуТитулу(Титул);
	
	// Находим строки В отметках к текущему титулу
	// чистим отметки штрафы и акты	       	
	Saby_ТНОбщегоНазначенияСервер.ЗачисткаОтметокШтрафовАктов(ОбъектДок, Титул, ЗначениеРоли);
	
	Для Каждого Отметка Из Отметки["Отметка"] Цикл
		
		НС = ОбъектДок.Отметки.Добавить();
		
		НС.Описание   = Отметка["Описание"];
		НС.ДатаВремя  = Saby_ТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДату(Отметка["ДатаВремя"]["Значение"]);
		НС.КлючСтроки = МаксКлюч;		
		НС.Этап       = Титул;
		НС.Роль       = ЗначениеРоли;
		
		// Штрафы           
		Штрафы = Отметка["Штрафы"];
		Если ЗначениеЗаполнено(Штрафы) Тогда 
			Для Каждого Штраф Из Штрафы Цикл 
				
				НСШтраф = ОбъектДок.Штрафы.Добавить();
				// ToDo:  Валюта 				
				НСШтраф.Количество = Штраф["Количество"];
				НСШтраф.Сумма      = Штраф["Итог"];
				НСШтраф.Расчет     = Штраф["Расчет"];
				
				НСШтраф.КлючСтроки_Отметки = МаксКлюч; 
				
			КонецЦикла;
		КонецЕсли;
			
		НомерСтроки = 0;
		
		ТЗ = Saby_ТНЗагрузкаСервер.ТаблицаДокументовТрН();
		
		// Акты взвешивания  		
		Saby_ТНЗагрузкаСервер.ДокументыТрН(
			Отметка["АктыВзвешивания"], 
			ТЗ, 
			Перечисления.Saby_ТипыДокумента.АктВзвешивания,
		    НомерСтроки);
		
		// Акты коммерческие
		Saby_ТНЗагрузкаСервер.ДокументыТрН(
			Отметка["Акты"], 
			ТЗ, 
			Перечисления.Saby_ТипыДокумента.АктКоммерческий,
		    НомерСтроки);
		
		// Получим ссылки на существующие и новые документы
		СоответствиеДокументов = Saby_ТНЗагрузкаСервер.НайтиСоздатьДокументТрН(ТЗ);
		
		// Заполняем данные по документам
		Для Каждого СтрокаДок Из ТЗ Цикл 
			
			СсылкаДок = СоответствиеДокументов.Получить(СтрокаДок.НомерСтроки);
			
			// кидаем все в общий список			
			НСДок = ОбъектДок.Акты.Добавить();
			НСДок.КлючСтроки_Отметки = МаксКлюч;
			НСДок.Документ           = СсылкаДок;
			
		КонецЦикла;
		
		МаксКлюч = МаксКлюч + 1;
		
	КонецЦикла;
		
КонецПроцедуры

Функция МаксимальныйКлючОтметки(Отметки)
	
	// брать из последней записи будет не корректно
	МаксНомер = 0;
	Для Каждого Отметка Из Отметки Цикл
		МаксНомер = Макс(МаксНомер, Отметка.КлючСтроки); 
	КонецЦикла;	
	
	Возврат МаксНомер + 1;
	
КонецФункции	

Функция ЗначениеРолиПоТекущемуТитулу(Титул)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.Погрузка, 
		Перечисления.Saby_РолиКонтрагентов.Отправитель);
	
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.ПолучениеГруза, 
		Перечисления.Saby_РолиКонтрагентов.Перевозчик);
	
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза, 
		Перечисления.Saby_РолиКонтрагентов.Получатель);	 		
	
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.ВыдачаГруза, 	
		Перечисления.Saby_РолиКонтрагентов.Перевозчик);
		
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.Переадресовка, 
		Перечисления.Saby_РолиКонтрагентов.Перевозчик);
		
	Соответствие.Вставить(Перечисления.Saby_ТипТитулаЭтрН.ПереадресовкаУведомление, 
		Перечисления.Saby_РолиКонтрагентов.Отправитель);
		
	Возврат Соответствие.Получить(Титул);	
		
КонецФункции

#КонецОбласти // ЗагрузкаОтметок

#КонецОбласти // ЗагрузитьДокументИзJson

Функция СтруктураБезПустыхЗначений(ИсходнаяСтруктура)
	
	РезультатФункции = Новый Структура;
	
	Для Каждого КлючЗначение Из ИсходнаяСтруктура Цикл
		Если ЗначениеЗаполнено(КлючЗначение.Значение)
			Или ТипЗнч(КлючЗначение.Значение) = Тип("Массив") Тогда
			РезультатФункции.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеСчетаИзРеквизитовОнлайна(ДанныеСОнлайна, СсылкаНаЮрЛицо)
	
	РезультатФункции = Новый Структура;
	
	Если Не ЗначениеЗаполнено(ДанныеСОнлайна) И Не ЗначениеЗаполнено(ДанныеСОнлайна["Реквизиты"]) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
		
	БанкРеквизиты = ДанныеСОнлайна["Реквизиты"]["Банковские"];
	
	// получим или создадим расчетный счет
	РасчетныйСчет = РасчетныйСчетПоРеквизитам(БанкРеквизиты, СсылкаНаЮрЛицо);	
	Если Не ЗначениеЗаполнено(РасчетныйСчет) Тогда 
		
		РезультатФункции.Вставить("НомерСчета", БанкРеквизиты["НомерСчета"]);
		
		Банк = БанкРеквизиты["Банк"];
		Если ЗначениеЗаполнено(Банк) Тогда 
			
			НаименованиеБанк = Банк["Наименование"];
			Если ЗначениеЗаполнено(НаименованиеБанк) Тогда
				БанкНазвание = НаименованиеБанк["Полное"];
			КонецЕсли;
		
			БанкБИК      = Банк["БИК"];
			БанкКоррСчет = Банк["КоррСчет"]; 
			
			РезультатФункции.Вставить("БанкНазвание", БанкНазвание);
			РезультатФункции.Вставить("БанкБИК",      БанкБИК);
			РезультатФункции.Вставить("БанкКоррСчет", БанкКоррСчет);
			
		КонецЕсли;
		
	Иначе 
		РезультатФункции.Вставить("РасчетныйСчет", РасчетныйСчет);				
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция РасчетныйСчетПоРеквизитам(БанкРеквизиты, Владелец)
	
	 НомерСчета = СокрЛП(БанкРеквизиты["НомерСчета"]); 
	
	 ЕстьСправочникБанкСчета = Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено;
	 
	 Если ЕстьСправочникБанкСчета Тогда 
		 
		 ТестЗапроса = 
		 "ВЫБРАТЬ
		 |	БанковскиеСчета.Ссылка КАК Ссылка
		 |ИЗ
		 |	Справочник.БанковскиеСчета КАК БанковскиеСчета
		 |ГДЕ
		 |	БанковскиеСчета.Владелец = &Владелец
		 |	И БанковскиеСчета.НомерСчета = &НомерСчета
		 |";
		 
	 Иначе 
		 
		 ТестЗапроса = 
		 "ВЫБРАТЬ
		 |	БанковскиеСчетаОрганизаций.Ссылка КАК Ссылка
		 |ИЗ
		 |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		 |ГДЕ
		 |	БанковскиеСчетаОрганизаций.Владелец = &Владелец
		 |	И БанковскиеСчетаОрганизаций.НомерСчета = &НомерСчета
		 |
		 |ОБЪЕДИНИТЬ ВСЕ
		 |
		 |ВЫБРАТЬ
		 |	БанковскиеСчетаКонтрагентов.Ссылка
		 |ИЗ
		 |	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		 |ГДЕ
		 |	БанковскиеСчетаКонтрагентов.Владелец = &Владелец
		 |	И БанковскиеСчетаКонтрагентов.НомерСчета = &НомерСчета";
		 		 	 
	 КонецЕсли;
	 
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("Владелец",   Владелец);
	 Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	 
	 Запрос.Текст = ТестЗапроса;
	 
	 Выборка = Запрос.Выполнить().Выбрать();
	 Если Выборка.Следующий() Тогда 
		 // нашли
		 РасчетныйСчет = Выборка.Ссылка;
	 Иначе 
		 РасчетныйСчет = Неопределено;
	 КонецЕсли;
	 
	 Возврат РасчетныйСчет;
	
КонецФункции

Процедура ЗаполнитьСоставителя(СоставительСОнлайна, ОбъектДок)
	
	Если СоставительСОнлайна = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоставительСсылка = Справочники.Организации.НайтиПоНаименованию(СоставительСОнлайна["Наименование"], Истина);
	ОбъектДок.Составитель = ?(Не СоставительСсылка.Пустая(), СоставительСсылка, СоставительСОнлайна["Наименование"]);
	
	Основание = СоставительСОнлайна["Основание"]["Документ"];
	Если ЗначениеЗаполнено(Основание) Тогда 
		
		Тип = Перечисления.Saby_ТипыДокумента.СоставительНаОсновании;	
		ОснованиеСсылка = Saby_ТНЗагрузкаСервер.ЗагрузитьОдиночныйДокументЭТрН(Основание, Тип);
				
		ОбъектДок.Составитель_НаОснованииДокумент = ОснованиеСсылка;
		
	КонецЕсли;
	
КонецПроцедуры

Функция КонтрагентОрганизацияПоНаименованию(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	1 КАК Порядок
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	2
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование = &Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_Данные.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Данные.Порядок";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		// нашли юр.лицо. Организация, Контрагент
		ЮрЛицо = Выборка.Ссылка; 		
	Иначе
		ЮрЛицо = Наименование;		
	КонецЕсли;	

	Возврат ЮрЛицо;
	
КонецФункции

Процедура ЗаполнитьДанныеДокументовТрН(ОбъектДок, ДанныеДокументов)
	
	Если Не ЗначениеЗаполнено(ДанныеДокументов) Тогда 
		Возврат;
	КонецЕсли;
		
	ТЗ = Saby_ТНЗагрузкаСервер.ТаблицаДокументовТрН();
		
	СопроводительнаяВедомость = ДанныеДокументов["Ведомость"];
	Груз                      = ДанныеДокументов["Груз"];
	Отгрузка                  = ДанныеДокументов["Отгрузка"];
	ДоговорПеревозки          = ДанныеДокументов["ДоговорНаУслугиПеревозки"];
	ТранспортнаяНакладная     = ДанныеДокументов["ТранспортнаяНакладная"];
	
	// ToDo: когда-нибудь понадобится. Сделана заготовка в формате под будущий функционал... 
	// Расчет перевозки пока не нужен
	
	НомерСтроки = 0;
		
	// СопроводительнаяВедомость
	Если ЗначениеЗаполнено(СопроводительнаяВедомость) Тогда 
		НС = ТЗ.Добавить();
		Тип = Перечисления.Saby_ТипыДокумента.СопроводительнаяВедомость;
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, СопроводительнаяВедомость, Тип, НомерСтроки);
	КонецЕсли;
	
	// УслугиПеревозки
	Если ЗначениеЗаполнено(ДоговорПеревозки) Тогда 
		НС = ТЗ.Добавить();	
		Тип = Перечисления.Saby_ТипыДокумента.ДоговорПеревозки;
		Saby_ТНЗагрузкаСервер.ЗаполнитьДанныеСтрокиТаблицыДокументовТрН(НС, ДоговорПеревозки, Тип, НомерСтроки);
	КонецЕсли;
	
	// Груз	
	Saby_ТНЗагрузкаСервер.ДокументыТрН(
		Груз, 
		ТЗ, 
		Перечисления.Saby_ТипыДокумента.КГрузу,
		НомерСтроки);
	
	// Отгрузка - Передача ценностей	
	Saby_ТНЗагрузкаСервер.ДокументыТрН(
		Отгрузка, 
		ТЗ, 
		Перечисления.Saby_ТипыДокумента.ПередачиЦенностей,
		НомерСтроки);	
	
	// ТрН	
	Saby_ТНЗагрузкаСервер.ДокументыТрН(
		ТранспортнаяНакладная, 
		ТЗ, 
		Перечисления.Saby_ТипыДокумента.КТранспортнойНакладной,
		НомерСтроки);	
	
	// За 1 раз
	// Получим ссылки на существующие и новые документы
	СоответствиеДокументов = Saby_ТНЗагрузкаСервер.НайтиСоздатьДокументТрН(ТЗ);
	
	ТипыНеСопроводительныеДокументы = Новый Массив;
	ТипыНеСопроводительныеДокументы.Добавить(Перечисления.Saby_ТипыДокумента.СопроводительнаяВедомость);
	ТипыНеСопроводительныеДокументы.Добавить(Перечисления.Saby_ТипыДокумента.ДоговорПеревозки);
	
	ОчиститьСопроводительныеДокументы(ОбъектДок, ТЗ, ТипыНеСопроводительныеДокументы);
	
	// Заполняем данные по документам
	Для Каждого СтрокаДок Из ТЗ Цикл
		
		СсылкаДок = СоответствиеДокументов.Получить(СтрокаДок.НомерСтроки);
		
		Если СтрокаДок.ТипДок = Перечисления.Saby_ТипыДокумента.СопроводительнаяВедомость Тогда
			
			ОбъектДок.Отправитель_СопроводительнаяВедомость = СсылкаДок;
			
		ИначеЕсли СтрокаДок.ТипДок = Перечисления.Saby_ТипыДокумента.ДоговорПеревозки Тогда
			
			Если ЗначениеЗаполнено(ОбъектДок.Заказчик) Тогда
				ОбъектДок.Заказчик_Договор = СсылкаДок;
			КонецЕсли;
			
		Иначе
			
			// кидаем все в общий список
			НСДок = ОбъектДок.СопроводительныеДокументы.Добавить();
			НСДок.СопроводительныйДокумент = СсылкаДок;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеОформителя(ОформительСОнлайна, ДляДокумента)
	
	Если Не ЗначениеЗаполнено(ОформительСОнлайна) Тогда 
		Возврат;	
	КонецЕсли;
	
	ОформилСтруктура = Новый Структура;
	
	ОформилСтруктура.Вставить("Фамилия",  ОформительСОнлайна["Фамилия"]);
	ОформилСтруктура.Вставить("Имя",      ОформительСОнлайна["Имя"]);
	ОформилСтруктура.Вставить("Отчество", ОформительСОнлайна["Отчество"]);
	
	ОформилСтруктура.Вставить("Телефоны",         Новый Массив);
	ОформилСтруктура.Вставить("ЭлектроннаяПочта", "");
	
	// Для того, чтобы не отбилась функция КонтактнаяИнформация.
	ОформительСОнлайна.Вставить("Ссылка", Истина);
	
	ПустаяРоль = Перечисления.Saby_РолиКонтрагентов.ПустаяСсылка();
	ОформилКонтактныеДанные = Saby_ТНЗагрузкаСервер.КонтактнаяИнформация(ОформительСОнлайна, ПустаяРоль);
	Для Каждого СтрокаКИ Из ОформилКонтактныеДанные Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ОформилСтруктура.Телефоны.Добавить(СтрокаКИ.Значение);
		КонецЕсли;
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			ОформилСтруктура.ЭлектроннаяПочта = СтрокаКИ.Значение;
		КонецЕсли;
		ДляДокумента.КонтактныеДанные.Добавить(СтрокаКИ);
	КонецЦикла;
	
	ДляДокумента.Вставить("ОформилСтруктура", ЗначениеВСтрокуВнутр(ОформилСтруктура));
	
КонецПроцедуры

Процедура ОчиститьСопроводительныеДокументы(ОбъектДок, ТЗ, ТипыНеСопроводительныеДокументы)
	
	ЕстьСопроводительныеДокументы = Ложь;
	Для Каждого СтрокаДок Из ТЗ Цикл
		Если ТипыНеСопроводительныеДокументы.Найти(СтрокаДок.ТипДок) = Неопределено Тогда
			ЕстьСопроводительныеДокументы = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьСопроводительныеДокументы Тогда
		ОбъектДок.СопроводительныеДокументы.Очистить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Загрузка

#КонецОбласти // СлужебныеПроцедурыИФункции
