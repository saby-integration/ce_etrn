	   
#Область ОбработчикиСобытийФормы
	   	   
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	УстановкаВидимостиИРасчетныхРеквизитов();	
	
	// Расчет максимальных ключей строк 
    // для первоначального заполнения данных, по этим ключам идет получение новых при добавлении строк
    МаксимальныеКлючиСтрок();
			
	// Документ просмотрен
	ВыполнитьСменуЭтапаИлиСостояния(Объект.Ссылка);
	
	ОграничитьТипыДокументовОснований();
	
	// Решение проблемы с тем что значения типов КИ 
	// имеют разные идентификаторы в различных конфигурациях 
	УстановкаСпискаДоступныхТиповКИ();
	
	ОбновитьСостояниеИзменений();
	
	ЗаполнитьСписокВыбораОтветственногоНаОсновании();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	// установим отборы по таблицам для корректного отображения информации	
	УстановитьОтборыПоТаблицам();
	ИзменитьТекстПодсказкиГрузоотправитель_ОсуществляетОтгрузку();
	ОповеститьОбИзменении(Объект.Ссылка);
	
	ОтобразитьВодителейДляВебКлиента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ИмяОтправитель = "Перечисление.Saby_ВладелецОбъектаОтгрузки.Отправитель";
	
	Если Не ЗначениеЗаполнено(Объект.ВладелецОбъекта) 
		И Объект.Владелец_Тип = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(ИмяОтправитель) 
		И ЗначениеЗаполнено(Объект.Отправитель) Тогда
		
		Объект.ВладелецОбъекта = Объект.Отправитель;
		
	КонецЕсли;	
	
	// Даты. Соберем даты и время (дата и время находятся в реквизитах формы раздельно) 
	СобратьДатуВремяПоРеквизитам("Отправитель_ДоставитьДо",            "ДоставитьДо_Дата",              "ДоставитьДо_Время");
	СобратьДатуВремяПоРеквизитам("Погрузка_ДатаВремя",                 "Погрузка_Дата",                 "Погрузка_Время");
	СобратьДатуВремяПоРеквизитам("Погрузка_ДатаВремяПрибыл",           "Погрузка_ДатаПрибыл",           "Погрузка_ВремяПрибыл");
	СобратьДатуВремяПоРеквизитам("Погрузка_ДатаВремяУбыл",             "Погрузка_ДатаУбыл",             "Погрузка_ВремяУбыл");
	СобратьДатуВремяПоРеквизитам("Перевозчик_ПриемкаДатаВремя",        "Перевозчик_ПриемкаДата",        "Перевозчик_ПриемкаВремя");
	СобратьДатуВремяПоРеквизитам("Перевозчик_ПриемкаДатаВремяПрибыл",  "Перевозчик_ПриемкаДатаПрибыл",  "Перевозчик_ПриемкаВремяПрибыл");
	СобратьДатуВремяПоРеквизитам("Перевозчик_ПриемкаДатаВремяУбыл",    "Перевозчик_ПриемкаДатаУбыл",    "Перевозчик_ПриемкаВремяУбыл");
	СобратьДатуВремяПоРеквизитам("Выгрузка_ДатаВремя",                 "Выгрузка_Дата",                 "Выгрузка_Время");
	СобратьДатуВремяПоРеквизитам("Выгрузка_ДатаВремяПрибыл",           "Выгрузка_ДатаПрибыл",           "Выгрузка_ВремяПрибыл");
	СобратьДатуВремяПоРеквизитам("Выгрузка_ДатаВремяУбыл",             "Выгрузка_ДатаУбыл",             "Выгрузка_ВремяУбыл" );
	СобратьДатуВремяПоРеквизитам("Перевозчик_ВыгрузкаДатаВремя",       "Перевозчик_ВыгрузкаДата",       "Перевозчик_ВыгрузкаВремя");
	СобратьДатуВремяПоРеквизитам("Перевозчик_ВыгрузкаДатаВремяПрибыл", "Перевозчик_ВыгрузкаДатаПрибыл", "Перевозчик_ВыгрузкаВремяПрибыл");
	СобратьДатуВремяПоРеквизитам("Перевозчик_ВыгрузкаДатаВремяУбыл",   "Перевозчик_ВыгрузкаДатаУбыл",   "Перевозчик_ВыгрузкаВремяУбыл");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Saby_Ошибки" 
		И Параметр.Ключ = Объект.Ссылка Тогда 
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ДесериализоватьОшибки(Параметр.Ошибки));
		
	ИначеЕсли ИмяСобытия = "Saby_ОбновитьДокумент" 
		И Источник = ЭтаФорма.УникальныйИдентификатор Тогда
		
		УстановкаВидимостиИРасчетныхРеквизитов(Истина);
		//ЭтаФорма.ОбновитьОтображениеДанных();
		//ЭтаФорма.Прочитать();
		
		Отметки_УстановитьОтборПоВсемСвязаннымТаблицам("Отметки");
		Отметки_УстановитьОтборПоВсемСвязаннымТаблицам("Отметки_Выгрузка");
		
		Если Параметр <> Неопределено Тогда
			ПослеЗакрытияФормыТитула(Параметр);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Saby_ВыполнитьПереход"  
		И Источник = ЭтаФорма.УникальныйИдентификатор Тогда
				
		// Продолжим выполнение выгрузки
		// откроем форму переход
		Если ЗначениеЗаполнено(Параметр.Этап) Тогда 
			Saby_ТНОбщегоНазначенияКлиент.СменаЭтапа(Объект.Ссылка, ЭтаФорма, Параметр.Этап); 
		Иначе 
			
			// обновим этап после сброса	
			ОбменДаннымиСБИС("ОбновитьАктивныйЭтап");
			
			КартинкаСообщения = БиблиотекаКартинок["Saby_Ошибка32"];
			
			ПоказатьОповещениеПользователя(
				"Ошибка",
				,
				"Нет доступных действий",
				КартинкаСообщения,
				СтатусОповещенияПользователя.Важное,
				Новый УникальныйИдентификатор);
			
		КонецЕсли;
				
	ИначеЕсли ИмяСобытия = "Saby_ЗавершениеВыполнитьДействие" 
		И Источник = ЭтаФорма Тогда 
				
		Если Параметр.status = "error" Тогда 
						
			Saby_ТНОбщегоНазначенияКлиент.ОбработатьОшибкиИзФормыВыполнитьДействие(Объект.Ссылка, Параметр);
			
			// выведем этап и индикатор
			УстановкаВидимостиИРасчетныхРеквизитов();
			//ЭтаФорма.ОбновитьОтображениеДанных();
			//ЭтаФорма.Прочитать(); 
			
		Иначе 
			
			// ToDo: КОСТЫЛЬ... 
			// Ошибка по этапам. При переходе возвращается пустой активный этап
			// запускаем чтение документа 			
			ОбменДаннымиСБИС("ОбновитьАктивныйЭтап");
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Saby_ИзмененыТипыДокументовОснований" 
		И Источник = ЭтотОбъект Тогда
		
		ОграничитьТипыДокументовОснований();
		
	ИначеЕсли ИмяСобытия = "Saby_ПрочитанДинамическийТитул" 
		И Источник = ЭтотОбъект Тогда
		
		ПослеЗакрытияФормыТитула(Параметр);
		
	ИначеЕсли ИмяСобытия = "Saby_СписокДокументов" Тогда
		
		Если Не Параметр.ЭтоДинамическийТитул Тогда
			ОбновитДанныеПоОшибкамНаСервере(Параметр.СписокДокументов.Получить(Объект.Ссылка));
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьСостояниеИзменений();
	УстановитьДанныеВодителей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОтборОтметокПоТипу();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ДокументОснование

&НаКлиенте
Процедура ДекорацияДокументОснование(Элемент)
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда 
		ПоказатьЗначение(,ДокументОснование);
	Иначе
		
		Если ТипыОснований.Количество() = 0 Тогда						
			ОткрытьФорму("Документ.Saby_ТранспортнаяНакладная.Форма.ФормаВыбораТипов", , ЭтотОбъект);			
		Иначе 
						
			//ОписаниеТипов      = Элементы.ДокументОснование.ОграничениеТипа;
			//ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораЗначенияДокументаОснования", ЭтотОбъект);
			
			//ПоказатьВводЗначения(ОписаниеОповещения, ДокументОснование, "Выберите документ основание:", ОписаниеТипов);
			
			Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораТипаДанных", ЭтотОбъект);
						
			ТипыОснований.ПоказатьВыборЭлемента(Оповещение, "Выбор типа данных");
						
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораТипаДанных(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораЗначенияДокументаОснования", ЭтотОбъект);		
		ПоказатьВводЗначения(Оповещение, ДокументОснование, "Выберите основание", ВыбранныйЭлемент.Значение);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЗначенияДокументаОснования(Значение, ДопПараметры) Экспорт
	
	Если Объект.Ссылка.Пустая() Тогда
		ЗаписатьДанныеДокумента();
	КонецЕсли;		
		
	Если Значение <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		ДокументОснование = Значение;
		Элементы.ДекорацияДокументОснование.Заголовок = СокрЛП(Значение);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда		
										
		Результат = ЗаполнениеНаОснованииINI();
		Если ЗначениеЗаполнено(Результат) Тогда
			
			ПоказатьОповещениеПользователя(
				Результат.ТекстЗаголовка,
				,
				Результат.ТекстСообщения,
				Результат.Картинка,
				СтатусОповещенияПользователя.Важное,
				Новый УникальныйИдентификатор);
				
		КонецЕсли;
		
		Элементы.ОчиститьДокументОснование.Доступность = Истина;
		
	Иначе 
		
		Объект.ДокументОснование_Идентификатор    = "";
		Объект.ДокументОснование_ОбъектМетаданных = "";
		
		Элементы.ОчиститьДокументОснование.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДокументОснование(Команда)
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		
		Модифицированность = Истина;
		
		Объект.ДокументОснование_Идентификатор    = "";
		Объект.ДокументОснование_ОбъектМетаданных = "";
		
		ДокументОснование = Неопределено;
		Элементы.ДекорацияДокументОснование.Заголовок = "Выбрать документ основание";
		
		Элементы.ОчиститьДокументОснование.Доступность = Ложь;
		
	КонецЕсли;
		 
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокументовОснований(Команда)
	
	ОткрытьФорму("Документ.Saby_ТранспортнаяНакладная.Форма.ФормаВыбораТипов", , ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ДокументОснование

#Область ЮрЛица

&НаКлиенте
Процедура Владелец_ТипПриИзменении(Элемент)
	
	Если СокрЛП(Объект.Владелец_Тип) <> "Неизвестен" Тогда
		Если ЗначениеЗаполнено(Объект.Владелец_НеизвестенПричина) Тогда 
			Объект.Владелец_НеизвестенПричина = "";	                        
		КонецЕсли;	 	
	КонецЕсли;	    
	
	ДругоеЮрЛицо = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.Saby_ВладелецОбъектаОтгрузки.ДругоеЮрЛицо"
	);
	
	Если Объект.Владелец_Тип = ДругоеЮрЛицо Тогда 
		
		Объект.ВладелецОбъекта = "";
		
	ИначеЕсли СокрЛП(Объект.Владелец_Тип) = "Отправитель" Тогда  
		
		Объект.ВладелецОбъекта = Объект.Отправитель;
		
	КонецЕсли;	
	
	ОбновитьДанныеЮрЛицНаСервере("ВладелецОбъекта");

КонецПроцедуры

&НаКлиенте
Процедура Грузоотправитель_ГрузополучательПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	Объект.Получатель = ?(Грузоотправитель_Грузополучатель, Объект.Отправитель, "");
	
	ОбновитьДанныеЮрЛицНаСервере("Получатель");
	
КонецПроцедуры

&НаКлиенте
Процедура Грузоотправитель_ОсуществляетОтгрузкуПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	Если Не Грузоотправитель_НеЯвляетсяОтправителем Тогда
		
		Объект.Отгрузчик = ?(Грузоотправитель_ОсуществляетОтгрузку, Объект.Отправитель, "");	
		
		ОбновитьДанныеЮрЛицНаСервере("Отгрузчик");
		
	Иначе
		ОбновитьВидимостьИДоступностьЭлементов();
	КонецЕсли;
	
	ИзменитьТекстПодсказкиГрузоотправитель_ОсуществляетОтгрузку();
	
КонецПроцедуры

&НаКлиенте
Процедура Грузоотправитель_НеЯвляетсяОтправителемПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	Если Не Грузоотправитель_НеЯвляетсяОтправителем Тогда
		
		Объект.Составитель = "";
		Объект.Составитель_НаОснованииДокумент = "";
		
	Иначе
		
		Грузоотправитель_ОсуществляетОтгрузку = Ложь;
		
	КонецЕсли;
	
	ОбновитьСвязаннуюССоставителемИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительПриИзменении(Элемент)
	
	Роли = "Отправитель";
	Если Грузоотправитель_ОсуществляетОтгрузку Тогда
		Объект.Отгрузчик = Объект.Отправитель;
		Роли = "Отправитель,Отгрузчик"; 
	КонецЕсли;
	
	ОбновитьДанныеЮрЛицНаСервере(Роли);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	
	ОбновитьДанныеЮрЛицНаСервере("Получатель");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикПриИзменении(Элемент)
	
	ОбновитьДанныеЮрЛицНаСервере("Перевозчик");
	
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_ОрганизацияПриИзменении(Элемент)
	
	ОбновитьДанныеЮрЛицНаСервере("Отгрузчик");
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	ОбновитьДанныеЮрЛицНаСервере("ВладелецОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикПриИзменении(Элемент)
	
	ОбновитьДанныеЮрЛицНаСервере("Заказчик");
	
КонецПроцедуры

&НаКлиенте
Процедура Грузоотправитель_ЭкспедиторПриИзменении(Элемент)
	
	Если НЕ Объект.Отправитель_Экспедитор Тогда 
		Объект.Заказчик         = "";
		Объект.Заказчик_Договор = "";
	КонецЕсли;
	
	ОбновитьДанныеЮрЛицНаСервере("Заказчик"); 
	
КонецПроцедуры

&НаКлиенте
Процедура СоставительПриИзменении(Элемент)
	
	ОбновитьСвязаннуюССоставителемИнформацию();
	
КонецПроцедуры

#КонецОбласти // ЮрЛица

#Область РаботаСКонтактнойИнформацией

&НаКлиенте
Процедура ОтборИнформацииПоКонтактнымДанным(ИмяТЧ, Значение)
	
	Роль = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.Saby_РолиКонтрагентов." + Значение);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Роль", Роль);
	Элементы[ИмяТЧ].ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураПоиска);
					
КонецПроцедуры  

&НаКлиенте
Процедура КонтактныеДанныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		ОбработатьНовуюСтрокуКонтактнойИнформации(Элемент.Имя);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ПолучательПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		ОбработатьНовуюСтрокуКонтактнойИнформации(Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ПеревозчикПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		ОбработатьНовуюСтрокуКонтактнойИнформации(Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ОтгрузкаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		ОбработатьНовуюСтрокуКонтактнойИнформации(Элемент.Имя);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ВладелецПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		ОбработатьНовуюСтрокуКонтактнойИнформации(Элемент.Имя);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНовуюСтрокуКонтактнойИнформации(ИмяТЧ)
	
	Роль = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.Saby_РолиКонтрагентов.ПустаяСсылка");
	
    Отбор = Новый Структура;
	Отбор.Вставить("Роль", Роль);
	
	НайденныеСтроки = Объект.КонтактныеДанные.НайтиСтроки(Отбор);
	Для Каждого Строка Из НайденныеСтроки Цикл 
		Строка.Роль = Элементы[ИмяТЧ].ОтборСтрок.Роль;
	КонецЦикла;
				
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ЗначениеЗаполнено(Объект.Отправитель) Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан Отправитель!";
		Сообщение.Поле  = "Объект.Отправитель";
		Сообщение.Сообщить();		
		Отказ = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ПолучательПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр) 
	
	Если Не ЗначениеЗаполнено(Объект.Получатель) Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан Получатель!";
		Сообщение.Поле  = "Объект.Получатель";
		Сообщение.Сообщить();		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ПеревозчикПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ЗначениеЗаполнено(Объект.Перевозчик) Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан Перевозчик!";
		Сообщение.Поле  = "Объект.Перевозчик";
		Сообщение.Сообщить();		
		Отказ = Истина;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ОтгрузкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ЗначениеЗаполнено(Объект.Отгрузчик) Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указано лицо осуществляющее отгрузку!";
		Сообщение.Поле  = "Объект.Отгрузчик";
		Сообщение.Сообщить();		
		Отказ = Истина;		
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ВладелецПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ЗначениеЗаполнено(Объект.ВладелецОбъекта) Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан владелец объекта отгрузки!";
		Сообщение.Поле  = "Объект.ВладелецОбъекта";
		Сообщение.Сообщить();		
		Отказ = Истина;	
		
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанныеПослеУдаления(Элемент)
	
	ДопПараметрыОбновленияКИ = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ("Отправитель");
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметрыОбновленияКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ПолучательПослеУдаления(Элемент)
	
	ДопПараметрыОбновленияКИ = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ("Получатель");
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметрыОбновленияКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ПеревозчикПослеУдаления(Элемент)
	
	ДопПараметрыОбновленияКИ = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ("Перевозчик");
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметрыОбновленияКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ВладелецПослеУдаления(Элемент)
	
	ДопПараметрыОбновленияКИ = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ("ВладелецОбъекта");
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметрыОбновленияКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ОтгрузкаПослеУдаления(Элемент)
	
	ДопПараметрыОбновленияКИ = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ("Отгрузчик");
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметрыОбновленияКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура Грузоотправитель_ТелефонПриИзменении(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонПриИзменении(ЭтаФорма, Грузоотправитель_Телефон, "Отправитель", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Грузополучатель_ТелефонПриИзменении(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонПриИзменении(ЭтаФорма, Грузополучатель_Телефон, "Получатель", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик_ТелефонПриИзменении(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонПриИзменении(ЭтаФорма, Перевозчик_Телефон, "Перевозчик", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_ТелефонПриИзменении(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонПриИзменении(ЭтаФорма, Отгрузка_Телефон, "Отгрузчик", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Владелец_ТелефонПриИзменении(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонПриИзменении(ЭтаФорма, Владелец_Телефон, "ВладелецОбъекта", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Погрузка_АдресНажатие(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбораАдреса = Новый Структура;
	ПараметрыВыбораАдреса.Вставить("Роль",     "Отправитель");
	ПараметрыВыбораАдреса.Вставить("Значение", Объект.АдресПогрузкиЗначение);
	
	Saby_ТНОбщегоНазначенияКлиент.АдресНачалоВыбора(ЭтаФорма, ПараметрыВыбораАдреса, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНажатие(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбораАдреса = Новый Структура;
	ПараметрыВыбораАдреса.Вставить("Роль",     "Получатель");
	ПараметрыВыбораАдреса.Вставить("Значение", Объект.АдресДоставкиЗначение);
	
	Saby_ТНОбщегоНазначенияКлиент.АдресНачалоВыбора(ЭтаФорма, ПараметрыВыбораАдреса, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Грузоотправитель_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     "Отправитель");
	ПараметрыВыбораТелефона.Вставить("Значение", Грузоотправитель_Телефон);
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонНачалоВыбора(ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Грузополучатель_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     "Получатель");
	ПараметрыВыбораТелефона.Вставить("Значение", Грузополучатель_Телефон);
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонНачалоВыбора(ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     "Перевозчик");
	ПараметрыВыбораТелефона.Вставить("Значение", Перевозчик_Телефон);
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонНачалоВыбора(ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Владелец_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     "ВладелецОбъекта");
	ПараметрыВыбораТелефона.Вставить("Значение", Владелец_Телефон);
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонНачалоВыбора(ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     "Отгрузчик");
	ПараметрыВыбораТелефона.Вставить("Значение", Отгрузка_Телефон);
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонНачалоВыбора(ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанныеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхНачалоВыбора(
		ЭтаФорма, Элементы.КонтактныеДанные.ТекущиеДанные, "Отправитель", СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ПолучательЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхНачалоВыбора(
		ЭтаФорма, Элементы.КонтактныеДанные_Получатель.ТекущиеДанные, "Получатель", СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ПеревозчикЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхНачалоВыбора(
		ЭтаФорма, Элементы.КонтактныеДанные_Перевозчик.ТекущиеДанные, "Перевозчик", СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ВладелецЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхНачалоВыбора(
		ЭтаФорма, Элементы.КонтактныеДанные_Владелец.ТекущиеДанные, "ВладелецОбъекта", СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ОтгрузкаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхНачалоВыбора(
		ЭтаФорма, Элементы.КонтактныеДанные_Отгрузка.ТекущиеДанные, "Отгрузчик", СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанныеЗначениеПриИзменении(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхПриИзменении(
		ЭтаФорма, Элементы.КонтактныеДанные.ТекущиеДанные, "Отправитель"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ПолучательЗначениеПриИзменении(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхПриИзменении(
		ЭтаФорма, Элементы.КонтактныеДанные_Получатель.ТекущиеДанные, "Получатель"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ПеревозчикЗначениеПриИзменении(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхПриИзменении(
		ЭтаФорма, Элементы.КонтактныеДанные_Перевозчик.ТекущиеДанные, "Перевозчик"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ВладелецЗначениеПриИзменении(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхПриИзменении(
		ЭтаФорма, Элементы.КонтактныеДанные_Владелец.ТекущиеДанные, "ВладелецОбъекта"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанные_ОтгрузкаЗначениеПриИзменении(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхПриИзменении(
		ЭтаФорма, Элементы.КонтактныеДанные_Отгрузка.ТекущиеДанные, "Отгрузчик"
	);
	
КонецПроцедуры

#КонецОбласти // РаботаСКонтактнойИнформацией

#Область Прицепы
 
&НаКлиенте
Процедура ПрицепыСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ЭтаФорма.ТекущийЭлемент = Элементы.Прицепы;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНадписьПрицепыСтрокой()
		
	Массив = Новый Массив;
	Для Каждого Строка Из Объект.Прицепы Цикл 
		
		Если ЗначениеЗаполнено(Строка.Прицеп) Тогда
			Массив.Добавить(СокрЛП(Строка.Прицеп));
		КонецЕсли;
				
	КонецЦикла;
	
	Если Массив.Количество() Тогда 
		ПрицепыСтрокой = СтрСоединить(Массив, ", ");
	Иначе 
		ПрицепыСтрокой = "";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПрицепПриИзменении(Элемент)
	СформироватьНадписьПрицепыСтрокой();
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПослеУдаления(Элемент)
	СформироватьНадписьПрицепыСтрокой();
КонецПроцедуры

#КонецОбласти // Прицепы

#Область ВодителиПутевыеЛисты

&НаКлиенте
Процедура ВодителиПриАктивизацииСтроки(Элемент)
	
	Водители_УстановитьОтборПоВсемСвязаннымТаблицам();

КонецПроцедуры

&НаКлиенте
Процедура ВодителиВодительПриИзменении(Элемент)
	
	ТекДанные = Элементы.Водители.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Водитель) Тогда 
		
		ДанныеВодителя = Saby_ТНОбщегоНазначенияСервер.ДанныеВодителяПоСсылке(ТекДанные.Водитель); 
		ЗаполнитьЗначенияСвойств(ТекДанные, ДанныеВодителя);
				
	Иначе 
		
		ТекДанные.Фамилия      = "";
		ТекДанные.Имя          = "";
		ТекДанные.Отчество     = "";
		ТекДанные.ИНН          = "";
		ТекДанные.СерияВУ      = "";
		ТекДанные.НомерВУ      = "";
		ТекДанные.ДатаВыдачиВУ = "";
		ТекДанные.Телефоны     = "";
		ТекДанные.ВУСтрокой    = "";
		
	КонецЕсли;	
	
	СформироватьНадписьВодителейСтрокой();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНадписьВодителейСтрокой()
		
	Массив = Новый Массив;
	Для Каждого Строка Из Объект.Водители Цикл 
		
		Если ЗначениеЗаполнено(Строка.Водитель) Тогда
			Массив.Добавить(СокрЛП(Строка.Водитель));
		КонецЕсли;
				
	КонецЦикла;
	
	Если Массив.Количество() Тогда 
		ВодителиСтрокой = СтрСоединить(Массив, ", ");
	Иначе 
		ВодителиСтрокой = "";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Водители_УстановитьОтборПоВсемСвязаннымТаблицам()
	
    ТекущиеДанные = Элементы.Водители.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСтроки_Водители", ТекущиеДанные.КлючСтроки);
		
		Отбор = Новый ФиксированнаяСтруктура(СтруктураПоиска);		
		Элементы.ПутевыеЛисты.ОтборСтрок = Отбор;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Водители.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Водители.НайтиПоИдентификатору(ИдСтроки);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			УдаляемыеКлючи_Водители.Добавить(ТекДанные.КлючСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("УдалитьСвязанныеСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		
		ТекДанные = Элементы.Водители.ТекущиеДанные;		
		ТекДанные.КлючСтроки = НовыйКлючСтроки("Водители");
		
		// Переустановим отбор
		Водители_УстановитьОтборПоВсемСвязаннымТаблицам();
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Водители", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		ДобавитьКлючСвязиСтроки(Элемент.Имя, "Водители", Элемент.ТекущаяСтрока, НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеВодителей()
	
	Для Каждого Строка Из Объект.Водители Цикл 		
		Строка.ВУСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеВУ(Строка); 		
	КонецЦикла;
	
	СформироватьНадписьВодителейСтрокой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ЭтаФорма.ТекущийЭлемент = Элементы.Водители;
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПослеУдаления(Элемент)
	
	СформироватьНадписьВодителейСтрокой();
	
КонецПроцедуры

#КонецОбласти // ВодителиПутевыеЛисты 

&НаКлиенте
Процедура Группа_СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.Страница_Лента Тогда
		ПолучитьЕщеИзмененияНаСервере(Ложь);
	КонецЕсли;
	
	ОтборОтметокПоТипу();
	
КонецПроцедуры

#Область ТаблицаОшибок

&НаКлиенте
Процедура ТаблицаОшибокПриАктивизацииСтроки(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ТаблицаОшибокПриАктивизацииСтроки(ЭтаФорма);
	
	ПараметрыВыделенияДекорации = Saby_ТНОбщегоНазначенияКлиент.ПараметрыВыделенияДекорации(ЭтаФорма);
	Если ПараметрыВыделенияДекорации.НужноОбновитьДекорацию Тогда
		ОбновитьДекорацию(ПараметрыВыделенияДекорации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДекорацию(ПараметрыВыделенияДекорации)
	
	Для Каждого ИмяДекорации Из ПараметрыВыделенияДекорации.Выделить Цикл
		Элементы[ИмяДекорации].ЦветРамки = ЦветаСтиля.ЦветАктивности;
		Элементы[ИмяДекорации].Подсказка = "Необходимо заполнить";
	КонецЦикла;
	
	Для Каждого ИмяДекорации Из ПараметрыВыделенияДекорации.ОтменитьВыделение Цикл
		Элементы[ИмяДекорации].ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
		Элементы[ИмяДекорации].Подсказка = "";
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ТаблицаОшибок

&НаКлиенте
Процедура Отгрузка_ОтветственныйНаОснованииПриИзменении(Элемент)
	
	Если Объект.Отгрузка_ОтветственныйНаОсновании = ПредопределенноеЗначение("Справочник.Saby_ДокументыТрН.ПустаяСсылка") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор",              Новый Структура);
		ПараметрыФормы.Вставить("РежимВыбора",        Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		
		ПараметрыФормы.Отбор.Вставить("Тип", ПредопределенноеЗначение("Перечисление.Saby_ТипыДокумента.ОтветственныйНаОсновании"));
		
		ОткрытьФорму(
			"Справочник.Saby_ДокументыТрН.ФормаВыбора",
			ПараметрыФормы,
			Элемент,
			,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_ОтветственныйНаОснованииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		Объект.Отгрузка_ОтветственныйНаОсновании = ВыбранноеЗначение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_ОтветственныйНаОснованииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.Отгрузка_ОтветственныйНаОсновании = Неопределено;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДополнительныхСтраниц

#Область Грузы

&НаКлиенте
Процедура МаркировкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Грузы", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ОпасныеГрузыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Грузы", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура СведенияГосСистемПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Грузы", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура КонтейнерыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Грузы", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВводаСтроки(ИмяТЧ, Отказ)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрана строка в основной таблице " + ИмяТЧ;
		// Сообщение.Поле  = "";
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура МаркировкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ДобавитьКлючСвязиСтроки(Элемент.Имя, "Грузы", Элемент.ТекущаяСтрока, НоваяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ОпасныеГрузыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ДобавитьКлючСвязиСтроки(Элемент.Имя, "Грузы", Элемент.ТекущаяСтрока, НоваяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура СведенияГосСистемПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ДобавитьКлючСвязиСтроки(Элемент.Имя, "Грузы", Элемент.ТекущаяСтрока, НоваяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура КонтейнерыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ДобавитьКлючСвязиСтроки(Элемент.Имя, "Грузы", Элемент.ТекущаяСтрока, НоваяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриАктивизацииСтроки(Элемент)
		
	 Грузы_УстановитьОтборПоВсемСвязаннымТаблицам();
	 
КонецПроцедуры

&НаКлиенте
Процедура Грузы_УстановитьОтборПоВсемСвязаннымТаблицам()
	
    ТекущиеДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСтроки_Грузы", ТекущиеДанные.КлючСтроки);
		
		Отбор = Новый ФиксированнаяСтруктура(СтруктураПоиска);
		
		Элементы.Маркировки.ОтборСтрок        = Отбор;
		Элементы.ОпасныеГрузы.ОтборСтрок      = Отбор;
		Элементы.СведенияГосСистем.ОтборСтрок = Отбор;
		Элементы.Контейнеры.ОтборСтрок        = Отбор;
		
		ГосСистема_Наименование   = ТекущиеДанные.НаименованиеГосСистемы;
		ГосСистема_УчетнаяЕдиница = ТекущиеДанные.УчетнаяЕдиницаГосСистемы; 
		
	Иначе 	
		
		ГосСистема_Наименование   = "";
		ГосСистема_УчетнаяЕдиница = "";
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекДанные = Элементы.Грузы.ТекущиеДанные;		
		ТекДанные.КлючСтроки = НовыйКлючСтроки("Грузы");
		Если Не Копирование Тогда 
			ТекДанные.Тип = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.Saby_ТипГруза.Груз");			
		КонецЕсли;
		
		// Переустановим отбор
		Грузы_УстановитьОтборПоВсемСвязаннымТаблицам();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Грузы.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Грузы.НайтиПоИдентификатору(ИдСтроки);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			УдаляемыеКлючи_Грузы.Добавить(ТекДанные.КлючСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("УдалитьСвязанныеСтроки", 0.1, Истина); 
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыТипПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		Если СокрЛП(ТекущиеДанные.Тип) = "Контейнер" Тогда 
			ТекущиеДанные.Наименование = "Контейнер";			
		КонецЕсли;		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ГосСистема_НаименованиеПриИзменении(Элемент)	
	ИзменениеИнформацииГосСистем();	
КонецПроцедуры

&НаКлиенте
Процедура ГосСистема_УчетнаяЕдиницаПриИзменении(Элемент)	
	ИзменениеИнформацииГосСистем();		
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеИнформацииГосСистем()
	
	ТекущиеДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.НаименованиеГосСистемы   = ГосСистема_Наименование;
		ТекущиеДанные.УчетнаяЕдиницаГосСистемы = ГосСистема_УчетнаяЕдиница; 
		
		ЭтаФорма.Модифицированность = Истина;
		
	Иначе 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрана строка груза!";
		Сообщение.Поле  = "Объект.Груз";
		Сообщение.Сообщить();		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Грузы

#Область Отметки

&НаКлиенте
Процедура ТипОтметок_ПогрузкаПриИзменении(Элемент)
	
	ОтборОтметокПоТипу();
	
	ТипОтметок_ПогрузкаТолькоПросмотр();
	
КонецПроцедуры

 &НаКлиенте
Процедура ТипОтметок_ВыгрузкаПриИзменении(Элемент)
	
	ОтборОтметокПоТипу();
	
	ТипОтметок_ВыгрузкаТолькоПросмотр();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтметокПоТипу(ИдентификаторСтрокиОтметок = Неопределено) Экспорт
	
	Если Элементы.Группа_Страницы.ТекущаяСтраница = Элементы.Страница_Погрузка Тогда
		ИмяТЧ = "Отметки";
		Если ИдентификаторСтрокиОтметок <> Неопределено Тогда
			СтрокаОтметок = Объект.Отметки.НайтиПоИдентификатору(ИдентификаторСтрокиОтметок);
			Если СтрокаОтметок.Роль <> ТипОтметок_Погрузка Тогда
				ТипОтметок_Погрузка = СтрокаОтметок.Роль;
			КонецЕсли;
		КонецЕсли;
		Значение = ТипОтметок_Погрузка;
	ИначеЕсли Элементы.Группа_Страницы.ТекущаяСтраница = Элементы.Страница_Выгрузка Тогда
		ИмяТЧ = "Отметки_Выгрузка";
		Если ИдентификаторСтрокиОтметок <> Неопределено Тогда
			СтрокаОтметок = Объект.Отметки.НайтиПоИдентификатору(ИдентификаторСтрокиОтметок);
			Если СтрокаОтметок.Роль <> ТипОтметок_Выгрузка Тогда
				ТипОтметок_Выгрузка = СтрокаОтметок.Роль;
			КонецЕсли;
		КонецЕсли;
		Значение = ТипОтметок_Выгрузка;
	Иначе
		Возврат;
	КонецЕсли;
	
	МассивЭтапов = Новый Массив;
	
	Если ИмяТЧ = "Отметки" Тогда
		
		Если СокрЛП(Значение) = "Отправитель" Тогда
			МассивЭтапов.Добавить(ТипТитула("Погрузка"));
		Иначе
			МассивЭтапов.Добавить(ТипТитула("ПолучениеГруза"));
			ДобавитьДинамическиеТитулыСОтметками(МассивЭтапов);
		КонецЕсли;
		
	Иначе
		
		// Отметки_Выгрузка
		Если СокрЛП(Значение) = "Получатель" Тогда
			МассивЭтапов.Добавить(ТипТитула("ПриемкаГруза"));
		Иначе
			МассивЭтапов.Добавить(ТипТитула("ВыдачаГруза"));
			ДобавитьДинамическиеТитулыСОтметками(МассивЭтапов);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаОтметок Из Объект.Отметки Цикл
		СтрокаОтметок.КритерийОтбора = СтрокаОтметок.Роль = Значение
			И МассивЭтапов.Найти(СтрокаОтметок.Этап) <> Неопределено;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КритерийОтбора", Истина);
	
	Элементы[ИмяТЧ].ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураПоиска);
	
	// Если таблица пустая Событие при активации строки не наступит ..... 
	// проверим что есть в таблице
	НайденныеСтроки = Объект.Отметки.НайтиСтроки(СтруктураПоиска);
	Если Не НайденныеСтроки.Количество() Тогда
		Отметки_УстановитьОтборПоВсемСвязаннымТаблицам(ИмяТЧ, Истина);
	ИначеЕсли ИдентификаторСтрокиОтметок <> Неопределено Тогда
		Отметки_УстановитьОтборПоВсемСвязаннымТаблицам(ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТипТитула(Титул)
	
	Возврат ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.Saby_ТипТитулаЭтрН." + Титул);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьДинамическиеТитулыСОтметками(МассивЭтапов)
	
	//МассивЭтапов.Добавить(ТипТитула("ПереадресовкаУведомление")); // Нет отметок
	МассивЭтапов.Добавить(ТипТитула("Переадресовка"));
	МассивЭтапов.Добавить(ТипТитула("ЗаменаВодителяТС"));
	МассивЭтапов.Добавить(ТипТитула("ИзменениеСтоимости"));
	МассивЭтапов.Добавить(ТипТитула("СогласованиеСтоимости"));
	
КонецПроцедуры

&НаКлиенте
Процедура Отметки_УстановитьОтборПоВсемСвязаннымТаблицам(ИмяТаблицы, ПустойОтбор = Ложь)
	
    ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
			
	СтруктураПоиска = Новый Структура;
	Если ПустойОтбор Или ТекущиеДанные = Неопределено Тогда
		СтруктураПоиска.Вставить("КлючСтроки_Отметки", 0);			
	Иначе
		СтруктураПоиска.Вставить("КлючСтроки_Отметки", ТекущиеДанные.КлючСтроки);
	КонецЕсли;
	
	Отбор = Новый ФиксированнаяСтруктура(СтруктураПоиска);
	
	Если ИмяТаблицы = "Отметки" Тогда 			
		Элементы.Штрафы.ОтборСтрок = Отбор;
		Элементы.Акты.ОтборСтрок   = Отбор;
	Иначе
		// Отметки_Выгрузка
		Элементы.Штрафы_Выгрузка.ОтборСтрок = Отбор;
		Элементы.Акты_Выгрузка.ОтборСтрок   = Отбор;
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиПриАктивизацииСтроки(Элемент)
	
	Отметки_УстановитьОтборПоВсемСвязаннымТаблицам("Отметки");
	
КонецПроцедуры

&НаКлиенте
Процедура Отметки_ВыгрузкаПриАктивизацииСтроки(Элемент)
	
	Отметки_УстановитьОтборПоВсемСвязаннымТаблицам("Отметки_Выгрузка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекДанные = Элементы.Отметки.ТекущиеДанные;
		
		ТекДанные.КлючСтроки = НовыйКлючСтроки("Отметки");
		ТекДанные.ДатаВремя  = ОбщегоНазначенияКлиент.ДатаСеанса();
		ТекДанные.Роль       = ТипОтметок_Погрузка;
		
		// Этап
		Если СокрЛП(ТипОтметок_Погрузка) = "Отправитель" Тогда 
			ТекДанные.Этап = ТипТитула("Погрузка");
		Иначе
			ТекДанные.Этап = ТипТитула("ПолучениеГруза");
		КонецЕсли;
		
		ТекДанные.КритерийОтбора = Истина;
		
		// Переустановим отбор
		Отметки_УстановитьОтборПоВсемСвязаннымТаблицам(Элемент.Имя);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Отметки_ВыгрузкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекДанные = Элементы.Отметки_Выгрузка.ТекущиеДанные;
		
		ТекДанные.КлючСтроки = НовыйКлючСтроки("Отметки");
		ТекДанные.ДатаВремя  = ОбщегоНазначенияКлиент.ДатаСеанса();
		ТекДанные.Роль       = ТипОтметок_Выгрузка;
				
		// Этап
		Если СокрЛП(ТипОтметок_Выгрузка) = "Получатель" Тогда 
			ТекДанные.Этап = ТипТитула("ПриемкаГруза");
		Иначе
			ТекДанные.Этап = ТипТитула("ВыдачаГруза");
		КонецЕсли;
		
		ТекДанные.КритерийОтбора = Истина;
		
		// Переустановим отбор
		Отметки_УстановитьОтборПоВсемСвязаннымТаблицам(Элемент.Имя);

	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ШтрафыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Отметки", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура АктыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Отметки", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура Акты_ВыгрузкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Отметки_Выгрузка", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура Штрафы_ВыгрузкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Отметки_Выгрузка", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ШтрафыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НоваяСтрока Тогда 
		ДобавитьКлючСвязиСтроки(Элемент.Имя, "Отметки", Элемент.ТекущаяСтрока, НоваяСтрока);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АктыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		ДобавитьКлючСвязиСтроки(Элемент.Имя, "Отметки", Элемент.ТекущаяСтрока, НоваяСтрока);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Штрафы_ВыгрузкаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		ДобавитьКлючСвязиСтроки("Штрафы", "Отметки_Выгрузка", Элемент.ТекущаяСтрока, НоваяСтрока, "КлючСтроки_Отметки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Акты_ВыгрузкаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		ДобавитьКлючСвязиСтроки("Акты", "Отметки_Выгрузка", Элемент.ТекущаяСтрока, НоваяСтрока, "КлючСтроки_Отметки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Отметки.ВыделенныеСтроки;
	ОтметкиУдалитьСтоки(ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Отметки_ВыгрузкаПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Отметки.ВыделенныеСтроки;
	ОтметкиУдалитьСтоки(ВыделенныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ОтметкиУдалитьСтоки(ВыделенныеСтроки)
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Отметки.НайтиПоИдентификатору(ИдСтроки);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			УдаляемыеКлючи_Отметки.Добавить(ТекДанные.КлючСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("УдалитьСвязанныеСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаОтметок(Этап)
	
	Титул = ПредопределенноеЗначение("Перечисление.Saby_ТипТитулаЭтрН." + Этап);
	Роль  = Перечисления.Saby_РолиКонтрагентов.ПустаяСсылка();
	
	Saby_ТНОбщегоНазначенияСервер.ЗачисткаОтметокШтрафовАктов(Объект, Титул, Роль);
	
КонецПроцедуры

#КонецОбласти // Отметки

#Область ДатаИВремя

&НаСервере
Процедура РазложитьДатуВремяПоРеквизитам(РеквизитОбъекта, РеквизитДата, РеквизитВремя)
	
	 ЭтаФорма[РеквизитДата]  = Объект[РеквизитОбъекта];	 
	 ЭтаФорма[РеквизитВремя] = Объект[РеквизитОбъекта];
		
КонецПроцедуры

&НаСервере
Процедура СобратьДатуВремяПоРеквизитам(РеквизитОбъекта, РеквизитДата, РеквизитВремя)
	
	Если Не ЗначениеЗаполнено(ЭтаФорма[РеквизитДата]) Тогда 
		Возврат;
	КонецЕсли;
			
	ДатаСтрока  = Формат(ЭтаФорма[РеквизитДата],  "ДФ=yyyyMMdd");
	ВремяСтрока = Формат(ЭтаФорма[РеквизитВремя], "ДФ=HHmmss");
	
	ДатаИВремя = Дата(ДатаСтрока + ВремяСтрока);
	
	Если ДатаИВремя <> Объект[РеквизитОбъекта] Тогда	 
		Объект[РеквизитОбъекта] = ДатаИВремя;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоставитьДо_ДатаПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДоставитьДо_ВремяПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Погрузка_ДатаПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Погрузка_ВремяПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Погрузка_ДатаПрибылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Погрузка_ВремяПрибылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Погрузка_ДатаУбылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Погрузка_ВремяУбылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Приемка_ДатаПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Приемка_ВремяПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Приемка_ДатаПрибылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Приемка_ВремяПрибылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Приемка_ДатаУбылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Приемка_ВремяУбылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Выгрузка_ДатаПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Выгрузка_ВремяПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Выгрузка_ДатаПрибылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Выгрузка_ВремяПрибылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Выгрузка_ДатаУбылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Выгрузка_ВремяУбылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик_ВыгрузкаДатаПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик_ВыгрузкаВремяПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик_ВыгрузкаДатаПрибылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик_ВыгрузкаВремяПрибылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик_ВыгрузкаДатаУбылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик_ВыгрузкаВремяУбылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти // ДатаИВремя

&НаКлиенте
Процедура Отгрузка_ОтветственныйПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Отгрузка_Ответственный) Тогда  		
		Объект.Отгрузка_ОтветственныйНаОсновании = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Грузоотправитель_ИнициаторПереадресацииПриИзменении(Элемент)
	
	РольОтправитель = ПредопределенноеЗначение("Перечисление.Saby_РолиКонтрагентов.Отправитель");
	Если Объект.ИнициаторПереадресации = РольОтправитель Тогда		
		Объект.ИнициаторПереадресацииПодтверждение = "";		
	КонецЕсли;	
		
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСобытийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ИсторияСобытий.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ОткрытьФормуТитула(
		ДанныеСтроки.ИдентификаторТитула,
		ДанныеСтроки.НаименованиеТитула
	);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовДополнительныхСтраниц

#Область СлужебныеПроцедурыИФункции

#Область КлючиСтрок

&НаСервере
Процедура МаксимальныеКлючиСтрок()
	
	ИмяКолонки = "КлючСтроки";
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить("Грузы");
	МассивТаблиц.Добавить("Отметки");
    МассивТаблиц.Добавить("Водители");
	
	Для Каждого ИмяТЧ Из МассивТаблиц Цикл 
		
		ИмяКлюча = "МаксимальныйКлючСтроки_" + ИмяТЧ;
		
		Если Объект[ИмяТЧ].Количество() = 0 Тогда
			ЭтаФорма[ИмяКлюча] = 0;		
		Иначе 	
			
			СписокКлючей = Новый СписокЗначений;	
			СписокКлючей.ЗагрузитьЗначения(Объект[ИмяТЧ].Выгрузить(, ИмяКолонки).ВыгрузитьКолонку(ИмяКолонки)); 			
			СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);   
			
			ЭтаФорма[ИмяКлюча] = СписокКлючей[0].Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция НовыйКлючСтроки(ИмяТЧ)
	
	// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
	// рассчитывается от максимального существующего значения.	
	ИмяКлюча = "МаксимальныйКлючСтроки_" + ИмяТЧ;	
	
	ЭтаФорма[ИмяКлюча] = ЭтаФорма[ИмяКлюча] + 1;						
	Возврат ЭтаФорма[ИмяКлюча];
			
КонецФункции

&НаКлиенте
Процедура ДобавитьКлючСвязиСтроки(ИмяТЧ, ИсходнаяТЧ, НомерСтроки, НоваяСтрока, ИмяКолонкиКлюча = Неопределено)
	
	Если Не НоваяСтрока Тогда 
		Возврат;
	КонецЕсли;
	
	// Проверка корректности номера строки 
	// При удалении строк расходится номер строки и индекс. Индекс сдвигается, а номер строки только увеличивается 
	Если НомерСтроки >= Объект[ИмяТЧ].Количество() Тогда 
		
		// считаем что новая строка это самая последняя в таблице		
		НовыйНомерСтроки = Объект[ИмяТЧ].Количество() - 1;		
		ТекущиеДанные    = Объект[ИмяТЧ][НовыйНомерСтроки];
		
	Иначе
		ТекущиеДанные = Объект[ИмяТЧ][НомерСтроки];
	КонецЕсли;
			
	ТекущиеДанныеИсходнойТЧ = Элементы[ИсходнаяТЧ].ТекущиеДанные;
	
	КлючСтроки = ТекущиеДанныеИсходнойТЧ.КлючСтроки;
	
	ИмяКлюча = ?(ИмяКолонкиКлюча <> Неопределено, ИмяКолонкиКлюча, "КлючСтроки_" + ИсходнаяТЧ);
	Если ТекущиеДанные[ИмяКлюча] <> КлючСтроки Тогда 		
		ТекущиеДанные[ИмяКлюча] = КлючСтроки;		
	КонецЕсли;
		
КонецПроцедуры

// ПодключаемыеОбработчики
&НаКлиенте
Процедура УдалитьСвязанныеСтроки()
	
	УдалитьСвязанныеЗаписиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеЗаписиНаСервере()
	
	ВидыУдаляемыхСтрок = Новый Структура; 
	
	// Грузы 
	КлючиГруз = Новый Структура;
	КлючиГруз.Вставить("Список",     УдаляемыеКлючи_Грузы);
	КлючиГруз.Вставить("ИмяКолонки", "Грузы"); 
	
	ВидыУдаляемыхСтрок.Вставить("Маркировки",        КлючиГруз);
	ВидыУдаляемыхСтрок.Вставить("ОпасныеГрузы",      КлючиГруз);
	ВидыУдаляемыхСтрок.Вставить("СведенияГосСистем", КлючиГруз);
	ВидыУдаляемыхСтрок.Вставить("Контейнеры",        КлючиГруз);
	
	// Отметки
	КлючиОтметки = Новый Структура;
	КлючиОтметки.Вставить("Список",     УдаляемыеКлючи_Отметки);
	КлючиОтметки.Вставить("ИмяКолонки", "Отметки"); 

	ВидыУдаляемыхСтрок.Вставить("Акты",   КлючиОтметки);
	ВидыУдаляемыхСтрок.Вставить("Штрафы", КлючиОтметки);
	
	// Водители  
	КлючиВодители = Новый Структура;
	КлючиВодители.Вставить("Список",     УдаляемыеКлючи_Водители);
	КлючиВодители.Вставить("ИмяКолонки", "Водители"); 
	
	ВидыУдаляемыхСтрок.Вставить("ПутевыеЛисты", КлючиВодители);
	
	Для Каждого ВидУдаляемыхСтрок Из ВидыУдаляемыхСтрок Цикл
		
		ИмяТабличнойЧасти 		= ВидУдаляемыхСтрок.Ключ;
		СписокУдаленныхКлючей 	= ВидУдаляемыхСтрок.Значение.Список;
		КлючСтроки              = "КлючСтроки_" + ВидУдаляемыхСтрок.Значение.ИмяКолонки;
		
		Для Каждого СтрокаКлюча Из СписокУдаленныхКлючей Цикл
								
			КлючПоиска = Новый Структура(КлючСтроки, СтрокаКлюча.Значение); 
			
			МассивСтрокТовары = Объект[ИмяТабличнойЧасти].НайтиСтроки(КлючПоиска);
			
			Для Каждого СтрокаТЧ Из МассивСтрокТовары Цикл
				Объект[ИмяТабличнойЧасти].Удалить(СтрокаТЧ);
			КонецЦикла; 
			
		КонецЦикла;
	КонецЦикла; 
	
    // сбросим списки в начальное состояние
	УдаляемыеКлючи_Грузы.Очистить();
	УдаляемыеКлючи_Отметки.Очистить();
	УдаляемыеКлючи_Водители.Очистить();
	
КонецПроцедуры

#КонецОбласти // КлючиСтрок
	   
&НаСервере
Функция ЗаполнениеНаОснованииINI()
	
	Результат = Документы.Saby_ТранспортнаяНакладная.ЗаполнитьНаОснованииINI(Объект, ДокументОснование);	
	Если ЗначениеЗаполнено(Результат) Тогда		
		УстановкаВидимостиИРасчетныхРеквизитов()
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборыПоТаблицам()

	// Контактная информация
	ОтборИнформацииПоКонтактнымДанным("КонтактныеДанные",            "Отправитель");
	ОтборИнформацииПоКонтактнымДанным("КонтактныеДанные_Получатель", "Получатель");
	ОтборИнформацииПоКонтактнымДанным("КонтактныеДанные_Перевозчик", "Перевозчик");
	ОтборИнформацииПоКонтактнымДанным("КонтактныеДанные_Отгрузка",   "Отгрузчик");
	ОтборИнформацииПоКонтактнымДанным("КонтактныеДанные_Владелец",   "ВладелецОбъекта");
	
	// Грузы. Связанные таблицы 
	Грузы_УстановитьОтборПоВсемСвязаннымТаблицам();
	
	// Отметки 
	ОтборОтметокПоТипу();
	
	// Отметки. Связанные таблицы
	
КонецПроцедуры

// Заполнение реквизитов формы при изменение, связанной информации
// или первоначальной инициализации формы
&НаСервере
Процедура ЗаполнитьРасчетныеРеквизиты()
	
	Если ЗначениеЗаполнено(Объект.Отправитель) Тогда 
		ЭтаФорма.Грузоотправитель_Грузополучатель = (Объект.Получатель = Объект.Отправитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Составитель) Тогда
		Грузоотправитель_НеЯвляетсяОтправителем = Объект.Отправитель <> Объект.Составитель;
	КонецЕсли;
	
	ЭтаФорма.Грузоотправитель_ОсуществляетОтгрузку = (Объект.Отправитель = Объект.Отгрузчик);
 
	ЭтаФорма.ТипОтметок_Погрузка = Перечисления.Saby_РолиКонтрагентов.Отправитель; 
	ЭтаФорма.ТипОтметок_Выгрузка = Перечисления.Saby_РолиКонтрагентов.Получатель;
		
	// Телефоны  
	ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(
		"Отправитель,Получатель,Перевозчик,Отгрузчик,ВладелецОбъекта"
	);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметры);
	
	// Даты. Разложим дату и время по отдельным реквизитам 
	РазложитьДатуВремяПоРеквизитам("Отправитель_ДоставитьДо",            "ДоставитьДо_Дата",              "ДоставитьДо_Время");
	РазложитьДатуВремяПоРеквизитам("Погрузка_ДатаВремя",                 "Погрузка_Дата",                 "Погрузка_Время");
	РазложитьДатуВремяПоРеквизитам("Погрузка_ДатаВремяПрибыл",           "Погрузка_ДатаПрибыл",           "Погрузка_ВремяПрибыл");
	РазложитьДатуВремяПоРеквизитам("Погрузка_ДатаВремяУбыл",             "Погрузка_ДатаУбыл",             "Погрузка_ВремяУбыл");
	РазложитьДатуВремяПоРеквизитам("Перевозчик_ПриемкаДатаВремя",        "Перевозчик_ПриемкаДата",        "Перевозчик_ПриемкаВремя");
	РазложитьДатуВремяПоРеквизитам("Перевозчик_ПриемкаДатаВремяПрибыл",  "Перевозчик_ПриемкаДатаПрибыл",  "Перевозчик_ПриемкаВремяПрибыл");
	РазложитьДатуВремяПоРеквизитам("Перевозчик_ПриемкаДатаВремяУбыл",    "Перевозчик_ПриемкаДатаУбыл",    "Перевозчик_ПриемкаВремяУбыл");
	РазложитьДатуВремяПоРеквизитам("Выгрузка_ДатаВремя",                 "Выгрузка_Дата",                 "Выгрузка_Время");
	РазложитьДатуВремяПоРеквизитам("Выгрузка_ДатаВремяПрибыл",           "Выгрузка_ДатаПрибыл",           "Выгрузка_ВремяПрибыл");
	РазложитьДатуВремяПоРеквизитам("Выгрузка_ДатаВремяУбыл",             "Выгрузка_ДатаУбыл",             "Выгрузка_ВремяУбыл" );
	РазложитьДатуВремяПоРеквизитам("Перевозчик_ВыгрузкаДатаВремя",       "Перевозчик_ВыгрузкаДата",       "Перевозчик_ВыгрузкаВремя");
	РазложитьДатуВремяПоРеквизитам("Перевозчик_ВыгрузкаДатаВремяПрибыл", "Перевозчик_ВыгрузкаДатаПрибыл", "Перевозчик_ВыгрузкаВремяПрибыл");
	РазложитьДатуВремяПоРеквизитам("Перевозчик_ВыгрузкаДатаВремяУбыл",   "Перевозчик_ВыгрузкаДатаУбыл",   "Перевозчик_ВыгрузкаВремяУбыл");
	
	// Документ основание
	Если ЗначениеЗаполнено(Объект.ДокументОснование_Идентификатор) Тогда 		
		 ДокументОснование = Документы[Объект.ДокументОснование_ОбъектМетаданных].ПолучитьСсылку(Объект.ДокументОснование_Идентификатор);
		 Элементы.ДекорацияДокументОснование.Заголовок = СокрЛП(ДокументОснование);
	КонецЕсли;	
	
	// Активный этап и индикация состояния
	СбисЭтапИСостояние();
	
	АктивныеЭтапы = ПараметрыАктивныхЭтапов();
	
	// Обязательно после процедуры СбисЭтапИСостояние(), так как устанавливается реквизит АктивныйЭтапСтрокой
	ОграничитьТипыАктов(АктивныеЭтапы);
	ОграничитьТипСоставителя(АктивныеЭтапы);
	
	ОбновитьДоступностьПолейВвода();
	
	ПолучитьЕщеИзмененияНаСервере(Ложь);
	
	УстановитьДанныеВодителей();  
	
	СформироватьНадписьПрицепыСтрокой();
	
КонецПроцедуры

&НаСервере
Процедура ОграничитьТипыДокументовОснований()
	
	МассивТипов = Документы.Saby_ТранспортнаяНакладная.ТипыДляЗаполненияНаОсновании();
	
	ТипДокументаОснования = ТипЗнч(ДокументОснование);
	
	Если ЗначениеЗаполнено(ДокументОснование) И МассивТипов.Найти(ТипДокументаОснования) = Неопределено Тогда
		МассивТипов.Добавить(ТипДокументаОснования);
	КонецЕсли;
	
	ТипыОснований.ЗагрузитьЗначения(МассивТипов);
		
КонецПроцедуры

&НаСервере
Процедура ОграничитьТипыАктов(АктивныеЭтапы = Неопределено)
	
	Если АктивныеЭтапы = Неопределено Тогда
		АктивныеЭтапы = ПараметрыАктивныхЭтапов();
	КонецЕсли;
	
	Если АктивныеЭтапы.ПолучениеГруза Или АктивныеЭтапы.ВыдачаГруза Тогда
		ЗначениеПараметра = ПредопределенноеЗначение("Перечисление.Saby_ТипыДокумента.АктКоммерческий");
	Иначе
		ЗначениеПараметра = Новый Массив;
		ЗначениеПараметра.Добавить(ПредопределенноеЗначение("Перечисление.Saby_ТипыДокумента.АктВзвешивания"));
		ЗначениеПараметра.Добавить(ПредопределенноеЗначение("Перечисление.Saby_ТипыДокумента.АктКоммерческий"));
	КонецЕсли;
	
	МассивПараметровОтбора = Новый Массив;
	Параметр = Новый ПараметрВыбора("Отбор.Тип", ЗначениеПараметра);
	МассивПараметровОтбора.Добавить(Параметр);
	
	ПараметрыВыбораАктов = Новый ФиксированныйМассив(МассивПараметровОтбора);
	
	Элементы.АктыДокумент.ПараметрыВыбора          = ПараметрыВыбораАктов;
	Элементы.Акты_ВыгрузкаДокумент.ПараметрыВыбора = ПараметрыВыбораАктов;
	
КонецПроцедуры

&НаСервере
Процедура ОграничитьТипСоставителя(АктивныеЭтапы = Неопределено)
	
	Если АктивныеЭтапы = Неопределено Тогда
		АктивныеЭтапы = ПараметрыАктивныхЭтапов();
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	
	Если АктивныеЭтапы.Черновик Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
	Иначе
		МассивТипов.Добавить(Тип("Строка"));
	КонецЕсли;
	
	ОписаниеДоступныхТипов = Новый ОписаниеТипов(МассивТипов);		
	Элементы.Составитель.ОграничениеТипа = ОписаниеДоступныхТипов;
	
КонецПроцедуры

&НаСервере
Процедура СбисЭтапИСостояние()
		
	ДанныеЭтапа = АктивныйЭтапДокумента(Объект.Ссылка);	
	
	АктивныйЭтапСтрокой               = ДанныеЭтапа.АктивныйЭтап;
	Элементы.КартинкаСтатус.Подсказка = ДанныеЭтапа.Состояние;
	ИндексКартинки                    = ДанныеЭтапа.ИндексКартинки;
	Состояние                         = ДанныеЭтапа.Состояние;
	
	Элементы.АктивныйЭтап.Видимость           = ЗначениеЗаполнено(АктивныйЭтапСтрокой);
	Элементы.КомментарийУведомление.Видимость = (ИндексКартинки = 5); // отрицательное завершение ДО	
	
	ТекущийТитул = Saby_ТНОбщегоНазначенияСервер.ТитулПоПредставлению(АктивныйЭтапСтрокой);
	
	// проверка на динамический это титул или нет
	ЭтоДТ = Saby_ТНОбщегоНазначенияСервер.ЭтоДинамическийТитул(ТекущийТитул);  
	
	Если ИндексКартинки = 3 Тогда  
		
		Элементы.КартинкаСтатус.Картинка  = БиблиотекаКартинок.Saby_СостояниеОшибка;
		Элементы.КартинкаСтатус.Видимость = Истина;
		
	// ДО завершен положительно	
	ИначеЕсли ИндексКартинки = 6 Тогда
		
		Элементы.КартинкаСтатус.Картинка         = БиблиотекаКартинок.Saby_СостояниеЗавершеноПоложительно;
		Элементы.КартинкаСтатус.Видимость        = Истина;
		Элементы.ФормаЗагрузитьВСбис.Доступность = Ложь; // выгрузка в сбис после завершения не доступна
		
	// ДО завершен отрицательно	
	ИначеЕсли ИндексКартинки = 5 Тогда
		
		Элементы.КартинкаСтатус.Картинка          = БиблиотекаКартинок.Saby_СостояниеЗавершеноОтрицательно;	
		Элементы.КартинкаСтатус.Видимость         = Истина;
		Элементы.ФормаЗагрузитьВСбис.Доступность  = Ложь; // выгрузка в сбис после завершения не доступна 
		
	Иначе
		
		Элементы.ФормаЗагрузитьВСбис.Доступность  = Не ЭтоДТ; // выгрузка в сбис на ДТ не доступна 
		Элементы.КартинкаСтатус.Видимость         = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьИДоступностьЭлементовНаКлиенте() Экспорт
	ОбновитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИДоступностьЭлементов()
	
	Неизвестен = Перечисления.Saby_ВладелецОбъектаОтгрузки.Неизвестен;	
	Элементы.Владелец_НеизвестенПричина.Видимость  = (Объект.Владелец_Тип = Неизвестен); 
	
	Элементы.Грузополучатель.Доступность = НЕ Грузоотправитель_Грузополучатель;
	Элементы.Группа_Заказчик.Видимость   = Объект.Отправитель_Экспедитор;
	
	// Грузоотправитель_ОсуществляетОтгрузку
	//Элементы.Группа_ОтгрузкаДругоеЮрЛицо.Доступность = НЕ Грузоотправитель_ОсуществляетОтгрузку;
	Элементы.Отгрузчик.Доступность = НЕ Грузоотправитель_ОсуществляетОтгрузку И Не Грузоотправитель_НеЯвляетсяОтправителем;
	Элементы.Группа_ТелОтгрузка.Доступность = НЕ Грузоотправитель_ОсуществляетОтгрузку И Не Грузоотправитель_НеЯвляетсяОтправителем;
	Элементы.Отгрузка_НаОснованииДокумент.Доступность = НЕ Грузоотправитель_ОсуществляетОтгрузку Или Грузоотправитель_НеЯвляетсяОтправителем;
	Элементы.Группа_ПогрузкаОтветственный.Доступность = НЕ Грузоотправитель_ОсуществляетОтгрузку Или Грузоотправитель_НеЯвляетсяОтправителем;
	
	Элементы.Группа_Составитель.Видимость = Грузоотправитель_НеЯвляетсяОтправителем;
	
	//ЭтаФорма.ОбновитьОтображениеДанных();
		
	// Владелец 
	Если Объект.Владелец_Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.Отправитель Тогда
		
		Элементы.Группа_Владелец.Видимость            = Ложь;
		Элементы.Владелец_НеизвестенПричина.Видимость = Ложь;
				
	ИначеЕсли Объект.Владелец_Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.ДругоеЮрЛицо Тогда 
		
		Элементы.Группа_Владелец.Видимость            = Истина;
		Элементы.Владелец_НеизвестенПричина.Видимость = Ложь;
		
	Иначе
		// Неизвестен
	    Элементы.Группа_Владелец.Видимость            = Ложь;
		Элементы.Владелец_НеизвестенПричина.Видимость = Истина;
		
	КонецЕсли;	
    // - 		
	
	ЭтоИсходящий = (Объект.Направление = Перечисления.Saby_Направление.Исходящий);
	Завершен     = ИндексКартинки = 5 Или ИндексКартинки = 6;
	ЭтоЧерновик  = Не ЗначениеЗаполнено(АктивныйЭтапСтрокой) И Не Завершен;
		
	Если Не ЭтоИсходящий Тогда 		
		Элементы.ГруппаДокументОснование.Видимость = Ложь;
	Иначе 
		Элементы.ГруппаДокументОснование.Видимость = ЭтоЧерновик Или ЗначениеЗаполнено(ДокументОснование);
	КонецЕсли;
		
	РольПолучатель = Перечисления.Saby_РолиКонтрагентов.Получатель;
	Элементы.ИнициаторПереадресацииПодтверждение.Доступность = Объект.ИнициаторПереадресации = РольПолучатель;		

	Элементы.НомерСбис.Видимость = Не ЭтоИсходящий И ЗначениеЗаполнено(Объект.НомерСбис);
	
	// Доступность доп команд по данным сервиса
	ОбновитьДоступностьДополнительныхКоманд();
	
	АдресПогрузкиЗаполнен = ЗначениеЗаполнено(Объект.Погрузка_Адрес);
	Элементы.Погрузка_Адрес.Видимость = АдресПогрузкиЗаполнен;
	Элементы.ДекорацияЗаполнитьАдресПогрузки.Видимость = Не АдресПогрузкиЗаполнен;
	
	АдресДоставкиЗаполнен = ЗначениеЗаполнено(Объект.Отправитель_АдресДоставки);
	Элементы.АдресДоставки.Видимость = АдресДоставкиЗаполнен;
	Элементы.ДекорацияЗаполнитьАдресДоставки.Видимость = Не АдресДоставкиЗаполнен;
		
КонецПроцедуры	

&НаСервере
Функция ПараметрыАктивныхЭтапов()
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Завершен",              ИндексКартинки = 5 Или ИндексКартинки = 6);
	РезультатФункции.Вставить("Черновик",              Ложь);
	РезультатФункции.Вставить("ПолучениеГруза",        Ложь);
	РезультатФункции.Вставить("ПриемкаГруза",          Ложь);
	РезультатФункции.Вставить("ВыдачаГруза",           Ложь);
	РезультатФункции.Вставить("СогласованиеСтоимости", Ложь);
	РезультатФункции.Вставить("ЭтоДинамическийТитул",  Ложь);
	
	ТекущийЭтап = Saby_ТНОбщегоНазначенияСервер.ТитулПоПредставлению(АктивныйЭтапСтрокой);
	
	РезультатФункции.ЭтоДинамическийТитул = Saby_ТНОбщегоНазначенияСервер.ЭтоДинамическийТитул(ТекущийЭтап);
	
	Если Не РезультатФункции.Завершен Тогда
		
		Погрузка = (ТекущийЭтап = Перечисления.Saby_ТипТитулаЭтрН.Погрузка);
				
		РезультатФункции.ПолучениеГруза = (ТекущийЭтап = Перечисления.Saby_ТипТитулаЭтрН.ПолучениеГруза);
		РезультатФункции.ПриемкаГруза   = (ТекущийЭтап = Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза);
		РезультатФункции.ВыдачаГруза    = (ТекущийЭтап = Перечисления.Saby_ТипТитулаЭтрН.ВыдачаГруза);
				
		РезультатФункции.Черновик              = Не ЗначениеЗаполнено(ТекущийЭтап) Или Погрузка;
		РезультатФункции.СогласованиеСтоимости = (ТекущийЭтап = Перечисления.Saby_ТипТитулаЭтрН.СогласованиеСтоимости);
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Функция РолиОрганизации()
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Отправитель", Ложь);
	РезультатФункции.Вставить("Получатель",  Ложь);
	РезультатФункции.Вставить("Перевозчик",  Ложь);
	
	РезультатФункции.Отправитель = ТипЗнч(Объект.Отправитель) = Тип("СправочникСсылка.Организации")
		И ЗначениеЗаполнено(Объект.Отправитель);
		
	РезультатФункции.Получатель = ТипЗнч(Объект.Получатель) = Тип("СправочникСсылка.Организации")
		И ЗначениеЗаполнено(Объект.Получатель);
		
	РезультатФункции.Перевозчик = ТипЗнч(Объект.Перевозчик) = Тип("СправочникСсылка.Организации")
		И ЗначениеЗаполнено(Объект.Перевозчик);
		
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Процедура ОбновитьДоступностьПолейВвода()
	
	ПараметрыЭтапов = ПараметрыАктивныхЭтапов();
	ДоступныеРоли   = РолиОрганизации();
	
	ЭтоПриемкаИлиВыдача = ПараметрыЭтапов.ПриемкаГруза Или ПараметрыЭтапов.ВыдачаГруза;
	
	ЭтоНеЧерновик = ПараметрыЭтапов.ПолучениеГруза Или ЭтоПриемкаИлиВыдача 
						Или ПараметрыЭтапов.Завершен Или ПараметрыЭтапов.ЭтоДинамическийТитул;
		
	// Видимость
	Элементы.ТипОтметок_Погрузка.Видимость        = ЭтоНеЧерновик;
	Элементы.Группа_ПогрузкаОговорки.Видимость    = ЭтоНеЧерновик;
	Элементы.Страница_Выгрузка.Видимость          = ЭтоПриемкаИлиВыдача Или ПараметрыЭтапов.Завершен Или ПараметрыЭтапов.СогласованиеСтоимости;
	Элементы.ТипОтметок_Выгрузка.Видимость        = ЭтоНеЧерновик;
	Элементы.Группа_ОговоркиПеревозчика.Видимость = ПараметрыЭтапов.ВыдачаГруза Или ПараметрыЭтапов.Завершен;
	
	// Только просмотр   
	Элементы.Группа_СтандартныеРеквизиты.ТолькоПросмотр = ЭтоНеЧерновик;
	Элементы.Группа_Шапка.ТолькоПросмотр                = ЭтоНеЧерновик;
	Элементы.Страница_Основное.ТолькоПросмотр           = ЭтоНеЧерновик;
	Элементы.Страница_Груз.ТолькоПросмотр               = ЭтоНеЧерновик;   
	Элементы.ГруппаПогрузкаШапка.ТолькоПросмотр         = ЭтоНеЧерновик; 
	Элементы.Погрузка_Адрес.Доступность                 = Не ЭтоНеЧерновик;
	Элементы.АдресДоставки.Доступность                  = Не ЭтоНеЧерновик;
	
	Элементы.ГруппаДокументОснование.ТолькоПросмотр     = ЭтоНеЧерновик;

	Элементы.ГруппаВыгрузкаШапка.ТолькоПросмотр         = Не ПараметрыЭтапов.ПриемкаГруза Или Не ДоступныеРоли.Получатель;   
	Элементы.Группа_ОтметкиПогрузка.ТолькоПросмотр      = ЭтоПриемкаИлиВыдача;
	Элементы.Группа_ПогрузкаОговорки.ТолькоПросмотр     = ЭтоПриемкаИлиВыдача
		Или ПараметрыЭтапов.ЭтоДинамическийТитул Или Не ДоступныеРоли.Перевозчик;
	Элементы.Группа_ОговоркиПеревозчика.ТолькоПросмотр  = Не ПараметрыЭтапов.ВыдачаГруза Или Не ДоступныеРоли.Перевозчик;
	
	Если ПараметрыЭтапов.Черновик Тогда			
		ТипОтметок_Погрузка = Перечисления.Saby_РолиКонтрагентов.Отправитель;
	ИначеЕсли ПараметрыЭтапов.ПолучениеГруза Тогда			
		ТипОтметок_ПогрузкаТолькоПросмотр(ПараметрыЭтапов, ДоступныеРоли); 
	ИначеЕсли ПараметрыЭтапов.ПриемкаГруза Тогда			
		ТипОтметок_Выгрузка = Перечисления.Saby_РолиКонтрагентов.Получатель;
		ТипОтметок_ВыгрузкаТолькоПросмотр(ПараметрыЭтапов, ДоступныеРоли);
	ИначеЕсли ПараметрыЭтапов.ВыдачаГруза Тогда 
		ТипОтметок_ВыгрузкаТолькоПросмотр(ПараметрыЭтапов, ДоступныеРоли);
	КонецЕсли;
	
	// до завершен или это ДТ
	ЭтаФорма.ТолькоПросмотр = ПараметрыЭтапов.Завершен Или ПараметрыЭтапов.ЭтоДинамическийТитул;
	
	// Доступность 
	Элементы.НастройкаДокументовОснований.Доступность = Не ЭтоНеЧерновик;

КонецПроцедуры

&НаСервере
Процедура ТипОтметок_ПогрузкаТолькоПросмотр(ПараметрыЭтапов = Неопределено, ДоступныеРоли = Неопределено)
	
	Если ПараметрыЭтапов = Неопределено Тогда
		ПараметрыЭтапов = ПараметрыАктивныхЭтапов();
	КонецЕсли;
	Если ДоступныеРоли = Неопределено Тогда
		ДоступныеРоли = РолиОрганизации();
	КонецЕсли;
	
	Если ПараметрыЭтапов.ПриемкаГруза Или ПараметрыЭтапов.ВыдачаГруза Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипОтметок_Погрузка = ПредопределенноеЗначение("Перечисление.Saby_РолиКонтрагентов.Отправитель") Тогда
		Элементы.Группа_ОтметкиПогрузка.ТолькоПросмотр = Истина;
	Иначе
		Элементы.Группа_ОтметкиПогрузка.ТолькоПросмотр = Не ДоступныеРоли.Перевозчик;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТипОтметок_ВыгрузкаТолькоПросмотр(ПараметрыЭтапов = Неопределено, ДоступныеРоли = Неопределено)
	
	Если ПараметрыЭтапов = Неопределено Тогда
		ПараметрыЭтапов = ПараметрыАктивныхЭтапов();
	КонецЕсли;
	Если ДоступныеРоли = Неопределено Тогда
		ДоступныеРоли = РолиОрганизации();
	КонецЕсли;
	
	Если ПараметрыЭтапов.Черновик Или ПараметрыЭтапов.ПолучениеГруза Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипОтметок_Выгрузка = ПредопределенноеЗначение("Перечисление.Saby_РолиКонтрагентов.Получатель") Тогда
		Элементы.Группа_ОтметкиВыгрузкаТЧ.ТолькоПросмотр = Не ДоступныеРоли.Получатель Или ПараметрыЭтапов.ВыдачаГруза;
	Иначе
		Элементы.Группа_ОтметкиВыгрузкаТЧ.ТолькоПросмотр = Не ДоступныеРоли.Перевозчик Или ПараметрыЭтапов.ПриемкаГруза;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьДополнительныхКоманд()
				
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Кнопки по умолчанию отключены в доступности
		Возврат;
	КонецЕсли;
	
	ИзменитьСтоимостьДоступно         = Ложь;
	СогласоватьСтоимостьДоступно      = Ложь;
	ПереадресовкаДоступно             = Ложь;
	ЗаменаВодителяДоступно            = Ложь;
	УведомлениеОПереадресовкеДоступно = Ложь;
	ОтказВПриемкеГрузаДоступно        = Ложь;
			
	ДопДействия = Новый Соответствие;
	Для Каждого Строка Из Объект.ДоступныеДействия Цикл 
		ДопДействия.Вставить(Строка.Действие, Истина);
	КонецЦикла;
	
	Если ДопДействия.Количество() Тогда  
		
		ПереадресовкаДоступно = 
			ДействиеДоступноНаТекущемЭтапе(ДопДействия, Перечисления.Saby_ДоступныеДействия.Переадресовка);
		
		ЗаменаВодителяДоступно = 
			ДействиеДоступноНаТекущемЭтапе(ДопДействия, Перечисления.Saby_ДоступныеДействия.ЗаменаВодителяТС);				
							
		УведомлениеОПереадресовкеДоступно = 
			ДействиеДоступноНаТекущемЭтапе(ДопДействия, Перечисления.Saby_ДоступныеДействия.УведомлениеОПереадресовке);
		
		ИзменитьСтоимостьДоступно = 
			ДействиеДоступноНаТекущемЭтапе(ДопДействия, Перечисления.Saby_ДоступныеДействия.ИзменитьСтоимость);
		 							
	КонецЕсли;
	
	// исключение из правил, это отдельный этап
	// должен приходить только на участника процесса - ТК и ГО, поэтому нужна отсечка по ГО  
	ЭтоСогласованиеСтоимости = (ТекущийЭтап = Перечисления.Saby_ТипТитулаЭтрН.СогласованиеСтоимости);
	ЭтоОтправитель           = (ТипЗнч(Объект.Отправитель) = Тип("СправочникСсылка.Организации"));
		
	СогласоватьСтоимостьДоступно = ЭтоСогласованиеСтоимости И ЭтоОтправитель; 
	
	// Доступность кнопок
	Элементы.ФормаПереадресовка.Доступность            = ПереадресовкаДоступно;
	Элементы.ФормаЗаменаВодителя.Доступность           = ЗаменаВодителяДоступно;
	Элементы.ФормаИзменитьСтоимость.Доступность        = ИзменитьСтоимостьДоступно;
	Элементы.ФормаСогласоватьСтоимость.Доступность     = СогласоватьСтоимостьДоступно;
	Элементы.ФормаПереадресовкаУведомление.Доступность = УведомлениеОПереадресовкеДоступно; 
	
КонецПроцедуры

&НаСервере
Функция ДействиеДоступноНаТекущемЭтапе(ДопДействия, Действие)
	
	ЕстьДействие = ДопДействия.Получить(Действие);
	Если ЕстьДействие = Неопределено Тогда
		ДействиеДоступно = Ложь;
	Иначе 
		ДействиеДоступно = Истина;
	КонецЕсли;
			
	Возврат ДействиеДоступно;
	
КонецФункции
	
&НаКлиенте
Функция СтруктураКомандыФормы(Команда)
	
	ИмяКоманды      = Команда.Имя;
	//АдресНастроек   = Форма.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд;
	//ОписаниеКоманды = ПодключаемыеКомандыКлиентПовтИсп.ОписаниеКоманды(ИмяКоманды, АдресНастроек);
	
	ПараметрыФормы = Новый Структура("ИмяИни", "ТранспортнаяНакладная"); 
	
	ПараметрыВыполнения = ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды();
	ПараметрыВыполнения.ОписаниеКоманды         = Новый Структура("ПараметрыФормы", ПараметрыФормы); //ОписаниеКоманды);
	ПараметрыВыполнения.Форма                   = ЭтаФорма;
	ПараметрыВыполнения.Источник                = Объект;
	ПараметрыВыполнения.ЭтоФормаОбъекта         = ТипЗнч(ЭтаФорма) = Тип("ДанныеФормыСтруктура");
	// Служебные параметры.
	ПараметрыВыполнения.ТребуетсяЗапись         = Истина;
	ПараметрыВыполнения.ТребуетсяПроведение     = Ложь;
	ПараметрыВыполнения.ТребуетсяРаботаСФайлами = Ложь; //ОписаниеКоманды.ТребуетсяРаботаСФайлами;
	
	Возврат ПараметрыВыполнения;
	
	//ПродолжитьВыполнениеКоманды(ПараметрыВыполнения);

КонецФункции

&НаКлиенте
Процедура СБИС_ПослеАутентификации(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		ОбменДаннымиСБИС(Параметры.Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросОЗаписиДанных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
        ЗаписатьДанныеДокумента();
		
		// продолжим выполнение команды
		ОбменДаннымиСБИС(ДополнительныеПараметры.ИмяКоманды); 
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменДаннымиСБИС(ИмяКоманды)
	
	// проверка что все изменения записаны
	Если Объект.Ссылка.Пустая()
		Или ЭтаФорма.Модифицированность Тогда 
		
		ТекстВопроса =
			НСтр("ru = 'Перед выполнением обмена требуется сохранить документ. Записать данные?';
				|en = 'Do you want to save changes ?'"); 
		
		//ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВопроса, ТекущиеДанные.Наименование);
		
		ДополнительныеПараметры = Новый Структура("ИмяКоманды", ИмяКоманды);
		
		Оповещение = Новый ОписаниеОповещения("ПослеВопросОЗаписиДанных", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);		
	    Возврат; 	
					
	КонецЕсли;	
	
	МассивДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПроверятьСОХ",            Грузоотправитель_НеЯвляетсяОтправителем);
	ДополнительныеПараметры.Вставить("ПроверятьПоляОтгрузчика", Не Грузоотправитель_ОсуществляетОтгрузку);
	
	Saby_ТНОбщегоНазначенияКлиент.ВыполнитьКомандуСбис(ЭтаФорма, ИмяКоманды, МассивДокументов, ДополнительныеПараметры);  
		
КонецПроцедуры

&НаСервере
Функция СтруктураИзмененийНачЗаполнение()

	Структура = Новый Структура;
	Структура.Вставить("НовыйОтправитель", Ложь);
	Структура.Вставить("НовыйПолучатель",  Ложь);
	Структура.Вставить("НовыйПеревозчик",  Ложь);
	Структура.Вставить("ДоставитьДо",    Дата(1,1,1));
	
	Возврат Структура;
	
КонецФункции
	
&НаСервере
Функция ТекстЗапросаТранспортнаяНакладная()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТранспортнаяНакладная.Ссылка КАК Ссылка,
	|	ТранспортнаяНакладная.АвтомобильВместимостьВКубическихМетрах КАК АвтомобильВместимость,
	|	ТранспортнаяНакладная.АвтомобильГосударственныйНомер КАК АвтомобильГосНомер,
	|	ТранспортнаяНакладная.АвтомобильГрузоподъемностьВТоннах КАК АвтомобильГрузоподъемность,
	|	ТранспортнаяНакладная.АвтомобильМарка КАК АвтомобильМарка,
	|	ТранспортнаяНакладная.АвтомобильТип КАК АвтомобильТип,
	|	ТранспортнаяНакладная.АдресДоставки КАК АдресДоставки,
	|	ТранспортнаяНакладная.АдресДоставкиЗначение КАК АдресДоставкиЗначение,
	|	ТранспортнаяНакладная.АдресПогрузки КАК АдресПогрузки,
	|	ТранспортнаяНакладная.АдресПогрузкиЗначение КАК АдресПогрузкиЗначение,
	|	ТранспортнаяНакладная.Водитель КАК Водитель,
	|	ТранспортнаяНакладная.УдостоверениеНомер КАК УдостоверениеНомер,
	|	ТранспортнаяНакладная.УдостоверениеСерия КАК УдостоверениеСерия,
	|	ТранспортнаяНакладная.Прицеп КАК Прицеп,
	|	ТранспортнаяНакладная.ГосударственныйНомерПрицепа КАК ГосНомерПрицепа,
	|	ТранспортнаяНакладная.Грузоотправитель КАК Грузоотправитель,
	|	ТранспортнаяНакладная.Грузополучатель КАК Грузополучатель,
	|	ТранспортнаяНакладная.ЗаказчикПеревозки КАК ЗаказчикПеревозки,
	|	ТранспортнаяНакладная.МассаБрутто КАК МассаБрутто,
	|	ТранспортнаяНакладная.МассаНетто КАК МассаНетто,
	|	ТранспортнаяНакладная.Организация КАК Организация,
	|	ТранспортнаяНакладная.Перевозчик КАК Перевозчик,
	|	ТранспортнаяНакладная.СрокДоставки КАК ДатаДоставки,
	|	ТранспортнаяНакладная.ВидПеревозки КАК ВидПеревозки
	|ИЗ
	|	Документ.ТранспортнаяНакладная КАК ТранспортнаяНакладная
	|ГДЕ
	|	ТранспортнаяНакладная.Ссылка = &Ссылка";

	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаРеализация()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	РеализацияТоваровУслуг.АдресДоставкиЗначение КАК АдресДоставкиЗначение,
	|	РеализацияТоваровУслуг.Валюта КАК Валюта,
	|	РеализацияТоваровУслуг.Грузоотправитель КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.Грузополучатель КАК Грузополучатель,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	|	РеализацияТоваровУслуг.ВремяДоставкиС КАК ВремяДоставкиС,
	|	РеализацияТоваровУслуг.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	РеализацияТоваровУслуг.ЕстьМаркируемаяПродукцияГИСМ КАК ЕстьМаркируемаяПродукцияГИСМ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ЗаполнениеДанныхПоЮрЛицам(Структура, ДанныеСтруктурой)
	
	// Отправитель
	Если ЗначениеЗаполнено(ДанныеСтруктурой.Грузоотправитель) Тогда 		
		НовыйОтправитель = ДанныеСтруктурой.Грузоотправитель;			
	Иначе // Организация 	
		НовыйОтправитель = ДанныеСтруктурой.Организация;		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(НовыйОтправитель) Тогда 		
		Объект.Отправитель         = НовыйОтправитель;
		Структура.НовыйОтправитель = Истина;
	КонецЕсли;
	
	// Получатель 
	Если ЗначениеЗаполнено(ДанныеСтруктурой.Грузополучатель) Тогда 			
		НовыйПолучатель = ДанныеСтруктурой.Грузополучатель;		
	Иначе // Контрагент	
		НовыйПолучатель = ДанныеСтруктурой.Контрагент;			
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(НовыйПолучатель) Тогда 		
		Объект.Получатель         = НовыйПолучатель;
		Структура.НовыйПолучатель = Истина;
	КонецЕсли;
	
	// Заказчик
	Если ДанныеСтруктурой.Свойство("ЗаказчикПеревозки") 
		И ЗначениеЗаполнено(ДанныеСтруктурой.ЗаказчикПеревозки) Тогда 
		
		Объект.Заказчик = ДанныеСтруктурой.ЗаказчикПеревозки;
		// договора нет		
	КонецЕсли;
	
	// Перевозчик
	Если ДанныеСтруктурой.Свойство("Перевозчик") 
		И ЗначениеЗаполнено(ДанныеСтруктурой.Перевозчик) Тогда 
		
		НовыйПеревозчик = ДанныеСтруктурой.Перевозчик;
		Если ЗначениеЗаполнено(НовыйПеревозчик) Тогда 		
			Объект.Перевозчик         = НовыйПеревозчик;
			Структура.НовыйПеревозчик = Истина;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеДанныхПоВодителямИТС(ДанныеСтруктурой)
	
	Объект.Прицепы.Очистить();
	Объект.Водители.Очистить();
		
	// Авто		
	СтруктураАвто = Неопределено;
	Если ДанныеСтруктурой.Свойство("АвтомобильМарка") 
		И ЗначениеЗаполнено(ДанныеСтруктурой.АвтомобильГосНомер) Тогда
			
			СтруктураАвто = Saby_ТНОбщегоНазначенияСервер.СтруктураДанныхТС();
					
			СтруктураАвто.РегНомер         = ДанныеСтруктурой.АвтомобильГосНомер;
			СтруктураАвто.Марка            = ДанныеСтруктурой.АвтомобильМарка;
			СтруктураАвто.Тип              = ДанныеСтруктурой.АвтомобильТип;
			СтруктураАвто.Вместимость      = ДанныеСтруктурой.АвтомобильВместимость;
			СтруктураАвто.Грузоподъемность = ДанныеСтруктурой.АвтомобильГрузоподъемность;
			
			СтруктураАвто.Вставить("ОснованиеВладения", Новый Массив);
			
	КонецЕсли;	
	
	// Прицепы
	МассивПрицепы = Новый Массив;
	Если ДанныеСтруктурой.Свойство("Прицеп") 
		И ЗначениеЗаполнено(ДанныеСтруктурой.ГосНомерПрицепа) Тогда 
		
		СтруктураПрицеп = Saby_ТНОбщегоНазначенияСервер.СтруктураДанныхТС();
		
		СтруктураПрицеп.Вставить("ОснованиеВладения", Новый Массив);
		
		// поиск
		СтруктураПрицеп.Название = ДанныеСтруктурой.Прицеп;
		СтруктураПрицеп.РегНомер = ДанныеСтруктурой.ГосНомерПрицепа; 
		
		МассивПрицепы.Добавить(СтруктураПрицеп);
		
	КонецЕсли;
	
	Если СтруктураАвто <> Неопределено
		Или МассивПрицепы.Количество() Тогда  
		
		СтруктураАвто.Вставить("Прицеп", МассивПрицепы);		
		ДанныеВсехТС = Saby_ТНОбщегоНазначенияСервер.ТСИПрицепыИзБазы(СтруктураАвто);
			
		Если СтруктураАвто <> Неопределено Тогда
					
			Объект.Отправитель_ТранспортноеСредство = Saby_ТНОбщегоНазначенияСервер.ТСИлиПрицепПослеЗагрузки(
				СтруктураАвто, 
				ДанныеВсехТС);
			
		КонецЕсли;
		
		Если МассивПрицепы.Количество() Тогда 	
			
			НС = Объект.Прицепы.Добавить();
			
			НС.Прицеп = Saby_ТНОбщегоНазначенияСервер.ТСИлиПрицепПослеЗагрузки(
				МассивПрицепы[0], 
				ДанныеВсехТС, 
				Истина);
				
	    КонецЕсли;
			
	КонецЕсли;	
		
	// Водители
	Если ДанныеСтруктурой.Свойство("Водитель") 
		И ЗначениеЗаполнено(ДанныеСтруктурой.Водитель) Тогда 
		
		Если Объект.Водители.Количество() Тогда 
			Объект.Водители.Очистить();
		КонецЕсли;	
		
		ДанныеВодитель = Saby_ТНОбщегоНазначенияСервер.СтруктураДанныхВодителя();
		
		ФИО = СтрРазделить(ДанныеСтруктурой.Водитель, " ", Ложь);		
		
		ДанныеВодитель.Фамилия  = ?(ФИО.Количество(),     ФИО[0], "");
		ДанныеВодитель.Имя      = ?(ФИО.Количество() = 2, ФИО[1], "");;
		ДанныеВодитель.Отчество = ?(ФИО.Количество() = 3, ФИО[2], "");;
		
		ДанныеВодитель.ВУ.Номер  = ДанныеСтруктурой.УдостоверениеНомер;
		ДанныеВодитель.ВУ.Серия  = ДанныеСтруктурой.УдостоверениеСерия;
		
		НС = Объект.Водители.Добавить();
		НС.Водитель = Saby_ТНОбщегоНазначенияСервер.ДанныеВодителя(ДанныеВодитель);
		
	КонецЕсли;	
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДесериализоватьОшибки(Ошибки)
	Возврат ЗначениеИзСтрокиВнутр(Ошибки);	
КонецФункции

&НаСервереБезКонтекста
Функция АдресВФорматеОбмена(Знач ЗначениеКИ)
		
	Возврат Saby_ТНОбщегоНазначенияСервер.АдресВФорматеОбмена(ЗначениеКИ);

КонецФункции

&НаКлиенте
Процедура ИзменитьТекстПодсказкиГрузоотправитель_ОсуществляетОтгрузку()
	Если Грузоотправитель_ОсуществляетОтгрузку Тогда
		ТекстПодсказки = "Отгрузку осуществляет грузоотправитель";
	Иначе
		ТекстПодсказки = "Отгрузку осуществляет лицо, отличное от грузоотправителя";
	КонецЕсли;	
	Элементы.Грузоотправитель_ОсуществляетОтгрузку.Подсказка = ТекстПодсказки;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьСменуЭтапаИлиСостояния(Ссылка, НовыйЭтап = "")
	
	ДанныеСостояния = РегистрыСведений.Saby_Состояние.ПрочитатьПоОбъекту(Ссылка);	
	Если ТипЗнч(ДанныеСостояния) = Тип("РегистрСведенийВыборка.Saby_Состояние") Тогда 
		
		Если ПустаяСтрока(НовыйЭтап) Тогда  
			НовыйЭтап = СокрЛП(ДанныеСостояния.АктивныйЭтап);
		КонецЕсли;
		
		Параметры = Новый Структура;
		Параметры.Вставить("ИД",           ДанныеСостояния.UID);
		Параметры.Вставить("АктивныйЭтап", НовыйЭтап);
		Параметры.Вставить("Ссылка",       Ссылка);
		Параметры.Вставить("Загрузка",     Ложь);
		Параметры.Вставить("Состояние",    ДанныеСостояния.Состояние);
		Параметры.Вставить("СбисИД",       ""); // сброс "Не просмотрен"
		
		Документы.Saby_ТранспортнаяНакладная.УстановитьИДИСтатус(Параметры); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановкаВидимостиИРасчетныхРеквизитов(ОбновитьДанныеПоОшибкам = Ложь)
	
	ЭтаФорма.Прочитать();
	ЗаполнитьРасчетныеРеквизиты();
	ОбновитьВидимостьИДоступностьЭлементов();
	
	Если ОбновитьДанныеПоОшибкам Тогда
		Если КоличествоОшибок > 0 Тогда
			ОбновитДанныеПоОшибкамНаСервере();
		КонецЕсли;
	Иначе
		Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АктивныйЭтапДокумента(Ссылка)
	
	ИндексКартинки = 0;
	АктивныйЭтап   = "";
	
	//ToDo: Вынести в общий модуль
	ДанныеСостояния = РегистрыСведений.Saby_Состояние.ПрочитатьПоОбъекту(Ссылка);
	Если ДанныеСостояния <> Неопределено Тогда 	
		
		АктивныйЭтап = ДанныеСостояния.АктивныйЭтап;
		
		Состояние = ДанныеСостояния.Состояние;
				
		Если ЗначениеЗаполнено(Состояние) Тогда
			ИндексКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Состояние, "ИндексКартинки");			
		КонецЕсли;	
			
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("АктивныйЭтап",   АктивныйЭтап);
	Структура.Вставить("ИндексКартинки", ИндексКартинки);	
	Структура.Вставить("Состояние",      СокрЛП(Состояние));
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьДанныеДокумента()
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", 
		?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));	
		
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура УстановкаСпискаДоступныхТиповКИ()
	
	// Типы КИ
	СписокЗначенийКИ = Новый СписокЗначений;
	СписокЗначенийКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон, "Телефон");
	СписокЗначенийКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "Адрес электронной почты");
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("КонтактныеДанныеТип");
	МассивЭлементов.Добавить("КонтактныеДанные_ПолучательТип");
	МассивЭлементов.Добавить("КонтактныеДанные_ПеревозчикТип");
	МассивЭлементов.Добавить("КонтактныеДанные_ВладелецТип");
	МассивЭлементов.Добавить("КонтактныеДанные_ОтгрузкаТип");
	
	Для Каждого ЭлементФормы Из МассивЭлементов Цикл
		Для Каждого ЭлементСписка Из СписокЗначенийКИ Цикл  
		   Элементы[ЭлементФормы].СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	   КонецЦикла;		
	КонецЦикла;
	   
КонецПроцедуры
//+
&НаКлиенте
Процедура ОбновитьСвязаннуюССоставителемИнформацию()
	
	Объект.Отгрузчик = Объект.Составитель;
	
	ОбновитьДанныеЮрЛицНаСервере("Отгрузчик");
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитДанныеПоОшибкамНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитДанныеПоОшибкамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитДанныеПоОшибкамНаСервере(Ошибки = Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПроверятьСОХ",            Грузоотправитель_НеЯвляетсяОтправителем);
	ДополнительныеПараметры.Вставить("ПроверятьПоляОтгрузчика", Не Грузоотправитель_ОсуществляетОтгрузку);
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитДанныеПоОшибкам(
		ЭтаФорма,
		Ошибки,
		ДополнительныеПараметры
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВнешнийВидЭлементовОшибок()
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОтветственногоНаОсновании()
	
	Элементы.Отгрузка_ОтветственныйНаОсновании.СписокВыбора.Добавить("Должностные обязанности");
	Элементы.Отгрузка_ОтветственныйНаОсновании.СписокВыбора.Добавить(
		Справочники.Saby_ДокументыТрН.ПустаяСсылка(), "Документ"
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеЮрЛицНаСервере(Роли)
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьДанныеЮрЛиц(ЭтаФорма, Роли);
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВодителейДляВебКлиента()
	
	#Если ВебКлиент Тогда
		
		Элементы.Группа_Водители.Поведение                = ПоведениеОбычнойГруппы.Авто;
		Элементы.Группа_Водители.РастягиватьПоГоризонтали = Истина;
		Элементы.Группа_Водители.ОтображатьЗаголовок      = Ложь;
		Элементы.ВодителиСтрокой.Видимость                = Ложь;
		
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьВСбис(Команда)
	
	ОбменДаннымиСБИС(Команда.Имя);
	
КонецПроцедуры                    

&НаКлиенте
Процедура ОткрытьВСбис(Команда)
	
	ОбменДаннымиСБИС(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусы(Команда)
	
	ОбменДаннымиСБИС(Команда.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументИзСбис(Команда)
	 
	ОбменДаннымиСБИС(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтоимость(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отправитель",      Объект.Отправитель);
	ПараметрыФормы.Вставить("Перевозчик",       Объект.Перевозчик);
	ПараметрыФормы.Вставить("ЭтоСогласование",  Ложь);
	ПараметрыФормы.Вставить("СсылкаНаДокумент", Объект.Ссылка);

	ОткрытьФорму(
		"Документ.Saby_ТранспортнаяНакладная.Форма.ФормаИзмененияСогласованияСтоимости",
		ПараметрыФормы, 
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьСтоимость(Команда)
	
	// Оповещение
	// взять данные согласования пришедшего в ДТ
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отправитель",         Объект.Отправитель);
	ПараметрыФормы.Вставить("ЭтоСогласование",     Истина);
	ПараметрыФормы.Вставить("СсылкаНаДокумент",    Объект.Ссылка);
	
	ОткрытьФорму(
		"Документ.Saby_ТранспортнаяНакладная.Форма.ФормаИзмененияСогласованияСтоимости",
	    ПараметрыФормы, 
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
		
КонецПроцедуры

&НаКлиенте
Процедура Переадресовка(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭтоУведомление",   Ложь);
	ПараметрыФормы.Вставить("СсылкаНаДокумент", Объект.Ссылка);
	
	ОткрытьФорму(
		"Документ.Saby_ТранспортнаяНакладная.Форма.ФормаПереадресовка",
	    ПараметрыФормы, 
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс
	);

КонецПроцедуры

&НаКлиенте
Процедура ПереадресовкаУведомление(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭтоУведомление",   Истина);
	ПараметрыФормы.Вставить("СсылкаНаДокумент", Объект.Ссылка);

	ОткрытьФорму(
		"Документ.Saby_ТранспортнаяНакладная.Форма.ФормаПереадресовка",
	    ПараметрыФормы, 
		ЭтаФорма,,,,
		,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс
	);

КонецПроцедуры

&НаКлиенте
Процедура ЗаменаВодителя(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СсылкаНаДокумент", Объект.Ссылка);
	
	ОткрытьФорму(
		"Документ.Saby_ТранспортнаяНакладная.Форма.ФормаЗаменыВодителяИлиТС",
		ПараметрыФормы, 
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступныеДействия(Команда)
	ОбновитьДоступностьДополнительныхКоманд();
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Saby_ТНОбщегоНазначенияКлиент.СоздатьИОткрытьПечатнуюФормуЭТрН(Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЕщеИзменения(Команда)
	
	ПолучитьЕщеИзмененияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьВсеСобытия(Команда)
	
	ПросмотретьВсеСобытияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОшибки(Команда)
	
	Элементы.ФормаПоказатьСкрытьОшибки.Пометка = Не Элементы.ФормаПоказатьСкрытьОшибки.Пометка;
	
	ОбновитьВнешнийВидЭлементовОшибок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоОшибкам(Команда)
	
	ПроцедураОбновитДанныеПоОшибкамНаКлиенте = Новый ОписаниеОповещения(
		"ОбновитДанныеПоОшибкамНаКлиенте",
		ЭтотОбъект
	);
	
	Saby_ТНОбщегоНазначенияКлиент.ПроверитьМодифицированностьИПродолжитьВыполнение(
		ПроцедураОбновитДанныеПоОшибкамНаКлиенте, Истина
	);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы 

#Область ИсторияСобытий

&НаСервере
Процедура ОбновитьСостояниеИзменений()
	
	Результат = РегистрыСведений.Saby_ДанныеДинамическихТитулов.КоличествоИзменений(Объект.Ссылка);
	
	КоличествоНепросмотренныхИзменений = Результат.Непросмотренные;
	ВсегоИзменений                     = Результат.ВсегоИзменений;
	
	Элементы.ИсторияСобытийПолучитьЕщеИзменения.Доступность = ВсегоИзменений > ИсторияСобытий.Количество();
	Элементы.ИсторияСобытийПросмотретьВсеСобытия.Доступность = КоличествоНепросмотренныхИзменений > 0;
	
	ОбновитьКартинкуЛенты(КоличествоНепросмотренныхИзменений, Элементы.Страница_Лента);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЕщеИзмененияНаСервере(СледующиеИзменения = Истина)
	
	ПериодДо = КонецДня(ТекущаяДатаСеанса());
	Если СледующиеИзменения Тогда
		Если ИсторияСобытий.Количество() > 0 Тогда
			ПериодДо = ИсторияСобытий[0].Период;
		КонецЕсли;
	Иначе
		ИсторияСобытий.Очистить();
	КонецЕсли;
	
	МассивИзменений = РегистрыСведений.Saby_ДанныеДинамическихТитулов.СледующиеИзменения(Объект.Ссылка, ПериодДо);
	
	Для Каждого СтруктураИзменения Из МассивИзменений Цикл
		СтрокаСобытия = ИсторияСобытий.Вставить(0);
		ЗаполнитьЗначенияСвойств(СтрокаСобытия, СтруктураИзменения);
		ЗаполнитьНаименованиеТитула(СтрокаСобытия);
	КонецЦикла;
	
	ОбновитьСостояниеИзменений();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаименованиеТитула(СтрокаСобытия)
	
	Если СтрокаСобытия.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.Переадресовка Тогда
		СтрокаСобытия.НаименованиеТитула = "Переадресовка";
	ИначеЕсли СтрокаСобытия.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.ПереадресовкаУведомление Тогда
		СтрокаСобытия.НаименованиеТитула = "ПереадресовкаУведомление";
	ИначеЕсли СтрокаСобытия.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.ЗаменаВодителяТС Тогда
		СтрокаСобытия.НаименованиеТитула = "ЗаменаВодителяТС";
	ИначеЕсли СтрокаСобытия.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.ИзменениеСтоимости Тогда
		СтрокаСобытия.НаименованиеТитула = "ИзменениеСтоимости";
	ИначеЕсли СтрокаСобытия.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.СогласованиеСтоимости Тогда
		СтрокаСобытия.НаименованиеТитула = "СогласованиеСтоимости";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыРасшифровки(ИдентификаторТитула, НаименованиеТитула)
	
	РезультатФункции = Новый Структура;
	
	Если НаименованиеТитула = "Переадресовка" Или НаименованиеТитула = "ПереадресовкаУведомление" Тогда
		
		РезультатФункции.Вставить("ИмяФормы",            "ФормаПереадресовка");
		РезультатФункции.Вставить("СсылкаНаДокумент",    Объект.Ссылка);
		РезультатФункции.Вставить("ИдентификаторТитула", ИдентификаторТитула);
		РезультатФункции.Вставить("ЭтоУведомление",      НаименованиеТитула = "ПереадресовкаУведомление");
		
	ИначеЕсли НаименованиеТитула = "ЗаменаВодителяТС" Тогда
		
		РезультатФункции.Вставить("ИмяФормы",            "ФормаЗаменыВодителяИлиТС");
		РезультатФункции.Вставить("СсылкаНаДокумент",    Объект.Ссылка);
		РезультатФункции.Вставить("ИдентификаторТитула", ИдентификаторТитула);
		
	ИначеЕсли НаименованиеТитула = "ИзменениеСтоимости" Или НаименованиеТитула = "СогласованиеСтоимости" Тогда
		
		РезультатФункции.Вставить("ИмяФормы",            "ФормаИзмененияСогласованияСтоимости");
		РезультатФункции.Вставить("СсылкаНаДокумент",    Объект.Ссылка);
		РезультатФункции.Вставить("ИдентификаторТитула", ИдентификаторТитула);
		РезультатФункции.Вставить("Отправитель",         Объект.Отправитель);
		РезультатФункции.Вставить("Перевозчик",          Объект.Перевозчик);
		РезультатФункции.Вставить("ЭтоСогласование",     НаименованиеТитула = "СогласованиеСтоимости");
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуТитула(ИдентификаторТитула, НаименованиеТитула)
	
	ПараметрыФормы = ПараметрыФормыРасшифровки(ИдентификаторТитула, НаименованиеТитула);
	
	ОткрытьФорму(
		"Документ.Saby_ТранспортнаяНакладная.Форма." + ПараметрыФормы.ИмяФормы,
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыТитула(ИдентификаторТитула)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИдентификаторТитула", ИдентификаторТитула);
	
	НайденныеСтроки = ИсторияСобытий.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.Просмотрено Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока.Просмотрено = Истина;
		
		КоличествоНепросмотренныхИзменений = КоличествоНепросмотренныхИзменений - 1;
		
	КонецЦикла;
	
	Элементы.ИсторияСобытийПросмотретьВсеСобытия.Доступность = КоличествоНепросмотренныхИзменений > 0;
	
	ОбновитьКартинкуЛенты(КоличествоНепросмотренныхИзменений, Элементы.Страница_Лента);
	
КонецПроцедуры

&НаСервере
Процедура ПросмотретьВсеСобытияНаСервере()
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	
	РегистрыСведений.Saby_ДанныеДинамическихТитулов.Просмотреть(МассивДокументов);
	
	ПолучитьЕщеИзмененияНаСервере(Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКартинкуЛенты(КоличествоНепрочитано, Элемент)
	
	Если КоличествоНепрочитано > 0 Тогда
		Элемент.Картинка = БиблиотекаКартинок.Оповещения;
	Иначе
		Элемент.Картинка = Новый Картинка;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ИсторияСобытий
