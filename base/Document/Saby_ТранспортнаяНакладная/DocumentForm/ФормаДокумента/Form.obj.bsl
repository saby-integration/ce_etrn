	   
#Область ОбработчикиСобытийФормы
	   	   
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриЧтенииСозданииПослеЗаписиНаСервере();
	Иначе
		Saby_ТНОбщегоНазначенияСервер.УбратьПризнакНеПросмотрен(Объект.Ссылка);
	КонецЕсли;
	
	ОграничитьТипыДокументовОснований();
	
	// Решение проблемы с тем что значения типов КИ 
	// имеют разные идентификаторы в различных конфигурациях 
	УстановкаСпискаДоступныхТиповКИ();
	
	ЗаполнитьСписокВыбораОтветственногоНаОсновании();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	// установим отборы по таблицам для корректного отображения информации	
	УстановитьОтборыПоТаблицам();
	ИзменитьТекстПодсказкиГрузоотправитель_ОсуществляетОтгрузку();
	ОповеститьОбИзменении(Объект.Ссылка);
	
	ОтобразитьВодителейДляВебКлиента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Saby_ТНОбщегоНазначенияКлиент.ОбработатьОповещенияДляФормы(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииПослеЗаписиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗаполнитьЮрЛицоКопированием("ВладелецОбъекта", "Отправитель");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МассивРеквизитов = РеквизитыДляРазделенияДатыИВремя();
	Saby_ТНОбщегоНазначенияСервер.СобратьДатуВремяПоРеквизитам(ЭтаФорма, МассивРеквизитов, ТекущийОбъект);
	
	ТекущийОбъект.Составитель_НаОснованииДокумент = ЭтаФорма.Оформитель_Основание;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриЧтенииСозданииПослеЗаписиНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОтборОтметокПоТипу();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьВСбис(Команда)
	
	ОбменДаннымиСБИС(Команда.Имя);
	
КонецПроцедуры                    

&НаКлиенте
Процедура ОбновитьДокументИзСбис(Команда)
	 
	ОбменДаннымиСБИС(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтоимость(Команда)
		
	ОткрытьФормуТитула("ИзменениеСтоимости");
		 	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьСтоимость(Команда)
	
	ОткрытьФормуТитула("СогласованиеСтоимости");
	
КонецПроцедуры

&НаКлиенте
Процедура Переадресовка(Команда)
	
	ОткрытьФормуТитула("Переадресовка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереадресовкаУведомление(Команда)
	
	ОткрытьФормуТитула("ПереадресовкаУведомление");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаВодителя(Команда)
	
	ОткрытьФормуТитула("ЗаменаВодителяТС"); 
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
	ПроцедураОткрытьПечатнуюФорму = Новый ОписаниеОповещения(
		"ОткрытьПечатнуюФорму",
		ЭтотОбъект);
	
	Saby_ТНОбщегоНазначенияКлиент.ПроверитьМодифицированностьИПродолжитьВыполнение(
		ПроцедураОткрытьПечатнуюФорму);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОшибки(Команда)
	
	Элементы.ФормаПоказатьСкрытьОшибки.Пометка = Не Элементы.ФормаПоказатьСкрытьОшибки.Пометка;
	
	ОбновитьВнешнийВидЭлементовОшибок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоОшибкам(Команда)
	
	ПроцедураОбновитьДанныеПоОшибкамНаКлиенте = Новый ОписаниеОповещения(
		"ОбновитьДанныеПоОшибкамНаКлиенте",
		ЭтотОбъект);
	
	Saby_ТНОбщегоНазначенияКлиент.ПроверитьМодифицированностьИПродолжитьВыполнение(
		ПроцедураОбновитьДанныеПоОшибкамНаКлиенте, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыгрузкуПоДаннымГрузоотправителя(Команда)
	
	ЭтаФорма.Модифицированность = Истина;
	
	Объект.Выгрузка_ДатаВремя         = Объект.Отправитель_ДоставитьДо;
	Объект.Выгрузка_ДатаВремяПрибыл   = Объект.Отправитель_ДоставитьДо;
	Объект.Выгрузка_ДатаВремяУбыл     = Объект.Отправитель_ДоставитьДо;

	Объект.Выгрузка_КоличествоМест    = Объект.Погрузка_КоличествоМест;
	Объект.Выгрузка_МассаМетодРасчета = Объект.Погрузка_МассаМетодРасчета;
	Объект.Выгрузка_Состояние         = Объект.Погрузка_Состояние;
	Объект.Выгрузка_МассаБрутто       = Saby_ТНОбщегоНазначенияСервер.ЧислоИзСтроки(Объект.Погрузка_Масса);
	
	ОбновитьДатыНаФорме();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы 

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ДокументОснование

&НаКлиенте
Процедура ДекорацияДокументОснование(Элемент)
		
	Saby_ТНОбщегоНазначенияКлиент.ДокументОснованиеНажатие(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДокументОснование(Команда)
	
	Saby_ТНОбщегоНазначенияКлиент.ОчиститьДокументОснование(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокументовОснований(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.Saby_ВыборТиповЭПД", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ДокументОснование

#Область ЮрЛица

&НаКлиенте
Процедура ОтправительСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПроцедураПослеИзмененияОтправителя = Новый ОписаниеОповещения("ПослеИзмененияОтправителя", ЭтотОбъект);
	
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(Элемент.Имя, Элемент.Имя);
	ПараметрыРеквизитаФормы.ТолькоПросмотр = Элементы.Страница_Основное.ТолькоПросмотр;
	
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(
		ЭтаФорма, 
		"Отправитель", 
		ПараметрыРеквизитаФормы, 
		ПроцедураПослеИзмененияОтправителя);
				
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияОтправителя(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЭтаФорма.Грузоотправитель_ОсуществляетОтгрузку Тогда
		ЗаполнитьЮрЛицоКопированием("Отгрузчик", "Отправитель");
	КонецЕсли;
	
	ОбновитьАдресаПогрузкиВыгрузки("Отправитель");
	
КонецПроцедуры

&НаКлиенте
Процедура Отправитель_ТелефонПриИзменении(Элемент)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Отправитель");
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонПриИзменении(ЭтаФорма, Отправитель_Телефон, РолиЮрЛиц, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправитель_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Отправитель"));
	ПараметрыВыбораТелефона.Вставить("Значение", Отправитель_Телефон);
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонНачалоВыбора(ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставительСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПроцедураПослеИзмененияСоставителя = Новый ОписаниеОповещения("ПослеИзмененияСоставителя", ЭтотОбъект);
	
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(Элемент.Имя, Элемент.Имя);
	ПараметрыРеквизитаФормы.ДополнительныеПоля = "Основание";
	ПараметрыРеквизитаФормы.ТолькоПросмотр = Элементы.Группа_Составитель.ТолькоПросмотр;
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(
		ЭтаФорма, "Оформитель", ПараметрыРеквизитаФормы, ПроцедураПослеИзмененияСоставителя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияСоставителя(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьЮрЛицоКопированием("Отгрузчик", "Оформитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПроцедураПослеИзмененияПолучателя = Новый ОписаниеОповещения("ПослеИзмененияПолучателя", ЭтотОбъект);
	
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(Элемент.Имя, Элемент.Имя);
	ПараметрыРеквизитаФормы.ТолькоПросмотр = Элементы.Страница_Основное.ТолькоПросмотр
		Или Элементы.Группа_Грузополучатель.ТолькоПросмотр;
		
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(
		ЭтаФорма, 
		"Получатель", 
		ПараметрыРеквизитаФормы, 
		ПроцедураПослеИзмененияПолучателя);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияПолучателя(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьАдресаПогрузкиВыгрузки("Получатель");
		
КонецПроцедуры

&НаКлиенте
Процедура Получатель_ТелефонПриИзменении(Элемент)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Получатель");
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонПриИзменении(ЭтаФорма, Получатель_Телефон, РолиЮрЛиц, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Получатель_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Получатель"));
	ПараметрыВыбораТелефона.Вставить("Значение", Получатель_Телефон);
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонНачалоВыбора(ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(Элемент.Имя, Элемент.Имя);
	ПараметрыРеквизитаФормы.ТолькоПросмотр = Элементы.Страница_Основное.ТолькоПросмотр;
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(ЭтаФорма, "Перевозчик", ПараметрыРеквизитаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик_ТелефонПриИзменении(Элемент)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Перевозчик");
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонПриИзменении(ЭтаФорма, Перевозчик_Телефон, РолиЮрЛиц, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Перевозчик"));
	ПараметрыВыбораТелефона.Вставить("Значение", Перевозчик_Телефон);
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонНачалоВыбора(ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(Элемент.Имя, Элемент.Имя);
	ПараметрыРеквизитаФормы.ТолькоПросмотр = Элементы.Страница_Основное.ТолькоПросмотр;
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(ЭтаФорма, "Заказчик", ПараметрыРеквизитаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецОбъектаСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(Элемент.Имя, Элемент.Имя);
	ПараметрыРеквизитаФормы.ТолькоПросмотр = Элементы.Страница_Основное.ТолькоПросмотр;
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(ЭтаФорма, "ВладелецОбъекта", ПараметрыРеквизитаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Владелец_ТелефонПриИзменении(Элемент)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "ВладелецОбъекта");
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонПриИзменении(ЭтаФорма, ВладелецОбъекта_Телефон, РолиЮрЛиц, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Владелец_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль", Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "ВладелецОбъекта"));
	ПараметрыВыбораТелефона.Вставить("Значение", ВладелецОбъекта_Телефон);
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонНачалоВыбора(ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузчикСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(Элемент.Имя, Элемент.Имя);
	ПараметрыРеквизитаФормы.ТолькоПросмотр = Не Элементы.Группа_ТелОтгрузка.Доступность;
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(ЭтаФорма, "Отгрузчик", ПараметрыРеквизитаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_ТелефонПриИзменении(Элемент)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Отгрузчик");
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонПриИзменении(ЭтаФорма, Отгрузчик_Телефон, РолиЮрЛиц, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Отгрузчик"));
	ПараметрыВыбораТелефона.Вставить("Значение", Отгрузчик_Телефон);
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонНачалоВыбора(ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Грузоотправитель_ГрузополучательПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	
	ИмяРолиПолучатель = "Получатель";

	Если Грузоотправитель_Грузополучатель Тогда
		ЗаполнитьЮрЛицоКопированием(ИмяРолиПолучатель, "Отправитель");
	Иначе
		ОчиститьЮрЛицо(ИмяРолиПолучатель);
	КонецЕсли;
	
	ОбновитьАдресаПогрузкиВыгрузки(ИмяРолиПолучатель);
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура Грузоотправитель_ОсуществляетОтгрузкуПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	
	Если Не Грузоотправитель_НеЯвляетсяОтправителем Тогда
		
		Если Грузоотправитель_ОсуществляетОтгрузку Тогда
			ЗаполнитьЮрЛицоКопированием("Отгрузчик", "Отправитель");
		Иначе
			ОчиститьЮрЛицо("Отгрузчик");
		КонецЕсли;
				
	КонецЕсли;
	
	ИзменитьТекстПодсказкиГрузоотправитель_ОсуществляетОтгрузку();
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура Грузоотправитель_НеЯвляетсяОтправителемПриИзменении(Элемент)
	
	Если ОтправительСтрокой = "Заполнить" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Переключение недоступно. Необходимо заполнить поле Отправитель.";
		Сообщение.Сообщить();
		Грузоотправитель_НеЯвляетсяОтправителем = Не Грузоотправитель_НеЯвляетсяОтправителем;
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
	Если Не Грузоотправитель_НеЯвляетсяОтправителем Тогда
		
		ОчиститьЮрЛицо("Оформитель");
		ЭтаФорма.Оформитель_Основание = "";
		
	Иначе
		
		ЭтаФорма.Грузоотправитель_ОсуществляетОтгрузку = Ложь;
		
	КонецЕсли;
	
	ПослеИзмененияСоставителя(Неопределено, Неопределено);
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура Владелец_ТипПриИзменении(Элемент)
	
	Если СокрЛП(Объект.Владелец_Тип) <> "Неизвестен" Тогда
		Если ЗначениеЗаполнено(Объект.Владелец_НеизвестенПричина) Тогда 
			Объект.Владелец_НеизвестенПричина = "";	                        
		КонецЕсли;	 	
	КонецЕсли;	    
	
	Если СокрЛП(Объект.Владелец_Тип) = "Отправитель" Тогда
		ЗаполнитьЮрЛицоКопированием("ВладелецОбъекта", "Отправитель");
	Иначе
		ОчиститьЮрЛицо("ВладелецОбъекта");
	КонецЕсли;
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура Грузоотправитель_ЭкспедиторПриИзменении(Элемент)
	
	Если НЕ Объект.Отправитель_Экспедитор Тогда 
		ОчиститьЮрЛицо("Заказчик");
		Объект.Заказчик_Договор = "";
	КонецЕсли;
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

#КонецОбласти // ЮрЛица

#Область РаботаСКонтактнойИнформацией

&НаКлиенте
Процедура ОтборИнформацииПоКонтактнымДанным(ИмяТЧ, Значение)
			
	СтруктураЮрЛица = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(Объект.ДанныеЮрЛиц, Значение);
	
	СтруктураПоиска = Новый Структура;
	
	Если СтруктураЮрЛица.Заполнена Тогда 
		
		Роль = СтруктураЮрЛица.Роль;
		СтруктураПоиска.Вставить("КлючСтроки_ДанныеЮрЛиц", СтруктураЮрЛица.КлючСтроки);
		
	Иначе 
		
		Роль = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.Saby_РолиКонтрагентов." + Значение);
		
	КонецЕсли;
			
	СтруктураПоиска.Вставить("Роль", Роль);
	
	Элементы[ИмяТЧ].ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураПоиска);
					
КонецПроцедуры  

&НаКлиенте
Процедура ОбработатьНовуюСтрокуКонтактнойИнформации(ИмяТЧ)
	
	Роль = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.Saby_РолиКонтрагентов.ПустаяСсылка");
	
    Отбор = Новый Структура;
	Отбор.Вставить("Роль", Роль);
	
	НайденныеСтроки = Объект.КонтактныеДанные.НайтиСтроки(Отбор);
	Для Каждого Строка Из НайденныеСтроки Цикл 
		Строка.Роль                   = Элементы[ИмяТЧ].ОтборСтрок.Роль;
		Строка.КлючСтроки_ДанныеЮрЛиц = Элементы[ИмяТЧ].ОтборСтрок.КлючСтроки_ДанныеЮрЛиц;
	КонецЦикла;
				
КонецПроцедуры

&НаКлиенте
Процедура Погрузка_АдресНажатие(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбораАдреса = Новый Структура;
	ПараметрыВыбораАдреса.Вставить("Роль",     "Отправитель");
	ПараметрыВыбораАдреса.Вставить("Значение", Объект.АдресПогрузкиЗначение);
	
	Saby_ТНОбщегоНазначенияКлиент.АдресНачалоВыбора(ЭтаФорма, ПараметрыВыбораАдреса, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНажатие(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбораАдреса = Новый Структура;
	ПараметрыВыбораАдреса.Вставить("Роль",     "Получатель");
	ПараметрыВыбораАдреса.Вставить("Значение", Объект.АдресДоставкиЗначение);
	
	Saby_ТНОбщегоНазначенияКлиент.АдресНачалоВыбора(ЭтаФорма, ПараметрыВыбораАдреса, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // РаботаСКонтактнойИнформацией

#Область ТранспортныеСредства

&НаКлиенте
Процедура ТранспортноеСредствоСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	ПроцедураПослеОбновленияДанныхТранспортныхСредств = Новый ОписаниеОповещения(
		"ПослеОбновленияДанныхТранспортныхСредств",
		ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияКлиент.ТранспортноеСредствоСтрокойНажатие(
		ЭтаФорма,
		СтандартнаяОбработка,
		ПроцедураПослеОбновленияДанныхТранспортныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	Saby_ТНОбщегоНазначенияКлиент.ПрицепыСтрокойНажатие(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПроцедураПослеОбновленияДанныхТранспортныхСредств = Новый ОписаниеОповещения(
		"ПослеОбновленияДанныхТранспортныхСредств",
		ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияКлиент.ПрицепыВыбор(
		ЭтаФорма,
		ВыбраннаяСтрока,
		СтандартнаяОбработка,
		ПроцедураПослеОбновленияДанныхТранспортныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПроцедураПослеОбновленияДанныхТранспортныхСредств = Новый ОписаниеОповещения(
		"ПослеОбновленияДанныхТранспортныхСредств",
		ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияКлиент.ПрицепыПриНачалеРедактирования(
		ЭтаФорма,
		ПроцедураПослеОбновленияДанныхТранспортныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПослеУдаления(Элемент)
	
	ПослеОбновленияДанныхТранспортныхСредств(Неопределено, Неопределено);
	
КонецПроцедуры

#КонецОбласти // ТранспортныеСредства

#Область ВодителиПутевыеЛисты

&НаКлиенте
Процедура ВодителиПриАктивизацииСтроки(Элемент)
	
	Водители_УстановитьОтборПоВсемСвязаннымТаблицам();

КонецПроцедуры

&НаКлиенте
Процедура ВодителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтветственного = Saby_ТНОбщегоНазначенияСервер.СтруктураОтветственного(
		Объект.ОтветственныеЛица, "", ВыбраннаяСтрока);
	СтруктураОтветственного.Вставить("ТолькоПросмотр", Элементы.Страница_Основное.ТолькоПросмотр);
	
	Saby_ТНОбщегоНазначенияКлиент.НачатьРедактированиеОтветственногоЛица(ЭтаФорма, СтруктураОтветственного, "Водитель");

КонецПроцедуры

&НаКлиенте
Процедура Водители_УстановитьОтборПоВсемСвязаннымТаблицам()
	
    ТекущиеДанные = Элементы.Водители.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСтроки_ОтветственныеЛица", ТекущиеДанные.КлючСтроки);
		
		Отбор = Новый ФиксированнаяСтруктура(СтруктураПоиска);		
		Элементы.ПутевыеЛисты.ОтборСтрок = Отбор;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Водители.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.ОтветственныеЛица.НайтиПоИдентификатору(ИдСтроки);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			УдаляемыеКлючи_ОтветственныеЛица.Добавить(ТекДанные.КлючСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("УдалитьСвязанныеСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда  
				
		ТекДанные = Элементы.Водители.ТекущиеДанные;		
		ТекДанные.КлючСтроки = НовыйКлючСтроки("ОтветственныеЛица");
		
		// Переустановим отбор
		Водители_УстановитьОтборПоВсемСвязаннымТаблицам();
		
		Для Каждого СтруктураОтбора Из Элемент.ОтборСтрок Цикл
			Элемент.ТекущиеДанные[СтруктураОтбора.Ключ] = СтруктураОтбора.Значение;
		КонецЦикла;
		
		СтруктураОтветственного = Saby_ТНОбщегоНазначенияСервер.СтруктураОтветственного(
			Объект.ОтветственныеЛица, "", Элемент.ТекущаяСтрока);
		
		Saby_ТНОбщегоНазначенияКлиент.НачатьРедактированиеОтветственногоЛица(ЭтаФорма, СтруктураОтветственного, "Водитель");
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Водители", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не Копирование Тогда 
		ДобавитьКлючСвязиСтроки(Элемент.Имя, "Водители", Элемент.ТекущаяСтрока, НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ЭтаФорма.ТекущийЭлемент = Элементы.Водители;
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПослеУдаления(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьВодителейНаФорме(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти // ВодителиПутевыеЛисты 

&НаКлиенте
Процедура Группа_СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
		
	ОтборОтметокПоТипу();
	
КонецПроцедуры

#Область ТаблицаОшибок

&НаКлиенте
Процедура ТаблицаОшибокПриАктивизацииСтроки(Элемент)

	Saby_ТНОбщегоНазначенияКлиент.РасшифровкаЗаписиТаблицыОшибок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОшибокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Saby_ТНОбщегоНазначенияКлиент.РасшифровкаЗаписиТаблицыОшибок(ЭтаФорма);

КонецПроцедуры

#КонецОбласти // ТаблицаОшибок

&НаКлиенте
Процедура Отгрузка_ОтветственныйНаОснованииПриИзменении(Элемент)
	
	ПустаяСсылкаНаДокумент = ПредопределенноеЗначение("Справочник.Saby_ДокументыЭПД.ПустаяСсылка");
	
	Если Объект.Отгрузка_ОтветственныйНаОсновании = ПустаяСсылкаНаДокумент Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор",              Новый Структура);
		ПараметрыФормы.Вставить("РежимВыбора",        Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		
		ПараметрыФормы.Отбор.Вставить(
			"Тип", ПредопределенноеЗначение("Перечисление.Saby_ТипыДокумента.ОтветственныйНаОсновании"));
		
		ОткрытьФорму(
			"Справочник.Saby_ДокументыЭПД.ФормаВыбора",
			ПараметрыФормы,
			Элемент, , , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);  
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_ОтветственныйНаОснованииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		Объект.Отгрузка_ОтветственныйНаОсновании = ВыбранноеЗначение;
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отгрузка_ОтветственныйНаОснованииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.Отгрузка_ОтветственныйНаОсновании = Неопределено;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

#Область ОтгрузкаОтветственный

&НаКлиенте
Процедура Отгрузка_ОтветственныйНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтветственного = Saby_ТНОбщегоНазначенияСервер.СтруктураОтветственного(
		Объект.ОтветственныеЛица, "Ответственный");
	СтруктураОтветственного.Вставить("ТолькоПросмотр", Элементы.ГруппаПогрузкаШапка.ТолькоПросмотр);
	СтруктураОтветственного.Вставить(
		"ИмяМетаданных",
		Saby_ТНОбщегоНазначенияКлиентСервер.ИмяМетаданныхПоФорме(ЭтаФорма));
	
	Saby_ТНОбщегоНазначенияКлиент.НачатьРедактированиеОтветственногоЛица(
		ЭтаФорма, СтруктураОтветственного, "Ответственный");
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КодФилиалаПриИзменении(Элемент)
	
	ОбновитьКодФилиала(ЭтотОбъект.КодФилиала);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтправительКонтактныеДанные

&НаКлиенте
Процедура ОтправительКонтактныеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	СтруктураДанныхЮрЛица = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(Объект.ДанныеЮрЛиц, "Отправитель");
	
	Если Не СтруктураДанныхЮрЛица.Заполнена Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан Отправитель!";
		Сообщение.Поле  = "ОтправительСтрокой";
		Сообщение.Сообщить();		
		Отказ = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактныеДанныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		ОбработатьНовуюСтрокуКонтактнойИнформации(Элемент.Имя);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактныеДанныеПослеУдаления(Элемент)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Отправитель");
	
	ДопПараметрыОбновленияКИ = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(РолиЮрЛиц);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметрыОбновленияКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактныеДанныеЗначениеПриИзменении(Элемент)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Отправитель");
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхПриИзменении(
		ЭтаФорма, Элементы.ОтправительКонтактныеДанные.ТекущиеДанные, РолиЮрЛиц);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактныеДанныеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Отправитель");
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхНачалоВыбора(
		ЭтаФорма, Элементы.ОтправительКонтактныеДанные.ТекущиеДанные, РолиЮрЛиц, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыОтправительКонтактныеДанные

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучательКонтактныеДанные

&НаКлиенте
Процедура ПолучательКонтактныеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр) 
	
	СтруктураДанныхЮрЛица = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(Объект.ДанныеЮрЛиц, "Получатель");
	
	Если Не СтруктураДанныхЮрЛица.Заполнена Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан Получатель!";
		Сообщение.Поле  = "ПолучательСтрокой";
		Сообщение.Сообщить();		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактныеДанныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		ОбработатьНовуюСтрокуКонтактнойИнформации(Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактныеДанныеПослеУдаления(Элемент)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Получатель");
	
	ДопПараметрыОбновленияКИ = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(РолиЮрЛиц);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметрыОбновленияКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактныеДанныеЗначениеПриИзменении(Элемент)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Получатель");
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхПриИзменении(
		ЭтаФорма, Элементы.ПолучательКонтактныеДанные.ТекущиеДанные, РолиЮрЛиц);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактныеДанныеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Получатель");
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхНачалоВыбора(
		ЭтаФорма, Элементы.ПолучательКонтактныеДанные.ТекущиеДанные, РолиЮрЛиц, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыПолучательКонтактныеДанные

#Область ОбработчикиСобытийЭлементовТаблицыФормыПеревозчикКонтактныеДанные

&НаКлиенте
Процедура ПеревозчикКонтактныеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	СтруктураДанныхЮрЛица = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(Объект.ДанныеЮрЛиц, "Перевозчик");
	
	Если Не СтруктураДанныхЮрЛица.Заполнена Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан Перевозчик!";
		Сообщение.Поле  = "ПеревозчикСтрокой";
		Сообщение.Сообщить();		
		Отказ = Истина;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикКонтактныеДанныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		ОбработатьНовуюСтрокуКонтактнойИнформации(Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикКонтактныеДанныеПослеУдаления(Элемент)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Перевозчик");
	
	ДопПараметрыОбновленияКИ = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(РолиЮрЛиц);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметрыОбновленияКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикКонтактныеДанныеЗначениеПриИзменении(Элемент)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Перевозчик");
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхПриИзменении(
		ЭтаФорма, Элементы.ПеревозчикКонтактныеДанные.ТекущиеДанные, РолиЮрЛиц);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикКонтактныеДанныеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Перевозчик");
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхНачалоВыбора(
		ЭтаФорма, Элементы.КонтактныеДанные_Перевозчик.ТекущиеДанные, РолиЮрЛиц, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыПеревозчикКонтактныеДанные

#Область ОбработчикиСобытийЭлементовТаблицыФормыВладелецОбъектаКонтактныеДанные

&НаКлиенте
Процедура ВладелецОбъектаКонтактныеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	СтруктураДанныхЮрЛица = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(Объект.ДанныеЮрЛиц, "ВладелецОбъекта");
	
	Если Не СтруктураДанныхЮрЛица.Заполнена Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан владелец объекта отгрузки!";
		Сообщение.Поле  = "ВладелецОбъектаСтрокой";
		Сообщение.Сообщить();		
		Отказ = Истина;	
		
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецОбъектаКонтактныеДанныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		ОбработатьНовуюСтрокуКонтактнойИнформации(Элемент.Имя);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецОбъектаКонтактныеДанныеПослеУдаления(Элемент)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "ВладелецОбъекта");
	
	ДопПараметрыОбновленияКИ = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(РолиЮрЛиц);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметрыОбновленияКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецОбъектаКонтактныеДанныеЗначениеПриИзменении(Элемент)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "ВладелецОбъекта");
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхПриИзменении(
		ЭтаФорма, Элементы.КонтактныеДанные_Владелец.ТекущиеДанные, РолиЮрЛиц);
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецОбъектаКонтактныеДанныеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "ВладелецОбъекта");
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхНачалоВыбора(
		ЭтаФорма, Элементы.КонтактныеДанные_Владелец.ТекущиеДанные, РолиЮрЛиц, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыВладелецОбъектаКонтактныеДанные

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтгрузчикКонтактныеДанные

&НаКлиенте
Процедура ОтгрузчикКонтактныеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	СтруктураДанныхЮрЛица = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(Объект.ДанныеЮрЛиц, "Отгрузчик");
	
	Если Не СтруктураДанныхЮрЛица.Заполнена Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указано лицо осуществляющее отгрузку!";
		Сообщение.Поле  = "ОтгрузчикСтрокой";
		Сообщение.Сообщить();		
		Отказ = Истина;		
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтгрузчикКонтактныеДанныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		ОбработатьНовуюСтрокуКонтактнойИнформации(Элемент.Имя);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтгрузчикКонтактныеДанныеПослеУдаления(Элемент)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Отгрузчик");
	
	ДопПараметрыОбновленияКИ = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(РолиЮрЛиц);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметрыОбновленияКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузчикКонтактныеДанныеЗначениеПриИзменении(Элемент)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Отгрузчик");
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхПриИзменении(
		ЭтаФорма, Элементы.КонтактныеДанные_Отгрузка.ТекущиеДанные, РолиЮрЛиц);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузчикКонтактныеДанныеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Отгрузчик");
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхНачалоВыбора(
		ЭтаФорма, Элементы.КонтактныеДанные_Отгрузка.ТекущиеДанные, РолиЮрЛиц, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыОтгрузчикКонтактныеДанные

#Область ОбработчикиСобытийЭлементовДополнительныхСтраниц

#Область Грузы

&НаКлиенте
Процедура МаркировкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Грузы", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ОпасныеГрузыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Грузы", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура СведенияГосСистемПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Грузы", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура КонтейнерыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Грузы", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВводаСтроки(ИмяТЧ, Отказ)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрана строка в основной таблице " + ИмяТЧ;
		// Сообщение.Поле  = "";
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура МаркировкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ДобавитьКлючСвязиСтроки(Элемент.Имя, "Грузы", Элемент.ТекущаяСтрока, НоваяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ОпасныеГрузыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ДобавитьКлючСвязиСтроки(Элемент.Имя, "Грузы", Элемент.ТекущаяСтрока, НоваяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура СведенияГосСистемПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ДобавитьКлючСвязиСтроки(Элемент.Имя, "Грузы", Элемент.ТекущаяСтрока, НоваяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура КонтейнерыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ДобавитьКлючСвязиСтроки(Элемент.Имя, "Грузы", Элемент.ТекущаяСтрока, НоваяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ГрузыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ГрузыЗаказчикСтрока" Тогда
		СтандартнаяОбработка = Ложь;
		СтандартныеПараметрыСобытия = Новый Структура;
		СтандартныеПараметрыСобытия.Вставить("Элемент",         Элемент);
		СтандартныеПараметрыСобытия.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
		СтандартныеПараметрыСобытия.Вставить("Поле",            Поле);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Роль",           "Заказчик");
		ДополнительныеПараметры.Вставить("ТолькоПросмотр", Элементы.Страница_Груз.ТолькоПросмотр);
		Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоВТаблицеВыбор(ЭтаФорма, СтандартныеПараметрыСобытия, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриАктивизацииСтроки(Элемент)
		
	 Грузы_УстановитьОтборПоВсемСвязаннымТаблицам();
	 
КонецПроцедуры

&НаКлиенте
Процедура Грузы_УстановитьОтборПоВсемСвязаннымТаблицам()
	
    ТекущиеДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСтроки_Грузы", ТекущиеДанные.КлючСтроки);
		
		Отбор = Новый ФиксированнаяСтруктура(СтруктураПоиска);
		
		Элементы.Маркировки.ОтборСтрок        = Отбор;
		Элементы.ОпасныеГрузы.ОтборСтрок      = Отбор;
		Элементы.СведенияГосСистем.ОтборСтрок = Отбор;
		Элементы.Контейнеры.ОтборСтрок        = Отбор;
		
		ЭтаФорма.ГосСистема_Наименование   = ТекущиеДанные.НаименованиеГосСистемы;
		ЭтаФорма.ГосСистема_УчетнаяЕдиница = ТекущиеДанные.УчетнаяЕдиницаГосСистемы; 
		
	Иначе 	
		
		ЭтаФорма.ГосСистема_Наименование   = "";
		ЭтаФорма.ГосСистема_УчетнаяЕдиница = "";
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекДанные = Элементы.Грузы.ТекущиеДанные;		
		ТекДанные.КлючСтроки = НовыйКлючСтроки("Грузы");
		Если Не Копирование Тогда 
			ТекДанные.Тип = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.Saby_ТипГруза.Груз");			
		КонецЕсли;
		
		// Переустановим отбор
		Грузы_УстановитьОтборПоВсемСвязаннымТаблицам();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Грузы.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Грузы.НайтиПоИдентификатору(ИдСтроки);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			УдаляемыеКлючи_Грузы.Добавить(ТекДанные.КлючСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("УдалитьСвязанныеСтроки", 0.1, Истина); 
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыТипПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		Если СокрЛП(ТекущиеДанные.Тип) = "Контейнер" Тогда 
			ТекущиеДанные.Наименование = "Контейнер";
		Иначе
			ТекущиеДанные.Наименование = "";
		КонецЕсли;		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ГосСистема_НаименованиеПриИзменении(Элемент)	
	ИзменениеИнформацииГосСистем();	
КонецПроцедуры

&НаКлиенте
Процедура ГосСистема_УчетнаяЕдиницаПриИзменении(Элемент)	
	ИзменениеИнформацииГосСистем();		
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеИнформацииГосСистем()
	
	ТекущиеДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.НаименованиеГосСистемы   = ГосСистема_Наименование;
		ТекущиеДанные.УчетнаяЕдиницаГосСистемы = ГосСистема_УчетнаяЕдиница; 
		
		ЭтаФорма.Модифицированность = Истина;
		
	Иначе 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрана строка груза!";
		Сообщение.Поле  = "Объект.Груз";
		Сообщение.Сообщить();		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Грузы

#Область Отметки

&НаКлиенте
Процедура ТипОтметок_ПогрузкаПриИзменении(Элемент)
	
	ОтборОтметокПоТипу();
	
	ТипОтметок_ПогрузкаТолькоПросмотр();
	
КонецПроцедуры

 &НаКлиенте
Процедура ТипОтметок_ВыгрузкаПриИзменении(Элемент)
	
	ОтборОтметокПоТипу();
	
	ТипОтметок_ВыгрузкаТолькоПросмотр();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтметокПоТипу(ИдентификаторСтрокиОтметок = Неопределено) Экспорт
	
	Если Элементы.Группа_Страницы.ТекущаяСтраница = Элементы.Страница_Погрузка Тогда
		ИмяТЧ = "Отметки";
		УстановитьТипОтметок(ИдентификаторСтрокиОтметок, "ТипОтметок_Погрузка");
		Значение = ТипОтметок_Погрузка;
	ИначеЕсли Элементы.Группа_Страницы.ТекущаяСтраница = Элементы.Страница_Выгрузка Тогда
		ИмяТЧ = "Отметки_Выгрузка";
		УстановитьТипОтметок(ИдентификаторСтрокиОтметок, "ТипОтметок_Выгрузка");
		Значение = ТипОтметок_Выгрузка;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКритерийОтбораОтметок(ИмяТЧ, Значение);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КритерийОтбора", Истина);
	
	Элементы[ИмяТЧ].ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураПоиска);
	
	// Если таблица пустая Событие при активации строки не наступит ..... 
	// проверим что есть в таблице
	НайденныеСтроки = Объект.Отметки.НайтиСтроки(СтруктураПоиска);
	Если Не НайденныеСтроки.Количество() Тогда
		Отметки_УстановитьОтборПоВсемСвязаннымТаблицам(ИмяТЧ, Истина);
	ИначеЕсли ИдентификаторСтрокиОтметок <> Неопределено Тогда
		Отметки_УстановитьОтборПоВсемСвязаннымТаблицам(ИмяТЧ);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКритерийОтбораОтметок(ИмяТЧ, Значение)
	
	МассивЭтапов = Новый Массив;
	
	Если ИмяТЧ = "Отметки" Тогда
		
		Если СокрЛП(Значение) = "Отправитель" Тогда
			МассивЭтапов.Добавить(ТипТитула("Погрузка"));
		Иначе
			МассивЭтапов.Добавить(ТипТитула("ПолучениеГруза"));
		КонецЕсли;
		
	Иначе
		
		// Отметки_Выгрузка
		Если СокрЛП(Значение) = "Получатель" Тогда
			МассивЭтапов.Добавить(ТипТитула("ПриемкаГруза"));
		Иначе
			МассивЭтапов.Добавить(ТипТитула("ВыдачаГруза"));
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаОтметок Из Объект.Отметки Цикл
		СтрокаОтметок.КритерийОтбора = СтрокаОтметок.Роль = Значение
			И МассивЭтапов.Найти(СтрокаОтметок.Этап) <> Неопределено;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТипОтметок(ИдентификаторСтрокиОтметок, ТипОтметок)
	
	Если ИдентификаторСтрокиОтметок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОтметок = Объект.Отметки.НайтиПоИдентификатору(ИдентификаторСтрокиОтметок);
	Если СтрокаОтметок.Роль <> ЭтаФорма[ТипОтметок] Тогда
		ЭтаФорма[ТипОтметок] = СтрокаОтметок.Роль;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТипТитула(Титул)
	
	Возврат ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.Saby_ТипТитулаЭтрН." + Титул);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьДинамическиеТитулыСОтметками(МассивЭтапов)
	
	МассивЭтапов.Добавить(ТипТитула("Переадресовка"));
	МассивЭтапов.Добавить(ТипТитула("ЗаменаВодителяТС"));
	МассивЭтапов.Добавить(ТипТитула("ИзменениеСтоимости"));
	МассивЭтапов.Добавить(ТипТитула("СогласованиеСтоимости"));
	
КонецПроцедуры

&НаКлиенте
Процедура Отметки_УстановитьОтборПоВсемСвязаннымТаблицам(ИмяТаблицы, ПустойОтбор = Ложь)
	
    ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
			
	СтруктураПоиска = Новый Структура;
	Если ПустойОтбор Или ТекущиеДанные = Неопределено Тогда
		СтруктураПоиска.Вставить("КлючСтроки_Отметки", 0);			
	Иначе
		СтруктураПоиска.Вставить("КлючСтроки_Отметки", ТекущиеДанные.КлючСтроки);
	КонецЕсли;
	
	Отбор = Новый ФиксированнаяСтруктура(СтруктураПоиска);
	
	Если ИмяТаблицы = "Отметки" Тогда 			
		Элементы.Штрафы.ОтборСтрок = Отбор;
		Элементы.Акты.ОтборСтрок   = Отбор;
	Иначе
		// Отметки_Выгрузка
		Элементы.Штрафы_Выгрузка.ОтборСтрок = Отбор;
		Элементы.Акты_Выгрузка.ОтборСтрок   = Отбор;
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиПриАктивизацииСтроки(Элемент)
	
	Отметки_УстановитьОтборПоВсемСвязаннымТаблицам("Отметки");
	
КонецПроцедуры

&НаКлиенте
Процедура Отметки_ВыгрузкаПриАктивизацииСтроки(Элемент)
	
	Отметки_УстановитьОтборПоВсемСвязаннымТаблицам("Отметки_Выгрузка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекДанные = Элементы.Отметки.ТекущиеДанные;
		
		ТекДанные.КлючСтроки = НовыйКлючСтроки("Отметки");
		ТекДанные.ДатаВремя  = ОбщегоНазначенияКлиент.ДатаСеанса();
		ТекДанные.Роль       = ТипОтметок_Погрузка;
		
		// Этап
		Если СокрЛП(ТипОтметок_Погрузка) = "Отправитель" Тогда 
			ТекДанные.Этап = ТипТитула("Погрузка");
		Иначе
			ТекДанные.Этап = ТипТитула("ПолучениеГруза");
		КонецЕсли;
		
		ТекДанные.КритерийОтбора = Истина;
		
		// Переустановим отбор
		Отметки_УстановитьОтборПоВсемСвязаннымТаблицам(Элемент.Имя);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Отметки_ВыгрузкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекДанные = Элементы.Отметки_Выгрузка.ТекущиеДанные;
		
		ТекДанные.КлючСтроки = НовыйКлючСтроки("Отметки");
		ТекДанные.ДатаВремя  = ОбщегоНазначенияКлиент.ДатаСеанса();
		ТекДанные.Роль       = ТипОтметок_Выгрузка;
				
		// Этап
		Если СокрЛП(ТипОтметок_Выгрузка) = "Получатель" Тогда 
			ТекДанные.Этап = ТипТитула("ПриемкаГруза");
		Иначе
			ТекДанные.Этап = ТипТитула("ВыдачаГруза");
		КонецЕсли;
		
		ТекДанные.КритерийОтбора = Истина;
		
		// Переустановим отбор
		Отметки_УстановитьОтборПоВсемСвязаннымТаблицам(Элемент.Имя);

	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ШтрафыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Отметки", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура АктыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Отметки", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура Акты_ВыгрузкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Отметки_Выгрузка", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура Штрафы_ВыгрузкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Отметки_Выгрузка", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ШтрафыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НоваяСтрока Тогда 
		ДобавитьКлючСвязиСтроки(Элемент.Имя, "Отметки", Элемент.ТекущаяСтрока, НоваяСтрока);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АктыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не Копирование Тогда 
		ДобавитьКлючСвязиСтроки(Элемент.Имя, "Отметки", Элемент.ТекущаяСтрока, НоваяСтрока);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Штрафы_ВыгрузкаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		ДобавитьКлючСвязиСтроки("Штрафы", "Отметки_Выгрузка", Элемент.ТекущаяСтрока, НоваяСтрока, "КлючСтроки_Отметки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Акты_ВыгрузкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не Копирование Тогда 
		ДобавитьКлючСвязиСтроки("Акты", "Отметки_Выгрузка", Элемент.ТекущаяСтрока, НоваяСтрока, "КлючСтроки_Отметки");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтметкиПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Отметки.ВыделенныеСтроки;
	ОтметкиУдалитьСтоки(ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Отметки_ВыгрузкаПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Отметки.ВыделенныеСтроки;
	ОтметкиУдалитьСтоки(ВыделенныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ОтметкиУдалитьСтоки(ВыделенныеСтроки)
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Отметки.НайтиПоИдентификатору(ИдСтроки);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			УдаляемыеКлючи_Отметки.Добавить(ТекДанные.КлючСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("УдалитьСвязанныеСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаОтметок(Этап)
	
	Титул = ПредопределенноеЗначение("Перечисление.Saby_ТипТитулаЭтрН." + Этап);
	Роль  = Перечисления.Saby_РолиКонтрагентов.ПустаяСсылка();
	
	Saby_ТНОбщегоНазначенияСервер.ЗачисткаОтметокШтрафовАктов(Объект, Титул, Роль);
	
КонецПроцедуры

#КонецОбласти // Отметки

#Область ДатаИВремя

&НаСервере
Процедура РазложитьДатуВремяПоРеквизитам(РеквизитОбъекта, РеквизитДата, РеквизитВремя)
	
	 ЭтаФорма[РеквизитДата]  = Объект[РеквизитОбъекта];	 
	 ЭтаФорма[РеквизитВремя] = Объект[РеквизитОбъекта];
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатыНаФорме()
	
	// Даты. Разложим дату и время по отдельным реквизитам 
	МассивРеквизитов = РеквизитыДляРазделенияДатыИВремя();
	Saby_ТНОбщегоНазначенияСервер.РазложитьДатуВремяПоРеквизитам(ЭтаФорма, МассивРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоставитьДо_ДатаПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДоставитьДо_ВремяПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Погрузка_ДатаПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Погрузка_ВремяПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Погрузка_ДатаПрибылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Погрузка_ВремяПрибылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Погрузка_ДатаУбылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Погрузка_ВремяУбылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Приемка_ДатаПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Приемка_ВремяПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Приемка_ДатаПрибылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Приемка_ВремяПрибылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Приемка_ДатаУбылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Приемка_ВремяУбылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Выгрузка_ДатаПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Выгрузка_ВремяПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Выгрузка_ДатаПрибылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Выгрузка_ВремяПрибылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Выгрузка_ДатаУбылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Выгрузка_ВремяУбылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик_ВыгрузкаДатаПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик_ВыгрузкаВремяПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик_ВыгрузкаДатаПрибылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик_ВыгрузкаВремяПрибылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик_ВыгрузкаДатаУбылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик_ВыгрузкаВремяУбылПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти // ДатаИВремя

&НаКлиенте
Процедура Грузоотправитель_ИнициаторПереадресацииПриИзменении(Элемент)
	
	РольОтправитель = ПредопределенноеЗначение("Перечисление.Saby_РолиКонтрагентов.Отправитель");
	Если Объект.ИнициаторПереадресации = РольОтправитель Тогда		
		Объект.ИнициаторПереадресацииПодтверждение = "";		
	КонецЕсли;	
		
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыНаименованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		Если ТекущиеДанные.Наименование = "Контейнер"
			И СокрЛП(ТекущиеДанные.Тип) = "Груз" Тогда 
			
			ИндексСтроки = Формат(ТекущиеДанные.НомерСтроки - 1, "ЧН=0; ЧГ=0");
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "У груза с типом 'Груз' не может быть указано название 'Контейнер'!";
			Сообщение.Поле  = "Объект.Грузы[" + ИндексСтроки + "].Наименование";
			Сообщение.Сообщить();		
			
			ТекущиеДанные.Наименование = "Груз"; 
			
		КонецЕсли;		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовДополнительныхСтраниц

#Область СлужебныеПроцедурыИФункции

Процедура ПриЧтенииСозданииПослеЗаписиНаСервере()
	
	УстановкаВидимостиИРасчетныхРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура УстановкаВидимостиИРасчетныхРеквизитов(Знач ОбновитьДанныеПоОшибкам = Ложь)
	
	ЗаполнитьРасчетныеРеквизиты();
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьЛенту(ЭтаФорма, Истина);
	
	ОбновитьДоступностьПолейВвода();
	ОбновитьВидимостьИДоступностьЭлементов();
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияСервер.УстановитьОтборТаблицыОтветственных(Элементы.Водители, "Водитель");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасчетныеРеквизиты()
	
	СтруктураОтправителя = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(Объект.ДанныеЮрЛиц, "Отправитель");
	СтруктураПолучателя  = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(Объект.ДанныеЮрЛиц, "Получатель");
	СтруктураОтгрузчика  = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(Объект.ДанныеЮрЛиц, "Отгрузчик");
	СтруктураОформителя  = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(Объект.ДанныеЮрЛиц, "Оформитель");
	
	СтруктураОформителя.Основание = Объект.Составитель_НаОснованииДокумент;
	
	Если СтруктураОтправителя.Заполнена Тогда 
		ЭтаФорма.Грузоотправитель_Грузополучатель = Saby_ТНОбщегоНазначенияКлиентСервер.ЮрЛицаСовпадают(
			СтруктураПолучателя, СтруктураОтправителя);
	КонецЕсли;
	
	Если СтруктураОформителя.Заполнена Тогда
		ЭтаФорма.Грузоотправитель_НеЯвляетсяОтправителем = Не Saby_ТНОбщегоНазначенияКлиентСервер.ЮрЛицаСовпадают(
			СтруктураОтправителя, СтруктураОформителя);
	КонецЕсли;
	
	ЭтаФорма.Грузоотправитель_ОсуществляетОтгрузку = Saby_ТНОбщегоНазначенияКлиентСервер.ЮрЛицаСовпадают(
			СтруктураОтправителя, СтруктураОтгрузчика);
	
	Если ЭтаФорма.ТипОтметок_Погрузка.Пустая() Тогда
		ЭтаФорма.ТипОтметок_Погрузка = Перечисления.Saby_РолиКонтрагентов.Отправитель;
	КонецЕсли;
	Если ЭтаФорма.ТипОтметок_Выгрузка.Пустая() Тогда
		ЭтаФорма.ТипОтметок_Выгрузка = Перечисления.Saby_РолиКонтрагентов.Получатель;
	КонецЕсли;
	
	ЭтаФорма.ОтправительСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		СтруктураОтправителя.НаименованиеОрганизации);
		
	ЭтаФорма.ОформительСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		СтруктураОформителя.НаименованиеОрганизации);
	Saby_ТНОбщегоНазначенияКлиентСервер.ЗаполнитьДополнительныеПоляЮрЛица(
		ЭтаФорма, СтруктураОформителя, "Основание", "Оформитель");
		
	ЭтаФорма.ПолучательСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		СтруктураПолучателя.НаименованиеОрганизации);
		
	ЭтаФорма.ПеревозчикСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		Объект.ДанныеЮрЛиц, "Перевозчик");
		
	ЭтаФорма.ЗаказчикСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		Объект.ДанныеЮрЛиц, "Заказчик");
		
	ЭтаФорма.ВладелецОбъектаСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		Объект.ДанныеЮрЛиц, "ВладелецОбъекта");
		
	ЭтаФорма.ОтгрузчикСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		СтруктураОтгрузчика.НаименованиеОрганизации);
	
	// Телефоны
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(
		ЭтаФорма, "Отправитель,Получатель,Перевозчик,Отгрузчик,ВладелецОбъекта");
	ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(РолиЮрЛиц);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметры);
	
	// Обновим реквизиты формы с датой и временем 
    ОбновитьДатыНаФорме();
	
	// Документ основание
	Если ЗначениеЗаполнено(Объект.ДокументОснование_Идентификатор) Тогда 		
		 ДокументОснование = Документы[Объект.ДокументОснование_ОбъектМетаданных].ПолучитьСсылку(
		 	Новый УникальныйИдентификатор(Объект.ДокументОснование_Идентификатор));
		 Элементы.ДекорацияДокументОснование.Заголовок = СокрЛП(ДокументОснование);
	КонецЕсли;	
	
	// Активный этап и индикация состояния
	Saby_ТНОбщегоНазначенияСервер.ОтобразитьНаФормеСбисЭтапИСостояние(ЭтаФорма);
	
	АктивныеЭтапы = ПараметрыАктивныхЭтапов();
	
	// Обязательно после процедуры СбисЭтапИСостояние(), так как устанавливается реквизит АктивныйЭтапСтрокой
	ОграничитьТипыАктов(АктивныеЭтапы);
		
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьВодителейНаФорме(ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьТранспортныеСредстваНаФорме(ЭтаФорма);
	
	СтруктураОтветственного = Saby_ТНОбщегоНазначенияСервер.СтруктураОтветственного(
		Объект.ОтветственныеЛица, "Ответственный");
	Saby_ТНОбщегоНазначенияСервер.ОбновитьОтветственногоНаФорме(
		ЭтаФорма, "ОтветственныйОтгрузка", СтруктураОтветственного);
	
	ОбновитьКодФилиала();
	
	МаксимальныеКлючиСтрок();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыАктивныхЭтапов()
	
	Завершен = ДОЗавершен();
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Завершен",              Завершен);
	РезультатФункции.Вставить("Черновик",              Ложь);
	РезультатФункции.Вставить("ПолучениеГруза",        Ложь);
	РезультатФункции.Вставить("ПриемкаГруза",          Ложь);
	РезультатФункции.Вставить("ВыдачаГруза",           Ложь);
	РезультатФункции.Вставить("СогласованиеСтоимости", Ложь);
	РезультатФункции.Вставить("ЭтоДинамическийТитул",  Ложь);
	
	ТекущийЭтап = Перечисления.Saby_ТипТитулаЭтрН.ЗначениеПоПредставлению(АктивныйЭтапСтрокой);
	
	РезультатФункции.ЭтоДинамическийТитул = Перечисления.Saby_ТипТитулаЭтрН.ЭтоДинамическийТитул(ТекущийЭтап);
	
	Если Не РезультатФункции.Завершен Тогда
		
		Погрузка = (ТекущийЭтап = Перечисления.Saby_ТипТитулаЭтрН.Погрузка);
				
		РезультатФункции.ПолучениеГруза = (ТекущийЭтап = Перечисления.Saby_ТипТитулаЭтрН.ПолучениеГруза);
		РезультатФункции.ПриемкаГруза   = (ТекущийЭтап = Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза);
		РезультатФункции.ВыдачаГруза    = (ТекущийЭтап = Перечисления.Saby_ТипТитулаЭтрН.ВыдачаГруза);
				
		РезультатФункции.Черновик              = Не ЗначениеЗаполнено(ТекущийЭтап) Или Погрузка;
		РезультатФункции.СогласованиеСтоимости = (ТекущийЭтап = Перечисления.Saby_ТипТитулаЭтрН.СогласованиеСтоимости);
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Процедура ОграничитьТипыАктов(АктивныеЭтапы = Неопределено)
	
	Если АктивныеЭтапы = Неопределено Тогда
		АктивныеЭтапы = ПараметрыАктивныхЭтапов();
	КонецЕсли;
	
	Если АктивныеЭтапы.ПолучениеГруза Или АктивныеЭтапы.ВыдачаГруза Тогда
		ЗначениеПараметра = ПредопределенноеЗначение("Перечисление.Saby_ТипыДокумента.АктКоммерческий");
	Иначе
		ЗначениеПараметра = Новый Массив;
		ЗначениеПараметра.Добавить(ПредопределенноеЗначение("Перечисление.Saby_ТипыДокумента.АктВзвешивания"));
		ЗначениеПараметра.Добавить(ПредопределенноеЗначение("Перечисление.Saby_ТипыДокумента.АктКоммерческий"));
	КонецЕсли;
	
	МассивПараметровОтбора = Новый Массив;
	Параметр = Новый ПараметрВыбора("Отбор.Тип", ЗначениеПараметра);
	МассивПараметровОтбора.Добавить(Параметр);
	
	ПараметрыВыбораАктов = Новый ФиксированныйМассив(МассивПараметровОтбора);
	
	Элементы.АктыДокумент.ПараметрыВыбора          = ПараметрыВыбораАктов;
	Элементы.Акты_ВыгрузкаДокумент.ПараметрыВыбора = ПараметрыВыбораАктов;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьПолейВвода()
	
	ПараметрыЭтапов = ПараметрыАктивныхЭтапов();
	ДоступныеРоли   = Документы.Saby_ТранспортнаяНакладная.РолиОрганизации(Объект.ДанныеЮрЛиц);
	
	ЭтоПриемкаИлиВыдача = ПараметрыЭтапов.ПриемкаГруза Или ПараметрыЭтапов.ВыдачаГруза;
	
	ЭтоНеЧерновик = ПараметрыЭтапов.ПолучениеГруза Или ЭтоПриемкаИлиВыдача 
						Или ПараметрыЭтапов.Завершен Или ПараметрыЭтапов.ЭтоДинамическийТитул;
		
	// Видимость
	Элементы.ТипОтметок_Погрузка.Видимость        = ЭтоНеЧерновик;
	Элементы.Группа_ПогрузкаОговорки.Видимость    = ЭтоНеЧерновик;
	Элементы.Страница_Выгрузка.Видимость          = ЭтоПриемкаИлиВыдача Или БылаПриемкаИлиВыдача();
	Элементы.ТипОтметок_Выгрузка.Видимость        = ЭтоНеЧерновик;
	Элементы.Группа_ОговоркиПеревозчика.Видимость = ПараметрыЭтапов.ВыдачаГруза Или ПараметрыЭтапов.Завершен;
	
	// Только просмотр   
	Элементы.Группа_СтандартныеРеквизиты.ТолькоПросмотр = ЭтоНеЧерновик;
	Элементы.Группа_Шапка.ТолькоПросмотр                = ЭтоНеЧерновик;
	Элементы.Страница_Основное.ТолькоПросмотр           = ЭтоНеЧерновик;
	Элементы.Страница_Груз.ТолькоПросмотр               = ЭтоНеЧерновик;   
	Элементы.ГруппаПогрузкаШапка.ТолькоПросмотр         = ЭтоНеЧерновик; 
	Элементы.Погрузка_Адрес.Доступность                 = Не ЭтоНеЧерновик;
	Элементы.АдресДоставки.Доступность                  = Не ЭтоНеЧерновик;
	
	Элементы.ГруппаДокументОснование.ТолькоПросмотр     = ЭтоНеЧерновик;

	Элементы.ГруппаВыгрузкаШапка.ТолькоПросмотр         = Не ПараметрыЭтапов.ПриемкаГруза Или Не ДоступныеРоли.Получатель; 
	Элементы.ЗаполнитьВыгрузкуПоДаннымГрузоотправителя.Доступность 
	                                                    = Не Элементы.ГруппаВыгрузкаШапка.ТолькоПросмотр;
	
	Элементы.Группа_ОтметкиПогрузка.ТолькоПросмотр      = ЭтоПриемкаИлиВыдача;
	Элементы.Группа_ПогрузкаОговорки.ТолькоПросмотр     = ПараметрыЭтапов.Завершен Или ЭтоПриемкаИлиВыдача
		Или ПараметрыЭтапов.ЭтоДинамическийТитул Или Не ДоступныеРоли.Перевозчик;
		
	Элементы.Группа_ОговоркиПеревозчика.ТолькоПросмотр  = ПараметрыЭтапов.Завершен И Не ПараметрыЭтапов.ВыдачаГруза 
															Или Не ДоступныеРоли.Перевозчик;
	
	Если ПараметрыЭтапов.ПолучениеГруза Тогда			
		ТипОтметок_ПогрузкаТолькоПросмотр(ПараметрыЭтапов, ДоступныеРоли); 
	ИначеЕсли ПараметрыЭтапов.ПриемкаГруза Тогда			
		ЭтаФорма.ТипОтметок_Выгрузка = Перечисления.Saby_РолиКонтрагентов.Получатель;
		ТипОтметок_ВыгрузкаТолькоПросмотр(ПараметрыЭтапов, ДоступныеРоли);
	ИначеЕсли ПараметрыЭтапов.ВыдачаГруза Тогда 
		ТипОтметок_ВыгрузкаТолькоПросмотр(ПараметрыЭтапов, ДоступныеРоли);
	Иначе
		ЭтаФорма.ТипОтметок_Погрузка = Перечисления.Saby_РолиКонтрагентов.Отправитель;
	КонецЕсли;
	
	// до завершен или это ДТ
	ЭтаФорма.ТолькоПросмотр = ПараметрыЭтапов.Завершен Или ПараметрыЭтапов.ЭтоДинамическийТитул;
	
	// Доступность 
	Элементы.НастройкаДокументовОснований.Доступность = Не ЭтоНеЧерновик;

КонецПроцедуры

#Область ОбработкаОповещений

&НаКлиенте
Процедура ОбработатьОповещениеОбновитьДокумент(Параметр) Экспорт
	
	ЭтаФорма.ТаблицаОшибок.Очистить();
	ЭтаФорма.КоличествоОшибок = 0;
	
	ЭтаФорма.Прочитать();
	
	ОтборОтметокПоТипу();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеВыполнитьПереход() Экспорт
	
	ОбменДаннымиСБИС("ОбновитьАктивныйЭтап");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеЗавершениеВыполнитьДействие(Параметр) Экспорт
	
	Если Параметр.status = "error" Тогда
		Saby_ТНОбщегоНазначенияКлиент.ОбработатьОшибкиИзФормыВыполнитьДействие(ЭтаФорма, Объект.Ссылка, Параметр);
		ЭтаФорма.Прочитать();
	Иначе
		ОбменДаннымиСБИС("ОбновитьАктивныйЭтап");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработкаОповещений

#Область КлючиСтрок

&НаСервере
Процедура МаксимальныеКлючиСтрок()
	
	ИмяКолонки = "КлючСтроки";
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить("Грузы");
	МассивТаблиц.Добавить("Отметки");
    МассивТаблиц.Добавить("ОтветственныеЛица");
	
	Для Каждого ИмяТЧ Из МассивТаблиц Цикл 
		
		ИмяКлюча = "МаксимальныйКлючСтроки_" + ИмяТЧ;
		
		Если Объект[ИмяТЧ].Количество() = 0 Тогда
			ЭтаФорма[ИмяКлюча] = 0;
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из Объект[ИмяТЧ] Цикл
			ЭтаФорма[ИмяКлюча] = Макс(ЭтаФорма[ИмяКлюча], СтрокаТаблицы[ИмяКолонки]);
		КонецЦикла;
				
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция НовыйКлючСтроки(ИмяТЧ)
	
	// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
	// рассчитывается от максимального существующего значения.	
	ИмяКлюча = "МаксимальныйКлючСтроки_" + ИмяТЧ;	
	
	ЭтаФорма[ИмяКлюча] = ЭтаФорма[ИмяКлюча] + 1;						
	Возврат ЭтаФорма[ИмяКлюча];
			
КонецФункции

&НаКлиенте
Процедура ДобавитьКлючСвязиСтроки(ИмяТЧ, ИсходнаяТЧ, НомерСтроки, НоваяСтрока, ИмяКолонкиКлюча = Неопределено)
	
	Если Не НоваяСтрока Тогда 
		Возврат;
	КонецЕсли;
	
	// Проверка корректности номера строки 
	// При удалении строк расходится номер строки и индекс. Индекс сдвигается, а номер строки только увеличивается 
	Если НомерСтроки >= Объект[ИмяТЧ].Количество() Тогда 
		
		// считаем что новая строка это самая последняя в таблице		
		НовыйНомерСтроки = Объект[ИмяТЧ].Количество() - 1;		
		ТекущиеДанные    = Объект[ИмяТЧ][НовыйНомерСтроки];
		
	Иначе
		ТекущиеДанные = Объект[ИмяТЧ][НомерСтроки];
	КонецЕсли;
			
	ТекущиеДанныеИсходнойТЧ = Элементы[ИсходнаяТЧ].ТекущиеДанные;
	
	КлючСтроки = ТекущиеДанныеИсходнойТЧ.КлючСтроки;
	
	ИмяКлюча = ИмяКолонкиКлюча;
	Если ИмяКлюча = Неопределено Тогда
		Если ИсходнаяТЧ = "Водители" Тогда
			ИмяКлюча = "КлючСтроки_ОтветственныеЛица";
		Иначе
			ИмяКлюча = "КлючСтроки_" + ИсходнаяТЧ;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные[ИмяКлюча] <> КлючСтроки Тогда 		
		ТекущиеДанные[ИмяКлюча] = КлючСтроки;		
	КонецЕсли;
		
КонецПроцедуры

// ПодключаемыеОбработчики
&НаКлиенте
Процедура УдалитьСвязанныеСтроки()
	
	УдалитьСвязанныеЗаписиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеЗаписиНаСервере()
	
	ВидыУдаляемыхСтрок = Новый Структура; 
	
	// Грузы 
	КлючиГруз = СтруктураСвязанныхДанныхДляУдаления(УдаляемыеКлючи_Грузы, "Грузы");
	
	ВидыУдаляемыхСтрок.Вставить("Маркировки",        КлючиГруз);
	ВидыУдаляемыхСтрок.Вставить("ОпасныеГрузы",      КлючиГруз);
	ВидыУдаляемыхСтрок.Вставить("СведенияГосСистем", КлючиГруз);
	ВидыУдаляемыхСтрок.Вставить("Контейнеры",        КлючиГруз);
	
	// Отметки
	КлючиОтметки = СтруктураСвязанныхДанныхДляУдаления(УдаляемыеКлючи_Отметки, "Отметки");

	ВидыУдаляемыхСтрок.Вставить("Акты",   КлючиОтметки);
	ВидыУдаляемыхСтрок.Вставить("Штрафы", КлючиОтметки);
	
	// Водители  
	КлючиВодители = СтруктураСвязанныхДанныхДляУдаления(УдаляемыеКлючи_ОтветственныеЛица, "ОтветственныеЛица");
	
	ВидыУдаляемыхСтрок.Вставить("ПутевыеЛисты", КлючиВодители);
	
	Для Каждого ВидУдаляемыхСтрок Из ВидыУдаляемыхСтрок Цикл
		
		ИмяТабличнойЧасти 		= ВидУдаляемыхСтрок.Ключ;
		СписокУдаленныхКлючей 	= ВидУдаляемыхСтрок.Значение.Список;
		КлючСтроки              = "КлючСтроки_" + ВидУдаляемыхСтрок.Значение.ИмяКолонки;
		
		Для Каждого СтрокаКлюча Из СписокУдаленныхКлючей Цикл
								
			КлючПоиска = Новый Структура(КлючСтроки, СтрокаКлюча.Значение); 
			
			МассивСтрокТовары = Объект[ИмяТабличнойЧасти].НайтиСтроки(КлючПоиска);
			
			Для Каждого СтрокаТЧ Из МассивСтрокТовары Цикл
				Объект[ИмяТабличнойЧасти].Удалить(СтрокаТЧ);
			КонецЦикла; 
			
		КонецЦикла;
	КонецЦикла; 
	
    // сбросим списки в начальное состояние
	УдаляемыеКлючи_Грузы.Очистить();
	УдаляемыеКлючи_Отметки.Очистить();
	УдаляемыеКлючи_ОтветственныеЛица.Очистить();
	
КонецПроцедуры

&НаСервере
Функция СтруктураСвязанныхДанныхДляУдаления(Список, ИмяКолонки)
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Список",     Список);
	РезультатФункции.Вставить("ИмяКолонки", ИмяКолонки);
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // КлючиСтрок
	   
&НаСервере
Функция ЗаполнениеНаОснованииINI() Экспорт
	
	Результат = Saby_ТНОбщегоНазначенияСервер.ЗаполнитьНаОснованииINI(Объект, ДокументОснование);	
	Если ЗначениеЗаполнено(Результат) Тогда		
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборыПоТаблицам()

	// Контактная информация
	ОтборИнформацииПоКонтактнымДанным("ОтправительКонтактныеДанные",     "Отправитель");
	ОтборИнформацииПоКонтактнымДанным("ПолучательКонтактныеДанные",      "Получатель");
	ОтборИнформацииПоКонтактнымДанным("ПеревозчикКонтактныеДанные",      "Перевозчик");
	ОтборИнформацииПоКонтактнымДанным("ВладелецОбъектаКонтактныеДанные", "ВладелецОбъекта");
	ОтборИнформацииПоКонтактнымДанным("ОтгрузчикКонтактныеДанные",       "Отгрузчик");
	
	// Грузы. Связанные таблицы 
	Грузы_УстановитьОтборПоВсемСвязаннымТаблицам();
	
	// Отметки 
	ОтборОтметокПоТипу();
		
КонецПроцедуры

// Заполнение реквизитов формы при изменение, связанной информации
// или первоначальной инициализации формы

&НаСервереБезКонтекста
Функция РеквизитыДляРазделенияДатыИВремя()
	
	Массив = Новый Массив;
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, 
		"Отправитель_ДоставитьДо", "ДоставитьДо_Дата", "ДоставитьДо_Время");
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, "Погрузка_ДатаВремя");
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, "Погрузка_ДатаВремяПрибыл");
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, "Погрузка_ДатаВремяУбыл");
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, "Перевозчик_ПриемкаДатаВремя");
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, "Перевозчик_ПриемкаДатаВремяПрибыл");
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, "Перевозчик_ПриемкаДатаВремяУбыл");
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, "Выгрузка_ДатаВремя");
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, "Выгрузка_ДатаВремяПрибыл");
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, "Выгрузка_ДатаВремяУбыл");
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, "Перевозчик_ВыгрузкаДатаВремя");
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, "Перевозчик_ВыгрузкаДатаВремяПрибыл");
	Saby_ТНОбщегоНазначенияСервер.ДобавитьРеквизитВМассивДатаВремя(Массив, "Перевозчик_ВыгрузкаДатаВремяУбыл");
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Процедура ОграничитьТипыДокументовОснований() Экспорт
	
	МассивТипов = Документы.Saby_ТранспортнаяНакладная.ТипыДляЗаполненияНаОсновании();
	
	ТипДокументаОснования = ТипЗнч(ДокументОснование);
	
	Если ЗначениеЗаполнено(ДокументОснование) И МассивТипов.Найти(ТипДокументаОснования) = Неопределено Тогда
		МассивТипов.Добавить(ТипДокументаОснования);
	КонецЕсли;
	
	ТипыОснований.ЗагрузитьЗначения(МассивТипов);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьИДоступностьЭлементовНаКлиенте() Экспорт
	ОбновитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИДоступностьЭлементов()
	
	Неизвестен = Перечисления.Saby_ВладелецОбъектаОтгрузки.Неизвестен;	
	Элементы.Владелец_НеизвестенПричина.Видимость  = (Объект.Владелец_Тип = Неизвестен); 
	
	Элементы.Группа_Грузополучатель.ТолькоПросмотр = ЭтаФорма.Грузоотправитель_Грузополучатель;
	
	Элементы.Группа_Заказчик.Видимость = Объект.Отправитель_Экспедитор;
	
	// Грузоотправитель_ОсуществляетОтгрузку
	Элементы.Группа_ТелОтгрузка.Доступность = НЕ Грузоотправитель_ОсуществляетОтгрузку
		И Не Грузоотправитель_НеЯвляетсяОтправителем;
		
	Элементы.Отгрузка_НаОснованииДокумент.Доступность = НЕ Грузоотправитель_ОсуществляетОтгрузку
		Или Грузоотправитель_НеЯвляетсяОтправителем;
		
	Элементы.Группа_ПогрузкаОтветственный.Доступность = НЕ Грузоотправитель_ОсуществляетОтгрузку
		Или Грузоотправитель_НеЯвляетсяОтправителем;
	
	Элементы.Группа_Составитель.Видимость = Грузоотправитель_НеЯвляетсяОтправителем;
			
	// Владелец 
	Если Объект.Владелец_Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.Отправитель Тогда
		
		Элементы.Группа_Владелец.Видимость            = Ложь;
		Элементы.Владелец_НеизвестенПричина.Видимость = Ложь;
				
	ИначеЕсли Объект.Владелец_Тип = Перечисления.Saby_ВладелецОбъектаОтгрузки.ДругоеЮрЛицо Тогда 
		
		Элементы.Группа_Владелец.Видимость            = Истина;
		Элементы.Владелец_НеизвестенПричина.Видимость = Ложь;
		
	Иначе
		// Неизвестен
	    Элементы.Группа_Владелец.Видимость            = Ложь;
		Элементы.Владелец_НеизвестенПричина.Видимость = Истина;
		
	КонецЕсли;	
    // - 		
	
	ЭтоИсходящий = (Объект.Направление = Перечисления.Saby_Направление.Исходящий);
		
	Завершен = ДОЗавершен();
	
	ЭтоЧерновик  = Не ЗначениеЗаполнено(АктивныйЭтапСтрокой) И Не Завершен;
		
	Если Не ЭтоИсходящий Тогда 		
		Элементы.ГруппаДокументОснование.Видимость = Ложь;
	Иначе 
		Элементы.ГруппаДокументОснование.Видимость = ЭтоЧерновик Или ЗначениеЗаполнено(ДокументОснование);
	КонецЕсли;
		
	РольПолучатель = Перечисления.Saby_РолиКонтрагентов.Получатель;
	Элементы.ИнициаторПереадресацииПодтверждение.Доступность = Объект.ИнициаторПереадресации = РольПолучатель;		

	Элементы.НомерСбис.Видимость = Не ЭтоИсходящий Или ЗначениеЗаполнено(Объект.НомерСбис);
	
	// Доступность доп команд по данным сервиса
	ОбновитьДоступностьДополнительныхКоманд();
	
	АдресПогрузкиЗаполнен = ЗначениеЗаполнено(Объект.Погрузка_Адрес);
	Элементы.Погрузка_Адрес.Видимость = АдресПогрузкиЗаполнен;
	Элементы.ДекорацияЗаполнитьАдресПогрузки.Видимость = Не АдресПогрузкиЗаполнен;
	
	АдресДоставкиЗаполнен = ЗначениеЗаполнено(Объект.Отправитель_АдресДоставки);
	Элементы.АдресДоставки.Видимость = АдресДоставкиЗаполнен;
	Элементы.ДекорацияЗаполнитьАдресДоставки.Видимость = Не АдресДоставкиЗаполнен;
	
	Элементы.Грузоотправитель_ОсуществляетОтгрузку.Доступность = Не ЭтаФорма.Грузоотправитель_НеЯвляетсяОтправителем;
	
КонецПроцедуры	

&НаСервере
Функция ДОЗавершен()
	
	ДОЗавершенОтрицательно = 5;
	ДОЗавершенПоложительно = 6;	
	
	Завершен = ИндексКартинки = ДОЗавершенОтрицательно 
		Или ИндексКартинки = ДОЗавершенПоложительно;

	Возврат Завершен;	
	
КонецФункции

&НаСервере
Функция БылаПриемкаИлиВыдача()
	
	РезультатФункции = Ложь;
	
	НайденныеСтроки = Лента.НайтиСтроки(Новый Структура("ТипТитула", Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза));
	Для Каждого СтрокаЛенты Из НайденныеСтроки Цикл
		РезультатФункции = РезультатФункции Или СтрокаЛенты.Период <> Дата(1, 1, 1, 0, 0, 0);
	КонецЦикла;
	
	НайденныеСтроки = Лента.НайтиСтроки(Новый Структура("ТипТитула", Перечисления.Saby_ТипТитулаЭтрН.ВыдачаГруза));
	Для Каждого СтрокаЛенты Из НайденныеСтроки Цикл
		РезультатФункции = РезультатФункции Или СтрокаЛенты.Период <> Дата(1, 1, 1, 0, 0, 0);
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Процедура ТипОтметок_ПогрузкаТолькоПросмотр(ПараметрыЭтапов = Неопределено, ДоступныеРоли = Неопределено)
	
	Если ПараметрыЭтапов = Неопределено Тогда
		ПараметрыЭтапов = ПараметрыАктивныхЭтапов();
	КонецЕсли;
	Если ДоступныеРоли = Неопределено Тогда
		ДоступныеРоли = Документы.Saby_ТранспортнаяНакладная.РолиОрганизации(Объект.ДанныеЮрЛиц);
	КонецЕсли;
	
	Если ПараметрыЭтапов.ПриемкаГруза Или ПараметрыЭтапов.ВыдачаГруза Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипОтметок_Погрузка = ПредопределенноеЗначение("Перечисление.Saby_РолиКонтрагентов.Отправитель") Тогда
		Элементы.Группа_ОтметкиПогрузка.ТолькоПросмотр = Истина;
	Иначе
		Элементы.Группа_ОтметкиПогрузка.ТолькоПросмотр = Не ДоступныеРоли.Перевозчик;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТипОтметок_ВыгрузкаТолькоПросмотр(ПараметрыЭтапов = Неопределено, ДоступныеРоли = Неопределено)
	
	Если ПараметрыЭтапов = Неопределено Тогда
		ПараметрыЭтапов = ПараметрыАктивныхЭтапов();
	КонецЕсли;
	Если ДоступныеРоли = Неопределено Тогда
		ДоступныеРоли = Документы.Saby_ТранспортнаяНакладная.РолиОрганизации(Объект.ДанныеЮрЛиц);
	КонецЕсли;
	
	Если ПараметрыЭтапов.Черновик Или ПараметрыЭтапов.ПолучениеГруза Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипОтметок_Выгрузка = ПредопределенноеЗначение("Перечисление.Saby_РолиКонтрагентов.Получатель") Тогда
		Элементы.Группа_ОтметкиВыгрузкаТЧ.ТолькоПросмотр = Не ДоступныеРоли.Получатель Или ПараметрыЭтапов.ВыдачаГруза;
	Иначе
		Элементы.Группа_ОтметкиВыгрузкаТЧ.ТолькоПросмотр = Не ДоступныеРоли.Перевозчик Или ПараметрыЭтапов.ПриемкаГруза;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьДополнительныхКоманд()
				
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Кнопки по умолчанию отключены в доступности
		Возврат;
	КонецЕсли;
	
	ИзменитьСтоимостьДоступно         = Ложь;
	СогласоватьСтоимостьДоступно      = Ложь;
	ПереадресовкаДоступно             = Ложь;
	ЗаменаВодителяДоступно            = Ложь;
	УведомлениеОПереадресовкеДоступно = Ложь;
			
	ДопДействия = Новый Соответствие;
	Для Каждого Строка Из Объект.ДоступныеДействия Цикл 
		ДопДействия.Вставить(Строка.Действие, Истина);
	КонецЦикла;
	
	Если ДопДействия.Количество() Тогда  
		
		ПереадресовкаДоступно = 
			ДействиеДоступноНаТекущемЭтапе(ДопДействия, Перечисления.Saby_ДоступныеДействия.Переадресовка);
		
		ЗаменаВодителяДоступно = 
			ДействиеДоступноНаТекущемЭтапе(ДопДействия, Перечисления.Saby_ДоступныеДействия.ЗаменаВодителяТС);				
							
		УведомлениеОПереадресовкеДоступно = 
			ДействиеДоступноНаТекущемЭтапе(ДопДействия, Перечисления.Saby_ДоступныеДействия.УведомлениеОПереадресовке);
		
		ИзменитьСтоимостьДоступно = 
			ДействиеДоступноНаТекущемЭтапе(ДопДействия, Перечисления.Saby_ДоступныеДействия.ИзменитьСтоимость);
		 							
	КонецЕсли;
	
	СтруктураОтправителя = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(Объект.ДанныеЮрЛиц, "Отправитель");
	
	// исключение из правил, это отдельный этап
	// должен приходить только на участника процесса - ТК и ГО, поэтому нужна отсечка по ГО  
	ЭтоСогласованиеСтоимости = (ТекущийЭтап = Перечисления.Saby_ТипТитулаЭтрН.СогласованиеСтоимости);
	ЭтоОтправитель           = СтруктураОтправителя.Заполнена
		И Saby_ТНОбщегоНазначенияСервер.ОрганизацияПрисутствуетВБазе(СтруктураОтправителя.ИНН, СтруктураОтправителя.КПП);
		
	СогласоватьСтоимостьДоступно = ЭтоСогласованиеСтоимости И ЭтоОтправитель; 
	
	// Доступность кнопок
	Элементы.ФормаПереадресовка.Доступность            = ПереадресовкаДоступно;
	Элементы.ФормаЗаменаВодителя.Доступность           = ЗаменаВодителяДоступно;
	Элементы.ФормаИзменитьСтоимость.Доступность        = ИзменитьСтоимостьДоступно;
	Элементы.ФормаСогласоватьСтоимость.Доступность     = СогласоватьСтоимостьДоступно;
	Элементы.ФормаПереадресовкаУведомление.Доступность = УведомлениеОПереадресовкеДоступно; 
	
КонецПроцедуры

&НаСервере
Функция ДействиеДоступноНаТекущемЭтапе(ДопДействия, Действие)
	
	ЕстьДействие = ДопДействия.Получить(Действие);
	Если ЕстьДействие = Неопределено Тогда
		ДействиеДоступно = Ложь;
	Иначе 
		ДействиеДоступно = Истина;
	КонецЕсли;
			
	Возврат ДействиеДоступно;
	
КонецФункции

&НаКлиенте
Процедура ПослеВопросОЗаписиДанных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
        ЗаписатьДанныеДокумента();
		
		// продолжим выполнение команды
		ОбменДаннымиСБИС(ДополнительныеПараметры.ИмяКоманды); 
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменДаннымиСБИС(ИмяКоманды)
	
	// проверка что все изменения записаны
	Если Объект.Ссылка.Пустая() Или ЭтаФорма.Модифицированность Тогда
		
		ТекстВопроса =
			НСтр("ru = 'Перед выполнением обмена требуется сохранить документ. Записать данные?';
				|en = 'Do you want to save changes ?'"); 
		
		ДополнительныеПараметры = Новый Структура("ИмяКоманды", ИмяКоманды);
		
		Оповещение = Новый ОписаниеОповещения("ПослеВопросОЗаписиДанных", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);		
	    Возврат; 	
					
	КонецЕсли;	
	
	Если ИмяКоманды = "ВыгрузитьВСбис" Тогда
		ДанныеДляОбработки = Новый Массив;
		ПараметрыВыгрузки = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки(Объект.Ссылка);
		ПараметрыВыгрузки.ПроверятьПоляСОХ = Грузоотправитель_НеЯвляетсяОтправителем;
		ПараметрыВыгрузки.ПроверятьПоляОтгрузчика = Не Грузоотправитель_ОсуществляетОтгрузку;
		ДанныеДляОбработки.Добавить(ПараметрыВыгрузки);
	Иначе
		ДанныеДляОбработки = Новый Массив;
		ПараметрыЗагрузки = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыЗагрузки(Объект.Ссылка);
		Если ИмяКоманды = "ОбновитьАктивныйЭтап" Тогда
			ПараметрыЗагрузки.ТекущийТитул = АктивныйЭтапСтрокой;
			ПараметрыЗагрузки.ТолькоАктивныйЭтап = Истина;
		КонецЕсли;
		ПараметрыЗагрузки.ИзДокумента = Истина;
		ПараметрыЗагрузки.ИмяМетаданных = "Saby_ТранспортнаяНакладная";
		ДанныеДляОбработки.Добавить(ПараметрыЗагрузки);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	Saby_ТНОбщегоНазначенияКлиент.ВыполнитьКомандуСбис(ЭтаФорма, ИмяКоманды, ДанныеДляОбработки, ДополнительныеПараметры);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресВФорматеОбмена(Знач ЗначениеКИ)
		
	Возврат Saby_ТНОбщегоНазначенияСервер.АдресВФорматеОбмена(ЗначениеКИ);

КонецФункции

&НаКлиенте
Процедура ИзменитьТекстПодсказкиГрузоотправитель_ОсуществляетОтгрузку()
	Если Грузоотправитель_ОсуществляетОтгрузку Тогда
		ТекстПодсказки = "Отгрузку осуществляет грузоотправитель";
	Иначе
		ТекстПодсказки = "Отгрузку осуществляет лицо, отличное от грузоотправителя";
	КонецЕсли;	
	Элементы.Грузоотправитель_ОсуществляетОтгрузку.Подсказка = ТекстПодсказки;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанныеДокумента()
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", 
		?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));	
		
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура УстановкаСпискаДоступныхТиповКИ()
		
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ОтправительКонтактныеДанныеТип");
	МассивЭлементов.Добавить("ПолучательКонтактныеДанныеТип");
	МассивЭлементов.Добавить("ПеревозчикКонтактныеДанныеТип");
	МассивЭлементов.Добавить("ВладелецОбъектаКонтактныеДанныеТип");
	МассивЭлементов.Добавить("ОтгрузчикКонтактныеДанныеТип");
	
	Saby_ТНОбщегоНазначенияСервер.УстановкаСпискаДоступныхТиповКИ(ЭтаФорма, МассивЭлементов);
	   
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоОшибкамНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьДанныеПоОшибкамНаСервере();
	
	Saby_ТНОбщегоНазначенияКлиент.РасшифровкаЗаписиТаблицыОшибок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоОшибкамНаСервере(Знач Ошибки = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ссылка",                  Объект.Ссылка);
	ДополнительныеПараметры.Вставить("ПроверятьПоляСОХ",        Грузоотправитель_НеЯвляетсяОтправителем);
	ДополнительныеПараметры.Вставить("ПроверятьПоляОтгрузчика", Не Грузоотправитель_ОсуществляетОтгрузку);
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьДанныеПоОшибкам(
		ЭтаФорма,
		ДополнительныеПараметры,
		Ошибки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВнешнийВидЭлементовОшибок()
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДекорацию(Знач ПараметрыВыделенияДекорации) Экспорт
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьДекорацию(ЭтаФорма, ПараметрыВыделенияДекорации);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОтветственногоНаОсновании()
	
	Элементы.Отгрузка_ОтветственныйНаОсновании.СписокВыбора.Добавить("Должностные обязанности");
	Элементы.Отгрузка_ОтветственныйНаОсновании.СписокВыбора.Добавить(
		Справочники.Saby_ДокументыЭПД.ПустаяСсылка(), "Документ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВодителейДляВебКлиента()
	
	#Если ВебКлиент Тогда
		
		Элементы.Группа_Водители.Поведение                = ПоведениеОбычнойГруппы.Авто;
		Элементы.Группа_Водители.РастягиватьПоГоризонтали = Истина;
		Элементы.Группа_Водители.ОтображатьЗаголовок      = Ложь;
		Элементы.ВодителиСтрокой.Видимость                = Ложь;
		
	#КонецЕсли
	
КонецПроцедуры

#Область ИсторияСобытий

&НаКлиенте
Функция ПараметрыФормыРасшифровки(ИдентификаторТитула, НаименованиеТитула)
	
	РезультатФункции = ШаблонРезультата();
	РезультатФункции.ТипТитула = НаименованиеТитула;
	
	РезультатФункции.ИмяФормы            = "ФормаДинамическихТитулов";
	РезультатФункции.СсылкаНаДокумент    = Объект.Ссылка;
	РезультатФункции.ИдентификаторТитула = ИдентификаторТитула;
	
	РезультатФункции.ДоступныеДействия.Вставить(
		"УведомлениеОПереадресовкеДоступно", Элементы.ФормаПереадресовкаУведомление.Доступность);
	РезультатФункции.ДоступныеДействия.Вставить(
		"ПереадресовкаДоступна",             Элементы.ФормаПереадресовка.Доступность);
	РезультатФункции.ДоступныеДействия.Вставить(
		"ЗаменаВодителяДоступна",            Элементы.ФормаЗаменаВодителя.Доступность);
	РезультатФункции.ДоступныеДействия.Вставить(
		"ИзменениеСтоимостиДоступно",        Элементы.ФормаИзменитьСтоимость.Доступность);
	РезультатФункции.ДоступныеДействия.Вставить(
		"СогласованиеСтоимостиДоступно",     Элементы.ФормаСогласоватьСтоимость.Доступность);
	
	Если НаименованиеТитула = "ИзменениеСтоимости" Или НаименованиеТитула = "СогласованиеСтоимости" Тогда
		
		РезультатФункции.Вставить(
			"СтруктураОтправителя",
			Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(Объект.ДанныеЮрЛиц, "Отправитель"));
		РезультатФункции.Вставить(
			"СтруктураПеревозчика",
		Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(Объект.ДанныеЮрЛиц, "Перевозчик"));
		
	ИначеЕсли НаименованиеТитула = "УведомлениеОУточнении" Тогда
		
		РезультатФункции.ИмяФормы = "СтандартнаяФормаВвода";
		
	Иначе
		Возврат РезультатФункции;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ШаблонРезультата()
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ИмяФормы",            "");
	РезультатФункции.Вставить("СсылкаНаДокумент",    "");
	РезультатФункции.Вставить("ИдентификаторТитула", "");
	РезультатФункции.Вставить("ТипТитула",           "");
	РезультатФункции.Вставить("ДоступныеДействия",   Новый Структура);
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуТитула(НаименованиеТитула, ИдентификаторТитула = "", Описание = "") Экспорт
	
	ПараметрыФормы = ПараметрыФормыРасшифровки(ИдентификаторТитула, НаименованиеТитула);
	
	Если НаименованиеТитула = "УведомлениеОУточнении" Тогда		
		ПоказатьЗначение(, Описание);		
	Иначе
	
		ОткрытьФорму(
			"Документ.Saby_ТранспортнаяНакладная.Форма.ФормаДинамическихТитулов",
			ПараметрыФормы,
			ЭтотОбъект, , , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти // ИсторияСобытий

#Область Лента

&НаКлиенте
Процедура ЛентаВлево(Команда)
	
	СдвинутьЛенту(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛентаВправо(Команда)
	
	СдвинутьЛенту(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТитулОбработкаНавигационнойСсылки(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Saby_ТНОбщегоНазначенияКлиент.ОбработкаНавигационнойСсылкиЛенты(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьРеквизитИзТитула(СтрокаЛенты) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаЛенты.Описание) Тогда
		ПоказатьЗначение(, СтрокаЛенты.Описание);
	КонецЕсли;
	
	Если СтрокаЛенты.НаименованиеТитула = "Погрузка" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ОтправительСтрокой;
	ИначеЕсли СтрокаЛенты.НаименованиеТитула = "ПолучениеГруза" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Приемка_ДатаПрибыл;
	ИначеЕсли СтрокаЛенты.НаименованиеТитула = "ПриемкаГруза" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Выгрузка_ДатаПрибыл;
	ИначеЕсли СтрокаЛенты.НаименованиеТитула = "ВыдачаГруза" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Перевозчик_ВыгрузкаДатаПрибыл;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТитулОтрицательноЗавершен(СтрокаЛенты) Экспорт
	
	Если СтрокаЛенты.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.ПриемкаГруза
		Или СтрокаЛенты.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.ВыдачаГруза Тогда
		РезультатФункции = ЗначениеЗаполнено(СтрокаЛенты.Описание);
	Иначе
		РезультатФункции = СтрокаЛенты.НаименованиеТитула = "УведомлениеОУточнении";
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Процедура СдвинутьЛенту(Знач Вправо)
	
	Saby_ТНОбщегоНазначенияСервер.СдвинутьЛенту(ЭтаФорма, Вправо);
	
КонецПроцедуры

#КонецОбласти // Лента

&НаКлиенте
Процедура ОткрытьПечатнуюФорму(Результат, ДополнительныеПараметры) Экспорт
	
	Saby_ТНОбщегоНазначенияКлиент.СоздатьИОткрытьПечатнуюФорму(Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбновленияДанныхТранспортныхСредств(Результат, ДополнительныеПараметры) Экспорт
	
	ПослеОбновленияДанныхТранспортныхСредствНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбновленияДанныхТранспортныхСредствНаСервере()
	
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьТранспортныеСредстваНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКодФилиала(Знач КодФилиала = Неопределено)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Перечисления.Saby_РолиКонтрагентов.Отправитель);
	
	НайденныеСтроки = Объект.ДанныеЮрЛиц.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОтправителя = НайденныеСтроки[0];
	Если КодФилиала <> Неопределено Тогда
		СтрокаОтправителя.КодФилиала = КодФилиала;
	КонецЕсли;
	
	ЭтотОбъект.КодФилиала = СтрокаОтправителя.КодФилиала;
	
КонецПроцедуры

#Область ДанныеЮрЛиц

&НаКлиенте
Процедура ЗаполнитьЮрЛицоКопированием(РольСтрокойПриемник, РольСтрокойИсточник)
	
	СтруктураИсточник = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(Объект.ДанныеЮрЛиц, РольСтрокойИсточник);
	СтруктураПриемник = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(Объект.ДанныеЮрЛиц, РольСтрокойПриемник);
	
	ЗаполнениеРазрешено = Истина;
	Если РольСтрокойПриемник = "ВладелецОбъекта" Тогда
		ЗаполнениеРазрешено = СтруктураИсточник.Заполнена
			И Не СтруктураПриемник.Заполнена
			И Объект.Владелец_Тип = ПредопределенноеЗначение("Перечисление.Saby_ВладелецОбъектаОтгрузки.Отправитель");
	КонецЕсли;
	
	Если Не ЗаполнениеРазрешено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьЮрЛицо(РольСтрокойПриемник);
	
	Saby_ТНОбщегоНазначенияКлиентСервер.СкопироватьДанныеЮрЛица(Объект, СтруктураПриемник, СтруктураИсточник);
	
	ЭтаФорма[РольСтрокойПриемник + "Строкой"] = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		СтруктураИсточник.НаименованиеОрганизации);
	
	РолиЮрЛиц    = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, РольСтрокойПриемник);
	ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(РолиЮрЛиц);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЮрЛицо(РольСтрокой)
	
	Saby_ТНОбщегоНазначенияКлиентСервер.УдалитьСтрокиПоРоли(Объект.ДанныеЮрЛиц,      РольСтрокой);
	Saby_ТНОбщегоНазначенияКлиентСервер.УдалитьСтрокиПоРоли(Объект.КонтактныеДанные, РольСтрокой);
	
	ЭтаФорма[РольСтрокой + "Строкой"] = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли("");
		
	ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(РольСтрокой);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметры);
	
КонецПроцедуры

#КонецОбласти // ДанныеЮрЛиц

&НаКлиенте
Процедура ПослеРедактированияОтветственногоЛица(СтруктураОтветственногоЛица, РольСтрокой) Экспорт
	
	Если РольСтрокой = "Ответственный" Тогда
		ЭтаФорма.ОтветственныйОтгрузка = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеФИО(
			СтруктураОтветственногоЛица);
		Если Не ЗначениеЗаполнено(ЭтаФорма.ОтветственныйОтгрузка) Тогда
			ЭтаФорма.ОтветственныйОтгрузка = "Заполнить";
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресаПогрузкиВыгрузки(РольСтрокой)

	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, РольСтрокой);
	
	ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(
		РолиЮрЛиц, 
		Объект.ДанныеЮрЛиц, 
		Объект.КонтактныеДанные);
	
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьАдресаПогрузкиДоставки(ЭтаФорма, ДопПараметры);
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
