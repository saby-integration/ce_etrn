
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НачальноеЗаполнениеПараметров();
	
	ЗаполнениеДанныхПоТитулам();
	
	ОбновитьВидимостьИДоступностьЭлементов(Истина);
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.ЭтоРасшифровкаИзменений Тогда
		Оповестить("Saby_ПрочитанДинамическийТитул", ИдентификаторТитула, ВладелецФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Saby_ОбновитьДокумент" И Источник = ЭтаФорма.УникальныйИдентификатор Тогда
		
		Оповестить("Saby_ОбновитьДокумент", ИдентификаторТитула, ВладелецФормы.УникальныйИдентификатор);
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "Saby_СписокДокументов" Тогда
		
		Если Параметр.ЭтоДинамическийТитул Тогда			
			ОбновитьДанныеПоОшибкамНаСервере(Параметр.СписокДокументов.Получить(СсылкаНаДокумент));			
		КонецЕсли;
		
	Иначе		
		Возврат;		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область События_ЗаменаВодителяИлиТС
 
 &НаКлиенте
Процедура ТранспортноеСредствоСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	ПроцедураПослеОбновленияДанныхТранспортныхСредств = Новый ОписаниеОповещения(
		"ПослеОбновленияДанныхТранспортныхСредств",
		ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияКлиент.ТранспортноеСредствоСтрокойНажатие(
		ЭтаФорма,
		СтандартнаяОбработка,
		ПроцедураПослеОбновленияДанныхТранспортныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	Saby_ТНОбщегоНазначенияКлиент.ПрицепыСтрокойНажатие(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СпецРазрешенияПослеУдаления(Элемент)
	РасчетКоличестваСпецРазрешений();
КонецПроцедуры

&НаКлиенте
Процедура СпецРазрешенияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РасчетКоличестваСпецРазрешений();
КонецПроцедуры

#КонецОбласти // События_ЗаменаВодителяИлиТС

#Область События_Переадресовка

&НаКлиенте
Процедура ПолучательСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПроцедураПослеИзмененияПолучателя = Новый ОписаниеОповещения("ПроцедураПослеИзмененияПолучателя", ЭтотОбъект);
	
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(Элемент.Имя, Элемент.Имя);
	ПараметрыРеквизитаФормы.ТолькоПросмотр = Элементы.ГруппаЗаменаПолучателя.ТолькоПросмотр;
	
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(
		ЭтаФорма, 
		"Получатель", 
		ПараметрыРеквизитаФормы,
		ПроцедураПослеИзмененияПолучателя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцедураПослеИзмененияПолучателя(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда		
		
		ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(
			"Получатель", 
			ЭтаФорма.ДанныеЮрЛиц, 
			ЭтаФорма.КонтактныеДанные);
		
		Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьАдресаПогрузкиДоставки(ЭтаФорма, ДопПараметры);	
		
		ОбновитьВидимостьИДоступностьЭлементов();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Получатель_ТелефонПриИзменении(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонПриИзменении(ЭтаФорма, Получатель_Телефон, "Получатель", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Получатель_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     "Получатель");
	ПараметрыВыбораТелефона.Вставить("Значение", Получатель_Телефон);
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонНачалоВыбора(ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтактныеДанные

&НаКлиенте
Процедура ПолучательКонтактныеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	СтруктураДанныхЮрЛица = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(ЭтаФорма.ДанныеЮрЛиц, "Получатель");
	
	Если Не СтруктураДанныхЮрЛица.Заполнена Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан Получатель!";
		Сообщение.Поле  = "ПолучательСтрокой";
		Сообщение.Сообщить();		
		Отказ = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактныеДанныеПослеУдаления(Элемент)
	
	ДопПараметрыОбновленияКИ = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ("Получатель");
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметрыОбновленияКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактныеДанныеЗначениеПриИзменении(Элемент)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Получатель");
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхПриИзменении(
		ЭтаФорма, Элементы.ПолучательКонтактныеДанные.ТекущиеДанные, РолиЮрЛиц);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактныеДанныеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Получатель");
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхНачалоВыбора(
		ЭтаФорма, Элементы.ПолучательКонтактныеДанные.ТекущиеДанные, РолиЮрЛиц, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактныеДанныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	Если НоваяСтрока Тогда 
		
		Роль = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.Saby_РолиКонтрагентов.ПустаяСсылка");
		
		Отбор = Новый Структура;
		Отбор.Вставить("Роль", Роль);
		
		НайденныеСтроки = ЭтаФорма.КонтактныеДанные.НайтиСтроки(Отбор);
		Для Каждого Строка Из НайденныеСтроки Цикл 
			Строка.Роль                   = Элементы.ПолучательКонтактныеДанные.ОтборСтрок.Роль;
			Строка.КлючСтроки_ДанныеЮрЛиц = Элементы.ПолучательКонтактныеДанные.ОтборСтрок.КлючСтроки_ДанныеЮрЛиц;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыКонтактныеДанные

&НаКлиенте
Процедура АдресДоставкиНажатие(Элемент, СтандартнаяОбработка)

	ПараметрыВыбораАдреса = Новый Структура;
	ПараметрыВыбораАдреса.Вставить("Роль",     "Получатель");
	ПараметрыВыбораАдреса.Вставить("Значение", АдресДоставкиЗначение);
	
	Saby_ТНОбщегоНазначенияКлиент.АдресНачалоВыбора(ЭтаФорма, ПараметрыВыбораАдреса, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиПереадресовкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
   РедактированиеОтметок("ОтметкиПереадресовка", НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоставитьДатаПриИзменении(Элемент)
	
	СобратьДатуВремяПоРеквизитам("Отправитель_ДоставитьДо", "ДоставитьДата", "ДоставитьВремя");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоставитьВремяПриИзменении(Элемент)
	
	СобратьДатуВремяПоРеквизитам("Отправитель_ДоставитьДо", "ДоставитьДата", "ДоставитьВремя");
	
КонецПроцедуры

#Область Оформил

&НаКлиенте
Процедура ИзменитьДанныеОформил()
			
	ПараметрыФормы = Saby_ТНОбщегоНазначенияСервер.ДесериализоватьЗначение(ЭтаФорма.ОформилСтруктура);
	
	ПараметрыФормы.Вставить("ТолькоПросмотр", Элементы.ГруппаОформил.ТолькоПросмотр);
	ПараметрыФормы.Вставить("Наименование",   "Оформил");
	ПараметрыФормы.Вставить("РольСтрокой",    "ОформительДокумента");
		
	Saby_ТНОбщегоНазначенияКлиент.ИзменитьДанныеВодителяОтветственногоЛица(
		ЭтаФорма, 
		ПараметрыФормы, 
		"ПослеВводаДанныхОформившего"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДанныхОформившего(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда 
		
		Структура = Новый Структура;
		Структура.Вставить("Фамилия",          РезультатЗакрытия.Фамилия);
		Структура.Вставить("Имя",              РезультатЗакрытия.Имя);
		Структура.Вставить("Отчество",         РезультатЗакрытия.Отчество);
		Структура.Вставить("Телефоны",         РезультатЗакрытия.Телефоны);
		Структура.Вставить("ЭлектроннаяПочта", РезультатЗакрытия.ЭлектроннаяПочта);
				
		ОбновитьОформившего(Структура);
		
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ОформилНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ИзменитьДанныеОформил();
	
КонецПроцедуры

&НаКлиенте
Процедура Оформил_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     "Оформил");
	ПараметрыВыбораТелефона.Вставить("Значение", Оформил_Телефон);
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонНачалоВыбора(ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти // События_Переадресовка

#Область События_ИзменениеСтоимости

#Область БанковскиеСчета

&НаКлиенте
Процедура РасчетныйСчетПеревозчикПриИзменении(Элемент)
	
	ЗаполнитьРеквизитыСчета(ЭтаФорма.РасчетныйСчетПеревозчик, "Перевозчик");
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйСчетПриИзменении(Элемент)
	
	ЗаполнитьРеквизитыСчета(ЭтаФорма.РасчетныйСчет);
	
КонецПроцедуры

#КонецОбласти // БанковскиеСчета 

&НаКлиенте
Процедура ТипПлательщикПриИзменении(Элемент)
	
	ТипПлательщикПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДругойПлательщикСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПроцедураПослеИзмененияПлательщика = Новый ОписаниеОповещения("ПослеИзмененияПлательщика", ЭтотОбъект);
	
	ПараметрыРеквизитаФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыРеквизитаФормы(Элемент.Имя, Элемент.Имя);
	ПараметрыРеквизитаФормы.ТолькоПросмотр = Элементы.ГруппаПлательщик.ТолькоПросмотр;
	Saby_ТНОбщегоНазначенияКлиент.ЮрЛицоНажатие(
		ЭтаФорма, "ПустаяСсылка", ПараметрыРеквизитаФормы, ПроцедураПослеИзмененияПлательщика);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияПлательщика(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураПлательщика = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(ДанныеЮрЛиц, "ПустаяСсылка");
	
	ЭтаФорма.РасчетныйСчет = РасчетныйСчетПоУмолчанию(СтруктураПлательщика);
	
	Элементы.РасчетныйСчет.ОграничениеТипа = ТипыБанковскихСчетов(СтруктураПлательщика);
	
	ЗаполнитьРеквизитыСчета(ЭтаФорма.РасчетныйСчет);
	
КонецПроцедуры

#КонецОбласти // События_ИзменениеСтоимости

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПрицепы

&НаКлиенте
Процедура ПрицепыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПроцедураПослеОбновленияДанныхТранспортныхСредств = Новый ОписаниеОповещения(
		"ПослеОбновленияДанныхТранспортныхСредств",
		ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияКлиент.ПрицепыВыбор(
		ЭтаФорма,
		ВыбраннаяСтрока,
		СтандартнаяОбработка,
		ПроцедураПослеОбновленияДанныхТранспортныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПроцедураПослеОбновленияДанныхТранспортныхСредств = Новый ОписаниеОповещения(
		"ПослеОбновленияДанныхТранспортныхСредств",
		ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияКлиент.ПрицепыПриНачалеРедактирования(
		ЭтаФорма,
		ПроцедураПослеОбновленияДанныхТранспортныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПослеУдаления(Элемент)
	
	ПослеОбновленияДанныхТранспортныхСредств(Неопределено, Неопределено);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПрицепы

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибок

&НаКлиенте
Процедура ТаблицаОшибокПриАктивизацииСтроки(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ТаблицаОшибокПриАктивизацииСтроки(ЭтаФорма);
	
	ПараметрыВыделенияДекорации = Saby_ТНОбщегоНазначенияКлиент.ПараметрыВыделенияДекорации(ЭтаФорма);
	Если ПараметрыВыделенияДекорации.НужноОбновитьДекорацию Тогда
		ОбновитьДекорацию(ПараметрыВыделенияДекорации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибок

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаменаВодители(Команда)
	
    Элементы.ЗаменаВодители.Пометка = Не Элементы.ЗаменаВодители.Пометка;
	УстановитьШрифтКнопки(Элементы.ЗаменаВодители);
	ВидимостьЭлементовПоВидамЗамены();
	
	Если Элементы.ГруппаОшибки.Видимость Тогда
		ОбновитьДанныеПоОшибкамНаКлиенте(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаПрицепы(Команда)

	Элементы.ЗаменаПрицепы.Пометка = Не Элементы.ЗаменаПрицепы.Пометка;
	УстановитьШрифтКнопки(Элементы.ЗаменаПрицепы);
	ВидимостьЭлементовПоВидамЗамены();
	
	Если Элементы.ГруппаОшибки.Видимость Тогда
		ОбновитьДанныеПоОшибкамНаКлиенте(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаТС(Команда)
	
	Элементы.ЗаменаТС.Пометка = Не Элементы.ЗаменаТС.Пометка;
	УстановитьШрифтКнопки(Элементы.ЗаменаТС);
	ВидимостьЭлементовПоВидамЗамены();
	
	Если Элементы.ГруппаОшибки.Видимость Тогда
		ОбновитьДанныеПоОшибкамНаКлиенте(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОшибки(Команда)
	
	Элементы.ФормаПоказатьСкрытьОшибки.Пометка = Не Элементы.ФормаПоказатьСкрытьОшибки.Пометка;
	ОбновитьВнешнийВидЭлементовОшибок();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВнешнийВидЭлементовОшибок()
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоОшибкам(Команда)
	
	ПроцедураОбновитьДанныеПоОшибкамНаКлиенте = Новый ОписаниеОповещения(
		"ОбновитьДанныеПоОшибкамНаКлиенте",
		ЭтотОбъект);
	
	Saby_ТНОбщегоНазначенияКлиент.ПроверитьМодифицированностьИПродолжитьВыполнение(
		ПроцедураОбновитьДанныеПоОшибкамНаКлиенте, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьВСогласовании(Команда)
	
	ПроцедураОтказатьВСогласованииПослеВводаПричины = Новый ОписаниеОповещения(
		"ОтказатьВСогласованииПослеВводаПричины", ЭтотОбъект);
	
	ПоказатьВводСтроки(ПроцедураОтказатьВСогласованииПослеВводаПричины, Причина, "Введите причину отказа", 255);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы 

#Область СлужебныеПроцедурыИФункции

#Область Служебные_Общие

&НаСервере
Процедура НачальноеЗаполнениеПараметров()
	
	ЭтаФорма.СсылкаНаДокумент        = Параметры.СсылкаНаДокумент;
	ЭтаФорма.ИдентификаторТитула     = Параметры.ИдентификаторТитула;
	ЭтаФорма.ТипТитула               = ТитулЭТрН(Параметры.ТипТитула);
	ЭтаФорма.ЭтоРасшифровкаИзменений = ЗначениеЗаполнено(ЭтаФорма.ИдентификаторТитула);
	ЭтаФорма.ДоступныеДействия       = Параметры.ДоступныеДействия;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеДанныхПоТитулам()
	
	Если ЭтаФорма.ЭтоРасшифровкаИзменений Тогда
		Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеДинамическогоТитула(ЭтотОбъект, СсылкаНаДокумент, ИдентификаторТитула);
	КонецЕсли;	
		
	Если ЭтаФорма.ТипТитула = ТитулЭТрН("ЗаменаВодителяТС") Тогда
		ЗаполнитьДанныеТитула_ЗаменаВодителяИлиТС();
	ИначеЕсли ЭтаФорма.ТипТитула = ТитулЭТрН("ПереадресовкаУведомление")		
		Или ЭтаФорма.ТипТитула = ТитулЭТрН("Переадресовка") Тогда		
		ЗаполнитьДанныеТитула_Переадресовка();
	ИначеЕсли ЭтаФорма.ТипТитула = ТитулЭТрН("ИзменениеСтоимости")
		Или ЭтаФорма.ТипТитула = ТитулЭТрН("СогласованиеСтоимости") Тогда
		ЗаполнитьДанныеТитула_Стоимости();
	Иначе
		ВызватьИсключение("Не описанный тип динамического титула ЭТрН" + СокрЛП(ТипТитула));
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИДоступностьЭлементов(Знач ВызовПриСоздании = Ложь)
	
	// отключаем страницы
	Элементы.Страницы_ДТ.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
					
	ЭтоЗаменаВодителяТС   = ЭтаФорма.ТипТитула = ТитулЭТрН("ЗаменаВодителяТС");	
	ЭтоИзменениеСтоимости = ЭтаФорма.ТипТитула = ТитулЭТрН("ИзменениеСтоимости") 
								Или ЭтаФорма.ТипТитула = ТитулЭТрН("СогласованиеСтоимости");		
											
	ЭтоПереадресовка      = ЭтаФорма.ТипТитула = ТитулЭТрН("ПереадресовкаУведомление")
								Или ЭтаФорма.ТипТитула = ТитулЭТрН("Переадресовка");														

	СвойстаЭлементовФормы = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыСвойствЭлементовФормы();							
			
	Если ЭтоЗаменаВодителяТС Тогда		
		УстановкаСвойствЭлементов_ЗаменаВодителяИлиТС(СвойстаЭлементовФормы, ВызовПриСоздании);		
	Иначе	
		СвойстаЭлементовФормы.Видимость_Снять.Добавить("ДТ_Замена");
	КонецЕсли;
	
	Если ЭтоИзменениеСтоимости Тогда		
		УстановкаСвойствЭлементов_ИзменениеСтоимости(СвойстаЭлементовФормы, ВызовПриСоздании);		
	Иначе	
		
		СвойстаЭлементовФормы.Видимость_Снять.Добавить("ДТ_Стоимость");
		
		// Убираем кнопку в командной панели
		Если ВызовПриСоздании Тогда
			СвойстаЭлементовФормы.Видимость_Снять.Добавить("ОтказатьВСогласовании");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереадресовка Тогда		
		УстановкаСвойствЭлементов_Переадресовка(СвойстаЭлементовФормы, ВызовПриСоздании);		
	Иначе	
		СвойстаЭлементовФормы.Видимость_Снять.Добавить("ДТ_Переадресовка");
	КонецЕсли;	
	
	Saby_ТНОбщегоНазначенияКлиентСервер.ГрупповаяУстановкаСвойствЭлементовФормы(ЭтаФорма, СвойстаЭлементовФормы);
	
	Если ЭтоЗаменаВодителяТС Тогда
		
		// Пометки на переключателях
		Элементы.ЗаменаВодители.Пометка = Элементы.ГруппаВодители.Видимость;
		Элементы.ЗаменаТС.Пометка       = Элементы.ГруппаТС.Видимость;
		Элементы.ЗаменаПрицепы.Пометка  = Элементы.ГруппаПрицепы.Видимость;
		
		УстановитьШрифтКнопки(Элементы.ЗаменаВодители);
		УстановитьШрифтКнопки(Элементы.ЗаменаТС);
		УстановитьШрифтКнопки(Элементы.ЗаменаПрицепы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТитулЭТрН(Знач ТитулСтрокой)
	
	Возврат Перечисления.Saby_ТипТитулаЭтрН[ТитулСтрокой];
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОбмен(Результат, ДополнительныеПараметры) Экспорт

	ДанныеДляВыгрузки = Новый Массив;
	ПараметрыВыгрузки = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки(СсылкаНаДокумент);
		
	ПараметрыВыгрузки.Этап = РасчетЭтапа(ЭтаФорма.ТипТитула);	
	
	Если ЭтаФорма.ТипТитула = ТитулЭТрН("СогласованиеСтоимости") Тогда		
		
		Если ДополнительныеПараметры <> Неопределено Тогда
			ПараметрыВыгрузки.ОтрицательныйПереход          = ДополнительныеПараметры.ОтказВСогласовании;
			ПараметрыВыгрузки.ПричинаОтрицательногоПерехода = ДополнительныеПараметры.ПричинаОтказа;
		КонецЕсли;
				
	КонецЕсли;
	
	ПараметрыВыгрузки.ДанныеДокумента = ДанныеТитула();
	ДанныеДляВыгрузки.Добавить(ПараметрыВыгрузки);
	
	ДополнительныеПараметры = Новый Структура;
	
	Saby_ТНОбщегоНазначенияКлиент.ВыполнитьКомандуСбис(
		ЭтаФорма, "ЗагрузитьВСбисДинамическийТитул", ДанныеДляВыгрузки, ДополнительныеПараметры);
				
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасчетЭтапа(Знач Титул)

	Этап = Новый Соответствие;
	Этап.Вставить(ТитулЭТрН("ЗаменаВодителяТС"),         "Замена водителей/ТС");
	Этап.Вставить(ТитулЭТрН("ИзменениеСтоимости"),       "Изменение стоимости");
	Этап.Вставить(ТитулЭТрН("СогласованиеСтоимости"),    "Согласовать стоимость");
	Этап.Вставить(ТитулЭТрН("ПереадресовкаУведомление"), "Уведомление о переадресовке");
	Этап.Вставить(ТитулЭТрН("Переадресовка"),            "Переадресовка");
	
	Возврат Этап[Титул];
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовки(ЗаголовокФормы, ЗаголовокКоманды)
	
	Элементы.ВыполнитьОбмен.Заголовок = ЗаголовокКоманды;
	ЭтаФорма.Заголовок                = ЗаголовокФормы;
	
КонецПроцедуры

#КонецОбласти // Служебные_Общие

#Область Заполнение_ЗаменаВодителяИлиТС

&НаСервере
Процедура ЗаполнитьДанныеТитула_ЗаменаВодителяИлиТС()
						
	Если Не ЭтаФорма.ЭтоРасшифровкаИзменений Тогда			
		ЭтаФорма.ДатаВремяЗамены = ТекущаяДатаСеанса();		
	КонецЕсли;
	
	РазложитьДатуПоРеквизитам(Истина);
	
	ЭтаФорма.ТипСмены = ?(ЗначениеЗаполнено(ДокументЗамены), "Документ", "Описание");
	
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьТранспортныеСредстваНаФорме(ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьВодителейНаФорме(ЭтаФорма);
		
	ЭтаФорма.СпецРазрешенияКоличество = ЭтаФорма.СпецРазрешения.Количество();
	
	УстановитьЗаголовки("Замена водителей / ТС", "Выполнить замену");
	
	Saby_ТНОбщегоНазначенияСервер.УстановитьОтборТаблицыОтветственных(Элементы.Водители, "Водитель");
	
КонецПроцедуры

#КонецОбласти // Заполнение_ЗаменаВодителяИлиТС 

#Область Заполнение_Переадресовка

&НаСервере
Процедура ЗаполнитьДанныеТитула_Переадресовка()
			
	ЭтаФорма.ЭтоУведомление = ЭтаФорма.ТипТитула = ТитулЭТрН("ПереадресовкаУведомление");

	Если ЭтаФорма.ЭтоРасшифровкаИзменений Тогда
		РазложитьДатуПоРеквизитам();
	Иначе
		
		Если ЭтаФорма.ЭтоУведомление Тогда
			Пользователь = Пользователи.ТекущийПользователь();
			ЭтаФорма.Оформил = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
		Иначе
			// заполнение переадресовки на основании уведомления о переадресовке
			ЗагрузитьДанныеУведомленияОПереадресовке();
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяРолиПолучатель = "Получатель";

	ОтборИнформацииПоКонтактнымДанным("ПолучательКонтактныеДанные", ИмяРолиПолучатель);
	
	РолиЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, ИмяРолиПолучатель);
	ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(РолиЮрЛиц);
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметры);
	
	ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ("Оформил");
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметры);
	
	ОбновитьЭлектроннаяПочтаОформил();
	
	УстановкаСпискаДоступныхТиповКИ();
	
	ОбновитьОформившего();
		
	// Заголовки
	Если ЭтаФорма.ЭтоУведомление Тогда
		
		ЗаголовокКоманды = "Уведомить";
		ЗаголовокФормы   = "Уведомление о переадресовке";
		
	Иначе
		
		ЗаголовокКоманды = "Переадресовать";
		ЗаголовокФормы   = "Переадресовка";
				
	КонецЕсли;
	
	УстановитьЗаголовки(ЗаголовокФормы, ЗаголовокКоманды);
	
	ЭтаФорма.ПолучательСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		Этаформа.ДанныеЮрЛиц, ИмяРолиПолучатель);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеУведомленияОПереадресовке()
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Saby_ДанныеТитуловСрезПоследних.Период КАК Период,
	|	Saby_ДанныеТитуловСрезПоследних.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	Saby_ДанныеТитуловСрезПоследних.ТипТитула КАК ТипТитула,
	|	Saby_ДанныеТитуловСрезПоследних.ИдентификаторТитула КАК ИдентификаторТитула
	|ИЗ
	|	РегистрСведений.Saby_ДанныеТитулов.СрезПоследних(
	|			,
	|			СсылкаНаДокумент = &СсылкаНаДокумент
	|				И ТипТитула = &Уведомление) КАК Saby_ДанныеТитуловСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Saby_ДанныеТитуловСрезПоследних.Период КАК Период,
	|	Saby_ДанныеТитуловСрезПоследних.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	Saby_ДанныеТитуловСрезПоследних.ТипТитула КАК ТипТитула,
	|	Saby_ДанныеТитуловСрезПоследних.ИдентификаторТитула КАК ИдентификаторТитула
	|ИЗ
	|	РегистрСведений.Saby_ДанныеТитулов.СрезПоследних(
	|			,
	|			СсылкаНаДокумент = &СсылкаНаДокумент
	|				И ТипТитула = &Переадресовка) КАК Saby_ДанныеТитуловСрезПоследних";
	
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	ЗапросДанных.УстановитьПараметр("Переадресовка",    ТитулЭтрН("Переадресовка"));
	ЗапросДанных.УстановитьПараметр("Уведомление",      ТитулЭтрН("ПереадресовкаУведомление"));
	
	Результат = ЗапросДанных.ВыполнитьПакет();
	
	ВыборкаПереадресовкаУведомление = Результат[Результат.ВГраница() - 1].Выбрать();
	ВыборкаПереадресовка            = Результат[Результат.ВГраница()].Выбрать();
	
	Если ВыборкаПереадресовкаУведомление.Следующий() Тогда
		
		ДатаПоследнейПереадресовки = Дата(1, 1, 1, 0, 0, 0);
		Если ВыборкаПереадресовка.Следующий() Тогда
			ДатаПоследнейПереадресовки = ВыборкаПереадресовка.Период;
		КонецЕсли;
		
		// Уже была переадресовка по уведомлению
		Если ВыборкаПереадресовкаУведомление.Период < ДатаПоследнейПереадресовки Тогда
			Возврат;
		КонецЕсли;
		
		ЭтаФорма.ЗаполнениеПоДаннымПредыдущегоТитула = Истина;
		
		Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеДинамическогоТитула(
			ЭтотОбъект, СсылкаНаДокумент, ВыборкаПереадресовкаУведомление.ИдентификаторТитула);
		
		РазложитьДатуПоРеквизитам();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтборИнформацииПоКонтактнымДанным(ИмяТЧ, Значение)
	
	Роль = Перечисления.Saby_РолиКонтрагентов[Значение];
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Роль", Роль);
	Элементы[ИмяТЧ].ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураПоиска);
					
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлектроннаяПочтаОформил()
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Перечисления.Saby_РолиКонтрагентов.ПустаяСсылка());
	Отбор.Вставить("Тип",  Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	НайденныеСтроки = КонтактныеДанные.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		ЭтаФорма.Оформил_ЭлектроннаяПочта = НайденныеСтроки[0].Значение;
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура УстановкаСпискаДоступныхТиповКИ()
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ПолучательКонтактныеДанныеТип");
	
	Saby_ТНОбщегоНазначенияСервер.УстановкаСпискаДоступныхТиповКИ(ЭтаФорма, МассивЭлементов);
	   
КонецПроцедуры

&НаСервере
Процедура ОбновитьОформившего(Структура = Неопределено)
	
	Если Структура <> Неопределено Тогда
		
		ЭтаФорма.ОформилСтруктура = Saby_ТНОбщегоНазначенияСервер.СериализоватьЗначение(Структура);
		
		Телефоны = Saby_ТНОбщегоНазначенияСервер.ДесериализоватьЗначение(Структура.Телефоны);
		Если Телефоны.Количество() Тогда
			ЭтаФорма.Оформил_Телефон = Телефоны[0];
		Иначе 	
		    ЭтаФорма.Оформил_Телефон = "";
		КонецЕсли;
		
		ЭлектроннаяПочта = Saby_ТНОбщегоНазначенияСервер.ДесериализоватьЗначение(Структура.ЭлектроннаяПочта);
		Если ЭлектроннаяПочта.Количество() Тогда
			ЭтаФорма.Оформил_ЭлектроннаяПочта = ЭлектроннаяПочта[0];
		Иначе 	
		    ЭтаФорма.Оформил_ЭлектроннаяПочта = "";
		КонецЕсли;
		
	Иначе
		Структура = ЭтаФорма.ОформилСтруктура;
	КонецЕсли;
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьОтветственногоНаФорме(ЭтаФорма, "Оформил", Структура);
	
КонецПроцедуры

#КонецОбласти // Заполнение_Переадресовка

#Область Заполнение_Стоимости

&НаСервере
Процедура ЗаполнитьДанныеТитула_Стоимости()
	
	СтрокаОтправителя = ЭтаФорма.ДанныеЮрЛиц.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаОтправителя, Параметры.СтруктураОтправителя);
	
	СтрокаПеревозчика = ЭтаФорма.ДанныеЮрЛиц.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПеревозчика, Параметры.СтруктураПеревозчика);
	
	ЭтаФорма.ЭтоСогласование = (ЭтаФорма.ТипТитула = ТитулЭТрН("СогласованиеСтоимости"));	
			
	УстановкаТипаРасчетныхСчетов();
	
	// просмотр данных согласования из ленты
	Если ЭтаФорма.ЭтоРасшифровкаИзменений Тогда
					
		Если ЭтаФорма.Ставка = "" Тогда
			ЭтаФорма.Ставка = "без НДС";
		КонецЕсли;
		
	КонецЕсли;
		
	// при согласовании может быть и другой
	Если Не ЗначениеЗаполнено(ТипПлательщик) Тогда 
		ТипПлательщик = "Отправитель";   
	КонецЕсли;
	
	Если ЭтоРасшифровкаИзменений Тогда		
		
		// Если открыли форму из ленты и согласование уже прошло 
		// то блокируем от изменений
		ЭтаФорма.ТолькоПросмотр = ЭтаФорма.ЭтоСогласование;
		ЗаполнитьТитулИзмененияСтоимости(ЭтаФорма.ИдентификаторТитула);
		
	Иначе 
		
		Если Не ЭтаФорма.ЭтоСогласование Тогда
			ЭтаФорма.РасчетныйСчетПеревозчик = РасчетныйСчетПоУмолчанию(СтрокаПеревозчика);
			ЗаполнитьРеквизитыСчета(ЭтаФорма.РасчетныйСчетПеревозчик, "Перевозчик");
		Иначе
			
			СтрокаПлательщика = ЭтаФорма.ДанныеЮрЛиц.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПлательщика, Параметры.СтруктураОтправителя);
			СтрокаПлательщика.Роль = Перечисления.Saby_РолиКонтрагентов.ПустаяСсылка();
			
			ЭтаФорма.РасчетныйСчет = РасчетныйСчетПоУмолчанию(СтрокаПлательщика);
			ЗаполнитьРеквизитыСчета(ЭтаФорма.РасчетныйСчет);
			ЗаполнитьТитулИзмененияСтоимости(Неопределено);
		КонецЕсли;
		
		УстановкаСвязейПараметровВыбора();
		
	КонецЕсли;
	
	// Заголовки
	Если ЭтаФорма.ЭтоСогласование Тогда
		
		ЗаголовокКоманды = "Согласовать стоимость";
		ЗаголовокФормы   = "Согласование стоимости";
		
	Иначе
		
		ЗаголовокКоманды = "Изменить стоимость";
		ЗаголовокФормы   = "Изменение стоимости";
		
	КонецЕсли;
	
	УстановитьЗаголовки(ЗаголовокФормы, ЗаголовокКоманды);
	
	ЭтаФорма.ДругойПлательщикСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(
			ЭтаФорма.ДанныеЮрЛиц, "ПустаяСсылка").НаименованиеОрганизации;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТитулИзмененияСтоимости(Идентификатор)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса()); 
	
	ЗапросТекст = 
	 "ВЫБРАТЬ ПЕРВЫЕ 1
	 |	ЕСТЬNULL(Saby_ДанныеТитулов.Период, &ТекущаяДата) КАК Период,
	 |	Saby_ДанныеТитулов.ИдентификаторТитула КАК ИдентификаторТитула
	 |ПОМЕСТИТЬ ВТ_Период
	 |ИЗ
	 |	РегистрСведений.Saby_ДанныеТитулов КАК Saby_ДанныеТитулов
	 |ГДЕ
	 |	Saby_ДанныеТитулов.СсылкаНаДокумент = &СсылкаНаДокумент
	 |  И 1=1
	 |УПОРЯДОЧИТЬ ПО
	 |	Период УБЫВ
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ ПЕРВЫЕ 1
	 |	Saby_ДанныеТитулов.ИдентификаторТитула КАК ИдентификаторТитула,
	 |	Saby_ДанныеТитулов.Данные КАК Данные,
	 |	ВТ_Период.Период КАК Период
	 |ИЗ
	 |	РегистрСведений.Saby_ДанныеТитулов КАК Saby_ДанныеТитулов
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Период КАК ВТ_Период
	 |		ПО Saby_ДанныеТитулов.Период <= ВТ_Период.Период
	 |ГДЕ
	 |	Saby_ДанныеТитулов.СсылкаНаДокумент = &СсылкаНаДокумент
	 |	И 1=1
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Saby_ДанныеТитулов.Период УБЫВ";
	 
	Если ЗначениеЗаполнено(Идентификатор) Тогда 
		
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор); 		
		Условие = "Saby_ДанныеТитулов.ИдентификаторТитула = &Идентификатор"; 
			
	Иначе 			
		Условие = "Saby_ДанныеТитулов.ТипТитула = ЗНАЧЕНИЕ(Перечисление.Saby_ТипТитулаЭтрН.ИзменениеСтоимости)";				
	КонецЕсли;
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "1=1", Условие);
	Запрос.Текст = ЗапросТекст;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда  
		
		ДанныеФормы = ЗначениеИзСтрокиВнутр(Выборка.Данные);
		Если ДанныеФормы.Свойство("ДанныеЮрЛиц") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеФормы, , "ДанныеЮрЛиц,КонтактныеДанные");
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеФормы);
		КонецЕсли;
		
		Если Ставка = "" Тогда
			Ставка = "без НДС";
		КонецЕсли;
		
		ЭтаФорма.ЗаполнениеПоДаннымПредыдущегоТитула = Истина;
		
	КонецЕсли;
	
 КонецПроцедуры

#Область ВыборБанкСчетов

&НаСервере
Процедура УстановкаСвязейПараметровВыбора()
	
	//// РасчетныйСчетПеревозчик
	//НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Перевозчик");
	//НовыйМассив = Новый Массив();
	//НовыйМассив.Добавить(НоваяСвязь);
   
////    Элементы.РасчетныйСчетПеревозчик.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
	//
	//// РасчетныйСчет
	//НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Плательщик");
	//НовыйМассив = Новый Массив();
	//НовыйМассив.Добавить(НоваяСвязь);
   
////    Элементы.РасчетныйСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
	
КонецПроцедуры

&НаСервере
Процедура УстановкаТипаРасчетныхСчетов()
				
	Типы = ТипыБанковскихСчетов();
	
	Элементы.РасчетныйСчетПеревозчик.ОграничениеТипа = Типы;
	Элементы.РасчетныйСчет.ОграничениеТипа           = Типы; 
	
	УстановкаПараметровВыбораСчетов();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипыБанковскихСчетов(Знач Ссылка = Неопределено)
	
	ЕстьСправочникБанкСчета = Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено;

	МассивТипов = Новый Массив; 
	Если ЕстьСправочникБанкСчета Тогда 
		МассивТипов.Добавить(Тип("СправочникСсылка.БанковскиеСчета"));
	Иначе
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда 			
			МассивТипов.Добавить(Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов"));
		Иначе 
			МассивТипов.Добавить(Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"));
		КонецЕсли;
				
	КонецЕсли;
	
	Типы = Новый ОписаниеТипов(МассивТипов);
	
	Возврат Типы;
	
КонецФункции

&НаСервере
Процедура УстановкаПараметровВыбораСчетов()
	
	СтруктураПеревозчика = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(ДанныеЮрЛиц, "Перевозчик");
	
	РезультатПеревозчик = Saby_ТНОбщегоНазначенияСервер.ОрганизацияКонтрагент(
		СтруктураПеревозчика.ИНН, СтруктураПеревозчика.КПП);
	Если РезультатПеревозчик.Ссылка <> Неопределено Тогда
		ПараметрыВыбора = Новый Массив;
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СтруктураПеревозчика));
		Элементы.РасчетныйСчетПеревозчик.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	КонецЕсли;
	
	СтруктураПлательщика = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(ДанныеЮрЛиц, "ПустаяСсылка");
	
	РезультатПлательщик = Saby_ТНОбщегоНазначенияСервер.ОрганизацияКонтрагент(
		СтруктураПлательщика.ИНН, СтруктураПлательщика.КПП);
	Если РезультатПлательщик.Ссылка <> Неопределено Тогда
		ПараметрыВыбораПлательщик = Новый Массив;
		ПараметрыВыбораПлательщик.Добавить(Новый ПараметрВыбора("Отбор.Владелец", РезультатПлательщик.Ссылка));
		Элементы.РасчетныйСчет.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПлательщик);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасчетныйСчетПоУмолчанию(Знач СтруктураЮрЛица)
	
	ЮрЛицо = Saby_ТНОбщегоНазначенияСервер.ОрганизацияКонтрагент(СтруктураЮрЛица.ИНН, СтруктураЮрЛица.КПП);
	Если ЮрЛицо.Ссылка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РасчетныйСчет = Неопределено;
	
	ЕстьМодульБухУчет = Метаданные.ОбщиеМодули.Найти("БухгалтерскийУчетПереопределяемый") <> Неопределено;
	
	Если ЕстьМодульБухУчет Тогда
		
		ОбщийМодульОбъект = ОбщегоНазначения.ОбщийМодуль("БухгалтерскийУчетПереопределяемый");
		
		// модуль может быть, а процедуры нет... пример УТ 11
		Попытка
			РасчетныйСчет = ОбщийМодульОбъект.ПолучитьБанковскийСчетПоУмолчанию(ЮрЛицо.Ссылка);
		Исключение
			РасчетныйСчет = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РасчетныйСчет) Тогда
		
		// УТ 11 и т.д... где нет общего модуля получаем все из справочника
		ЕстьСправочникБанкСчета = Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено; 
		
		Если Не ЕстьСправочникБанкСчета Тогда  			
			РасчетныйСчет = РасчетныйСчетИзРазделенныхСправочников(ЮрЛицо.Ссылка);					
		Иначе 			
			РасчетныйСчет = РасчетныйСчетИзСправочникаБанковскихСчетов(ЮрЛицо.Ссылка);					
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РасчетныйСчет;
	
КонецФункции

&НаСервереБезКонтекста
Функция РасчетныйСчетИзСправочникаБанковскихСчетов(ЮрЛицо)
	
	ИмяСправочника = "БанковскиеСчета";
	ВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если Метаданные.Имя = "УправлениеАвтотранспортомПроф" Тогда 
		БанковскиеСчетаОрганизации = Новый ТаблицаЗначений;
		ОбменСКонтрагентамиПереопределяемый.ПолучитьБанковскиеСчета(ЮрЛицо, БанковскиеСчетаОрганизации);
		
		Если БанковскиеСчетаОрганизации.Количество() Тогда
			РасчетныйСчет = БанковскиеСчетаОрганизации[0].БанковскийСчет;
		КонецЕсли;
		
	Иначе 	
		
		БанковскиеСчетаОрганизации = Справочники[ИмяСправочника].БанковскиеСчетаОрганизации(ЮрЛицо, ВалютаРегУчета);		
		Если БанковскиеСчетаОрганизации.Количество() Тогда
			РасчетныйСчет = БанковскиеСчетаОрганизации[0].Ссылка;
		КонецЕсли;
		
	КонецЕсли;		
		
	Возврат РасчетныйСчет;
	
КонецФункции
	
&НаСервереБезКонтекста
Функция РасчетныйСчетИзРазделенныхСправочников(ЮрЛицо)
	
	Если ТипЗнч(ЮрЛицо) = Тип("СправочникСсылка.Организации") Тогда 
		
		ИмяСправочника = "БанковскиеСчетаОрганизаций";  				
		РасчетныйСчет  = Справочники[ИмяСправочника].ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ЮрЛицо);
		
	Иначе 
		
		ИмяСправочника = "БанковскиеСчетаКонтрагентов";				
		РасчетныйСчет  = Справочники[ИмяСправочника].ПолучитьБанковскийСчетПоУмолчанию(ЮрЛицо);
		
	КонецЕсли;  
	
	Возврат РасчетныйСчет;
	
КонецФункции

#КонецОбласти // ВыборБанкСчетов

&НаСервере
Функция ЗначениеСтавки(Ставка)
	
	Значение = СтрЗаменить(Ставка, "%", "");
	
	ТипЧисло  = Новый ОписаниеТипов("Число");
	Результат = ТипЧисло.ПривестиЗначение(Значение);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // Заполнение_Стоимости

#Область УстановкаВидимостиПоТитулам

&НаСервере
Процедура УстановкаСвойствЭлементов_ЗаменаВодителяИлиТС(СвойстаЭлементовФормы, ВызовПриСоздании)
	
	СкрытьВидимость          = СвойстаЭлементовФормы.Видимость_Снять;
	СнятьДоступность         = СвойстаЭлементовФормы.Доступность_Снять;
	УстановитьТолькоПросмотр = СвойстаЭлементовФормы.ТолькоПросмотр_Установить;
		
	Если ТипСмены  = "Описание" Тогда 
		СкрытьВидимость.Добавить("ДокументЗамены");
		СвойстаЭлементовФормы.Видимость_Установить.Добавить("ПричинаЗамены");
	Иначе	
		СкрытьВидимость.Добавить("ПричинаЗамены");
		СвойстаЭлементовФормы.Видимость_Установить.Добавить("ДокументЗамены");
	КонецЕсли;
		
	Если ВызовПриСоздании  Тогда
		
		Если Не ОтветственныеЛица.Количество() Тогда 							 
			СкрытьВидимость.Добавить("ГруппаВодители");			 
		КонецЕсли;
		
		Если Не ЕстьСтрокиТС(Перечисления.Saby_ВидыТС.Автомобиль) Тогда			 
			СкрытьВидимость.Добавить("ГруппаТС");			 
		КонецЕсли;	
		
		Если Не ЕстьСтрокиТС(Перечисления.Saby_ВидыТС.Прицеп) Тогда			 
			СкрытьВидимость.Добавить("ГруппаПрицепы");			 
		КонецЕсли;
		
		Если ЭтаФорма.ЗаполнениеПоДаннымПредыдущегоТитула Тогда 			
			УстановитьТолькоПросмотр.Добавить("ГруппаЗамена");			
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ЭтаФорма.ЭтоРасшифровкаИзменений Тогда
		
		СнятьДоступность.Добавить("ВыполнитьОбмен");
		СнятьДоступность.Добавить("ГруппаПереключатели");
		
		УстановитьТолькоПросмотр.Добавить("ГруппаДатаВремя");
		УстановитьТолькоПросмотр.Добавить("ГруппаЗамена");
		УстановитьТолькоПросмотр.Добавить("ГруппаТС");
		УстановитьТолькоПросмотр.Добавить("Группа_Прицепы");
		УстановитьТолькоПросмотр.Добавить("ГруппаВодители");
		УстановитьТолькоПросмотр.Добавить("ГруппаОтметкиИАкты");
		УстановитьТолькоПросмотр.Добавить("ТипСмены");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановкаСвойствЭлементов_Переадресовка(СвойстаЭлементовФормы, ВызовПриСоздании)
	
	СкрытьВидимость          = СвойстаЭлементовФормы.Видимость_Снять;
	СнятьДоступность         = СвойстаЭлементовФормы.Доступность_Снять;
	УстановитьТолькоПросмотр = СвойстаЭлементовФормы.ТолькоПросмотр_Установить;
	
	// Уведомление
	Если ЭтаФорма.ЭтоУведомление Тогда
		
		СкрытьВидимость.Добавить("ОтметкиПереадресовка");
		
		Элементы.ПереадресовкаНаОсновании.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Получатель_Телефон.АвтоОтметкаНезаполненного = ЗначениеЗаполнено(Получатель);
		
	Иначе // Переадресовка
		
		СкрытьВидимость.Добавить("ГруппаОформил");
		Если Не ЗначениеЗаполнено(Причина) Тогда
			СкрытьВидимость.Добавить("Причина");
		Иначе 
			СнятьДоступность.Добавить("Причина");
		КонецЕсли;	
				
    КонецЕсли;	
											
	АдресДоставкиЗаполнен    = ЗначениеЗаполнено(ЭтаФорма.Отправитель_АдресДоставки);
	АдресДоставкиДекорация   = "ДекорацияЗаполнитьАдресДоставки";
	АдресДоставкиОтправитель = "Отправитель_АдресДоставки";
	
	Если АдресДоставкиЗаполнен Тогда
		СкрытьВидимость.Добавить(АдресДоставкиДекорация);
		СвойстаЭлементовФормы.Видимость_Установить.Добавить(АдресДоставкиОтправитель);
	Иначе 
		СкрытьВидимость.Добавить(АдресДоставкиОтправитель);
		СвойстаЭлементовФормы.Видимость_Установить.Добавить(АдресДоставкиДекорация);
	КонецЕсли;	
	
	Если ЭтаФорма.ЭтоРасшифровкаИзменений Тогда
		
		СнятьДоступность.Добавить("ВыполнитьОбмен");
				
		СнятьДоступность.Добавить(АдресДоставкиОтправитель);
		СнятьДоступность.Добавить(АдресДоставкиДекорация);
								
		УстановитьТолькоПросмотр.Добавить(АдресДоставкиОтправитель);
		УстановитьТолькоПросмотр.Добавить("Причина");
		УстановитьТолькоПросмотр.Добавить("ГруппаОформил");
		УстановитьТолькоПросмотр.Добавить("ПереадресовкаНаОсновании");				
		УстановитьТолькоПросмотр.Добавить("ГруппаДатаВремяПереадресовка");
		УстановитьТолькоПросмотр.Добавить("ГруппаЗаменаПолучателя");
		УстановитьТолькоПросмотр.Добавить("ГруппаОтметкиПереадресовка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановкаСвойствЭлементов_ИзменениеСтоимости(СвойстаЭлементовФормы, ВызовПриСоздании)
	
	СкрытьВидимость          = СвойстаЭлементовФормы.Видимость_Снять;
	СнятьДоступность         = СвойстаЭлементовФормы.Доступность_Снять;
	УстановитьТолькоПросмотр = СвойстаЭлементовФормы.ТолькоПросмотр_Установить;
		
	Если ЭтаФорма.ТипПлательщик = "Отправитель" Тогда
		СкрытьВидимость.Добавить("ДругойПлательщикСтрокой");
		СкрытьВидимость.Добавить("ОснованиеОплаты");
	КонецЕсли;	
	
	// Режим формы: изменение стоимости/согласование стоимости 
	Если ЭтаФорма.ЭтоСогласование Тогда 		
		УстановитьТолькоПросмотр.Добавить("ГруппаИзмененияСтоимости");
		СкрытьВидимость.Добавить("РасчетныйСчетПеревозчик");
	Иначе 
				
		СкрытьВидимость.Добавить("ГруппаПлательщик");
	    СкрытьВидимость.Добавить("ОтказатьВСогласовании");
		
	КонецЕсли;
	
	ДействиеСогласоватьСтоимость = Перечисления.Saby_ДоступныеДействия.СогласоватьСтоимость;
	ЭтоСогласованиеИОноНедоступно = ЭтаФорма.ЭтоСогласование И Не ЭтаФорма.ДоступныеДействия.СогласованиеСтоимостиДоступно;
	
	Если ЭтаФорма.ЭтоРасшифровкаИзменений Или ЭтоСогласованиеИОноНедоступно Тогда
		
		УстановитьТолькоПросмотр.Добавить("ГруппаИзмененияСтоимости");
		УстановитьТолькоПросмотр.Добавить("ГруппаПлательщик");
		
		СнятьДоступность.Добавить("ВыполнитьОбмен");
		СнятьДоступность.Добавить("ОтказатьВСогласовании");
		
		СкрытьВидимость.Добавить("РасчетныйСчетПеревозчик");
		 		
	КонецЕсли;
	
	Если ЭтаФорма.ЭтоРасшифровкаИзменений И ЭтоСогласованиеИОноНедоступно Тогда
		СкрытьВидимость.Добавить("ГруппаИзмененияСтоимости");
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти // УстановкаВидимостиПоТитулам

#Область ДанныеТитуловДляВыгрузки

&НаСервере
Функция ДанныеТитула()
	
	Если ЭтаФорма.ТипТитула = ТитулЭТрН("ЗаменаВодителяТС") Тогда
		Результат = ДанныеТитула_ЗаменаВодителяИлиТС();
	ИначеЕсли ЭтаФорма.ТипТитула = ТитулЭТрН("ПереадресовкаУведомление")		
		Или ЭтаФорма.ТипТитула = ТитулЭТрН("Переадресовка") Тогда		
		Результат = ДанныеТитула_Переадресовка();
	ИначеЕсли ЭтаФорма.ТипТитула = ТитулЭТрН("ИзменениеСтоимости")
		Или ЭтаФорма.ТипТитула = ТитулЭТрН("СогласованиеСтоимости") Тогда
		Результат = ДанныеТитула_ИзменениеСтоимости();
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
		
	Возврат Результат;
	
КонецФункции	

&НаСервере
Функция ДанныеТитула_ЗаменаВодителяИлиТС()
	
	ТаблицыДляОтправки = ТаблицыДляОтправки();
	
	ДанныеТитула = Новый Структура;
	ДанныеТитула.Вставить("Реквизиты", Новый Структура);
	
	ДанныеТитула.Реквизиты.Вставить("Ссылка",          СсылкаНаДокумент);
	ДанныеТитула.Реквизиты.Вставить("ДатаВремяЗамены", ДатаВремяЗамены);
	
	ДанныеТитула.Реквизиты.Вставить("ДокументЗамены", ДокументЗамены);
	ДанныеТитула.Реквизиты.Вставить("ПричинаЗамены",  ПричинаЗамены); 
	
	Если Элементы.ЗаменаТС.Пометка Или Элементы.ЗаменаПрицепы.Пометка Тогда
		ДанныеТитула.Вставить("ТранспортныеСредства", ТаблицыДляОтправки.ТранспортныеСредства);
	Иначе
		ДанныеТитула.Вставить("ТранспортныеСредства", Новый Массив);
	КонецЕсли;
	
	Если Элементы.ЗаменаТС.Пометка Тогда
		ДанныеТитула.Реквизиты.Вставить("ОснованиеПередачиГрузаТС", ОснованиеПередачиГрузаТС);
		ДанныеТитула.Вставить("СпецРазрешения",                     ТаблицыДляОтправки.СпецРазрешения);
	Иначе
		ДанныеТитула.Реквизиты.Вставить("ОснованиеПередачиГрузаТС", Неопределено);
		ДанныеТитула.Вставить("СпецРазрешения",                     Новый Массив);
	КонецЕсли;
		
	Если Элементы.ЗаменаВодители.Пометка Тогда		
		ДанныеТитула.Вставить("Водители",     ТаблицыДляОтправки.Водители);
		ДанныеТитула.Вставить("ПутевыеЛисты", ТаблицыДляОтправки.ПутевыеЛисты);
	Иначе 
		ДанныеТитула.Вставить("Водители",     Новый Массив);
		ДанныеТитула.Вставить("ПутевыеЛисты", Новый Массив);
	КонецЕсли;

	ДанныеТитула.Вставить("Отметки", ТаблицыДляОтправки.Отметки);
	ДанныеТитула.Вставить("Акты",    ТаблицыДляОтправки.Акты);
	ДанныеТитула.Вставить("Штрафы",  Новый Массив);
	
	// Для ФЛК
	ДанныеТитула.Реквизиты.Вставить("ТипСмены",       ТипСмены);
	ДанныеТитула.Реквизиты.Вставить("ЗаменаТС",       Элементы.ЗаменаТС.Пометка);
	ДанныеТитула.Реквизиты.Вставить("ЗаменаПрицепы",  Элементы.ЗаменаПрицепы.Пометка);
	ДанныеТитула.Реквизиты.Вставить("ЗаменаВодители", Элементы.ЗаменаВодители.Пометка);
	
	Возврат ДанныеТитула;
	
КонецФункции

&НаСервере
Функция ДанныеТитула_ИзменениеСтоимости()

	ДанныеТитула = Новый Структура;
	ДанныеТитула.Вставить("Реквизиты", Новый Структура);
	
	ДанныеТитула.Реквизиты.Вставить("Ссылка",      ЭтаФорма.СсылкаНаДокумент);
	
	Если ЭтоСогласование Тогда
		
		ДанныеТитула.Реквизиты.Вставить("ТипПлательщик",   ЭтаФорма.ТипПлательщик);
		ДанныеТитула.Реквизиты.Вставить("ОснованиеОплаты", ЭтаФорма.ОснованиеОплаты);
				
		ДанныеТитула.Реквизиты.Вставить("БанкБИК",       ЭтаФорма.БанкБИК);
		ДанныеТитула.Реквизиты.Вставить("БанкКоррСчет",  ЭтаФорма.БанкКоррСчет);
		ДанныеТитула.Реквизиты.Вставить("НомерСчета",    ЭтаФорма.НомерСчета);
		ДанныеТитула.Реквизиты.Вставить("БанкНазвание",  ЭтаФорма.БанкНазвание);
		
		ДанныеТитула.Реквизиты.Вставить("Сумма", Сумма);
		
	Иначе
		
		ЗначениеСтавки = ЗначениеСтавки(ЭтаФорма.Ставка); 
		
		СтоПроцентов = 100;		
		Если ЗначениеЗаполнено(ЗначениеСтавки) Тогда 
			СуммаБезНДС = Окр(Сумма / (1 + ЗначениеСтавки / СтоПроцентов), 2, РежимОкругления.Окр15как20);			
			СуммаНДС    = Сумма - СуммаБезНДС;
		Иначе 
			СуммаБезНДС = Сумма;
			СуммаНДС    = 0;			
		КонецЕсли;
							
		ДанныеТитула.Реквизиты.Вставить("Сумма",       ЭтаФорма.Сумма);
		ДанныеТитула.Реквизиты.Вставить("Ставка",      ЭтаФорма.Ставка);
		ДанныеТитула.Реквизиты.Вставить("СуммаНДС",    СуммаНДС);
		ДанныеТитула.Реквизиты.Вставить("СуммаБезНДС", СуммаБезНДС);
		ДанныеТитула.Реквизиты.Вставить("Условия",     ЭтаФорма.Условия);
		
		ДанныеТитула.Реквизиты.Вставить("БанкБИКПеревозчик",       ЭтаФорма.БанкБИКПеревозчик);
		ДанныеТитула.Реквизиты.Вставить("БанкКоррСчетПеревозчик",  ЭтаФорма.БанкКоррСчетПеревозчик);
		ДанныеТитула.Реквизиты.Вставить("НомерСчетаПеревозчик",    ЭтаФорма.НомерСчетаПеревозчик);			
		ДанныеТитула.Реквизиты.Вставить("БанкНазваниеПеревозчик",  ЭтаФорма.БанкНазваниеПеревозчик);
	
	КонецЕсли;
	
	НаименованиеОтправителя = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(
		ЭтаФорма.ДанныеЮрЛиц, "Отправитель").НаименованиеОрганизации;
	ДанныеТитула.Реквизиты.Вставить("Отправитель", НаименованиеОтправителя);
		
	НаименованиеПеревозчика = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(
		ЭтаФорма.ДанныеЮрЛиц, "Перевозчик").НаименованиеОрганизации;
	ДанныеТитула.Реквизиты.Вставить("Перевозчик", НаименованиеПеревозчика);
		
	НаименованиеПлательщика = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(
		ЭтаФорма.ДанныеЮрЛиц, "ПустаяСсылка").НаименованиеОрганизации;
	ДанныеТитула.Реквизиты.Вставить("Плательщик", НаименованиеПлательщика);
	
	// Для совместимости ФЛК
	ДанныеТитула.Вставить("Отметки", Новый Массив);
	ДанныеТитула.Вставить("Акты",    Новый Массив);
	ДанныеТитула.Вставить("Штрафы",  Новый Массив);
	
	Возврат ДанныеТитула;
	
КонецФункции

&НаСервере
Функция ДанныеТитула_Переадресовка()
	
	ТаблицыДляОтправки = ТаблицыДляОтправки();
	
	ДанныеТитула = Новый Структура;
	ДанныеТитула.Вставить("Реквизиты", Новый Структура);
	
	ДанныеТитула.Реквизиты.Вставить("Ссылка",                    ЭтаФорма.СсылкаНаДокумент);
	ДанныеТитула.Реквизиты.Вставить("Отправитель_АдресДоставки", ЭтаФорма.Отправитель_АдресДоставки);
	ДанныеТитула.Реквизиты.Вставить("АдресДоставкиЗначение",     ЭтаФорма.АдресДоставкиЗначение);
	
	ДанныеТитула.Реквизиты.Вставить("Отправитель_ДоставитьДо", ЭтаФорма.Отправитель_ДоставитьДо);
	ДанныеТитула.Реквизиты.Вставить("Выгрузка_ДатаВремя",      ЭтаФорма.Отправитель_ДоставитьДо);
	ДанныеТитула.Реквизиты.Вставить("Переадресовка_ДатаВремя", ТекущаяДатаСеанса());
	
	ДанныеПолучатель = Неопределено;
	Если ЗначениеЗаполнено(ЭтаФорма.ПолучательСтрокой) Тогда
				
		ДанныеТитула.Вставить("КонтактныеДанные", ТаблицыДляОтправки.КонтактныеДанные);
		ДанныеТитула.Вставить("ДанныеЮрЛиц",      ТаблицыДляОтправки.ДанныеЮрЛиц);
		
		ДанныеПолучатель = Saby_ТНВыгрузкаСервер.ДанныеЮрЛица("Получатель", ДанныеТитула, Истина)
				
	Иначе
		
		ДанныеТитула.Вставить("КонтактныеДанные", Неопределено);
		ДанныеТитула.Вставить("ДанныеЮрЛиц",      Неопределено);
		
	КонецЕсли;
	
	ДанныеТитула.Реквизиты.Вставить("Получатель",               ДанныеПолучатель);	
	ДанныеТитула.Реквизиты.Вставить("Причина",                  Причина);
	ДанныеТитула.Реквизиты.Вставить("ПереадресовкаНаОсновании", ПереадресовкаНаОсновании);
	
	ДанныеТитула.Вставить("Отметки", ТаблицыДляОтправки.Отметки);
	ДанныеТитула.Вставить("Акты",    Новый Массив);
	ДанныеТитула.Вставить("Штрафы",  Новый Массив);
	
	ДанныеТитула.Реквизиты.Вставить("ОформилСтруктура", ЭтотОбъект.ОформилСтруктура);
	
	Возврат ДанныеТитула;
	
КонецФункции

#КонецОбласти // ДанныеТитуловДляВыгрузки

&НаКлиенте
Процедура ОтказатьВСогласованииПослеВводаПричины(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПричины = СокрЛП(Результат);
	Если ЗначениеЗаполнено(ЗначениеПричины) Тогда
		ЭтаФорма.Причина = ЗначениеПричины;
	Иначе
		ТаблицаОшибок.Очистить();
		СтрокаОшибки = ТаблицаОшибок.Добавить();
		СтрокаОшибки.Ошибка = "При отказе необходимо обязательно заполнить причину.";
		Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОтказВСогласовании", Истина);
	ДополнительныеПараметры.Вставить("ПричинаОтказа",      ЭтаФорма.Причина);
	
	ВыполнитьОбмен(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

#Область ДатаЗамены

&НаКлиенте
Процедура ДатаЗаменыПриИзменении(Элемент)
	СобратьДатуВремяПоРеквизитам("ДатаВремяЗамены", "ДатаЗамены", "ВремяЗамены");
КонецПроцедуры

&НаКлиенте
Процедура ВремяЗаменыПриИзменении(Элемент)
	СобратьДатуВремяПоРеквизитам("ДатаВремяЗамены", "ДатаЗамены", "ВремяЗамены");
КонецПроцедуры

&НаКлиенте
Процедура СобратьДатуВремяПоРеквизитам(Реквизит, РеквизитДата, РеквизитВремя)
	
	Если Не ЗначениеЗаполнено(ЭтаФорма[РеквизитДата]) Тогда 
		Возврат;
	КонецЕсли;
			
	ДатаСтрока  = Формат(ЭтаФорма[РеквизитДата],  "ДФ=yyyyMMdd");
	ВремяСтрока = Формат(ЭтаФорма[РеквизитВремя], "ДФ=HHmmss");
	
	ДатаИВремя = Дата(ДатаСтрока + ВремяСтрока);
	
	Если ДатаИВремя <> ЭтаФорма[Реквизит] Тогда	 
		ЭтаФорма[Реквизит] = ДатаИВремя;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазложитьДатуПоРеквизитам(ЭтоЗамена = Ложь)
	
	Если ЭтоЗамена Тогда  
		
		ЭтаФорма.ДатаЗамены  = ДатаВремяЗамены;
		ЭтаФорма.ВремяЗамены = ДатаВремяЗамены;
				
	Иначе
				
		ЭтаФорма.ДоставитьДата  = Отправитель_ДоставитьДо;	 
		ЭтаФорма.ДоставитьВремя = Отправитель_ДоставитьДо;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ДатаЗамены

&НаКлиенте
Процедура ТипСменыПриИзменении(Элемент)
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
	Если Элементы.ГруппаОшибки.Видимость Тогда
		ОбновитьДанныеПоОшибкамНаКлиенте(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЭлементовПоВидамЗамены()
	
	Элементы.ГруппаВодители.Видимость = Элементы.ЗаменаВодители.Пометка;
	Элементы.ГруппаТС.Видимость       = Элементы.ЗаменаТС.Пометка;
	Элементы.ГруппаПрицепы.Видимость  = Элементы.ЗаменаПрицепы.Пометка;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьШрифтКнопки(Кнопка) 
	
	Если Кнопка.Пометка Тогда		
		Кнопка.Шрифт = ОбщегоНазначенияВызовСервера.ШрифтСтиля("ВажнаяНадписьШрифт");		
	Иначе 		
		Кнопка.Шрифт = ОбщегоНазначенияВызовСервера.ШрифтСтиля("ОбычныйШрифтТекста");
	КонецЕсли;
	
КонецПроцедуры

#Область Отметки

&НаКлиенте
Процедура ОтметкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	РедактированиеОтметок("Отметки", НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиПриАктивизацииСтроки(Элемент)
	
	ОбработкаАктивизацииСтрокиОтметки();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизацииСтрокиОтметки()
	
	ТекущиеДанные = Элементы.Отметки.ТекущиеДанные;
			
	СтруктураПоиска = Новый Структура;
	Если ТекущиеДанные = Неопределено Тогда
		СтруктураПоиска.Вставить("КлючСтроки_Отметки", 0);			
	Иначе
		СтруктураПоиска.Вставить("КлючСтроки_Отметки", ТекущиеДанные.КлючСтроки);
	КонецЕсли;
	
	Отбор = Новый ФиксированнаяСтруктура(СтруктураПоиска);
	Элементы.Акты.ОтборСтрок = Отбор;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбработкаАктивизацииСтрокиОтметки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Отметки.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		ТекДанные = Отметки.НайтиПоИдентификатору(ИдСтроки);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			УдаляемыеКлючи_Отметки.Добавить(ТекДанные.КлючСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("УдалитьСвязанныеСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВводаСтроки(ИмяТЧ, Отказ)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрана строка в основной таблице " + ИмяТЧ;
		// Сообщение.Поле  = "";
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура АктыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Отметки", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура АктыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не Копирование  Тогда 
		ДобавитьКлючСвязиСтроки("Акты", "Отметки", Элемент.ТекущаяСтрока, НоваяСтрока);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // Отметки

#Область ПутевыеЛисты

&НаКлиенте
Процедура Водители_УстановитьОтборПоВсемСвязаннымТаблицам()
	
    ТекущиеДанные = Элементы.Водители.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСтроки_ОтветственныеЛица", ТекущиеДанные.КлючСтроки);
		
		Отбор = Новый ФиксированнаяСтруктура(СтруктураПоиска);		
		Элементы.ПутевыеЛисты.ОтборСтрок = Отбор;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Водители", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не Копирование Тогда
		ДобавитьКлючСвязиСтроки(Элемент.Имя, "Водители", Элемент.ТекущаяСтрока, НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПутевыеЛисты 

#Область КлючиСтрок

&НаСервере
Процедура МаксимальныеКлючиСтрок()
	
	ИмяКолонки = "КлючСтроки";
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить("Отметки");
    МассивТаблиц.Добавить("ОтветственныеЛица");
	
	Для Каждого ИмяТЧ Из МассивТаблиц Цикл 
		
		ИмяКлюча = "МаксимальныйКлючСтроки_" + ИмяТЧ;
		
		Если ЭтаФорма[ИмяТЧ].Количество() = 0 Тогда
			ЭтаФорма[ИмяКлюча] = 0;		
		Иначе 	
			
			СписокКлючей = Новый СписокЗначений;	
			СписокКлючей.ЗагрузитьЗначения(ЭтаФорма[ИмяТЧ].Выгрузить(, ИмяКолонки).ВыгрузитьКолонку(ИмяКолонки)); 			
			СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);   
			
			ЭтаФорма[ИмяКлюча] = СписокКлючей[0].Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция НовыйКлючСтроки(ИмяТЧ)
	
	// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
	// рассчитывается от максимального существующего значения.	
	ИмяКлюча = "МаксимальныйКлючСтроки_" + ИмяТЧ;	
	
	ЭтаФорма[ИмяКлюча] = ЭтаФорма[ИмяКлюча] + 1;						
	Возврат ЭтаФорма[ИмяКлюча];
			
КонецФункции

&НаКлиенте
Процедура ДобавитьКлючСвязиСтроки(ИмяТЧ, ИсходнаяТЧ, НомерСтроки, НоваяСтрока)
	
	Если Не НоваяСтрока Тогда 
		Возврат;
	КонецЕсли;
	
	// Проверка корректности номера строки 
	// При удалении строк расходится номер строки и индекс. Индекс сдвигается, а номер строки только увеличивается 
	Если НомерСтроки >= ЭтаФорма[ИмяТЧ].Количество() Тогда 
		
		// считаем что новая строка это самая последняя в таблице		
		НовыйНомерСтроки = ЭтаФорма[ИмяТЧ].Количество() - 1;		
		ТекущиеДанные    = ЭтаФорма[ИмяТЧ][НовыйНомерСтроки];
		
	Иначе
		ТекущиеДанные = ЭтаФорма[ИмяТЧ][НомерСтроки];
	КонецЕсли;
			
	ТекущиеДанныеИсходнойТЧ = Элементы[ИсходнаяТЧ].ТекущиеДанные;
	
	КлючСтроки = ТекущиеДанныеИсходнойТЧ.КлючСтроки;
	
	Если ИсходнаяТЧ = "Водители" Тогда
		ИмяКлюча = "КлючСтроки_ОтветственныеЛица";
	Иначе
		ИмяКлюча = "КлючСтроки_" + ИсходнаяТЧ;
	КонецЕсли;
	
	Если ТекущиеДанные[ИмяКлюча] <> КлючСтроки Тогда 		
		ТекущиеДанные[ИмяКлюча] = КлючСтроки;		
	КонецЕсли;
		
КонецПроцедуры

// ПодключаемыеОбработчики
&НаКлиенте
Процедура УдалитьСвязанныеСтроки()
	
	УдалитьСвязанныеЗаписиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеЗаписиНаСервере()
	
	ВидыУдаляемыхСтрок = Новый Структура; 
		
	// Отметки
	КлючиОтметки = Новый Структура;
	КлючиОтметки.Вставить("Список",     УдаляемыеКлючи_Отметки);
	КлючиОтметки.Вставить("ИмяКолонки", "Отметки"); 

	ВидыУдаляемыхСтрок.Вставить("Акты",   КлючиОтметки);
	
	// Водители  
	КлючиВодители = Новый Структура;
	КлючиВодители.Вставить("Список",     УдаляемыеКлючи_ОтветственныеЛица);
	КлючиВодители.Вставить("ИмяКолонки", "ОтветственныеЛица"); 
	
	ВидыУдаляемыхСтрок.Вставить("ПутевыеЛисты", КлючиВодители);
	
	Для Каждого ВидУдаляемыхСтрок Из ВидыУдаляемыхСтрок Цикл
		
		ИмяТабличнойЧасти 		= ВидУдаляемыхСтрок.Ключ;
		СписокУдаленныхКлючей 	= ВидУдаляемыхСтрок.Значение.Список;
		КлючСтроки              = "КлючСтроки_" + ВидУдаляемыхСтрок.Значение.ИмяКолонки;
		
		Для Каждого СтрокаКлюча Из СписокУдаленныхКлючей Цикл
								
			КлючПоиска = Новый Структура(КлючСтроки, СтрокаКлюча.Значение); 
			
			МассивСтрокТовары = ЭтаФорма[ИмяТабличнойЧасти].НайтиСтроки(КлючПоиска);
			
			Для Каждого СтрокаТЧ Из МассивСтрокТовары Цикл
				ЭтаФорма[ИмяТабличнойЧасти].Удалить(СтрокаТЧ);
			КонецЦикла; 
			
		КонецЦикла;
	КонецЦикла; 
	
    // сбросим списки в начальное состояние
	УдаляемыеКлючи_Отметки.Очистить();
	УдаляемыеКлючи_ОтветственныеЛица.Очистить();
	
КонецПроцедуры

#КонецОбласти // КлючиСтрок

&НаСервере
Функция ТаблицыДляОтправки()
	
	ОтборПоРоли = Новый Структура;
	ОтборПоРоли.Вставить("Роль", Перечисления.Saby_РолиОтветственных.Водитель);
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить(
		"СпецРазрешения",       ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭтотОбъект.СпецРазрешения.Выгрузить()));
	РезультатФункции.Вставить(
		"ТранспортныеСредства", ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭтотОбъект.ТранспортныеСредства.Выгрузить()));
	РезультатФункции.Вставить(
		"ПутевыеЛисты",         ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭтотОбъект.ПутевыеЛисты.Выгрузить()));
	РезультатФункции.Вставить(
		"Отметки",              ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭтотОбъект.Отметки.Выгрузить()));
	РезультатФункции.Вставить(
		"Акты",                 ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭтотОбъект.Акты.Выгрузить()));
	РезультатФункции.Вставить(
		"КонтактныеДанные",     ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭтотОбъект.КонтактныеДанные.Выгрузить()));
	РезультатФункции.Вставить(
		"ДанныеЮрЛиц",          ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭтотОбъект.ДанныеЮрЛиц.Выгрузить()));
	
	Водители = ЭтотОбъект.ОтветственныеЛица.Выгрузить(ОтборПоРоли);
	Водители.Колонки.Удалить("ВУ");
	Водители.Колонки.Удалить("ФИО");
	РезультатФункции.Вставить("Водители", ОбщегоНазначения.ТаблицаЗначенийВМассив(Водители));
	
	Возврат РезультатФункции;
	
КонецФункции

#Область ОбработкаОшибок

&НаКлиенте
Процедура ОбновитьДанныеПоОшибкамНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьДанныеПоОшибкамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоОшибкамНаСервере(Знач Ошибки = Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Этап",                    СокрЛП(ЭтотОбъект.ТипТитула));
	ДополнительныеПараметры.Вставить("Ссылка",                  СсылкаНаДокумент);
	ДополнительныеПараметры.Вставить("ПроверятьПоляСОХ",        Ложь);
	ДополнительныеПараметры.Вставить("ПроверятьПоляОтгрузчика", Ложь);
	
	Если Ошибки = Неопределено Тогда
		ДополнительныеПараметры.Вставить("ДанныеДокумента", ДанныеТитула());
	КонецЕсли;
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьДанныеПоОшибкам(
		ЭтаФорма,
		ДополнительныеПараметры,
		Ошибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтметокПоТипу(ИдентификаторСтроки) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать() Экспорт
	
	ЭтаФорма.Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДекорацию(Знач ПараметрыВыделенияДекорации)
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьДекорацию(ЭтаФорма, ПараметрыВыделенияДекорации);
	
КонецПроцедуры

#КонецОбласти // ОбработкаОшибок

#Область ТС

&НаКлиенте
Процедура ПослеОбновленияДанныхТранспортныхСредств(Результат, ДополнительныеПараметры) Экспорт
	
	ПослеОбновленияДанныхТранспортныхСредствНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбновленияДанныхТранспортныхСредствНаСервере()
	
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьТранспортныеСредстваНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ЕстьСтрокиТС(Вид)
	
	РезультатФункции = Ложь;
	
	Для Каждого СтрокаТС Из ЭтаФорма.ТранспортныеСредства Цикл
		Если СтрокаТС.Вид = Вид Тогда
			РезультатФункции = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ТС

#Область Водители

&НаКлиенте
Процедура ВодителиПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Водители.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		ТекДанные = ОтветственныеЛица.НайтиПоИдентификатору(ИдСтроки);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			УдаляемыеКлючи_ОтветственныеЛица.Добавить(ТекДанные.КлючСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("УдалитьСвязанныеСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		
		ТекДанные = Элементы.Водители.ТекущиеДанные;		
		ТекДанные.КлючСтроки = НовыйКлючСтроки("ОтветственныеЛица");
		
		// Переустановим отбор
		Водители_УстановитьОтборПоВсемСвязаннымТаблицам();
		
		Для Каждого СтруктураОтбора Из Элемент.ОтборСтрок Цикл
			Элемент.ТекущиеДанные[СтруктураОтбора.Ключ] = СтруктураОтбора.Значение;
		КонецЦикла;
		
		СтруктураОтветственного = Saby_ТНОбщегоНазначенияСервер.СтруктураОтветственного(
			ЭтаФорма.ОтветственныеЛица, "", Элемент.ТекущаяСтрока);
		
		Saby_ТНОбщегоНазначенияКлиент.НачатьРедактированиеОтветственногоЛица(ЭтаФорма, СтруктураОтветственного, "Водитель");
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ВодителиПриАктивизацииСтроки(Элемент)
	
	Водители_УстановитьОтборПоВсемСвязаннымТаблицам();

КонецПроцедуры

&НаКлиенте
Процедура ВодителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтветственного = Saby_ТНОбщегоНазначенияСервер.СтруктураОтветственного(
		ЭтаФорма.ОтветственныеЛица, "", ВыбраннаяСтрока);
	СтруктураОтветственного.Вставить("ТолькоПросмотр", ЭтаФорма.ЭтоРасшифровкаИзменений);
	
	Saby_ТНОбщегоНазначенияКлиент.НачатьРедактированиеОтветственногоЛица(ЭтаФорма, СтруктураОтветственного, "Водитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДанныеВодителя()
	
	ТекущиеДанные  = Элементы.Водители.ТекущиеДанные;
		
	ПараметрыФормы = Saby_ТНОбщегоНазначенияКлиент.СтрокаТаблицыФормыВСтруктуру(
		ЭтаФорма, "Водители", ТекущиеДанные);
		
	// если это просмотр отправленного титула
	ЭтоРасшифровка = ЭтаФорма.ЭтоРасшифровкаИзменений;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтоРасшифровка);
	ПараметрыФормы.Вставить("Наименование",   "Водитель");
	ПараметрыФормы.Вставить("РольСтрокой",    "Водитель");
	
	ИмяОповещения = "ПослеВводаДанныхВодителя";	
	Saby_ТНОбщегоНазначенияКлиент.ИзменитьДанныеВодителяОтветственногоЛица(ЭтаФорма, ПараметрыФормы, ИмяОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДанныхВодителя(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда 
		
		ТекущиеДанные = Элементы.Водители.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, РезультатЗакрытия);
		
	КонецЕсли;	
	
	СформироватьНадписьВодителейСтрокой();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНадписьВодителейСтрокой()
		
	Массив = Новый Массив;
	Для Каждого Строка Из ЭтаФорма.Водители Цикл 
		
		Если ЗначениеЗаполнено(Строка.ФИО) Тогда
			Массив.Добавить(СокрЛП(Строка.ФИО));
		КонецЕсли;
				
	КонецЦикла;
	
	Если Массив.Количество() Тогда 
		ЭтаФорма.ВодителиСтрокой = СтрСоединить(Массив, ", ");
	Иначе 
		ЭтаФорма.ВодителиСтрокой = "Заполнить";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПослеУдаления(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьВодителейНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ЭтаФорма.ТекущийЭлемент = Элементы.Водители;
	
КонецПроцедуры

#КонецОбласти // Водители

&НаКлиенте
Процедура РедактированиеОтметок(ТаблицаИмя, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекДанные = Элементы[ТаблицаИмя].ТекущиеДанные;
		
		Если ТаблицаИмя = "Отметки" Тогда
			
			ТекДанные.КлючСтроки = НовыйКлючСтроки("Отметки");
			Этап = "ЗаменаВодителяТС";
			
		Иначе			
			Этап = "Переадресовка";			
		КонецЕсли;	
				
		Если Не Копирование Тогда 
			ТекДанные.ДатаВремя = ОбщегоНазначенияКлиент.ДатаСеанса();
			ТекДанные.Этап      = ПредопределенноеЗначение("Перечисление.Saby_ТипТитулаЭтрН." + Этап);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьВидимостьИДоступностьЭлементовНаКлиенте() Экспорт
	ОбновитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура РасчетКоличестваСпецРазрешений()
	
	ЭтаФорма.СпецРазрешенияКоличество = ЭтаФорма.СпецРазрешения.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыСчета(Знач РасчетныйСчетИсточник, Знач ТипРеквизитов = "")
	
	Если Не ЗначениеЗаполнено(РасчетныйСчетИсточник) Тогда
		ЭтаФорма["БанкНазвание" + ТипРеквизитов] = "";
		ЭтаФорма["БанкБИК"      + ТипРеквизитов] = "";
		ЭтаФорма["БанкКоррСчет" + ТипРеквизитов] = "";
		ЭтаФорма["НомерСчета"   + ТипРеквизитов] = "";
		Возврат;
	КонецЕсли;
	
	РеквизитыСчета = РеквизитыБанковскогоСчета(РасчетныйСчетИсточник);
	
	ЭтаФорма["БанкНазвание" + ТипРеквизитов] = РеквизитыСчета.Банк;
	ЭтаФорма["БанкБИК"      + ТипРеквизитов] = РеквизитыСчета.БИК;
	ЭтаФорма["БанкКоррСчет" + ТипРеквизитов] = РеквизитыСчета.КоррСчет;
	ЭтаФорма["НомерСчета"   + ТипРеквизитов] = РеквизитыСчета.НомерСчета;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Данные банковского счета по ссылке
// Параметры:
//	БанковскийСчет - СправочникСсылка.БанковскиеСчетаКонтрагентов - счет для получения данных расч. счета контрагента
//	               - СправочникСсылка.БанковскиеСчетаОрганизаций - счет для получения данных расч. счета организации
//                 - СправочникСсылка.БанковскиеСчета - счет для получения данных 
//	                 (в некоторых конфигурация справочник единый)
//
// Возвращаемое значение:
//	Структура - реквизиты счета
//
Функция РеквизитыБанковскогоСчета(Знач БанковскийСчет)
	
	СтруктураСчета = Новый Структура;
	СтруктураСчета.Вставить("Банк",       "");
	СтруктураСчета.Вставить("БИК",        "");
	СтруктураСчета.Вставить("НомерСчета", "");
	СтруктураСчета.Вставить("КоррСчет",   "");
		
	ЕстьСправочникБанкСчета = Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено;
		 
	Если ЕстьСправочникБанкСчета Тогда 
		
		// нет корр счета в стандратном получении данных счета	
		РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			БанковскийСчет, "НомерСчета, Банк.Наименование, Банк.Код, Банк.КоррСчет");
		
		Если ЗначениеЗаполнено(РеквизитыСчета) Тогда
			
			СтруктураСчета.Банк       = РеквизитыСчета.БанкНаименование;
			СтруктураСчета.БИК        = РеквизитыСчета.БанкКод;
			СтруктураСчета.НомерСчета = РеквизитыСчета.НомерСчета;
			СтруктураСчета.КоррСчет   = РеквизитыСчета.БанкКоррСчет;
			
		КонецЕсли;		
		
	Иначе 
		
		ЗаполнитьДанныеБанковскогоСчета(БанковскийСчет, СтруктураСчета);
						
	КонецЕсли;	
	
	Возврат СтруктураСчета;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеБанковскогоСчета(БанковскийСчет, СтруктураСчета)
	
	Если ТипЗнч(БанковскийСчет) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда 
		
		ИмяСправочника = "БанковскиеСчетаОрганизаций";
		РеквизитыСчета = Справочники[ИмяСправочника].ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет); 
		
	Иначе 
		
		ИмяСправочника = "БанковскиеСчетаКонтрагентов";
		РеквизитыСчета = Справочники[ИмяСправочника].ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыСчета) Тогда
		
		Если РеквизитыСчета.Свойство("БИКБанка") Тогда 
			ИмяБик = "БИКБанка"; 
		Иначе 
			ИмяБик = "БИК";
		КонецЕсли;
		
		Если РеквизитыСчета.Свойство("НаименованиеБанка") Тогда 
			ИмяБанка = РеквизитыСчета.НаименованиеБанка; 
		Иначе 
			ИмяБанка = СокрЛП(РеквизитыСчета.Банк);
		КонецЕсли;
		
		СтруктураСчета.Банк          = ИмяБанка;
		СтруктураСчета.БИК           = РеквизитыСчета[ИмяБик];
		СтруктураСчета.НомерСчета    = РеквизитыСчета.НомерСчета;
		СтруктураСчета.КоррСчет = РеквизитыСчета.КоррСчет;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ТипПлательщикПриИзмененииНаСервере()
	
	Saby_ТНОбщегоНазначенияКлиентСервер.УдалитьСтрокиПоРоли(ЭтаФорма.ДанныеЮрЛиц, "ПустаяСсылка");
	ЭтаФорма.ДругойПлательщикСтрокой = "Заполнить";
	
	Если ЭтаФорма.ТипПлательщик = "Отправитель" Тогда
		
		СтруктураПлательщика = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(ЭтаФорма.ДанныеЮрЛиц, "Отправитель");
		СтрокаПлательщика = ЭтаФорма.ДанныеЮрЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлательщика, СтруктураПлательщика);
		СтрокаПлательщика.Роль = Перечисления.Saby_РолиКонтрагентов.ПустаяСсылка();
		
		ЭтаФорма.РасчетныйСчет = РасчетныйСчетПоУмолчанию(СтрокаПлательщика);
		
	Иначе
		
		ЭтаФорма.РасчетныйСчет = Неопределено;
		
	КонецЕсли;
	
	ЗаполнитьРеквизитыСчета(ЭтаФорма.РасчетныйСчет);
	
	ДругойПлательщик = ЭтаФорма.ТипПлательщик = "ДругоеЮрЛицо";
	
	Элементы.ДругойПлательщикСтрокой.Видимость = ДругойПлательщик;
	Элементы.ОснованиеОплаты.Видимость         = ДругойПлательщик;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияОтветственногоЛица(СтруктураОтветственногоЛица, РольСтрокой) Экспорт
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
