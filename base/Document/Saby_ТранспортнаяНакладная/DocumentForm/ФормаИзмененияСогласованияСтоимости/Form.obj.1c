 
 #Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ЭтаФорма.Отправитель         = Параметры.Отправитель;
	ЭтаФорма.Плательщик          = Параметры.Отправитель;
	ЭтаФорма.Перевозчик          = Параметры.Перевозчик;
	ЭтаФорма.ЭтоСогласование     = Параметры.ЭтоСогласование Или Параметры.НаименованиеТитула = "СогласованиеСтоимости";
	ЭтаФорма.СсылкаНаДокумент    = Параметры.СсылкаНаДокумент;	
	ЭтаФорма.ИдентификаторТитула = Параметры.ИдентификаторТитула;
		
	УстановкаТипаРасчетныхСчетов();
	
	// просмотр данных согласования из ленты
	Если ЭтоРасшифровкаИзменений(ЭтаФорма.ИдентификаторТитула) Тогда
		Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеДинамическогоТитула(ЭтотОбъект, 
			СсылкаНаДокумент, 
			ЭтаФорма.ИдентификаторТитула);
			
		Если ЭтаФорма.Ставка = "" Тогда
			ЭтаФорма.Ставка = "без НДС";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоСогласование Тогда		
		// заполним данные титула изменения стоимости
		ЗаполнитьТитулИзмененияСтоимости(ЭтаФорма.ИдентификаторТитула);
	КонецЕсли;	
	
	// при согласовании может быть и другой
	Если Не ЗначениеЗаполнено(ТипПлательщик) Тогда 
		ТипПлательщик = "Отправитель";   
	КонецЕсли;
	
	Если Не ЭтоРасшифровкаИзменений(ЭтаФорма.ИдентификаторТитула) Тогда		
		
		Если Не ЭтоСогласование Тогда
			ЭтаФорма.РасчетныйСчетПеревозчик = РасчетныйСчетПоУмолчанию(Перевозчик);
		Иначе 
			ЭтаФорма.РасчетныйСчет = РасчетныйСчетПоУмолчанию(Плательщик); 
		КонецЕсли;
		
		УстановкаСвязейПараметровВыбора();
		
	КонецЕсли;
	
	ИзменениеВидимостиИДоступностиЭлементов();
	
	// Если открыли форму из ленты и согласование уже прошло 
	// то блокируем от изменений
	Если ЭтоСогласование И ЭтоРасшифровкаИзменений(ЭтаФорма.ИдентификаторТитула) Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Saby_ОбновитьДокумент" И Источник = ЭтаФорма.УникальныйИдентификатор Тогда
		
		Оповестить("Saby_ОбновитьДокумент", ИдентификаторТитула, ВладелецФормы.УникальныйИдентификатор);
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "Saby_СписокДокументов" Тогда
		
		Если Параметр.ЭтоДинамическийТитул Тогда
			
			ОбновитьДанныеПоОшибкамНаСервере(Параметр.СписокДокументов.Получить(СсылкаНаДокумент));
			
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		Оповестить("Saby_ПрочитанДинамическийТитул", ИдентификаторТитула, ВладелецФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибок

&НаКлиенте
Процедура ТаблицаОшибокПриАктивизацииСтроки(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ТаблицаОшибокПриАктивизацииСтроки(ЭтаФорма);
		
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибок

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьСтоимость(Команда)
	
	ВыполнитьОбменСОбновлениемКЭШаСертификатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьВСогласовании(Команда)
	
	ПроцедураОтказатьВСогласованииПослеВводаПричины = Новый ОписаниеОповещения(
		"ОтказатьВСогласованииПослеВводаПричины", ЭтотОбъект);
	
	ПоказатьВводСтроки(ПроцедураОтказатьВСогласованииПослеВводаПричины, Причина, "Введите причину отказа", 255);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьВСогласованииПослеВводаПричины(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПричины = СокрЛП(Результат);
	Если ЗначениеЗаполнено(ЗначениеПричины) Тогда
		Причина = ЗначениеПричины;
	Иначе
		ТаблицаОшибок.Очистить();
		СтрокаОшибки = ТаблицаОшибок.Добавить();
		СтрокаОшибки.Ошибка = "При отказе необходимо обязательно заполнить причину.";
		Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбменСОбновлениемКЭШаСертификатов(Истина, Причина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменСОбновлениемКЭШаСертификатов(ОтказВСогласовании = Ложь, ПричинаОтказа = "")
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОтказВСогласовании", ОтказВСогласовании);
	ДополнительныеПараметры.Вставить("ПричинаОтказа",      ПричинаОтказа);
	
	ПроцедураВыполнитьОбмен = Новый ОписаниеОповещения("ВыполнитьОбмен", ЭтотОбъект, ДополнительныеПараметры);
	
	Saby_ТНОбщегоНазначенияКлиент.ОбновитьКЭШЛокальныхСертификатовИПродолжитьВыполнение(
		ПроцедураВыполнитьОбмен, СсылкаНаДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеДляВыгрузки = Новый Массив;
	ПараметрыВыгрузки = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки(СсылкаНаДокумент);
	ПараметрыВыгрузки.Этап = ?(ЭтоСогласование, "Согласовать стоимость", "Изменение стоимости");
	ПараметрыВыгрузки.ДанныеДокумента = ДанныеТитула();
	
	ПараметрыВыгрузки.ОтрицательныйПереход          = ДополнительныеПараметры.ОтказВСогласовании;
	ПараметрыВыгрузки.ПричинаОтрицательногоПерехода = ДополнительныеПараметры.ПричинаОтказа;
	
	ДанныеДляВыгрузки.Добавить(ПараметрыВыгрузки);
	
	ДополнительныеПараметрыВыгрузки = Новый Структура;
	
	Saby_ТНОбщегоНазначенияКлиент.ВыполнитьКомандуСбис(
		ЭтаФорма, "ЗагрузитьВСбисДинамическийТитул", ДанныеДляВыгрузки, ДополнительныеПараметрыВыгрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОшибки(Команда)	
	
	Элементы.ФормаПоказатьСкрытьОшибки.Пометка = Не Элементы.ФормаПоказатьСкрытьОшибки.Пометка;	
	ОбновитьВнешнийВидЭлементовОшибок();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВнешнийВидЭлементовОшибок()
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоОшибкам(Команда)
	
	ПроцедураОбновитьДанныеПоОшибкамНаКлиенте = Новый ОписаниеОповещения(
		"ОбновитьДанныеПоОшибкамНаКлиенте",
		ЭтотОбъект);
	
	Saby_ТНОбщегоНазначенияКлиент.ПроверитьМодифицированностьИПродолжитьВыполнение(
		ПроцедураОбновитьДанныеПоОшибкамНаКлиенте, Истина);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановкаТипаРасчетныхСчетов()
				
	Типы = ТипыБанковскихСчетов();
	
	Элементы.РасчетныйСчетПеревозчик.ОграничениеТипа = Типы;
	Элементы.РасчетныйСчет.ОграничениеТипа           = Типы; 
	
	УстановкаПараметровВыбораСчетов();
	
КонецПроцедуры

&НаСервере
Процедура УстановкаСвязейПараметровВыбора()
	
	// РасчетныйСчетПеревозчик
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Перевозчик");
    НовыйМассив = Новый Массив();
    НовыйМассив.Добавить(НоваяСвязь);
   
    Элементы.РасчетныйСчетПеревозчик.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
	
	// РасчетныйСчет
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Плательщик");
    НовыйМассив = Новый Массив();
    НовыйМассив.Добавить(НоваяСвязь);
   
    Элементы.РасчетныйСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипыБанковскихСчетов(Ссылка = Неопределено)
	
	ЕстьСправочникБанкСчета = Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено;

	МассивТипов = Новый Массив; 
	Если ЕстьСправочникБанкСчета Тогда 
		МассивТипов.Добавить(Тип("СправочникСсылка.БанковскиеСчета"));
	Иначе
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда 			
			МассивТипов.Добавить(Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов"));
		Иначе 
			МассивТипов.Добавить(Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"));
		КонецЕсли;
				
	КонецЕсли;
	
	Типы = Новый ОписаниеТипов(МассивТипов);
	
	Возврат Типы;
	
КонецФункции

&НаСервере
Процедура УстановкаПараметровВыбораСчетов()
	
	// Перевозчик		
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Перевозчик));		
	
	Элементы.РасчетныйСчетПеревозчик.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора); 
			
	// Плательщик	
	ПараметрыВыбораПлательщик = Новый Массив;
	ПараметрыВыбораПлательщик.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Плательщик));	
	
	Элементы.РасчетныйСчет.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПлательщик);
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеВидимостиИДоступностиЭлементов()
	
	НеОтправитель = (ТипПлательщик <> "Отправитель");
	
	Элементы.Плательщик.Видимость      = НеОтправитель;
	Элементы.ОснованиеОплаты.Видимость = НеОтправитель;
	
	// Режим формы: изменение стоимости/согласование стоимости 	
	Элементы.ГруппаИзмененияСтоимости.ТолькоПросмотр  = ЭтоСогласование;
	Элементы.ДекорацияРеквизитыПеревозчик.Доступность = Не ЭтоСогласование;
	Элементы.ДекорацияПоСчетуПеревозчик.Доступность   = Не ЭтоСогласование;
	
	Элементы.ГруппаПлательщик.Видимость      = ЭтоСогласование;
	Элементы.ОтказатьВСогласовании.Видимость = ЭтоСогласование;
	
	Если ЭтоСогласование Тогда 
		Элементы.ИзменитьСтоимость.Заголовок = "Согласовать стоимость";
		ЭтаФорма.Заголовок                   = "Согласование стоимости";
	КонецЕсли;
	
	// Первичная инициализация
	ПоРеквизитамПеревозчик = ЗначениеЗаполнено(НомерСчетаПеревозчик);
	ПоРеквизитам           = ЗначениеЗаполнено(НомерСчета); 

	Элементы.ГруппаРеквизитыСчетаПеревозчик.Видимость = ПоРеквизитамПеревозчик;
	Элементы.ГруппаРасчетныйСчетПеревозчик.Видимость  = Не ПоРеквизитамПеревозчик;
	
	Элементы.ГруппаРеквизитыСчета.Видимость = ПоРеквизитам;
	Элементы.ГруппаРасчетныйСчет.Видимость  = Не ПоРеквизитам;
	
	Если ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		
		Элементы.ИзменитьСтоимость.Доступность     = Ложь;
		Элементы.ОтказатьВСогласовании.Доступность = Ложь;
		Элементы.Отмена.Доступность                = Ложь;
		
		Элементы.ГруппаИзмененияСтоимости.ТолькоПросмотр = Истина;
		Элементы.ГруппаПлательщик.ТолькоПросмотр         = Истина;
		
		Элементы.ДекорацияРеквизитыПеревозчик.Доступность = Ложь;
		Элементы.ДекорацияПоСчетуПеревозчик.Доступность   = Ложь;

		Элементы.ДекорацияРеквизиты.Доступность = Ложь;
		Элементы.ДекорацияПоСчету.Доступность   = Ложь;

	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТипПлательщикПриИзменении(Элемент)
	
	ПлательщикОтправитель = (ТипПлательщик = "Отправитель");
	
	Элементы.Плательщик.Видимость = Не ПлательщикОтправитель;
		
	Если ПлательщикОтправитель Тогда 		
		ЭтаФорма.Плательщик      = Отправитель;
		ЭтаФорма.ОснованиеОплаты = "";
	Иначе 
		ЭтаФорма.Плательщик = Неопределено;				
	КонецЕсли;
	
	ЭтаФорма.РасчетныйСчет = РасчетныйСчетПоУмолчанию(ЭтаФорма.Плательщик); 
	
	ИзменениеВидимостиИДоступностиЭлементов();
	
КонецПроцедуры

#Область РасчетныйСчет

&НаСервере
Процедура ПлательщикПриИзмененииСервер()
	
	ЭтаФорма.РасчетныйСчет  = РасчетныйСчетПоУмолчанию(ЭтаФорма.Плательщик);	
	
	Элементы.РасчетныйСчет.ОграничениеТипа = ТипыБанковскихСчетов(ЭтаФорма.Плательщик); 	

КонецПроцедуры
	
&НаСервереБезКонтекста
Функция РасчетныйСчетПоУмолчанию(Знач ЮрЛицо)
		
	РасчетныйСчет = Неопределено;	 
	
	ЕстьМодульБухУчет = Метаданные.ОбщиеМодули.Найти("БухгалтерскийУчетПереопределяемый") <> Неопределено;
	
	Если ЕстьМодульБухУчет Тогда
		
		ОбщийМодульОбъект = ОбщегоНазначения.ОбщийМодуль("БухгалтерскийУчетПереопределяемый");
		
		// модуль может быть, а процедуры нет... пример УТ 11
		Попытка 
			РасчетныйСчет = ОбщийМодульОбъект.ПолучитьБанковскийСчетПоУмолчанию(ЮрЛицо);
		Исключение 
			РасчетныйСчет = Неопределено;
		КонецПопытки;
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(РасчетныйСчет) Тогда 
			
		// УТ 11 и т.д... где нет общего модуля получаем все из справочника
		ЕстьСправочникБанкСчета = Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено; 
		
		Если Не ЕстьСправочникБанкСчета Тогда  			
			РасчетныйСчет = РасчетныйСчетИзРазделенныхСправочников(ЮрЛицо);					
		Иначе 			
			РасчетныйСчет = РасчетныйСчетИзСправочникаБанковскихСчетов(ЮрЛицо);					
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РасчетныйСчет;
	
КонецФункции

&НаСервереБезКонтекста
Функция РасчетныйСчетИзСправочникаБанковскихСчетов(ЮрЛицо)
	
	ИмяСправочника = "БанковскиеСчета";
	ВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если Метаданные.Имя = "УправлениеАвтотранспортомПроф" Тогда 
		БанковскиеСчетаОрганизации = Новый ТаблицаЗначений;
		ОбменСКонтрагентамиПереопределяемый.ПолучитьБанковскиеСчета(ЮрЛицо, БанковскиеСчетаОрганизации);
		
		Если БанковскиеСчетаОрганизации.Количество() Тогда
			РасчетныйСчет = БанковскиеСчетаОрганизации[0].БанковскийСчет;
		КонецЕсли;
		
	Иначе 	
		
		БанковскиеСчетаОрганизации = Справочники[ИмяСправочника].БанковскиеСчетаОрганизации(ЮрЛицо, ВалютаРегУчета);		
		Если БанковскиеСчетаОрганизации.Количество() Тогда
			РасчетныйСчет = БанковскиеСчетаОрганизации[0].Ссылка;
		КонецЕсли;
		
	КонецЕсли;		
	
	
	Возврат РасчетныйСчет;
	
КонецФункции
	
&НаСервереБезКонтекста
Функция РасчетныйСчетИзРазделенныхСправочников(ЮрЛицо)
	
	Если ТипЗнч(ЮрЛицо) = Тип("СправочникСсылка.Организации") Тогда 
		
		ИмяСправочника = "БанковскиеСчетаОрганизаций";  				
		РасчетныйСчет  = Справочники[ИмяСправочника].ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ЮрЛицо);
		
	Иначе 
		
		ИмяСправочника = "БанковскиеСчетаКонтрагентов";				
		РасчетныйСчет  = Справочники[ИмяСправочника].ПолучитьБанковскийСчетПоУмолчанию(ЮрЛицо);
		
	КонецЕсли;  
	
	Возврат РасчетныйСчет;
	
КонецФункции

&НаКлиенте
Процедура ПлательщикПриИзменении(Элемент)	
	ПлательщикПриИзмененииСервер();	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ДанныеТитула()

	ОбщаяСтруктура = Новый Структура;
	ОбщаяСтруктура.Вставить("Реквизиты", Новый Структура);
	
	ОбщаяСтруктура.Реквизиты.Вставить("Отправитель", Отправитель);
	
	Если ЭтоСогласование Тогда
		
		ОбщаяСтруктура.Реквизиты.Вставить("Плательщик",      Плательщик);
		ОбщаяСтруктура.Реквизиты.Вставить("ТипПлательщик",   ТипПлательщик);
		ОбщаяСтруктура.Реквизиты.Вставить("ОснованиеОплаты", ОснованиеОплаты);
				
		Если ЗначениеЗаполнено(РасчетныйСчет) Тогда
			ОбщаяСтруктура.Реквизиты.Вставить("РасчетныйСчет", РасчетныйСчет);
		Иначе
			
			ОбщаяСтруктура.Реквизиты.Вставить("БанкБИК",       БанкБИК);
			ОбщаяСтруктура.Реквизиты.Вставить("БанкКоррСчет",  БанкКоррСчет);
			ОбщаяСтруктура.Реквизиты.Вставить("НомерСчета",    НомерСчета);
			ОбщаяСтруктура.Реквизиты.Вставить("БанкНазвание",  БанкНазвание);
			
		КонецЕсли;
		
		ОбщаяСтруктура.Реквизиты.Вставить("Сумма", Сумма);
		
	Иначе
		
		ЗначениеСтавки = ЗначениеСтавки(Ставка); 
		
		СтоПроцентов = 100;		
		Если ЗначениеЗаполнено(ЗначениеСтавки) Тогда 
			СуммаБезНДС = Окр(Сумма / (1 + ЗначениеСтавки / СтоПроцентов), 2, РежимОкругления.Окр15как20);			
			СуммаНДС    = Сумма - СуммаБезНДС;
		Иначе 
			СуммаБезНДС = Сумма;
			СуммаНДС    = 0;			
		КонецЕсли;
							
		ОбщаяСтруктура.Реквизиты.Вставить("Перевозчик",  Перевозчик);
		ОбщаяСтруктура.Реквизиты.Вставить("Сумма",       Сумма);
		ОбщаяСтруктура.Реквизиты.Вставить("Ставка",      Ставка);
		ОбщаяСтруктура.Реквизиты.Вставить("СуммаНДС",    СуммаНДС);
		ОбщаяСтруктура.Реквизиты.Вставить("СуммаБезНДС", СуммаБезНДС);
		ОбщаяСтруктура.Реквизиты.Вставить("Условия",     Условия);
		
		Если ЗначениеЗаполнено(РасчетныйСчетПеревозчик) Тогда 
			ОбщаяСтруктура.Реквизиты.Вставить("РасчетныйСчетПеревозчик", РасчетныйСчетПеревозчик);
		Иначе
			
			ОбщаяСтруктура.Реквизиты.Вставить("БанкБИКПеревозчик",       БанкБИКПеревозчик);
			ОбщаяСтруктура.Реквизиты.Вставить("БанкКоррСчетПеревозчик",  БанкКоррСчетПеревозчик);
			ОбщаяСтруктура.Реквизиты.Вставить("НомерСчетаПеревозчик",    НомерСчетаПеревозчик);			
			ОбщаяСтруктура.Реквизиты.Вставить("БанкНазваниеПеревозчик",  БанкНазваниеПеревозчик);
						
		КонецЕсли;
	
	КонецЕсли;
	
	// Для совместимости ФЛК
	ОбщаяСтруктура.Вставить("Отметки", Новый Массив);
	ОбщаяСтруктура.Вставить("Акты",    Новый Массив);
	ОбщаяСтруктура.Вставить("Штрафы",  Новый Массив);
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

#Область БанковскиеСчета

&НаКлиенте
Процедура ДекорацияПоСчетуНажатие(Элемент)

	Если ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		Возврат;
	КонецЕсли;
	
	// Зачистка
	ЭтаФорма.БанкБИК       = "";
	ЭтаФорма.БанкКоррСчет  = "";
	ЭтаФорма.НомерСчета    = "";
	ЭтаФорма.БанкНазвание  = "";	
	
	// Видимость
	Элементы.ГруппаРасчетныйСчет.Видимость  = Истина;
	Элементы.ГруппаРеквизитыСчета.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоСчетуПеревозчикНажатие(Элемент)
	
	Если ЭтоСогласование Или ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		Возврат;
	КонецЕсли;
	
	// Зачистка
	ЭтаФорма.БанкБИКПеревозчик      = "";
	ЭтаФорма.БанкКоррСчетПеревозчик = "";
	ЭтаФорма.НомерСчетаПеревозчик   = "";
	ЭтаФорма.БанкНазваниеПеревозчик = "";
	
	// Видимость
	Элементы.ГруппаРасчетныйСчетПеревозчик.Видимость  = Истина;
	Элементы.ГруппаРеквизитыСчетаПеревозчик.Видимость = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыНажатие(Элемент)
	
	Если ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		Возврат;
	КонецЕсли;
	
	// Зачистка
	ЭтаФорма.РасчетныйСчет = "";
	
	// Видимость
	Элементы.ГруппаРасчетныйСчет.Видимость  = Ложь;
	Элементы.ГруппаРеквизитыСчета.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыПеревозчикНажатие(Элемент)
	
	Если ЭтоСогласование Или ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		Возврат;
	КонецЕсли;
	
	// Зачистка
	ЭтаФорма.РасчетныйСчетПеревозчик = ""; 
	
	// Видимость
	Элементы.ГруппаРасчетныйСчетПеревозчик.Видимость  = Ложь;
	Элементы.ГруппаРеквизитыСчетаПеревозчик.Видимость = Истина;
	
КонецПроцедуры

#КонецОбласти // БанковскиеСчета 

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРасшифровкаИзменений(ЗначениеИдентификатораТитула)
	
	Возврат ЗначениеЗаполнено(ЗначениеИдентификатораТитула);
	
КонецФункции

&НаСервере
Функция ЗначениеСтавки(Ставка)
	
	Значение = СтрЗаменить(Ставка, "%", "");
	
	ТипЧисло  = Новый ОписаниеТипов("Число");
	Результат = ТипЧисло.ПривестиЗначение(Значение);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТитулИзмененияСтоимости(Идентификатор)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса()); 
	
	ЗапросТекст = 
	 "ВЫБРАТЬ ПЕРВЫЕ 1
	 |	ЕСТЬNULL(Saby_ДанныеТитулов.Период, &ТекущаяДата) КАК Период,
	 |	Saby_ДанныеТитулов.ИдентификаторТитула КАК ИдентификаторТитула
	 |ПОМЕСТИТЬ ВТ_Период
	 |ИЗ
	 |	РегистрСведений.Saby_ДанныеТитулов КАК Saby_ДанныеТитулов
	 |ГДЕ
	 |	Saby_ДанныеТитулов.СсылкаНаДокумент = &СсылкаНаДокумент
	 |  И 1=1
	 |УПОРЯДОЧИТЬ ПО
	 |	Период УБЫВ
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ ПЕРВЫЕ 1
	 |	Saby_ДанныеТитулов.ИдентификаторТитула КАК ИдентификаторТитула,
	 |	Saby_ДанныеТитулов.Данные КАК Данные,
	 |	ВТ_Период.Период КАК Период
	 |ИЗ
	 |	РегистрСведений.Saby_ДанныеТитулов КАК Saby_ДанныеТитулов
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Период КАК ВТ_Период
	 |		ПО Saby_ДанныеТитулов.Период <= ВТ_Период.Период
	 |ГДЕ
	 |	Saby_ДанныеТитулов.СсылкаНаДокумент = &СсылкаНаДокумент
	 |	И Saby_ДанныеТитулов.ТипТитула = ЗНАЧЕНИЕ(Перечисление.Saby_ТипТитулаЭтрН.ИзменениеСтоимости)
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Saby_ДанныеТитулов.Период УБЫВ";
	 
	Если ЗначениеЗаполнено(Идентификатор) Тогда 
		
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор); 		
		Условие = "Saby_ДанныеТитулов.ИдентификаторТитула = &Идентификатор"; 
			
	Иначе 			
		Условие = "Saby_ДанныеТитулов.ТипТитула = ЗНАЧЕНИЕ(Перечисление.Saby_ТипТитулаЭтрН.ИзменениеСтоимости)";				
	КонецЕсли;
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "1=1", Условие);
	Запрос.Текст = ЗапросТекст;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда  
		
		ДанныеФормы = ЗначениеИзСтрокиВнутр(Выборка.Данные);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеФормы);
		
		Если Ставка = "" Тогда
			Ставка = "без НДС";
		КонецЕсли;
		
	КонецЕсли;
	
 КонецПроцедуры

#Область ОбработкаОшибок

&НаКлиенте
Процедура ОбновитьДанныеПоОшибкамНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьДанныеПоОшибкамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоОшибкамНаСервере(Знач Ошибки = Неопределено)
	
	Этап = ?(ЭтоСогласование, "Согласовать стоимость", "Изменение стоимости");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Этап",                    Этап);
	ДополнительныеПараметры.Вставить("Ссылка",                  СсылкаНаДокумент);
	ДополнительныеПараметры.Вставить("ПроверятьПоляСОХ",        Ложь);
	ДополнительныеПараметры.Вставить("ПроверятьПоляОтгрузчика", Ложь);
	
	Если Ошибки = Неопределено Тогда
		ДополнительныеПараметры.Вставить("ДанныеДокумента", ДанныеТитула());
	КонецЕсли;
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьДанныеПоОшибкам(
		ЭтаФорма,
		ДополнительныеПараметры,
		Ошибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтметокПоТипу(ИдентификаторСтроки) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать() Экспорт
	
	ЭтаФорма.Модифицированность = Ложь;
	
КонецПроцедуры

#КонецОбласти // ОбработкаОшибок
 
#КонецОбласти // СлужебныеПроцедурыИФункции
