 
 #Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Отправитель         = Параметры.Отправитель;
	Плательщик          = Параметры.Отправитель;
	Перевозчик          = Параметры.Перевозчик;
	ЭтоСогласование     = Параметры.ЭтоСогласование Или Параметры.НаименованиеТитула = "СогласованиеСтоимости";
	СсылкаНаДокумент    = Параметры.СсылкаНаДокумент;	
	ИдентификаторТитула = Параметры.ИдентификаторТитула;
		
	УстановкаТипаРасчетныхСчетов();
	
	// просмотр данных согласования из ленты
	Если ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		Saby_ТНОбщегоНазначенияСервер.ЗагрузитьДанныеДинамическогоТитула(ЭтотОбъект, СсылкаНаДокумент, ИдентификаторТитула);
		Если Ставка = "" Тогда
			Ставка = "без НДС";
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоСогласование Тогда		
		// заполним данные титула изменения стоимости
		ЗаполнитьТитулИзмененияСтоимости(ИдентификаторТитула);
	КонецЕсли;	
	
	// при согласовании может быть и другой
	Если Не ЗначениеЗаполнено(ТипПлательщик) Тогда 
		ТипПлательщик = "Отправитель";   
	КонецЕсли;
	
	Если Не ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда		
		Если Не ЭтоСогласование Тогда
			РасчетныйСчетПеревозчик = РасчетныйСчетПоУмолчанию(Перевозчик);
		Иначе 
			РасчетныйСчет = РасчетныйСчетПоУмолчанию(Плательщик); 
		КонецЕсли;
	КонецЕсли;
	
	ИзменениеВидимостиИДоступностиЭлементов();
	
	// Если открыли форму из ленты и согласование уже прошло 
	// то блокируем от изменений
	Если ЭтоСогласование И ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Saby_ОбновитьДокумент" И Источник = ЭтаФорма.УникальныйИдентификатор Тогда
		
		Оповестить("Saby_ОбновитьДокумент", ИдентификаторТитула, ВладелецФормы.УникальныйИдентификатор);
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "Saby_СписокДокументов" Тогда
		
		Если Параметр.ЭтоДинамическийТитул Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Ошибки", Параметр.СписокДокументов.Получить(СсылкаНаДокумент));
			
			ОбновитДанныеПоОшибкамНаКлиенте(Неопределено, ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		Оповестить("Saby_ПрочитанДинамическийТитул", ИдентификаторТитула, ВладелецФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибок

&НаКлиенте
Процедура ТаблицаОшибокПриАктивизацииСтроки(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ТаблицаОшибокПриАктивизацииСтроки(ЭтаФорма);
	
	ПараметрыВыделенияДекорации = Saby_ТНОбщегоНазначенияКлиент.ПараметрыВыделенияДекорации(ЭтаФорма);
	Если ПараметрыВыделенияДекорации.НужноОбновитьДекорацию Тогда
		ОбновитьДекорацию(ПараметрыВыделенияДекорации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДекорацию(ПараметрыВыделенияДекорации)
	
	Для Каждого ИмяДекорации Из ПараметрыВыделенияДекорации.Выделить Цикл
		Элементы[ИмяДекорации].ЦветРамки = ЦветаСтиля.ЦветАктивности;
		Элементы[ИмяДекорации].Подсказка = "Необходимо заполнить";
	КонецЦикла;
	
	Для Каждого ИмяДекорации Из ПараметрыВыделенияДекорации.ОтменитьВыделение Цикл
		Элементы[ИмяДекорации].ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
		Элементы[ИмяДекорации].Подсказка = "";
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибок

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьСтоимость(Команда)
	
	ВыполнитьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьВСогласовании(Команда)
	
	ПроцедураОтказатьВСогласованииПослеВводаПричины = Новый ОписаниеОповещения(
		"ОтказатьВСогласованииПослеВводаПричины", ЭтотОбъект
	);
	
	ПоказатьВводСтроки(ПроцедураОтказатьВСогласованииПослеВводаПричины, Причина, "Введите причину отказа", 255);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьВСогласованииПослеВводаПричины(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПричины = СокрЛП(Результат);
	Если ЗначениеЗаполнено(ЗначениеПричины) Тогда
		Причина = ЗначениеПричины;
	Иначе
		ТаблицаОшибок.Очистить();
		СтрокаОшибки = ТаблицаОшибок.Добавить();
		СтрокаОшибки.Ошибка = "При отказе необходимо обязательно заполнить причину.";
		Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбмен(Истина, Причина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(ОтказВСогласованиии = Ложь, ПричинаОтказа = "")
	
	// Запустить обмен с учетом типа операции: изменение / согласование стоимости
	// + Положительный переход / - Отрицательный переход
	Если ЕстьОшибкиЗаполнения() Тогда 
		Возврат;
	КонецЕсли;
	
	Данные = ДанныеДляВыгрузки();
	
	Этап = ?(ЭтоСогласование, "Согласовать стоимость", "Изменение стоимости");
		
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ДанныеТитула",                  Данные);
	ДопПараметры.Вставить("Этап",                          Этап);
	ДопПараметры.Вставить("ОтрицательныйПереход",          ОтказВСогласованиии);
	ДопПараметры.Вставить("ПричинаОтрицательногоПерехода", ПричинаОтказа);
	
	МассивДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаДокумент);
	Saby_ТНОбщегоНазначенияКлиент.ВыполнитьКомандуСбис(ЭтаФорма, "ЗагрузитьВСбис", МассивДокументов, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОшибки(Команда)
	
	Элементы.ФормаПоказатьСкрытьОшибки.Пометка = Не Элементы.ФормаПоказатьСкрытьОшибки.Пометка;
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоОшибкам(Команда)
	
	ПроцедураОбновитДанныеПоОшибкамНаКлиенте = Новый ОписаниеОповещения(
		"ОбновитДанныеПоОшибкамНаКлиенте",
		ЭтотОбъект
	);
	
	Saby_ТНОбщегоНазначенияКлиент.ПроверитьМодифицированностьИПродолжитьВыполнение(
		ПроцедураОбновитДанныеПоОшибкамНаКлиенте, Истина
	);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановкаТипаРасчетныхСчетов()
	
	ЕстьСправочникБанкСчета = Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено;
	
	МассивТипов = Новый Массив; 
	Если ЕстьСправочникБанкСчета Тогда 
		МассивТипов.Добавить(Тип("СправочникСсылка.БанковскиеСчета"));
	Иначе 			
		МассивТипов.Добавить(Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"));
		МассивТипов.Добавить(Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов"));
	КонецЕсли;
			
	// Расчетный счет Перевозчик
	// менять стоимость может только Перевозчик... 		
	Типы = Новый ОписаниеТипов(МассивТипов);
	Элементы.РасчетныйСчетПеревозчик.ОграничениеТипа = Типы;
	Элементы.РасчетныйСчет.ОграничениеТипа           = Типы; 
	
	УстановкаПараметровВыбораСчетов();
	
КонецПроцедуры

&НаСервере
Процедура УстановкаПараметровВыбораСчетов()
	
	// Перевозчик		
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Перевозчик));		
	
	Элементы.РасчетныйСчетПеревозчик.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора); 
			
	// Плательщик	
	ПараметрыВыбораПлательщик = Новый Массив;
	ПараметрыВыбораПлательщик.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Плательщик));	
	
	Элементы.РасчетныйСчет.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПлательщик);
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеВидимостиИДоступностиЭлементов()
	
	НеОтправитель = (ТипПлательщик <> "Отправитель");
	
	Элементы.Плательщик.Видимость      = НеОтправитель;
	Элементы.ОснованиеОплаты.Видимость = НеОтправитель;
	
	// Режим формы: изменение стоимости/согласование стоимости 	
	Элементы.ГруппаИзмененияСтоимости.ТолькоПросмотр   = ЭтоСогласование;
	Элементы.ГруппаПлательщик.Видимость      = ЭтоСогласование;
	Элементы.ОтказатьВСогласовании.Видимость = ЭтоСогласование;
	
	Если ЭтоСогласование Тогда 
		Элементы.ИзменитьСтоимость.Заголовок = "Согласовать стоимость";
		ЭтаФорма.Заголовок                   = "Согласование стоимости";
	КонецЕсли;
	
	// Первичная инициализация
	ПоРеквизитамПеревозчик = ЗначениеЗаполнено(НомерСчетаПеревозчик);
	ПоРеквизитам           = ЗначениеЗаполнено(НомерСчета); 

	Элементы.ГруппаРеквизитыСчетаПеревозчик.Видимость = ПоРеквизитамПеревозчик;
	Элементы.ГруппаРасчетныйСчетПеревозчик.Видимость  = Не ПоРеквизитамПеревозчик;
	
	Элементы.ГруппаРеквизитыСчета.Видимость = ПоРеквизитам;
	Элементы.ГруппаРасчетныйСчет.Видимость  = Не ПоРеквизитам;
	
	Если ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		
		Элементы.ИзменитьСтоимость.Доступность     = Ложь;
		Элементы.ОтказатьВСогласовании.Доступность = Ложь;
		Элементы.Отмена.Доступность                = Ложь;
		
		Элементы.ГруппаИзмененияСтоимости.ТолькоПросмотр   = Истина;
		Элементы.ГруппаПлательщик.ТолькоПросмотр = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТипПлательщикПриИзменении(Элемент)
	
	ПлательщикОтправитель = (ТипПлательщик = "Отправитель");
	
	Элементы.Плательщик.Видимость = Не ПлательщикОтправитель;
		
	Если ПлательщикОтправитель Тогда 		
		Плательщик      = Отправитель;
		ОснованиеОплаты = "";
	Иначе 
		Плательщик = Неопределено;				
	КонецЕсли;
	
	РасчетныйСчет = РасчетныйСчетПоУмолчанию(Плательщик); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасчетныйСчетПоУмолчанию(ЮрЛицо)
		
	РасчетныйСчет = Неопределено;
	
	НазваниеОбщегоМодуля = "БухгалтерскийУчетПереопределяемый";
	ОбщийМодульОбъект    = ОбщегоНазначения.ОбщийМодуль("БухгалтерскийУчетПереопределяемый"); 
	
	Если ОбщийМодульОбъект <> Неопределено Тогда
		
		// модуль может быть, а процедуры нет... пример УТ 11
		Попытка 
			РасчетныйСчет = ОбщийМодульОбъект.ПолучитьБанковскийСчетПоУмолчанию(ЮрЛицо);
		Исключение 
			РасчетныйСчет = Неопределено;
		КонецПопытки;
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(РасчетныйСчет) Тогда 
			
		// УТ 11 и т.д... где нет общего модуля получаем все из справочника
		ЕстьСправочникБанкСчета = Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено; 
		
		Если Не ЕстьСправочникБанкСчета Тогда  
			
			Если ТипЗнч(ЮрЛицо) = Тип("СправочникСсылка.Организации") Тогда 
				
				ИмяСправочника = "БанковскиеСчетаОрганизаций";  				
				РасчетныйСчет  = Справочники[ИмяСправочника].ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ЮрЛицо);
				
			Иначе 
				
				ИмяСправочника = "БанковскиеСчетаКонтрагентов";				
				РасчетныйСчет  = Справочники[ИмяСправочника].ПолучитьБанковскийСчетПоУмолчанию(ЮрЛицо);
				
			КонецЕсли;  
			
		Иначе 
			
			ИмяСправочника = "БанковскиеСчета";
			ВалютаРегУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
			
			БанковскиеСчетаОрганизации = Справочники[ИмяСправочника].БанковскиеСчетаОрганизации(ЮрЛицо, ВалютаРегУчета);
				
			Если БанковскиеСчетаОрганизации.Количество() = 1 Тогда
				РасчетныйСчет = БанковскиеСчетаОрганизации[0].Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РасчетныйСчет;
	
КонецФункции

&НаКлиенте
Процедура ПлательщикПриИзменении(Элемент)
	
	РасчетныйСчет = РасчетныйСчетПоУмолчанию(Плательщик);
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеДляВыгрузки()

	ОбщаяСтруктура = Новый Структура;
	ОбщаяСтруктура.Вставить("Отправитель", Отправитель);
	
	Если ЭтоСогласование Тогда
		
		ОбщаяСтруктура.Вставить("Плательщик",      Плательщик);
		ОбщаяСтруктура.Вставить("ТипПлательщик",   ТипПлательщик);
		ОбщаяСтруктура.Вставить("ОснованиеОплаты", ОснованиеОплаты);
				
		Если ЗначениеЗаполнено(РасчетныйСчет) Тогда
			ОбщаяСтруктура.Вставить("РасчетныйСчет", РасчетныйСчет);
		Иначе
			
			ОбщаяСтруктура.Вставить("БанкБИК",       БанкБИК);
			ОбщаяСтруктура.Вставить("БанкКоррСчет",  БанкКоррСчет);
			ОбщаяСтруктура.Вставить("НомерСчета",    НомерСчета);
			ОбщаяСтруктура.Вставить("БанкНазвание",  БанкНазвание);
			
		КонецЕсли;
					
	Иначе
		
		ЗначениеСтавки = ЗначениеСтавки(Ставка); 
		
		Если ЗначениеЗаполнено(ЗначениеСтавки) Тогда 
			СуммаБезНДС = Окр(Сумма/(1 + ЗначениеСтавки/100), 2, РежимОкругления.Окр15как20);			
			СуммаНДС    = Сумма - СуммаБезНДС;
		Иначе 
			СуммаБезНДС = Сумма;
			СуммаНДС    = 0;			
		КонецЕсли;
							
		ОбщаяСтруктура.Вставить("Перевозчик",  Перевозчик);
		ОбщаяСтруктура.Вставить("Сумма",       Сумма);
		ОбщаяСтруктура.Вставить("Ставка",      Ставка);
		ОбщаяСтруктура.Вставить("СуммаНДС",    СуммаНДС);
		ОбщаяСтруктура.Вставить("СуммаБезНДС", СуммаБезНДС);
		ОбщаяСтруктура.Вставить("Условия",     Условия);
		
		Если ЗначениеЗаполнено(РасчетныйСчетПеревозчик) Тогда 
			ОбщаяСтруктура.Вставить("РасчетныйСчетПеревозчик", РасчетныйСчетПеревозчик);
		Иначе
			
			ОбщаяСтруктура.Вставить("БанкБИКПеревозчик",       БанкБИКПеревозчик);
			ОбщаяСтруктура.Вставить("БанкКоррСчетПеревозчик",  БанкКоррСчетПеревозчик);
			ОбщаяСтруктура.Вставить("НомерСчетаПеревозчик",    НомерСчетаПеревозчик);			
			ОбщаяСтруктура.Вставить("БанкНазваниеПеревозчик",  БанкНазваниеПеревозчик);
						
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

#Область БанковскиеСчета

&НаКлиенте
Процедура ДекорацияПоСчетуНажатие(Элемент)

	Если ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		Возврат;
	КонецЕсли;
	
	РасчетныйСчет = "";
	Элементы.ГруппаРасчетныйСчет.Видимость  = Ложь;
	Элементы.ГруппаРеквизитыСчета.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыНажатие(Элемент)
	
	Если ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		Возврат;
	КонецЕсли;
	
	БанкБИК      = "";
	БанкКоррСчет = "";
	НомерСчета   = "";
	БанкНазвание = "";
	
	Элементы.ГруппаРасчетныйСчет.Видимость  = Истина;
	Элементы.ГруппаРеквизитыСчета.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыПеревозчикНажатие(Элемент)
	
	Если ЭтоСогласование Или ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		Возврат;
	КонецЕсли;
	
	РасчетныйСчетПеревозчик = "";
	Элементы.ГруппаРасчетныйСчетПеревозчик.Видимость  = Ложь;
	Элементы.ГруппаРеквизитыСчетаПеревозчик.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоСчетуПеревозчикНажатие(Элемент)
	
	Если ЭтоСогласование Или ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		Возврат;
	КонецЕсли;
	
	БанкБИКПеревозчик      = "";
	БанкКоррСчетПеревозчик = "";
	НомерСчетаПеревозчик   = "";
	БанкНазваниеПеревозчик = "";
	
	Элементы.ГруппаРасчетныйСчетПеревозчик.Видимость  = Истина;
	Элементы.ГруппаРеквизитыСчетаПеревозчик.Видимость = Ложь;
		
КонецПроцедуры

#КонецОбласти // БанковскиеСчета 

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРасшифровкаИзменений(ЗначениеИдентификатораТитула)
	
	Возврат ЗначениеЗаполнено(ЗначениеИдентификатораТитула);
	
КонецФункции

&НаКлиенте
Функция ЗначениеСтавки(Ставка)
	
	Значение = СтрЗаменить(Ставка, "%", "");
	
	ТипЧисло  = Новый ОписаниеТипов("Число");
	Результат = ТипЧисло.ПривестиЗначение(Значение);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТитулИзмененияСтоимости(Идентификатор)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса()); 
	
	ЗапросТекст = 
	 "ВЫБРАТЬ ПЕРВЫЕ 1
	 |	ЕСТЬNULL(Saby_ДанныеДинамическихТитулов.Период, &ТекущаяДата) КАК Период,
	 |	Saby_ДанныеДинамическихТитулов.ИдентификаторТитула КАК ИдентификаторТитула
	 |ПОМЕСТИТЬ ВТ_Период
	 |ИЗ
	 |	РегистрСведений.Saby_ДанныеДинамическихТитулов КАК Saby_ДанныеДинамическихТитулов
	 |ГДЕ
	 |	Saby_ДанныеДинамическихТитулов.СсылкаНаДокумент = &СсылкаНаДокумент
	 |  И 1=1
	 |УПОРЯДОЧИТЬ ПО
	 |	Период УБЫВ
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ ПЕРВЫЕ 1
	 |	Saby_ДанныеДинамическихТитулов.ИдентификаторТитула КАК ИдентификаторТитула,
	 |	Saby_ДанныеДинамическихТитулов.Данные КАК Данные,
	 |	ВТ_Период.Период КАК Период
	 |ИЗ
	 |	РегистрСведений.Saby_ДанныеДинамическихТитулов КАК Saby_ДанныеДинамическихТитулов
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Период КАК ВТ_Период
	 |		ПО Saby_ДанныеДинамическихТитулов.Период <= ВТ_Период.Период
	 |ГДЕ
	 |	Saby_ДанныеДинамическихТитулов.СсылкаНаДокумент = &СсылкаНаДокумент
	 |	И Saby_ДанныеДинамическихТитулов.ТипТитула = ЗНАЧЕНИЕ(Перечисление.Saby_ТипТитулаЭтрН.ИзменениеСтоимости)
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Saby_ДанныеДинамическихТитулов.Период УБЫВ";
	 
	Если ЗначениеЗаполнено(Идентификатор) Тогда 
		
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор); 		
		Условие = "Saby_ДанныеДинамическихТитулов.ИдентификаторТитула = &Идентификатор"; 
			
	Иначе 			
		Условие = "Saby_ДанныеДинамическихТитулов.ТипТитула = ЗНАЧЕНИЕ(Перечисление.Saby_ТипТитулаЭтрН.ИзменениеСтоимости)";				
	КонецЕсли;
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "1=1", Условие);
	Запрос.Текст = ЗапросТекст;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда  
		
		ДанныеФормы = ЗначениеИзСтрокиВнутр(Выборка.Данные);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеФормы);
		
		Если Ставка = "" Тогда
			Ставка = "без НДС";
		КонецЕсли;
		
	КонецЕсли;
	
 КонецПроцедуры

#Область ОбработкаОшибок

&НаКлиенте
Функция ЕстьОшибкиЗаполнения(Ошибки = Неопределено)
	
	Ошибки = ОшибкиФЛК();
	
	ЕстьОшибки = Ошибки.СписокОшибок.Количество() > 0;
	
	Если ЕстьОшибки Тогда
		
		СписокДокументов = Новый Соответствие;
		СписокДокументов.Вставить(СсылкаНаДокумент, Ошибки);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("СписокДокументов",     СписокДокументов);
		ПараметрыФормы.Вставить("ЭтоДинамическийТитул", Истина);
		
		Оповестить("Saby_СписокДокументов", ПараметрыФормы);
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

&НаСервере
Функция ОшибкиФЛК()
	
	Ошибки = Новый Структура;
	Ошибки.Вставить("СписокОшибок", Новый Массив);
	Ошибки.Вставить("ГруппыОшибок", Новый Соответствие);
	
	ДанныеДокумента = ДанныеДляПроверки();
	
	ПроверяемыеРеквизиты = ПроверяемыеРеквизитыЭтапа(ДанныеДокумента);
	
	СоответствиеРеквизитовОшибок = Документы.Saby_ТранспортнаяНакладная.СоответствиеРеквизитовОшибок();
	
	Документы.Saby_ТранспортнаяНакладная.ПроверитьЗаполненНеЗаполнен(
		ДанныеДокумента, ПроверяемыеРеквизиты, Ошибки, СоответствиеРеквизитовОшибок
	);
	
	Возврат Ошибки;
	
КонецФункции

&НаСервере
Функция ДанныеДляПроверки()
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Реквизиты", Новый Структура);
	
	РезультатФункции.Реквизиты.Вставить("Ставка",                  Ставка);
	РезультатФункции.Реквизиты.Вставить("Сумма",                   Сумма);
	РезультатФункции.Реквизиты.Вставить("Условия",                 Условия);
	РезультатФункции.Реквизиты.Вставить("РасчетныйСчетПеревозчик", РасчетныйСчетПеревозчик);
	РезультатФункции.Реквизиты.Вставить("БанкНазваниеПеревозчик",  БанкНазваниеПеревозчик);
	РезультатФункции.Реквизиты.Вставить("БанкБИКПеревозчик",       БанкБИКПеревозчик);
	РезультатФункции.Реквизиты.Вставить("БанкКоррСчетПеревозчик",  БанкКоррСчетПеревозчик);
	РезультатФункции.Реквизиты.Вставить("НомерСчетаПеревозчик",    НомерСчетаПеревозчик);

	РезультатФункции.Реквизиты.Вставить("Плательщик",              Плательщик);
	РезультатФункции.Реквизиты.Вставить("РасчетныйСчет",           РасчетныйСчет);
	РезультатФункции.Реквизиты.Вставить("БанкНазвание",            БанкНазвание);
	РезультатФункции.Реквизиты.Вставить("БанкБИК",                 БанкБИК);
	РезультатФункции.Реквизиты.Вставить("БанкКоррСчет",            БанкКоррСчет);
	РезультатФункции.Реквизиты.Вставить("НомерСчета",              НомерСчета);
	РезультатФункции.Реквизиты.Вставить("ОснованиеОплаты",         ОснованиеОплаты);
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Функция ПроверяемыеРеквизитыЭтапа(ДанныеДокумента)
	
	РезультатФункции = Новый Массив;
	
	РезультатФункции.Добавить("Сумма");
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОбновитДанныеПоОшибкамНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	Ошибки = Неопределено;
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("Ошибки") Тогда
		Ошибки = ДополнительныеПараметры.Ошибки;
	Иначе
		Ошибки = ОшибкиФЛК();
	КонецЕсли;
	
	КоличествоОшибок = Ошибки.СписокОшибок.Количество();
	
	ТаблицаОшибок.Очистить();
	Для Каждого СтруктураОшибки Из Ошибки.СписокОшибок Цикл
		СтрокаТаблицыОшибок = ТаблицаОшибок.Добавить();
		СтрокаТаблицыОшибок.Ошибка          = СтруктураОшибки.ТекстДляОднойОшибки;
		СтрокаТаблицыОшибок.РеквизитОбъекта = СтруктураОшибки.РеквизитОбъекта;
		СтрокаТаблицыОшибок.ЭлементФормы    = СтруктураОшибки.ЭлементФормы;
		СтрокаТаблицыОшибок.ИндексСтроки    = СтруктураОшибки.ИндексСтроки;
	КонецЦикла;
	
	ОбновитДанныеПоОшибкамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитДанныеПоОшибкамНаСервере()
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтметокПоТипу(ИдентификаторСтроки) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать() Экспорт
	
	Модифицированность = Ложь;
	
КонецПроцедуры

#КонецОбласти // ОбработкаОшибок
 
#КонецОбласти // СлужебныеПроцедурыИФункции

