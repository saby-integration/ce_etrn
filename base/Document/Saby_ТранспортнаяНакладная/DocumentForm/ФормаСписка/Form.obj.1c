  
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, 
		"Список.Дата", "Дата");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() Тогда 
		ТекущаяСсылка = Элементы.Список.ВыделенныеСтроки[0];
	Иначе 
		ТекущаяСсылка = Неопределено;
	КонецЕсли;
	
	Если ИмяСобытия = "Saby_СписокДокументовОбновить" Тогда  	
		
		Элементы.Список.Обновить();
				
	ИначеЕсли ИмяСобытия = "Saby_ВыполнитьПереход"   
		И Источник = ЭтаФорма.УникальныйИдентификатор Тогда
		
		// Продолжим выполнение выгрузки
		// откроем форму переход
		Если ЗначениеЗаполнено(Параметр.Этап) Тогда 
			Saby_ТНОбщегоНазначенияКлиент.СменаЭтапа(Параметр.Ключ, ЭтаФорма, Параметр.Этап);
		Иначе 
			
			// обновим этап после сброса	
			ОбменДаннымиСБИС("ОбновитьАктивныйЭтап");
			
			КартинкаСообщения = БиблиотекаКартинок["Saby_Ошибка32"];
			
			ПоказатьОповещениеПользователя(
				"Ошибка",
				,
				"Нет доступных действий",
				КартинкаСообщения,
				СтатусОповещенияПользователя.Важное,
				Новый УникальныйИдентификатор);
								
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Saby_ЗавершениеВыполнитьДействие"
		И Источник = ЭтаФорма Тогда 
		
		Если Параметр.status = "error" Тогда 
						
			Saby_ТНОбщегоНазначенияКлиент.ОбработатьОшибкиИзФормыВыполнитьДействие(ТекущаяСсылка, Параметр);
			Элементы.Список.Обновить();
			
		Иначе 
			
			// ToDo: КОСТЫЛЬ... 
			// Ошибка по этапам. При переходе возвращается пустой активный этап
			// запускаем чтение документа 			
			ОбменДаннымиСБИС("ОбновитьАктивныйЭтап");			
			
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтказВПриемкеГруза(Команда)
		
	Подсказка    = "Укажите причину отказа от приемки груза"; 
	ДопПараметры = Новый Структура;  	
	Оповещение   = Новый ОписаниеОповещения("ПослеВводаПричиныОтказа", ЭтаФорма, ДопПараметры);
	
	ПоказатьВводСтроки(Оповещение, "", Подсказка, 0, Истина);
					
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВСбис(Команда)
	
	ОбменДаннымиСБИС(Команда.Имя, Новый Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДокумент(Команда)
	
	ОбменДаннымиСБИС(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВСбис(Команда)
	
	ОбменДаннымиСБИС(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументИзСбис(Команда)
			
	ДатаОбновления = ДатаПоследнегоОбновления();
	Если Не ЗначениеЗаполнено(ДатаОбновления) Тогда 
		ОбновитьДокументыЗаПериод(Команда.Имя);			
	Иначе 
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Начало", ДатаОбновления);
		
		// Обновляем все документы разом
		// не важно выделенны строки или нет
		ОбменДаннымиСБИС(Команда.Имя, ДопПараметры);
		
	КонецЕсли;		
			
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументИзСбисЗаПериод(Команда)
	
	ОбновитьДокументыЗаПериод("ОбновитьДокументИзСбис", Истина); 

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтоимость(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отправитель", "");
	
	ОткрытьФорму(
		"Документ.Saby_ТранспортнаяНакладная.Форма.ФормаИзмененияСогласованияСтоимости",
		ПараметрыФормы, 
		ЭтаФорма, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьСтоимость(Команда)
	
	// Оповещение
	
	ОткрытьФорму(
		"Документ.Saby_ТранспортнаяНакладная.Форма.ФормаИзмененияСогласованияСтоимости", , 
		ЭтаФорма, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
		
КонецПроцедуры

&НаКлиенте
Процедура Переадресовка(Команда)
	
	ОткрытьФорму(
		"Документ.Saby_ТранспортнаяНакладная.Форма.ФормаПереадресовка", , 
		ЭтаФорма, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ЗаменаВодителя(Команда)
	
	// Оповещение
	
	ОткрытьФорму(
		"Документ.Saby_ТранспортнаяНакладная.Форма.ФормаЗаменыВодителяИлиТС", , 
		ЭтаФорма, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеОПереадресовке(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура Просмотрено(Команда)
	МассивДокументов = ДокументыДляОбработки();
	ПросмотреноНаСервере(МассивДокументов);
	ОповеститьОбИзменении(Тип("ДокументСсылка.Saby_ТранспортнаяНакладная"));
КонецПроцедуры

&НаКлиенте
Процедура ОтборИзмененныхДокументов(Команда)
	
	УстановленОтборИзмененныхДокументов = Не УстановленОтборИзмененныхДокументов;
	Если УстановленОтборИзмененныхДокументов Тогда
		УстановитьЭлементОтбораДинамическогоСписка(Список, Ложь, "Просмотрен");
	Иначе
		УстановитьЭлементОтбораДинамическогоСписка(Список, Неопределено, "Просмотрен");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиТранспортнойНакладной(Команда)
	
	ОткрытьФорму("Документ.Saby_ТранспортнаяНакладная.Форма.ФормаНастроекТранспортнойНакладной", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	СсылкаНаДокумент = Элементы.Список.ТекущаяСтрока;
	Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Saby_ТНОбщегоНазначенияКлиент.СоздатьИОткрытьПечатнуюФормуЭТрН(СсылкаНаДокумент, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЭлементОтбораДинамическогоСписка(Список, РеквизитФормы, ИмяПоляДинамическогоСписка)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, 
		ИмяПоляДинамическогоСписка, 
		РеквизитФормы, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(РеквизитФормы));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменДаннымиСБИС(ИмяКоманды, ДополнительныеПараметры = Неопределено)
	
	Если ИмяКоманды = "ЗагрузитьВСбис" Тогда
		МассивДокументов = ДокументыДляОбработки(Истина);
	ИначеЕсли ИмяКоманды = "ОбновитьАктивныйЭтап" Тогда
		ДополнительныеПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыЧтенияДокументаИзСБИС(
			ДополнительныеПараметры);
		
		МассивДокументов = ДокументыДляОбработки();
		ДополнительныеПараметры.Вставить("ТекущийТитул", АктивныйЭтапСтрокой);
		АктивныйЭтапСтрокой = "";
	Иначе
		МассивДокументов = Новый Массив;
	КонецЕсли;
	
	Saby_ТНОбщегоНазначенияКлиент.ВыполнитьКомандуСбис(ЭтаФорма, ИмяКоманды, МассивДокументов, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаПоследнегоОбновления()
	Возврат Документы.Saby_ТранспортнаяНакладная.ПоследнееУспешноЗагруженноеИзменение();
КонецФункции

&НаКлиенте
Функция ДокументыДляОбработки(ЗаполнитьАктивныйЭтап = Ложь)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	Массив = Новый Массив;
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		Если ЗаполнитьАктивныйЭтап И АктивныйЭтапСтрокой = "" Тогда
			АктивныйЭтапСтрокой = АктивныйЭтапСтрокой(Строка);
			АктивныйЭтапСтрокой = ?(АктивныйЭтапСтрокой = "", "Погрузка", АктивныйЭтапСтрокой);
		КонецЕсли;
		Массив.Добавить(Строка);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуТест()
	
	СсылкаДок = Документы.ПриемНаРаботу.НайтиПоНомеру("ДС00-000001", ТекущаяДатаСеанса());	
	Возврат СсылкаДок;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьДокументВСбис(Ссылка, context_params, Ошибки)
	
	Документы.Saby_ТранспортнаяНакладная.ЗаписатьДокументВСбис(
		Ссылка, 
		context_params,
		Ошибки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьДокументыПоИзменениям(context_params, УникальныйИдентификаторФормы)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификаторФормы);
	
	Наименование = НСтр("ru = 'Синхронизация документов со СБИС';
		                 |en = 'Document synchronization to SBIS'");
	
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Наименование; 	
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	
	ИмяФункции = "Документы.Saby_ТранспортнаяНакладная.ЗагрузкаДокументовПоИзменениям";
	
	Возврат
	ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		ИмяФункции, 
		context_params);	
			
КонецФункции

&НаКлиенте
Процедура ПослеВводаПричиныОтказа(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	// ToDo: обработать документы
	
	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда 
						
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Для отказа от приемки груза укажите причину";
		Сообщение.Поле  = "ФормаОтказВПриемкеГруза";
		Сообщение.Сообщить();
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПросмотреноНаСервере(Знач СписокДокументов)
	
	Для Каждого Документ Из СписокДокументов Цикл
		ДанныеСостояния = РегистрыСведений.Saby_Состояние.ПрочитатьПоОбъекту(Документ);	
		Если ТипЗнч(ДанныеСостояния) = Тип("РегистрСведенийВыборка.Saby_Состояние") Тогда
			
			Параметры = Новый Структура;
			Параметры.Вставить("ИД",           ДанныеСостояния.UID);
			Параметры.Вставить("АктивныйЭтап", СокрЛП(ДанныеСостояния.АктивныйЭтап));
			Параметры.Вставить("Ссылка",       Документ);
			Параметры.Вставить("Загрузка",     Ложь);
			Параметры.Вставить("Состояние",    ДанныеСостояния.Состояние);
			Параметры.Вставить("СбисИД",       ""); // сбрасываем "Не просмотрен" 
					
			Документы.Saby_ТранспортнаяНакладная.УстановитьИДИСтатус(Параметры);
			
		КонецЕсли;
	КонецЦикла;
	
	РегистрыСведений.Saby_ДанныеТитулов.Просмотреть(СписокДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаПериодаЗагрузки(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Обновление не выполнено! Не указан период обновления документов";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
    ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Начало",    РезультатЗакрытия.Начало);
	ДопПараметры.Вставить("Окончание", РезультатЗакрытия.Окончание);
			
	// Обновляем все документы разом
	// не важно выделенны строки или нет
	ОбменДаннымиСБИС(ДополнительныеПараметры.ИмяКоманды, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПриИзменении(Элемент)
		
	УстановитьЭлементОтбораДинамическогоСписка(Список, Тип, "Направление"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыЗаПериод(ИмяКоманды, НеОбновлятьДатуИзменения = Ложь)
		
	// Обновить документы с даты
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("ИмяКоманды", ИмяКоманды);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаПериодаЗагрузки", ЭтаФорма, ПараметрыВызова);
	
	ОткрытьФорму(
		"Документ.Saby_ТранспортнаяНакладная.Форма.ФормаНастройкиПериода", ,
		ЭтаФорма, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АктивныйЭтапСтрокой(Знач СсылкаНаДокумент)
	
	РезультатФункции = "";
	
	ДанныеСостояния = РегистрыСведений.Saby_Состояние.ПрочитатьПоОбъекту(СсылкаНаДокумент);
	Если ДанныеСостояния <> Неопределено Тогда
		РезультатФункции = ДанныеСостояния.АктивныйЭтап;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции  
