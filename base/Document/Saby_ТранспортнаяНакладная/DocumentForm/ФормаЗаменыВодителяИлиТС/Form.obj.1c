
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СсылкаНаДокумент    = Параметры.СсылкаНаДокумент;
	ИдентификаторТитула = Параметры.ИдентификаторТитула;
	
	Если ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		
		Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеДинамическогоТитула(ЭтотОбъект, СсылкаНаДокумент, ИдентификаторТитула);
		УстановитьДанныеВодителей();
		
	Иначе
		
		ЭтаФорма.ДатаВремяЗамены = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	РазложитьДатуПоРеквизитам();
	
	ЭтаФорма.ТипСмены = ?(ЗначениеЗаполнено(ДокументЗамены), "Документ", "Описание");
	
	ОбновитьВидимостьИДоступностьЭлементов(Истина);
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьТранспортныеСредстваНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		Оповестить("Saby_ПрочитанДинамическийТитул", ИдентификаторТитула, ВладелецФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Saby_ОбновитьДокумент" И Источник = ЭтаФорма.УникальныйИдентификатор Тогда
		
		Оповестить("Saby_ОбновитьДокумент", ИдентификаторТитула, ВладелецФормы.УникальныйИдентификатор);
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "Saby_СписокДокументов" Тогда
		
		Если Параметр.ЭтоДинамическийТитул Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Ошибки", Параметр.СписокДокументов.Получить(СсылкаНаДокумент));
			
			ОбновитДанныеПоОшибкамНаКлиенте(Неопределено, ДополнительныеПараметры);
			
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТранспортноеСредствоСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	ПроцедураПослеОбновленияДанныхТранспортныхСредств = Новый ОписаниеОповещения(
		"ПослеОбновленияДанныхТранспортныхСредств",
		ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияКлиент.ТранспортноеСредствоСтрокойНажатие(
		ЭтаФорма,
		СтандартнаяОбработка,
		ПроцедураПослеОбновленияДанныхТранспортныхСредств);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПрицепы

&НаКлиенте
Процедура ПрицепыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПроцедураПослеОбновленияДанныхТранспортныхСредств = Новый ОписаниеОповещения(
		"ПослеОбновленияДанныхТранспортныхСредств",
		ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияКлиент.ПрицепыВыбор(
		ЭтаФорма,
		ВыбраннаяСтрока,
		СтандартнаяОбработка,
		ПроцедураПослеОбновленияДанныхТранспортныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПроцедураПослеОбновленияДанныхТранспортныхСредств = Новый ОписаниеОповещения(
		"ПослеОбновленияДанныхТранспортныхСредств",
		ЭтаФорма);
	
	Saby_ТНОбщегоНазначенияКлиент.ПрицепыПриНачалеРедактирования(
		ЭтаФорма,
		ПроцедураПослеОбновленияДанныхТранспортныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПослеУдаления(Элемент)
	
	ПослеОбновленияДанныхТранспортныхСредств(Неопределено, Неопределено);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПрицепы

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибок

&НаКлиенте
Процедура ТаблицаОшибокПриАктивизацииСтроки(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ТаблицаОшибокПриАктивизацииСтроки(ЭтаФорма);
	
	ПараметрыВыделенияДекорации = Saby_ТНОбщегоНазначенияКлиент.ПараметрыВыделенияДекорации(ЭтаФорма);
	Если ПараметрыВыделенияДекорации.НужноОбновитьДекорацию Тогда
		ОбновитьДекорацию(ПараметрыВыделенияДекорации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибок

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаменаВодители(Команда)
	
    Элементы.ЗаменаВодители.Пометка = Не Элементы.ЗаменаВодители.Пометка;
	УстановитьШрифтКнопки(Элементы.ЗаменаВодители);
	ВидимостьЭлементовПоВидамЗамены();
	
	Если Элементы.ГруппаОшибки.Видимость Тогда
		ОбновитДанныеПоОшибкамНаКлиенте(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаПрицепы(Команда)

	Элементы.ЗаменаПрицепы.Пометка = Не Элементы.ЗаменаПрицепы.Пометка;
	УстановитьШрифтКнопки(Элементы.ЗаменаПрицепы);
	ВидимостьЭлементовПоВидамЗамены();
	
	Если Элементы.ГруппаОшибки.Видимость Тогда
		ОбновитДанныеПоОшибкамНаКлиенте(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаТС(Команда)
	
	Элементы.ЗаменаТС.Пометка = Не Элементы.ЗаменаТС.Пометка;
	УстановитьШрифтКнопки(Элементы.ЗаменаТС);
	ВидимостьЭлементовПоВидамЗамены();
	
	Если Элементы.ГруппаОшибки.Видимость Тогда
		ОбновитДанныеПоОшибкамНаКлиенте(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗамену(Команда)
	
	ПроцедураВыполнитьОбмен = Новый ОписаниеОповещения("ВыполнитьОбмен", ЭтотОбъект);
	
	Saby_ТНОбщегоНазначенияКлиент.ОбновитьКЭШЛокальныхСертификатовИПродолжитьВыполнение(
		ПроцедураВыполнитьОбмен, СсылкаНаДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОшибки(Команда)	
	
	Элементы.ФормаПоказатьСкрытьОшибки.Пометка = Не Элементы.ФормаПоказатьСкрытьОшибки.Пометка;	
	ОбновитьВнешнийВидЭлементовОшибок();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВнешнийВидЭлементовОшибок()
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоОшибкам(Команда)
	
	ПроцедураОбновитДанныеПоОшибкамНаКлиенте = Новый ОписаниеОповещения(
		"ОбновитДанныеПоОшибкамНаКлиенте",
		ЭтотОбъект);
	
	Saby_ТНОбщегоНазначенияКлиент.ПроверитьМодифицированностьИПродолжитьВыполнение(
		ПроцедураОбновитДанныеПоОшибкамНаКлиенте, Истина);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы 

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьОбмен(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЕстьОшибкиЗаполнения() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицыДляОтправки = ТаблицыДляОтправки();
	
	ДанныеТитула = Новый Структура;
	
	ДанныеТитула.Вставить("ДатаВремяЗамены", ДатаВремяЗамены);
	
	Если ТипСмены = "Документ" Тогда
		ДанныеТитула.Вставить("ЗаменаВодителейТС_НаОсновании", ДокументЗамены);
	Иначе
		ДанныеТитула.Вставить("ЗаменаВодителейТС_НаОсновании", ПричинаЗамены); 
	КонецЕсли;
	
	Если Элементы.ЗаменаТС.Пометка Или Элементы.ЗаменаПрицепы.Пометка Тогда
		ДанныеТитула.Вставить("ТранспортныеСредства", ТаблицыДляОтправки.ТранспортныеСредства);
	Иначе
		ДанныеТитула.Вставить("ТранспортныеСредства", Новый Массив);
	КонецЕсли;
	
	Если Элементы.ЗаменаТС.Пометка Тогда
		ДанныеТитула.Вставить("ОснованиеПередачиГрузаТС", ОснованиеПередачиГрузаТС);
		ДанныеТитула.Вставить("СпецРазрешения",           ТаблицыДляОтправки.СпецРазрешения);
	Иначе
		ДанныеТитула.Вставить("ОснованиеПередачиГрузаТС", Неопределено);
		ДанныеТитула.Вставить("СпецРазрешения",           Новый Массив);
	КонецЕсли;
		
	Если Элементы.ЗаменаВодители.Пометка Тогда		
		ДанныеТитула.Вставить("Водители",     ТаблицыДляОтправки.Водители);
		ДанныеТитула.Вставить("ПутевыеЛисты", ТаблицыДляОтправки.ПутевыеЛисты);
	Иначе 
		ДанныеТитула.Вставить("Водители",     Новый Массив);
		ДанныеТитула.Вставить("ПутевыеЛисты", Новый Массив);
	КонецЕсли;

	ДанныеТитула.Вставить("Отметки", ТаблицыДляОтправки.Отметки);
	ДанныеТитула.Вставить("Акты",    ТаблицыДляОтправки.Акты);

	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ДанныеТитула", ДанныеТитула);
	ДопПараметры.Вставить("Этап",         "Замена водителей/ТС");
	
	МассивДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаДокумент);
	Saby_ТНОбщегоНазначенияКлиент.ВыполнитьКомандуСбис(ЭтаФорма, "ЗагрузитьВСбис", МассивДокументов, ДопПараметры);
	
КонецПроцедуры

#Область ДатаЗамены

&НаКлиенте
Процедура ДоставитьДатаПриИзменении(Элемент)
	СобратьДатуВремяПоРеквизитам("ДатаВремяЗамены", "ДатаЗамены", "ВремяЗамены");
КонецПроцедуры

&НаКлиенте
Процедура ДоставитьВремяПриИзменении(Элемент)
	СобратьДатуВремяПоРеквизитам("ДатаВремяЗамены", "ДатаЗамены", "ВремяЗамены");
КонецПроцедуры

&НаКлиенте
Процедура СобратьДатуВремяПоРеквизитам(Реквизит, РеквизитДата, РеквизитВремя)
	
	Если Не ЗначениеЗаполнено(ЭтаФорма[РеквизитДата]) Тогда 
		Возврат;
	КонецЕсли;
			
	ДатаСтрока  = Формат(ЭтаФорма[РеквизитДата],  "ДФ=yyyyMMdd");
	ВремяСтрока = Формат(ЭтаФорма[РеквизитВремя], "ДФ=HHmmss");
	
	ДатаИВремя = Дата(ДатаСтрока + ВремяСтрока);
	
	Если ДатаИВремя <> ЭтаФорма[Реквизит] Тогда	 
		ЭтаФорма[Реквизит] = ДатаИВремя;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазложитьДатуПоРеквизитам()
	
	ЭтаФорма.ДатаЗамены  = ДатаВремяЗамены;
	ЭтаФорма.ВремяЗамены = ДатаВремяЗамены;
	
КонецПроцедуры

#КонецОбласти // ДатаЗамены

&НаКлиенте
Процедура ТипСменыПриИзменении(Элемент)
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
	Если Элементы.ГруппаОшибки.Видимость Тогда
		ОбновитДанныеПоОшибкамНаКлиенте(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЭлементовПоВидамЗамены()
	
	Элементы.ГруппаВодители.Видимость = Элементы.ЗаменаВодители.Пометка;
	Элементы.ГруппаТС.Видимость       = Элементы.ЗаменаТС.Пометка;
	Элементы.ГруппаПрицепы.Видимость  = Элементы.ЗаменаПрицепы.Пометка;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьШрифтКнопки(Кнопка) 
	
	Если Кнопка.Пометка Тогда		
		Кнопка.Шрифт = ОбщегоНазначенияВызовСервера.ШрифтСтиля("ВажнаяНадписьШрифт");		
	Иначе 		
		Кнопка.Шрифт = ОбщегоНазначенияВызовСервера.ШрифтСтиля("ОбычныйШрифтТекста");
	КонецЕсли;
	
КонецПроцедуры

#Область Отметки

&НаКлиенте
Процедура ОтметкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекДанные = Элементы.Отметки.ТекущиеДанные; 
		
		ТекДанные.КлючСтроки = НовыйКлючСтроки("Отметки");		
		Если Не Копирование Тогда 
			ТекДанные.ДатаВремя = ОбщегоНазначенияКлиент.ДатаСеанса();
			ТекДанные.Этап = ПредопределенноеЗначение("Перечисление.Saby_ТипТитулаЭтрН.ЗаменаВодителяТС");
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтметкиПриАктивизацииСтроки(Элемент)
	
	ОбработкаАктивизацииСтрокиОтметки();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизацииСтрокиОтметки()
	
	ТекущиеДанные = Элементы.Отметки.ТекущиеДанные;
			
	СтруктураПоиска = Новый Структура;
	Если ТекущиеДанные = Неопределено Тогда
		СтруктураПоиска.Вставить("КлючСтроки_Отметки", 0);			
	Иначе
		СтруктураПоиска.Вставить("КлючСтроки_Отметки", ТекущиеДанные.КлючСтроки);
	КонецЕсли;
	
	Отбор = Новый ФиксированнаяСтруктура(СтруктураПоиска);
	Элементы.Акты.ОтборСтрок = Отбор;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбработкаАктивизацииСтрокиОтметки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Отметки.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		ТекДанные = Отметки.НайтиПоИдентификатору(ИдСтроки);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			УдаляемыеКлючи_Отметки.Добавить(ТекДанные.КлючСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("УдалитьСвязанныеСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВводаСтроки(ИмяТЧ, Отказ)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрана строка в основной таблице " + ИмяТЧ;
		// Сообщение.Поле  = "";
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура АктыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Отметки", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура АктыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)	
	
	Если НоваяСтрока Тогда 
		ДобавитьКлючСвязиСтроки("Акты", "Отметки", Элемент.ТекущаяСтрока, НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Отметки

#Область ПутевыеЛисты

&НаКлиенте
Процедура ВодителиПриАктивизацииСтроки(Элемент)
	
	Водители_УстановитьОтборПоВсемСвязаннымТаблицам();

КонецПроцедуры

&НаКлиенте
Процедура Водители_УстановитьОтборПоВсемСвязаннымТаблицам()
	
    ТекущиеДанные = Элементы.Водители.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСтроки_Водители", ТекущиеДанные.КлючСтроки);
		
		Отбор = Новый ФиксированнаяСтруктура(СтруктураПоиска);		
		Элементы.ПутевыеЛисты.ОтборСтрок = Отбор;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Водители.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		ТекДанные = Водители.НайтиПоИдентификатору(ИдСтроки);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			УдаляемыеКлючи_Водители.Добавить(ТекДанные.КлючСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("УдалитьСвязанныеСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		
		ТекДанные = Элементы.Водители.ТекущиеДанные;		
		ТекДанные.КлючСтроки = НовыйКлючСтроки("Водители");
		
		// Переустановим отбор
		Водители_УстановитьОтборПоВсемСвязаннымТаблицам();
		
		// откроем форму ввода\редактирования записи
		ИзменитьДанныеВодителя();
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Водители", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		ДобавитьКлючСвязиСтроки(Элемент.Имя, "Водители", Элемент.ТекущаяСтрока, НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПутевыеЛисты 

#Область КлючиСтрок

&НаСервере
Процедура МаксимальныеКлючиСтрок()
	
	ИмяКолонки = "КлючСтроки";
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить("Отметки");
    МассивТаблиц.Добавить("Водители");
	
	Для Каждого ИмяТЧ Из МассивТаблиц Цикл 
		
		ИмяКлюча = "МаксимальныйКлючСтроки_" + ИмяТЧ;
		
		Если ЭтаФорма[ИмяТЧ].Количество() = 0 Тогда
			ЭтаФорма[ИмяКлюча] = 0;		
		Иначе 	
			
			СписокКлючей = Новый СписокЗначений;	
			СписокКлючей.ЗагрузитьЗначения(ЭтаФорма[ИмяТЧ].Выгрузить(, ИмяКолонки).ВыгрузитьКолонку(ИмяКолонки)); 			
			СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);   
			
			ЭтаФорма[ИмяКлюча] = СписокКлючей[0].Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция НовыйКлючСтроки(ИмяТЧ)
	
	// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
	// рассчитывается от максимального существующего значения.	
	ИмяКлюча = "МаксимальныйКлючСтроки_" + ИмяТЧ;	
	
	ЭтаФорма[ИмяКлюча] = ЭтаФорма[ИмяКлюча] + 1;						
	Возврат ЭтаФорма[ИмяКлюча];
			
КонецФункции

&НаКлиенте
Процедура ДобавитьКлючСвязиСтроки(ИмяТЧ, ИсходнаяТЧ, НомерСтроки, НоваяСтрока)
	
	Если Не НоваяСтрока Тогда 
		Возврат;
	КонецЕсли;
	
	// Проверка корректности номера строки 
	// При удалении строк расходится номер строки и индекс. Индекс сдвигается, а номер строки только увеличивается 
	Если НомерСтроки >= ЭтаФорма[ИмяТЧ].Количество() Тогда 
		
		// считаем что новая строка это самая последняя в таблице		
		НовыйНомерСтроки = ЭтаФорма[ИмяТЧ].Количество() - 1;		
		ТекущиеДанные    = ЭтаФорма[ИмяТЧ][НовыйНомерСтроки];
		
	Иначе
		ТекущиеДанные = ЭтаФорма[ИмяТЧ][НомерСтроки];
	КонецЕсли;
			
	ТекущиеДанныеИсходнойТЧ = Элементы[ИсходнаяТЧ].ТекущиеДанные;
	
	КлючСтроки = ТекущиеДанныеИсходнойТЧ.КлючСтроки;
	
	ИмяКлюча = "КлючСтроки_" + ИсходнаяТЧ;	
	Если ТекущиеДанные[ИмяКлюча] <> КлючСтроки Тогда 		
		ТекущиеДанные[ИмяКлюча] = КлючСтроки;		
	КонецЕсли;
		
КонецПроцедуры

// ПодключаемыеОбработчики
&НаКлиенте
Процедура УдалитьСвязанныеСтроки()
	
	УдалитьСвязанныеЗаписиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеЗаписиНаСервере()
	
	ВидыУдаляемыхСтрок = Новый Структура; 
		
	// Отметки
	КлючиОтметки = Новый Структура;
	КлючиОтметки.Вставить("Список",     УдаляемыеКлючи_Отметки);
	КлючиОтметки.Вставить("ИмяКолонки", "Отметки"); 

	ВидыУдаляемыхСтрок.Вставить("Акты",   КлючиОтметки);
	
	// Водители  
	КлючиВодители = Новый Структура;
	КлючиВодители.Вставить("Список",     УдаляемыеКлючи_Водители);
	КлючиВодители.Вставить("ИмяКолонки", "Водители"); 
	
	ВидыУдаляемыхСтрок.Вставить("ПутевыеЛисты", КлючиВодители);
	
	Для Каждого ВидУдаляемыхСтрок Из ВидыУдаляемыхСтрок Цикл
		
		ИмяТабличнойЧасти 		= ВидУдаляемыхСтрок.Ключ;
		СписокУдаленныхКлючей 	= ВидУдаляемыхСтрок.Значение.Список;
		КлючСтроки              = "КлючСтроки_" + ВидУдаляемыхСтрок.Значение.ИмяКолонки;
		
		Для Каждого СтрокаКлюча Из СписокУдаленныхКлючей Цикл
								
			КлючПоиска = Новый Структура(КлючСтроки, СтрокаКлюча.Значение); 
			
			МассивСтрокТовары = ЭтаФорма[ИмяТабличнойЧасти].НайтиСтроки(КлючПоиска);
			
			Для Каждого СтрокаТЧ Из МассивСтрокТовары Цикл
				ЭтаФорма[ИмяТабличнойЧасти].Удалить(СтрокаТЧ);
			КонецЦикла; 
			
		КонецЦикла;
	КонецЦикла; 
	
    // сбросим списки в начальное состояние
	УдаляемыеКлючи_Отметки.Очистить();
	УдаляемыеКлючи_Водители.Очистить();
	
КонецПроцедуры

#КонецОбласти // КлючиСтрок

&НаСервере
Функция ТаблицыДляОтправки()
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить(
		"СпецРазрешения",       ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭтотОбъект.СпецРазрешения.Выгрузить()));
	РезультатФункции.Вставить(
		"ТранспортныеСредства", ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭтотОбъект.ТранспортныеСредства.Выгрузить()));
	РезультатФункции.Вставить(
		"Водители",             ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭтотОбъект.Водители.Выгрузить()));
	РезультатФункции.Вставить(
		"ПутевыеЛисты",         ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭтотОбъект.ПутевыеЛисты.Выгрузить()));
	РезультатФункции.Вставить(
		"Отметки",              ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭтотОбъект.Отметки.Выгрузить()));
	РезультатФункции.Вставить(
		"Акты",                 ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭтотОбъект.Акты.Выгрузить()));
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРасшифровкаИзменений(ЗначениеИдентификатораТитула)
	
	Возврат ЗначениеЗаполнено(ЗначениеИдентификатораТитула);
	
КонецФункции

&НаСервере
Процедура ОбновитьВидимостьИДоступностьЭлементов(Знач ВызовПриСоздании = Ложь)
	
	Элементы.ДокументЗамены.Видимость = (ТипСмены <> "Описание");
	Элементы.ПричинаЗамены.Видимость  = (ТипСмены  = "Описание");
	
	Если ВызовПриСоздании Тогда
		Если ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
			Элементы.ГруппаВодители.Видимость = Водители.Количество() > 0;
			Элементы.ГруппаТС.Видимость       = ЕстьСтрокиТС(Перечисления.Saby_ВидыТС.Автомобиль);
			Элементы.ГруппаПрицепы.Видимость  = ЕстьСтрокиТС(Перечисления.Saby_ВидыТС.Прицеп);
		Иначе
			Элементы.ГруппаВодители.Видимость = Ложь;
			Элементы.ГруппаТС.Видимость       = Ложь;
			Элементы.ГруппаПрицепы.Видимость  = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ЗаменаВодители.Пометка = Элементы.ГруппаВодители.Видимость;
	Элементы.ЗаменаТС.Пометка       = Элементы.ГруппаТС.Видимость;
	Элементы.ЗаменаПрицепы.Пометка  = Элементы.ГруппаПрицепы.Видимость;
	
	УстановитьШрифтКнопки(Элементы.ЗаменаВодители);
	УстановитьШрифтКнопки(Элементы.ЗаменаТС);
	УстановитьШрифтКнопки(Элементы.ЗаменаПрицепы);
	
	Если ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		
		Элементы.ВыполнитьЗамену.Доступность = Ложь;
		Элементы.Отмена.Доступность          = Ложь;
		
		Элементы.ГруппаДатаВремя.ТолькоПросмотр       = Истина;
		Элементы.ГруппаЗамена.ТолькоПросмотр          = Истина;
		Элементы.ГруппаТС.ТолькоПросмотр              = Истина;
		Элементы.ГруппаВодителиПрицепы.ТолькоПросмотр = Истина;
		Элементы.ГруппаОтметки.ТолькоПросмотр         = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработкаОшибок

&НаКлиенте
Функция ЕстьОшибкиЗаполнения(Ошибки = Неопределено)
	
	Ошибки = ОшибкиФЛК();
	
	ЕстьОшибки = Ошибки.СписокОшибок.Количество() > 0;
	
	Если ЕстьОшибки Тогда
		
		СписокДокументов = Новый Соответствие;
		СписокДокументов.Вставить(СсылкаНаДокумент, Ошибки);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("СписокДокументов",     СписокДокументов);
		ПараметрыФормы.Вставить("ЭтоДинамическийТитул", Истина);
		
		Оповестить("Saby_СписокДокументов", ПараметрыФормы);
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

&НаСервере
Функция ОшибкиФЛК()
	
	Ошибки = Новый Структура;
	Ошибки.Вставить("СписокОшибок", Новый Массив);
	Ошибки.Вставить("ГруппыОшибок", Новый Соответствие);
	
	ДанныеДокумента = ДанныеДляПроверки();
	
	ПроверяемыеРеквизиты = ПроверяемыеРеквизитыЭтапа(ДанныеДокумента);
	
	СоответствиеРеквизитовОшибок = Документы.Saby_ТранспортнаяНакладная.СоответствиеРеквизитовОшибок();
	
	Документы.Saby_ТранспортнаяНакладная.ПроверитьЗаполненНеЗаполнен(
		ДанныеДокумента, ПроверяемыеРеквизиты, Ошибки, СоответствиеРеквизитовОшибок);
		
	Если Элементы.ЗаменаТС.Пометка Тогда
		Документы.Saby_ТранспортнаяНакладная.ПроверитьЗаполнениеТранспортногоСредства(
			ДанныеДокумента, Ошибки, СоответствиеРеквизитовОшибок);
	КонецЕсли;
	
	Если Элементы.ЗаменаТС.Пометка Или Элементы.ЗаменаПрицепы.Пометка Тогда
		Документы.Saby_ТранспортнаяНакладная.ПроверитьЗаполнениеТипаВладения(
			ДанныеДокумента, Ошибки, СоответствиеРеквизитовОшибок);
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции

&НаСервере
Функция ДанныеДляПроверки()
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Реквизиты", Новый Структура);
	
	РезультатФункции.Реквизиты.Вставить("ДатаВремяЗамены",                  ДатаВремяЗамены);
	РезультатФункции.Реквизиты.Вставить("ДокументЗамены",                   ДокументЗамены);
	РезультатФункции.Реквизиты.Вставить("ПричинаЗамены",                    ПричинаЗамены);
	РезультатФункции.Реквизиты.Вставить("ОснованиеПередачиГрузаТС",         ОснованиеПередачиГрузаТС);
	
	РезультатФункции.Вставить("СпецРазрешения",       ЭтотОбъект.СпецРазрешения.Выгрузить());
	РезультатФункции.Вставить("ТранспортныеСредства", ЭтотОбъект.ТранспортныеСредства.Выгрузить());
	РезультатФункции.Вставить("Водители",             ЭтотОбъект.Водители.Выгрузить());
	РезультатФункции.Вставить("ПутевыеЛисты",         ЭтотОбъект.ПутевыеЛисты.Выгрузить());
	РезультатФункции.Вставить("Отметки",              ЭтотОбъект.Отметки.Выгрузить());
	РезультатФункции.Вставить("Акты",                 ЭтотОбъект.Акты.Выгрузить());
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Функция ПроверяемыеРеквизитыЭтапа(ДанныеДокумента)
	
	РезультатФункции = Новый Массив;
	
	РезультатФункции.Добавить("ДатаВремяЗамены");
	Если ТипСмены  = "Описание" Тогда
		РезультатФункции.Добавить("ПричинаЗамены");
	Иначе
		РезультатФункции.Добавить("ДокументЗамены");
	КонецЕсли;
	
	Если Элементы.ЗаменаТС.Пометка Тогда
		РезультатФункции.Добавить("СпецРазрешения.Номер");
		РезультатФункции.Добавить("СпецРазрешения.Дата");
		РезультатФункции.Добавить("СпецРазрешения.Срок");
	КонецЕсли;
	
	Если Элементы.ЗаменаТС.Пометка Или Элементы.ЗаменаПрицепы.Пометка Тогда
		РезультатФункции.Добавить("ТранспортныеСредства.РегистрационныйНомер");
		РезультатФункции.Добавить("ТранспортныеСредства.Грузоподъемность");
		РезультатФункции.Добавить("ТранспортныеСредства.Вместимость");
	КонецЕсли;
	
	Если Элементы.ЗаменаВодители.Пометка Тогда
		РезультатФункции.Добавить("Водители");
		РезультатФункции.Добавить("Водители.ФИО");
		РезультатФункции.Добавить("ПутевыеЛисты.Документ");
	КонецЕсли;
	
	РезультатФункции.Добавить("Отметки.ДатаВремя");
	РезультатФункции.Добавить("Отметки.Описание");
	
	РезультатФункции.Добавить("Акты.Документ");
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОбновитДанныеПоОшибкамНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	Ошибки = Неопределено;
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("Ошибки") Тогда
		Ошибки = ДополнительныеПараметры.Ошибки;
	Иначе
		Ошибки = ОшибкиФЛК();
	КонецЕсли;
	
	ЭтаФорма.КоличествоОшибок = Ошибки.СписокОшибок.Количество();
	
	ТаблицаОшибок.Очистить();
	Для Каждого СтруктураОшибки Из Ошибки.СписокОшибок Цикл
		СтрокаТаблицыОшибок = ТаблицаОшибок.Добавить();
		СтрокаТаблицыОшибок.Ошибка          = СтруктураОшибки.ТекстДляОднойОшибки;
		СтрокаТаблицыОшибок.РеквизитОбъекта = СтруктураОшибки.РеквизитОбъекта;
		СтрокаТаблицыОшибок.ЭлементФормы    = СтруктураОшибки.ЭлементФормы;
		СтрокаТаблицыОшибок.ИндексСтроки    = СтруктураОшибки.ИндексСтроки;
	КонецЦикла;
	
	ОбновитДанныеПоОшибкамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитДанныеПоОшибкамНаСервере()
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтметокПоТипу(ИдентификаторСтроки) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать() Экспорт
	
	ЭтаФорма.Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДекорацию(Знач ПараметрыВыделенияДекорации)
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьДекорацию(ЭтаФорма, ПараметрыВыделенияДекорации);
	
КонецПроцедуры

#КонецОбласти // ОбработкаОшибок

&НаКлиенте
Процедура ПослеОбновленияДанныхТранспортныхСредств(Результат, ДополнительныеПараметры) Экспорт
	
	ПослеОбновленияДанныхТранспортныхСредствНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбновленияДанныхТранспортныхСредствНаСервере()
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьТранспортныеСредстваНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ЕстьСтрокиТС(Вид)
	
	РезультатФункции = Ложь;
	
	Для Каждого СтрокаТС Из ЭтаФорма.ТранспортныеСредства Цикл
		Если СтрокаТС.Вид = Вид Тогда
			РезультатФункции = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#Область Водители

&НаСервере
Процедура УстановитьДанныеВодителей()
	
	Для Каждого Строка Из Водители Цикл 		
		
		Строка.ВУСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеВУ(Строка); 
		Строка.ФИО       = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеФИО(Строка);
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ВодителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИзменитьДанныеВодителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДанныеВодителя()
	
	ТекущиеДанные  = Элементы.Водители.ТекущиеДанные;
		
	ПараметрыФормы = Saby_ТНОбщегоНазначенияКлиент.СтрокаТаблицыФормыВСтруктуру(
		ЭтаФорма, "Водители", ТекущиеДанные);
		
	// если это просмотр отправленного титула
	ЭтоРасшифровка = ЭтоРасшифровкаИзменений(ИдентификаторТитула);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтоРасшифровка);	
	
	ИмяОповещения = "ПослеВводаДанныхВодителя";	
	Saby_ТНОбщегоНазначенияКлиент.ИзменитьДанныеВодителяОтветственногоЛица(ЭтаФорма, ПараметрыФормы, ИмяОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДанныхВодителя(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда 
		
		ТекущиеДанные = Элементы.Водители.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, РезультатЗакрытия);
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВодителиФИООткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИзменитьДанныеВодителя(); 

КонецПроцедуры

#КонецОбласти

#КонецОбласти // СлужебныеПроцедурыИФункции
