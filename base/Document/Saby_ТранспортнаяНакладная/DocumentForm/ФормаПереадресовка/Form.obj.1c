
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоУведомление = Параметры.ЭтоУведомление;
	
	СсылкаНаДокумент    = Параметры.СсылкаНаДокумент;
	ИдентификаторТитула = Параметры.ИдентификаторТитула;
	
	Если ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		Saby_ТНОбщегоНазначенияСервер.ЗагрузитьДанныеДинамическогоТитула(ЭтотОбъект, СсылкаНаДокумент, ИдентификаторТитула);
		РазложитьДатуПоРеквизитам();
	Иначе
		Если ЭтоУведомление Тогда
			Пользователь = Пользователи.ТекущийПользователь();
			Оформил      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
		Иначе
			ЗагрузитьДанныеУведомленияОПереадресовке();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
	ОтборИнформацииПоКонтактнымДанным("КонтактныеДанные", "Получатель");
	
	ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ("Получатель,");
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметры);
	
	ОбновитьЕмейлОформил();
	
	УстановкаСпискаДоступныхТиповКИ();
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Saby_ОбновитьДокумент" И Источник = ЭтаФорма.УникальныйИдентификатор Тогда
		
		Оповестить("Saby_ОбновитьДокумент", ИдентификаторТитула, ВладелецФормы.УникальныйИдентификатор);
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "Saby_СписокДокументов" Тогда
		
		Если Параметр.ЭтоДинамическийТитул Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Ошибки", Параметр.СписокДокументов.Получить(СсылкаНаДокумент));
			
			ОбновитДанныеПоОшибкамНаКлиенте(Неопределено, ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		Оповестить("Saby_ПрочитанДинамическийТитул", ИдентификаторТитула, ВладелецФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	ОбновитьДанныеЮрЛицНаСервере("Получатель");
	
КонецПроцедуры

&НаКлиенте
Процедура Получатель_ТелефонПриИзменении(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонПриИзменении(ЭтаФорма, Грузополучатель_Телефон, "Получатель", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Получатель_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     "Получатель");
	ПараметрыВыбораТелефона.Вставить("Значение", Грузополучатель_Телефон);
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонНачалоВыбора(ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНажатие(Элемент, СтандартнаяОбработка)

	ПараметрыВыбораАдреса = Новый Структура;
	ПараметрыВыбораАдреса.Вставить("Роль",     "Получатель");
	ПараметрыВыбораАдреса.Вставить("Значение", АдресДоставкиЗначение);
	
	Saby_ТНОбщегоНазначенияКлиент.АдресНачалоВыбора(ЭтаФорма, ПараметрыВыбораАдреса, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекДанные = Элементы.Отметки.ТекущиеДанные;
		Если Не Копирование Тогда 
			ТекДанные.ДатаВремя = ОбщегоНазначенияКлиент.ДатаСеанса();
			ТекДанные.Этап      = ПредопределенноеЗначение("Перечисление.Saby_ТипТитулаЭтрН.Переадресовка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоставитьДатаПриИзменении(Элемент)
	
	СобратьДатуВремяПоРеквизитам("Отправитель_ДоставитьДо", "ДоставитьДата", "ДоставитьВремя");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоставитьВремяПриИзменении(Элемент)
	
	СобратьДатуВремяПоРеквизитам("Отправитель_ДоставитьДо", "ДоставитьДата", "ДоставитьВремя");
	
КонецПроцедуры

&НаКлиенте
Процедура Оформил_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     "");
	ПараметрыВыбораТелефона.Вставить("Значение", Оформил_Телефон);
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонНачалоВыбора(ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтактныеДанные

&НаКлиенте
Процедура КонтактныеДанныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		СтрокаКонтактныхДанных = КонтактныеДанные.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		СтрокаКонтактныхДанных.Роль = ПредопределенноеЗначение("Перечисление.Saby_РолиКонтрагентов.Получатель");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанныеПослеУдаления(Элемент)
	
	ДопПараметрыОбновленияКИ = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ("Получатель");
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметрыОбновленияКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанныеЗначениеПриИзменении(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхПриИзменении(
		ЭтаФорма, Элементы.КонтактныеДанные.ТекущиеДанные, "Получатель"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанныеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхНачалоВыбора(
		ЭтаФорма, Элементы.КонтактныеДанные.ТекущиеДанные, "Получатель", СтандартнаяОбработка
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибок

&НаКлиенте
Процедура ТаблицаОшибокПриАктивизацииСтроки(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ТаблицаОшибокПриАктивизацииСтроки(ЭтаФорма);
	
	ПараметрыВыделенияДекорации = Saby_ТНОбщегоНазначенияКлиент.ПараметрыВыделенияДекорации(ЭтаФорма);
	Если ПараметрыВыделенияДекорации.НужноОбновитьДекорацию Тогда
		ОбновитьДекорацию(ПараметрыВыделенияДекорации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДекорацию(ПараметрыВыделенияДекорации)
	
	Для Каждого ИмяДекорации Из ПараметрыВыделенияДекорации.Выделить Цикл
		Элементы[ИмяДекорации].ЦветРамки = ЦветаСтиля.ЦветАктивности;
		Элементы[ИмяДекорации].Подсказка = "Необходимо заполнить";
	КонецЦикла;
	
	Для Каждого ИмяДекорации Из ПараметрыВыделенияДекорации.ОтменитьВыделение Цикл
		Элементы[ИмяДекорации].ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
		Элементы[ИмяДекорации].Подсказка = "";
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибок

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Уведомить(Команда)

	ПроцедураВыполнитьОбмен = Новый ОписаниеОповещения("ВыполнитьОбмен", ЭтотОбъект);
	
	Saby_ТНОбщегоНазначенияКлиент.ОбновитьКЭШЛокальныхСертификатовИПродолжитьВыполнение(
		ПроцедураВыполнитьОбмен, СсылкаНаДокумент
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОшибки(Команда)
	
	Элементы.ФормаПоказатьСкрытьОшибки.Пометка = Не Элементы.ФормаПоказатьСкрытьОшибки.Пометка;
	
	ОбновитьВнешнийВидЭлементовОшибок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоОшибкам(Команда)
	
	ПроцедураОбновитДанныеПоОшибкамНаКлиенте = Новый ОписаниеОповещения(
		"ОбновитДанныеПоОшибкамНаКлиенте",
		ЭтотОбъект
	);
	
	Saby_ТНОбщегоНазначенияКлиент.ПроверитьМодифицированностьИПродолжитьВыполнение(
		ПроцедураОбновитДанныеПоОшибкамНаКлиенте, Истина
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьОбмен(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЕстьОшибкиЗаполнения() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицыДляОтправки = ТаблицыДляОтправки();
	
	ДанныеТитула = Новый Структура;
	
	Если ЗначениеЗаполнено(АдресДоставкиЗначение) Тогда
		ДанныеТитула.Вставить("Отправитель_АдресДоставки", Отправитель_АдресДоставки);
		ДанныеТитула.Вставить("АдресДоставкиЗначение",     АдресДоставкиЗначение);
	КонецЕсли;
	
	ДанныеТитула.Вставить("Отправитель_ДоставитьДо", Отправитель_ДоставитьДо);
	ДанныеТитула.Вставить("Выгрузка_ДатаВремя",      Отправитель_ДоставитьДо);
	ДанныеТитула.Вставить("Переадресовка_ДатаВремя", ОбщегоНазначенияКлиент.ДатаСеанса());
	
	ДанныеТитула.Вставить("Получатель", Получатель);
	
	Если ЗначениеЗаполнено(Получатель) Тогда
		ДанныеТитула.Вставить("КонтактныеДанные", ТаблицыДляОтправки.КонтактныеДанные);
		ДанныеТитула.Вставить("ДанныеЮрЛиц",      ТаблицыДляОтправки.ДанныеЮрЛиц);
	Иначе
		ДанныеТитула.Вставить("КонтактныеДанные", Неопределено);
		ДанныеТитула.Вставить("ДанныеЮрЛиц",      Неопределено);
	КонецЕсли;
	
	ДанныеТитула.Вставить("Причина",                  Причина);
	ДанныеТитула.Вставить("ПереадресовкаНаОсновании", ПереадресовкаНаОсновании);
	
	ДанныеТитула.Вставить("Отметки", ТаблицыДляОтправки.Отметки);
	
	СтруктураОтправителя = Новый Структура;
	СтруктураОтправителя.Вставить("Отправитель",      Оформил);
	СтруктураОтправителя.Вставить("Телефон",          Оформил_Телефон);
	СтруктураОтправителя.Вставить("ЭлектроннаяПочта", Оформил_ЭлектроннаяПочта);
	
	ДанныеТитула.Вставить("ОтправительУведомления", СтруктураОтправителя);
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ДанныеТитула", ДанныеТитула);
	ДопПараметры.Вставить("Этап",         ?(ЭтоУведомление, "Уведомление о переадресовке", "Переадресовка"));
	
	МассивДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаДокумент);
	Saby_ТНОбщегоНазначенияКлиент.ВыполнитьКомандуСбис(ЭтаФорма, "ЗагрузитьВСбис", МассивДокументов, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьИДоступностьЭлементовНаКлиенте() Экспорт
	ОбновитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИДоступностьЭлементов() 
	
	Элементы.ГруппаОформил.Видимость = ЭтоУведомление;
	Элементы.Причина.Видимость       = ЭтоУведомление Или ЗначениеЗаполнено(Причина);
										
	Элементы.Причина.ТолькоПросмотр  = ЗначениеЗаполнено(Причина);									
	Элементы.Отметки.Видимость       = Не ЭтоУведомление;
		
	Если Не ЭтоУведомление Тогда 
		Элементы.Уведомить.Заголовок = "Переадресовать";
		ЭтаФорма.Заголовок           = "Переадресовка";
	Иначе
		Элементы.ПереадресовкаНаОсновании.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Грузополучатель_Телефон.АвтоОтметкаНезаполненного = ЗначениеЗаполнено(Получатель);
	КонецЕсли;	
	
	Отправитель_АдресДоставкиЗаполнен = ЗначениеЗаполнено(Отправитель_АдресДоставки);
	Элементы.Отправитель_АдресДоставки.Видимость       = Отправитель_АдресДоставкиЗаполнен;
	Элементы.ДекорацияЗаполнитьАдресДоставки.Видимость = Не Отправитель_АдресДоставкиЗаполнен;
	
	Если ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		
		Элементы.Уведомить.Доступность = Ложь;
		Элементы.Отмена.Доступность    = Ложь;
		
		Элементы.Причина.ТолькоПросмотр                   = Истина;
		Элементы.ГруппаОформил.ТолькоПросмотр             = Истина;
		Элементы.ПереадресовкаНаОсновании.ТолькоПросмотр  = Истина;
		Элементы.ГруппаАдресДоставки.ТолькоПросмотр       = Истина;
		Элементы.Отправитель_АдресДоставки.ТолькоПросмотр = Истина;
		Элементы.ГруппаДатаВремя.ТолькоПросмотр           = Истина;
		Элементы.ГруппаЗаменаПолучателя.ТолькоПросмотр    = Истина;
		Элементы.ГруппаОтметки.ТолькоПросмотр             = Истина;
		
		Элементы.ДекорацияЗаполнитьАдресДоставки.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТаблицыДляОтправки()
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("КонтактныеДанные", ОбщегоНазначения.ТаблицаЗначенийВМассив(КонтактныеДанные.Выгрузить()));
	РезультатФункции.Вставить("ДанныеЮрЛиц",      ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеЮрЛиц.Выгрузить()));
	РезультатФункции.Вставить("Отметки",          ОбщегоНазначения.ТаблицаЗначенийВМассив(Отметки.Выгрузить()));
	
	Возврат РезультатФункции;
	
КонецФункции	

&НаСервере
Процедура ЗагрузитьДанныеУведомленияОПереадресовке()
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Saby_ДанныеТитуловСрезПоследних.Период КАК Период,
	|	Saby_ДанныеТитуловСрезПоследних.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	Saby_ДанныеТитуловСрезПоследних.ТипТитула КАК ТипТитула,
	|	Saby_ДанныеТитуловСрезПоследних.Данные КАК Данные,
	|	Saby_ДанныеТитуловСрезПоследних.ИдентификаторТитула КАК ИдентификаторТитула
	|ИЗ
	|	РегистрСведений.Saby_ДанныеТитулов.СрезПоследних(
	|			,
	|			СсылкаНаДокумент = &СсылкаНаДокумент
	|				И ТипТитула = &ТипТитулаПереадресовкаУведомление) КАК Saby_ДанныеТитуловСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Saby_ДанныеТитуловСрезПоследних.Период КАК Период,
	|	Saby_ДанныеТитуловСрезПоследних.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	Saby_ДанныеТитуловСрезПоследних.ТипТитула КАК ТипТитула,
	|	Saby_ДанныеТитуловСрезПоследних.Данные КАК Данные
	|ИЗ
	|	РегистрСведений.Saby_ДанныеТитулов.СрезПоследних(
	|			,
	|			СсылкаНаДокумент = &СсылкаНаДокумент
	|				И ТипТитула = &ТипТитулаПереадресовка) КАК Saby_ДанныеТитуловСрезПоследних";
	
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент",                  СсылкаНаДокумент);
	ЗапросДанных.УстановитьПараметр("ТипТитулаПереадресовкаУведомление", Перечисления.Saby_ТипТитулаЭтрН.ПереадресовкаУведомление);
	ЗапросДанных.УстановитьПараметр("ТипТитулаПереадресовка",            Перечисления.Saby_ТипТитулаЭтрН.Переадресовка);
	
	Результат = ЗапросДанных.ВыполнитьПакет();
	
	ВыборкаПереадресовкаУведомление = Результат[Результат.ВГраница() - 1].Выбрать();
	ВыборкаПереадресовка            = Результат[Результат.ВГраница()].Выбрать();
	
	Если ВыборкаПереадресовкаУведомление.Следующий() Тогда
		
		ДатаПоследнейПереадресовки = Дата(1, 1, 1, 0, 0, 0);
		Если ВыборкаПереадресовка.Следующий() Тогда
			ДатаПоследнейПереадресовки = ВыборкаПереадресовка.Период;
		КонецЕсли;
		
		// Уже была переадресовка по уведомлению
		Если ВыборкаПереадресовкаУведомление.Период < ДатаПоследнейПереадресовки Тогда
			Возврат;
		КонецЕсли;
		
		Saby_ТНОбщегоНазначенияСервер.ЗагрузитьДанныеДинамическогоТитула(
			ЭтотОбъект, СсылкаНаДокумент, ВыборкаПереадресовкаУведомление.ИдентификаторТитула
		);
		
		РазложитьДатуПоРеквизитам();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДатуВремяПоРеквизитам(Реквизит, РеквизитДата, РеквизитВремя)
	
	Если Не ЗначениеЗаполнено(ЭтаФорма[РеквизитДата]) Тогда 
		Возврат;
	КонецЕсли;
			
	ДатаСтрока  = Формат(ЭтаФорма[РеквизитДата],  "ДФ=yyyyMMdd");
	ВремяСтрока = Формат(ЭтаФорма[РеквизитВремя], "ДФ=HHmmss");
	
	ДатаИВремя = Дата(ДатаСтрока + ВремяСтрока);
	
	Если ДатаИВремя <> ЭтаФорма[Реквизит] Тогда	 
		ЭтаФорма[Реквизит] = ДатаИВремя;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазложитьДатуПоРеквизитам()
	
	ДоставитьДата  = Отправитель_ДоставитьДо;	 
	ДоставитьВремя = Отправитель_ДоставитьДо;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРасшифровкаИзменений(ЗначениеИдентификатораТитула)
	
	Возврат ЗначениеЗаполнено(ЗначениеИдентификатораТитула);
	
КонецФункции

&НаСервере
Процедура УстановкаСпискаДоступныхТиповКИ()
	
	// Типы КИ
	СписокЗначенийКИ = Новый СписокЗначений;
	СписокЗначенийКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон, "Телефон");
	СписокЗначенийКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "Адрес электронной почты");
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("КонтактныеДанныеТип");
	
	Для Каждого ЭлементФормы Из МассивЭлементов Цикл
		Для Каждого ЭлементСписка Из СписокЗначенийКИ Цикл  
		   Элементы[ЭлементФормы].СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	   КонецЦикла;		
	КонецЦикла;
	   
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеЮрЛицНаСервере(Роли)
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьДанныеЮрЛиц(ЭтаФорма, Роли);
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ОтборИнформацииПоКонтактнымДанным(ИмяТЧ, Значение)
	
	Роль = Перечисления.Saby_РолиКонтрагентов[Значение];
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Роль", Роль);
	Элементы[ИмяТЧ].ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураПоиска);
					
КонецПроцедуры  

&НаСервере
Процедура ОбновитьЕмейлОформил()
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Перечисления.Saby_РолиКонтрагентов.ПустаяСсылка());
	Отбор.Вставить("Тип",  Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	НайденныеСтроки = КонтактныеДанные.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		Оформил_ЭлектроннаяПочта = НайденныеСтроки[0].Значение;
	КонецЕсли;
			
КонецПроцедуры

#Область ОбработкаОшибок

&НаКлиенте
Функция ЕстьОшибкиЗаполнения(Ошибки = Неопределено)
	
	Ошибки = ОшибкиФЛК();
	
	ЕстьОшибки = Ошибки.СписокОшибок.Количество() > 0;
	
	Если ЕстьОшибки Тогда
		
		СписокДокументов = Новый Соответствие;
		СписокДокументов.Вставить(СсылкаНаДокумент, Ошибки);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("СписокДокументов",     СписокДокументов);
		ПараметрыФормы.Вставить("ЭтоДинамическийТитул", Истина);
		
		Оповестить("Saby_СписокДокументов", ПараметрыФормы);
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

&НаСервере
Функция ОшибкиФЛК()
	
	Ошибки = Новый Структура;
	Ошибки.Вставить("СписокОшибок", Новый Массив);
	Ошибки.Вставить("ГруппыОшибок", Новый Соответствие);
	
	ДанныеДокумента = ДанныеДляПроверки();
	
	ПроверяемыеРеквизиты = ПроверяемыеРеквизитыЭтапа(ДанныеДокумента);
	
	СоответствиеРеквизитовОшибок = Документы.Saby_ТранспортнаяНакладная.СоответствиеРеквизитовОшибок();
	
	Документы.Saby_ТранспортнаяНакладная.ПроверитьЗаполненНеЗаполнен(
		ДанныеДокумента, ПроверяемыеРеквизиты, Ошибки, СоответствиеРеквизитовОшибок
	);
	
	Возврат Ошибки;
	
КонецФункции

&НаСервере
Функция ДанныеДляПроверки()
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Реквизиты", Новый Структура);
	
	РезультатФункции.Реквизиты.Вставить("Причина",                   Причина);
	РезультатФункции.Реквизиты.Вставить("Оформил",                   Оформил);
	РезультатФункции.Реквизиты.Вставить("Оформил_Телефон",           Оформил_Телефон);
	РезультатФункции.Реквизиты.Вставить("ПереадресовкаНаОсновании",  ПереадресовкаНаОсновании);
	РезультатФункции.Реквизиты.Вставить("Отправитель_АдресДоставки", Отправитель_АдресДоставки);
	РезультатФункции.Реквизиты.Вставить("Отправитель_ДоставитьДо",   Отправитель_ДоставитьДо);
	РезультатФункции.Реквизиты.Вставить("Получатель",                Получатель);
	РезультатФункции.Реквизиты.Вставить("Грузополучатель_Телефон",   Грузополучатель_Телефон);
	
	РезультатФункции.Вставить("Отметки", Отметки.Выгрузить());
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Функция ПроверяемыеРеквизитыЭтапа(ДанныеДокумента)
	
	РезультатФункции = Новый Массив;
	
	Если ЭтоУведомление Тогда
		РезультатФункции.Добавить("Оформил");
		РезультатФункции.Добавить("Оформил_Телефон");
		Если ЗначениеЗаполнено(Получатель) Тогда
			РезультатФункции.Добавить("Грузополучатель_Телефон");
		КонецЕсли;
	Иначе
		РезультатФункции.Добавить("ПереадресовкаНаОсновании");
	КонецЕсли;
	
	РезультатФункции.Добавить("Отправитель_АдресДоставки");
	РезультатФункции.Добавить("Отправитель_ДоставитьДо");
	
	РезультатФункции.Добавить("Отметки.ДатаВремя");
	РезультатФункции.Добавить("Отметки.Описание");
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОбновитДанныеПоОшибкамНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	Ошибки = Неопределено;
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("Ошибки") Тогда
		Ошибки = ДополнительныеПараметры.Ошибки;
	Иначе
		Ошибки = ОшибкиФЛК();
	КонецЕсли;
	
	КоличествоОшибок = Ошибки.СписокОшибок.Количество();
	
	ТаблицаОшибок.Очистить();
	Для Каждого СтруктураОшибки Из Ошибки.СписокОшибок Цикл
		СтрокаТаблицыОшибок = ТаблицаОшибок.Добавить();
		СтрокаТаблицыОшибок.Ошибка          = СтруктураОшибки.ТекстДляОднойОшибки;
		СтрокаТаблицыОшибок.РеквизитОбъекта = СтруктураОшибки.РеквизитОбъекта;
		СтрокаТаблицыОшибок.ЭлементФормы    = СтруктураОшибки.ЭлементФормы;
		СтрокаТаблицыОшибок.ИндексСтроки    = СтруктураОшибки.ИндексСтроки;
	КонецЦикла;
	
	ОбновитьВнешнийВидЭлементовОшибок();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВнешнийВидЭлементовОшибок()
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтметокПоТипу(ИдентификаторСтроки) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать() Экспорт
	
	Модифицированность = Ложь;
	
КонецПроцедуры

#КонецОбласти // ОбработкаОшибок

#КонецОбласти // СлужебныеПроцедурыИФункции
