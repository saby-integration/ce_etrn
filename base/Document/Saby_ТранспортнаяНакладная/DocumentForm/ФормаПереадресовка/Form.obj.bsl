
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоУведомление = Параметры.ЭтоУведомление;
	
	СсылкаНаДокумент    = Параметры.СсылкаНаДокумент;
	ИдентификаторТитула = Параметры.ИдентификаторТитула;
	
	Если ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеДинамическогоТитула(ЭтотОбъект, СсылкаНаДокумент, ИдентификаторТитула);
		РазложитьДатуПоРеквизитам();
	Иначе
		Если ЭтоУведомление Тогда
			Пользователь = Пользователи.ТекущийПользователь();
			ЭтаФорма.Оформил = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
		Иначе
			ЗагрузитьДанныеУведомленияОПереадресовке();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
	ОтборИнформацииПоКонтактнымДанным("КонтактныеДанные", "Получатель");
	
	ДопПараметры = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ("Получатель,Оформил");
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметры);
	
	ОбновитьЕмейлОформил();
	
	УстановкаСпискаДоступныхТиповКИ();
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	
	ОбновитьОформившего();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Saby_ОбновитьДокумент" И Источник = ЭтаФорма.УникальныйИдентификатор Тогда
		
		Оповестить("Saby_ОбновитьДокумент", ИдентификаторТитула, ВладелецФормы.УникальныйИдентификатор);
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "Saby_СписокДокументов" Тогда
		
		Если Параметр.ЭтоДинамическийТитул Тогда
			
			ОбновитьДанныеПоОшибкамНаСервере(Параметр.СписокДокументов.Получить(СсылкаНаДокумент));
			
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		Оповестить("Saby_ПрочитанДинамическийТитул", ИдентификаторТитула, ВладелецФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	ОбновитьДанныеЮрЛицНаСервере("Получатель");
	
КонецПроцедуры

&НаКлиенте
Процедура Получатель_ТелефонПриИзменении(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонПриИзменении(ЭтаФорма, Получатель_Телефон, "Получатель", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Получатель_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     "Получатель");
	ПараметрыВыбораТелефона.Вставить("Значение", Получатель_Телефон);
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонНачалоВыбора(ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНажатие(Элемент, СтандартнаяОбработка)

	ПараметрыВыбораАдреса = Новый Структура;
	ПараметрыВыбораАдреса.Вставить("Роль",     "Получатель");
	ПараметрыВыбораАдреса.Вставить("Значение", АдресДоставкиЗначение);
	
	Saby_ТНОбщегоНазначенияКлиент.АдресНачалоВыбора(ЭтаФорма, ПараметрыВыбораАдреса, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекДанные = Элементы.Отметки.ТекущиеДанные;
		Если Не Копирование Тогда 
			ТекДанные.ДатаВремя = ОбщегоНазначенияКлиент.ДатаСеанса();
			ТекДанные.Этап      = ПредопределенноеЗначение("Перечисление.Saby_ТипТитулаЭтрН.Переадресовка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоставитьДатаПриИзменении(Элемент)
	
	СобратьДатуВремяПоРеквизитам("Отправитель_ДоставитьДо", "ДоставитьДата", "ДоставитьВремя");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоставитьВремяПриИзменении(Элемент)
	
	СобратьДатуВремяПоРеквизитам("Отправитель_ДоставитьДо", "ДоставитьДата", "ДоставитьВремя");
	
КонецПроцедуры

#Область Оформил

&НаКлиенте
Процедура ИзменитьДанныеОформил()
			
	ПараметрыФормы = Saby_ТНОбщегоНазначенияСервер.ДесериализоватьЗначение(ЭтаФорма.ОформилСтруктура);
	
	ПараметрыФормы.Вставить("ТолькоПросмотр", Элементы.ГруппаОформил.ТолькоПросмотр);
	ПараметрыФормы.Вставить("Наименование",   "Оформил");
	ПараметрыФормы.Вставить("РольСтрокой",    "ОформительДокумента");
		
	Saby_ТНОбщегоНазначенияКлиент.ИзменитьДанныеВодителяОтветственногоЛица(
		ЭтаФорма, 
		ПараметрыФормы, 
		"ПослеВводаДанныхОформившего"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДанныхОформившего(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда 
		
		Структура = Новый Структура;
		Структура.Вставить("Фамилия",  РезультатЗакрытия.Фамилия);
		Структура.Вставить("Имя",      РезультатЗакрытия.Имя);
		Структура.Вставить("Отчество", РезультатЗакрытия.Отчество);		
		Структура.Вставить("Телефоны", РезультатЗакрытия.Телефоны);
		Структура.Вставить("Емейлы",   РезультатЗакрытия.Емейлы);
				
		ОбновитьОформившего(Структура);
		
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ОформилНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ИзменитьДанныеОформил();
	
КонецПроцедуры

&НаКлиенте
Процедура Оформил_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     "Оформил");
	ПараметрыВыбораТелефона.Вставить("Значение", Оформил_Телефон);
	
	Saby_ТНОбщегоНазначенияКлиент.ТелефонНачалоВыбора(ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОформившего(Структура = Неопределено)
	
	Если Структура <> Неопределено Тогда
		
		ЭтаФорма.ОформилСтруктура = Saby_ТНОбщегоНазначенияСервер.СериализоватьЗначение(Структура);
		
		// Телефон 
		Телефоны = Saby_ТНОбщегоНазначенияСервер.ДесериализоватьЗначение(Структура.Телефоны);
		Если Телефоны.Количество() Тогда
			ЭтаФорма.Оформил_Телефон = Телефоны[0];
		Иначе 	
		    ЭтаФорма.Оформил_Телефон = "";
		КонецЕсли;
		
		// Емейл
		Емейлы = Saby_ТНОбщегоНазначенияСервер.ДесериализоватьЗначение(Структура.Емейлы);
		Если Емейлы.Количество() Тогда
			ЭтаФорма.Оформил_ЭлектроннаяПочта = Емейлы[0];
		Иначе 	
		    ЭтаФорма.Оформил_ЭлектроннаяПочта = "";
		КонецЕсли;
		
	Иначе
		Структура = ЭтаФорма.ОформилСтруктура;
	КонецЕсли;
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьОтветственногоНаФорме(ЭтаФорма, "Оформил", Структура);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтактныеДанные

&НаКлиенте
Процедура КонтактныеДанныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		СтрокаКонтактныхДанных = КонтактныеДанные.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		СтрокаКонтактныхДанных.Роль = ПредопределенноеЗначение("Перечисление.Saby_РолиКонтрагентов.Получатель");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанныеПослеУдаления(Элемент)
	
	ДопПараметрыОбновленияКИ = Saby_ТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ("Получатель");
	Saby_ТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметрыОбновленияКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанныеЗначениеПриИзменении(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхПриИзменении(
		ЭтаФорма, Элементы.КонтактныеДанные.ТекущиеДанные, "Получатель");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеДанныеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Saby_ТНОбщегоНазначенияКлиент.ЗначениеКонтактныхДанныхНачалоВыбора(
		ЭтаФорма, Элементы.КонтактныеДанные.ТекущиеДанные, "Получатель", СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибок

&НаКлиенте
Процедура ТаблицаОшибокПриАктивизацииСтроки(Элемент)
	
	Saby_ТНОбщегоНазначенияКлиент.ТаблицаОшибокПриАктивизацииСтроки(ЭтаФорма);
	
	ПараметрыВыделенияДекорации = Saby_ТНОбщегоНазначенияКлиент.ПараметрыВыделенияДекорации(ЭтаФорма);
	Если ПараметрыВыделенияДекорации.НужноОбновитьДекорацию Тогда
		ОбновитьДекорацию(ПараметрыВыделенияДекорации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибок

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Уведомить(Команда)

	ПроцедураВыполнитьОбмен = Новый ОписаниеОповещения("ВыполнитьОбмен", ЭтотОбъект);
	
	Saby_ТНОбщегоНазначенияКлиент.ОбновитьКЭШЛокальныхСертификатовИПродолжитьВыполнение(
		ПроцедураВыполнитьОбмен, СсылкаНаДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОшибки(Команда)
	
	Элементы.ФормаПоказатьСкрытьОшибки.Пометка = Не Элементы.ФормаПоказатьСкрытьОшибки.Пометка;
	
	ОбновитьВнешнийВидЭлементовОшибок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоОшибкам(Команда)
	
	ПроцедураОбновитьДанныеПоОшибкамНаКлиенте = Новый ОписаниеОповещения(
		"ОбновитьДанныеПоОшибкамНаКлиенте",
		ЭтотОбъект);
	
	Saby_ТНОбщегоНазначенияКлиент.ПроверитьМодифицированностьИПродолжитьВыполнение(
		ПроцедураОбновитьДанныеПоОшибкамНаКлиенте, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ДанныеТитула()
	
	ТаблицыДляОтправки = ТаблицыДляОтправки();
	
	ДанныеТитула = Новый Структура;
	ДанныеТитула.Вставить("Реквизиты", Новый Структура);
	
	ДанныеТитула.Реквизиты.Вставить("Отправитель_АдресДоставки", Отправитель_АдресДоставки);
	ДанныеТитула.Реквизиты.Вставить("АдресДоставкиЗначение",     АдресДоставкиЗначение);
	
	ДанныеТитула.Реквизиты.Вставить("Отправитель_ДоставитьДо", Отправитель_ДоставитьДо);
	ДанныеТитула.Реквизиты.Вставить("Выгрузка_ДатаВремя",      Отправитель_ДоставитьДо);
	ДанныеТитула.Реквизиты.Вставить("Переадресовка_ДатаВремя", ТекущаяДатаСеанса());
	
	ДанныеТитула.Реквизиты.Вставить("Получатель", Получатель);
	
	Если ЗначениеЗаполнено(Получатель) Тогда
		ДанныеТитула.Вставить("КонтактныеДанные", ТаблицыДляОтправки.КонтактныеДанные);
		ДанныеТитула.Вставить("ДанныеЮрЛиц",      ТаблицыДляОтправки.ДанныеЮрЛиц);
	Иначе
		ДанныеТитула.Вставить("КонтактныеДанные", Неопределено);
		ДанныеТитула.Вставить("ДанныеЮрЛиц",      Неопределено);
	КонецЕсли;
	
	ДанныеТитула.Реквизиты.Вставить("Причина",                  Причина);
	ДанныеТитула.Реквизиты.Вставить("ПереадресовкаНаОсновании", ПереадресовкаНаОсновании);
	
	ДанныеТитула.Вставить("Отметки", ТаблицыДляОтправки.Отметки);
	ДанныеТитула.Вставить("Акты",    Новый Массив);
	ДанныеТитула.Вставить("Штрафы",  Новый Массив);
	
	ДанныеТитула.Реквизиты.Вставить("ОформилСтруктура", ЭтотОбъект.ОформилСтруктура);
	
	Возврат ДанныеТитула;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОбмен(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеДляВыгрузки = Новый Массив;
	ПараметрыВыгрузки = Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки(СсылкаНаДокумент);
	ПараметрыВыгрузки.Этап = ?(ЭтоУведомление, "Уведомление о переадресовке", "Переадресовка");
	ПараметрыВыгрузки.ДанныеДокумента = ДанныеТитула();
	ДанныеДляВыгрузки.Добавить(ПараметрыВыгрузки);
	
	ДополнительныеПараметры = Новый Структура;
	
	Saby_ТНОбщегоНазначенияКлиент.ВыполнитьКомандуСбис(
		ЭтаФорма, "ЗагрузитьВСбисДинамическийТитул", ДанныеДляВыгрузки, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьИДоступностьЭлементовНаКлиенте() Экспорт
	ОбновитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИДоступностьЭлементов() 
	
	Элементы.ГруппаОформил.Видимость = ЭтоУведомление;
	Элементы.Причина.Видимость       = ЭтоУведомление Или ЗначениеЗаполнено(Причина);
										
	Элементы.Причина.ТолькоПросмотр  = ЗначениеЗаполнено(Причина);									
	Элементы.Отметки.Видимость       = Не ЭтоУведомление;
		
	Если Не ЭтоУведомление Тогда 
		Элементы.Уведомить.Заголовок = "Переадресовать";
		ЭтаФорма.Заголовок           = "Переадресовка";
	Иначе
		Элементы.ПереадресовкаНаОсновании.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Получатель_Телефон.АвтоОтметкаНезаполненного = ЗначениеЗаполнено(Получатель);
	КонецЕсли;	
	
	Отправитель_АдресДоставкиЗаполнен = ЗначениеЗаполнено(Отправитель_АдресДоставки);
	Элементы.Отправитель_АдресДоставки.Видимость       = Отправитель_АдресДоставкиЗаполнен;
	Элементы.ДекорацияЗаполнитьАдресДоставки.Видимость = Не Отправитель_АдресДоставкиЗаполнен;
	
	Если ЭтоРасшифровкаИзменений(ИдентификаторТитула) Тогда
		
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("Уведомить");
		МассивЭлементов.Добавить("Отмена");
		МассивЭлементов.Добавить("Отправитель_АдресДоставки");
		МассивЭлементов.Добавить("ДекорацияЗаполнитьАдресДоставки");
		
		Saby_ТНОбщегоНазначенияКлиентСервер.ИзменитьВидимостьДоступностьЭлементовФормы(
			ЭтаФорма,
			"Доступность",
			Ложь,
			МассивЭлементов);
			
		МассивЭлементов.Очистить();
						
		МассивЭлементов.Добавить("Причина");
		МассивЭлементов.Добавить("ГруппаОформил");
		МассивЭлементов.Добавить("ПереадресовкаНаОсновании");		
		МассивЭлементов.Добавить("Отправитель_АдресДоставки");
		МассивЭлементов.Добавить("ГруппаДатаВремя");
		МассивЭлементов.Добавить("ГруппаЗаменаПолучателя");
		МассивЭлементов.Добавить("ГруппаОтметки");
		
		Saby_ТНОбщегоНазначенияКлиентСервер.ИзменитьВидимостьДоступностьЭлементовФормы(
			ЭтаФорма,
			"ТолькоПросмотр",
			Истина,
			МассивЭлементов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТаблицыДляОтправки()
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("КонтактныеДанные", ОбщегоНазначения.ТаблицаЗначенийВМассив(КонтактныеДанные.Выгрузить()));
	РезультатФункции.Вставить("ДанныеЮрЛиц",      ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеЮрЛиц.Выгрузить()));
	РезультатФункции.Вставить("Отметки",          ОбщегоНазначения.ТаблицаЗначенийВМассив(Отметки.Выгрузить()));
	
	Структура = Saby_ТНОбщегоНазначенияСервер.ДесериализоватьЗначение(ЭтаФорма.ОформилСтруктура);
	
	Структура.Вставить("Телефоны", Новый Массив);
	Если ЗначениеЗаполнено(ЭтотОбъект.Оформил_Телефон) Тогда
		Структура.Телефоны.Добавить(ЭтотОбъект.Оформил_Телефон);
	КонецЕсли;
	
	Структура.Вставить("ЭлектроннаяПочта", ЭтотОбъект.Оформил_ЭлектроннаяПочта);
	
	ЭтаФорма.ОформилСтруктура = Saby_ТНОбщегоНазначенияСервер.СериализоватьЗначение(Структура);
	
	Возврат РезультатФункции;
	
КонецФункции	

&НаСервере
Процедура ЗагрузитьДанныеУведомленияОПереадресовке()
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Saby_ДанныеТитуловСрезПоследних.Период КАК Период,
	|	Saby_ДанныеТитуловСрезПоследних.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	Saby_ДанныеТитуловСрезПоследних.ТипТитула КАК ТипТитула,
	|	Saby_ДанныеТитуловСрезПоследних.Данные КАК Данные,
	|	Saby_ДанныеТитуловСрезПоследних.ИдентификаторТитула КАК ИдентификаторТитула
	|ИЗ
	|	РегистрСведений.Saby_ДанныеТитулов.СрезПоследних(
	|			,
	|			СсылкаНаДокумент = &СсылкаНаДокумент
	|				И ТипТитула = &ТипТитулаПереадресовкаУведомление) КАК Saby_ДанныеТитуловСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Saby_ДанныеТитуловСрезПоследних.Период КАК Период,
	|	Saby_ДанныеТитуловСрезПоследних.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	Saby_ДанныеТитуловСрезПоследних.ТипТитула КАК ТипТитула,
	|	Saby_ДанныеТитуловСрезПоследних.Данные КАК Данные
	|ИЗ
	|	РегистрСведений.Saby_ДанныеТитулов.СрезПоследних(
	|			,
	|			СсылкаНаДокумент = &СсылкаНаДокумент
	|				И ТипТитула = &ТипТитулаПереадресовка) КАК Saby_ДанныеТитуловСрезПоследних";
	
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент",       СсылкаНаДокумент);
	ЗапросДанных.УстановитьПараметр("ТипТитулаПереадресовка", Перечисления.Saby_ТипТитулаЭтрН.Переадресовка);
	ЗапросДанных.УстановитьПараметр(
		"ТипТитулаПереадресовкаУведомление", Перечисления.Saby_ТипТитулаЭтрН.ПереадресовкаУведомление);
	
	Результат = ЗапросДанных.ВыполнитьПакет();
	
	ВыборкаПереадресовкаУведомление = Результат[Результат.ВГраница() - 1].Выбрать();
	ВыборкаПереадресовка            = Результат[Результат.ВГраница()].Выбрать();
	
	Если ВыборкаПереадресовкаУведомление.Следующий() Тогда
		
		ДатаПоследнейПереадресовки = Дата(1, 1, 1, 0, 0, 0);
		Если ВыборкаПереадресовка.Следующий() Тогда
			ДатаПоследнейПереадресовки = ВыборкаПереадресовка.Период;
		КонецЕсли;
		
		// Уже была переадресовка по уведомлению
		Если ВыборкаПереадресовкаУведомление.Период < ДатаПоследнейПереадресовки Тогда
			Возврат;
		КонецЕсли;
		
		Saby_ТНЗагрузкаСервер.ЗагрузитьДанныеДинамическогоТитула(
			ЭтотОбъект, СсылкаНаДокумент, ВыборкаПереадресовкаУведомление.ИдентификаторТитула);
		
		РазложитьДатуПоРеквизитам();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДатуВремяПоРеквизитам(Реквизит, РеквизитДата, РеквизитВремя)
	
	Если Не ЗначениеЗаполнено(ЭтаФорма[РеквизитДата]) Тогда 
		Возврат;
	КонецЕсли;
			
	ДатаСтрока  = Формат(ЭтаФорма[РеквизитДата],  "ДФ=yyyyMMdd");
	ВремяСтрока = Формат(ЭтаФорма[РеквизитВремя], "ДФ=HHmmss");
	
	ДатаИВремя = Дата(ДатаСтрока + ВремяСтрока);
	
	Если ДатаИВремя <> ЭтаФорма[Реквизит] Тогда	 
		ЭтаФорма[Реквизит] = ДатаИВремя;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазложитьДатуПоРеквизитам()
	
	ЭтаФорма.ДоставитьДата  = Отправитель_ДоставитьДо;	 
	ЭтаФорма.ДоставитьВремя = Отправитель_ДоставитьДо;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРасшифровкаИзменений(ЗначениеИдентификатораТитула)
	
	Возврат ЗначениеЗаполнено(ЗначениеИдентификатораТитула);
	
КонецФункции

&НаСервере
Процедура УстановкаСпискаДоступныхТиповКИ()
	
	// Типы КИ
	СписокЗначенийКИ = Новый СписокЗначений;
	СписокЗначенийКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон, "Телефон");
	СписокЗначенийКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "Адрес электронной почты");
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("КонтактныеДанныеТип");
	
	Для Каждого ЭлементФормы Из МассивЭлементов Цикл
		Для Каждого ЭлементСписка Из СписокЗначенийКИ Цикл  
		   Элементы[ЭлементФормы].СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	   КонецЦикла;		
	КонецЦикла;
	   
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеЮрЛицНаСервере(Знач Роли)
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьДанныеЮрЛиц(ЭтаФорма, Роли);
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ОтборИнформацииПоКонтактнымДанным(ИмяТЧ, Значение)
	
	Роль = Перечисления.Saby_РолиКонтрагентов[Значение];
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Роль", Роль);
	Элементы[ИмяТЧ].ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураПоиска);
					
КонецПроцедуры  

&НаСервере
Процедура ОбновитьЕмейлОформил()
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", Перечисления.Saby_РолиКонтрагентов.ПустаяСсылка());
	Отбор.Вставить("Тип",  Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	НайденныеСтроки = КонтактныеДанные.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		ЭтаФорма.Оформил_ЭлектроннаяПочта = НайденныеСтроки[0].Значение;
	КонецЕсли;
			
КонецПроцедуры

#Область ОбработкаОшибок

&НаКлиенте
Процедура ОбновитьДанныеПоОшибкамНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьДанныеПоОшибкамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоОшибкамНаСервере(Знач Ошибки = Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Этап", ?(ЭтоУведомление, "Уведомление о переадресовке", "Переадресовка"));
	ДополнительныеПараметры.Вставить("Ссылка",                  СсылкаНаДокумент);
	ДополнительныеПараметры.Вставить("ПроверятьПоляСОХ",        Ложь);
	ДополнительныеПараметры.Вставить("ПроверятьПоляОтгрузчика", Ложь);
	
	Если Ошибки = Неопределено Тогда
		ДополнительныеПараметры.Вставить("ДанныеДокумента", ДанныеТитула());
	КонецЕсли;
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьДанныеПоОшибкам(
		ЭтаФорма,
		ДополнительныеПараметры,
		Ошибки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВнешнийВидЭлементовОшибок()
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтметокПоТипу(ИдентификаторСтроки) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать() Экспорт
	
	ЭтаФорма.Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДекорацию(Знач ПараметрыВыделенияДекорации)
	
	Saby_ТНОбщегоНазначенияСервер.ОбновитьДекорацию(ЭтаФорма, ПараметрыВыделенияДекорации);
	
КонецПроцедуры

#КонецОбласти // ОбработкаОшибок

#КонецОбласти // СлужебныеПроцедурыИФункции
