
#Область ПрограммныйИнтерфейс

// Сохраняет данные титула в дополнительные свойства объекта, чтобы в дальнейшем записать их в регистр.
// Используется в том случае, когда документа еще нет в базе на момент загрузки из СБИС.
//
// Параметры:
//  СтруктураТитулаДляРегистра - Структура - Структура данных титула для записи в регистр.
//
Процедура ДобавитьСтруктуруТитулаДляЗаписи(СтруктураТитулаДляРегистра) Экспорт
	
	Если Не ДополнительныеСвойства.Свойство("ТитулыДляПривязки") Тогда
		ДополнительныеСвойства.Вставить("ТитулыДляПривязки", Новый Массив);
	КонецЕсли;
	
	ДополнительныеСвойства.ТитулыДляПривязки.Добавить(СтруктураТитулаДляРегистра);
	
КонецПроцедуры

// Заполняет данные по титулу предшествующему текущему.
//
// Параметры:
//  Вложение - Соответствие - загруженные данные из СБИС.
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - титул, для которо необходимо заполнить прошлый.
//
Процедура ЗаполнитьПрошлыйТитулДляВложения(Вложение, Титул) Экспорт
	
	Если Вложение["ПрошлыйТитул"] <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Период        = Документы.Saby_ТранспортнаяНакладная.ДатаВложения(Вложение, Титул);
	Идентификатор = Документы.Saby_ТранспортнаяНакладная.ИдентификаторВложения(Вложение, Титул);
	
	МаксимальныйПериод = Дата(1, 1, 1);
	ДанныеТитула = Неопределено;
	
	Для Каждого СтруктураТитулаДляРегистра Из ДополнительныеСвойства.ТитулыДляПривязки Цикл
		
		Если СтруктураТитулаДляРегистра.Период >= Период
			Или СтруктураТитулаДляРегистра.ИдентификаторТитула = Идентификатор Тогда
			Продолжить;
		КонецЕсли;
		
		Если МаксимальныйПериод < СтруктураТитулаДляРегистра.Период Тогда
			МаксимальныйПериод = СтруктураТитулаДляРегистра.Период;
			ДанныеТитула = СтруктураТитулаДляРегистра;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеТитула <> Неопределено Тогда
		Вложение.Вставить("ПрошлыйТитул", Перечисления.Saby_ТипТитулаЭтрН.ТитулОтказа(ДанныеТитула.ТипТитула));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	РеквизитыДляОчистки = Новый Массив;
	
	// Служебные
	РеквизитыДляОчистки.Добавить("ДатаИзменения");
	РеквизитыДляОчистки.Добавить("НомерСбис");
	РеквизитыДляОчистки.Добавить("Комментарий");
	РеквизитыДляОчистки.Добавить("ДоступныеДействия");
			
    // Общие таблицы
	РеквизитыДляОчистки.Добавить("Отметки");
	РеквизитыДляОчистки.Добавить("Штрафы");
	РеквизитыДляОчистки.Добавить("Акты");
	
	// Страница "Погрузка"	
	РеквизитыДляОчистки.Добавить("Перевозчик_ПриемкаДатаВремя");
	РеквизитыДляОчистки.Добавить("Перевозчик_ПриемкаДатаВремяПрибыл");
	РеквизитыДляОчистки.Добавить("Перевозчик_ПриемкаДатаВремяУбыл");
	РеквизитыДляОчистки.Добавить("Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза");
	РеквизитыДляОчистки.Добавить("Перевозчик_ЗамечанияПоПогрузочнымРаботам");
	РеквизитыДляОчистки.Добавить("Перевозчик_ПогрузкаЗамечанияПоМассе");
	РеквизитыДляОчистки.Добавить("Перевозчик_ПогрузкаЗамечанияПоКоличеству");
			
	Если Не ЭтотОбъект.Отправитель_Экспедитор Тогда
			
		РеквизитыДляОчистки.Добавить("Заказчик");
		РеквизитыДляОчистки.Добавить("Заказчик_Договор");

	КонецЕсли;
	
	// Страница "Выгрузка"
	
	// Получатель 
	РеквизитыДляОчистки.Добавить("Выгрузка_ДатаВремя");
	РеквизитыДляОчистки.Добавить("Выгрузка_ДатаВремяПрибыл");
	РеквизитыДляОчистки.Добавить("Выгрузка_ДатаВремяУбыл");	
	РеквизитыДляОчистки.Добавить("Выгрузка_МассаМетодРасчета");
	РеквизитыДляОчистки.Добавить("Выгрузка_КоличествоМест");
	РеквизитыДляОчистки.Добавить("Выгрузка_Объем");
	РеквизитыДляОчистки.Добавить("Выгрузка_МассаБрутто");
	РеквизитыДляОчистки.Добавить("Выгрузка_МассаНетто");
	РеквизитыДляОчистки.Добавить("Выгрузка_Состояние");
	
	// Перевозчик 	
	РеквизитыДляОчистки.Добавить("Перевозчик_ВыгрузкаДатаВремя");
	РеквизитыДляОчистки.Добавить("Перевозчик_ВыгрузкаДатаВремяПрибыл");
	РеквизитыДляОчистки.Добавить("Перевозчик_ВыгрузкаДатаВремяУбыл");	
	РеквизитыДляОчистки.Добавить("Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза");
	РеквизитыДляОчистки.Добавить("Перевозчик_ЗамечанияПоРазгрузочнымРаботам");
	
	Saby_ТНОбщегоНазначенияСервер.ОчисткаРеквизитовОбъекта(ЭтотОбъект, РеквизитыДляОчистки);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	ЭтотОбъект.Отправитель_ТранспортноеСредствоСтрокой = 
		Saby_ТНОбщегоНазначенияСервер.ТранспортныеСредстваСтрокой(ЭтотОбъект);
		
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ТитулыДляПривязки") Тогда
		РегистрыСведений.Saby_ДанныеТитулов.ПривязатьТитулыКДокументу(
			Ссылка,
			ДополнительныеСвойства.ТитулыДляПривязки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Отключаем проверяемые реквизиты,
	// так как все проверки делаются централизованно в функции Saby_ТранспортнаяНакладная.ОшибкиФЛК
	ПроверяемыеРеквизиты.Очистить();
	
	ПроверяемыеРеквизиты.Добавить("Дата");
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = "00";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПрефиксОрганизацииДокумента()
	
	РезультатФункции = "00";
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.Префикс КАК Префикс,
	|	ВложенныйЗапрос.Порядок КАК Порядок
	|ИЗ
	|	(ВЫБРАТЬ
	|		Организации.Префикс КАК Префикс,
	|		1 КАК Порядок
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	ГДЕ
	|		Организации.Ссылка = &Ссылка1
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Организации.Префикс,
	|		2
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	ГДЕ
	|		Организации.Ссылка = &Ссылка2
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Организации.Префикс,
	|		3
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	ГДЕ
	|		Организации.Ссылка = &Ссылка3) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";

	ЗапросДанных.УстановитьПараметр("Ссылка1", Отправитель);
	ЗапросДанных.УстановитьПараметр("Ссылка2", Получатель);
	ЗапросДанных.УстановитьПараметр("Ссылка3", Перевозчик);

	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		РезультатФункции = ВыборкаДанных.Префикс;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти
