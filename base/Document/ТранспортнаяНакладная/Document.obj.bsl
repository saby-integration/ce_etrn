
#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	РеквизитыДляОчистки = Новый Массив;
	
	// Служебные
	РеквизитыДляОчистки.Добавить("ДатаИзменения");
	РеквизитыДляОчистки.Добавить("НомерСбис");
	РеквизитыДляОчистки.Добавить("Комментарий");
	РеквизитыДляОчистки.Добавить("ДоступныеДействия");
	РеквизитыДляОчистки.Добавить("ТекущиеЭтапы");
	РеквизитыДляОчистки.Добавить("КомментарийУведомление");
	РеквизитыДляОчистки.Добавить("ДокументОснование_Идентификатор");
	РеквизитыДляОчистки.Добавить("ДокументОснование_ОбъектМетаданных");
	
    // Общие таблицы
	РеквизитыДляОчистки.Добавить("Отметки");
	РеквизитыДляОчистки.Добавить("Штрафы");
	РеквизитыДляОчистки.Добавить("Акты");
	
	// Страница "Погрузка"	
	РеквизитыДляОчистки.Добавить("Перевозчик_ПриемкаДатаВремя");
	РеквизитыДляОчистки.Добавить("Перевозчик_ПриемкаДатаВремяПрибыл");
	РеквизитыДляОчистки.Добавить("Перевозчик_ПриемкаДатаВремяУбыл");
	РеквизитыДляОчистки.Добавить("Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза");
	РеквизитыДляОчистки.Добавить("Перевозчик_ЗамечанияПоПогрузочнымРаботам");
	РеквизитыДляОчистки.Добавить("Перевозчик_ПогрузкаЗамечанияПоМассе");
	РеквизитыДляОчистки.Добавить("Перевозчик_ПогрузкаЗамечанияПоКоличеству");
			
	Если Не ЭтотОбъект.Отправитель_Экспедитор Тогда
			
		РеквизитыДляОчистки.Добавить("Заказчик");
		РеквизитыДляОчистки.Добавить("Заказчик_Договор");

	КонецЕсли;
	
	// Страница "Выгрузка"
	
	// Получатель 
	РеквизитыДляОчистки.Добавить("Выгрузка_ДатаВремя");
	РеквизитыДляОчистки.Добавить("Выгрузка_ДатаВремяПрибыл");
	РеквизитыДляОчистки.Добавить("Выгрузка_ДатаВремяУбыл");	
	РеквизитыДляОчистки.Добавить("Выгрузка_МассаМетодРасчета");
	РеквизитыДляОчистки.Добавить("Выгрузка_КоличествоМест");
	РеквизитыДляОчистки.Добавить("Выгрузка_Объем");
	РеквизитыДляОчистки.Добавить("Выгрузка_МассаБрутто");
	РеквизитыДляОчистки.Добавить("Выгрузка_МассаНетто");
	РеквизитыДляОчистки.Добавить("Выгрузка_Состояние");
	
	// Перевозчик 	
	РеквизитыДляОчистки.Добавить("Перевозчик_ВыгрузкаДатаВремя");
	РеквизитыДляОчистки.Добавить("Перевозчик_ВыгрузкаДатаВремяПрибыл");
	РеквизитыДляОчистки.Добавить("Перевозчик_ВыгрузкаДатаВремяУбыл");	
	РеквизитыДляОчистки.Добавить("Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза");
	РеквизитыДляОчистки.Добавить("Перевозчик_ЗамечанияПоРазгрузочнымРаботам");
	
	Saby_ТНОбщегоНазначенияСервер.ОчисткаРеквизитовОбъекта(ЭтотОбъект, РеквизитыДляОчистки);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	ЭтотОбъект.Отправитель_ТранспортноеСредствоСтрокой = 
		Saby_ТНОбщегоНазначенияСервер.ТранспортныеСредстваСтрокой(ЭтотОбъект);
		
	ЭтотОбъект.ОтправительСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(
		ЭтотОбъект.ДанныеЮрЛиц, "Отправитель").НаименованиеОрганизации;
		
	ЭтотОбъект.СоставительСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(
		ЭтотОбъект.ДанныеЮрЛиц, "Оформитель").НаименованиеОрганизации;
		
	ЭтотОбъект.ПолучательСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(
		ЭтотОбъект.ДанныеЮрЛиц, "Получатель").НаименованиеОрганизации;
		
	ЭтотОбъект.ПеревозчикСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(
		ЭтотОбъект.ДанныеЮрЛиц, "Перевозчик").НаименованиеОрганизации;
		
	ЭтотОбъект.ЗаказчикСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(
		ЭтотОбъект.ДанныеЮрЛиц, "Заказчик").НаименованиеОрганизации;
		
	ЭтотОбъект.ВладелецОбъектаСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(
		ЭтотОбъект.ДанныеЮрЛиц, "ВладелецОбъекта").НаименованиеОрганизации;
		
	ЭтотОбъект.ОтгрузчикСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(
		ЭтотОбъект.ДанныеЮрЛиц, "Отгрузчик").НаименованиеОрганизации;
		
	ОтборОтветственного = Новый Структура;
	ОтборОтветственного.Вставить("Роль", Перечисления.Saby_РолиОтветственных.Ответственный);
	НайденныеСтроки = ОтветственныеЛица.НайтиСтроки(ОтборОтветственного);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЭтотОбъект.Отгрузка_ОтветственныйСтрокой = Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеФИО(НайденныеСтроки[0]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ТитулыДляПривязки") Тогда
		РегистрыСведений.Saby_ДанныеТитулов.ПривязатьТитулыКДокументу(
			Ссылка,
			ДополнительныеСвойства.ТитулыДляПривязки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Отключаем проверяемые реквизиты,
	// так как все проверки делаются централизованно в функции Saby_ТранспортнаяНакладная.ОшибкиФЛК
	ПроверяемыеРеквизиты.Очистить();
	
	ПроверяемыеРеквизиты.Добавить("Дата");
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = "00";
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипЗначенияЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипЗначенияЗаполнения = Тип("ДокументСсылка.Saby_ЗаказНаПеревозку") Тогда 
				
		// Проверка на возможность ввода на основании
		Состояние = Saby_ТНОбщегоНазначенияСервер.ТекущийТитулИИДДокумента(ДанныеЗаполнения);
		Если Не ЗначениеЗаполнено(Состояние) Тогда
			
			ВызватьИсключение "Ошибка! Не возможен ввод на основании данного документа!";
			
		ИначеЕсли Не Состояние.ДОЗавершенПоложительно Тогда
			
			ВызватьИсключение "Ошибка! Ввод на основании возможен только при завершенном положительно ДО!";
			
		Иначе 
			ЗаполнитьНаОснованииЗаказаНаПеревозку(ДанныеЗаполнения);			
		КонецЕсли;	
				
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПрефиксОрганизацииДокумента()
	
	РезультатФункции = "00";
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.Префикс КАК Префикс,
	|	ВложенныйЗапрос.Порядок КАК Порядок
	|ИЗ
	|	(ВЫБРАТЬ
	|		Организации.Префикс КАК Префикс,
	|		1 КАК Порядок
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	ГДЕ
	|		Организации.Ссылка = &Ссылка1
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Организации.Префикс,
	|		2
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	ГДЕ
	|		Организации.Ссылка = &Ссылка2
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Организации.Префикс,
	|		3
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	ГДЕ
	|		Организации.Ссылка = &Ссылка3) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";

	ЗапросДанных.УстановитьПараметр("Ссылка1", Отправитель);
	ЗапросДанных.УстановитьПараметр("Ссылка2", Получатель);
	ЗапросДанных.УстановитьПараметр("Ссылка3", Перевозчик);

	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		РезультатФункции = ВыборкаДанных.Префикс;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#Область ЗаполнениеНаОсновании

Процедура ЗаполнитьНаОснованииЗаказаНаПеревозку(ДанныеЗаполнения)
	
	// Заполним по первому титулу
	ДанныеПервогоТитула = Документы.Saby_ЗаказНаПеревозку.ДанныеДокумента(
		ДанныеЗаполнения, Перечисления.Saby_ТипТитулаЗнП.Оформление);
		
	// Очистим данные отгрузчика	
	Saby_ТНОбщегоНазначенияКлиентСервер.УдалитьСтрокиПоРоли(ДанныеПервогоТитула.ДанныеЮрЛиц,      "Отгрузчик");
	Saby_ТНОбщегоНазначенияКлиентСервер.УдалитьСтрокиПоРоли(ДанныеПервогоТитула.КонтактныеДанные, "Отгрузчик");
			
	// Основание отправителя 
	СтрокаЮрЛиц = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(ДанныеПервогоТитула.ДанныеЮрЛиц, "Оформитель");
	Если СтрокаЮрЛиц <> Неопределено 
		И ЗначениеЗаполнено(СтрокаЮрЛиц.Основание) Тогда		
		
		ЭтотОбъект.Составитель_НаОснованииДокумент = СтрокаЮрЛиц.Основание;
		РольКопирования = "Оформитель";

	Иначе
		
		РольКопирования = "Отправитель";
		
		// зачистим оформителя
		Saby_ТНОбщегоНазначенияКлиентСервер.УдалитьСтрокиПоРоли(ДанныеПервогоТитула.ДанныеЮрЛиц,      "Оформитель");
	    Saby_ТНОбщегоНазначенияКлиентСервер.УдалитьСтрокиПоРоли(ДанныеПервогоТитула.КонтактныеДанные, "Оформитель");
		
	КонецЕсли;
	
	 // скопируем данные отправителя. Отгрузчик = Отправитель
	Saby_ТНОбщегоНазначенияКлиентСервер.СкопироватьДанныеЮрЛица(ДанныеПервогоТитула, "Отгрузчик", РольКопирования);
	
	Исключения = Новый Соответствие;
	Исключения.Вставить("Ссылка",                             Истина);
	Исключения.Вставить("НомерСбис",                          Истина);
	Исключения.Вставить("Направление",                        Истина);
	Исключения.Вставить("ДокументОснование_ОбъектМетаданных", Истина);
	Исключения.Вставить("ДокументОснование_Идентификатор",    Истина);
	Исключения.Вставить("АдресаПунктовВыгрузки",              Истина);
	Исключения.Вставить("АдресаПромежуточныхПунктов",         Истина);
	Исключения.Вставить("Груз_АдресаПунктов",                 Истина);  
	
	СоответствияРеквизитов = Новый Соответствие;
	СоответствияРеквизитов.Вставить("ВлажностьОт",   "Отправитель_ВлажностьОт");	
	СоответствияРеквизитов.Вставить("ВлажностьДо",   "Отправитель_ВлажностьДо");
	СоответствияРеквизитов.Вставить("ТемператураОт", "Отправитель_ТемператураОт");
	СоответствияРеквизитов.Вставить("ТемператураДо", "Отправитель_ТемператураДо");
	СоответствияРеквизитов.Вставить("СпецУсловия",   "Отправитель_НормыПеревозки");
	СоответствияРеквизитов.Вставить("Номер",         "Отправитель_ЗаявкаНомер");
	СоответствияРеквизитов.Вставить("Дата",          "Отправитель_ЗаявкаДата");
	
	// Подача и конечная точка
	СоответствияРеквизитов.Вставить("ПодачаАдрес",                 "Погрузка_Адрес");
	СоответствияРеквизитов.Вставить("ПодачаАдресСтруктура",        "АдресПогрузкиЗначение");
	СоответствияРеквизитов.Вставить("ПодачаДатаВремя",             "Погрузка_ДатаВремя");	
	СоответствияРеквизитов.Вставить("КонечнаяТочкаАдрес",          "Отправитель_АдресДоставки");
	СоответствияРеквизитов.Вставить("КонечнаяТочкаАдресСтруктура", "АдресДоставкиЗначение");
	
	СоответствияТаблиц = Новый Соответствие;
	
	ЗаполнитьПоДаннымТитула(ДанныеПервогоТитула, Исключения, СоответствияРеквизитов, СоответствияТаблиц);
		
	ДанныеВторогоТитула = Документы.Saby_ЗаказНаПеревозку.ДанныеДокумента(
		ДанныеЗаполнения, Перечисления.Saby_ТипТитулаЗнП.Утверждение);
		
	Исключения.Вставить("Водители",         Истина);	
	Исключения.Вставить("КонтактныеДанные", Истина);
	Исключения.Вставить("ДанныеЮрЛиц",      Истина);
	
	ЗаполнитьПоДаннымТитула(ДанныеВторогоТитула, Исключения, СоответствияРеквизитов, СоответствияТаблиц);
	
	ЭтотОбъект.ДокументОснование_Идентификатор    = ДанныеЗаполнения.УникальныйИдентификатор();
	ЭтотОбъект.ДокументОснование_ОбъектМетаданных = Saby_ТНОбщегоНазначенияСервер.ИмяМетаданныхДокумента(
		ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьПоДаннымТитула(ДанныеТитула, Исключения, СоответствияРеквизитов, СоответствияТаблиц)
	
	Для Каждого КлючЗначение Из ДанныеТитула Цикл
		
		Если Исключения[КлючЗначение.Ключ] <> Неопределено
			Или ТипЗнч(КлючЗначение.Значение) = Тип("ТаблицаЗначений") Тогда
			Продолжить;
			
		ИначеЕсли СоответствияРеквизитов[КлючЗначение.Ключ] <> Неопределено Тогда
			Ключ = СоответствияРеквизитов[КлючЗначение.Ключ];
		Иначе 
			Ключ = КлючЗначение.Ключ;
		КонецЕсли;	
				
		Если Не Saby_ТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(ЭтотОбъект, Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтотОбъект[Ключ] = КлючЗначение.Значение;
		
	КонецЦикла;
	
	ЗаполнениеТабличныхЧастей(ДанныеТитула, Исключения, СоответствияТаблиц);
	
КонецПроцедуры

Процедура ЗаполнениеТабличныхЧастей(ДанныеТитула, Исключения, СоответствияТаблиц)
	
	Для Каждого КлючЗначение Из ДанныеТитула Цикл
		
		Если Исключения[КлючЗначение.Ключ] <> Неопределено 
			Или ТипЗнч(КлючЗначение.Значение) <> Тип("ТаблицаЗначений") Тогда
			Продолжить;
		КонецЕсли;
				
		ИмяТаблицыОбъекта = СоответствияТаблиц[КлючЗначение.Ключ];
		Если ИмяТаблицыОбъекта = Неопределено Тогда
			ИмяТаблицыОбъекта = КлючЗначение.Ключ;
		КонецЕсли;
		
		ОбходТаблицПоУсловиям(ИмяТаблицыОбъекта, КлючЗначение);
		
	КонецЦикла;

КонецПроцедуры	

Процедура ОбходТаблицПоУсловиям(ИмяТаблицыОбъекта, КлючЗначение)
	
	Для Каждого СтрокаИсходнойТаблицы Из КлючЗначение.Значение Цикл
		
		Если ИмяТаблицыОбъекта = "ОтветственныеЛица" 
			И СтрокаИсходнойТаблицы.Роль <> Перечисления.Saby_РолиОтветственных.Водитель Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТаблицыОбъекта = ЭтотОбъект[ИмяТаблицыОбъекта].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыОбъекта, СтрокаИсходнойТаблицы);
		
		// Опасный груз хранится в отдельной таблице
		Если ИмяТаблицыОбъекта = "Грузы"
			И ЗначениеЗаполнено(СтрокаИсходнойТаблицы.ОпасныйГруз) Тогда
			
			СтрокаОпасныйГруз = ОпасныеГрузы.Добавить();
			СтрокаОпасныйГруз.КлючСтроки_Грузы = СтрокаИсходнойТаблицы.КлючСтроки;
			СтрокаОпасныйГруз.ОпасныйГруз      = СтрокаИсходнойТаблицы.ОпасныйГруз;
			
		КонецЕсли;	
		
	КонецЦикла;		
		
КонецПроцедуры

#КонецОбласти // ЗаполнениеНаОсновании

#КонецОбласти
