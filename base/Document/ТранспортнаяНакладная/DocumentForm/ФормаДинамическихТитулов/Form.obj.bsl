
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НачальноеЗаполнениеПараметров();
	
	ЗаполнениеДанныхПоТитулам();
	
	ОбновитьВидимостьИДоступностьЭлементов(Истина);
	
	МодульКода("Saby_ТНОбщегоНазначенияСервер").ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
	
	УстановитьТипыРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.ЭтоРасшифровкаИзменений Тогда
		Оповестить("Saby_ПрочитанДинамическийТитул", ИдентификаторТитула, ВладелецФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Saby_ОбновитьДокумент" И Источник = ЭтаФорма.УникальныйИдентификатор Тогда
		
		Оповестить("Saby_ОбновитьДокумент", ИдентификаторТитула, ВладелецФормы.УникальныйИдентификатор);
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "Saby_СписокДокументов" Тогда
		
		Если Параметр.ЭтоДинамическийТитул Тогда			
			ОбновитьДанныеПоОшибкамНаСервере(Параметр.СписокДокументов.Получить(СсылкаНаДокумент));			
		КонецЕсли;
		
	Иначе		
		Возврат;		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область События_ЗаменаВодителяИлиТС
 
 &НаКлиенте
Процедура ТранспортноеСредствоСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	ПроцедураПослеОбновленияДанныхТранспортныхСредств = Новый ОписаниеОповещения(
		"ПослеОбновленияДанныхТранспортныхСредств",
		ЭтаФорма);
	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ТранспортноеСредствоНажатие(
		ЭтаФорма,
		СтандартнаяОбработка,
		ПроцедураПослеОбновленияДанныхТранспортныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ПрицепыНажатие(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СпецРазрешенияПослеУдаления(Элемент)
	РасчетКоличестваСпецРазрешений();
КонецПроцедуры

&НаКлиенте
Процедура СпецРазрешенияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РасчетКоличестваСпецРазрешений();
КонецПроцедуры

#КонецОбласти // События_ЗаменаВодителяИлиТС

#Область События_Переадресовка

&НаКлиенте
Процедура ПолучательСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПроцедураПослеИзмененияПолучателя = Новый ОписаниеОповещения("ПроцедураПослеИзмененияПолучателя", ЭтотОбъект);
	
	ПараметрыРеквизитаФормы = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ПараметрыРеквизитаФормы(
		Элемент.Имя, Элемент.Имя);
	ПараметрыРеквизитаФормы.ТолькоПросмотр = Элементы.ГруппаЗаменаПолучателя.ТолькоПросмотр;
	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ЮрЛицоНажатие(
		ЭтаФорма, 
		"Получатель", 
		ПараметрыРеквизитаФормы,
		ПроцедураПослеИзмененияПолучателя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцедураПослеИзмененияПолучателя(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда		
		
		ДопПараметры = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ДопПараметрыОбновленияКИ(
			"Получатель", 
			ЭтаФорма.ДанныеЮрЛиц, 
			ЭтаФорма.КонтактныеДанные);
		
		МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ОбновитьАдресаПогрузкиДоставки(ЭтаФорма, ДопПараметры);
		
		ОбновитьВидимостьИДоступностьЭлементов();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Получатель_ТелефонПриИзменении(Элемент)
	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ТелефонПриИзменении(ЭтаФорма, Получатель_Телефон, "Получатель", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Получатель_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     "Получатель");
	ПараметрыВыбораТелефона.Вставить("Значение", Получатель_Телефон);
	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ТелефонНачалоВыбора(
		ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтактныеДанные

&НаКлиенте
Процедура ПолучательКонтактныеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	СтруктураДанныхЮрЛица = Saby_ТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(ЭтаФорма.ДанныеЮрЛиц, "Получатель");
	
	Если Не СтруктураДанныхЮрЛица.Заполнена Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан Получатель!";
		Сообщение.Поле  = "ПолучательСтрокой";
		Сообщение.Сообщить();		
		Отказ = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактныеДанныеПослеУдаления(Элемент)
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	РолиЮрЛиц = МодульТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, "Получатель");
	
	ДопПараметрыОбновленияКИ = МодульТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(РолиЮрЛиц);
	МодульТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметрыОбновленияКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактныеДанныеЗначениеПриИзменении(Элемент)
	
	РолиЮрЛиц = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").РолиЮрЛиц(ЭтаФорма, "Получатель");
	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ЗначениеКонтактныхДанныхПриИзменении(
		ЭтаФорма, Элементы.ПолучательКонтактныеДанные.ТекущиеДанные, РолиЮрЛиц);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактныеДанныеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	РолиЮрЛиц = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").РолиЮрЛиц(ЭтаФорма, "Получатель");
	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ЗначениеКонтактныхДанныхНачалоВыбора(
		ЭтаФорма, Элементы.ПолучательКонтактныеДанные.ТекущиеДанные, РолиЮрЛиц, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактныеДанныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	Если НоваяСтрока Тогда 
				
		Отбор = Новый Структура;
		Отбор.Вставить("Роль", Неопределено);
		
		НайденныеСтроки = ЭтаФорма.КонтактныеДанные.НайтиСтроки(Отбор);
		Для Каждого Строка Из НайденныеСтроки Цикл 
			Строка.Роль                   = Элементы.ПолучательКонтактныеДанные.ОтборСтрок.Роль;
			Строка.КлючСтроки_ДанныеЮрЛиц = Элементы.ПолучательКонтактныеДанные.ОтборСтрок.КлючСтроки_ДанныеЮрЛиц;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыКонтактныеДанные

&НаКлиенте
Процедура АдресДоставкиНажатие(Элемент, СтандартнаяОбработка)

	ПараметрыВыбораАдреса = Новый Структура;
	ПараметрыВыбораАдреса.Вставить("Роль",     "Получатель");
	ПараметрыВыбораАдреса.Вставить("Значение", АдресДоставкиЗначение);
	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").АдресНачалоВыбора(ЭтаФорма, ПараметрыВыбораАдреса, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиПереадресовкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
   РедактированиеОтметок("ОтметкиПереадресовка", НоваяСтрока, Копирование);
	
КонецПроцедуры

#Область Оформил

&НаКлиенте
Процедура ИзменитьДанныеОформил()
			
	ПараметрыФормы = ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ДесериализоватьЗначение", ЭтаФорма.ОформилСтруктура);
	
	ПараметрыФормы.Вставить("ТолькоПросмотр", Элементы.ГруппаОформил.ТолькоПросмотр);
	ПараметрыФормы.Вставить("Наименование",   "Оформил");
	ПараметрыФормы.Вставить("РольСтрокой",    "ОформительДокумента");
		
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ИзменитьДанныеВодителяОтветственногоЛица(
		ЭтаФорма, 
		ПараметрыФормы, 
		"ПослеВводаДанныхОформившего"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДанныхОформившего(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда 
		
		Структура = Новый Структура;
		Структура.Вставить("Фамилия",          РезультатЗакрытия.Фамилия);
		Структура.Вставить("Имя",              РезультатЗакрытия.Имя);
		Структура.Вставить("Отчество",         РезультатЗакрытия.Отчество);
		Структура.Вставить("Телефоны",         РезультатЗакрытия.Телефоны);
		Структура.Вставить("ЭлектроннаяПочта", РезультатЗакрытия.ЭлектроннаяПочта);
				
		ОбновитьОформившего(Структура);
		
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ОформилНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ИзменитьДанныеОформил();
	
КонецПроцедуры

&НаКлиенте
Процедура Оформил_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораТелефона = Новый Структура;
	ПараметрыВыбораТелефона.Вставить("Роль",     "Оформил");
	ПараметрыВыбораТелефона.Вставить("Значение", Оформил_Телефон);
	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ТелефонНачалоВыбора(
		ЭтаФорма, ПараметрыВыбораТелефона, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

#КонецОбласти // Оформил

#КонецОбласти // События_Переадресовка

#Область События_ИзменениеСтоимости

#Область БанковскиеСчета

&НаКлиенте
Процедура РасчетныйСчетПеревозчикПриИзменении(Элемент)
	
	ЗаполнитьРеквизитыСчета(ЭтаФорма.РасчетныйСчетПеревозчик, "Перевозчик");
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйСчетПриИзменении(Элемент)
	
	ЗаполнитьРеквизитыСчета(ЭтаФорма.РасчетныйСчет);
	
КонецПроцедуры

#КонецОбласти // БанковскиеСчета 

&НаКлиенте
Процедура ТипПлательщикПриИзменении(Элемент)
	
	ТипПлательщикПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДругойПлательщикСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПроцедураПослеИзмененияПлательщика = Новый ОписаниеОповещения("ПослеИзмененияПлательщика", ЭтотОбъект);
	
	ПараметрыРеквизитаФормы = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ПараметрыРеквизитаФормы(
		Элемент.Имя, Элемент.Имя);
	ПараметрыРеквизитаФормы.ТолькоПросмотр = Элементы.ГруппаПлательщик.ТолькоПросмотр;
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ЮрЛицоНажатие(
		ЭтаФорма, "ПустаяСсылка", ПараметрыРеквизитаФормы, ПроцедураПослеИзмененияПлательщика);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияПлательщика(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураПлательщика = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ДанныеЮрЛицаПоРоли(ДанныеЮрЛиц, "ПустаяСсылка");
	
	ЭтаФорма.РасчетныйСчет = РасчетныйСчетПоУмолчанию(СтруктураПлательщика);
	
	УстановкаТипаРасчетныхСчетов(СтруктураПлательщика);
	
	ЗаполнитьРеквизитыСчета(ЭтаФорма.РасчетныйСчет);
	
КонецПроцедуры

#КонецОбласти // События_ИзменениеСтоимости

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПрицепы

&НаКлиенте
Процедура ПрицепыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПроцедураПослеОбновленияДанныхТранспортныхСредств = Новый ОписаниеОповещения(
		"ПослеОбновленияДанныхТранспортныхСредств",
		ЭтаФорма);
	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ТаблицаПрицеповВыбор(
		ЭтаФорма,
		ВыбраннаяСтрока,
		СтандартнаяОбработка,
		ПроцедураПослеОбновленияДанныхТранспортныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПроцедураПослеОбновленияДанныхТранспортныхСредств = Новый ОписаниеОповещения(
		"ПослеОбновленияДанныхТранспортныхСредств",
		ЭтаФорма);
	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ТаблицаПрицеповПриНачалеРедактирования(
		ЭтаФорма,
		ПроцедураПослеОбновленияДанныхТранспортныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПослеУдаления(Элемент)
	
	ПослеОбновленияДанныхТранспортныхСредств(Неопределено, Неопределено);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПрицепы

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибок

&НаКлиенте
Процедура ТаблицаОшибокПриАктивизацииСтроки(Элемент)
	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ОшибкиПриАктивизацииСтроки(ЭтаФорма);
	
	ПараметрыВыделенияДекорации = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ПараметрыВыделенияДекорации(ЭтаФорма);
	Если ПараметрыВыделенияДекорации.НужноОбновитьДекорацию Тогда
		ОбновитьДекорациюНаСервере(ПараметрыВыделенияДекорации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибок

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаменаВодители(Команда)
	
    Элементы.ЗаменаВодители.Пометка = Не Элементы.ЗаменаВодители.Пометка;
	УстановитьШрифтКнопки(Элементы.ЗаменаВодители);
	ВидимостьЭлементовПоВидамЗамены();
	
	Если Элементы.ГруппаОшибки.Видимость Тогда
		ОбновитьДанныеПоОшибкамНаКлиенте(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаПрицепы(Команда)

	Элементы.ЗаменаПрицепы.Пометка = Не Элементы.ЗаменаПрицепы.Пометка;
	УстановитьШрифтКнопки(Элементы.ЗаменаПрицепы);
	ВидимостьЭлементовПоВидамЗамены();
	
	Если Элементы.ГруппаОшибки.Видимость Тогда
		ОбновитьДанныеПоОшибкамНаКлиенте(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаТС(Команда)
	
	Элементы.ЗаменаТС.Пометка = Не Элементы.ЗаменаТС.Пометка;
	УстановитьШрифтКнопки(Элементы.ЗаменаТС);
	ВидимостьЭлементовПоВидамЗамены();
	
	Если Элементы.ГруппаОшибки.Видимость Тогда
		ОбновитьДанныеПоОшибкамНаКлиенте(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОшибки(Команда)
	
	Элементы.ФормаПоказатьСкрытьОшибки.Пометка = Не Элементы.ФормаПоказатьСкрытьОшибки.Пометка;
	ОбновитьВнешнийВидЭлементовОшибок();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВнешнийВидЭлементовОшибок()
	МодульКода("Saby_ТНОбщегоНазначенияСервер").ОбновитьВнешнийВидЭлементовОшибок(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоОшибкам(Команда)
	
	ПроцедураОбновитьДанныеПоОшибкамНаКлиенте = Новый ОписаниеОповещения(
		"ОбновитьДанныеПоОшибкамНаКлиенте",
		ЭтотОбъект);
	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ПроверитьМодифицированностьИПродолжитьВыполнение(
		ПроцедураОбновитьДанныеПоОшибкамНаКлиенте, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьВСогласовании(Команда)
	
	ПроцедураОтказатьВСогласованииПослеВводаПричины = Новый ОписаниеОповещения(
		"ОтказатьВСогласованииПослеВводаПричины", ЭтотОбъект);
	
	ПоказатьВводСтроки(ПроцедураОтказатьВСогласованииПослеВводаПричины, Причина, "Введите причину отказа", 255);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы 

#Область СлужебныеПроцедурыИФункции

#Область Служебные_Общие

&НаСервере
Процедура НачальноеЗаполнениеПараметров()
	
	ЭтаФорма.СсылкаНаДокумент        = Параметры.СсылкаНаДокумент;
	ЭтаФорма.ИдентификаторТитула     = Параметры.ИдентификаторТитула;
	ЭтаФорма.ТипТитула               = ЗначениеМетаданных("Saby_ТипТитулаЭтрН." + Параметры.ТипТитула);
	ЭтаФорма.ЭтоРасшифровкаИзменений = ЗначениеЗаполнено(ЭтаФорма.ИдентификаторТитула);
	ЭтаФорма.ДоступныеДействия       = Параметры.ДоступныеДействия;
	
	// Заполнено только для внешней обработки
	Если ЗначениеЗаполнено(Параметры.ДанныеТитулов) Тогда
		ЗначениеВДанныеФормы(Параметры.ДанныеТитулов.Выгрузить(), ЭтаФорма.ДанныеТитулов);
	КонецЕсли;
	
	РасчетПризнаковЭтапов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеДанныхПоТитулам()
	
	Если ЭтаФорма.ЭтоРасшифровкаИзменений Тогда
		МодульКода("Saby_ТНЗагрузкаСервер").ЗагрузитьДанныеДинамическогоТитула(ЭтаФорма, ИдентификаторТитула);
	КонецЕсли;	
		
	Если ЭтаФорма.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ЗаменаВодителяТС") Тогда
		ЗаполнитьДанныеТитула_ЗаменаВодителяИлиТС();
	ИначеЕсли ЭтаФорма.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПереадресовкаУведомление")		
		Или ЭтаФорма.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.Переадресовка") Тогда		
		ЗаполнитьДанныеТитула_Переадресовка();
	ИначеЕсли ЭтаФорма.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ИзменениеСтоимости")
		Или ЭтаФорма.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.СогласованиеСтоимости") Тогда
		ЗаполнитьДанныеТитула_Стоимости();
	Иначе
		ВызватьИсключение("Не описанный тип динамического титула ЭТрН" + СокрЛП(ТипТитула));
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИДоступностьЭлементов(Знач ВызовПриСоздании = Ложь)
	
	// отключаем страницы
	Элементы.Страницы_ДТ.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
															
	СвойстваЭлементовФормы = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ПараметрыСвойствЭлементовФормы();							
			
	Если ЭтаФорма.ЭтоЗаменаВодителяТС Тогда		
		УстановкаСвойствЭлементов_ЗаменаВодителяИлиТС(СвойстваЭлементовФормы, ВызовПриСоздании);		
	Иначе	
		СвойстваЭлементовФормы.Видимость_Снять.Добавить("ДТ_Замена");
	КонецЕсли;
	
	Если ЭтаФорма.ЭтоИзменениеСтоимости Тогда		
		УстановкаСвойствЭлементов_ИзменениеСтоимости(СвойстваЭлементовФормы, ВызовПриСоздании);		
	Иначе	
		
		СвойстваЭлементовФормы.Видимость_Снять.Добавить("ДТ_Стоимость");
		
		// Убираем кнопку в командной панели
		Если ВызовПриСоздании Тогда
			СвойстваЭлементовФормы.Видимость_Снять.Добавить("ОтказатьВСогласовании");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтаФорма.ЭтоПереадресовка Тогда		
		УстановкаСвойствЭлементов_Переадресовка(СвойстваЭлементовФормы, ВызовПриСоздании);		
	Иначе	
		СвойстваЭлементовФормы.Видимость_Снять.Добавить("ДТ_Переадресовка");
	КонецЕсли;	
	
	МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ГрупповаяУстановкаСвойствЭлементовФормы(ЭтаФорма, СвойстваЭлементовФормы);
	
	Если ЭтаФорма.ЭтоЗаменаВодителяТС Тогда
		
		// Пометки на переключателях
		Элементы.ЗаменаВодители.Пометка = Элементы.ГруппаВодители.Видимость;
		Элементы.ЗаменаТС.Пометка       = Элементы.ГруппаТС.Видимость;
		Элементы.ЗаменаПрицепы.Пометка  = Элементы.ГруппаПрицепы.Видимость;
		
		УстановитьШрифтКнопки(Элементы.ЗаменаВодители);
		УстановитьШрифтКнопки(Элементы.ЗаменаТС);
		УстановитьШрифтКнопки(Элементы.ЗаменаПрицепы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасчетПризнаковЭтапов()
	
	ЭтаФорма.ЭтоЗаменаВодителяТС   = ЭтаФорма.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ЗаменаВодителяТС");	
	
	ЭтаФорма.ЭтоИзменениеСтоимости = ЭтаФорма.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ИзменениеСтоимости") 
										Или ЭтаФорма.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.СогласованиеСтоимости");		
	
	ЭтаФорма.ЭтоПереадресовка      = ЭтаФорма.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПереадресовкаУведомление")
										Или ЭтаФорма.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.Переадресовка");
								
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Результат, ДополнительныеПараметры) Экспорт

	ДанныеДляВыгрузки = Новый Массив;
	ПараметрыВыгрузки = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ПараметрыВыгрузки(СсылкаНаДокумент);
		
	ПараметрыВыгрузки.Этап = РасчетЭтапа(ЭтаФорма.ТипТитула);	
	
	Если ЭтаФорма.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.СогласованиеСтоимости") Тогда		
		
		Если ДополнительныеПараметры <> Неопределено Тогда
			ПараметрыВыгрузки.ОтрицательныйПереход          = ДополнительныеПараметры.ОтказВСогласовании;
			ПараметрыВыгрузки.ПричинаОтрицательногоПерехода = ДополнительныеПараметры.ПричинаОтказа;
		КонецЕсли;
				
	КонецЕсли;
	
	ПараметрыВыгрузки.ДанныеДокумента = ДанныеТитула();
	ДанныеДляВыгрузки.Добавить(ПараметрыВыгрузки);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДвоичныеДанныеОбработки", Неопределено);
	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ВыполнитьКомандуСбис(
		ЭтаФорма, "ЗагрузитьВСбисДинамическийТитул", ДанныеДляВыгрузки, ДополнительныеПараметры);
				
КонецПроцедуры

&НаСервере
Функция РасчетЭтапа(Знач Титул)

	Этап = Новый Соответствие;
	Этап.Вставить(ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ЗаменаВодителяТС"),         "Замена водителей/ТС");
	Этап.Вставить(ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ИзменениеСтоимости"),       "Изменение стоимости");
	Этап.Вставить(ЗначениеМетаданных("Saby_ТипТитулаЭтрН.СогласованиеСтоимости"),    "Согласовать стоимость");
	Этап.Вставить(ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПереадресовкаУведомление"), "Уведомление о переадресовке");
	Этап.Вставить(ЗначениеМетаданных("Saby_ТипТитулаЭтрН.Переадресовка"),            "Переадресовка");
	
	Возврат Этап[Титул];
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовки(ЗаголовокФормы, ЗаголовокКоманды)
	
	Элементы.ВыполнитьОбмен.Заголовок = ЗаголовокКоманды;
	ЭтаФорма.Заголовок                = ЗаголовокФормы;
	
КонецПроцедуры

#КонецОбласти // Служебные_Общие

#Область Заполнение_ЗаменаВодителяИлиТС

&НаСервере
Процедура ЗаполнитьДанныеТитула_ЗаменаВодителяИлиТС()
						
	Если Не ЭтаФорма.ЭтоРасшифровкаИзменений Тогда			
		ЭтаФорма.ДатаВремяЗамены = ТекущаяДатаСеанса();		
	КонецЕсли;
	
	ЭтаФорма.ТипСмены = ?(ЗначениеЗаполнено(ДокументЗамены), "Документ", "Описание");
	
	МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ОбновитьТранспортныеСредстваНаФорме(ЭтаФорма);
	
	МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ОбновитьВодителейНаФорме(ЭтаФорма);
		
	ЭтаФорма.СпецРазрешенияКоличество = ЭтаФорма.СпецРазрешения.Количество();
	
	УстановитьЗаголовки("Замена водителей / ТС", "Выполнить замену");
	
	МодульКода("Saby_ТНОбщегоНазначенияСервер").УстановитьОтборТаблицыОтветственных(Элементы.Водители, "Водитель");
	
КонецПроцедуры

#КонецОбласти // Заполнение_ЗаменаВодителяИлиТС 

#Область Заполнение_Переадресовка

&НаСервере
Процедура ЗаполнитьДанныеТитула_Переадресовка()
			
	ЭтаФорма.ЭтоУведомление = ЭтаФорма.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПереадресовкаУведомление");

	Если Не ЭтаФорма.ЭтоРасшифровкаИзменений Тогда
		
		Если ЭтаФорма.ЭтоУведомление Тогда
			Пользователь = Пользователи.ТекущийПользователь();
			ЭтаФорма.Оформил = МодульКода("Saby_ТНОбщегоНазначенияСервер").ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
		Иначе
			// заполнение переадресовки на основании уведомления о переадресовке
			ЗагрузитьДанныеУведомленияОПереадресовке();
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяРолиПолучатель = "Получатель";

	ОтборИнформацииПоКонтактнымДанным("ПолучательКонтактныеДанные", ИмяРолиПолучатель);
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	РолиЮрЛиц = МодульТНОбщегоНазначенияКлиентСервер.РолиЮрЛиц(ЭтаФорма, ИмяРолиПолучатель);
	ДопПараметры = МодульТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ(РолиЮрЛиц);
	МодульТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметры);
	
	ДопПараметры = МодульТНОбщегоНазначенияКлиентСервер.ДопПараметрыОбновленияКИ("Оформил");
	МодульТНОбщегоНазначенияКлиентСервер.ОбновитьОсновнойНомерТелефона(ЭтаФорма, ДопПараметры);
	
	ОбновитьЭлектроннаяПочтаОформил();
	
	УстановкаСпискаДоступныхТиповКИ();
	
	ОбновитьОформившего();
		
	// Заголовки
	Если ЭтаФорма.ЭтоУведомление Тогда
		
		ЗаголовокКоманды = "Уведомить";
		ЗаголовокФормы   = "Уведомление о переадресовке";
		
	Иначе
		
		ЗаголовокКоманды = "Переадресовать";
		ЗаголовокФормы   = "Переадресовка";
				
	КонецЕсли;
	
	УстановитьЗаголовки(ЗаголовокФормы, ЗаголовокКоманды);
	
	ЭтаФорма.ПолучательСтрокой = МодульТНОбщегоНазначенияКлиентСервер.ПредставлениеЮрЛицаПоРоли(
		Этаформа.ДанныеЮрЛиц, ИмяРолиПолучатель);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеУведомленияОПереадресовке()
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПолучитьДанныеТитулов(ЭтаФорма, МенеджерВременныхТаблиц);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ДанныеТитулов.Период КАК Период,
	|	ДанныеТитулов.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	ДанныеТитулов.ТипТитула КАК ТипТитула,
	|	ДанныеТитулов.ИдентификаторТитула КАК ИдентификаторТитула
	|ИЗ
	|	ДанныеТитулов КАК ДанныеТитулов
	|ГДЕ
	|	ДанныеТитулов.ТипТитула = &Уведомление
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторТитула УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТитулов.Период КАК Период,
	|	ДанныеТитулов.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	ДанныеТитулов.ТипТитула КАК ТипТитула,
	|	ДанныеТитулов.ИдентификаторТитула КАК ИдентификаторТитула
	|ИЗ
	|	ДанныеТитулов КАК ДанныеТитулов
	|ГДЕ
	|	ДанныеТитулов.ТипТитула = &Переадресовка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторТитула УБЫВ";
	
	ЗапросДанных.УстановитьПараметр("Переадресовка", ЗначениеМетаданных("Saby_ТипТитулаЭтрН.Переадресовка"));
	ЗапросДанных.УстановитьПараметр("Уведомление",   ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПереадресовкаУведомление"));
	
	Результат = ЗапросДанных.ВыполнитьПакет();
	
	ВыборкаПереадресовкаУведомление = Результат[Результат.ВГраница() - 1].Выбрать();
	ВыборкаПереадресовка            = Результат[Результат.ВГраница()].Выбрать();
	
	Если ВыборкаПереадресовкаУведомление.Следующий() Тогда
		
		ДатаПоследнейПереадресовки = Дата(1, 1, 1, 0, 0, 0);
		Если ВыборкаПереадресовка.Следующий() Тогда
			ДатаПоследнейПереадресовки = ВыборкаПереадресовка.Период;
		КонецЕсли;
		
		// Уже была переадресовка по уведомлению
		Если ВыборкаПереадресовкаУведомление.Период < ДатаПоследнейПереадресовки Тогда
			Возврат;
		КонецЕсли;
		
		ЭтаФорма.ЗаполнениеПоДаннымПредыдущегоТитула = Истина;
		
		МодульКода("Saby_ТНЗагрузкаСервер").ЗагрузитьДанныеДинамическогоТитула(
			ЭтаФорма, ВыборкаПереадресовкаУведомление.ИдентификаторТитула);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтборИнформацииПоКонтактнымДанным(ИмяТЧ, Значение)
	
	Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов." + Значение);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Роль", Роль);
	Элементы[ИмяТЧ].ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураПоиска);
					
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлектроннаяПочтаОформил()
	
	Отбор = Новый Структура;
	Отбор.Вставить("Роль", ЗначениеМетаданных("Saby_РолиКонтрагентов.ПустаяСсылка"));
	Отбор.Вставить("Тип",  ЗначениеМетаданных("ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	
	НайденныеСтроки = КонтактныеДанные.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		ЭтаФорма.Оформил_ЭлектроннаяПочта = НайденныеСтроки[0].Значение;
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура УстановкаСпискаДоступныхТиповКИ()
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ПолучательКонтактныеДанныеТип");
	
	МодульКода("Saby_ТНОбщегоНазначенияСервер").УстановкаСпискаДоступныхТиповКИ(ЭтаФорма, МассивЭлементов);
	   
КонецПроцедуры

&НаСервере
Процедура ОбновитьОформившего(Структура = Неопределено)
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	Если Структура <> Неопределено Тогда
		
		ЭтаФорма.ОформилСтруктура = МодульТНОбщегоНазначенияСервер.СериализоватьЗначение(Структура);
		
		Телефоны = МодульТНОбщегоНазначенияСервер.ДесериализоватьЗначение(Структура.Телефоны);
		Если Телефоны.Количество() Тогда
			ЭтаФорма.Оформил_Телефон = Телефоны[0];
		Иначе 	
		    ЭтаФорма.Оформил_Телефон = "";
		КонецЕсли;
		
		ЭлектроннаяПочта = МодульТНОбщегоНазначенияСервер.ДесериализоватьЗначение(Структура.ЭлектроннаяПочта);
		Если ЭлектроннаяПочта.Количество() Тогда
			ЭтаФорма.Оформил_ЭлектроннаяПочта = ЭлектроннаяПочта[0];
		Иначе 	
		    ЭтаФорма.Оформил_ЭлектроннаяПочта = "";
		КонецЕсли;
		
	Иначе
		Структура = ЭтаФорма.ОформилСтруктура;
	КонецЕсли;
	
	МодульТНОбщегоНазначенияСервер.ОбновитьОтветственногоНаФорме(ЭтаФорма, "Оформил", Структура);
	
КонецПроцедуры

#КонецОбласти // Заполнение_Переадресовка

#Область Заполнение_Стоимости

&НаСервере
Процедура ЗаполнитьДанныеТитула_Стоимости()
	
	Если ЗначениеЗаполнено(Параметры.СтруктураОтправителя) Тогда
		СтрокаОтправителя = ЭтаФорма.ДанныеЮрЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОтправителя, Параметры.СтруктураОтправителя);
	КонецЕсли;
	
	СтрокаПеревозчика = Неопределено;
	Если ЗначениеЗаполнено(Параметры.СтруктураПеревозчика) Тогда 
		СтрокаПеревозчика = ЭтаФорма.ДанныеЮрЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПеревозчика, Параметры.СтруктураПеревозчика);		
	КонецЕсли;
	
	ЭтаФорма.ЭтоСогласование = (ЭтаФорма.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.СогласованиеСтоимости"));	
			
	УстановкаТипаРасчетныхСчетов();
	
	// просмотр данных согласования из ленты
	Если ЭтаФорма.ЭтоРасшифровкаИзменений Тогда
					
		Если ЭтаФорма.Ставка = "" Тогда
			ЭтаФорма.Ставка = "без НДС";
		КонецЕсли;
		
	КонецЕсли;
		
	// при согласовании может быть и другой
	Если Не ЗначениеЗаполнено(ТипПлательщик) Тогда 
		ТипПлательщик = "Отправитель";   
	КонецЕсли;
	
    ТитулСтоимости_ЗаполнениеСчетов(СтрокаПеревозчика);
	
	// Заголовки
	Если ЭтаФорма.ЭтоСогласование Тогда
		
		ЗаголовокКоманды = "Согласовать стоимость";
		ЗаголовокФормы   = "Согласование стоимости";
		
	Иначе
		
		ЗаголовокКоманды = "Изменить стоимость";
		ЗаголовокФормы   = "Изменение стоимости";
		
	КонецЕсли;
	
	УстановитьЗаголовки(ЗаголовокФормы, ЗаголовокКоманды);
	
	ЭтаФорма.ДругойПлательщикСтрокой = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ДанныеЮрЛицаПоРоли(
			ЭтаФорма.ДанныеЮрЛиц, "ПустаяСсылка").НаименованиеОрганизации;
	
КонецПроцедуры

&НаСервере
Процедура ТитулСтоимости_ЗаполнениеСчетов(СтрокаПеревозчика)
	
	Если ЭтаФорма.ЭтоРасшифровкаИзменений Тогда		
		
		// Если открыли форму из ленты и согласование уже прошло 
		// то блокируем от изменений
		ЭтаФорма.ТолькоПросмотр = ЭтаФорма.ЭтоСогласование;
		ЗаполнитьТитулИзмененияСтоимости(ЭтаФорма.ИдентификаторТитула);
		
	Иначе 
		
		Если Не ЭтаФорма.ЭтоСогласование Тогда
			ЭтаФорма.РасчетныйСчетПеревозчик = РасчетныйСчетПоУмолчанию(СтрокаПеревозчика);
			ЗаполнитьРеквизитыСчета(ЭтаФорма.РасчетныйСчетПеревозчик, "Перевозчик");
		Иначе
			
			Если ЗначениеЗаполнено(Параметры.СтруктураОтправителя) Тогда
				
				СтрокаПлательщика = ЭтаФорма.ДанныеЮрЛиц.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПлательщика, Параметры.СтруктураОтправителя);
				СтрокаПлательщика.Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов.ПустаяСсылка");
				
			КонецЕсли;
			
			ЭтаФорма.РасчетныйСчет = РасчетныйСчетПоУмолчанию(СтрокаПлательщика);
			ЗаполнитьРеквизитыСчета(ЭтаФорма.РасчетныйСчет);
			ЗаполнитьТитулИзмененияСтоимости(Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСтавки(Ставка)
	
	Значение = СтрЗаменить(Ставка, "%", "");
	
	ТипЧисло  = Новый ОписаниеТипов("Число");
	Результат = ТипЧисло.ПривестиЗначение(Значение);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТитулИзмененияСтоимости(Идентификатор)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПолучитьДанныеТитулов(ЭтаФорма, МенеджерВременныхТаблиц);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанных.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ДанныеТитулов.Период, &ТекущаяДата) КАК Период,
	|	ДанныеТитулов.ИдентификаторТитула КАК ИдентификаторТитула
	|ПОМЕСТИТЬ ВТ_Период
	|ИЗ
	|	ДанныеТитулов КАК ДанныеТитулов
	|ГДЕ
	|	1 = 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеТитулов.ИдентификаторТитула КАК ИдентификаторТитула,
	|	ДанныеТитулов.Данные КАК Данные,
	|	ВТ_Период.Период КАК Период
	|ИЗ
	|	ДанныеТитулов КАК ДанныеТитулов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Период КАК ВТ_Период
	|		ПО ДанныеТитулов.Период <= ВТ_Период.Период
	|ГДЕ
	|	1 = 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеТитулов.Период УБЫВ";
	 
	Если ЗначениеЗаполнено(Идентификатор) Тогда 
		ЗапросДанных.УстановитьПараметр("Идентификатор", Идентификатор); 		
		Условие = "ДанныеТитулов.ИдентификаторТитула = &Идентификатор"; 
	Иначе
		ЗапросДанных.УстановитьПараметр("ИзменениеСтоимости", ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ИзменениеСтоимости"));
		Условие = "ДанныеТитулов.ТипТитула = &ИзменениеСтоимости";				
	КонецЕсли;
	
	ЗапросДанных.Текст = СтрЗаменить(ЗапросДанных.Текст, "1=1", Условие);
	
	ЗапросДанных.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Выборка = ЗапросДанных.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда  
		
		ДанныеФормы = ЗначениеИзСтрокиВнутр(Выборка.Данные);
		Если ДанныеФормы.Свойство("ДанныеЮрЛиц") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеФормы, , "ДанныеЮрЛиц,КонтактныеДанные,ДокументыЭПД");
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеФормы);
		КонецЕсли;
		
		Если Ставка = "" Тогда
			Ставка = "без НДС";
		КонецЕсли;
		
		ЭтаФорма.ЗаполнениеПоДаннымПредыдущегоТитула = Истина;
		
	КонецЕсли;
	
 КонецПроцедуры

#КонецОбласти // Заполнение_Стоимости

#Область УстановкаВидимостиПоТитулам

&НаСервере
Процедура УстановкаСвойствЭлементов_ЗаменаВодителяИлиТС(СвойстваЭлементовФормы, ВызовПриСоздании)
	
	СкрытьВидимость          = СвойстваЭлементовФормы.Видимость_Снять;
	СнятьДоступность         = СвойстваЭлементовФормы.Доступность_Снять;
	УстановитьТолькоПросмотр = СвойстваЭлементовФормы.ТолькоПросмотр_Установить;
		
	Если ТипСмены  = "Описание" Тогда 
		СкрытьВидимость.Добавить("ДокументЗамены");
		СвойстваЭлементовФормы.Видимость_Установить.Добавить("ПричинаЗамены");
	Иначе	
		СкрытьВидимость.Добавить("ПричинаЗамены");
		СвойстваЭлементовФормы.Видимость_Установить.Добавить("ДокументЗамены");
	КонецЕсли;
		
	Если ВызовПриСоздании  Тогда
		
		Если Не ОтветственныеЛица.Количество() Тогда 							 
			СкрытьВидимость.Добавить("ГруппаВодители");			 
		КонецЕсли;
		
		Если Не ЕстьСтрокиТС(ЗначениеМетаданных("Saby_ВидыТС.Автомобиль")) Тогда			 
			СкрытьВидимость.Добавить("ГруппаТС");			 
		КонецЕсли;	
		
		Если Не ЕстьСтрокиТС(ЗначениеМетаданных("Saby_ВидыТС.Прицеп")) Тогда			 
			СкрытьВидимость.Добавить("ГруппаПрицепы");			 
		КонецЕсли;
		
		Если ЭтаФорма.ЗаполнениеПоДаннымПредыдущегоТитула Тогда 			
			УстановитьТолькоПросмотр.Добавить("ГруппаЗамена");			
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ЭтаФорма.ЭтоРасшифровкаИзменений Тогда
		
		СнятьДоступность.Добавить("ВыполнитьОбмен");
		СнятьДоступность.Добавить("ГруппаПереключатели");
		
		УстановитьТолькоПросмотр.Добавить("ГруппаДатаВремя");
		УстановитьТолькоПросмотр.Добавить("ГруппаЗамена");
		УстановитьТолькоПросмотр.Добавить("ГруппаТС");
		УстановитьТолькоПросмотр.Добавить("Группа_Прицепы");
		УстановитьТолькоПросмотр.Добавить("ГруппаВодители");
		УстановитьТолькоПросмотр.Добавить("ГруппаОтметкиИАкты");
		УстановитьТолькоПросмотр.Добавить("ТипСмены");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановкаСвойствЭлементов_Переадресовка(СвойстваЭлементовФормы, ВызовПриСоздании)
	
	СкрытьВидимость          = СвойстваЭлементовФормы.Видимость_Снять;
	СнятьДоступность         = СвойстваЭлементовФормы.Доступность_Снять;
	УстановитьТолькоПросмотр = СвойстваЭлементовФормы.ТолькоПросмотр_Установить;
	
	// Уведомление
	Если ЭтаФорма.ЭтоУведомление Тогда
		
		СкрытьВидимость.Добавить("ОтметкиПереадресовка");
		
		Элементы.ПереадресовкаНаОсновании.АвтоОтметкаНезаполненного = Ложь;
		
	Иначе // Переадресовка
		
		СкрытьВидимость.Добавить("ГруппаОформил");
		Если Не ЗначениеЗаполнено(Причина) Тогда
			СкрытьВидимость.Добавить("Причина");
		Иначе 
			СнятьДоступность.Добавить("Причина");
		КонецЕсли;	
				
    КонецЕсли;	
											
	АдресДоставкиЗаполнен    = ЗначениеЗаполнено(ЭтаФорма.Отправитель_АдресДоставки);
	АдресДоставкиДекорация   = "ДекорацияЗаполнитьАдресДоставки";
	АдресДоставкиОтправитель = "Отправитель_АдресДоставки";
	
	Если АдресДоставкиЗаполнен Тогда
		СкрытьВидимость.Добавить(АдресДоставкиДекорация);
		СвойстваЭлементовФормы.Видимость_Установить.Добавить(АдресДоставкиОтправитель);
	Иначе 
		СкрытьВидимость.Добавить(АдресДоставкиОтправитель);
		СвойстваЭлементовФормы.Видимость_Установить.Добавить(АдресДоставкиДекорация);
	КонецЕсли;	
	
	Если ЭтаФорма.ЭтоРасшифровкаИзменений Тогда
		
		СнятьДоступность.Добавить("ВыполнитьОбмен");
				
		СнятьДоступность.Добавить(АдресДоставкиОтправитель);
		СнятьДоступность.Добавить(АдресДоставкиДекорация);
								
		УстановитьТолькоПросмотр.Добавить(АдресДоставкиОтправитель);
		УстановитьТолькоПросмотр.Добавить("Причина");
		УстановитьТолькоПросмотр.Добавить("ГруппаОформил");
		УстановитьТолькоПросмотр.Добавить("ПереадресовкаНаОсновании");				
		УстановитьТолькоПросмотр.Добавить("ГруппаДатаВремяПереадресовка");
		УстановитьТолькоПросмотр.Добавить("ГруппаЗаменаПолучателя");
		УстановитьТолькоПросмотр.Добавить("ГруппаОтметкиПереадресовка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановкаСвойствЭлементов_ИзменениеСтоимости(СвойстваЭлементовФормы, ВызовПриСоздании)
	
	СкрытьВидимость          = СвойстваЭлементовФормы.Видимость_Снять;
	СнятьДоступность         = СвойстваЭлементовФормы.Доступность_Снять;
	УстановитьТолькоПросмотр = СвойстваЭлементовФормы.ТолькоПросмотр_Установить;
		
	Если ЭтаФорма.ТипПлательщик = "Отправитель" Тогда
		СкрытьВидимость.Добавить("ДругойПлательщикСтрокой");
		СкрытьВидимость.Добавить("ОснованиеОплаты");
	КонецЕсли;	
	
	// Режим формы: изменение стоимости/согласование стоимости 
	Если ЭтаФорма.ЭтоСогласование Тогда 		
		УстановитьТолькоПросмотр.Добавить("ГруппаИзмененияСтоимости");
		СкрытьВидимость.Добавить("РасчетныйСчетПеревозчик");
	Иначе 
				
		СкрытьВидимость.Добавить("ГруппаПлательщик");
	    СкрытьВидимость.Добавить("ОтказатьВСогласовании");
		
	КонецЕсли;
	
	ЭтоСогласованиеИОноНедоступно = ЭтаФорма.ЭтоСогласование 
		И ЭтаФорма.ДоступныеДействия <> Неопределено 
		И Не ЭтаФорма.ДоступныеДействия.СогласованиеСтоимостиДоступно;
	
	Если ЭтаФорма.ЭтоРасшифровкаИзменений Или ЭтоСогласованиеИОноНедоступно Тогда
		
		УстановитьТолькоПросмотр.Добавить("ГруппаИзмененияСтоимости");
		УстановитьТолькоПросмотр.Добавить("ГруппаПлательщик");
		
		СнятьДоступность.Добавить("ВыполнитьОбмен");
		СнятьДоступность.Добавить("ОтказатьВСогласовании");
		
		СкрытьВидимость.Добавить("РасчетныйСчетПеревозчик");
		 		
	КонецЕсли;
	
	Если ЭтаФорма.ЭтоРасшифровкаИзменений И ЭтоСогласованиеИОноНедоступно Тогда
		СкрытьВидимость.Добавить("ГруппаИзмененияСтоимости");
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти // УстановкаВидимостиПоТитулам

#Область ДанныеТитуловДляВыгрузки

&НаСервере
Функция ДанныеТитула()
	
	Если ЭтаФорма.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ЗаменаВодителяТС") Тогда
		Результат = ДанныеТитула_ЗаменаВодителяИлиТС();
	ИначеЕсли ЭтаФорма.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПереадресовкаУведомление")		
		Или ЭтаФорма.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.Переадресовка") Тогда		
		Результат = ДанныеТитула_Переадресовка();
	ИначеЕсли ЭтаФорма.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ИзменениеСтоимости")
		Или ЭтаФорма.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.СогласованиеСтоимости") Тогда
		Результат = ДанныеТитула_ИзменениеСтоимости();
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
		
	Возврат Результат;
	
КонецФункции	

&НаСервере
Функция ДанныеТитула_ЗаменаВодителяИлиТС()
	
	ТаблицыДляОтправки = ТаблицыДляОтправки();
	
	ДанныеТитула = Новый Структура;
	
	ДанныеТитула.Вставить("Ссылка",          СсылкаНаДокумент);
	ДанныеТитула.Вставить("ДатаВремяЗамены", ДатаВремяЗамены);
	
	ДанныеТитула.Вставить("ДокументЗамены", ДокументЗамены);
	ДанныеТитула.Вставить("ПричинаЗамены",  ПричинаЗамены); 
	
	Если Элементы.ЗаменаТС.Пометка Или Элементы.ЗаменаПрицепы.Пометка Тогда
		ДанныеТитула.Вставить("ТранспортныеСредства", ТаблицыДляОтправки.ТранспортныеСредства);
	Иначе
		ДанныеТитула.Вставить("ТранспортныеСредства", Новый Массив);
	КонецЕсли;
	
	Если Элементы.ЗаменаТС.Пометка Тогда
		ДанныеТитула.Вставить("ОснованиеПередачиГрузаТС", ОснованиеПередачиГрузаТС);
		ДанныеТитула.Вставить("СпецРазрешения",           ТаблицыДляОтправки.СпецРазрешения);
	Иначе
		ДанныеТитула.Вставить("ОснованиеПередачиГрузаТС", Неопределено);
		ДанныеТитула.Вставить("СпецРазрешения",           Новый Массив);
	КонецЕсли;
		
	Если Элементы.ЗаменаВодители.Пометка Тогда		
		ДанныеТитула.Вставить("Водители",     ТаблицыДляОтправки.Водители);
		ДанныеТитула.Вставить("ПутевыеЛисты", ТаблицыДляОтправки.ПутевыеЛисты);
	Иначе 
		ДанныеТитула.Вставить("Водители",     Новый Массив);
		ДанныеТитула.Вставить("ПутевыеЛисты", Новый Массив);
	КонецЕсли;

	ДанныеТитула.Вставить("Отметки", ТаблицыДляОтправки.Отметки);
	ДанныеТитула.Вставить("Акты",    ТаблицыДляОтправки.Акты);
	ДанныеТитула.Вставить("Штрафы",  Новый Массив);
	
	// Для ФЛК
	ДанныеТитула.Вставить("ТипСмены",       ТипСмены);
	ДанныеТитула.Вставить("ЗаменаТС",       Элементы.ЗаменаТС.Пометка);
	ДанныеТитула.Вставить("ЗаменаПрицепы",  Элементы.ЗаменаПрицепы.Пометка);
	ДанныеТитула.Вставить("ЗаменаВодители", Элементы.ЗаменаВодители.Пометка);
	
	Возврат ДанныеТитула;
	
КонецФункции

&НаСервере
Функция ДанныеТитула_ИзменениеСтоимости()

	ДанныеТитула = Новый Структура;
	
	ДанныеТитула.Вставить("Ссылка", ЭтаФорма.СсылкаНаДокумент);
	
	Если ЭтоСогласование Тогда
		
		ДанныеТитула.Вставить("ТипПлательщик",   ЭтаФорма.ТипПлательщик);
		ДанныеТитула.Вставить("ОснованиеОплаты", ЭтаФорма.ОснованиеОплаты);
				
		ДанныеТитула.Вставить("БанкБИК",       ЭтаФорма.БанкБИК);
		ДанныеТитула.Вставить("БанкКоррСчет",  ЭтаФорма.БанкКоррСчет);
		ДанныеТитула.Вставить("НомерСчета",    ЭтаФорма.НомерСчета);
		ДанныеТитула.Вставить("БанкНазвание",  ЭтаФорма.БанкНазвание);
		
		ДанныеТитула.Вставить("Сумма", Сумма);
		
	Иначе
		
		ЗначениеСтавки = ЗначениеСтавки(ЭтаФорма.Ставка); 
		
		СтоПроцентов = 100;		
		Если ЗначениеЗаполнено(ЗначениеСтавки) Тогда 
			СуммаБезНДС = Окр(Сумма / (1 + ЗначениеСтавки / СтоПроцентов), 2, РежимОкругления.Окр15как20);			
			СуммаНДС    = Сумма - СуммаБезНДС;
		Иначе 
			СуммаБезНДС = Сумма;
			СуммаНДС    = 0;			
		КонецЕсли;
							
		ДанныеТитула.Вставить("Сумма",       ЭтаФорма.Сумма);
		ДанныеТитула.Вставить("Ставка",      ЭтаФорма.Ставка);
		ДанныеТитула.Вставить("СуммаНДС",    СуммаНДС);
		ДанныеТитула.Вставить("СуммаБезНДС", СуммаБезНДС);
		ДанныеТитула.Вставить("Условия",     ЭтаФорма.Условия);
		
		ДанныеТитула.Вставить("БанкБИКПеревозчик",       ЭтаФорма.БанкБИКПеревозчик);
		ДанныеТитула.Вставить("БанкКоррСчетПеревозчик",  ЭтаФорма.БанкКоррСчетПеревозчик);
		ДанныеТитула.Вставить("НомерСчетаПеревозчик",    ЭтаФорма.НомерСчетаПеревозчик);			
		ДанныеТитула.Вставить("БанкНазваниеПеревозчик",  ЭтаФорма.БанкНазваниеПеревозчик);
	
	КонецЕсли;
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	НаименованиеОтправителя = МодульТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(
		ЭтаФорма.ДанныеЮрЛиц, "Отправитель").НаименованиеОрганизации;
	ДанныеТитула.Вставить("Отправитель", НаименованиеОтправителя);
		
	НаименованиеПеревозчика = МодульТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(
		ЭтаФорма.ДанныеЮрЛиц, "Перевозчик").НаименованиеОрганизации;
	ДанныеТитула.Вставить("Перевозчик", НаименованиеПеревозчика);
		
	НаименованиеПлательщика = МодульТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(
		ЭтаФорма.ДанныеЮрЛиц, "ПустаяСсылка").НаименованиеОрганизации;
	ДанныеТитула.Вставить("Плательщик", НаименованиеПлательщика);
	
	// Для совместимости ФЛК
	ДанныеТитула.Вставить("Отметки", Новый Массив);
	ДанныеТитула.Вставить("Акты",    Новый Массив);
	ДанныеТитула.Вставить("Штрафы",  Новый Массив);
	
	Возврат ДанныеТитула;
	
КонецФункции

&НаСервере
Функция ДанныеТитула_Переадресовка()
	
	ТаблицыДляОтправки = ТаблицыДляОтправки();
	
	ДанныеТитула = Новый Структура;
	
	ДанныеТитула.Вставить("Ссылка",                    ЭтаФорма.СсылкаНаДокумент);
	ДанныеТитула.Вставить("ИмяМетаданных",             "Saby_ТранспортнаяНакладная");
	ДанныеТитула.Вставить("Отправитель_АдресДоставки", ЭтаФорма.Отправитель_АдресДоставки);
	ДанныеТитула.Вставить("АдресДоставкиЗначение",     ЭтаФорма.АдресДоставкиЗначение);
	
	ДанныеТитула.Вставить("Отправитель_ДоставитьДо", ЭтаФорма.Отправитель_ДоставитьДо);
	ДанныеТитула.Вставить("Выгрузка_ДатаВремя",      ЭтаФорма.Отправитель_ДоставитьДо);
	ДанныеТитула.Вставить("Переадресовка_ДатаВремя", ТекущаяДатаСеанса());
	
	ДанныеПолучатель = Неопределено;
	Если ЗначениеЗаполнено(ЭтаФорма.ПолучательСтрокой) Тогда
				
		ДанныеТитула.Вставить("КонтактныеДанные", ТаблицыДляОтправки.КонтактныеДанные);
		ДанныеТитула.Вставить("ДанныеЮрЛиц",      ТаблицыДляОтправки.ДанныеЮрЛиц);
		
		ДанныеПолучатель = МодульКода("Saby_ТНВыгрузкаСервер").ДанныеЮрЛица("Получатель", ДанныеТитула, Истина);
				
	Иначе
		
		ДанныеТитула.Вставить("КонтактныеДанные", Неопределено);
		ДанныеТитула.Вставить("ДанныеЮрЛиц",      Неопределено);
		
	КонецЕсли;
	
	ДанныеТитула.Вставить("Получатель",               ДанныеПолучатель);	
	ДанныеТитула.Вставить("Причина",                  Причина);
	ДанныеТитула.Вставить("ПереадресовкаНаОсновании", ПереадресовкаНаОсновании);
	
	ДанныеТитула.Вставить("Отметки", ТаблицыДляОтправки.Отметки);
	ДанныеТитула.Вставить("Акты",    Новый Массив);
	ДанныеТитула.Вставить("Штрафы",  Новый Массив);
	
	ДанныеТитула.Вставить("ОформилСтруктура", ЭтотОбъект.ОформилСтруктура);
	
	Возврат ДанныеТитула;
	
КонецФункции

#КонецОбласти // ДанныеТитуловДляВыгрузки

&НаКлиенте
Процедура ОтказатьВСогласованииПослеВводаПричины(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПричины = СокрЛП(Результат);
	Если ЗначениеЗаполнено(ЗначениеПричины) Тогда
		ЭтаФорма.Причина = ЗначениеПричины;
	Иначе
		ТаблицаОшибок.Очистить();
		СтрокаОшибки = ТаблицаОшибок.Добавить();
		СтрокаОшибки.Ошибка = "При отказе необходимо обязательно заполнить причину.";
		ВыполнитьНаСервере("Saby_ТНОбщегоНазначенияСервер.ОбновитьВнешнийВидЭлементовОшибок", ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОтказВСогласовании", Истина);
	ДополнительныеПараметры.Вставить("ПричинаОтказа",      ЭтаФорма.Причина);
	
	ВыполнитьОбмен(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСменыПриИзменении(Элемент)
	
	ОбновитьВидимостьИДоступностьЭлементов();
	
	Если Элементы.ГруппаОшибки.Видимость Тогда
		ОбновитьДанныеПоОшибкамНаКлиенте(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЭлементовПоВидамЗамены()
	
	Элементы.ГруппаВодители.Видимость = Элементы.ЗаменаВодители.Пометка;
	Элементы.ГруппаТС.Видимость       = Элементы.ЗаменаТС.Пометка;
	Элементы.ГруппаПрицепы.Видимость  = Элементы.ЗаменаПрицепы.Пометка;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьШрифтКнопки(Кнопка) 
	
	Если Кнопка.Пометка Тогда		
		Кнопка.Шрифт = ОбщегоНазначенияВызовСервера.ШрифтСтиля("ВажнаяНадписьШрифт");		
	Иначе 		
		Кнопка.Шрифт = ОбщегоНазначенияВызовСервера.ШрифтСтиля("ОбычныйШрифтТекста");
	КонецЕсли;
	
КонецПроцедуры

#Область Отметки

&НаКлиенте
Процедура ОтметкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	РедактированиеОтметок("Отметки", НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиПриАктивизацииСтроки(Элемент)
	
	ОбработкаАктивизацииСтрокиОтметки();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизацииСтрокиОтметки()
	
	ТекущиеДанные = Элементы.Отметки.ТекущиеДанные;
			
	СтруктураПоиска = Новый Структура;
	Если ТекущиеДанные = Неопределено Тогда
		СтруктураПоиска.Вставить("КлючСтроки_Отметки", 0);			
	Иначе
		СтруктураПоиска.Вставить("КлючСтроки_Отметки", ТекущиеДанные.КлючСтроки);
	КонецЕсли;
	
	Отбор = Новый ФиксированнаяСтруктура(СтруктураПоиска);
	Элементы.Акты.ОтборСтрок = Отбор;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбработкаАктивизацииСтрокиОтметки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Отметки.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		ТекДанные = Отметки.НайтиПоИдентификатору(ИдСтроки);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			УдаляемыеКлючи_Отметки.Добавить(ТекДанные.КлючСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("УдалитьСвязанныеСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВводаСтроки(ИмяТЧ, Отказ)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрана строка в основной таблице " + ИмяТЧ;
		// Сообщение.Поле  = "";
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура АктыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Отметки", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура АктыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не Копирование  Тогда 
		ДобавитьКлючСвязиСтроки("Акты", "Отметки", Элемент.ТекущаяСтрока, НоваяСтрока);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // Отметки

#Область ПутевыеЛисты

&НаКлиенте
Процедура Водители_УстановитьОтборПоВсемСвязаннымТаблицам()
	
    ТекущиеДанные = Элементы.Водители.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСтроки_ОтветственныеЛица", ТекущиеДанные.КлючСтроки);
		
		Отбор = Новый ФиксированнаяСтруктура(СтруктураПоиска);		
		Элементы.ПутевыеЛисты.ОтборСтрок = Отбор;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПроверкаВозможностиВводаСтроки("Водители", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не Копирование Тогда
		ДобавитьКлючСвязиСтроки(Элемент.Имя, "Водители", Элемент.ТекущаяСтрока, НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПутевыеЛисты 

#Область КлючиСтрок

&НаСервере
Процедура МаксимальныеКлючиСтрок()
	
	ИмяКолонки = "КлючСтроки";
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить("Отметки");
    МассивТаблиц.Добавить("ОтветственныеЛица");
	
	Для Каждого ИмяТЧ Из МассивТаблиц Цикл 
		
		ИмяКлюча = "МаксимальныйКлючСтроки_" + ИмяТЧ;
		
		Если ЭтаФорма[ИмяТЧ].Количество() = 0 Тогда
			ЭтаФорма[ИмяКлюча] = 0;		
		Иначе 	
			
			СписокКлючей = Новый СписокЗначений;	
			СписокКлючей.ЗагрузитьЗначения(ЭтаФорма[ИмяТЧ].Выгрузить(, ИмяКолонки).ВыгрузитьКолонку(ИмяКолонки)); 			
			СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);   
			
			ЭтаФорма[ИмяКлюча] = СписокКлючей[0].Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция НовыйКлючСтроки(ИмяТЧ)
	
	// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
	// рассчитывается от максимального существующего значения.	
	ИмяКлюча = "МаксимальныйКлючСтроки_" + ИмяТЧ;	
	
	ЭтаФорма[ИмяКлюча] = ЭтаФорма[ИмяКлюча] + 1;						
	Возврат ЭтаФорма[ИмяКлюча];
			
КонецФункции

&НаКлиенте
Процедура ДобавитьКлючСвязиСтроки(ИмяТЧ, ИсходнаяТЧ, НомерСтроки, НоваяСтрока)
	
	Если Не НоваяСтрока Тогда 
		Возврат;
	КонецЕсли;
	
	// Проверка корректности номера строки 
	// При удалении строк расходится номер строки и индекс. Индекс сдвигается, а номер строки только увеличивается 
	Если НомерСтроки >= ЭтаФорма[ИмяТЧ].Количество() Тогда 
		
		// считаем что новая строка это самая последняя в таблице		
		НовыйНомерСтроки = ЭтаФорма[ИмяТЧ].Количество() - 1;		
		ТекущиеДанные    = ЭтаФорма[ИмяТЧ][НовыйНомерСтроки];
		
	Иначе
		ТекущиеДанные = ЭтаФорма[ИмяТЧ][НомерСтроки];
	КонецЕсли;
			
	ТекущиеДанныеИсходнойТЧ = Элементы[ИсходнаяТЧ].ТекущиеДанные;
	
	КлючСтроки = ТекущиеДанныеИсходнойТЧ.КлючСтроки;
	
	Если ИсходнаяТЧ = "Водители" Тогда
		ИмяКлюча = "КлючСтроки_ОтветственныеЛица";
	Иначе
		ИмяКлюча = "КлючСтроки_" + ИсходнаяТЧ;
	КонецЕсли;
	
	Если ТекущиеДанные[ИмяКлюча] <> КлючСтроки Тогда 		
		ТекущиеДанные[ИмяКлюча] = КлючСтроки;		
	КонецЕсли;
		
КонецПроцедуры

// ПодключаемыеОбработчики
&НаКлиенте
Процедура УдалитьСвязанныеСтроки()
	
	УдалитьСвязанныеЗаписиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеЗаписиНаСервере()
	
	ВидыУдаляемыхСтрок = Новый Структура; 
		
	// Отметки
	КлючиОтметки = Новый Структура;
	КлючиОтметки.Вставить("Список",     УдаляемыеКлючи_Отметки);
	КлючиОтметки.Вставить("ИмяКолонки", "Отметки"); 

	ВидыУдаляемыхСтрок.Вставить("Акты",   КлючиОтметки);
	
	// Водители  
	КлючиВодители = Новый Структура;
	КлючиВодители.Вставить("Список",     УдаляемыеКлючи_ОтветственныеЛица);
	КлючиВодители.Вставить("ИмяКолонки", "ОтветственныеЛица"); 
	
	ВидыУдаляемыхСтрок.Вставить("ПутевыеЛисты", КлючиВодители);
	
	Для Каждого ВидУдаляемыхСтрок Из ВидыУдаляемыхСтрок Цикл
		
		ИмяТабличнойЧасти 		= ВидУдаляемыхСтрок.Ключ;
		СписокУдаленныхКлючей 	= ВидУдаляемыхСтрок.Значение.Список;
		КлючСтроки              = "КлючСтроки_" + ВидУдаляемыхСтрок.Значение.ИмяКолонки;
		
		Для Каждого СтрокаКлюча Из СписокУдаленныхКлючей Цикл
								
			КлючПоиска = Новый Структура(КлючСтроки, СтрокаКлюча.Значение); 
			
			МассивСтрокТовары = ЭтаФорма[ИмяТабличнойЧасти].НайтиСтроки(КлючПоиска);
			
			Для Каждого СтрокаТЧ Из МассивСтрокТовары Цикл
				ЭтаФорма[ИмяТабличнойЧасти].Удалить(СтрокаТЧ);
			КонецЦикла; 
			
		КонецЦикла;
	КонецЦикла; 
	
    // сбросим списки в начальное состояние
	УдаляемыеКлючи_Отметки.Очистить();
	УдаляемыеКлючи_ОтветственныеЛица.Очистить();
	
КонецПроцедуры

#КонецОбласти // КлючиСтрок

&НаСервере
Функция ТаблицыДляОтправки()
	
	ОтборПоРоли = Новый Структура;
	ОтборПоРоли.Вставить("Роль", ЗначениеМетаданных("Saby_РолиОтветственных.Водитель"));
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить(
		"СпецРазрешения",
		МодульТНОбщегоНазначенияСервер.ТаблицаЗначенийВМассивЭПД(ЭтотОбъект.СпецРазрешения.Выгрузить()));
	РезультатФункции.Вставить(
		"ТранспортныеСредства",
		МодульТНОбщегоНазначенияСервер.ТаблицаЗначенийВМассивЭПД(ЭтотОбъект.ТранспортныеСредства.Выгрузить()));
	РезультатФункции.Вставить(
		"ПутевыеЛисты",
		МодульТНОбщегоНазначенияСервер.ТаблицаЗначенийВМассивЭПД(ЭтотОбъект.ПутевыеЛисты.Выгрузить()));
	РезультатФункции.Вставить(
		"Отметки",
		МодульТНОбщегоНазначенияСервер.ТаблицаЗначенийВМассивЭПД(ЭтотОбъект.Отметки.Выгрузить()));
	РезультатФункции.Вставить(
		"Акты",
		МодульТНОбщегоНазначенияСервер.ТаблицаЗначенийВМассивЭПД(ЭтотОбъект.Акты.Выгрузить()));
	РезультатФункции.Вставить(
		"КонтактныеДанные",
		МодульТНОбщегоНазначенияСервер.ТаблицаЗначенийВМассивЭПД(ЭтотОбъект.КонтактныеДанные.Выгрузить()));
	РезультатФункции.Вставить(
		"ДанныеЮрЛиц",
		МодульТНОбщегоНазначенияСервер.ТаблицаЗначенийВМассивЭПД(ЭтотОбъект.ДанныеЮрЛиц.Выгрузить()));
	
	Водители = ЭтотОбъект.ОтветственныеЛица.Выгрузить(ОтборПоРоли);
	Водители.Колонки.Удалить("ВУ");
	Водители.Колонки.Удалить("ФИО");
	РезультатФункции.Вставить("Водители", МодульТНОбщегоНазначенияСервер.ТаблицаЗначенийВМассивЭПД(Водители));
	
	Возврат РезультатФункции;
	
КонецФункции

#Область ОбработкаОшибок

&НаКлиенте
Процедура ОбновитьДанныеПоОшибкамНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьДанныеПоОшибкамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоОшибкамНаСервере(Знач Ошибки = Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Этап",                    СокрЛП(ЭтотОбъект.ТипТитула));
	ДополнительныеПараметры.Вставить("Ссылка",                  СсылкаНаДокумент);
	ДополнительныеПараметры.Вставить("ПроверятьПоляСОХ",        Ложь);
	ДополнительныеПараметры.Вставить("ПроверятьПоляОтгрузчика", Ложь);
	
	Если Ошибки = Неопределено Тогда
		ДополнительныеПараметры.Вставить("ДанныеДокумента", ДанныеТитула());
	КонецЕсли;
	
	МодульКода("Saby_ТНОбщегоНазначенияСервер").ОбновитьОшибки(
		ЭтаФорма,
		ДополнительныеПараметры,
		Ошибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтметокПоТипу(ИдентификаторСтроки) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать() Экспорт
	
	ЭтаФорма.Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДекорациюНаСервере(Знач ПараметрыВыделенияДекорации) Экспорт
	
	МодульКода("Saby_ТНОбщегоНазначенияСервер").ОбновитьДекорацию(ЭтаФорма, ПараметрыВыделенияДекорации);
	
КонецПроцедуры

#КонецОбласти // ОбработкаОшибок

#Область ТС

&НаКлиенте
Процедура ПослеОбновленияДанныхТранспортныхСредств(Результат, ДополнительныеПараметры) Экспорт
	
	ПослеОбновленияДанныхТранспортныхСредствНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбновленияДанныхТранспортныхСредствНаСервере()
	
	МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ОбновитьТранспортныеСредстваНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ЕстьСтрокиТС(Вид)
	
	РезультатФункции = Ложь;
	
	Для Каждого СтрокаТС Из ЭтаФорма.ТранспортныеСредства Цикл
		Если СтрокаТС.Вид = Вид Тогда
			РезультатФункции = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ТС

#Область Водители

&НаКлиенте
Процедура ВодителиПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Водители.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		ТекДанные = ОтветственныеЛица.НайтиПоИдентификатору(ИдСтроки);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			УдаляемыеКлючи_ОтветственныеЛица.Добавить(ТекДанные.КлючСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("УдалитьСвязанныеСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		
		ТекДанные = Элементы.Водители.ТекущиеДанные;		
		ТекДанные.КлючСтроки = НовыйКлючСтроки("ОтветственныеЛица");
		
		// Переустановим отбор
		Водители_УстановитьОтборПоВсемСвязаннымТаблицам();
		
		Для Каждого СтруктураОтбора Из Элемент.ОтборСтрок Цикл
			Элемент.ТекущиеДанные[СтруктураОтбора.Ключ] = СтруктураОтбора.Значение;
		КонецЦикла;
		
		СтруктураОтветственного = МодульКодаКлиент("Saby_ТНОбщегоНазначенияСервер").СтруктураОтветственного(
			ЭтаФорма.ОтветственныеЛица, "", Элемент.ТекущаяСтрока);
		
		МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").НачатьРедактированиеОтветственногоЛица(
			ЭтаФорма, СтруктураОтветственного, "Водитель");
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ВодителиПриАктивизацииСтроки(Элемент)
	
	Водители_УстановитьОтборПоВсемСвязаннымТаблицам();

КонецПроцедуры

&НаКлиенте
Процедура ВодителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтветственного = МодульКодаКлиент("Saby_ТНОбщегоНазначенияСервер").СтруктураОтветственного(
		ЭтаФорма.ОтветственныеЛица, "", ВыбраннаяСтрока);
	СтруктураОтветственного.Вставить("ТолькоПросмотр", ЭтаФорма.ЭтоРасшифровкаИзменений);
	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").НачатьРедактированиеОтветственногоЛица(
		ЭтаФорма, СтруктураОтветственного, "Водитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДанныеВодителя()
	
	ТекущиеДанные  = Элементы.Водители.ТекущиеДанные;
		
	ПараметрыФормы = МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").СтрокаТаблицыФормыВСтруктуру(
		ЭтаФорма, "Водители", ТекущиеДанные);
		
	// если это просмотр отправленного титула
	ЭтоРасшифровка = ЭтаФорма.ЭтоРасшифровкаИзменений;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтоРасшифровка);
	ПараметрыФормы.Вставить("Наименование",   "Водитель");
	ПараметрыФормы.Вставить("РольСтрокой",    "Водитель");
	
	ИмяОповещения = "ПослеВводаДанныхВодителя";	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиент").ИзменитьДанныеВодителяОтветственногоЛица(
		ЭтаФорма, ПараметрыФормы, ИмяОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДанныхВодителя(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда 
		
		ТекущиеДанные = Элементы.Водители.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, РезультатЗакрытия);
		
	КонецЕсли;	
	
	СформироватьНадписьВодителейСтрокой();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНадписьВодителейСтрокой()
		
	Массив = Новый Массив;
	Для Каждого Строка Из ЭтаФорма.Водители Цикл 
		
		Если ЗначениеЗаполнено(Строка.ФИО) Тогда
			Массив.Добавить(СокрЛП(Строка.ФИО));
		КонецЕсли;
				
	КонецЦикла;
	
	Если Массив.Количество() Тогда 
		ЭтаФорма.ВодителиСтрокой = СтрСоединить(Массив, ", ");
	Иначе 
		ЭтаФорма.ВодителиСтрокой = "Заполнить";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВодителиПослеУдаления(Элемент)
	
	МодульКодаКлиент("Saby_ТНОбщегоНазначенияКлиентСервер").ОбновитьВодителейНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ЭтаФорма.ТекущийЭлемент = Элементы.Водители;
	
КонецПроцедуры

#КонецОбласти // Водители

&НаКлиенте
Процедура РедактированиеОтметок(ТаблицаИмя, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекДанные = Элементы[ТаблицаИмя].ТекущиеДанные;
		
		Если ТаблицаИмя = "Отметки" Тогда
			
			ТекДанные.КлючСтроки = НовыйКлючСтроки("Отметки");
			Этап = "ЗаменаВодителяТС";
			
		Иначе			
			Этап = "Переадресовка";			
		КонецЕсли;	
				
		Если Не Копирование Тогда 
			ТекДанные.ДатаВремя = ОбщегоНазначенияКлиент.ДатаСеанса();
			ТекДанные.Этап      = ЗначениеМетаданных("Saby_ТипТитулаЭтрН." + Этап);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьВидимостьИДоступностьЭлементовНаКлиенте() Экспорт
	ОбновитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура РасчетКоличестваСпецРазрешений()
	
	ЭтаФорма.СпецРазрешенияКоличество = ЭтаФорма.СпецРазрешения.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыСчета(Знач РасчетныйСчетИсточник, Знач ТипРеквизитов = "")
	
	Если Не ЗначениеЗаполнено(РасчетныйСчетИсточник) Тогда
		ЭтаФорма["БанкНазвание" + ТипРеквизитов] = "";
		ЭтаФорма["БанкБИК"      + ТипРеквизитов] = "";
		ЭтаФорма["БанкКоррСчет" + ТипРеквизитов] = "";
		ЭтаФорма["НомерСчета"   + ТипРеквизитов] = "";
		Возврат;
	КонецЕсли;
	
	РеквизитыСчета = РеквизитыБанковскогоСчета(РасчетныйСчетИсточник);
	
	ЭтаФорма["БанкНазвание" + ТипРеквизитов] = РеквизитыСчета.Банк;
	ЭтаФорма["БанкБИК"      + ТипРеквизитов] = РеквизитыСчета.БИК;
	ЭтаФорма["БанкКоррСчет" + ТипРеквизитов] = РеквизитыСчета.КоррСчет;
	ЭтаФорма["НомерСчета"   + ТипРеквизитов] = РеквизитыСчета.НомерСчета;
	
КонецПроцедуры

&НаСервере
// Данные банковского счета по ссылке
// Параметры:
//	БанковскийСчет - СправочникСсылка.БанковскиеСчетаКонтрагентов - счет для получения данных расч. счета контрагента
//	               - СправочникСсылка.БанковскиеСчетаОрганизаций - счет для получения данных расч. счета организации
//                 - СправочникСсылка.БанковскиеСчета - счет для получения данных 
//	                 (в некоторых конфигурация справочник единый)
//
// Возвращаемое значение:
//	Структура - реквизиты счета
//
Функция РеквизитыБанковскогоСчета(Знач БанковскийСчет)
	
	СтруктураСчета = Новый Структура;
	СтруктураСчета.Вставить("Банк",       "");
	СтруктураСчета.Вставить("БИК",        "");
	СтруктураСчета.Вставить("НомерСчета", "");
	СтруктураСчета.Вставить("КоррСчет",   "");
		
	ЕстьСправочникБанкСчета = Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено;
		 
	Если ЕстьСправочникБанкСчета Тогда 
		
		// нет корр счета в стандратном получении данных счета	
		РеквизитыСчета = МодульКода("Saby_ТНОбщегоНазначенияСервер").ЗначенияРеквизитовОбъекта(
			БанковскийСчет, "НомерСчета, Банк.Наименование, Банк.Код, Банк.КоррСчет");
		
		Если ЗначениеЗаполнено(РеквизитыСчета) Тогда
			
			СтруктураСчета.Банк       = РеквизитыСчета.БанкНаименование;
			СтруктураСчета.БИК        = РеквизитыСчета.БанкКод;
			СтруктураСчета.НомерСчета = РеквизитыСчета.НомерСчета;
			СтруктураСчета.КоррСчет   = РеквизитыСчета.БанкКоррСчет;
			
		КонецЕсли;		
		
	Иначе 
		
		ЗаполнитьДанныеБанковскогоСчета(БанковскийСчет, СтруктураСчета);
						
	КонецЕсли;	
	
	Возврат СтруктураСчета;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеБанковскогоСчета(БанковскийСчет, СтруктураСчета)
	
	Если ТипЗнч(БанковскийСчет) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда 
		
		ИмяСправочника = "БанковскиеСчетаОрганизаций";
		РеквизитыСчета = Справочники[ИмяСправочника].ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет); 
		
	Иначе 
		
		ИмяСправочника = "БанковскиеСчетаКонтрагентов";
		РеквизитыСчета = Справочники[ИмяСправочника].ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыСчета) Тогда
		
		Если РеквизитыСчета.Свойство("БИКБанка") Тогда 
			ИмяБик = "БИКБанка"; 
		Иначе 
			ИмяБик = "БИК";
		КонецЕсли;
		
		Если РеквизитыСчета.Свойство("НаименованиеБанка") Тогда 
			ИмяБанка = РеквизитыСчета.НаименованиеБанка; 
		Иначе 
			ИмяБанка = СокрЛП(РеквизитыСчета.Банк);
		КонецЕсли;
		
		СтруктураСчета.Банк          = ИмяБанка;
		СтруктураСчета.БИК           = РеквизитыСчета[ИмяБик];
		СтруктураСчета.НомерСчета    = РеквизитыСчета.НомерСчета;
		СтруктураСчета.КоррСчет = РеквизитыСчета.КоррСчет;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ТипПлательщикПриИзмененииНаСервере()
	
	МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").УдалитьСтрокиПоРоли(ЭтаФорма.ДанныеЮрЛиц, "ПустаяСсылка");
	ЭтаФорма.ДругойПлательщикСтрокой = "Заполнить";
	
	Если ЭтаФорма.ТипПлательщик = "Отправитель" Тогда
		
		СтруктураПлательщика = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ДанныеЮрЛицаПоРоли(
			ЭтаФорма.ДанныеЮрЛиц, "Отправитель");
		СтрокаПлательщика = ЭтаФорма.ДанныеЮрЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлательщика, СтруктураПлательщика);
		СтрокаПлательщика.Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов.ПустаяСсылка");
		
		ЭтаФорма.РасчетныйСчет = РасчетныйСчетПоУмолчанию(СтрокаПлательщика);
		
	Иначе
		
		ЭтаФорма.РасчетныйСчет = Неопределено;
		
	КонецЕсли;
	
	ЗаполнитьРеквизитыСчета(ЭтаФорма.РасчетныйСчет);
	
	ДругойПлательщик = ЭтаФорма.ТипПлательщик = "ДругоеЮрЛицо";
	
	Элементы.ДругойПлательщикСтрокой.Видимость = ДругойПлательщик;
	Элементы.ОснованиеОплаты.Видимость         = ДругойПлательщик;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияОтветственногоЛицаНаФорме(СтруктураОтветственногоЛица) Экспорт
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипыРеквизитов()
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	ТипСтрокаДокумент = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(128));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить("Справочники.Saby_ДокументыЭПД");
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.АктыДокумент);
	МассивЭлементов.Добавить(Элементы.ДокументЗамены);
	МассивЭлементов.Добавить(Элементы.ОснованиеОплаты);
	МассивЭлементов.Добавить(Элементы.ОснованиеПередачиГрузаТС);
	МассивЭлементов.Добавить(Элементы.ПереадресовкаНаОсновании);
	МассивЭлементов.Добавить(Элементы.ПутевыеЛистыДокумент);
	
	Для Каждого ЭлементФормы Из МассивЭлементов Цикл
		МодульТНОбщегоНазначенияСервер.УстановитьОграниченияТипов(ЭлементФормы, МассивТипов, ТипСтрокаДокумент);
		Если ЭлементФормы.ОграничениеТипа.СодержитТип(Тип("Строка")) Тогда
			ЭлементФормы.КнопкаВыбора   = Истина;
			ЭлементФормы.КнопкаОткрытия = Истина;
			ЭлементФормы.КнопкаОчистки  = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ИмяОтбораТип = "Отбор.Тип";
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора(ИмяОтбораТип, ЗначениеМетаданных("Saby_ТипыДокумента.АктКоммерческий")));
	МодульТНОбщегоНазначенияСервер.УстановитьПараметрыВыбора(Элементы.АктыДокумент, ПараметрыВыбора);
	
	ПараметрыВыбора.Очистить();
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора(ИмяОтбораТип, ЗначениеМетаданных("Saby_ТипыДокумента.КТранспортнойНакладной")));
	МодульТНОбщегоНазначенияСервер.УстановитьПараметрыВыбора(Элементы.ДокументЗамены, ПараметрыВыбора);
	
	ПараметрыВыбора.Очистить();
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора(ИмяОтбораТип, ЗначениеМетаданных("Saby_ТипыДокумента.ОснованиеОплатыПеревозки")));
	МодульТНОбщегоНазначенияСервер.УстановитьПараметрыВыбора(Элементы.ОснованиеОплаты, ПараметрыВыбора);
	
	ПараметрыВыбора.Очистить();
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора(ИмяОтбораТип, ЗначениеМетаданных("Saby_ТипыДокумента.ПередачиЦенностей")));
	МодульТНОбщегоНазначенияСервер.УстановитьПараметрыВыбора(Элементы.ОснованиеПередачиГрузаТС, ПараметрыВыбора);
	МодульТНОбщегоНазначенияСервер.УстановитьПараметрыВыбора(Элементы.ПереадресовкаНаОсновании, ПараметрыВыбора);
	
	ПараметрыВыбора.Очистить();
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора(ИмяОтбораТип, ЗначениеМетаданных("Saby_ТипыДокумента.ПутевойЛист")));
	МодульТНОбщегоНазначенияСервер.УстановитьПараметрыВыбора(Элементы.ПутевыеЛистыДокумент, ПараметрыВыбора);
	
КонецПроцедуры

#Область include_etrn_base_Document_ТранспортнаяНакладная_DocumentForm_ФормаДинамическихТитулов_СлужебныеПроцедурыИФункции
#КонецОбласти // include_etrn_base_Document_ТранспортнаяНакладная_DocumentForm_ФормаДинамическихТитулов_СлужебныеПроцедурыИФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
