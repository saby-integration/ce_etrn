
#Область ПрограммныйИнтерфейс

// Возвращает массив типов доступных для заполнения на основании.
//
// Параметры:
//  ЗначенияПоУмолчанию - Булево - признак получения типов по умолчанию
//
// Возвращаемое значение:
//   Массив - массив типов выбранных для заполнения на основании.
//
Функция ТипыДляЗаполненияНаОсновании(ЗначенияПоУмолчанию = Ложь) Экспорт
	
	Если Не ЗначенияПоУмолчанию Тогда
		РезультатФункции = ПользовательскиеТипыДляЗаполненияНаОсновании();
	Иначе
		РезультатФункции = Неопределено;
	КонецЕсли;
	
	Если РезультатФункции = Неопределено Тогда
		РезультатФункции = ТипыПоУмолчаниюДляЗаполненияНаОсновании();
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Сохраняет выбранные типы документов для заполнения на основании выбранные пользователем.
//
// Параметры:
//  МассивТипов - Массив - массив типов
//
Процедура СохранитьВыбранныеТипыДляЗаполненияНаОсновании(МассивТипов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеОбщихНастроек.Сохранить("Saby", "ТипыДляЗаполненияНаОснованииДокументаТРН", МассивТипов);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает структуру реквизитов документа, относящиеся титулу
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.Saby_ПутевойЛист - ссылка на документ
//  ТипТитула - ПеречислениеСсылка.Saby_ТипТитулаЭПЛ - ссылка на тип титула
//
// Возвращаемое значение:
//   Структура - структура полученных данных документа
//
Функция ДанныеДокумента(СсылкаНаДокумент, ТипТитула) Экспорт
	
	ТипыТитулов = МодульКода("Saby_ТНОбщегоНазначенияСервер").ВсеЗначенияПеречисления("Saby_ТипТитулаЭтрН");
	
	Если Не ЗначениеЗаполнено(ТипТитула) Или ТипТитула = ТипыТитулов["Погрузка"] Тогда
		
		Возврат ВыгрузкаДанныеПогрузка(СсылкаНаДокумент);
		
	ИначеЕсли ТипТитула = ТипыТитулов["ПолучениеГруза"] Тогда
		
		Возврат ВыгрузкаДанныеПолучениеГруза(СсылкаНаДокумент);
		
	ИначеЕсли ТипТитула = ТипыТитулов["ПриемкаГруза"] Тогда
		
		Возврат ВыгрузкаДанныеПриемкаГруза(СсылкаНаДокумент);
		
	ИначеЕсли ТипТитула = ТипыТитулов["ВыдачаГруза"] Тогда
		
		Возврат ВыгрузкаДанныеВыдачаГруза(СсылкаНаДокумент);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Добавляет данные титулов для выгрузки на онлайн
//
// Параметры:
//  ТекущийЭтап - ПеречислениеСсылка.Saby_ТранспортнаяНакладная - тип текущего титула
//  ДанныеТитула - Структура - структура реквизитов и таблиц документа для выгрузки
//
// Возвращаемое значение:
//   Структура - структура титула для отправки
//
Функция ВложениеНаВыгрузку(ТекущийЭтап, ДанныеТитула) Экспорт
	
	ТипыТитулов = МодульКода("Saby_ТНОбщегоНазначенияСервер").ВсеЗначенияПеречисления("Saby_ТипТитулаЭтрН");
	
	Если Не ЗначениеЗаполнено(ТекущийЭтап) Или ТекущийЭтап = ТипыТитулов["Погрузка"] Тогда
		
		СтруктураВложения = ТитулПогрузка(ДанныеТитула);
				
	ИначеЕсли ТекущийЭтап = ТипыТитулов["ПолучениеГруза"] Тогда
		
		СтруктураВложения = ТитулПолучениеГруза(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов["ПриемкаГруза"] Тогда
		
		СтруктураВложения = ТитулПриемкаГруза(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов["ВыдачаГруза"] Тогда
		
		СтруктураВложения = ТитулВыдачаГруза(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов["Переадресовка"] Тогда	
		
		СтруктураВложения = ТитулПереадресовка(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов["ПереадресовкаУведомление"] Тогда
		
		СтруктураВложения = ТитулУведомлениеОПереадресовке(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов["ЗаменаВодителяТС"] Тогда
		
		СтруктураВложения = ТитулЗаменаВодителя(ДанныеТитула);
		
	ИначеЕсли ТекущийЭтап = ТипыТитулов["ИзменениеСтоимости"] Тогда
		
		СтруктураВложения = ТитулИзменениеСтоимости(ДанныеТитула);

	ИначеЕсли ТекущийЭтап = ТипыТитулов["СогласованиеСтоимости"] Тогда
		
		СтруктураВложения = ТитулСогласованиеСтоимости(ДанныеТитула);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПредставленияТитула = МодульКода("Saby_ТНОбщегоНазначенияСервер").РезультатФункцииТитулов(
		"Saby_ТранспортнаяНакладная", "ПредставленияТитула", ТекущийЭтап);
	
	Структура = Новый Структура;
	Структура.Вставить("Титул",    ПредставленияТитула.КодТитула);
	Структура.Вставить("Вложение", СтруктураВложения);
		
	Возврат Структура;

КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает параметры для выполнения ФЛК
//
// Параметры:
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//
// Возвращаемое значение:
//   Структура - структура данных для дальнейшей проверки реквизитов
//
Функция ПараметрыПроверкиРеквизитов(ДанныеДокумента, ПараметрыВыгрузки) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ПроверяемыеРеквизиты", Новый Массив);
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	ТекущийЭтап = ПараметрыВыгрузки.ТипТитула;
	
	ТипыТитулов = МодульТНОбщегоНазначенияСервер.ВсеЗначенияПеречисления("Saby_ТипТитулаЭтрН");
	
	ЭтоПервыйТитул = МодульТНОбщегоНазначенияСервер.РезультатФункцииТитулов(
		"Saby_ТранспортнаяНакладная", "ЭтоПервыйТитул", ТекущийЭтап);
	
	Если ЭтоПервыйТитул Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаПогрузка(
			ДанныеДокумента, РезультатФункции.ПроверяемыеРеквизиты, ПараметрыВыгрузки);
	ИначеЕсли ТекущийЭтап = ТипыТитулов["ПриемкаГруза"] Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаПриемкаГруза(РезультатФункции.ПроверяемыеРеквизиты);
	ИначеЕсли ТекущийЭтап = ТипыТитулов["Переадресовка"] Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаПереадресовка(РезультатФункции.ПроверяемыеРеквизиты);
	ИначеЕсли ТекущийЭтап = ТипыТитулов["ПереадресовкаУведомление"] Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаУведомлениеОПереадресовке(РезультатФункции.ПроверяемыеРеквизиты);
	ИначеЕсли ТекущийЭтап = ТипыТитулов["ЗаменаВодителяТС"] Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаЗаменаВодителяТС(ДанныеДокумента, РезультатФункции.ПроверяемыеРеквизиты);
	ИначеЕсли ТекущийЭтап = ТипыТитулов["ИзменениеСтоимости"] Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаИзменениеСтоимости(РезультатФункции.ПроверяемыеРеквизиты);
	ИначеЕсли ТекущийЭтап = ТипыТитулов["СогласованиеСтоимости"] Тогда
		ДополнитьПроверяемыеРеквизитыЭтапаСогласованиеСтоимости(РезультатФункции.ПроверяемыеРеквизиты);
	Иначе
		РезультатФункции.ПроверяемыеРеквизиты = Новый Массив;
	КонецЕсли;
	
	РезультатФункции.ПроверяемыеРеквизиты.Добавить(
		ФЛК("Отметки.ДатаВремя", "ОтметкиДатаВремя", "Не заполнена дата и время отметки"));
	РезультатФункции.ПроверяемыеРеквизиты.Добавить(ФЛК("Отметки.Описание", "ОтметкиОписание", "Не заполнено описание отметки"));
	РезультатФункции.ПроверяемыеРеквизиты.Добавить(ФЛК("Акты.Документ", "АктыДокумент", "Не заполнен документ в актах"));
	РезультатФункции.ПроверяемыеРеквизиты.Добавить(ФЛК("Штрафы.Расчет", "ШтрафыРасчет", "Не заполнен расчет по штрафу"));
	
	ДанныеДокумента.Вставить("ПроверятьПоляОтгрузчика", ПараметрыВыгрузки.ПроверятьПоляОтгрузчика);
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает имя таблицы документа с учетом специфики
//
// Параметры:
//  ИмяТабличнойЧасти - Строка - наименование табличной части из конфигуратора
//  СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - строка табличной части документа
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//
// Возвращаемое значение:
//   Строка - наименование таблицы на форме документа
//
Функция ИмяТЧДокумента(ИмяТабличнойЧасти, СтрокаТабличнойЧасти, ДанныеДокумента) Экспорт
    
	РезультатФункции = ИмяТабличнойЧасти;
	
	ТабличныеЧастиОтметок = Новый Массив;
	ТабличныеЧастиОтметок.Добавить("Отметки");
	ТабличныеЧастиОтметок.Добавить("Акты");
	ТабличныеЧастиОтметок.Добавить("Штрафы");
	
	Если ТабличныеЧастиОтметок.Найти(ИмяТабличнойЧасти) = Неопределено Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	СтрокаДляПроверки = Неопределено;
	Если ИмяТабличнойЧасти = "Отметки" Тогда
		СтрокаДляПроверки = СтрокаТабличнойЧасти;
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("КлючСтроки", СтрокаТабличнойЧасти.КлючСтроки_Отметки);
		
		СтрокиОтметок = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").НайтиСтрокиУниверсально(ДанныеДокумента.Отметки, Отбор);
		Если СтрокиОтметок.Количество() > 0 Тогда
			СтрокаДляПроверки = СтрокиОтметок[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоОтметкиВыгрузки(СтрокаДляПроверки) Тогда
		РезультатФункции = РезультатФункции + "_Выгрузка";
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПроверятьРеквизитДокумента(ИмяРеквизита, ДанныеДокумента) Экспорт
	
	Если ИмяРеквизита = "НомерСчета" Тогда
		Возврат ЗначениеЗаполнено(ДанныеДокумента.БанкНазвание)
			Или ЗначениеЗаполнено(ДанныеДокумента.БанкБИК)
			Или ЗначениеЗаполнено(ДанныеДокумента.БанкКоррСчет);
	ИначеЕсли ИмяРеквизита = "НомерСчетаПеревозчик" Тогда
		Возврат ЗначениеЗаполнено(ДанныеДокумента.БанкНазваниеПеревозчик)
			Или ЗначениеЗаполнено(ДанныеДокумента.БанкБИКПеревозчик)
			Или ЗначениеЗаполнено(ДанныеДокумента.БанкКоррСчетПеревозчик);
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает признак необходимости ФЛК реквизитов табличной части документа
//
// Параметры:
//  СтрокаТЧ - СтрокаТаблицыЗначений - строка табличной части документа
//  ИмяТЧ - Строка - имя табличной части документа
//  ИмяРеквизита - Строка - имя реквизита табличной части документа
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//
// Возвращаемое значение:
//   Булево - Истина, если проверять необходимо
//
Функция ПроверятьРеквизитТЧДокумента(СтрокаТЧ, ИмяТЧ, ИмяРеквизита, ДанныеДокумента) Экспорт
	
	Если ИмяТЧ = "Водители" Тогда
		Возврат МодульКода("Saby_ТНОбщегоНазначенияСервер").ПроверятьРеквизитВодителя(СтрокаТЧ, ИмяРеквизита);
	ИначеЕсли ИмяТЧ = "КонтактныеДанные" Тогда
		Возврат СтрокаТЧ.Роль <> ЗначениеМетаданных("Saby_РолиКонтрагентов.Отгрузчик") Или ДанныеДокумента.ПроверятьПоляОтгрузчика;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Изменяет параметры реквизита для отображения ошибки.
//
// Параметры:
//  СтрокаТЧ - СтрокаТаблицыЗначений - строка табличной части документа
//  ИмяТЧ - Строка - имя табличной части документа
//  Реквизит - Структура - см. функцию ФЛК()
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//
// Возвращаемое значение:
//   Структура - см. функцию ФЛК
//
Функция ИзменитьРеквизитТЧ(СтрокаТЧ, ИмяТЧ, Реквизит, ДанныеДокумента) Экспорт
	
	Если ИмяТЧ = "Отметки_Выгрузка" Тогда
		НовыйРеквизит = РеквизитОтметок(Реквизит.РеквизитОбъекта);
	ИначеЕсли ИмяТЧ = "Акты_Выгрузка" Тогда
		НовыйРеквизит = ФЛК("Акты_Выгрузка.Документ", "Акты_ВыгрузкаДокумент", "Не заполнен документ в актах");
	ИначеЕсли ИмяТЧ = "Штрафы_Выгрузка" Тогда
		НовыйРеквизит = ФЛК("Штрафы_Выгрузка.Расчет", "Штрафы_ВыгрузкаРасчет", "Не заполнен расчет по штрафу");
	Иначе
		НовыйРеквизит = Неопределено;
	КонецЕсли;
	
	Если НовыйРеквизит = Неопределено Тогда
		Возврат Реквизит;
	КонецЕсли;
	
	Возврат НовыйРеквизит;
	
КонецФункции

// Выполняет нестандартные проверки ФЛК с логикой сложнее, чем заполнен незаполнен.
//
// Параметры:
//  ДанныеДокумента - Структура - структура реквизитов и табличных частей документа
//  ПараметрыВыгрузки - Структура - см. Saby_ТНОбщегоНазначенияКлиентСервер.ПараметрыВыгрузки
//  Ошибки - Массив,Неопределено - массив для накопления ошибок
//
Процедура ВыполнитьДополнительныеПроверкиФЛК(ДанныеДокумента, ПараметрыВыгрузки, Ошибки) Экспорт
		
	ТипыТитулов = МодульКода("Saby_ТНОбщегоНазначенияСервер").ВсеЗначенияПеречисления("Saby_ТипТитулаЭтрН");
	
	ЭтоПервыйТитул = МодульКода("Saby_ТНОбщегоНазначенияСервер").РезультатФункцииТитулов(
		"Saby_ТранспортнаяНакладная", "ЭтоПервыйТитул", ПараметрыВыгрузки.ТипТитула);
	
	Если ЭтоПервыйТитул Тогда
		
		ДопПроверкиФЛКПогрузка(ДанныеДокумента, ПараметрыВыгрузки, Ошибки);
			
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов["Переадресовка"] Тогда
		
		ДопПроверкиФЛКПереадресовка(ДанныеДокумента, Ошибки);
		
	ИначеЕсли ПараметрыВыгрузки.ТипТитула = ТипыТитулов["ПереадресовкаУведомление"] Тогда
		
		ДопПроверкиФЛКУведомлениеОПереадресовке(ДанныеДокумента, Ошибки);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#Область Команды

// Заполняет список команд печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти // Команды

Функция ВложенияЗагружены(Вложения, Титул, ОбъектДок, ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Вложения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Основные титулы
	Если Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.Погрузка") Тогда
		ЗагрузкаТитулПогрузка(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПолучениеГруза") Тогда
		ЗагрузкаТитулПолучениеГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПриемкаГруза") Тогда
		ЗагрузкаТитулПриемкаГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ВыдачаГруза") Тогда
		ЗагрузкаТитулВыдачаГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	// Динамические титулы	
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.Переадресовка") Тогда
		ЗагрузкаТитулПереадресовка(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПереадресовкаУведомление") Тогда
		ЗагрузкаТитулУведомлениеОПереадресовке(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ЗаменаВодителяТС") Тогда
		ЗагрузкаТитулЗаменаВодителяТС(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ИзменениеСтоимости") Тогда
		ЗагрузкаТитулИзменениеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.СогласованиеСтоимости") Тогда
		ЗагрузкаТитулСогласованиеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	// Отрицательное завершение ДО	
	ИначеЕсли Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.УведомлениеОУточнении") Тогда
		ЗагрузкаТитулУведомленияОУточнении(ОбъектДок, Вложения, Титул, ДопПараметры);
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ТитулыДляЗагрузки(ОбъектДок, ПараметрыЗагрузки) Экспорт
	
	ТекущиеЗначения = МодульКода("Saby_ТНЗагрузкаСервер").ТекущиеЗначенияДокумента(ОбъектДок, ПараметрыЗагрузки);
	
	Этап = ТекущиеЗначения.Титул;
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	Если ЗначениеЗаполнено(ТекущиеЗначения.Состояние) Тогда  
		КодСостояния = МодульТНОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(
		ТекущиеЗначения.Состояние, "ИдентификаторСБИС");
	КонецЕсли;
	
	ТипыТитулов = МодульТНОбщегоНазначенияСервер.ВсеЗначенияПеречисления("Saby_ТипТитулаЭтрН");
	
	МассивТитуловДляЗагрузки = Новый Массив;
	
	ДОЗавершенУспешно      = 7;
	ДОЗавершенОтрицательно = 9;
	
	Если КодСостояния = ДОЗавершенУспешно Или КодСостояния = ДОЗавершенОтрицательно Тогда
		
		Если ПараметрыЗагрузки.ТолькоАктивныйЭтап Тогда
			МассивТитуловДляЗагрузки.Добавить(Этап);
		Иначе
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["ВыдачаГруза"]);
			// - стоимость может быть изменена уже после завершения ДО
			// исключение из общей схемы
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["ИзменениеСтоимости"]);
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["СогласованиеСтоимости"]);
		КонецЕсли;
		
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["УведомлениеОУточнении"]);
		
		Возврат МассивТитуловДляЗагрузки;	
		
	КонецЕсли;	
	
	// Если динамический титул, то всегда читаем только его.
	// Никакие дополнительные данные не нужны, так как его считываем сразу после отправки, когда основные титулы загружены.
	ЭтоДинамическийТитул = МодульТНОбщегоНазначенияСервер.РезультатФункцииТитулов(
		"Saby_ТранспортнаяНакладная", "ЭтоДинамическийТитул", Этап);
	Если ЭтоДинамическийТитул Тогда
		
		МассивТитуловДляЗагрузки.Добавить(Этап);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["УведомлениеОУточнении"]);
		
		Возврат МассивТитуловДляЗагрузки;
		
	КонецЕсли;
	
	Если ПараметрыЗагрузки.ТолькоАктивныйЭтап Тогда
		
		// В регистре состояния нет данных о текущем этапе, при этом документооборот не завершен.
		Если Этап.Пустая() Тогда
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["Погрузка"]);
		Иначе
			МассивТитуловДляЗагрузки.Добавить(Этап);
			МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["УведомлениеОУточнении"]);
		КонецЕсли;
		
	Иначе
		
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["Погрузка"]);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["ПолучениеГруза"]);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["ПриемкаГруза"]);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["ВыдачаГруза"]);
		
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["Переадресовка"]);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["ЗаменаВодителяТС"]);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["ПереадресовкаУведомление"]);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["ИзменениеСтоимости"]);
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["СогласованиеСтоимости"]);
		
		МассивТитуловДляЗагрузки.Добавить(ТипыТитулов["УведомлениеОУточнении"]);
		
	КонецЕсли;
	
	Возврат МассивТитуловДляЗагрузки;

КонецФункции

Функция ТекущиеЭтапыДокумента(Форма) Экспорт
	
	РезультатФункции = Новый Массив;
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	ФормаОбъект = МодульТНОбщегоНазначенияКлиентСервер.ФормаОбъект(Форма);
	
	ИмяМетаданных = МодульТНОбщегоНазначенияКлиентСервер.ИмяМетаданныхПоФорме(Форма);
	
	Для Каждого СтрокаТекущегоТитула Из ФормаОбъект.ТекущиеЭтапы Цикл
		РезультатФункции.Добавить(СтрокаТекущегоТитула.ТипТитула);
	КонецЦикла;
	
	ДокументооборотЗавершен = МодульТНОбщегоНазначенияКлиентСервер.ДокументооборотЗавершен(Форма);
	
	Если РезультатФункции.Количество() = 0 И Не ДокументооборотЗавершен Тогда
		РезультатФункции.Добавить(
			МодульКода("Saby_ТНОбщегоНазначенияСервер").РезультатФункцииТитулов(ИмяМетаданных, "ПервыйТитул"));
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#Область ЗаполнениеНаОснованииИНИИнтерфейс

Функция ШаблонИмениINI() Экспорт
	
	Возврат "Blockly_%1_ЭТрН_read";
	
КонецФункции

Процедура СформироватьНовыеОснования(СтруктураРезультата, ДанныеИзИНИ) Экспорт
	
	ГрузоотправительСсылка = ДанныеИзИНИ["ГрузоотправительСсылка"];
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	Если ЗначениеЗаполнено(ГрузоотправительСсылка) Тогда
		
		СтруктураОснования = МодульТНОбщегоНазначенияСервер.СтруктураОснования(ГрузоотправительСсылка, "Отправитель");
		СтруктураРезультата.НовыеОснования.Добавить(СтруктураОснования);
		
	КонецЕсли;
	
	ГрузополучательСсылка = ДанныеИзИНИ["ГрузополучательСсылка"];
	Если ЗначениеЗаполнено(ГрузополучательСсылка) Тогда
		СтруктураОснования = МодульТНОбщегоНазначенияСервер.СтруктураОснования(ГрузополучательСсылка, "Получатель");
		СтруктураРезультата.НовыеОснования.Добавить(СтруктураОснования);
	КонецЕсли;
	
	ГрузоперевозчикСсылка = ДанныеИзИНИ["ГрузоперевозчикСсылка"];
	Если ЗначениеЗаполнено(ГрузоперевозчикСсылка) Тогда
		СтруктураОснования = МодульТНОбщегоНазначенияСервер.СтруктураОснования(ГрузоперевозчикСсылка, "Перевозчик");
		СтруктураРезультата.НовыеОснования.Добавить(СтруктураОснования);
	КонецЕсли;
	
	ЗаказчикСсылка = ДанныеИзИНИ["ЗаказчикСсылка"];
	Если ЗначениеЗаполнено(ЗаказчикСсылка) Тогда
		СтруктураОснования = МодульТНОбщегоНазначенияСервер.СтруктураОснования(ЗаказчикСсылка, "Заказчик");
		СтруктураРезультата.НовыеОснования.Добавить(СтруктураОснования);
	КонецЕсли;
	
	ВладелецОбъектаСсылка = ДанныеИзИНИ["ВладелецОбъектаСсылка"];
	Если ЗначениеЗаполнено(ВладелецОбъектаСсылка) Тогда
		СтруктураОснования = МодульТНОбщегоНазначенияСервер.СтруктураОснования(ВладелецОбъектаСсылка, "ВладелецОбъекта");
		СтруктураРезультата.НовыеОснования.Добавить(СтруктураОснования);
	КонецЕсли;
	
	ОтгрузчикСсылка = ДанныеИзИНИ["ОтгрузчикСсылка"];
	Если ЗначениеЗаполнено(ОтгрузчикСсылка) Тогда
		СтруктураОснования = МодульТНОбщегоНазначенияСервер.СтруктураОснования(ОтгрузчикСсылка, "Отгрузчик");
		СтруктураРезультата.НовыеОснования.Добавить(СтруктураОснования);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПодстановки(ДанныеИзИНИ, ПараметрыЗаполнения) Экспорт
	
	Если ПараметрыЗаполнения.РольКонтрагента = "Отправитель" Тогда
		ДополнитьПодстановкиГрузоотправителя(ДанныеИзИНИ, ПараметрыЗаполнения);
	ИначеЕсли ПараметрыЗаполнения.РольКонтрагента = "Получатель" Тогда
		ДополнитьПодстановкиГрузополучателя(ДанныеИзИНИ, ПараметрыЗаполнения);
	ИначеЕсли ПараметрыЗаполнения.РольКонтрагента = "Перевозчик" Тогда
		ДополнитьПодстановкиГрузоперевозчика(ДанныеИзИНИ, ПараметрыЗаполнения);
	ИначеЕсли ПараметрыЗаполнения.РольКонтрагента = "Заказчик" Тогда
		ДополнитьПодстановкиЗаказчика(ДанныеИзИНИ, ПараметрыЗаполнения);
	ИначеЕсли ПараметрыЗаполнения.РольКонтрагента = "ВладелецОбъекта" Тогда
		ДополнитьПодстановкиВладелецОбъекта(ДанныеИзИНИ, ПараметрыЗаполнения);
	ИначеЕсли ПараметрыЗаполнения.РольКонтрагента = "Отгрузчик" Тогда
		ДополнитьПодстановкиОтгрузчик(ДанныеИзИНИ, ПараметрыЗаполнения);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗапретЗаполненияЭТрН(ПараметрыЗаполнения) Экспорт
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Saby_ТранспортнаяНакладная.Погрузка_Адрес КАК Погрузка_Адрес,
	|	Saby_ТранспортнаяНакладная.Отправитель_АдресДоставки КАК Отправитель_АдресДоставки
	|ИЗ
	|	Документ.Saby_ТранспортнаяНакладная КАК Saby_ТранспортнаяНакладная
	|ГДЕ
	|	Saby_ТранспортнаяНакладная.Ссылка = &Ссылка";
	
	ЗапросДанных.УстановитьПараметр("Ссылка", ПараметрыЗаполнения.Объект.Ссылка);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		
		Если ЗначениеЗаполнено(ВыборкаДанных.Погрузка_Адрес) Тогда
			ПараметрыЗаполнения.ЗапретЗаполнения.Вставить("ПунктПогрузки", Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаДанных.Отправитель_АдресДоставки) Тогда
			ПараметрыЗаполнения.ЗапретЗаполнения.Вставить("ПунктВыгрузки", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ЗаполнениеНаОснованииИНИИнтерфейс

#Область ПроцедурыПереходаНа242160

Функция ЗаполнитьРольВодителяВоВсехДокументах() Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ОК",             Истина);
	РезультатФункции.Вставить("ОписаниеОшибки", "");
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Saby_ТранспортнаяНакладнаяОтветственныеЛица.Ссылка КАК Ссылка,
	|	Saby_ТранспортнаяНакладнаяОтветственныеЛица.НомерСтроки КАК НомерСтроки,
	|	Saby_ТранспортнаяНакладнаяОтветственныеЛица.Ссылка.Представление КАК Представление
	|ИЗ
	|	Документ.Saby_ТранспортнаяНакладная.ОтветственныеЛица КАК Saby_ТранспортнаяНакладнаяОтветственныеЛица
	|ГДЕ
	|	Saby_ТранспортнаяНакладнаяОтветственныеЛица.Роль = ЗНАЧЕНИЕ(Перечисление.Saby_РолиОтветственных.ПустаяСсылка)
	|ИТОГИ ПО
	|	Ссылка";
	
	ШаблонОшибки = "Не удалось записать документ %1 по причине: %2";
	
	ВыборкаПоДокументам = ЗапросДанных.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		ОбъектДокумента = ВыборкаПоДокументам.Ссылка.ПолучитьОбъект();
		
		ВыборкаПоОтветственным = ВыборкаПоДокументам.Выбрать();
		Пока ВыборкаПоОтветственным.Следующий() Цикл
			
			СтрокаОтветственного = ОбъектДокумента.ОтветственныеЛица[ВыборкаПоОтветственным.НомерСтроки - 1];
			СтрокаОтветственного.Роль = ЗначениеМетаданных("Saby_РолиОтветственных.Водитель");
			
		КонецЦикла;
		
		Попытка
			ОбъектДокумента.Записать();
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ВыборкаПоДокументам.Представление, ОписаниеОшибки());
			РезультатФункции.ОК = Ложь;
			РезультатФункции.ОписаниеОшибки = РезультатФункции.ОписаниеОшибки
				+ ?(ЗначениеЗаполнено(РезультатФункции.ОписаниеОшибки), Символы.ПС, "")
				+ ТекстОшибки;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПеренестиОтветственногоВТабличнуюЧасть() Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ОК",             Истина);
	РезультатФункции.Вставить("ОписаниеОшибки", "");
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Saby_ТранспортнаяНакладная.Ссылка КАК Ссылка,
	|	Saby_ТранспортнаяНакладная.Представление КАК Представление
	|ИЗ
	|	Документ.Saby_ТранспортнаяНакладная КАК Saby_ТранспортнаяНакладная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Saby_ТранспортнаяНакладная.ОтветственныеЛица КАК Saby_ТранспортнаяНакладнаяОтветственныеЛица
	|		ПО (Saby_ТранспортнаяНакладнаяОтветственныеЛица.Ссылка = Saby_ТранспортнаяНакладная.Ссылка)
	|			И (Saby_ТранспортнаяНакладнаяОтветственныеЛица.Роль = ЗНАЧЕНИЕ(Перечисление.Saby_РолиОтветственных.Ответственный))
	|ГДЕ
	|	Saby_ТранспортнаяНакладная.Отгрузка_ОтветственныйСтруктура <> """"
	|	И Saby_ТранспортнаяНакладнаяОтветственныеЛица.НомерСтроки ЕСТЬ NULL";
	
	ШаблонОшибки = "Не удалось записать документ %1 по причине: %2";
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		ОбъектДокумента = ВыборкаДанных.Ссылка.ПолучитьОбъект();
		СтруктураФИО = ЗначениеИзСтрокиВнутр(ОбъектДокумента.Отгрузка_ОтветственныйСтруктура);
		СтрокаОтветственного = ОбъектДокумента.ОтветственныеЛица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОтветственного, СтруктураФИО);
		СтрокаОтветственного.Роль = ЗначениеМетаданных("Saby_РолиОтветственных.Ответственный");
		
		Попытка
			ОбъектДокумента.Записать();
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ВыборкаДанных.Представление, ОписаниеОшибки());
			РезультатФункции.ОК = Ложь;
			РезультатФункции.ОписаниеОшибки = РезультатФункции.ОписаниеОшибки
				+ ?(ЗначениеЗаполнено(РезультатФункции.ОписаниеОшибки), Символы.ПС, "")
				+ ТекстОшибки;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ПроцедурыПереходаНа242160

Процедура ДобавитьДополнительныеДанныеВЛенту(МенеджерВременныхТаблиц, СсылкаНаДокумент) Экспорт
	
	Возврат ;
	
КонецПроцедуры

Функция ДоступныеОрганизацииЭтапы(ОбъектДок, ПараметрыЗагрузки) Экспорт
	
	РезультатФункции = Новый Соответствие;
	
	ДоступныеРоли = РолиОрганизации(ОбъектДок.ДанныеЮрЛиц);
	
	Для Каждого ТекущийЭтап Из ПараметрыЗагрузки.ДанныеДокумента["ТекущиеЭтапы"] Цикл
		
		НаименованиеЭтапа = ТекущийЭтап["Наименование"];
		
		Титул = МодульКода("Saby_ТНОбщегоНазначенияСервер").РезультатФункцииТитулов(
			"Saby_ТранспортнаяНакладная", "ЗначениеПоПредставлению", НаименованиеЭтапа);
		
		ЭтапДоступен = (Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.Погрузка") И ДоступныеРоли.Отправитель)
			Или (Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПолучениеГруза") И ДоступныеРоли.Перевозчик)
			Или (Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПриемкаГруза") И ДоступныеРоли.Получатель)
			Или (Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ВыдачаГруза") И ДоступныеРоли.Перевозчик)
			Или (Титул = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.Переадресовка") И ДоступныеРоли.Перевозчик);

		Если ЭтапДоступен Тогда
			РезультатФункции.Вставить(НаименованиеЭтапа, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция РолиОрганизации(ДанныеЮрЛиц) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Отправитель", Ложь);
	РезультатФункции.Вставить("Получатель",  Ложь);
	РезультатФункции.Вставить("Перевозчик",  Ложь);
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	СтруктураОтправителя = МодульТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(ДанныеЮрЛиц, "Отправитель");
	СтруктураПолучателя  = МодульТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(ДанныеЮрЛиц, "Получатель");
	СтруктураПеревозчика = МодульТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(ДанныеЮрЛиц, "Перевозчик");
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	РезультатФункции.Отправитель = СтруктураОтправителя.Заполнена
		И МодульТНОбщегоНазначенияСервер.ОрганизацияПрисутствуетВБазе(
			СтруктураОтправителя.ИНН, СтруктураОтправителя.КПП);
		
	РезультатФункции.Получатель = СтруктураПолучателя.Заполнена
		И МодульТНОбщегоНазначенияСервер.ОрганизацияПрисутствуетВБазе(
			СтруктураПолучателя.ИНН, СтруктураПолучателя.КПП);
		
	РезультатФункции.Перевозчик = СтруктураПеревозчика.Заполнена
		И МодульТНОбщегоНазначенияСервер.ОрганизацияПрисутствуетВБазе(
			СтруктураПеревозчика.ИНН, СтруктураПеревозчика.КПП);
		
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

#Область ФЛК

Функция ФЛК(РеквизитОбъектаЭТрН, ЭлементФормыЭТрН, ОшибкаЭТрН)
	
	Возврат МодульКода("Saby_ТНОбщегоНазначенияСервер").СтруктураФЛК(РеквизитОбъектаЭТрН, ЭлементФормыЭТрН, ОшибкаЭТрН);
	
КонецФункции

Процедура ДополнитьПроверяемыеРеквизитыЭтапаПогрузка(ДанныеДокумента, ПроверяемыеРеквизиты, ПараметрыВыгрузки)
	
	ПроверяемыеРеквизиты.Добавить(ФЛК("ОтправительСтрокой", "ОтправительСтрокой", "Не заполнен отправитель"));
	
	Если ПараметрыВыгрузки.ПроверятьПоляСОХ Тогда
		ПроверяемыеРеквизиты.Добавить(ФЛК("СоставительСтрокой", "ОформительСтрокой", "Не заполнена организация составителя"));
		ПроверяемыеРеквизиты.Добавить(
			ФЛК("Составитель_НаОснованииДокумент", "ОформительСтрокой", "Не заполнено основание составителя"));
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить(ФЛК("ПолучательСтрокой", "ПолучательСтрокой", "Не заполнен получатель"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("ПеревозчикСтрокой", "ПеревозчикСтрокой", "Не заполнен перевозчик"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Погрузка_Адрес", "ДекорацияЗаполнитьАдресПогрузки", "Не заполнен адрес погрузки"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("Отправитель_АдресДоставки", "ДекорацияЗаполнитьАдресДоставки", "Не заполнен адрес доставки"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Отправитель_ЗаявкаНомер", "Заявка_Номер", "Не заполнен номер заявки"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Отправитель_ЗаявкаДата", "Заявка_Дата", "Не заполнена дата заявки"));
	
	ПрицепыРегистрационныйНомер = "ПрицепыРегистрационныйНомер";
	
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("ТранспортныеСредства.РегистрационныйНомер", "Прицепы", "Не заполнено транспортное средство"));
	ФЛК = ФЛК("ТранспортныеСредства.Грузоподъемность",
		"ПрицепыГрузоподъемность",
		"Не заполнена грузоподъемность транспортного средства");
	ПроверяемыеРеквизиты.Добавить(ФЛК);
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("ТранспортныеСредства.Вместимость", "ПрицепыВместимость", "Не заполнена вместимость транспортного средства"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("ТранспортныеСредства.ТипВладения", ПрицепыРегистрационныйНомер, "Не заполнен тип владения транспортного средства"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("ТранспортныеСредства.Марка", ПрицепыРегистрационныйНомер, "Не заполнена марка транспортного средства"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("ТранспортныеСредства.Тип", ПрицепыРегистрационныйНомер, "Не заполнен тип транспортного средства"));
		
	ВодителиВУ = "ВодителиВУ";
	ПроверяемыеРеквизиты.Добавить(ФЛК("Водители", "Водители", "В списке водителей не введено ни одной строки"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Водители.Фамилия", "ВодителиФИО", "Не заполнена фамилия водителя"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Водители.Имя", "ВодителиФИО", "Не заполнена имя водителя"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Водители.ИНН", "ВодителиИНН", "Не заполнена ИНН водителя"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Водители.Серия", ВодителиВУ, "Не заполнена серия водительского удостоверения"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Водители.Номер", ВодителиВУ, "Не заполнена номер водительского удостоверения"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Водители.ДатаВыдачи", ВодителиВУ, "Не заполнена дата выдачи водительского удостоверения"));
	
	Если ЗначениеЗаполнено(ДанныеДокумента.Отправитель_Экспедитор) И ДанныеДокумента.Отправитель_Экспедитор Тогда
		ПроверяемыеРеквизиты.Добавить(ФЛК("ЗаказчикСтрокой", "ЗаказчикСтрокой", "Не заполнен заказчик"));
		ПроверяемыеРеквизиты.Добавить(ФЛК("Заказчик_Договор", "Заказчик_Договор", "Не заполнен договор заказчика"));
	КонецЕсли;
	
	Если ДанныеДокумента.Владелец_Тип = ЗначениеМетаданных("Saby_ВладелецОбъектаОтгрузки.Неизвестен") Тогда
		ПроверяемыеРеквизиты.Добавить(
			ФЛК("Владелец_НеизвестенПричина", "Владелец_НеизвестенПричина", "Не заполнена причина, по которой неизвестен владелец"));
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПустаяСсылка")
		И ДанныеДокумента.Владелец_Тип = ЗначениеМетаданных("Saby_ВладелецОбъектаОтгрузки.ДругоеЮрЛицо") Тогда
		ПроверяемыеРеквизиты.Добавить(ФЛК("ВладелецОбъектаСтрокой", "ВладелецОбъектаСтрокой", "Не заполнен владелец объекта"));
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы", "Грузы", "В списке грузов не введено ни одной строки"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы.Тип", "ГрузыТип", "Не заполнен тип в грузе"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы.Наименование", "ГрузыНаименование", "Не заполнено наименование в грузе"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы.Состояние", "ГрузыСостояние", "Не заполнено состояние в грузе"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы.Количество", "ГрузыКоличество", "Не заполнено количество в грузе"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы.МассаБрутто", "ГрузыМассаБрутто", "Не заполнена масса брутто в грузе"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы.СпособУпаковки", "ГрузыСпособУпаковки", "Не заполнен способ упаковки в грузе"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Грузы.ВидТары", "ГрузыВидТары", "Не заполнен вид тары в грузе"));
	
	Грузы = ДанныеДокумента.Грузы;
	Если ЗначениеЗаполнено(Грузы) Тогда		
		Отбор = Новый Структура("Тип", ЗначениеМетаданных("Saby_ТипГруза.Контейнер"));
		НайденныеСтроки = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").НайтиСтрокиУниверсально(Грузы, Отбор);
		ЕстьТипГрузаКонтейнер = НайденныеСтроки.Количество() > 0;
		Если ЕстьТипГрузаКонтейнер Тогда
			ПроверяемыеРеквизиты.Добавить(ФЛК("Контейнеры", "Контейнеры", "В списке контейнеров не введено ни одной строки"));
			ПроверяемыеРеквизиты.Добавить(ФЛК("Контейнеры.Номер", "КонтейнерыИД_Контейнера", "Не заполнен номер контейнера"));
			ПроверяемыеРеквизиты.Добавить(ФЛК("Контейнеры.Количество", "КонтейнерыКоличество", "Не заполнено количество контейнеров"));
			ФЛК = ФЛК("Отправитель_СопроводительнаяВедомость",
				"Грузоотправитель_СопроводительнаяВедомость",
				"Не заполнена сопроводительная ведомость");
			ПроверяемыеРеквизиты.Добавить(ФЛК);
		КонецЕсли;
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("Погрузка_КоличествоМест", "Погрузка_КоличествоМест", "Не заполнено поле ""Кол-во мест"" на вкладке Погрузка"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("Погрузка_Масса", "Погрузка_Масса", "Не заполнено поле ""Масса брутто"" на вкладке Погрузка"));
	ФЛК = ФЛК("Погрузка_МассаМетодРасчета",
		"Погрузка_МассаМетодРасчета",
		"Не заполнено поле ""Метод определения"" на вкладке Погрузка");
	ПроверяемыеРеквизиты.Добавить(ФЛК);
	
	Если ПараметрыВыгрузки.ПроверятьПоляОтгрузчика Тогда
		Если Не ПараметрыВыгрузки.ПроверятьПоляСОХ Тогда
			ПроверяемыеРеквизиты.Добавить(ФЛК("ОтгрузчикСтрокой", "ОтгрузчикСтрокой", "Не заполнен отгрузчик"));
		КонецЕсли;
		ПроверяемыеРеквизиты.Добавить(
			ФЛК("Отгрузка_НаОснованииДокумент", "Отгрузка_НаОснованииДокумент", "Не заполнен документ основания отгрузки"));
		ПроверяемыеРеквизиты.Добавить(ФЛК("Отгрузка_ОтветственныйСтрокой", "Отгрузка_Ответственный", "Не заполнен ответственный"));
		ПроверяемыеРеквизиты.Добавить(
			ФЛК("Отгрузка_ОтветственныйДолжность", "Отгрузка_ОтветственныйДолжность", "Не заполнена должность ответственного"));
		ФЛК = ФЛК("Отгрузка_ОтветственныйНаОсновании",
			"Отгрузка_ОтветственныйНаОсновании",
			"Не заполнен документ основания ответственного лица");
		ПроверяемыеРеквизиты.Добавить(ФЛК);
	КонецЕсли;
	
	РольПолучатель = ЗначениеМетаданных("Saby_РолиКонтрагентов.Получатель");
	Если ДанныеДокумента.ИнициаторПереадресации = РольПолучатель Тогда
		ФЛК = ФЛК("ИнициаторПереадресацииПодтверждение",
			"ИнициаторПереадресацииПодтверждение",
			"Не заполнено подтверждение переадресации");
		ПроверяемыеРеквизиты.Добавить(ФЛК);
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("Погрузка_ДатаВремя", "Погрузка_Дата", "Не заполнено поле ""Подача ТС"" на вкладке Погрузка"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("Погрузка_ДатаВремяПрибыл", "Погрузка_ДатаПрибыл", "Не заполнено поле ""Прибыл"" на вкладке Погрузка"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("Погрузка_ДатаВремяУбыл", "Погрузка_ДатаУбыл", "Не заполнено поле ""Убыл"" на вкладке Погрузка"));
	
	ПроверяемыеРеквизиты.Добавить(ФЛК("Маркировки.Значение", "МаркировкиЗначение", "Не заполнено значение маркировки"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("ОпасныеГрузы.ОпасныйГруз", "ОпасныеГрузыОпасныйГруз", "Не заполнен опасный груз в списке опасных грузов"));
	
	ПроверяемыеРеквизиты.Добавить(ФЛК("СпецРазрешения.Номер", "СпецРазрешенияНомер", "Не заполнен номер в спец. разрешениях"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("СпецРазрешения.Дата", "СпецРазрешенияДата", "Не заполнена дата в спец. разрешениях"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("СпецРазрешения.Срок", "СпецРазрешенияСрок", "Не заполнен срок в спец. разрешениях"));
	
	ПроверяемыеРеквизиты.Добавить(ФЛК("КонтактныеДанные.Тип", "", "Не заполнен тип контактных данных"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("КонтактныеДанные.Значение", "", "Не заполнено значение контактных данных"));
	
	ПроверяемыеРеквизиты.Добавить(ФЛК("ПутевыеЛисты.Документ", "ПутевыеЛистыДокумент", "Не заполнен документ в путевых листах"));
	
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаПриемкаГруза(ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("Выгрузка_КоличествоМест", "Выгрузка_КоличествоМест", "Не заполнено поле ""Кол-во мест"" на вкладке Выгрузка"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("Выгрузка_МассаБрутто", "Выгрузка_МассаБрутто", "Не заполнено поле ""Масса брутто"" на вкладке Выгрузка"));
	ФЛК = ФЛК("Выгрузка_МассаМетодРасчета",
		"Выгрузка_МассаМетодРасчета",
		"Не заполнено поле ""Метод определения"" на вкладке Выгрузка");
	ПроверяемыеРеквизиты.Добавить(ФЛК);
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("Выгрузка_Состояние", "Выгрузка_Состояние", "Не заполнено поле ""Состояние"" на вкладке Выгрузка"));
	
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("Выгрузка_ДатаВремя", "Выгрузка_Дата", "Не заполнено поле ""Подача ТС"" на вкладке Выгрузка"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("Выгрузка_ДатаВремяПрибыл", "Выгрузка_ДатаПрибыл", "Не заполнено поле ""Прибыл"" на вкладке Выгрузка"));
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("Выгрузка_ДатаВремяУбыл", "Выгрузка_ДатаУбыл", "Не заполнено поле ""Убыл"" на вкладке Выгрузка"));
	
КонецПроцедуры 

Процедура ДополнитьПроверяемыеРеквизитыЭтапаПереадресовка(ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить(ФЛК("ПереадресовкаНаОсновании", "ПереадресовкаНаОсновании", "Не заполнен документ основание"));
	
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("Отправитель_АдресДоставки", "ДекорацияЗаполнитьАдресДоставки", "Не заполнен адрес доставки"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Отправитель_ДоставитьДо", "ДоставитьДо_Дата", "Не заполнена дата доставки"));
		
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаУведомлениеОПереадресовке(ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить(
		ФЛК("Отправитель_АдресДоставки", "ДекорацияЗаполнитьАдресДоставки", "Не заполнен адрес доставки"));
	ПроверяемыеРеквизиты.Добавить(ФЛК("Отправитель_ДоставитьДо", "ДоставитьДо_Дата", "Не заполнена дата доставки"));
		
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаЗаменаВодителяТС(ДанныеДокумента, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить(ФЛК("ДатаВремяЗамены", "ДатаЗамены", "Не заполнена дата замены"));
	Если ДанныеДокумента.ТипСмены  = "Описание" Тогда
		ПроверяемыеРеквизиты.Добавить(ФЛК("ПричинаЗамены", "ПричинаЗамены", "Не заполнена причина замены"));
	Иначе
		ПроверяемыеРеквизиты.Добавить(ФЛК("ДокументЗамены", "ДокументЗамены", "Не заполнен документ замены"));
	КонецЕсли;
	
	Если ДанныеДокумента.ЗаменаТС Тогда
		ПроверяемыеРеквизиты.Добавить(ФЛК("СпецРазрешения.Номер", "СпецРазрешенияНомер", "Не заполнен номер в спец. разрешениях"));
		ПроверяемыеРеквизиты.Добавить(ФЛК("СпецРазрешения.Дата", "СпецРазрешенияДата", "Не заполнена дата в спец. разрешениях"));
		ПроверяемыеРеквизиты.Добавить(ФЛК("СпецРазрешения.Срок", "СпецРазрешенияСрок", "Не заполнен срок в спец. разрешениях"));
	КонецЕсли;
	
	Если ДанныеДокумента.ЗаменаТС Или ДанныеДокумента.ЗаменаПрицепы Тогда
		ПроверяемыеРеквизиты.Добавить(
			ФЛК("ТранспортныеСредства", "ТранспортноеСредствоСтрокой", "Не заполнено транспортное средство"));
		ПроверяемыеРеквизиты.Добавить(
			ФЛК("ТранспортныеСредства.РегистрационныйНомер", "Прицепы", "Не заполнено транспортное средство"));
		ФЛК = ФЛК("ТранспортныеСредства.Грузоподъемность",
			"ПрицепыГрузоподъемность",
			"Не заполнена грузоподъемность транспортного средства");
		ПроверяемыеРеквизиты.Добавить(ФЛК);
		ПроверяемыеРеквизиты.Добавить(
			ФЛК("ТранспортныеСредства.Вместимость", "ПрицепыВместимость", "Не заполнена вместимость транспортного средства"));
	КонецЕсли;
	
	Если ДанныеДокумента.ЗаменаВодители Тогда
		ВодителиВУ = "ВодителиВУ";
		ПроверяемыеРеквизиты.Добавить(ФЛК("Водители", "Водители", "В списке водителей не введено ни одной строки"));
		ПроверяемыеРеквизиты.Добавить(ФЛК("Водители.Фамилия", "ВодителиФИО", "Не заполнена фамилия водителя"));
		ПроверяемыеРеквизиты.Добавить(ФЛК("Водители.Имя", "ВодителиФИО", "Не заполнена имя водителя"));
		ПроверяемыеРеквизиты.Добавить(ФЛК("Водители.ИНН", "ВодителиИНН", "Не заполнена ИНН водителя"));
		ПроверяемыеРеквизиты.Добавить(ФЛК("Водители.Серия", ВодителиВУ, "Не заполнена серия водительского удостоверения"));
		ПроверяемыеРеквизиты.Добавить(ФЛК("Водители.Номер", ВодителиВУ, "Не заполнена номер водительского удостоверения"));
		ПроверяемыеРеквизиты.Добавить(
			ФЛК("Водители.ДатаВыдачи", ВодителиВУ, "Не заполнена дата выдачи водительского удостоверения"));
		ПроверяемыеРеквизиты.Добавить(ФЛК("ПутевыеЛисты.Документ", "ПутевыеЛистыДокумент", "Не заполнен документ в путевых листах"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаИзменениеСтоимости(ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить(ФЛК("Сумма", "Сумма", "Не заполнена сумма"));
	
	ПроверяемыеРеквизиты.Добавить(ФЛК("НомерСчетаПеревозчик", "НомерСчетаПеревозчик", "Не заполнен номер счета"));
	
КонецПроцедуры

Процедура ДополнитьПроверяемыеРеквизитыЭтапаСогласованиеСтоимости(ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить(ФЛК("Сумма", "Сумма", "Не заполнена сумма"));
	
	ПроверяемыеРеквизиты.Добавить(ФЛК("НомерСчета", "НомерСчета", "Не заполнен номер счета"));
	
КонецПроцедуры

Функция ЭтоОтметкиВыгрузки(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов.Получатель") Тогда
		Возврат Истина;
	ИначеЕсли СтрокаТабличнойЧасти.Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов.Перевозчик") Тогда
		Возврат СтрокаТабличнойЧасти.Этап = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПриемкаГруза")
			Или СтрокаТабличнойЧасти.Этап = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ВыдачаГруза");
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ДопПроверкиФЛКПогрузка(ДанныеДокумента, ПараметрыВыгрузки, Ошибки)
	
	ИмяТелефон = "Телефон";
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	СтруктураОшибки = ФЛК("Отправитель_Телефон", "Отправитель_Телефон", "Не заполнен телефон отправителя");
	МодульТНОбщегоНазначенияСервер.ПроверитьКонтактныеДанные(ДанныеДокумента, "Отправитель", ИмяТелефон, Ошибки, СтруктураОшибки);
	
	СтруктураОшибки = ФЛК("Получатель_Телефон", "Получатель_Телефон", "Не заполнен телефон получателя");
	МодульТНОбщегоНазначенияСервер.ПроверитьКонтактныеДанные(ДанныеДокумента, "Получатель", ИмяТелефон, Ошибки, СтруктураОшибки);
	
	СтруктураОшибки = ФЛК("Перевозчик_Телефон", "Перевозчик_Телефон", "Не заполнен телефон перевозчика");
	МодульТНОбщегоНазначенияСервер.ПроверитьКонтактныеДанные(ДанныеДокумента, "Перевозчик", ИмяТелефон, Ошибки, СтруктураОшибки);
		
	Владелец_Тип = ДанныеДокумента.Владелец_Тип;
	Если Владелец_Тип = ЗначениеМетаданных("Saby_ВладелецОбъектаОтгрузки.ДругоеЮрЛицо") Тогда
		СтруктураОшибки = ФЛК("ВладелецОбъекта_Телефон", "ВладелецОбъекта_Телефон", "Не заполнен телефон владельца объекта");
		МодульТНОбщегоНазначенияСервер.ПроверитьКонтактныеДанные(
			ДанныеДокумента, "ВладелецОбъекта", ИмяТелефон, Ошибки, СтруктураОшибки);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПроверятьПоляОтгрузчика И Не ПараметрыВыгрузки.ПроверятьПоляСОХ Тогда
		СтруктураОшибки = ФЛК("Отгрузчик_Телефон", "Отгрузчик_Телефон", "Не заполнен телефон отгрузчика");
		МодульТНОбщегоНазначенияСервер.ПроверитьКонтактныеДанные(ДанныеДокумента, "Отгрузчик", ИмяТелефон, Ошибки, СтруктураОшибки);
	КонецЕсли;
	
	СтруктураОшибки = ФЛК("ТранспортныеСредства", "ТранспортноеСредствоСтрокой", "Не заполнено транспортное средство");
	МодульТНОбщегоНазначенияСервер.ПроверитьЗаполнениеТранспортногоСредства(ДанныеДокумента, Ошибки, СтруктураОшибки);
	
	СоответствиеОшибок = Новый Соответствие;
	СоответствиеОшибок.Вставить(
		"ТранспортноеСредствоДокумент",
		ФЛК("ТранспортноеСредствоДокумент", "ТранспортноеСредствоСтрокой", "Не заполнен документ владения у транспортного средства"));
	СоответствиеОшибок.Вставить(
		"Прицепы.ПрицепДокумент",
		ФЛК("Прицепы.ПрицепДокумент", "ПрицепыРегистрационныйНомер", "Не заполнен документ владения в списке прицепов"));
	МодульТНОбщегоНазначенияСервер.ПроверитьЗаполнениеТипаВладения(ДанныеДокумента, Ошибки, СоответствиеОшибок);
	
КонецПроцедуры

Процедура ДопПроверкиФЛКПереадресовка(ДанныеДокумента, Ошибки)
	
	СтруктураДанныхЮрЛица = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ДанныеЮрЛицаПоРоли(
		ДанныеДокумента.ДанныеЮрЛиц, "Получатель");
	
	Если СтруктураДанныхЮрЛица.Заполнена Тогда
		СтруктураОшибки = ФЛК("Получатель_Телефон", "Получатель_Телефон", "Не заполнен телефон получателя");
		МодульКода("Saby_ТНОбщегоНазначенияСервер").ПроверитьКонтактныеДанные(
			ДанныеДокумента, "Получатель", "Телефон", Ошибки, СтруктураОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДопПроверкиФЛКУведомлениеОПереадресовке(ДанныеДокумента, Ошибки)
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	Структура = МодульТНОбщегоНазначенияСервер.ДесериализоватьЗначение(ДанныеДокумента.ОформилСтруктура);
	
	Если Не Структура.Свойство("Фамилия") Или Не ЗначениеЗаполнено(Структура.Фамилия) Тогда
		
		СтруктураДанныхОшибки = ФЛК("ОформилСтруктура", "Оформил", "Не заполнен оформляющий");
		
		МодульТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(
			Ошибки, 
			"Оформил", 
			СтруктураДанныхОшибки.Ошибка,
			СтруктураДанныхОшибки.РеквизитОбъекта,
			СтруктураДанныхОшибки.ЭлементФормы);
	КонецЕсли;
	
	Если Не Структура.Свойство("Телефоны") Или Не ЗначениеЗаполнено(Структура.Телефоны) Тогда
		СтруктураДанныхОшибки = ФЛК("Оформил_Телефон", "Оформил_Телефон", "Не заполнен телефон оформляющего");
		
		МодульТНОбщегоНазначенияСервер.ДобавитьОшибкуПользователю(
			Ошибки, 
			СтруктураДанныхОшибки.РеквизитОбъекта, 
			СтруктураДанныхОшибки.Ошибка,
			СтруктураДанныхОшибки.РеквизитОбъекта,
			СтруктураДанныхОшибки.ЭлементФормы);
	КонецЕсли;
	
	СтруктураДанныхЮрЛица = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ДанныеЮрЛицаПоРоли(
		ДанныеДокумента.ДанныеЮрЛиц, "Получатель");
	
	Если СтруктураДанныхЮрЛица.Заполнена Тогда
		СтруктураОшибки = ФЛК("Получатель_Телефон", "Получатель_Телефон", "Не заполнен телефон получателя");
		МодульТНОбщегоНазначенияСервер.ПроверитьКонтактныеДанные(ДанныеДокумента, "Получатель", "Телефон", Ошибки, СтруктураОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитОтметок(ИмяРеквизита)
	
	Если ИмяРеквизита = "ДатаВремя" Тогда
		НовыйРеквизит = ФЛК("Отметки_Выгрузка.ДатаВремя", "Отметки_ВыгрузкаДатаВремя", "Не заполнена дата и время отметки");
	ИначеЕсли ИмяРеквизита = "Описание" Тогда
		НовыйРеквизит = ФЛК("Отметки_Выгрузка.Описание", "Отметки_ВыгрузкаОписание", "Не заполнено описание отметки");
	Иначе
		НовыйРеквизит = Неопределено;
	КонецЕсли;
	
	Возврат НовыйРеквизит;
	
КонецФункции

#КонецОбласти // ФЛК

#Область ЗаполнениеНаОснованииINI

Процедура ДополнитьПодстановкиГрузоотправителя(ДанныеИзИНИ, ПараметрыЗаполнения)
	
	Если Не ЗапрещеноЗаполнять("ПунктПогрузки", ПараметрыЗаполнения) Тогда
		ПунктПогрузкиВыгрузки = ДанныеИзИНИ["ПунктПогрузкиВыгрузки"];
		Если ПунктПогрузкиВыгрузки <> Неопределено Тогда
			ДанныеИзИНИ.Вставить("ПунктПогрузки", ПунктПогрузкиВыгрузки);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗапрещеноЗаполнять("Грузоотправитель", ПараметрыЗаполнения) Тогда
		ДанныеИзИНИ.Вставить("Грузоотправитель", МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеЮрЛицаИзИНИ(ДанныеИзИНИ));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПодстановкиГрузополучателя(ДанныеИзИНИ, ПараметрыЗаполнения)
	
	Если Не ЗапрещеноЗаполнять("ПунктВыгрузки", ПараметрыЗаполнения) Тогда
		ПунктПогрузкиВыгрузки = ДанныеИзИНИ["ПунктПогрузкиВыгрузки"];
		Если ПунктПогрузкиВыгрузки <> Неопределено Тогда
			ДанныеИзИНИ.Вставить("ПунктВыгрузки", ПунктПогрузкиВыгрузки);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗапрещеноЗаполнять("Грузополучатель", ПараметрыЗаполнения) Тогда
		ДанныеИзИНИ.Вставить("Грузополучатель", МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеЮрЛицаИзИНИ(ДанныеИзИНИ));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПодстановкиГрузоперевозчика(ДанныеИзИНИ, ПараметрыЗаполнения)
	
	Если Не ЗапрещеноЗаполнять("Грузоперевозчик", ПараметрыЗаполнения) Тогда
		ДанныеИзИНИ.Вставить("Грузоперевозчик", МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеЮрЛицаИзИНИ(ДанныеИзИНИ));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПодстановкиЗаказчика(ДанныеИзИНИ, ПараметрыЗаполнения)
	
	Если Не ЗапрещеноЗаполнять("Заказчик", ПараметрыЗаполнения) Тогда
		ДанныеИзИНИ.Вставить("Заказчик", МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеЮрЛицаИзИНИ(ДанныеИзИНИ));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПодстановкиВладелецОбъекта(ДанныеИзИНИ, ПараметрыЗаполнения)
	
	Если ЗапрещеноЗаполнять("ВладелецОбъекта", ПараметрыЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Другой = Новый Соответствие;
	Другой.Вставить("Контрагент", МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеЮрЛицаИзИНИ(ДанныеИзИНИ));
	
	ВладелецПункта = Новый Соответствие;
	ВладелецПункта.Вставить("Другой", Другой);
	ВладелецПункта.Вставить("Тип",    "2");
	
	Погрузка = Новый Соответствие;
	Погрузка.Вставить("ВладелецПункта", ВладелецПункта);
	
	ДанныеИзИНИ.Вставить("Погрузка", Погрузка);
	
КонецПроцедуры

Процедура ДополнитьПодстановкиОтгрузчик(ДанныеИзИНИ, ПараметрыЗаполнения)
	
	Если ЗапрещеноЗаполнять("Отгрузчик", ПараметрыЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Другой = Новый Соответствие;
	Другой.Вставить("Контрагент", МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеЮрЛицаИзИНИ(ДанныеИзИНИ));
	
	КтоПогружает = Новый Соответствие;
	КтоПогружает.Вставить("Другой", Другой);
	КтоПогружает.Вставить("Тип",    "2");
	
	Погрузка = Новый Соответствие;
	Погрузка.Вставить("КтоПогружает", КтоПогружает);
	
	ДанныеИзИНИ.Вставить("Погрузка", Погрузка);
	
КонецПроцедуры
		
Функция ЗапрещеноЗаполнять(ИмяПоля, ПараметрыЗаполнения)
	
	Возврат ПараметрыЗаполнения.ЗапретЗаполнения[ИмяПоля] <> Неопределено;
	
КонецФункции

#КонецОбласти // ЗаполнениеНаОснованииINI

Функция ТипыПоУмолчаниюДляЗаполненияНаОсновании()
	
	РезультатФункции = Новый Массив;
	
	СинонимКонфигурации = Метаданные.Синоним;
	
	ДоступныеКонфигурации    = МодульКода("Saby_ТНОбщегоНазначенияСервер").ДоступныеКонфигурации();
	ЭтоДоступнаяКонфигурация = МодульКода("Saby_ТНОбщегоНазначенияСервер").ЭтоДоступнаяКонфигурация(
		СинонимКонфигурации, ДоступныеКонфигурации);
		
	Если Не ЭтоДоступнаяКонфигурация
		Или СинонимКонфигурации = ДоступныеКонфигурации.УАТ Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	РезультатФункции.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
	РезультатФункции.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	РезультатФункции.Добавить(Тип("ДокументСсылка.ПеремещениеТоваров"));
	РезультатФункции.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	
	Если СинонимКонфигурации <> ДоступныеКонфигурации.Бух3 Тогда
		Если Метаданные.Документы.Найти("ОтгрузкаТоваровСХранения") <> Неопределено Тогда
			РезультатФункции.Добавить(Тип("ДокументСсылка.ОтгрузкаТоваровСХранения"));
		КонецЕсли;
		Если Метаданные.Документы.Найти("ПередачаТоваровХранителю") <> Неопределено Тогда
			РезультатФункции.Добавить(Тип("ДокументСсылка.ПередачаТоваровХранителю"));
		КонецЕсли;
		РезультатФункции.Добавить(Тип("ДокументСсылка.ТранспортнаяНакладная"));
	КонецЕсли;
	
	Если Метаданные.Синоним = ДоступныеКонфигурации.ЕРП Тогда 
		
		РезультатФункции.Добавить(Тип("ДокументСсылка.ВозвратСырьяДавальцу"));		
		РезультатФункции.Добавить(Тип("ДокументСсылка.ПередачаДавальцу"));
		РезультатФункции.Добавить(Тип("ДокументСсылка.ПередачаСырьяПереработчику"));
		
	КонецЕсли;
	
	Если Метаданные.Синоним = ДоступныеКонфигурации.КА Тогда
		
		РезультатФункции.Добавить(Тип("ДокументСсылка.ПередачаСырьяПереработчику"));
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПользовательскиеТипыДляЗаполненияНаОсновании()
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатФункции = ХранилищеОбщихНастроек.Загрузить("Saby", "ТипыДляЗаполненияНаОснованииДокументаТРН");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатФункции;
	
КонецФункции

#Область ДанныеДокумента

Функция ВыгрузкаДанныеПогрузка(СсылкаНаДокумент)
	
	РеквизитыТаблицы = РеквизитыПогрузка();
	РеквизитыТаблицы.Реквизиты.Добавить("Ссылка");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, РеквизитыТаблицы.Реквизиты, РеквизитыТаблицы.Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеПолучениеГруза(СсылкаНаДокумент)
	
    РеквизитыТаблицы = РеквизитыПолучениеГруза();
	РеквизитыТаблицы.Реквизиты.Добавить("Ссылка");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, РеквизитыТаблицы.Реквизиты, РеквизитыТаблицы.Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеПриемкаГруза(СсылкаНаДокумент)
	
	РеквизитыТаблицы = РеквизитыПриемкаГруза();
	РеквизитыТаблицы.Реквизиты.Добавить("Ссылка");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, РеквизитыТаблицы.Реквизиты, РеквизитыТаблицы.Таблицы);
	
КонецФункции

Функция ВыгрузкаДанныеВыдачаГруза(СсылкаНаДокумент)
	
	РеквизитыТаблицы = РеквизитыВыдачаГруза();	
	РеквизитыТаблицы.Реквизиты.Добавить("Ссылка");
	
	Возврат ДанныеИзБД(СсылкаНаДокумент, РеквизитыТаблицы.Реквизиты, РеквизитыТаблицы.Таблицы);
	
КонецФункции

#Область include_etrn_base_Document_ТранспортнаяНакладная_РеквизитыТитулов
#КонецОбласти // include_etrn_base_Document_ТранспортнаяНакладная_РеквизитыТитулов 

Функция ДанныеИзБД(СсылкаНаДокумент, Реквизиты, Таблицы)
	
	РезультатФункции = Новый Структура;
	
	РезультатФункции.Вставить("ИмяМетаданных", "Saby_ТранспортнаяНакладная");
	
	// Ссылка всегда должна быть
	Реквизиты.Добавить("Ссылка");
	
	ТекстЗапросаРеквизитов = ТекстЗапросаРеквизитов();
	ШаблонЗапросаТаблиц    = ШаблонЗапросаТаблиц();
	
	МодульКода("Saby_ТНОбщегоНазначенияСервер").ДобавитьРеквизитыИзБД(
		РезультатФункции, СсылкаНаДокумент, Реквизиты, ТекстЗапросаРеквизитов);
		
	НестандартныеЗапросыТаблиц = НестандартныеЗапросыТаблиц(Таблицы);
	
	МодульКода("Saby_ТНОбщегоНазначенияСервер").ДобавитьТаблицыИзБД(
		РезультатФункции, СсылкаНаДокумент, Таблицы, ШаблонЗапросаТаблиц, НестандартныеЗапросыТаблиц);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ТекстЗапросаРеквизитов()
	
	Возврат
	"ВЫБРАТЬ
    |	Saby_ТН.Ссылка КАК Ссылка,
    |	Saby_ТН.Номер КАК Номер,
    |	Saby_ТН.Дата КАК Дата,
    |	Saby_ТН.Владелец_НеизвестенПричина КАК Владелец_НеизвестенПричина,
    |	Saby_ТН.Владелец_Тип КАК Владелец_Тип,
    |	Saby_ТН.Выгрузка_ДатаВремя КАК Выгрузка_ДатаВремя,
    |	Saby_ТН.Выгрузка_ДатаВремяПрибыл КАК Выгрузка_ДатаВремяПрибыл,
    |	Saby_ТН.Выгрузка_ДатаВремяУбыл КАК Выгрузка_ДатаВремяУбыл,
    |	Saby_ТН.Выгрузка_КоличествоМест КАК Выгрузка_КоличествоМест,
    |	Saby_ТН.Выгрузка_МассаБрутто КАК Выгрузка_МассаБрутто,
    |	Saby_ТН.Выгрузка_МассаНетто КАК Выгрузка_МассаНетто,
    |	Saby_ТН.Выгрузка_МассаМетодРасчета КАК Выгрузка_МассаМетодРасчета,
    |	Saby_ТН.Выгрузка_Состояние КАК Выгрузка_Состояние,
    |	Saby_ТН.Отправитель_АдресДоставки КАК Отправитель_АдресДоставки,
    |	Saby_ТН.Отправитель_ВлажностьДо КАК Отправитель_ВлажностьДо,
    |	Saby_ТН.Отправитель_ВлажностьОт КАК Отправитель_ВлажностьОт,
    |	Saby_ТН.Отправитель_ДоставитьДо КАК Отправитель_ДоставитьДо,
    |	Saby_ТН.Отправитель_ДоставитьСрок КАК Отправитель_ДоставитьСрок,
    |	Saby_ТН.Отправитель_ЗаявкаДата КАК Отправитель_ЗаявкаДата,
    |	Saby_ТН.Отправитель_ЗаявкаНомер КАК Отправитель_ЗаявкаНомер,
    |	Saby_ТН.ИнициаторПереадресации КАК ИнициаторПереадресации,
    |	Saby_ТН.ИнициаторПереадресацииПодтверждение КАК ИнициаторПереадресацииПодтверждение,
    |	Saby_ТН.Отправитель_НормыПеревозки КАК Отправитель_НормыПеревозки,
    |	Saby_ТН.Отправитель_ОграничениеСкорости КАК Отправитель_ОграничениеСкорости,
    |	Saby_ТН.Отправитель_ПерегрузкаЗапрещена КАК Отправитель_ПерегрузкаЗапрещена,
    |	Saby_ТН.Отправитель_Пломба КАК Отправитель_Пломба,
    |	Saby_ТН.Отправитель_СопроводительнаяВедомость КАК Отправитель_СопроводительнаяВедомость,
    |	Saby_ТН.Отправитель_ТемператураДо КАК Отправитель_ТемператураДо,
    |	Saby_ТН.Отправитель_ТемператураОт КАК Отправитель_ТемператураОт,
    |	Saby_ТН.Отправитель_Экспедитор КАК Отправитель_Экспедитор,
    |	Saby_ТН.Комментарий КАК Комментарий,
    |	Saby_ТН.Отгрузка_НаОснованииДокумент КАК Отгрузка_НаОснованииДокумент,
    |	Saby_ТН.Отгрузка_ОтветственныйСтруктура КАК Отгрузка_ОтветственныйСтруктура,
	|	Saby_ТН.Отгрузка_ОтветственныйСтрокой КАК Отгрузка_ОтветственныйСтрокой,
    |	Saby_ТН.Отгрузка_ОтветственныйНаОсновании КАК Отгрузка_ОтветственныйНаОсновании,
    |	Saby_ТН.Отгрузка_ОтветственныйДолжность КАК Отгрузка_ОтветственныйДолжность,
    |	Saby_ТН.Перевозчик_ВыгрузкаДатаВремя КАК Перевозчик_ВыгрузкаДатаВремя,
    |	Saby_ТН.Перевозчик_ВыгрузкаДатаВремяПрибыл КАК Перевозчик_ВыгрузкаДатаВремяПрибыл,
    |	Saby_ТН.Перевозчик_ВыгрузкаДатаВремяУбыл КАК Перевозчик_ВыгрузкаДатаВремяУбыл,
    |	Saby_ТН.Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза КАК Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза,
    |	Saby_ТН.Перевозчик_ЗамечанияПоПогрузочнымРаботам КАК Перевозчик_ЗамечанияПоПогрузочнымРаботам,
    |	Saby_ТН.Перевозчик_ЗамечанияПоРазгрузочнымРаботам КАК Перевозчик_ЗамечанияПоРазгрузочнымРаботам,
    |	Saby_ТН.Перевозчик_ПогрузкаЗамечанияПоКоличеству КАК Перевозчик_ПогрузкаЗамечанияПоКоличеству,
    |	Saby_ТН.Перевозчик_ПогрузкаЗамечанияПоМассе КАК Перевозчик_ПогрузкаЗамечанияПоМассе,
    |	Saby_ТН.Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза КАК Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза,
    |	Saby_ТН.Перевозчик_ПриемкаДатаВремя КАК Перевозчик_ПриемкаДатаВремя,
    |	Saby_ТН.Перевозчик_ПриемкаДатаВремяПрибыл КАК Перевозчик_ПриемкаДатаВремяПрибыл,
    |	Saby_ТН.Перевозчик_ПриемкаДатаВремяУбыл КАК Перевозчик_ПриемкаДатаВремяУбыл,
    |	Saby_ТН.Погрузка_Адрес КАК Погрузка_Адрес,
    |	Saby_ТН.Погрузка_ДатаВремя КАК Погрузка_ДатаВремя,
    |	Saby_ТН.Погрузка_ДатаВремяПрибыл КАК Погрузка_ДатаВремяПрибыл,
    |	Saby_ТН.Погрузка_ДатаВремяУбыл КАК Погрузка_ДатаВремяУбыл,
    |	Saby_ТН.Погрузка_КоличествоМест КАК Погрузка_КоличествоМест,
    |	Saby_ТН.Погрузка_Масса КАК Погрузка_Масса,
    |	Saby_ТН.Погрузка_МассаМетодРасчета КАК Погрузка_МассаМетодРасчета,
    |	Saby_ТН.Погрузка_Состояние КАК Погрузка_Состояние,
    |	Saby_ТН.Приемка_МассаБрутто КАК Приемка_МассаБрутто,
    |	Saby_ТН.Приемка_МассаНетто КАК Приемка_МассаНетто,
    |	Saby_ТН.Выгрузка_Объем КАК Выгрузка_Объем,
    |	Saby_ТН.Приемка_КоличествоМест КАК Приемка_КоличествоМест,
    |	Saby_ТН.Направление КАК Направление,
    |	Saby_ТН.Заказчик КАК Заказчик,
    |	Saby_ТН.Заказчик_Договор КАК Заказчик_Договор,
    |	Saby_ТН.Представление КАК Представление,
    |	Saby_ТН.Валюта КАК Валюта,
    |	Saby_ТН.ДатаИзменения КАК ДатаИзменения,
    |	Saby_ТН.АдресДоставкиЗначение КАК АдресДоставкиЗначение,
    |	Saby_ТН.АдресПогрузкиЗначение КАК АдресПогрузкиЗначение,
    |	Saby_ТН.Составитель КАК Составитель,
    |	Saby_ТН.Составитель_НаОснованииДокумент КАК Составитель_НаОснованииДокумент,
    |	Saby_ТН.ОтправительСтрокой КАК ОтправительСтрокой,
    |	Saby_ТН.СоставительСтрокой КАК СоставительСтрокой,
    |	Saby_ТН.ПолучательСтрокой КАК ПолучательСтрокой,
    |	Saby_ТН.ПеревозчикСтрокой КАК ПеревозчикСтрокой,
    |	Saby_ТН.ЗаказчикСтрокой КАК ЗаказчикСтрокой,
    |	Saby_ТН.ВладелецОбъектаСтрокой КАК ВладелецОбъектаСтрокой,
    |	Saby_ТН.ОтгрузчикСтрокой КАК ОтгрузчикСтрокой
    |ИЗ
    |	Документ.Saby_ТранспортнаяНакладная КАК Saby_ТН
    |ГДЕ
    |	Saby_ТН.Ссылка = &Ссылка";
	
КонецФункции

Функция ШаблонЗапросаТаблиц()
	
	Возврат
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Документ.Saby_ТранспортнаяНакладная.%1 КАК ТЧТранспортнойНакладной
	|ГДЕ
	|	ТЧТранспортнойНакладной.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
КонецФункции

Функция НестандартныеЗапросыТаблиц(Таблицы)
	
	РезультатФункции = Новый Соответствие;
	
	Для Каждого ИмяТаблицы Из Таблицы Цикл
		
		ТекстЗапроса = Неопределено;
		
		Если ИмяТаблицы = "Грузы" Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Saby_ТН_Грузы.Ссылка КАК СсылкаДокумент,
			|	Saby_ТН_Грузы.НомерСтроки КАК НомерСтроки,
			|	Saby_ТН_Грузы.Тип КАК Тип,
			|	Saby_ТН_Грузы.Наименование КАК Наименование,
			|	Saby_ТН_Грузы.Заказчик КАК Заказчик,
			|	Saby_ТН_Грузы.Состояние КАК Состояние,
			|	Saby_ТН_Грузы.Количество КАК КоличествоМест,
			|	Saby_ТН_Грузы.Количество КАК Количество,
			|	Saby_ТН_Грузы.МассаБрутто КАК МассаБрутто,
			|	Saby_ТН_Грузы.Объем КАК Объем,
			|	Saby_ТН_Грузы.СпособУпаковки КАК Упаковка,
			|	Saby_ТН_Грузы.СпособУпаковки КАК СпособУпаковки,
			|	Saby_ТН_Грузы.ВидТары КАК ВидТары,
			|	Saby_ТН_Грузы.МассаНетто КАК МассаНетто,
			|	Saby_ТН_Грузы.Длина КАК Длина,
			|	Saby_ТН_Грузы.Ширина КАК Ширина,
			|	Saby_ТН_Грузы.Высота КАК Высота,
			|	Saby_ТН_Грузы.КоличествоПаллет КАК КоличествоПаллет,
			|	Saby_ТН_Грузы.Стоимость КАК СтоимостьВключаяНДС,
			|	Saby_ТН_Грузы.Плотность КАК Плотность,
			|	Saby_ТН_Грузы.КлючСтроки КАК КлючСтроки,
			|	Saby_ТН_Грузы.Валюта КАК Валюта,
			|	Saby_ТН_Грузы.НаименованиеГосСистемы КАК НаименованиеГосСистемы,
			|	Saby_ТН_Грузы.УчетнаяЕдиницаГосСистемы КАК УчетнаяЕдиницаГосСистемы,
			|	Saby_ТН_Грузы.ИнаяИнформацияГосСистемы КАК ИнаяИнформацияГосСистемы,
			|	ЕСТЬNULL(Saby_ТН_Грузы.ВидТары.Код, """") КАК ТараКод,
			|	ЕСТЬNULL(Saby_ТН_Грузы.Валюта.Код, """") КАК ВалютаКод
			|ИЗ
			|	Документ.Saby_ТранспортнаяНакладная.Грузы КАК Saby_ТН_Грузы
			|ГДЕ
			|	Saby_ТН_Грузы.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
		ИначеЕсли ИмяТаблицы = "ОпасныеГрузы" Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Saby_ТН_ОпаснГрузы.Ссылка КАК СсылкаДокумент,
			|	Saby_ТН_ОпаснГрузы.НомерСтроки КАК НомерСтроки,
			|	Saby_ТН_ОпаснГрузы.КлючСтроки_Грузы КАК КлючСтроки_Грузы,
			|	Saby_ОпасныеГрузы.Ссылка КАК ОпасныйГруз,
			|	Saby_ОпасныеГрузы.Наименование КАК НаименованиеОтгрузочное,
			|	Saby_ОпасныеГрузы.НомерООН КАК НомерООН,
			|	Saby_ОпасныеГрузы.ТехническоеНаименование КАК НаименованиеТехническое,
			|	Saby_ОпасныеГрузы.Комментарий КАК Комментарий,
			|	Saby_ОпасныеГрузы.Класс КАК Класс,
			|	Saby_ОпасныеГрузы.КлассификационныйКод КАК КлассификационныйКод,
			|	Saby_ОпасныеГрузы.ГруппаУпаковкиЗначение КАК ГруппаУпаковки,
			|	Saby_ОпасныеГрузы.ЗнакОпасности КАК ЗнакОпасности,
			|	Saby_ОпасныеГрузы.ОграничениеПроездаЧерезТуннели КАК КодОграниченияПроездТуннеля,
			|	Saby_ОпасныеГрузы.НазваниеРадионуклида КАК НазваниеРадионуклида,
			|	Saby_ОпасныеГрузы.ФизИХимФорма КАК ФизХимФорма,
			|	Saby_ОпасныеГрузы.МаксАктивность КАК РадиоактивныйМаксАктивность,
			|	Saby_ОпасныеГрузы.КатегорияУпаковки КАК КатегорияУпаковки,
			|	Saby_ОпасныеГрузы.ТранспортныйИндекс КАК ТранспортныйИндекс,
			|	Saby_ОпасныеГрузы.ИндексБезопасности КАК ИндексБезопасности,
			|	Saby_ОпасныеГрузы.ОпознавательныйЗнак КАК ОпознавательныйЗнак,
			|	Saby_ОпасныеГрузы.ПолнаяАктивность КАК РадиоактивныйПолнаяАктивность,
			|	Saby_ОпасныеГрузы.МассаНеттоВзрывчатый КАК МассаНеттоВзрывчатый,
			|	Saby_ОпасныеГрузы.МассаНеттоВзрывчатыйВсего КАК МассаНеттоВзрывчатыйВсего,
			|	Saby_ОпасныеГрузы.ПроцентСмеси КАК ПроцентСмеси,
			|	Saby_ОпасныеГрузы.ДатаИстеченияУдержания КАК ДатаИстеченияУдержания,
			|	Saby_ОпасныеГрузы.КонтрольнаяТемпература КАК ТемператураКонтрольная,
			|	Saby_ОпасныеГрузы.АварийнаяТемпература КАК ТемператураАварийная,
			|	Saby_ОпасныеГрузы.Представление КАК Представление
			|ИЗ
			|	Документ.Saby_ТранспортнаяНакладная.ОпасныеГрузы КАК Saby_ТН_ОпаснГрузы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Saby_ОпасныеГрузы КАК Saby_ОпасныеГрузы
			|		ПО Saby_ТН_ОпаснГрузы.ОпасныйГруз = Saby_ОпасныеГрузы.Ссылка
			|ГДЕ
			|	Saby_ТН_ОпаснГрузы.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	КлючСтроки_Грузы";
			
		ИначеЕсли ИмяТаблицы = "Водители" Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Saby_ТранспортнаяНакладнаяОтветственныеЛица.Ссылка КАК Ссылка,
			|	Saby_ТранспортнаяНакладнаяОтветственныеЛица.НомерСтроки КАК НомерСтроки,
			|	Saby_ТранспортнаяНакладнаяОтветственныеЛица.КлючСтроки КАК КлючСтроки,
			|	Saby_ТранспортнаяНакладнаяОтветственныеЛица.ИНН КАК ИНН,
			|	Saby_ТранспортнаяНакладнаяОтветственныеЛица.Серия КАК Серия,
			|	Saby_ТранспортнаяНакладнаяОтветственныеЛица.Номер КАК Номер,
			|	Saby_ТранспортнаяНакладнаяОтветственныеЛица.ДатаВыдачи КАК ДатаВыдачи,
			|	Saby_ТранспортнаяНакладнаяОтветственныеЛица.Фамилия КАК Фамилия,
			|	Saby_ТранспортнаяНакладнаяОтветственныеЛица.Имя КАК Имя,
			|	Saby_ТранспортнаяНакладнаяОтветственныеЛица.Отчество КАК Отчество,
			|	Saby_ТранспортнаяНакладнаяОтветственныеЛица.Телефоны КАК Телефоны,
			|	Saby_ТранспортнаяНакладнаяОтветственныеЛица.Роль КАК Роль
			|ИЗ
			|	Документ.Saby_ТранспортнаяНакладная.ОтветственныеЛица КАК Saby_ТранспортнаяНакладнаяОтветственныеЛица
			|ГДЕ
			|	Saby_ТранспортнаяНакладнаяОтветственныеЛица.Ссылка = &Ссылка
			|	И Saby_ТранспортнаяНакладнаяОтветственныеЛица.Роль = ЗНАЧЕНИЕ(Перечисление.Saby_РолиОтветственных.Водитель)";
			
		ИначеЕсли ИмяТаблицы = "СопроводительныеДокументы" Тогда 
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Saby_ТранспортнаяНакладнаяСопроводительныеДокументы.НомерСтроки КАК НомерСтроки,
			|	Saby_ТранспортнаяНакладнаяСопроводительныеДокументы.СопроводительныйДокумент КАК СопроводительныйДокумент,
			|	""СопроводительныеДокументы"" КАК Путь
			|ПОМЕСТИТЬ ВТ_Документы
			|ИЗ
			|	Документ.Saby_ТранспортнаяНакладная.СопроводительныеДокументы КАК Saby_ТранспортнаяНакладнаяСопроводительныеДокументы
			|ГДЕ
			|	Saby_ТранспортнаяНакладнаяСопроводительныеДокументы.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	99,
			|	Saby_ТранспортнаяНакладная.Отправитель_СопроводительнаяВедомость,
			|	""СопроводительнаяВедомость""
			|ИЗ
			|	Документ.Saby_ТранспортнаяНакладная КАК Saby_ТранспортнаяНакладная
			|ГДЕ
			|	Saby_ТранспортнаяНакладная.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	99,
			|	Saby_ТранспортнаяНакладная.Заказчик_Договор,
			|	""ЗаказчикДоговор""
			|ИЗ
			|	Документ.Saby_ТранспортнаяНакладная КАК Saby_ТранспортнаяНакладная
			|ГДЕ
			|	Saby_ТранспортнаяНакладная.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	99,
			|	Saby_ТранспортнаяНакладная.Отгрузка_НаОснованииДокумент,
			|	""ОтгрузкаНаОсновании""
			|ИЗ
			|	Документ.Saby_ТранспортнаяНакладная КАК Saby_ТранспортнаяНакладная
			|ГДЕ
			|	Saby_ТранспортнаяНакладная.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	99,
			|	Saby_ТранспортнаяНакладная.Отгрузка_ОтветственныйНаОсновании,
			|	""ОтгрузкаОтветственныйНаОсновании""
			|ИЗ
			|	Документ.Saby_ТранспортнаяНакладная КАК Saby_ТранспортнаяНакладная
			|ГДЕ
			|	Saby_ТранспортнаяНакладная.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	99,
			|	Saby_ТранспортнаяНакладная.ИнициаторПереадресацииПодтверждение,
			|	""ИнициаторПодтверждение""
			|ИЗ
			|	Документ.Saby_ТранспортнаяНакладная КАК Saby_ТранспортнаяНакладная
			|ГДЕ
			|	Saby_ТранспортнаяНакладная.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Документы.НомерСтроки КАК НомерСтроки,
			|	ВТ_Документы.Путь КАК Путь,
			|	ВЫБОР
			|		КОГДА Saby_ДокументыЭПД.Тип = ЗНАЧЕНИЕ(Перечисление.Saby_ТипыДокумента.ДоговорПеревозки)
			|			ТОГДА ""ДоговорПеревозки""
			|		КОГДА Saby_ДокументыЭПД.Тип = ЗНАЧЕНИЕ(Перечисление.Saby_ТипыДокумента.КГрузу)
			|			ТОГДА ""КГрузу""
			|		КОГДА Saby_ДокументыЭПД.Тип = ЗНАЧЕНИЕ(Перечисление.Saby_ТипыДокумента.КТранспортнойНакладной)
			|			ТОГДА ""КТранспортнойНакладной""
			|		КОГДА Saby_ДокументыЭПД.Тип = ЗНАЧЕНИЕ(Перечисление.Saby_ТипыДокумента.ОтветственныйНаОсновании)
			|			ТОГДА ""ОтветственныйНаОсновании""
			|		КОГДА Saby_ДокументыЭПД.Тип = ЗНАЧЕНИЕ(Перечисление.Saby_ТипыДокумента.ПередачиЦенностей)
			|			ТОГДА ""ПередачиЦенностей""
			|		КОГДА Saby_ДокументыЭПД.Тип = ЗНАЧЕНИЕ(Перечисление.Saby_ТипыДокумента.ПравоПереадресации)
			|			ТОГДА ""ПравоПереадресации""
			|		КОГДА Saby_ДокументыЭПД.Тип = ЗНАЧЕНИЕ(Перечисление.Saby_ТипыДокумента.СопроводительнаяВедомость)
			|			ТОГДА ""СопроводительнаяВедомость""
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК Тип,
			|	Saby_ДокументыЭПД.Наименование КАК Наименование,
			|	Saby_ДокументыЭПД.Номер КАК Номер,
			|	Saby_ДокументыЭПД.Дата КАК Дата,
			|	Saby_ДокументыЭПД.ИД КАК ИД,
			|	Saby_ДокументыЭПД.ДопСведения КАК ДопСведения,
			|	Saby_ДокументыЭПД.ДанныеЮрЛиц.(
			|		Ссылка КАК Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		Сторона КАК Сторона,
			|		Роль КАК Роль,
			|		ИНН КАК ИНН,
			|		КПП КАК КПП,
			|		ОГРН КАК ОГРН,
			|		ЮрФизЛицо КАК ЮрФизЛицо,
			|		СтруктураФИО КАК СтруктураФИО,
			|		Адрес КАК Адрес,
			|		АдресСтруктура КАК АдресСтруктура,
			|		СтранаРегистрации КАК СтранаРегистрации,
			|		КодФилиала КАК КодФилиала,
			|		НаименованиеОрганизации КАК НаименованиеОрганизации,
			|		КлючСтроки КАК КлючСтроки
			|	) КАК ДанныеЮрЛиц
			|ИЗ
			|	ВТ_Документы КАК ВТ_Документы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Saby_ДокументыЭПД КАК Saby_ДокументыЭПД
			|		ПО ВТ_Документы.СопроводительныйДокумент = Saby_ДокументыЭПД.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ТекстЗапроса <> Неопределено Тогда
			РезультатФункции.Вставить(ИмяТаблицы, ТекстЗапроса);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ДанныеДокумента

#Область Выгрузка

#Область ВыгрузитьДокументВJson

// Титул "1110339" Грузоотправитель погрузка
//
// Параметры:
// 	ДанныеДокумента - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
Функция ТитулПогрузка(ДанныеДокумента)
	
	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;
	
	МодульТНВыгрузкаСервер = МодульКода("Saby_ТНВыгрузкаСервер");
	
	// Отдельно вынесены общие данные документа
	Дата = МодульТНВыгрузкаСервер.ЗначениеДатыВремяДляВыгрузки(ДанныеДокумента.Дата, Истина);
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("Номер", ДанныеДокумента.Номер);
	СтруктураДокумента.Вставить("Дата",	 Дата);
		
	ОбщаяСтруктура.Вставить("Документ", СтруктураДокумента);
	
	// Получим данные по всем вложенным документам 
	СопроводительныеДокументы = ВложенныеДокументы(ДанныеДокумента);
	
	// Данные по участникам документооборота
	ОбщаяСтруктура.Вставить(
		"Грузоотправитель",
		МодульТНВыгрузкаСервер.ДанныеЮрЛица("Отправитель", ДанныеДокумента, Истина));
	ОбщаяСтруктура.Вставить(
		"Грузополучатель",
		МодульТНВыгрузкаСервер.ДанныеЮрЛица("Получатель",  ДанныеДокумента));
	ОбщаяСтруктура.Вставить(
		"Грузоперевозчик",
		МодульТНВыгрузкаСервер.ДанныеЮрЛица("Перевозчик",  ДанныеДокумента));
	
	Если ЗначениеЗаполнено(ДанныеДокумента.СоставительСтрокой) Тогда
		ОбщаяСтруктура.Вставить("Файл", Новый Структура);
		ОбщаяСтруктура.Файл.Вставить("Составитель", ДанныеСоставителя(ДанныеДокумента));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.ЗаказчикСтрокой) Тогда 
		ОбщаяСтруктура.Вставить("Заказчик", МодульТНВыгрузкаСервер.ДанныеЮрЛица("Заказчик", ДанныеДокумента));
	КонецЕсли;
	
	// Дополнительные документы 
	Если ЗначениеЗаполнено(СопроводительныеДокументы.РасчетПеревозки) Тогда 
		ОбщаяСтруктура.Грузоотправитель.Вставить("ОснованиеРасчета", СопроводительныеДокументы.РасчетПеревозки);
	КонецЕсли;
		
	// Адреса доставки/погрузки
	ОбщаяСтруктура.Вставить("ПунктВыгрузки", ПунктВыгрузки(ДанныеДокумента));
	ОбщаяСтруктура.Вставить("ПунктПогрузки", ПунктПогрузки(ДанныеДокумента));
	
	// Условия перевозки, переехали из погрузки... нужен тест подставновки после выноса
	ИнициаторПодтверждение = СопроводительныеДокументы.ИнициаторПодтверждение;
	УсловияПеревозки      = УсловияПеревозки(ДанныеДокумента, ИнициаторПодтверждение);
	
	ОбщаяСтруктура.Вставить("УсловияПеревозки", УсловияПеревозки);
	
	// Погрузка
	Погрузка = ДанныеПогрузки(ДанныеДокумента, 
		СопроводительныеДокументы.ОснованиеОтгрузки, СопроводительныеДокументы.ОснованиеПолномочий);
	
	ОбщаяСтруктура.Вставить("Погрузка", Погрузка);
	
	// - удалим из общей структуры сопр. документов
	СопроводительныеДокументы.Удалить("РасчетПеревозки");
	СопроводительныеДокументы.Удалить("ОснованиеОтгрузки");
	СопроводительныеДокументы.Удалить("ОснованиеПолномочий");
	
	// Сопроводительные документы
	ОбщаяСтруктура.Вставить("СопроводительныеДокументы", СопроводительныеДокументы);
	
	// Транспорт и все с ним связанное 
	ОбщаяСтруктура.Вставить(
		"ТранспортноеСредство", МодульТНВыгрузкаСервер.ТранспортНаВыгрузку(ДанныеДокумента.ТранспортныеСредства));
	
	ОбщаяСтруктура.ТранспортноеСредство.Вставить(
		"Прицеп", МодульТНВыгрузкаСервер.ПрицепыНаВыгрузку(ДанныеДокумента.ТранспортныеСредства));
	ОбщаяСтруктура.ТранспортноеСредство.Вставить(
		"СпецУсловия", МодульТНВыгрузкаСервер.СпецУсловия(ДанныеДокумента.СпецРазрешения));
	
	ОбщаяСтруктура.Вставить(
		"Водители", МодульТНВыгрузкаСервер.ВодителиНаВыгрузку(ДанныеДокумента.Водители, ДанныеДокумента.ПутевыеЛисты));
	
	// Отметки, штрафы, акты
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", ЗначениеМетаданных("Saby_ТипТитулаЭтрН.Погрузка"));
	
	ОбщаяСтруктура.Вставить("Отметки", ОтметкиПоТитулу(ДанныеДокумента, Отбор));
	
	// Груз
	ОбщаяСтруктура.Вставить("Груз", ДанныеГруза(ДанныеДокумента));
	
	// Заявка на перевозку
	ОбщаяСтруктура.Вставить("ЗаявкаНаПеревозку", ЗаявкаНаПеревозку(ДанныеДокумента));
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110340" Перевозчик приемка груза
//
// Параметры:
// 	ДанныеДокумента - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
Функция ТитулПолучениеГруза(ДанныеДокумента)
	
    Замечания = Новый Структура;
	
	МодульТНВыгрузкаСервер = МодульКода("Saby_ТНВыгрузкаСервер");
	
	ПриемкаДата = МодульТНВыгрузкаСервер.СтруктураДатаВремя(ДанныеДокумента.Перевозчик_ПриемкаДатаВремя);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяПостановки", ПриемкаДата, Истина);
	
	ПрибылДата = МодульТНВыгрузкаСервер.СтруктураДатаВремя(ДанныеДокумента.Перевозчик_ПриемкаДатаВремяПрибыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяПрибытия", ПрибылДата, Истина);
	
	УбылДата = МодульТНВыгрузкаСервер.СтруктураДатаВремя(ДанныеДокумента.Перевозчик_ПриемкаДатаВремяУбыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяУбытия", УбылДата, Истина);
	
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ВыполненныеРаботы", 
		ДанныеДокумента.Перевозчик_ЗамечанияПоПогрузочнымРаботам);
		
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "КоличествоМест",
		ДанныеДокумента.Перевозчик_ПогрузкаЗамечанияПоКоличеству);
		
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "МассаГруза",
		ДанныеДокумента.Перевозчик_ПогрузкаЗамечанияПоМассе);
		
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "СостояниеГруза",
		ДанныеДокумента.Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза);
	
	Погрузка = Новый Структура;
	Погрузка.Вставить("ЗамечанияПеревозчика", Замечания);
	
	ОбщаяСтруктура = Новый Структура;
	ОбщаяСтруктура.Вставить("Погрузка", Погрузка);
	
	// Отметки, штрафы, акты
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПолучениеГруза"));
	
	ОбщаяСтруктура.Вставить("Отметки", ОтметкиПоТитулу(ДанныеДокумента, Отбор));
		
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110341" Грузополучатель получение груза
//
// Параметры:
// 	ДанныеДокумента - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулПриемкаГруза(ДанныеДокумента)
	
    ОбщаяСтруктура = Новый Структура;
	
	ПрибылДата = МодульКода("Saby_ТНВыгрузкаСервер").СтруктураДатаВремя(ДанныеДокумента.Выгрузка_ДатаВремяПрибыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(ОбщаяСтруктура, "ДатаВремяПрибытия", ПрибылДата, Истина);
	
	УбылДата = МодульКода("Saby_ТНВыгрузкаСервер").СтруктураДатаВремя(ДанныеДокумента.Выгрузка_ДатаВремяУбыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(ОбщаяСтруктура, "ДатаВремяУбытия", УбылДата, Истина);
			
	Груз = Новый Структура;
	
	Масса = Новый Структура;
	Масса.Вставить("Брутто", ДанныеДокумента.Выгрузка_МассаБрутто);
	Масса.Вставить("Нетто",  ДанныеДокумента.Выгрузка_МассаНетто);
	Масса.Вставить(
		"МетодОпределения",
		МодульКода("Перечисления.Saby_МетодОпределенияМассы").КодПоМетодуОпределенияМассы(ДанныеДокумента.Выгрузка_МассаМетодРасчета));
	
	Груз.Вставить("Масса", Масса);
	
	Груз.Вставить("КоличествоМест", ДанныеДокумента.Выгрузка_КоличествоМест);
	Груз.Вставить("Объем",          ДанныеДокумента.Выгрузка_Объем);

	Состояние = Новый Структура;
	ДобавитьСвойствоВСтруктуруСКонтролем(Состояние, "Общее", ДанныеДокумента.Выгрузка_Состояние);
	
	ДобавитьСвойствоВСтруктуруСКонтролем(ОбщаяСтруктура, "Состояние", Состояние);
	ДобавитьСвойствоВСтруктуруСКонтролем(Груз,           "Состояние", Состояние);
	
	ОбщаяСтруктура.Вставить("Груз", Груз);
	
	// Груз - пока игнорим.... хз надо ли мне выгружать
	// КоличествоМест
	// КоличествоПаллет
	// МассаБрутто
	// МассаНетто
	// Наименование
	// Объем
	// Плотность
	// Состояние
	
	// Отметки, штрафы, акты
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПриемкаГруза"));
	
	Итог = Новый Структура;
	Итог.Вставить("Выгрузка",      ОбщаяСтруктура);
	Итог.Вставить("Отметки",       ОтметкиПоТитулу(ДанныеДокумента, Отбор));
	Итог.Вставить("ПунктВыгрузки", ПунктВыгрузки(ДанныеДокумента, Истина));
	
	Возврат Итог;
	
КонецФункции

// Титул "1110342" Выдача груза перевозчиком
//
// Параметры:
// 	ДанныеДокумента - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулВыдачаГруза(ДанныеДокумента)
	
	Замечания = Новый Структура;
	
	МодульТНВыгрузкаСервер = МодульКода("Saby_ТНВыгрузкаСервер");
	
	ПостановкаДата = МодульТНВыгрузкаСервер.СтруктураДатаВремя(ДанныеДокумента.Перевозчик_ВыгрузкаДатаВремя);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяПостановки", ПостановкаДата, Истина);
	
	ПрибылДата = МодульТНВыгрузкаСервер.СтруктураДатаВремя(ДанныеДокумента.Перевозчик_ВыгрузкаДатаВремяПрибыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяПрибытия", ПрибылДата, Истина); 
	
	УбылДата = МодульТНВыгрузкаСервер.СтруктураДатаВремя(ДанныеДокумента.Перевозчик_ВыгрузкаДатаВремяУбыл);
	ДобавитьСвойствоВСтруктуруСКонтролем(Замечания, "ДатаВремяУбытия", УбылДата, Истина);
	
	ДобавитьСвойствоВСтруктуруСКонтролем(
		Замечания, "ВыполненныеРаботы", ДанныеДокумента.Перевозчик_ЗамечанияПоРазгрузочнымРаботам);
	ДобавитьСвойствоВСтруктуруСКонтролем(
		Замечания, "СостояниеГруза",    ДанныеДокумента.Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза);
	
	СтруктураЗамечаний = Новый Структура;
	СтруктураЗамечаний.Вставить("ЗамечанияПеревозчика", Замечания);
	
	// Отметки, штрафы, акты
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ВыдачаГруза"));
	Отметки = ОтметкиПоТитулу(ДанныеДокумента, Отбор);
	
	ОбщаяСтруктура = Новый Структура;
	ОбщаяСтруктура.Вставить("Выгрузка", СтруктураЗамечаний);
	ОбщаяСтруктура.Вставить("Отметки",  Отметки);
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110343" Перевозчик переадресовка
//
// Параметры:
// 	ДанныеТитула - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулПереадресовка(ДанныеТитула)
	
	МодульТНВыгрузкаСервер = МодульКода("Saby_ТНВыгрузкаСервер");
	
	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;
	
	// Пункт выгрузки
	ОбщаяСтруктура.Вставить("ПунктВыгрузки", ПунктВыгрузки(ДанныеТитула));
	
	ОбщаяСтруктура.Вставить("Грузополучатель", МодульТНВыгрузкаСервер.ДанныеЮрЛица("Получатель", ДанныеТитула));
	
	ОбщаяСтруктура.Вставить("Причина", ДанныеТитула.Причина);
	
	Переадресовка = Новый Структура;
	Переадресовка.Вставить(
		"ДатаВремя",
		МодульТНВыгрузкаСервер.СтруктураДатаВремя(ДанныеТитула.Переадресовка_ДатаВремя, , Истина));
	
	// Отметки
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", ЗначениеМетаданных("Saby_ТипТитулаЭтрН.Переадресовка"));
	
	ОбщаяСтруктура.Вставить("Отметки", ОтметкиПоТитулу(ДанныеТитула, Отбор));
		
	// Основание
	Основание = ДанныеТитула.ПереадресовкаНаОсновании;
	Если ЗначениеЗаполнено(Основание) Тогда  
		
		ДанныеДок = РеквизитыОдиночногоДокументаЭТрН(Основание);
		
		Переадресовка.Вставить("Основание", Новый Структура);
			
		ДанныеДок.Вставить("ДатаВремя", МодульТНВыгрузкаСервер.СтруктураДатаВремя(ДанныеДок.ДатаВремя, , Истина));
		Переадресовка.Основание.Вставить("Документ", ДанныеДок);
		
	КонецЕсли;
	
	ОбщаяСтруктура.Вставить("Переадресовка", Переадресовка);
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1167009" Уведомление о переадресовке
//
// Параметры:
// 	ДанныеТитула - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулУведомлениеОПереадресовке(ДанныеТитула)

	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;
	
	// Пункт выгрузки
	ОбщаяСтруктура.Вставить("ПунктВыгрузки", ПунктВыгрузки(ДанныеТитула));
	
	ОбщаяСтруктура.Вставить("Грузополучатель", МодульКода("Saby_ТНВыгрузкаСервер").ДанныеЮрЛица("Получатель", ДанныеТитула));
	
	Уведомление = Новый Структура;	
	Уведомление.Вставить("Причина", ДанныеТитула.Причина);
	
	Если ЗначениеЗаполнено(ДанныеТитула.ОформилСтруктура) Тогда
		Оформил = Оформил(ДанныеТитула.ОформилСтруктура);
		Уведомление.Вставить("Отправитель", Оформил);
	КонецЕсли;
	
	// Основание
	Основание = ДанныеТитула.ПереадресовкаНаОсновании;
	Если ЗначениеЗаполнено(Основание) Тогда 
		
	    ДанныеДокумента = РеквизитыОдиночногоДокументаЭТрН(Основание);
				
		СопроводительныеДокументы = Новый Структура;
		СопроводительныеДокументы.Вставить("Отгрузка", ДанныеДокумента);
		
		ОбщаяСтруктура.Вставить("СопроводительныеДокументы", СопроводительныеДокументы);
		
	КонецЕсли;
		
	Переадресовка = Новый Структура;
	Переадресовка.Вставить("Уведомление", Уведомление);
	
	ОбщаяСтруктура.Вставить("Переадресовка", Переадресовка);
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110344" Перевозчик замена водителя 
//
// Параметры:
// 	ДанныеТитула - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулЗаменаВодителя(ДанныеТитула)
	
	МассивДокументов = Новый Массив();
	
	ОснованиеЗамены = ДанныеТитула.ПричинаЗамены;
	Если Не ЗначениеЗаполнено(ОснованиеЗамены) Тогда
		ОснованиеЗамены = ДанныеТитула.ДокументЗамены;
	КонецЕсли;
	
	Если ТипЗнч(ОснованиеЗамены) = Тип("СправочникСсылка.Saby_ДокументыЭПД") Тогда
		МассивДокументов.Добавить(ОснованиеЗамены);
	КонецЕсли;
	
	ОснованиеПередачиГрузаТС = ДанныеТитула.ОснованиеПередачиГрузаТС;
	Если ЗначениеЗаполнено(ОснованиеПередачиГрузаТС) Тогда
		МассивДокументов.Добавить(ОснованиеПередачиГрузаТС);
	КонецЕсли;
	
    ДанныеДокументов = МодульКода("Saby_ТНОбщегоНазначенияСервер").РеквизитыДокументовСбис(МассивДокументов);
	
	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;
	ОбщаяСтруктура.Вставить("ТранспортноеСредство", Новый Структура);
	
	МодульТНВыгрузкаСервер = МодульКода("Saby_ТНВыгрузкаСервер");
	
	// Водители + основание передачи....
	Если ЗначениеЗаполнено(ДанныеТитула.Водители) Тогда 
		Водители = МодульТНВыгрузкаСервер.ВодителиНаВыгрузку(ДанныеТитула.Водители, ДанныеТитула.ПутевыеЛисты);
		ОбщаяСтруктура.Вставить("Водители", Водители);
	КонецЕсли;
	
	// Транспорт и все с ним связанное
	Транспорт = МодульТНВыгрузкаСервер.ТранспортНаВыгрузку(ДанныеТитула.ТранспортныеСредства);
	Если ЗначениеЗаполнено(Транспорт.РегНомер) Тогда
		ОбщаяСтруктура.ТранспортноеСредство = Транспорт;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеТитула.СпецРазрешения) Тогда
		СпецУсловия = МодульТНВыгрузкаСервер.СпецУсловия(ДанныеТитула.СпецРазрешения);
		ОбщаяСтруктура.ТранспортноеСредство.Вставить("СпецУсловия", СпецУсловия); 
	КонецЕсли;

	Если ЗначениеЗаполнено(ОснованиеПередачиГрузаТС) Тогда
		
		ДанныеДокументаПередачи = ДанныеДокументов.Получить(ОснованиеПередачиГрузаТС);
		
		ДокументПередачи = Новый Структура; 
		ДокументПередачи.Вставить("ПередачаГруза", ДанныеДокументаПередачи);
		
		ОбщаяСтруктура.ТранспортноеСредство.Вставить("Документ", ДокументПередачи);
		
	КонецЕсли;
	
	// Прицепы
	Прицепы = МодульТНВыгрузкаСервер.ПрицепыНаВыгрузку(ДанныеТитула.ТранспортныеСредства);
	Если Прицепы.Количество() > 0 Тогда
		ОбщаяСтруктура.ТранспортноеСредство.Вставить("Прицеп", Прицепы);
	КонецЕсли;
	
	// Отметки
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ЗаменаВодителяТС"));
	
	ОбщаяСтруктура.Вставить("Отметки", ОтметкиПоТитулу(ДанныеТитула, Отбор));
	
	// Основание
	Если ЗначениеЗаполнено(ОснованиеЗамены) Тогда  
		
		ДанныеОснования = Новый Структура;
		
		Если ТипЗнч(ОснованиеЗамены) = Тип("Строка") Тогда 
			ДанныеОснования.Вставить("Текст", ОснованиеЗамены);
		Иначе 	
					
			ДанныеДок = ДанныеДокументов.Получить(ОснованиеЗамены);
			ДанныеДок.Удалить("Тип");
			ДанныеДок.Удалить("Ссылка");
			
			ДанныеОснования.Вставить("Документ", ДанныеДок);
			
		КонецЕсли;
		
		ЗаменаВодителяТС = Новый Структура;
		ЗаменаВодителяТС.Вставить("Основание", ДанныеОснования);
		ЗаменаВодителяТС.Вставить(
			"ДатаВремя",
			МодульТНВыгрузкаСервер.СтруктураДатаВремя(ДанныеТитула.ДатаВремяЗамены, , Истина));
		
		ОбщаяСтруктура.Вставить("ЗаменаВодителяТС", ЗаменаВодителяТС);
		
	КонецЕсли;
		
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110345" Изменение стоимости 
//
// Параметры:
// 	ДанныеТитула - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулИзменениеСтоимости(ДанныеТитула)
	
	// Собираем общую структуру документа
	ОбщаяСтруктура = Новый Структура;

    Перевозчик = Новый Структура;
	Перевозчик.Вставить("Название", Новый Структура);
	Перевозчик.Название.Вставить("Полное",  СокрЛП(ДанныеТитула.Перевозчик));
	Перевозчик.Название.Вставить("Краткое", СокрЛП(ДанныеТитула.Перевозчик));
	
	Если ЗначениеЗаполнено(ДанныеТитула.НомерСчетаПеревозчик) Тогда
		ДанныеБанкСчета = Новый Структура;
		ДанныеБанкСчета.Вставить("НомерСчета", ДанныеТитула.НомерСчетаПеревозчик);
		ДанныеБанкСчета.Вставить("Банк",       Новый Структура);
		
		ДанныеБанкСчета.Банк.Вставить("Наименование", Новый Структура);
		ДанныеБанкСчета.Банк.Наименование.Вставить("Полное", ДанныеТитула.БанкНазваниеПеревозчик);

		ДанныеБанкСчета.Банк.Вставить("БИК",      ДанныеТитула.БанкБИКПеревозчик);
		ДанныеБанкСчета.Банк.Вставить("КоррСчет", ДанныеТитула.БанкКоррСчетПеревозчик);
		
		Перевозчик.Вставить("Реквизиты", Новый Структура);
		Перевозчик.Реквизиты.Вставить("Банковские", ДанныеБанкСчета);
	КонецЕсли;
	
	ОбщаяСтруктура.Вставить("Грузоперевозчик", Перевозчик);
	
	СтруктураСтоимости = Новый Структура;	
	СтруктураСтоимости.Вставить("ВключаяНДС",  ДанныеТитула.Сумма); 
	СтруктураСтоимости.Вставить("БезНДС",      ДанныеТитула.СуммаБезНДС);     
	СтруктураСтоимости.Вставить("Расчет",      ДанныеТитула.Условия);	
		
	// рубль по умолчанию. RUB - символьный код. 
	// добавить валюту. реквизит документа. Наименование - символьный код
	СтруктураСтоимости.Вставить("Валюта", Новый Структура);
	СтруктураСтоимости.Валюта.Вставить("Код",          "643");
	СтруктураСтоимости.Валюта.Вставить("Наименование", "Российский рубль"); 

	// Налог
	СтруктураСтоимости.Вставить("Налог", Новый Структура);
    СтруктураСтоимости.Налог.Вставить("Сумма",  ДанныеТитула.СуммаНДС);
	СтруктураСтоимости.Налог.Вставить(
		"Ставка", МодульКода("Saby_ТНОбщегоНазначенияСервер").ЗначениеСтавкиНДС(ДанныеТитула.Ставка));
	
	ОбщаяСтруктура.Вставить("СтоимостьПеревозки", СтруктураСтоимости);
	
	Возврат ОбщаяСтруктура;
	
КонецФункции

// Титул "1110346" Согласование стоимости 
//
// Параметры:
// 	ДанныеТитула - Структура - структура данных полученых из объекта выгрузки
//
// Возвращаемое значение:
//	Структура - данные подстановок по титулу
//
Функция ТитулСогласованиеСтоимости(ДанныеТитула)

	// Собираем общую структуру документа	
	ОбщаяСтруктура = Новый Структура; 
	
	КлючПолногоНаименования = "Полное";
	
	Грузоотправитель = Новый Структура;
	Грузоотправитель.Вставить("Название", Новый Структура);
	Грузоотправитель.Название.Вставить(КлючПолногоНаименования, СокрЛП(ДанныеТитула.Отправитель));
	Грузоотправитель.Название.Вставить("Краткое",               СокрЛП(ДанныеТитула.Отправитель));
	
	Если ЗначениеЗаполнено(ДанныеТитула.НомерСчета) Тогда
		ДанныеБанкСчета = Новый Структура;
		ДанныеБанкСчета.Вставить("НомерСчета", ДанныеТитула.НомерСчета);
		ДанныеБанкСчета.Вставить("Банк",       Новый Структура);
		
		ДанныеБанкСчета.Банк.Вставить("Наименование", Новый Структура);
		ДанныеБанкСчета.Банк.Наименование.Вставить(КлючПолногоНаименования, ДанныеТитула.БанкНазвание);

		ДанныеБанкСчета.Банк.Вставить("БИК",      ДанныеТитула.БанкБИК);
		ДанныеБанкСчета.Банк.Вставить("КоррСчет", ДанныеТитула.БанкКоррСчет);
					
		Грузоотправитель.Вставить("Реквизиты", Новый Структура);
		Грузоотправитель.Реквизиты.Вставить("Банковские", ДанныеБанкСчета);
	КонецЕсли;
		
	ОбщаяСтруктура.Вставить("Грузоотправитель", Грузоотправитель);
		
	// из формы
	Если ДанныеТитула.ТипПлательщик <> "Отправитель" Тогда 
		
		ИнойПлательщик = Новый Структура;
		
		ИнойПлательщик.Вставить("Название", Новый Структура);
		ИнойПлательщик.Название.Вставить(КлючПолногоНаименования, СокрЛП(ДанныеТитула.Плательщик));
		
		// Основание                                          
		Основание = ДанныеТитула.ОснованиеОплаты;
		Если ЗначениеЗаполнено(Основание) Тогда 
			
			ДанныеДокумента = РеквизитыОдиночногоДокументаЭТрН(Основание);
			
			ИнойПлательщик.Вставить("Основание", ДанныеДокумента);
						
		КонецЕсли;
		
		ОбщаяСтруктура.Вставить("ИнойПлательщик", ИнойПлательщик); 		
		
	КонецЕсли;
		
	Возврат ОбщаяСтруктура;
	
КонецФункции

#Область Груз

Функция ДанныеГруза(ДанныеДокумента)
	
	ДанныеГруза = Новый Массив;
		
	Для Каждого Строка Из ДанныеДокумента.Грузы Цикл 
		
		ПараметрыСтроки = ШаблонПозицииГруза();		
		ЗаполнитьЗначенияСвойствГруза(ПараметрыСтроки, Строка);
				
		// обработаем данные строки и перейдем к связанным данным		
		СвязанныеДанные = СвязанныеДанныеСГрузом(ДанныеДокумента, Строка.КлючСтроки);
		
		Если СвязанныеДанные.Контейнеры.Номер.Количество()  Тогда 							
			ПараметрыСтроки.Вставить("Контейнер", СвязанныеДанные.Контейнеры);
			ПараметрыСтроки.Наименование = "Контейнер"; 
		КонецЕсли;
		
		Если СвязанныеДанные.Маркировки.Количество() Тогда 
			ПараметрыСтроки.Вставить("Маркировка",  СвязанныеДанные.Маркировки);
		КонецЕсли;
		
		Если СвязанныеДанные.ОпасныеГрузы.Количество() Тогда 
			ПараметрыСтроки.Вставить("ОпасныйГруз", СвязанныеДанные.ОпасныеГрузы);  		
		КонецЕсли;
		
		Если СвязанныеДанные.СведенияГосСистем.Количество() Тогда 
			
			СведенияГИС = Новый Структура;           
			// заполним по данным строки 
			СведенияГИС.Вставить("Наименование",     Строка.НаименованиеГосСистемы);
			СведенияГИС.Вставить("УчетнаяЕдиница",   Строка.УчетнаяЕдиницаГосСистемы);
			СведенияГИС.Вставить("ДругаяИнформация", Строка.ИнаяИнформацияГосСистемы);
			СведенияГИС.Вставить("Идентификатор",    СвязанныеДанные.СведенияГосСистем);
			
			ПараметрыСтроки.Вставить("СведенияГИС", СведенияГИС);
			
			ПараметрыСтроки.УчетГИС = Истина;
			
		КонецЕсли;
					
		ДанныеГруза.Добавить(ПараметрыСтроки);
		
	КонецЦикла;
	
	СтруктураГруза = Новый Структура; 
	СтруктураГруза.Вставить("ИнформационноеПоле", Новый Структура);	
	СтруктураГруза.Вставить("Позиция",            ДанныеГруза);
	
	СтоимостьВсего = ДанныеДокумента.Грузы.Итог("СтоимостьВключаяНДС");
	Если СтоимостьВсего > 0 Тогда
		СтруктураСтоимости = Новый Структура;	
		СтруктураСтоимости.Вставить("Всего",  СтоимостьВсего);
		СтруктураСтоимости.Вставить("Валюта", Новый Структура);
		
		// рубль по умолчанию. RUB - символьный код. 
		// добавить валюту. реквизит документа. Наименование - символьный код
		СтруктураСтоимости.Валюта.Вставить("Код",          "643");
		СтруктураСтоимости.Валюта.Вставить("Наименование", "Российский рубль"); 
		
		СтруктураГруза.Вставить("Стоимость", СтруктураСтоимости);
	КонецЕсли;
		
	Возврат СтруктураГруза;
	
КонецФункции

// Поиск и заполнение данных по связанным табличным частям
//
// Параметры:
//  ДанныеДокумента - Соответствие - данные документа с онлайна
//  КлючСтроки - Число - числовое значение ключа строки
//
// Возвращаемое значение:
//   Структура - данные связанные с гурзом (контейнеры, маркировки, опасные грузы)
//
Функция СвязанныеДанныеСГрузом(ДанныеДокумента, КлючСтроки)
		
	Контейнеры = Новый Структура;
	Контейнеры.Вставить("Номер",      Новый Массив);
	Контейнеры.Вставить("Количество", 0);
	
	Маркировки        = Новый Массив;
	ОпасныеГрузы      = Новый Массив;	
	СведенияГосСистем = Новый Массив;	
		
	Отбор = Новый Структура;
	Отбор.Вставить("КлючСтроки_Грузы", КлючСтроки);
	
	НайденныеСтроки = ДанныеДокумента.Контейнеры.НайтиСтроки(Отбор);
	Для Каждого Контейнер Из НайденныеСтроки Цикл 
		
		Структура = СтруктураСоЗначением(Контейнер.Номер);
		Контейнеры.Номер.Добавить(Структура); 
		
		Контейнеры.Количество = Контейнеры.Количество + Контейнер.Количество;
		
	КонецЦикла;	
	
	НайденныеСтроки = ДанныеДокумента.Маркировки.НайтиСтроки(Отбор);
	Для Каждого Маркировка Из НайденныеСтроки Цикл 		
		Структура = СтруктураСоЗначением(Маркировка.Значение);
		Маркировки.Добавить(Структура);				
	КонецЦикла;
	
	ОпасныеГрузыИзДокумента = ДанныеДокумента.ОпасныеГрузы.НайтиСтроки(Отбор);
	МодульКода("Saby_ТНВыгрузкаСервер").ЗаполнитьОпасныйГрузДляВыгрузки(ОпасныеГрузыИзДокумента, ОпасныеГрузы);
	
	НайденныеСтроки = ДанныеДокумента.СведенияГосСистем.НайтиСтроки(Отбор);
	Для Каждого Сведения Из НайденныеСтроки Цикл 		
		Структура = СтруктураСоЗначением(Сведения.Идентификатор);
		СведенияГосСистем.Добавить(Структура);
	КонецЦикла;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Контейнеры",        Контейнеры);
	СтруктураДанных.Вставить("Маркировки",        Маркировки);
	СтруктураДанных.Вставить("ОпасныеГрузы",      ОпасныеГрузы);
	СтруктураДанных.Вставить("СведенияГосСистем", СведенияГосСистем);
	
	Возврат СтруктураДанных;
		
КонецФункции

Функция СтруктураСоЗначением(Значение)
	
	Возврат Новый Структура("Значение", Значение);
	
КонецФункции

Функция ШаблонПозицииГруза()  
	
	СтруктураГруза = Новый Структура;
	СтруктураГруза.Вставить("Наименование",       "");
	СтруктураГруза.Вставить("КодНоменклатуры",    "");
	СтруктураГруза.Вставить("Состояние",          "");
	СтруктураГруза.Вставить("Упаковка",           "");
	СтруктураГруза.Вставить("ТараКод",            "");
	
	СтруктураГруза.Вставить("УчетГИС",            Ложь);
	СтруктураГруза.Вставить("ДопИнформация",      "");
	СтруктураГруза.Вставить("Заказчик",           Новый Структура);
	
	// Параметры
	ПараметрыГруза = МодульКода("Saby_ТНВыгрузкаСервер").ШаблонПараметровГруза();
	
	Масса = Новый Структура; 
	Масса.Вставить("Нетто",  0);
	Масса.Вставить("Брутто", 0);	
	ПараметрыГруза.Вставить("Масса", Масса);
	
	СтруктураГруза.Вставить("Параметры", ПараметрыГруза);
	
	// Стоимость
	Стоимость = Новый Структура;
	
	Валюта = Новый Структура;		
	Валюта.Вставить("Код",          "");
	Валюта.Вставить("Наименование", "");
	
	Стоимость.Вставить("Валюта",     Валюта);	
	Стоимость.Вставить("ВключаяНДС", 0);
		
	СтруктураГруза.Вставить("Стоимость", Стоимость);
	
	Возврат СтруктураГруза;
	
КонецФункции

Процедура ЗаполнитьЗначенияСвойствГруза(ПараметрыСтроки, Строка)
	
	// Заполнили что смогли 
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, Строка);
	
	// Параметры             
	Параметры = ПараметрыСтроки.Параметры;
	ЗаполнитьЗначенияСвойств(Параметры, Строка);
	Параметры.Масса.Нетто  = Строка.МассаНетто; 
	Параметры.Масса.Брутто = Строка.МассаБрутто;	
	
	Если Строка.СтоимостьВключаяНДС = 0 Тогда
		ПараметрыСтроки.Удалить("Стоимость");
	Иначе
		ПараметрыСтроки.Стоимость.ВключаяНДС = Строка.СтоимостьВключаяНДС;
		Если ЗначениеЗаполнено(Строка.ВалютаКод) Тогда 
			ПараметрыСтроки.Стоимость.Валюта.Код = Строка.ВалютаКод; 
			// Наименование может меняться - Рубль, Рубль РФ...
		Иначе 
			ПараметрыСтроки.Стоимость.Валюта.Код          = "643";
			ПараметрыСтроки.Стоимость.Валюта.Наименование = "Российский рубль";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Груз 

#Область СопроводительныеДокументы

Функция ВложенныеДокументы(ДанныеДокумента)
	
	КГрузу            = Новый Массив;
	КТрН              = Новый Массив;
	ПередачиЦенностей = Новый Массив;
	
	УдаляемыеКолонки = Новый Массив;
	УдаляемыеКолонки.Добавить("Тип");
	УдаляемыеКолонки.Добавить("НомерСтроки");
	УдаляемыеКолонки.Добавить("ДанныеЮрЛиц");
	
	Для Каждого Строка Из ДанныеДокумента.СопроводительныеДокументы Цикл 
		
		СтруктураДокумента = МодульКода("Saby_ТНОбщегоНазначенияСервер").РеквизитыДокументаСбисИзСтрокиТаблицы(Строка);
		
		МодульКода("Saby_ТНОбщегоНазначенияСервер").УдалитьСвойстваИзСтруктуры(СтруктураДокумента, УдаляемыеКолонки);
		
		Если Строка.Путь = "СопроводительныеДокументы" Тогда 
			
			Если Строка.Тип = "КГрузу" Тогда
				КГрузу.Добавить(СтруктураДокумента);
			ИначеЕсли Строка.Тип = "ПередачиЦенностей" Тогда
				ПередачиЦенностей.Добавить(СтруктураДокумента);					
			Иначе 	
				// Общие к Транспортной накладной 
				КТрН.Добавить(СтруктураДокумента);				
			КонецЕсли; 
			
		ИначеЕсли Строка.Путь = "ЗаказчикДоговор" Тогда 
			 ДоговорПеревозки = СтруктураДокумента;
			 
		ИначеЕсли Строка.Путь = "ОтгрузкаНаОсновании" Тогда
			ОтгрузкаОснование = СтруктураДокумента;
			
		ИначеЕсли Строка.Путь = "ОтгрузкаОтветственныйНаОсновании" Тогда	
			ОснованиеПолномочий = СтруктураДокумента;
			
		ИначеЕсли Строка.Путь = "ИнициаторПодтверждение" Тогда	
			ИнициаторПодтверждение = СтруктураДокумента;
			
		Иначе
			СопроводительнаяВедомость = СтруктураДокумента;
		КонецЕсли;	
		
	КонецЦикла;	
	
	// Все сопроводительные документы  
	Структура = Новый Структура;
	Структура.Вставить("РасчетПеревозки",          Новый Структура);
	Структура.Вставить("ДоговорНаУслугиПеревозки", ДоговорПеревозки);
	Структура.Вставить("ТранспортнаяНакладная",    КТрН);   // *
	Структура.Вставить("Груз",                     КГрузу); // *
	Структура.Вставить("Отгрузка",                 ПередачиЦенностей); // *
	Структура.Вставить("Ведомость",                СопроводительнаяВедомость);
	Структура.Вставить("ОснованиеОтгрузки",        ОтгрузкаОснование);
	Структура.Вставить("ОснованиеПолномочий",      ОснованиеПолномочий);
	Структура.Вставить("ИнициаторПодтверждение",   ИнициаторПодтверждение);
	
    Возврат Структура;

КонецФункции

#КонецОбласти // СопроводительныеДокументы  

#Область Отметки

Функция ОтметкиПоТитулу(ДанныеДокумента, Отбор = Неопределено)
	
	Отметки = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").НайтиСтрокиУниверсально(ДанныеДокумента.Отметки, Отбор);
	
	КолонкиИсключение = Новый Массив;
	КолонкиИсключение.Добавить("НомерСтроки");
	КолонкиИсключение.Добавить("Этап");
	КолонкиИсключение.Добавить("Роль");
	КолонкиИсключение.Добавить("КлючСтроки"); 
	
	МассивОтметок = Новый Массив;
	
	Для Каждого Строка Из Отметки Цикл  
		
		АктыИШтрафы = АктыИШтрафы(Строка.КлючСтроки, ДанныеДокумента);
		
		Отметка = Новый Структура;
		Отметка.Вставить("ДатаВремя",  МодульКода("Saby_ТНВыгрузкаСервер").СтруктураДатаВремя(Строка.ДатаВремя));
		Отметка.Вставить("Описание",  Строка.Описание);
		
		Если АктыИШтрафы.АктыВзвешивания.Количество() Тогда 
			Отметка.Вставить("АктыВзвешивания", АктыИШтрафы.АктыВзвешивания);
		КонецЕсли;
			
		Если АктыИШтрафы.АктыКоммерческие.Количество() Тогда 
			Отметка.Вставить("Акты", АктыИШтрафы.АктыКоммерческие); 
		КонецЕсли;
		
		Если АктыИШтрафы.Штраф.Количество() Тогда 
			Отметка.Вставить("Штрафы", АктыИШтрафы.Штраф);		
		КонецЕсли;
				
		МассивОтметок.Добавить(Отметка);
		
	КонецЦикла;
	
	СтруктураОтметок = Новый Структура;
	СтруктураОтметок.Вставить("Отметка", МассивОтметок);
	
	Возврат СтруктураОтметок;
	
КонецФункции

Функция АктыИШтрафы(КлючСтроки, ДанныеДокумента)
	
	МассивАкты    = Новый Массив; 
	МассивАктыКом = Новый Массив;
    МассивШтрафы  = Новый Массив;
			
	КолонкиИсключение = Новый Массив;
	КолонкиИсключение.Добавить("НомерСтроки");
	КолонкиИсключение.Добавить("КлючСтроки_Отметки");
	
	Отбор = Новый Структура;
	Отбор.Вставить("КлючСтроки_Отметки", КлючСтроки);
	
	МассивАктовРасчет = Новый Массив;
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	Если МодульТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(ДанныеДокумента, "Акты") Тогда
	
		НайденныеСтроки = МодульТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ДанныеДокумента.Акты, Отбор);
		Для Каждого Строка Из НайденныеСтроки Цикл 		
			МассивАктовРасчет.Добавить(Строка.Документ);	
		КонецЦикла;
		
		ДанныеДокументов = МодульКода("Saby_ТНОбщегоНазначенияСервер").РеквизитыДокументовСбис(МассивАктовРасчет);
		Для Каждого Док Из МассивАктовРасчет Цикл
			
			ДанныеАкта = ДанныеДокументов.Получить(Док);
			Если ДанныеАкта.Тип = ЗначениеМетаданных("Saby_ТипыДокумента.АктВзвешивания") Тогда 
			    МассивАкты.Добавить(ДанныеАкта);
			Иначе 
				МассивАктыКом.Добавить(ДанныеАкта);
			КонецЕсли;
						
			ДанныеАкта.Удалить("Тип");
			ДанныеАкта.Удалить("Ссылка");
					
		КонецЦикла;
		
	КонецЕсли;
	
	Если МодульТНОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойство(ДанныеДокумента, "Штрафы") Тогда
	
	    НайденныеСтроки = МодульТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(ДанныеДокумента.Штрафы, Отбор);
			
		Для Каждого Строка Из НайденныеСтроки Цикл 
			
			Штраф = Новый Структура;
			Штраф.Вставить("Итог",       Строка.Сумма); 
			Штраф.Вставить("Количество", Строка.Количество);
			Штраф.Вставить("Расчет",     Строка.Расчет);
			
			Штраф.Вставить("Валюта", Новый Структура);
			Штраф.Валюта.Вставить("Итог",    Строка.Сумма);
			Штраф.Валюта.Вставить("КодОКВ",  "643");
			Штраф.Валюта.Вставить("НаимОКВ", "Российский рубль");
							
			МассивШтрафы.Добавить(Штраф);               
			
		КонецЦикла;
		
	КонецЕсли;
	
	Структура = Новый Структура; 
	Структура.Вставить("АктыКоммерческие", МассивАктыКом);
	Структура.Вставить("АктыВзвешивания",  МассивАкты);
	Структура.Вставить("Штраф",            МассивШтрафы);
		
	Возврат Структура;
	
КонецФункции

#КонецОбласти // Отметки

#Область Этапы

// Условия перевозки согласно формату подстановок
//  Параметры:
//   ДанныеДокумента - Структура - структура данных полученых из объекта выгрузки
//  ИнициаторПодтверждение - Структура - данные документа подтверждающего полномочия инициатора
//  Возвращаемое значение:
//   Структура - данные условий перевозки
//
Функция УсловияПеревозки(ДанныеДокумента, ИнициаторПодтверждение)
	
	// Условия перевозки
    СтруктураУсловия = Новый Структура;
		
	// Климатический режим
	СтруктураКлимат = Новый Структура;
	ТемператураОт = ДанныеДокумента.Отправитель_ТемператураОт;
	ТемператураДо = ДанныеДокумента.Отправитель_ТемператураДо;
	
	ТемператураЗаполнена = ЗначенияЗаполнены(ТемператураОт, ТемператураДо);	
	Если ТемператураЗаполнена Тогда  
		СтруктураКлимат.Вставить("Температура", Новый Структура);
		СтруктураКлимат.Температура.Вставить("Минимальная",  ТемператураОт);
		СтруктураКлимат.Температура.Вставить("Максимальная", ТемператураДо);
	КонецЕсли;
			
	ВлажностьОт = ДанныеДокумента.Отправитель_ВлажностьОт;
	ВлажностьДо = ДанныеДокумента.Отправитель_ВлажностьДо;
	
	ВлажностьЗаполнена = ЗначенияЗаполнены(ВлажностьОт, ВлажностьДо);
	Если ВлажностьЗаполнена Тогда 
		СтруктураКлимат.Вставить("Влажность", Новый Структура);
		СтруктураКлимат.Влажность.Вставить("Минимальная",  ВлажностьОт);
		СтруктураКлимат.Влажность.Вставить("Максимальная", ВлажностьДо);
	КонецЕсли;
	
	СтруктураУсловия.Вставить("КлиматическийРежим", СтруктураКлимат);
	
	СтруктураУсловия.Вставить("Маршрут", Новый Структура); // нет данных для заполнения
	
	// Переадресовка                          
	Переадресовка = Новый Структура;	
	Переадресовка.Вставить("Контакты", Новый Структура);	
	
	Роль = ДанныеДокумента.ИнициаторПереадресации;
	
	Контакты = МодульКода("Saby_ТНВыгрузкаСервер").КонтактыЮрЛица(ДанныеДокумента.КонтактныеДанные, Роль);
	Если ЗначениеЗаполнено(Контакты.Телефоны) Тогда 
		Переадресовка.Контакты.Вставить("Телефон", Контакты.Телефоны);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакты.ЭлектроннаяПочта) Тогда 
		Переадресовка.Контакты.Вставить("ЭлектроннаяПочта", Контакты.ЭлектроннаяПочта);
	КонецЕсли;
		
	// документ подтверждения полномочий 
	Если ЗначениеЗаполнено(ИнициаторПодтверждение) Тогда 
		Переадресовка.Вставить("ПодтверждениеПолномочий", ИнициаторПодтверждение);	
	КонецЕсли;
		
	Переадресовка.Вставить(
		"КтоПереадресует", МодульКода("Перечисления.Saby_РолиКонтрагентов").КодПоРоли(ДанныеДокумента.ИнициаторПереадресации));
	
	СтруктураУсловия.Вставить("Переадресовка", Переадресовка); 
	// - 
		
	СтруктураУсловия.Вставить("ИнформационноеПоле",  Новый Структура); // источника информации нет 
	СтруктураУсловия.Вставить("Нормы",               ДанныеДокумента.Отправитель_НормыПеревозки);
	СтруктураУсловия.Вставить("ОграничениеСкорости", ДанныеДокумента.Отправитель_ОграничениеСкорости);	
	СтруктураУсловия.Вставить("Пломба",              ДанныеДокумента.Отправитель_Пломба);
    СтруктураУсловия.Вставить("СрокДоставки",        ДанныеДокумента.Отправитель_ДоставитьСрок);

	СтруктураУсловия.Вставить("ПерегрузкаЗапрещена", Число(ДанныеДокумента.Отправитель_ПерегрузкаЗапрещена));
	
	Возврат СтруктураУсловия;
	
КонецФункции

// Расчет что хотя бы одно из значений заполнено
//  Параметры:
//   Значение1 - ЛюбойТип - первое значение для проверки
//   Значение2 - ЛюбойТип - второе значение для проверки
//  Возвращаемое значение:
//   Булево - оба значения не заполнены
//
Функция ЗначенияЗаполнены(Значение1, Значение2)
	
	Заполнены = ЗначениеЗаполнено(Значение1) Или ЗначениеЗаполнено(Значение2);	
	Возврат Заполнены;
	
КонецФункции

Функция ДанныеПогрузки(ДанныеДокумента, ОснованиеОтгрузки, ОснованиеПолномочий) 
	
	МодульТНВыгрузкаСервер = МодульКода("Saby_ТНВыгрузкаСервер");
	
    Структура = Новый Структура;
		
	// ВладелецОбъекта
	ВладелецПункта = Новый Структура;	
	Если ДанныеДокумента.Владелец_Тип = ЗначениеМетаданных("Saby_ВладелецОбъектаОтгрузки.Отправитель") Тогда
		
		ВладелецПункта.Вставить("Грузоотправитель", МодульТНВыгрузкаСервер.ДанныеЮрЛица("Отгрузчик", ДанныеДокумента));
		
	Иначе
		
		ДругойВладелец = Новый Структура;
		ДругойВладелец.Вставить("Контрагент", МодульТНВыгрузкаСервер.ДанныеЮрЛица("ВладелецОбъекта", ДанныеДокумента));
		ВладелецПункта.Вставить("Другой",     ДругойВладелец);
		
	КонецЕсли;	
		
	ВладелецПункта.Вставить(
		"Тип", МодульКода("Перечисления.Saby_ВладелецОбъектаОтгрузки").КодПоВладельцуОбъектаОтгрузки(ДанныеДокумента.Владелец_Тип));
	
	Если ДанныеДокумента.Владелец_Тип = ЗначениеМетаданных("Saby_ВладелецОбъектаОтгрузки.Неизвестен") Тогда
		Причина = СокрЛП(ДанныеДокумента.Владелец_НеизвестенПричина);		
	Иначе 
		Причина = "";
	КонецЕсли;
		
	ВладелецПункта.Вставить("ПочемуНеизвестен", Причина);	
		
	Структура.Вставить("ВладелецПункта", ВладелецПункта);
	// -
	
	// Груз
	Груз = Новый Структура;
	Груз.Вставить("Масса",          Новый Структура);
	Груз.Вставить("Состояние",      Новый Структура);
	Груз.Вставить("КоличествоМест", ДанныеДокумента.Погрузка_КоличествоМест);
	
	Груз.Масса.Вставить("Брутто", ДанныеДокумента.Погрузка_Масса);
	Груз.Масса.Вставить(
		"МетодОпределения",
		МодульКода("Перечисления.Saby_МетодОпределенияМассы").КодПоМетодуОпределенияМассы(
			ДанныеДокумента.Погрузка_МассаМетодРасчета));
	
	// Остояние кузова и упаковки нет на данный момент
	Груз.Состояние.Вставить("Кузова",   "");
	Груз.Состояние.Вставить("Тары",     СокрЛП(ДанныеДокумента.Погрузка_Состояние));
	Груз.Состояние.Вставить("Упаковки", "");
	
	Структура.Вставить("Груз", Груз); 
	// -
			
	// Кто делает погрузку	
    КтоПогружает = ЛицоОтгрузки(ДанныеДокумента, ОснованиеОтгрузки, ОснованиеПолномочий);
		
	Структура.Вставить("КтоПогружает",       КтоПогружает);
	Структура.Вставить(
		"ДатаВремяПрибытия",  МодульТНВыгрузкаСервер.СтруктураДатаВремя(ДанныеДокумента.Погрузка_ДатаВремяПрибыл));
	Структура.Вставить(
		"ДатаВремяУбытия",    МодульТНВыгрузкаСервер.СтруктураДатаВремя(ДанныеДокумента.Погрузка_ДатаВремяУбыл));
	Структура.Вставить("ИнформационноеПоле", Новый Структура); // нет источника
			
	Возврат Структура;
	
КонецФункции

Функция ЛицоОтгрузки(ДанныеДокумента, ОснованиеОтгрузки, ОснованиеПолномочий)
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	СтруктураОтправителя = МодульТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(
		ДанныеДокумента.ДанныеЮрЛиц, "Отправитель");
	СтруктураОтгрузчик   = МодульТНОбщегоНазначенияКлиентСервер.ДанныеЮрЛицаПоРоли(
		ДанныеДокумента.ДанныеЮрЛиц, "Отгрузчик");
	
	Тип = 1;	
	Если СтруктураОтгрузчик.Заполнена 
		И Не МодульТНОбщегоНазначенияКлиентСервер.ЮрЛицаСовпадают(СтруктураОтправителя, СтруктураОтгрузчик) Тогда
		Тип = 2; 
		
	КонецЕсли;
	
	// Грузоотправитель - если тип 1 то должен заполнится сам
	
	Другой = Новый Структура;	
	
	ТипДругогоОтправителя = 2;
	Если Тип = ТипДругогоОтправителя Тогда 
		
		Другой.Вставить("Контрагент", МодульКода("Saby_ТНВыгрузкаСервер").ДанныеЮрЛица("Отгрузчик", ДанныеДокумента));
		
		Если ЗначениеЗаполнено(ОснованиеОтгрузки) Тогда 
			Другой.Вставить("ДокументОснование", ОснованиеОтгрузки);       
		КонецЕсли;
			
		Работник = Новый Структура;
		Работник.Вставить("Должность", СокрЛП(ДанныеДокумента.Отгрузка_ОтветственныйДолжность));
		
		Ответственный = ДанныеДокумента.Отгрузка_ОтветственныйСтрокой;
		Если ЗначениеЗаполнено(Ответственный) Тогда
			
			ДанныеОтветственного = МодульКода("Saby_ТНОбщегоНазначенияСервер").СтруктураОтветственного(
				ДанныеДокумента.ОтветственныеЛица, "Ответственный");
						
			Работник.Вставить("Фамилия",  ДанныеОтветственного.Фамилия);
			Работник.Вставить("Имя",      ДанныеОтветственного.Имя);
			Работник.Вставить("Отчество", ДанныеОтветственного.Отчество);
			
		КонецЕсли;
			
		СтруктураОснПолномочий = Новый Структура;
		Если ЗначениеЗаполнено(ОснованиеПолномочий) Тогда 		 
			СтруктураОснПолномочий.Вставить("Документ", ОснованиеПолномочий); 			
		Иначе 
			СтруктураОснПолномочий.Вставить("ДолжностныеОбязанности", "Должностные обязанности");
		КонецЕсли;
					
		Работник.Вставить("ОснованиеПолномочий", СтруктураОснПолномочий); 
						
		Другой.Вставить("Работник", Работник);
						
	КонецЕсли;
	
	// ОснованиеДоступа
    Структура = Новый Структура;	
	Структура.Вставить("Тип",              Тип);
	Структура.Вставить("Другой",           Другой);
	Структура.Вставить("ОснованиеДоступа", "");
		
	Возврат Структура;
	
КонецФункции

#КонецОбласти // Этапы

#Область ПунктыПогрузкиВыгрузки

Функция ПунктПогрузки(РеквизитыОбъекта)

	СтруктураПункта = ШаблонПункта(РеквизитыОбъекта.Погрузка_ДатаВремя);
	
	// ToDo: структуру из АдресПогрузкиЗначение 
	СтруктураПункта.Адрес.Фактический.Текст = РеквизитыОбъекта.Погрузка_Адрес;
		
	Возврат СтруктураПункта;
	
КонецФункции

Функция ПунктВыгрузки(РеквизитыОбъекта, ЭтоПриемка = Ложь)
	
	Если ЭтоПриемка Тогда
		СтруктураПункта = ШаблонПункта(РеквизитыОбъекта.Выгрузка_ДатаВремя);
	Иначе
		СтруктураПункта = ШаблонПункта(РеквизитыОбъекта.Отправитель_ДоставитьДо);
	КонецЕсли;
	
	// падает на незаполненых составляющих фиас
	СтруктураПункта.Адрес.Фактический.АдресТекст = РеквизитыОбъекта.Отправитель_АдресДоставки; 
	СтруктураПункта.Адрес.Фактический.Текст      = РеквизитыОбъекта.Отправитель_АдресДоставки;
	
	МассивУдалить = Новый Массив;
	МассивУдалить.Добавить("Типовой");
	МассивУдалить.Добавить("Структура");
	МассивУдалить.Добавить("Координаты");
	МассивУдалить.Добавить("АдресТекст");
	МодульКода("Saby_ТНОбщегоНазначенияСервер").УдалитьСвойстваИзСтруктуры(СтруктураПункта.Адрес.Фактический, МассивУдалить);
	
	Возврат СтруктураПункта;
	
КонецФункции

Функция ШаблонПункта(ДатаВремя)
	
	Структура = Новый Структура;
	
	СтруктураДатаВремя = МодульКода("Saby_ТНВыгрузкаСервер").СтруктураДатаВремя(ДатаВремя);
	Структура.Вставить("ДатаВремя", СтруктураДатаВремя);
	Структура.Вставить("Адрес",     МодульКода("Saby_ТНВыгрузкаСервер").ШаблонФактАдрес());
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти // ПунктыПогрузкиВыгрузки

Функция ЗаявкаНаПеревозку(РеквизитыОбъекта)
	
	ПорядковыйНомер = МодульКода("Saby_ТНВыгрузкаСервер").ЗначениеДатыВремяДляВыгрузки(
		РеквизитыОбъекта.Отправитель_ЗаявкаНомер, Истина);
	
	Структура = Новый Структура;
	Структура.Вставить("Дата",            РеквизитыОбъекта.Отправитель_ЗаявкаДата);
	Структура.Вставить("ПорядковыйНомер", ПорядковыйНомер);
	
    Возврат Структура;
	
КонецФункции

Функция Оформил(ОформилСтруктураСтрокой)
	
	ОформилСтруктура = ЗначениеИзСтрокиВнутр(ОформилСтруктураСтрокой);
	
	РезультатФункции = Новый Структура;
	
	РезультатФункции.Вставить("Фамилия",  ОформилСтруктура.Фамилия);
	РезультатФункции.Вставить("Имя",      ОформилСтруктура.Имя);
	РезультатФункции.Вставить("Отчество", ОформилСтруктура.Отчество);
	
	МассивТелефонов = Новый Массив;
	ТелефоныОформителя = ЗначениеИзСтрокиВнутр(ОформилСтруктура.Телефоны);
	Для Каждого Телефон Из ТелефоныОформителя Цикл
		СтруктураТелефон = Новый Структура;
		СтруктураТелефон.Вставить("Значение", Телефон);
		МассивТелефонов.Добавить(СтруктураТелефон);
	КонецЦикла;
	
	МассивЭлектроннойПочты = Новый Массив;
	Если ЗначениеЗаполнено(ОформилСтруктура.ЭлектроннаяПочта) Тогда
		ЭлектроннаяПочта = ЗначениеИзСтрокиВнутр(ОформилСтруктура.ЭлектроннаяПочта);
		СтруктураЭлектроннойПочты = Новый Структура;
		Если ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда 
			СтруктураЭлектроннойПочты.Вставить("Значение", ЭлектроннаяПочта[0]);
			МассивЭлектроннойПочты.Добавить(СтруктураЭлектроннойПочты);
		КонецЕсли;
	КонецЕсли;
	
	Контакты = Новый Структура;
	Контакты.Вставить("Телефон",          МассивТелефонов);
	Контакты.Вставить("ЭлектроннаяПочта", МассивЭлектроннойПочты);
	
	РезультатФункции.Вставить("Контакты", Контакты);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеСоставителя(ДанныеДокумента)
	
	РезультатФункции = Новый Структура;
	
	// Заполним реквизиты. Используется для расчета данных по нашей организации	
	Реквизиты = МодульКода("Saby_ТНВыгрузкаСервер").ДанныеЮрЛица("Оформитель", ДанныеДокумента);
		
	РезультатФункции.Вставить("НазваниеПолное", Реквизиты.Название.Полное);
	РезультатФункции.Вставить("ДанныеЮрЛица",   Реквизиты);
	
	Основание = ДанныеДокумента.Составитель_НаОснованииДокумент;
	Если ЗначениеЗаполнено(Основание) Тогда
		
		Массив = Новый Массив();
		Массив.Добавить(Основание);
		
		ДанныеДокументов = МодульКода("Saby_ТНОбщегоНазначенияСервер").РеквизитыДокументовСбис(Массив);
		
		ДанныеДок = ДанныеДокументов.Получить(Основание);
		ДанныеДок.Удалить("Тип");
		ДанныеДок.Удалить("Ссылка");
		
		РезультатФункции.Вставить("Основание", Новый Структура);
		РезультатФункции.Основание.Вставить("Документ", ДанныеДок);
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ВыгрузитьДокументВJson

Процедура ДобавитьСвойствоВСтруктуруСКонтролем(Структура, ИмяСвойства, Данные, ЭтоВремя = Ложь)
	
	ЗаполнитьСвойство = Ложь;
	
	Если ЭтоВремя Тогда
		Если ЗначениеЗаполнено(Данные.Значение) Тогда		
			ЗаполнитьСвойство = Истина; 
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Данные) Тогда   	
			ЗаполнитьСвойство = Истина;
		КонецЕсли;
	КонецЕсли; 	
	
	Если ЗаполнитьСвойство Тогда 
		Структура.Вставить(ИмяСвойства, Данные);		
	КонецЕсли;
		
КонецПроцедуры

Функция РеквизитыОдиночногоДокументаЭТрН(Ссылка)
	
	Массив = Новый Массив();
	Массив.Добавить(Ссылка);
	
	ДанныеДокументов = МодульКода("Saby_ТНОбщегоНазначенияСервер").РеквизитыДокументовСбис(Массив);
	
	ДанныеДок = ДанныеДокументов.Получить(Ссылка);
	ДанныеДок.Удалить("Тип");
	ДанныеДок.Удалить("Ссылка");
	
	Возврат ДанныеДок;

КонецФункции

// Заполняет структуру адреса для подстановок
//
// Параметры:
//  СтруктураАдреса - Структура - ОбщийШаблонАдреса())
//  АдресЗначение - Строка - результат выполнения ЗначениеВJSON(ОбщийШаблонАдреса())
//
Процедура ЗаполнитьСтруктуруАресаИзСтроки(СтруктураАдреса, АдресЗначение)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(АдресЗначение);  		
	СтруктураАдресаИзСтроки = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Если СтруктураАдресаИзСтроки <> Неопределено Тогда
		ЗаполнитьСтруктуруАдреса(СтруктураАдреса, СтруктураАдресаИзСтроки);
		
		СтруктураАдреса.Структура.Вставить("КодСтраны", СтруктураАдреса.КодСтраны);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруАдреса(Приемник, Источник)
	
	Для Каждого КлючЗначение Из Приемник Цикл
		
		ЗначениеИзИсточника = Неопределено;
		
		Если Не Источник.Свойство(КлючЗначение.Ключ, ЗначениеИзИсточника) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура") Тогда
			ЗаполнитьСтруктуруАдреса(КлючЗначение.Значение, ЗначениеИзИсточника);
		Иначе
			Приемник.Вставить(КлючЗначение.Ключ, ЗначениеИзИсточника);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Выгрузка

#Область Загрузка

#Область ЗагрузитьДокументИзJson

#Область Титулы

// Титул "1110339"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулПогрузка(ОбъектДок, Вложения, Титул, ДопПараметры)
		
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПогрузка = ДанныеПогрузка(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		МодульТНЗагрузкаСервер = МодульКода("Saby_ТНЗагрузкаСервер");
		
		ДанныеТитула = ДанныеПогрузка[ДанныеПогрузка.ВГраница()];
		
		ДанныеДляДокументаБезПустыхЗначений = МодульКода("Saby_ТНОбщегоНазначенияСервер").СтруктураБезПустыхЗначений(
			ДанныеТитула.ДляДокумента);
			
		ЗаполнитьЗначенияСвойств(
			ОбъектДок,
			ДанныеДляДокументаБезПустыхЗначений, ,
			"Отметки,ОтветственныеЛица,ТранспортныеСредства,СпецРазрешения,ДанныеЮрЛиц,КонтактныеДанные");
		
		МодульТНЗагрузкаСервер.ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		МодульТНЗагрузкаСервер.ЗаполнитьОтветственныхЛиц(
			ОбъектДок,
			ДанныеТитула.ДляДокумента.ОтветственныеЛица,
			ЗначениеМетаданных("Saby_РолиОтветственных.Водитель"));
			
		МодульТНЗагрузкаСервер.ЗаполнитьОтветственныхЛиц(
			ОбъектДок,
			ДанныеТитула.ДляДокумента.ОтветственныеЛица,
			ЗначениеМетаданных("Saby_РолиОтветственных.Ответственный"));
		
		ЗаполнитьДанныеПоОтметкам(ОбъектДок, ДанныеТитула.ДляДокумента.Отметки, ДанныеТитула.Титул);
		
		ЗаполняемыеРоли = Новый Массив;
		ЗаполняемыеРоли.Добавить(ЗначениеМетаданных("Saby_РолиКонтрагентов.Отправитель"));
		ЗаполняемыеРоли.Добавить(ЗначениеМетаданных("Saby_РолиКонтрагентов.Получатель"));
		ЗаполняемыеРоли.Добавить(ЗначениеМетаданных("Saby_РолиКонтрагентов.Перевозчик"));
		ЗаполняемыеРоли.Добавить(ЗначениеМетаданных("Saby_РолиКонтрагентов.Заказчик"));
		ЗаполняемыеРоли.Добавить(ЗначениеМетаданных("Saby_РолиКонтрагентов.Отгрузчик"));
		ЗаполняемыеРоли.Добавить(ЗначениеМетаданных("Saby_РолиКонтрагентов.ВладелецОбъекта"));
		ЗаполняемыеРоли.Добавить(ЗначениеМетаданных("Saby_РолиКонтрагентов.Оформитель"));
		ЗаполняемыеРоли.Добавить(ЗначениеМетаданных("Saby_РолиКонтрагентов.СторонаДокумента"));
		Для Каждого ЗаполняемаяРоль Из ЗаполняемыеРоли Цикл
			МодульТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
				ОбъектДок, ДанныеТитула.ДляДокумента, ЗаполняемаяРоль, ДопПараметры);
		КонецЦикла;
		
		ЗаполнитьСопроводительныеДокументы(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		МодульТНЗагрузкаСервер.ЗаполнитьДанныеПоГрузам(ОбъектДок, ДанныеТитула.ДляДокумента, ДопПараметры);
		
	КонецЕсли;
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ЗаписатьДанные(ДанныеПогрузка, ОбъектДок, ДопПараметры.ИмяМетаданных);
	КонецЕсли;
	
КонецПроцедуры

// Титул "1110340"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулПолучениеГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПолучениеГруза = ДанныеПолучениеГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ДанныеТитула = ДанныеПолучениеГруза[ДанныеПолучениеГруза.ВГраница()];
		
		ДанныеДляДокументаБезПустыхЗначений = МодульКода("Saby_ТНОбщегоНазначенияСервер").СтруктураБезПустыхЗначений(
			ДанныеТитула.ДляДокумента);
			
		КолонкиИсключения = "Отметки,ДанныеЮрЛиц,КонтактныеДанные";
		Если МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ЕстьРеквизитИлиСвойство(ОбъектДок, "ДокументыЭПД") Тогда
			КолонкиИсключения = КолонкиИсключения + ",ДокументыЭПД";
		КонецЕсли;
			
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеДляДокументаБезПустыхЗначений, , КолонкиИсключения);
		
		МодульКода("Saby_ТНЗагрузкаСервер").ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок, ДанныеТитула.ДляДокумента, ЗначениеМетаданных("Saby_РолиКонтрагентов.СторонаДокумента"), ДопПараметры);
		
		ЗаполнитьДанныеПоОтметкам(ОбъектДок, ДанныеТитула.ДляДокумента.Отметки, ДанныеТитула.Титул);
		
		// Заполнение документов ЭПД должно быть последним
		ЗаполняемыеТипы = Новый Массив;
		ЗаполняемыеТипы.Добавить(ЗначениеМетаданных("Saby_ТипыДокумента.АктКоммерческий"));
		Для Каждого ЗаполняемыйТип Из ЗаполняемыеТипы Цикл
			МодульКода("Saby_ТНЗагрузкаСервер").ЗаполнитьДокументыЭПД(ОбъектДок, ДанныеТитула.ДляДокумента, ЗаполняемыйТип);
		КонецЦикла;
		
	КонецЕсли;
	
	МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ЗаписатьДанные(ДанныеПолучениеГруза, ОбъектДок, ДопПараметры.ИмяМетаданных);
			
КонецПроцедуры

// Титул "1110341"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулПриемкаГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПриемкаГруза = ДанныеПриемкаГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	ДанныеТитула = ДанныеПриемкаГруза[ДанныеПриемкаГруза.ВГраница()];
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ДанныеДляДокументаБезПустыхЗначений = МодульКода("Saby_ТНОбщегоНазначенияСервер").СтруктураБезПустыхЗначений(
			ДанныеТитула.ДляДокумента);
			
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеДляДокументаБезПустыхЗначений, , "Отметки");
		
		ЗаполнитьДанныеПоОтметкам(ОбъектДок, ДанныеТитула.ДляДокумента.Отметки, ДанныеТитула.Титул);
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента, "КомментарийУведомление");
		
	КонецЕсли;
		
	МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ЗаписатьДанные(ДанныеПриемкаГруза, ОбъектДок, ДопПараметры.ИмяМетаданных);
			
КонецПроцедуры

// Титул "1110342"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулВыдачаГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если Не Вложения.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеВыдачаГруза = ДанныеВыдачаГруза(ОбъектДок, Вложения, Титул, ДопПараметры);
	
	ДанныеТитула = ДанныеВыдачаГруза[ДанныеВыдачаГруза.ВГраница()];
	
	Если Не ДопПараметры.ТолькоАктивныйЭтап Тогда
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента, , "Отметки");
		
		ЗаполнитьДанныеПоОтметкам(ОбъектДок, ДанныеТитула.ДляДокумента.Отметки, ДанныеТитула.Титул);
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента, "КомментарийУведомление");
		
	КонецЕсли;
		
	МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ЗаписатьДанные(ДанныеВыдачаГруза, ОбъектДок, ДопПараметры.ИмяМетаданных);
	
КонецПроцедуры

// Титул "1110343"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулПереадресовка(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеПереадресовка = ДанныеПереадресовка(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе
		ДанныеПереадресовка = Вложения;
	КонецЕсли;
	ДанныеТитула = ДанныеПереадресовка[ДанныеПереадресовка.ВГраница()];
	
	ДанныеДляДокументаБезПустыхЗначений = МодульКода("Saby_ТНОбщегоНазначенияСервер").СтруктураБезПустыхЗначений(
		ДанныеТитула.ДляДокумента);
		
	КолонкиИсключения = "Отметки,ДанныеЮрЛиц,КонтактныеДанные";
	Если МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ЕстьРеквизитИлиСвойство(ОбъектДок, "ДокументыЭПД") Тогда
		КолонкиИсключения = КолонкиИсключения + ",ДокументыЭПД";
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеДляДокументаБезПустыхЗначений, , КолонкиИсключения);
	
	ЗаполнитьДанныеПоОтметкам(ОбъектДок, ДанныеТитула.ДляДокумента.Отметки, ДанныеТитула.Титул);
	
	МодульТНЗагрузкаСервер = МодульКода("Saby_ТНЗагрузкаСервер");
	
	// Если есть данные по новому получателю
	Если ДанныеТитула.ДляДокумента.ДанныеЮрЛиц.Количество() > 0 Тогда
		МодульТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок,
			ДанныеТитула.ДляДокумента,
			ЗначениеМетаданных("Saby_РолиКонтрагентов.Получатель"),
			ДопПараметры);
	КонецЕсли;
	
	// Заполнение документов ЭПД должно быть последним
	ЗаполняемыеТипы = Новый Массив;
	ЗаполняемыеТипы.Добавить(ЗначениеМетаданных("Saby_ТипыДокумента.ПередачиЦенностей"));
	Для Каждого ЗаполняемыйТип Из ЗаполняемыеТипы Цикл
		МодульТНЗагрузкаСервер.ЗаполнитьДокументыЭПД(ОбъектДок, ДанныеТитула.ДляДокумента, ЗаполняемыйТип);
	КонецЦикла;
	
	МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ЗаписатьДанные(ДанныеПереадресовка, ОбъектДок, ДопПараметры.ИмяМетаданных);
	
КонецПроцедуры

// Титул "1167009"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулУведомлениеОПереадресовке(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеУведомлениеОПереадресовке = ДанныеУведомлениеОПереадресовке(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе 
		ДанныеУведомлениеОПереадресовке = Вложения;
	КонецЕсли;
	
	Если Не ДопПараметры.ЗагрузкаСОнлайна Тогда
		
		ДанныеТитула = ДанныеУведомлениеОПереадресовке[ДанныеУведомлениеОПереадресовке.ВГраница()];
		
		КолонкиИсключения = "Отметки,ДанныеЮрЛиц,КонтактныеДанные";
		Если МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ЕстьРеквизитИлиСвойство(ОбъектДок, "ДокументыЭПД") Тогда
			КолонкиИсключения = КолонкиИсключения + ",ДокументыЭПД";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента, , КолонкиИсключения);
		
		МодульТНЗагрузкаСервер = МодульКода("Saby_ТНЗагрузкаСервер");
		
		// Если есть данные по новому получателю
		Если ДанныеТитула.ДляДокумента.ДанныеЮрЛиц.Количество() > 0 Тогда
			МодульТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
				ОбъектДок,
				ДанныеТитула.ДляДокумента,
				ЗначениеМетаданных("Saby_РолиКонтрагентов.Получатель"),
				ДопПараметры);
		КонецЕсли;
		
		// КИ Оформителя
		МодульТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
			ОбъектДок,
			ДанныеТитула.ДляДокумента,
			ЗначениеМетаданных("Saby_РолиКонтрагентов.ПустаяСсылка"),
			ДопПараметры);
			
		// Заполнение документов ЭПД должно быть последним
		ЗаполняемыеТипы = Новый Массив;
		ЗаполняемыеТипы.Добавить(ЗначениеМетаданных("Saby_ТипыДокумента.ПередачиЦенностей"));
		Для Каждого ЗаполняемыйТип Из ЗаполняемыеТипы Цикл
			МодульТНЗагрузкаСервер.ЗаполнитьДокументыЭПД(ОбъектДок, ДанныеТитула.ДляДокумента, ЗаполняемыйТип);
		КонецЦикла;
			
	КонецЕсли;
	
	МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ЗаписатьДанные(
		ДанныеУведомлениеОПереадресовке, ОбъектДок, ДопПараметры.ИмяМетаданных);
	
КонецПроцедуры	

// Титул "1110344"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулЗаменаВодителяТС(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеЗаменаВодителяТС = ДанныеЗаменаВодителяТС(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе
		ДанныеЗаменаВодителяТС = Вложения;
	КонецЕсли;
	
	Для Каждого ДанныеТитула Из ДанныеЗаменаВодителяТС Цикл
		
		ДанныеДляДокументаБезПустыхЗначений = МодульКода("Saby_ТНОбщегоНазначенияСервер").СтруктураБезПустыхЗначений(
			ДанныеТитула.ДляДокумента);
			
		КолонкиИсключения = "Отметки,ТранспортныеСредства,СпецРазрешения,ДанныеЮрЛиц,КонтактныеДанные,ОтветственныеЛица";
		Если МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ЕстьРеквизитИлиСвойство(ОбъектДок, "ДокументыЭПД") Тогда
			КолонкиИсключения = КолонкиИсключения + ",ДокументыЭПД";
		КонецЕсли;
			
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеДляДокументаБезПустыхЗначений, , КолонкиИсключения);
		
		ЗаполнитьДанныеПоОтметкам(ОбъектДок, ДанныеТитула.ДляДокумента.Отметки, ДанныеТитула.Титул);
		
		МодульТНЗагрузкаСервер = МодульКода("Saby_ТНЗагрузкаСервер");
		
		МодульТНЗагрузкаСервер.ЗаполнитьДанныеТСИПрицеповДокумента(ОбъектДок, ДанныеТитула.ДляДокумента);
		
		МодульТНЗагрузкаСервер.ЗаполнитьОтветственныхЛиц(
			ОбъектДок,
			ДанныеТитула.ДляДокумента.ОтветственныеЛица,
			ЗначениеМетаданных("Saby_РолиОтветственных.Водитель"));
			
		ЗаполняемыеРоли = Новый Массив;
		ЗаполняемыеРоли.Добавить(ЗначениеМетаданных("Saby_РолиКонтрагентов.СторонаДокумента"));
		Для Каждого ЗаполняемаяРоль Из ЗаполняемыеРоли Цикл
			МодульТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
				ОбъектДок, ДанныеТитула.ДляДокумента, ЗаполняемаяРоль, ДопПараметры);
		КонецЦикла;
			
		// Заполнение документов ЭПД должно быть последним
		ЗаполняемыеТипы = Новый Массив;
		ЗаполняемыеТипы.Добавить(ЗначениеМетаданных("Saby_ТипыДокумента.КТранспортнойНакладной"));
		ЗаполняемыеТипы.Добавить(ЗначениеМетаданных("Saby_ТипыДокумента.ПодтверждениеВладения"));
		Для Каждого ЗаполняемыйТип Из ЗаполняемыеТипы Цикл
			МодульТНЗагрузкаСервер.ЗаполнитьДокументыЭПД(ОбъектДок, ДанныеТитула.ДляДокумента, ЗаполняемыйТип);
		КонецЦикла;
			
	КонецЦикла;
	
	МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ЗаписатьДанные(ДанныеЗаменаВодителяТС, ОбъектДок, ДопПараметры.ИмяМетаданных);
	
КонецПроцедуры

// Титул "1110345"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулИзменениеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры)  
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеИзменения = ДанныеИзменениеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе
		
		ДанныеИзменения = Вложения;		
		ДанныеТитула    = ДанныеИзменения[ДанныеИзменения.ВГраница()];
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
		
	КонецЕсли;
	 
	МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ЗаписатьДанные(ДанныеИзменения, ОбъектДок, ДопПараметры.ИмяМетаданных);
	
КонецПроцедуры

// Титул "1110346"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулСогласованиеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеСогласования = ДанныеСогласованиеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе
		
		ДанныеСогласования = Вложения;
		ДанныеТитула       = ДанныеСогласования[ДанныеСогласования.ВГраница()]; 
		
		КолонкиИсключения = "ДанныеЮрЛиц,КонтактныеДанные";
		Если МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ЕстьРеквизитИлиСвойство(ОбъектДок, "ДокументыЭПД") Тогда
			КолонкиИсключения = КолонкиИсключения + ",ДокументыЭПД";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента, , КолонкиИсключения);
		
		МодульТНЗагрузкаСервер = МодульКода("Saby_ТНЗагрузкаСервер");
		
		ЗаполняемыеРоли = Новый Массив;
		ЗаполняемыеРоли.Добавить(ЗначениеМетаданных("Saby_РолиКонтрагентов.ПустаяСсылка"));
		ЗаполняемыеРоли.Добавить(ЗначениеМетаданных("Saby_РолиКонтрагентов.СторонаДокумента"));
		Для Каждого ЗаполняемаяРоль Из ЗаполняемыеРоли Цикл
			МодульТНЗагрузкаСервер.ЗаполнитьДанныеЮрЛицИКонтактнуюИнформацию(
				ОбъектДок, ДанныеТитула.ДляДокумента, ЗаполняемаяРоль, ДопПараметры);
		КонецЦикла;
		
		// Заполнение документов ЭПД должно быть последним
		ЗаполняемыеТипы = Новый Массив;
		ЗаполняемыеТипы.Добавить(ЗначениеМетаданных("Saby_ТипыДокумента.ОснованиеОплатыПеревозки"));
		Для Каждого ЗаполняемыйТип Из ЗаполняемыеТипы Цикл
			МодульТНЗагрузкаСервер.ЗаполнитьДокументыЭПД(ОбъектДок, ДанныеТитула.ДляДокумента, ЗаполняемыйТип);
		КонецЦикла;
		
	КонецЕсли;
		
	МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ЗаписатьДанные(ДанныеСогласования, ОбъектДок, ДопПараметры.ИмяМетаданных);
	
КонецПроцедуры

// Титул "1115113"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ЗагрузкаТитулУведомленияОУточнении(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	Если ДопПараметры.ЗагрузкаСОнлайна Тогда
		ДанныеУведомлениеОУточнении = ДанныеУведомлениеОУточнении(ОбъектДок, Вложения, Титул, ДопПараметры);
	Иначе 
		ДанныеУведомлениеОУточнении = Вложения;
	КонецЕсли;
	
	ДанныеТитула = ДанныеУведомлениеОУточнении[ДанныеУведомлениеОУточнении.ВГраница()];
	
	ЗаполнитьЗначенияСвойств(ОбъектДок, ДанныеТитула.ДляДокумента);
	
	МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ЗаписатьДанные(
		ДанныеУведомлениеОУточнении, ОбъектДок, ДопПараметры.ИмяМетаданных);
	
КонецПроцедуры
	
#КонецОбласти // Титулы

#Область ДанныеОсновныхТитулов

Функция ДанныеПогрузка(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ВложенияДляЗагрузки(
		ОбъектДок, Титул, Вложения, ДопПараметры);
	
	МодульТНЗагрузкаСервер = МодульКода("Saby_ТНЗагрузкаСервер");
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		ДляДокумента.Вставить("КлючСтроки",        ДопПараметры.КлючСтроки);
		ДляДокумента.Вставить("ОтветственныеЛица", Новый Массив);
		ДляДокумента.Вставить("ДанныеЮрЛиц",       Новый Массив);
		ДляДокумента.Вставить("КонтактныеДанные",  Новый Массив);
		ДляДокумента.Вставить("ДокументыЭПД",      Новый Массив);
		ДляДокумента.Вставить("СопроводительныеДокументы", ДопПараметры.СопроводительныеДокументы);
		
		ДляДокумента.Вставить("Валюта", ОбъектДок.Валюта);
		
		ЗаявкаНаПеревозку = Вложение["ЗаявкаНаПеревозку"];
		Если ЗначениеЗаполнено(ЗаявкаНаПеревозку) Тогда
			ДляДокумента.Вставить("Отправитель_ЗаявкаНомер", ЗаявкаНаПеревозку["ПорядковыйНомер"]);
			ДляДокумента.Вставить(
				"Отправитель_ЗаявкаДата",
				МодульКода("Saby_ТНОбщегоНазначенияСервер").ПреобразоватьСтрокуВДатуЭПД(ЗаявкаНаПеревозку["Дата"]));
		КонецЕсли;
		
		МодульТНЗагрузкаСервер.ЗагрузитьДанныеЮрЛиц(ДляДокумента, Вложение["Грузоотправитель"], "Отправитель");
		МодульТНЗагрузкаСервер.ЗагрузитьДанныеЮрЛиц(ДляДокумента, Вложение["Грузополучатель"],  "Получатель");
		МодульТНЗагрузкаСервер.ЗагрузитьДанныеЮрЛиц(ДляДокумента, Вложение["Грузоперевозчик"],  "Перевозчик");
		МодульТНЗагрузкаСервер.ЗагрузитьДанныеЮрЛиц(ДляДокумента, Вложение["Заказчик"],         "Заказчик");
		МодульТНЗагрузкаСервер.ЗагрузитьДанныеЮрЛиц(ДляДокумента, Вложение["Отгрузчик"],        "Отгрузчик");
		
		ДляДокумента.Вставить("Отправитель_Экспедитор", ФлагЭкспедитор(ДляДокумента));
		ДляДокумента.Вставить("Дата", ОбъектДок.Дата);
		
		ДанныеПунктаПогрузки(Вложение["ПунктПогрузки"], ДляДокумента, ДопПараметры);
		ДанныеПунктаВыгрузки(Вложение["ПунктВыгрузки"], ДляДокумента);
		
		МодульТНЗагрузкаСервер.ДанныеТСПрицеповСпецРазрешений(ДляДокумента, Вложение["ТранспортноеСредство"]);
		
		МодульТНЗагрузкаСервер.ДанныеВодителей(ДляДокумента, Вложение["Водители"], ДопПараметры);
		
		ДанныеПоОтметкам(ДляДокумента, Вложение["Отметки"], Титул);
		
		ЗагрузитьУсловияПеревозки(ДляДокумента, Вложение["УсловияПеревозки"]);
		
		ЗагрузитьДанныеДокументовЭПД(ДляДокумента, Вложение["СопроводительныеДокументы"]);
		
		ЗагрузитьДанныеПогрузки(ДляДокумента, Вложение["Погрузка"], ДопПараметры);
		
		ЗаполнитьСоставителя(Вложение, ДляДокумента, ДопПараметры);
		
		МодульТНЗагрузкаСервер.ЗагрузитьДанныеПоГрузам(ДляДокумента, Вложение["Груз"], ДопПараметры.ЗагрузкаСОнлайна, Истина);
		
		ДляРегистра = СтруктураДанныхДляРегистра(ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных);
		
		РезультатФункции.Добавить(МодульТНЗагрузкаСервер.СтруктураТитула(Титул, ДляДокумента, ДляРегистра));
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеПолучениеГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ВложенияДляЗагрузки(
		ОбъектДок, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		ДляДокумента.Вставить("КлючСтроки",       ДопПараметры.КлючСтроки);
		ДляДокумента.Вставить("ДанныеЮрЛиц",      Новый Массив);
		ДляДокумента.Вставить("КонтактныеДанные", Новый Массив);
		ДляДокумента.Вставить("ДокументыЭПД",     Новый Массив);
		
		МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
		
		ДатаВремяПостановки = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "Погрузка.ЗамечанияПеревозчика.ДатаВремяПостановки.Значение");
		ДляДокумента.Вставить(
			"Перевозчик_ПриемкаДатаВремя", МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаВремяПостановки));
		
		ДатаВремяПрибытия = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "Погрузка.ЗамечанияПеревозчика.ДатаВремяПрибытия.Значение");
		ДляДокумента.Вставить(
			"Перевозчик_ПриемкаДатаВремяПрибыл", МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаВремяПрибытия));
		
		ДатаВремяУбытия = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "Погрузка.ЗамечанияПеревозчика.ДатаВремяУбытия.Значение");
		ДляДокумента.Вставить(
			"Перевозчик_ПриемкаДатаВремяУбыл", МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаВремяУбытия));
		
		ДляДокумента.Вставить(
			"Перевозчик_ЗамечанияПоПогрузочнымРаботам",
			МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Погрузка.ЗамечанияПеревозчика.ВыполненныеРаботы"));
		
		ДляДокумента.Вставить(
			"Перевозчик_ПогрузкаЗамечанияПоКоличеству",
			МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Погрузка.ЗамечанияПеревозчика.КоличествоМест"));
			
		ДляДокумента.Вставить(
			"Перевозчик_ПогрузкаЗамечанияПоМассе",
			МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Погрузка.ЗамечанияПеревозчика.МассаГруза"));
		
		ДляДокумента.Вставить(
			"Перевозчик_ПогрузкаЗамечанияПоСостояниюГруза",
			МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Погрузка.ЗамечанияПеревозчика.СостояниеГруза"));
		
		ДанныеПоОтметкам(ДляДокумента, Вложение["Отметки"], Титул);
		
		ДляРегистра  = СтруктураДанныхДляРегистра(ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных);
		
		РезультатФункции.Добавить(МодульКода("Saby_ТНЗагрузкаСервер").СтруктураТитула(Титул, ДляДокумента, ДляРегистра));
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеПриемкаГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ВложенияДляЗагрузки(
		ОбъектДок, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		ДляДокумента.Вставить("КлючСтроки",       ДопПараметры.КлючСтроки);
		ДляДокумента.Вставить("ДанныеЮрЛиц",      Новый Массив);
		ДляДокумента.Вставить("КонтактныеДанные", Новый Массив);
		ДляДокумента.Вставить("ДокументыЭПД",     Новый Массив);
		
		МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
		
		ДатаВремяВыгрузки = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "ПунктВыгрузки.ДатаВремя.Значение");
		ДляДокумента.Вставить(
			"Выгрузка_ДатаВремя",
			МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаВремяВыгрузки));
		
		ДатаПрибытия = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Выгрузка.ДатаВремяПрибытия.Значение");
		ДляДокумента.Вставить(
			"Выгрузка_ДатаВремяПрибыл",
			МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаПрибытия));
		
		ДатаУбытия = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Выгрузка.ДатаВремяУбытия.Значение");
		ДляДокумента.Вставить(
			"Выгрузка_ДатаВремяУбыл",
			МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаУбытия));
		
		Масса = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Выгрузка.Груз.Масса");
		Если ЗначениеЗаполнено(Масса) Тогда 
			
			ДляДокумента.Вставить("Выгрузка_МассаБрутто", МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(Масса["Брутто"]));
			ДляДокумента.Вставить("Выгрузка_МассаНетто", МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(Масса["Нетто"]));
			
			МетодОпределения = МодульКода("Перечисления.Saby_МетодОпределенияМассы").МетодОпределенияМассыПоКоду(
				Масса["МетодОпределения"]);
			ДляДокумента.Вставить("Выгрузка_МассаМетодРасчета", МетодОпределения);

		КонецЕсли;
		
		ГрузВыгрузка = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Выгрузка.Груз");
		Если ЗначениеЗаполнено(ГрузВыгрузка) Тогда
			ДляДокумента.Вставить(
				"Выгрузка_КоличествоМест", МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(ГрузВыгрузка["КоличествоМест"]));
			ДляДокумента.Вставить("Выгрузка_Объем", МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(ГрузВыгрузка["Объем"]));
		КонецЕсли;
		
		ДанныеПоОтметкам(ДляДокумента, Вложение["Отметки"], Титул);
		
		ДляДокумента.Вставить("КомментарийУведомление", КомментарийСобытияТитула(Титул, ДопПараметры.Событие));
		
		Состояние = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Вложение, "Выгрузка.Груз.Состояние.Общее");
		Если ЗначениеЗаполнено(Состояние) Тогда 
			ДляДокумента.Вставить("Выгрузка_Состояние", Состояние);
		КонецЕсли;
		
		ДляРегистра = СтруктураДанныхДляРегистра(ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных);
		ДобавитьКомментарийОтрицательногоЗавершения(ДляРегистра, ДляДокумента);
		РезультатФункции.Добавить(МодульКода("Saby_ТНЗагрузкаСервер").СтруктураТитула(Титул, ДляДокумента, ДляРегистра));
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеВыдачаГруза(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ВложенияДляЗагрузки(
		ОбъектДок, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		ДляДокумента.Вставить("КлючСтроки",       ДопПараметры.КлючСтроки);
		ДляДокумента.Вставить("ДанныеЮрЛиц",      Новый Массив);
		ДляДокумента.Вставить("КонтактныеДанные", Новый Массив);
		ДляДокумента.Вставить("ДокументыЭПД",     Новый Массив);
		
		МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
		
		ДатаПостановки = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "Выгрузка.ЗамечанияПеревозчика.ДатаВремяПостановки.Значение");
		Если ЗначениеЗаполнено(ДатаПостановки) Тогда 
			ДляДокумента.Вставить(
				"Перевозчик_ВыгрузкаДатаВремя",
				МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаПостановки));
		КонецЕсли;
		
		ДатаПрибытия = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "Выгрузка.ЗамечанияПеревозчика.ДатаВремяПрибытия.Значение");
		Если ЗначениеЗаполнено(ДатаПрибытия) Тогда 
			ДляДокумента.Вставить(
				"Перевозчик_ВыгрузкаДатаВремяПрибыл",
				МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаПрибытия));
		КонецЕсли;
		
		ДатаУбытия = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "Выгрузка.ЗамечанияПеревозчика.ДатаВремяУбытия.Значение");
		Если ЗначениеЗаполнено(ДатаУбытия) Тогда 
			ДляДокумента.Вставить(
				"Перевозчик_ВыгрузкаДатаВремяУбыл",
				МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаУбытия));
		КонецЕсли;
		
		ВыполненныеРаботы = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "Выгрузка.ЗамечанияПеревозчика.ВыполненныеРаботы");
		Если ВыполненныеРаботы <> Неопределено Тогда
			ДляДокумента.Вставить("Перевозчик_ЗамечанияПоРазгрузочнымРаботам", ВыполненныеРаботы);
		КонецЕсли;
		
		ДанныеПоОтметкам(ДляДокумента, Вложение["Отметки"], Титул);
		
		ДляДокумента.Вставить("КомментарийУведомление", КомментарийСобытияТитула(Титул, ДопПараметры.Событие));
		
		СостояниеГруза = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
			Вложение, "Выгрузка.ЗамечанияПеревозчика.СостояниеГруза");
		Если СостояниеГруза <> Неопределено Тогда
			ДляДокумента.Вставить("Перевозчик_ВыгрузкаЗамечанияПоСостояниюГруза", СостояниеГруза);
		КонецЕсли;
		
		ДляРегистра = СтруктураДанныхДляРегистра(ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных);
		ДобавитьКомментарийОтрицательногоЗавершения(ДляРегистра, ДляДокумента);
		РезультатФункции.Добавить(МодульКода("Saby_ТНЗагрузкаСервер").СтруктураТитула(Титул, ДляДокумента, ДляРегистра));
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ДанныеОсновныхТитулов

#Область ДанныеДинамическихТитулов

// Титул "1110343"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
// Возвращаемое значение:
//	Структура - данные титула в формате подстановок
//
Функция ДанныеПереадресовка(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ВложенияДляЗагрузки(
		ОбъектДок, Титул, Вложения, ДопПараметры);
	
	РольКонтрагентаПолучатель = ЗначениеМетаданных("Saby_РолиКонтрагентов.Получатель");
	
	МодульТНЗагрузкаСервер = МодульКода("Saby_ТНЗагрузкаСервер");
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		ДляДокумента.Вставить("КлючСтроки",       ДопПараметры.КлючСтроки);
		ДляДокумента.Вставить("ДанныеЮрЛиц",      Новый Массив);
		ДляДокумента.Вставить("КонтактныеДанные", Новый Массив);
		ДляДокумента.Вставить("ДокументыЭПД",     Новый Массив);
		
		ДанныеПунктаВыгрузки(Вложение["ПунктВыгрузки"], ДляДокумента);

		ДанныеПоОтметкам(ДляДокумента, Вложение["Отметки"], Титул);
		
		МодульТНЗагрузкаСервер.ЗагрузитьДанныеЮрЛиц(ДляДокумента, Вложение["Грузополучатель"], РольКонтрагентаПолучатель);
				
		Основание = МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеСоответствия(Вложение, "Переадресовка.Основание.Документ");
		Если ЗначениеЗаполнено(Основание) Тогда 
			
			Тип = ЗначениеМетаданных("Saby_ТипыДокумента.ПередачиЦенностей");
			ОснованиеСсылка = МодульТНЗагрузкаСервер.СсылкаНаДокументЭПД(ДляДокумента, Основание, Тип);				

			ДляДокумента.Вставить("ПереадресовкаНаОсновании", ОснованиеСсылка);
						
		КонецЕсли;
		
		ДляРегистра = СтруктураДанныхДляРегистра(
			ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных, ДопПараметры.Просмотрено);
		
		РезультатФункции.Добавить(МодульТНЗагрузкаСервер.СтруктураТитула(Титул, ДляДокумента, ДляРегистра));
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Титул "1167009"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
// Возвращаемое значение:
//	Структура - данные титула в формате подстановок
//
Функция ДанныеУведомлениеОПереадресовке(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	МодульТНЗагрузкаСервер = МодульКода("Saby_ТНЗагрузкаСервер");
	
	ВложенияДляЗагрузки = МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ВложенияДляЗагрузки(
		ОбъектДок, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		ДляДокумента.Вставить("КлючСтроки",       ДопПараметры.КлючСтроки);
		ДляДокумента.Вставить("ДокументыЭПД",     Новый Массив);
		ДляДокумента.Вставить("ДанныеЮрЛиц",      Новый Массив);
		ДляДокумента.Вставить("КонтактныеДанные", Новый Массив);
		
		ДанныеПунктаВыгрузки(Вложение["ПунктВыгрузки"], ДляДокумента);

		ДанныеПоОтметкам(ДляДокумента, Вложение["Отметки"], Титул);
		
		МодульТНЗагрузкаСервер.ЗагрузитьДанныеЮрЛиц(
			ДляДокумента, Вложение["Грузополучатель"], ЗначениеМетаданных("Saby_РолиКонтрагентов.Получатель"));
		
		СопроводительныеДокументы = Вложение["СопроводительныеДокументы"];
		Если ЗначениеЗаполнено(СопроводительныеДокументы) Тогда
			
			Основание = СопроводительныеДокументы["Отгрузка"];
			
			Тип = ЗначениеМетаданных("Saby_ТипыДокумента.ПередачиЦенностей");
			ОснованиеСсылка = МодульТНЗагрузкаСервер.СсылкаНаДокументЭПД(ДляДокумента, Основание, Тип);
				
			ДляДокумента.Вставить("ПереадресовкаНаОсновании", ОснованиеСсылка);
			
		КонецЕсли;	
		
		Причина = МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеСоответствия(Вложение, "Переадресовка.Уведомление.Причина");
		Если ЗначениеЗаполнено(Причина) Тогда
			ДляДокумента.Вставить("Причина", Причина);
		КонецЕсли;
		
		Оформитель = МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеСоответствия(Вложение, "Переадресовка.Уведомление.Отправитель");
		ЗаполнитьДанныеОформителя(Оформитель, ДляДокумента);
		
		ДляРегистра = СтруктураДанныхДляРегистра(
			ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных, ДопПараметры.Просмотрено);
		
		РезультатФункции.Добавить(МодульТНЗагрузкаСервер.СтруктураТитула(Титул, ДляДокумента, ДляРегистра));
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Титул "1110344"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
// Возвращаемое значение:
//	Структура - данные титула в формате подстановок
//
Функция ДанныеЗаменаВодителяТС(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ВложенияДляЗагрузки(
		ОбъектДок, Титул, Вложения, ДопПараметры);
		
	МодульТНЗагрузкаСервер = МодульКода("Saby_ТНЗагрузкаСервер");
		
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		ДляДокумента.Вставить("КлючСтроки",       ДопПараметры.КлючСтроки);
		ДляДокумента.Вставить("ДанныеЮрЛиц",      Новый Массив);
		ДляДокумента.Вставить("КонтактныеДанные", Новый Массив);
		ДляДокумента.Вставить("ДокументыЭПД",     Новый Массив);
		
		ДанныеЗамены = Вложение["ЗаменаВодителяТС"];
		
		ДляДокумента.Вставить(
			"ДатаВремяЗамены",
			МодульКода("Saby_ТНОбщегоНазначенияСервер").ПреобразоватьСтрокуВДатуЭПД(ДанныеЗамены["ДатаВремя"]["Значение"]));
		
		МодульТНЗагрузкаСервер.ДанныеТСПрицеповСпецРазрешений(ДляДокумента, Вложение["ТранспортноеСредство"]);
		
		МодульТНЗагрузкаСервер.ДанныеВодителей(ДляДокумента, Вложение["Водители"], ДопПараметры);

		ДанныеПоОтметкам(ДляДокумента, Вложение["Отметки"], Титул);
		
		ПричинаЗамены = ДанныеЗамены["Основание"]["Текст"];
		Если Не ЗначениеЗаполнено(ПричинаЗамены) Тогда
			ПричинаЗамены = "";
		КонецЕсли;
		ДляДокумента.Вставить("ПричинаЗамены", ПричинаЗамены);
		
		Основание = ДанныеЗамены["Основание"]["Документ"];
		Если ЗначениеЗаполнено(Основание) Тогда 
			Тип = ЗначениеМетаданных("Saby_ТипыДокумента.КТранспортнойНакладной");
			ДокументЗамены = МодульТНЗагрузкаСервер.СсылкаНаДокументЭПД(ДляДокумента, Основание, Тип);
			ДляДокумента.Вставить("ДокументЗамены", ДокументЗамены);
		КонецЕсли;
		
		// пока не требуется:
	    // - Водители.Документ
		
		ДляРегистра = СтруктураДанныхДляРегистра(
			ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных, ДопПараметры.Просмотрено);
		
		РезультатФункции.Добавить(МодульТНЗагрузкаСервер.СтруктураТитула(Титул, ДляДокумента, ДляРегистра));
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Титул "1110345"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
// Возвращаемое значение:
//	Структура - данные титула в формате подстановок
//
Функция ДанныеИзменениеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ВложенияДляЗагрузки(
		ОбъектДок, Титул, Вложения, ДопПараметры);
	
	ИмяКлючаПеревозчик = "Перевозчик";

	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		Перевозчик = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ДанныеЮрЛицаПоРоли(
			ОбъектДок.ДанныеЮрЛиц, ИмяКлючаПеревозчик).НаименованиеОрганизации;
		
		ДляДокумента = Новый Структура;		
		ДляДокумента.Вставить(ИмяКлючаПеревозчик, Перевозчик);
		
		ДанныеСчетаСОнлайна = ДанныеСчетаИзРеквизитовОнлайна(Вложение["Грузоперевозчик"]);
		Для Каждого КлючЗначение Из ДанныеСчетаСОнлайна Цикл
			ДляДокумента.Вставить(КлючЗначение.Ключ + ИмяКлючаПеревозчик, КлючЗначение.Значение);
		КонецЦикла;
				
		Стоимость = Вложение["СтоимостьПеревозки"]; 
		Если ЗначениеЗаполнено(Стоимость) Тогда 
			
			Если ЗначениеЗаполнено(Стоимость["Налог"]) Тогда 	
				СтавкаНДС = МодульКода("Saby_ТНОбщегоНазначенияСервер").ЗначениеСтавкиНДС(Стоимость["Налог"]["Ставка"], Истина);
			Иначе 
				СтавкаНДС = "без НДС";
			КонецЕсли;
		
			ДляДокумента.Вставить("Сумма",       Стоимость["ВключаяНДС"]);
			ДляДокумента.Вставить("Условия",     Стоимость["Расчет"]);
			ДляДокумента.Вставить("СуммаБезНДС", Стоимость["БезНДС"]);			
			ДляДокумента.Вставить("Ставка",      СтавкаНДС);
				
		КонецЕсли;
				
		ДляРегистра = СтруктураДанныхДляРегистра(
			ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных, ДопПараметры.Просмотрено);
		
		РезультатФункции.Добавить(МодульКода("Saby_ТНЗагрузкаСервер").СтруктураТитула(Титул, ДляДокумента, ДляРегистра));
		
	КонецЦикла;
	
	Возврат РезультатФункции;

КонецФункции

// Титул "1110346"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
// Возвращаемое значение:
//	Структура - данные титула в формате подстановок
//
Функция ДанныеСогласованиеСтоимости(ОбъектДок, Вложения, Титул, ДопПараметры)
	
	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ВложенияДляЗагрузки(
		ОбъектДок, Титул, Вложения, ДопПараметры);
	
	МодульТНЗагрузкаСервер = МодульКода("Saby_ТНЗагрузкаСервер");
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		Отправитель = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ДанныеЮрЛицаПоРоли(
			ОбъектДок.ДанныеЮрЛиц, "Отправитель").НаименованиеОрганизации;
		
		ДляДокумента = Новый Структура;
		ДляДокумента.Вставить("КлючСтроки",       ДопПараметры.КлючСтроки);
		ДляДокумента.Вставить("ДанныеЮрЛиц",      Новый Массив);
		ДляДокумента.Вставить("КонтактныеДанные", Новый Массив);
		ДляДокумента.Вставить("ДокументыЭПД",     Новый Массив);
		
		ДляДокумента.Вставить("Отправитель", Отправитель);
		
		ИнойПлательщик = Вложение["ИнойПлательщик"];
		Если ЗначениеЗаполнено(ИнойПлательщик) Тогда
			
			СтруктураДанныхЮрЛица = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ШаблонДанныхЮрЛица();
			СтруктураДанныхЮрЛица.Роль = ЗначениеМетаданных("Saby_РолиКонтрагентов.ПустаяСсылка");
			СтруктураДанныхЮрЛица.НаименованиеОрганизации = МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеСоответствия(
				ИнойПлательщик, "Название.Полное");
			ДляДокумента.ДанныеЮрЛиц.Добавить(СтруктураДанныхЮрЛица);
			
			Плательщик = СтруктураДанныхЮрЛица.НаименованиеОрганизации;
			
			Основание = ИнойПлательщик["Основание"];
			Если ЗначениеЗаполнено(Основание) Тогда
				
				Тип = ЗначениеМетаданных("Saby_ТипыДокумента.ОснованиеОплатыПеревозки");
				ОснованиеСсылка = МодульТНЗагрузкаСервер.СсылкаНаДокументЭПД(ДляДокумента, Основание, Тип);
				
				ДляДокумента.Вставить("ОснованиеОплаты", ОснованиеСсылка);
				
			КонецЕсли;
			
			ДляДокумента.Вставить("ТипПлательщик", "ДругоеЮрЛицо");
			
		Иначе 	
			Плательщик = Отправитель;			
		КонецЕсли;
		
		ДляДокумента.Вставить("Плательщик", Плательщик);
		
		ДанныеСчетаСОнлайна = ДанныеСчетаИзРеквизитовОнлайна(Вложение["Грузоотправитель"]);
		Для Каждого КлючЗначение Из ДанныеСчетаСОнлайна Цикл
			ДляДокумента.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
					
		ДляРегистра = СтруктураДанныхДляРегистра(ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных, ДопПараметры.Просмотрено);
		
		РезультатФункции.Добавить(МодульТНЗагрузкаСервер.СтруктураТитула(Титул, ДляДокумента, ДляРегистра));		
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ДанныеДинамическихТитулов

Функция СтруктураДанныхДляРегистра(ОбъектДок, Вложение, Титул, ИмяМетаданных, Просмотрено = Истина)
	
	Основной = Не МодульКода("Saby_ТНОбщегоНазначенияСервер").РезультатФункцииТитулов(
		"Saby_ТранспортнаяНакладная", "ЭтоДинамическийТитул", Титул);
	
	СтруктураДанныхДляРегистра = МодульКода("Saby_ТНЗагрузкаСервер").ШаблонСтруктурыДанныхДляРегистра(
		ОбъектДок.Ссылка, Титул, Основной);
	СтруктураДанныхДляРегистра.Просмотрено     = Просмотрено;
	СтруктураДанныхДляРегистра.СохранитьДанные = Не Основной;
	
	Возврат МодульКода("Saby_ТНЗагрузкаСервер").ДанныеДляРегистраТитулов(Вложение, ИмяМетаданных, СтруктураДанныхДляРегистра);
	
КонецФункции

Процедура ДобавитьКомментарийОтрицательногоЗавершения(ДляРегистра, ДляДокумента)
	
	Если ДляРегистра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДляДокумента.Свойство("КомментарийУведомление") И ЗначениеЗаполнено(ДляДокумента.КомментарийУведомление) Тогда
		ДляРегистра.СохранитьДанные = Истина;
		ДляРегистра.Данные = Новый Структура;
		ДляРегистра.Данные.Вставить("КомментарийУведомление", ДляДокумента.КомментарийУведомление);
	КонецЕсли;
	
КонецПроцедуры

#Область ДанныеОтрицательногоЗавершенияДО

// Титул "1115113"
//
// Параметры:
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект документа для заполнения
//  Вложения - Массив - массив соответствий данных титула с онлайна
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул
//  ДопПараметры - Структура - структура дополнительных параметров
//
// Возвращаемое значение:
//	Структура - данные титула в формате подстановок
//
Функция ДанныеУведомлениеОУточнении(ОбъектДок, Вложения, Титул, ДопПараметры)

	РезультатФункции = Новый Массив;
	
	ВложенияДляЗагрузки = МодульКода("РегистрыСведений.Saby_ДанныеТитулов").ВложенияДляЗагрузки(
		ОбъектДок, Титул, Вложения, ДопПараметры);
	
	Для Каждого Вложение Из ВложенияДляЗагрузки Цикл
		
		ДляДокумента = Новый Структура;
		
		ЗаполнитьПрошлыйТитулДляВложения(ОбъектДок, Вложение, Титул);
		ПрошлыйТитул = Вложение["ПрошлыйТитул"];
		
		ДляДокумента.Вставить("Представление", ПрошлыйТитул.Представление);
		
		ПричинаОтказа = Вложение["СведенияОбУточнении"];
		Если ЗначениеЗаполнено(ПричинаОтказа) Тогда
			ДляДокумента.Вставить("КомментарийУведомление", "Комментарий: " + ПричинаОтказа["ТекстУведУточ"]);
		КонецЕсли;
		
		// всегда перезагружаем, так как зависит от других титулов.
		Вложение.Вставить("ЗагруженВРегистр", Ложь);
		
		ДляРегистра = СтруктураДанныхДляРегистра(
			ОбъектДок, Вложение, Титул, ДопПараметры.ИмяМетаданных, ДопПараметры.Просмотрено);
		ДляРегистра.ТипТитулаОтказа = ПрошлыйТитул.Тип;
		
		РезультатФункции.Добавить(МодульКода("Saby_ТНЗагрузкаСервер").СтруктураТитула(Титул, ДляДокумента, ДляРегистра));
		
	КонецЦикла;
	
	Возврат РезультатФункции;

КонецФункции // ДанныеУведомлениеОУточнении()

Процедура ЗаполнитьПрошлыйТитулДляВложения(ОбъектДок, Вложение, Титул)
	
	ИмяКлючаПрошлыйТитул = "ПрошлыйТитул";
	
	Если Вложение[ИмяКлючаПрошлыйТитул] <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Период        = МодульКода("Saby_ТНЗагрузкаСервер").ДатаВложения(Вложение, Титул);
	Идентификатор = МодульКода("Saby_ТНЗагрузкаСервер").ИдентификаторВложения(Вложение, Титул);
	
	МаксимальныйПериод = Дата(1, 1, 1);
	ДанныеТитула = Неопределено;
	
	ИмяДокумента          = "Saby_ТранспортнаяНакладная";
	ИмяФункцииТитулОтказа = "ТитулОтказа";
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	Если Не ОбъектДок.ДополнительныеСвойства.Свойство("ТитулыДляПривязки") Тогда
		Вложение.Вставить(
			ИмяКлючаПрошлыйТитул,
			МодульТНОбщегоНазначенияСервер.РезультатФункцииТитулов(ИмяДокумента, ИмяФункцииТитулОтказа, Неопределено));
		Возврат;
	КонецЕсли;
	
	Для Каждого СтруктураТитулаДляРегистра Из ОбъектДок.ДополнительныеСвойства.ТитулыДляПривязки Цикл
		
		Если СтруктураТитулаДляРегистра.Период >= Период
			Или СтруктураТитулаДляРегистра.ИдентификаторТитула = Идентификатор Тогда
			Продолжить;
		КонецЕсли;
		
		Если МаксимальныйПериод < СтруктураТитулаДляРегистра.Период Тогда
			МаксимальныйПериод = СтруктураТитулаДляРегистра.Период;
			ДанныеТитула = СтруктураТитулаДляРегистра;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеТитула <> Неопределено Тогда
		Вложение.Вставить(
			ИмяКлючаПрошлыйТитул,
			МодульТНОбщегоНазначенияСервер.РезультатФункцииТитулов(ИмяДокумента, ИмяФункцииТитулОтказа, ДанныеТитула.ТипТитула));
	Иначе
		Вложение.Вставить(
			ИмяКлючаПрошлыйТитул,
			МодульТНОбщегоНазначенияСервер.РезультатФункцииТитулов(ИмяДокумента, ИмяФункцииТитулОтказа, Неопределено));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ДанныеОтрицательногоЗавершенияДО

Процедура ЗагрузитьДанныеПогрузки(ДляДокумента, Погрузка, ДопПараметры)
	
	Если Не ДопПараметры.ЗагрузкаСОнлайна И ДопПараметры.ЭтоПервоеОснование Тогда
		ДляДокумента.Вставить("Погрузка_ДатаВремяПрибыл", ДляДокумента.Дата);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Погрузка) Тогда
		
		// заполним погрузчика по дефолту (погрузчик = отправитель)
		ЗаполнитьДанныеКтоПогружает(ДляДокумента, Неопределено);
		
		Возврат;
		
	КонецЕсли;
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	ДатаВремяПрибыл = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Погрузка, "ДатаВремяПрибытия.Значение");
	ДатаВремяПрибыл = МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаВремяПрибыл);
	ДляДокумента.Вставить("Погрузка_ДатаВремяПрибыл", ДатаВремяПрибыл);
	
	ДатаВремяУбыл = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Погрузка, "ДатаВремяУбытия.Значение");
	ДатаВремяУбыл = МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаВремяУбыл);
	ДляДокумента.Вставить("Погрузка_ДатаВремяУбыл", ДатаВремяУбыл);
	
	ДляДокумента.Вставить(
		"Погрузка_Масса", МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Погрузка, "Груз.Масса.Брутто"));
	
	МассаМетодРасчета = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Погрузка, "Груз.Масса.МетодОпределения");
	МассаМетодРасчета = МодульКода("Перечисления.Saby_МетодОпределенияМассы").МетодОпределенияМассыПоКоду(МассаМетодРасчета);
	ДляДокумента.Вставить("Погрузка_МассаМетодРасчета", МассаМетодРасчета);
	
	КоличествоМест = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Погрузка, "Груз.КоличествоМест");
	КоличествоМест = МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(КоличествоМест);
	ДляДокумента.Вставить("Погрузка_КоличествоМест", КоличествоМест);
	
	// Состояние
	Массив = Новый Массив;
	Тара = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Погрузка, "Груз.Состояние.Тары");
	Если ЗначениеЗаполнено(Тара) Тогда
		Массив.Добавить(Тара);
	КонецЕсли;
	Кузов = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Погрузка, "Груз.Состояние.Кузова");
	Если ЗначениеЗаполнено(Кузов) Тогда
		Массив.Добавить(Кузов);
	КонецЕсли;
	Упаковка = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(Погрузка, "Груз.Состояние.Упаковки");
	Если ЗначениеЗаполнено(Упаковка) Тогда
		Массив.Добавить(Упаковка);
	КонецЕсли;
	
	ДляДокумента.Вставить("Погрузка_Состояние", СокрЛП(СтрСоединить(Массив, " ")));
	
	ЗаполнитьДанныеКтоПогружает(ДляДокумента, Погрузка["КтоПогружает"]);
	
	ЗаполнитьДанныеВладельца(ДляДокумента, Погрузка["ВладелецПункта"]);
	
КонецПроцедуры

#Область ПунктыПогрузкиИВыгрузки

Процедура ДанныеПунктаПогрузки(ДанныеПогрузкиСОнлайна, СтруктураДляЗаполнения, ДопПараметры)
	
	Если Не ЗначениеЗаполнено(ДанныеПогрузкиСОнлайна) Тогда
		Возврат;
	КонецЕсли;
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	АдресФактПогрузка = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеПогрузкиСОнлайна, "Адрес.Фактический");
	Если ЗначениеЗаполнено(АдресФактПогрузка) Тогда
		
		ДанныеАдресаПогрузка = МодульКода("Saby_ТНЗагрузкаСервер").ПреобразоватьСтруктуруАдреса(АдресФактПогрузка);
		Если ЗначениеЗаполнено(ДанныеАдресаПогрузка) Тогда
			СтруктураДляЗаполнения.Вставить("Погрузка_Адрес",        ДанныеАдресаПогрузка.АдресСтрокой);
			СтруктураДляЗаполнения.Вставить("АдресПогрузкиЗначение", ДанныеАдресаПогрузка.АдресСтруктурой);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ДопПараметры.ЗагрузкаСОнлайна И ДопПараметры.ЭтоПервоеОснование Тогда
		СтруктураДляЗаполнения.Вставить("Погрузка_ДатаВремя", СтруктураДляЗаполнения.Дата);
	КонецЕсли;
	
	ДатаВремяПогрузки = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеПогрузкиСОнлайна, "ДатаВремя.Значение");
	Если ДатаВремяПогрузки <> Неопределено Тогда
		СтруктураДляЗаполнения.Вставить(
			"Погрузка_ДатаВремя",
			МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаВремяПогрузки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеПунктаВыгрузки(ДанныеВыгрузкиСОнлайна, СтруктураДляЗаполнения)
	
	Если Не ЗначениеЗаполнено(ДанныеВыгрузкиСОнлайна) Тогда
		Возврат;
	КонецЕсли;
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	АдресФактВыгрузка = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеВыгрузкиСОнлайна, "Адрес.Фактический");
	Если ЗначениеЗаполнено(АдресФактВыгрузка) Тогда
		
		ДанныеАдресаВыгрузка = МодульКода("Saby_ТНЗагрузкаСервер").ПреобразоватьСтруктуруАдреса(АдресФактВыгрузка);
		Если ЗначениеЗаполнено(ДанныеАдресаВыгрузка) Тогда
			СтруктураДляЗаполнения.Вставить("Отправитель_АдресДоставки", ДанныеАдресаВыгрузка.АдресСтрокой);
			СтруктураДляЗаполнения.Вставить("АдресДоставкиЗначение",     ДанныеАдресаВыгрузка.АдресСтруктурой);
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаВремяВыгрузки = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(ДанныеВыгрузкиСОнлайна, "ДатаВремя.Значение");
	Если ДатаВремяВыгрузки <> Неопределено Тогда
		СтруктураДляЗаполнения.Вставить(
			"Отправитель_ДоставитьДо",
			МодульТНОбщегоНазначенияСервер.ПреобразоватьСтрокуВДатуЭПД(ДатаВремяВыгрузки));
		СтруктураДляЗаполнения.Вставить("Выгрузка_ДатаВремя", СтруктураДляЗаполнения.Отправитель_ДоставитьДо);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПунктыПогрузкиИВыгрузки

Процедура ЗагрузитьУсловияПеревозки(ДляДокумента, УсловияПеревозки)
	
	Если УсловияПеревозки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПерегрузкаЗапрещена = УсловияПеревозки["ПерегрузкаЗапрещена"] = "1";
	
	ДляДокумента.Вставить("Отправитель_ПерегрузкаЗапрещена", ПерегрузкаЗапрещена);
	ДляДокумента.Вставить("Отправитель_НормыПеревозки",      УсловияПеревозки["Нормы"]);
    ДляДокумента.Вставить("Отправитель_Пломба",              УсловияПеревозки["Пломба"]);
	ДляДокумента.Вставить("Отправитель_ДоставитьСрок",       УсловияПеревозки["СрокДоставки"]);
	ДляДокумента.Вставить("Отправитель_ОграничениеСкорости", УсловияПеревозки["ОграничениеСкорости"]);
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	
	ТемператураМинимальная = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		УсловияПеревозки, "КлиматическийРежим.Температура.Минимальная");
	ДляДокумента.Вставить(
		"Отправитель_ТемператураОт",
		МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(ТемператураМинимальная));
		
	ТемператураМаксимальная = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		УсловияПеревозки, "КлиматическийРежим.Температура.Максимальная");
	ДляДокумента.Вставить(
		"Отправитель_ТемператураДо",
		МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(ТемператураМаксимальная));
		
	ВлажностьМинимальная = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		УсловияПеревозки, "КлиматическийРежим.Влажность.Минимальная");
	ДляДокумента.Вставить(
		"Отправитель_ВлажностьОт",
		МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(ВлажностьМинимальная));
		
	ВлажностьМаксимальная = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		УсловияПеревозки, "КлиматическийРежим.Влажность.Максимальная");
	ДляДокумента.Вставить(
		"Отправитель_ВлажностьДо",
		МодульТНОбщегоНазначенияСервер.ЧислоИзСтроки(ВлажностьМаксимальная));
	
	КтоПереадресует = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		УсловияПеревозки, "Переадресовка.КтоПереадресует");
	ДляДокумента.Вставить(
		"ИнициаторПереадресации",
		МодульКода("Перечисления.Saby_РолиКонтрагентов").РольПоКоду(КтоПереадресует));
	
	ПодтверждениеПолномочий = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		УсловияПеревозки, "Переадресовка.ПодтверждениеПолномочий");
	Если ЗначениеЗаполнено(ПодтверждениеПолномочий) Тогда 
		
		Тип = ЗначениеМетаданных("Saby_ТипыДокумента.ПравоПереадресации");
		ПодтверждениеСсылка = МодульКода("Saby_ТНЗагрузкаСервер").СсылкаНаДокументЭПД(ДляДокумента, ПодтверждениеПолномочий, Тип);
					
		ДляДокумента.Вставить("ИнициаторПереадресацииПодтверждение", ПодтверждениеСсылка);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьДанныеКтоПогружает(ДляДокумента, КтоПогружает)
		
	ТипДругогоЮрЛица = "2";
	
	Если Не ЗначениеЗаполнено(КтоПогружает) Или КтоПогружает["Тип"] <> ТипДругогоЮрЛица Тогда
		// если нет другого юрлица, то копируем отправителя в отгрузчика. Считаем что это одно и то же лицо.
		МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").СкопироватьДанныеЮрЛица(ДляДокумента, "Отгрузчик", "Отправитель");
		Возврат;
	КонецЕсли;
	
	ДругойПогрузчик  = КтоПогружает["Другой"];
	Если Не ЗначениеЗаполнено(ДругойПогрузчик) Тогда
		Возврат;
	КонецЕсли;	
	
	ДругойКонтрагент = ДругойПогрузчик["Контрагент"];
	Если ЗначениеЗаполнено(ДругойКонтрагент) Тогда 
		МодульКода("Saby_ТНЗагрузкаСервер").ЗагрузитьДанныеЮрЛиц(ДляДокумента, ДругойКонтрагент, "Отгрузчик");
	КонецЕсли;
	
	// Работник          
	Работник = ДругойПогрузчик["Работник"];
	Если ЗначениеЗаполнено(Работник) Тогда
		
		Работник = ДругойПогрузчик["Работник"];
		
		СтруктураРаботника = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").СтруктураОтветственногоЛица();
		СтруктураРаботника.Роль     = ЗначениеМетаданных("Saby_РолиОтветственных.Ответственный");
		ФИОРаботника = МодульКода("Saby_ТНЗагрузкаСервер").СтруктураФИО(Работник);
		ЗаполнитьЗначенияСвойств(СтруктураРаботника, ФИОРаботника);
		
		Если ЗначениеЗаполнено(Работник["Должность"]) Тогда
			ДляДокумента.Вставить("Отгрузка_ОтветственныйДолжность", Работник["Должность"]);
		КонецЕсли;
		
		ДляДокумента.ОтветственныеЛица.Добавить(СтруктураРаботника);
		
	КонецЕсли;
	
	ЗаполнитьДокументыКтоПогружает(ДляДокумента, КтоПогружает);
		
КонецПроцедуры

Процедура ЗаполнитьДокументыКтоПогружает(ДляДокумента, КтоПогружает)
	
	МодульТНОбщегоНазначенияСервер = МодульКода("Saby_ТНОбщегоНазначенияСервер");
	МодульТНЗагрузкаСервер         = МодульКода("Saby_ТНЗагрузкаСервер");
	
	НачальныйИндекс = ДляДокумента.ДокументыЭПД.Количество();
	
	ДокументОснование = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(КтоПогружает, "Другой.ДокументОснование");
	МодульТНЗагрузкаСервер.ЗагрузитьДокументыЭПД(
		ДляДокумента, ДокументОснование, ЗначениеМетаданных("Saby_ТипыДокумента.ПередачиЦенностей"));
		
	ДокПолномочий = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
		КтоПогружает, "Другой.Работник.ОснованиеПолномочий.Документ");
	МодульТНЗагрузкаСервер.ЗагрузитьДокументыЭПД(
		ДляДокумента, ДокПолномочий, ЗначениеМетаданных("Saby_ТипыДокумента.ОтветственныйНаОсновании"));
		
	Если Не ЗначениеЗаполнено(ДокПолномочий) Тогда
		ОснованиеОтветственного = МодульТНОбщегоНазначенияСервер.ДанныеСоответствия(
			КтоПогружает,
			"Другой.Работник.ОснованиеПолномочий.ДолжностныеОбязанности");
		ДляДокумента.Вставить("Отгрузка_ОтветственныйНаОсновании", ОснованиеОтветственного);
	КонецЕсли;
		
	МодульТНЗагрузкаСервер.ЗаполнитьСсылкиНаДокументЭПД(ДляДокумента);
	
	Для ИндексДокументаЭПД = НачальныйИндекс По ДляДокумента.ДокументыЭПД.ВГраница() Цикл
		СтруктураДокументаЭПД = ДляДокумента.ДокументыЭПД[ИндексДокументаЭПД];
		Если СтруктураДокументаЭПД.Тип = ЗначениеМетаданных("Saby_ТипыДокумента.ПередачиЦенностей") Тогда 
			ДляДокумента.Вставить("Отгрузка_НаОснованииДокумент", СтруктураДокументаЭПД.Ссылка);
		ИначеЕсли СтруктураДокументаЭПД.Тип = ЗначениеМетаданных("Saby_ТипыДокумента.ОтветственныйНаОсновании") Тогда
			ДляДокумента.Вставить("Отгрузка_ОтветственныйНаОсновании", СтруктураДокументаЭПД.Ссылка);
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеВладельца(ДляДокумента, ВладелецПунктаСОнлайна)
	
	Если Не ЗначениеЗаполнено(ВладелецПунктаСОнлайна) Тогда 
		Возврат;
	КонецЕсли;
	
	Тип = МодульКода("Перечисления.Saby_ВладелецОбъектаОтгрузки").ВладелецОбъектаОтгрузкиПоКоду(ВладелецПунктаСОнлайна["Тип"]);
	
	ДляДокумента.Вставить("Владелец_Тип", Тип);
	
	Если Тип = ЗначениеМетаданных("Saby_ВладелецОбъектаОтгрузки.Отправитель") Тогда
		
		МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").СкопироватьДанныеЮрЛица(ДляДокумента, "ВладелецОбъекта", "Отправитель");
		
	ИначеЕсли Тип = ЗначениеМетаданных("Saby_ВладелецОбъектаОтгрузки.ДругоеЮрЛицо") Тогда
		
		ДругойКонтрагент = МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеСоответствия(ВладелецПунктаСОнлайна, "Другой.Контрагент");
		МодульКода("Saby_ТНЗагрузкаСервер").ЗагрузитьДанныеЮрЛиц(ДляДокумента, ДругойКонтрагент, "ВладелецОбъекта");
		
	Иначе
		
		ДляДокумента.Вставить("Владелец_НеизвестенПричина", ВладелецПунктаСОнлайна["ПочемуНеизвестен"]);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ЗагрузкаОтметок

Процедура ДанныеПоОтметкам(ДляДокумента, ОтметкиСОнлайна, Титул)
	
	РезультатФункции = Новый Массив;
	
	ДляДокумента.Вставить("Отметки", РезультатФункции);
	
	Если Не ЗначениеЗаполнено(ОтметкиСОнлайна) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеРоли = ЗначениеРолиПоТекущемуТитулу(Титул);
	
	Для Каждого Отметка Из ОтметкиСОнлайна["Отметка"] Цикл
		
		СтруктураОтметки = Новый Структура;
		
		ДатаОтметки = МодульКода("Saby_ТНОбщегоНазначенияСервер").ПреобразоватьСтрокуВДатуЭПД(Отметка["ДатаВремя"]["Значение"]);
		
		СтруктураОтметки.Вставить("Описание",   Отметка["Описание"]);
		СтруктураОтметки.Вставить("ДатаВремя",  ДатаОтметки);
		СтруктураОтметки.Вставить("Этап",       Титул);
		СтруктураОтметки.Вставить("Роль",       ЗначениеРоли);

		СтруктураОтметки.Вставить("Штрафы",     ДанныеШтрафовПоОтметкам(Отметка["Штрафы"]));
		СтруктураОтметки.Вставить("Акты",       ДанныеАктовПоОтметкам(ДляДокумента, Отметка["АктыВзвешивания"], Отметка["Акты"]));
		
		РезультатФункции.Добавить(СтруктураОтметки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеШтрафовПоОтметкам(ШтрафыСОнлайна)
	
	РезультатФункции = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ШтрафыСОнлайна) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	Для Каждого Штраф Из ШтрафыСОнлайна Цикл 
		
		СтруктураШтрафа = Новый Структура;
		// ToDo:  Валюта 
		СтруктураШтрафа.Вставить("Количество", Штраф["Количество"]);
		СтруктураШтрафа.Вставить("Сумма",      Штраф["Итог"]);
		СтруктураШтрафа.Вставить("Расчет",     Штраф["Расчет"]);
		
		РезультатФункции.Добавить(СтруктураШтрафа);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеАктовПоОтметкам(ДляДокумента, АктыВзвешиванияСОнлайна, АктыКоммерческиеСОнлайна)
	
	РезультатФункции = Новый Массив;
	
	МодульТНЗагрузкаСервер = МодульКода("Saby_ТНЗагрузкаСервер");
	
	НачальныйИндекс = ДляДокумента.ДокументыЭПД.Количество();
	
	МодульТНЗагрузкаСервер.ЗагрузитьДокументыЭПД(
		ДляДокумента, АктыВзвешиванияСОнлайна, ЗначениеМетаданных("Saby_ТипыДокумента.АктВзвешивания"));
		
	МодульТНЗагрузкаСервер.ЗагрузитьДокументыЭПД(
		ДляДокумента, АктыКоммерческиеСОнлайна, ЗначениеМетаданных("Saby_ТипыДокумента.АктКоммерческий"));
	
	МодульТНЗагрузкаСервер.ЗаполнитьСсылкиНаДокументЭПД(ДляДокумента);
	
	Для ИндексДокументаЭПД = НачальныйИндекс По ДляДокумента.ДокументыЭПД.ВГраница() Цикл
		СтруктураДокументаЭПД = ДляДокумента.ДокументыЭПД[ИндексДокументаЭПД];
		
		СтруктураАкта = Новый Структура;
		СтруктураАкта.Вставить("Документ",                СтруктураДокументаЭПД.Ссылка);
		СтруктураАкта.Вставить("Тип",                     СтруктураДокументаЭПД.Тип);
		СтруктураАкта.Вставить("КлючСтроки_ДокументыЭПД", СтруктураДокументаЭПД.КлючСтроки);
		
		РезультатФункции.Добавить(СтруктураАкта);
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьДанныеПоОтметкам(ОбъектДок, Отметки, Титул)
	
	ЗначениеРоли = ЗначениеРолиПоТекущемуТитулу(Титул);
	
	МодульКода("Saby_ТНОбщегоНазначенияСервер").ЗачисткаОтметокШтрафовАктов(ОбъектДок, Титул, ЗначениеРоли);
	
	МодульТНЗагрузкаСервер = МодульКода("Saby_ТНЗагрузкаСервер");
	
	Для Каждого СтруктураОтметки Из Отметки Цикл
		
		СтрокаОтметки = МодульТНЗагрузкаСервер.ДобавитьИЗаполнитьСтроку(ОбъектДок.Отметки, СтруктураОтметки, "КлючСтроки");
		СтрокаОтметки.КлючСтроки = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").НовыйКлючОсновнойСтроки(ОбъектДок, "Отметки");
		
		Для Каждого СтруктураШтрафа Из СтруктураОтметки.Штрафы Цикл
			СтрокаШтрафа = МодульТНЗагрузкаСервер.ДобавитьИЗаполнитьСтроку(ОбъектДок.Штрафы, СтруктураШтрафа, "КлючСтроки_Отметки");
			СтрокаШтрафа.КлючСтроки_Отметки = СтрокаОтметки.КлючСтроки;
		КонецЦикла;
		
		Для Каждого СтруктураАкта Из СтруктураОтметки.Акты Цикл
			СтрокаАкта = МодульТНЗагрузкаСервер.ДобавитьИЗаполнитьСтроку(ОбъектДок.Акты, СтруктураАкта, "КлючСтроки_Отметки");
			СтрокаАкта.КлючСтроки_Отметки = СтрокаОтметки.КлючСтроки;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеРолиПоТекущемуТитулу(Титул)
	
	РольПеревозчик = ЗначениеМетаданных("Saby_РолиКонтрагентов.Перевозчик");
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(ЗначениеМетаданных("Saby_ТипТитулаЭтрН.Погрузка"), 
		ЗначениеМетаданных("Saby_РолиКонтрагентов.Отправитель"));
	
	Соответствие.Вставить(ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПолучениеГруза"), РольПеревозчик);
	
	Соответствие.Вставить(ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПриемкаГруза"), 
		ЗначениеМетаданных("Saby_РолиКонтрагентов.Получатель"));	 		
	
	Соответствие.Вставить(ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ВыдачаГруза"), РольПеревозчик);
		
	Соответствие.Вставить(ЗначениеМетаданных("Saby_ТипТитулаЭтрН.Переадресовка"), РольПеревозчик);
		
	Соответствие.Вставить(ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПереадресовкаУведомление"), 
		ЗначениеМетаданных("Saby_РолиКонтрагентов.Отправитель"));
		
	Возврат Соответствие.Получить(Титул);	
		
КонецФункции

#КонецОбласти // ЗагрузкаОтметок

Функция КомментарийСобытияТитула(Титул, События)
	
	РезультатФункции = "";
	
	ПредставленияТитула = МодульКода("Saby_ТНОбщегоНазначенияСервер").РезультатФункцииТитулов(
		"Saby_ТранспортнаяНакладная", "ПредставленияТитула", Титул);
	
	Для Каждого Событие Из События Цикл
		Если Событие["Название"] = ПредставленияТитула.НазваниеСобытияОтрицательногоПерехода Тогда
			РезультатФункции = Событие["Комментарий"];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ЗагрузитьДокументИзJson

Функция ДанныеСчетаИзРеквизитовОнлайна(ДанныеСОнлайна)
	
	РезультатФункции = Новый Структура;
	
	Если Не ЗначениеЗаполнено(ДанныеСОнлайна) Или Не ЗначениеЗаполнено(ДанныеСОнлайна["Реквизиты"]) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
		
	БанкРеквизиты = ДанныеСОнлайна["Реквизиты"]["Банковские"];
	
	РезультатФункции.Вставить("НомерСчета", БанкРеквизиты["НомерСчета"]);
	
	Банк = БанкРеквизиты["Банк"];
	Если ЗначениеЗаполнено(Банк) Тогда 
		
		НаименованиеБанк = Банк["Наименование"];
		Если ЗначениеЗаполнено(НаименованиеБанк) Тогда
			БанкНазвание = НаименованиеБанк["Полное"];
		КонецЕсли;
	
		БанкБИК      = Банк["БИК"];
		БанкКоррСчет = Банк["КоррСчет"]; 
		
		РезультатФункции.Вставить("БанкНазвание", БанкНазвание);
		РезультатФункции.Вставить("БанкБИК",      БанкБИК);
		РезультатФункции.Вставить("БанкКоррСчет", БанкКоррСчет);
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьСоставителя(Вложение, ДляДокумента, ДопПараметры)
	
	ДанныеСоставителя = МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеСоответствия(Вложение, "Файл.Составитель");
	Если Не ЗначениеЗаполнено(ДанныеСоставителя) Тогда
		Возврат;
	КонецЕсли;
	
	МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").СкопироватьДанныеЮрЛица(ДляДокумента, "Оформитель", "Отгрузчик");
	
	СтруктураДанныхЮрЛица = ДляДокумента.ДанныеЮрЛиц[ДляДокумента.ДанныеЮрЛиц.ВГраница()];
	
	Основание = МодульКода("Saby_ТНОбщегоНазначенияСервер").ДанныеСоответствия(Вложение, "Файл.Составитель.Основание.Документ");
	Если ЗначениеЗаполнено(Основание) Тогда 
		
		Тип = ЗначениеМетаданных("Saby_ТипыДокумента.СоставительНаОсновании");
		ОснованиеСсылка = МодульКода("Saby_ТНЗагрузкаСервер").СсылкаНаДокументЭПД(ДляДокумента, Основание, Тип);
				
		ДляДокумента.Вставить("Составитель_НаОснованииДокумент", ОснованиеСсылка);
		
		СтруктураДанныхЮрЛица.Основание = ОснованиеСсылка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеДокументовЭПД(ДляДокумента, ДанныеДокументов)
	
	Если Не ЗначениеЗаполнено(ДанныеДокументов) Тогда 
		Возврат;
	КонецЕсли;
	
	МодульТНЗагрузкаСервер = МодульКода("Saby_ТНЗагрузкаСервер");
	
	НачальныйИндекс = ДляДокумента.ДокументыЭПД.Количество();
			
	МодульТНЗагрузкаСервер.ЗагрузитьДокументыЭПД(
		ДляДокумента,
		ДанныеДокументов["Ведомость"],
		ЗначениеМетаданных("Saby_ТипыДокумента.СопроводительнаяВедомость"));
	
	МодульТНЗагрузкаСервер.ЗагрузитьДокументыЭПД(
		ДляДокумента,
		ДанныеДокументов["ДоговорНаУслугиПеревозки"],
		ЗначениеМетаданных("Saby_ТипыДокумента.ДоговорПеревозки"));
	
	МодульТНЗагрузкаСервер.ЗагрузитьДокументыЭПД(
		ДляДокумента,
		ДанныеДокументов["Груз"],
		ЗначениеМетаданных("Saby_ТипыДокумента.КГрузу"));
	
	МодульТНЗагрузкаСервер.ЗагрузитьДокументыЭПД(
		ДляДокумента,
		ДанныеДокументов["Отгрузка"],
		ЗначениеМетаданных("Saby_ТипыДокумента.ПередачиЦенностей"));
	
	МодульТНЗагрузкаСервер.ЗагрузитьДокументыЭПД(
		ДляДокумента,
		ДанныеДокументов["ТранспортнаяНакладная"],
		ЗначениеМетаданных("Saby_ТипыДокумента.КТранспортнойНакладной"));
		
	МодульТНЗагрузкаСервер.ЗаполнитьСсылкиНаДокументЭПД(ДляДокумента);
	
	ДляДокумента.Вставить("СопроводительныеДокументы", ДляДокумента.СопроводительныеДокументы);
	
	Для ИндексДокументаЭПД = НачальныйИндекс По ДляДокумента.ДокументыЭПД.ВГраница() Цикл
		СтруктураДокументаЭПД = ДляДокумента.ДокументыЭПД[ИндексДокументаЭПД];
		Если СтруктураДокументаЭПД.Тип = ЗначениеМетаданных("Saby_ТипыДокумента.СопроводительнаяВедомость") Тогда
			
			ДляДокумента.Вставить("Отправитель_СопроводительнаяВедомость", СтруктураДокументаЭПД.Ссылка);
			
		ИначеЕсли СтруктураДокументаЭПД.Тип = ЗначениеМетаданных("Saby_ТипыДокумента.ДоговорПеревозки") Тогда
			
			СтруктураЗаказчика = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ДанныеЮрЛицаПоРоли(
				ДляДокумента.ДанныеЮрЛиц, "Заказчик");
			
			Если СтруктураЗаказчика.Заполнена Тогда
				ДляДокумента.Вставить("Заказчик_Договор", СтруктураДокументаЭПД.Ссылка);
			КонецЕсли;
			
		Иначе
			
			СтруктураСопроводительногоДокумента = Новый Структура;
			СтруктураСопроводительногоДокумента.Вставить("СопроводительныйДокумент", СтруктураДокументаЭПД.Ссылка);
			ДляДокумента.СопроводительныеДокументы.Добавить(СтруктураСопроводительногоДокумента);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеОформителя(ОформительСОнлайна, ДляДокумента)
	
	Если Не ЗначениеЗаполнено(ОформительСОнлайна) Тогда 
		Возврат;	
	КонецЕсли;
	
	ОформилСтруктура = Новый Структура;
	
	ОформилСтруктура.Вставить("Фамилия",  ОформительСОнлайна["Фамилия"]);
	ОформилСтруктура.Вставить("Имя",      ОформительСОнлайна["Имя"]);
	ОформилСтруктура.Вставить("Отчество", ОформительСОнлайна["Отчество"]);
	
	ОформилСтруктура.Вставить("Телефоны",         Новый Массив);
	ОформилСтруктура.Вставить("ЭлектроннаяПочта", "");
	
	// Для того, чтобы не отбилась функция КонтактнаяИнформация.
	ОформительСОнлайна.Вставить("Ссылка", Истина);
	
	СтруктураКонтактныхДанных = Новый Структура;
	СтруктураКонтактныхДанных.Вставить("Роль", ЗначениеМетаданных("Saby_РолиКонтрагентов.ПустаяСсылка"));
	СтруктураКонтактныхДанных.Вставить("КонтактныеДанные", Новый Массив);
	МодульКода("Saby_ТНЗагрузкаСервер").ЗаполнитьКонтактныеДанныеЮрЛица(СтруктураКонтактныхДанных, ОформительСОнлайна["Контакты"]);
	Для Каждого СтрокаКИ Из СтруктураКонтактныхДанных.КонтактныеДанные Цикл
		Если СтрокаКИ.Тип = ЗначениеМетаданных("ТипыКонтактнойИнформации.Телефон") Тогда
			ОформилСтруктура.Телефоны.Добавить(СтрокаКИ.Значение);
		КонецЕсли;
		Если СтрокаКИ.Тип = ЗначениеМетаданных("ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
			ОформилСтруктура.ЭлектроннаяПочта = СтрокаКИ.Значение;
		КонецЕсли;
		ДляДокумента.КонтактныеДанные.Добавить(СтрокаКИ);
	КонецЦикла;
	
	ДляДокумента.Вставить("ОформилСтруктура", ЗначениеВСтрокуВнутр(ОформилСтруктура));
	
КонецПроцедуры

Процедура ЗаполнитьСопроводительныеДокументы(ОбъектДок, ДляДокумента)
	
	Если Не ДляДокумента.Свойство("СопроводительныеДокументы")
		Или ДляДокумента.СопроводительныеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДок.СопроводительныеДокументы.Очистить();
	
	Для Каждого СтруктураСопроводительногоДокумента Из ДляДокумента.СопроводительныеДокументы Цикл
		СтрокаСопроводительногоДокумента = ОбъектДок.СопроводительныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСопроводительногоДокумента, СтруктураСопроводительногоДокумента);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСопроводительныеДокументы(ДляДокумента, ТЗ, ТипыНеСопроводительныеДокументы)
	
	ЕстьСопроводительныеДокументы = Ложь;
	Для Каждого СтрокаДок Из ТЗ Цикл
		Если ТипыНеСопроводительныеДокументы.Найти(СтрокаДок.ТипДок) = Неопределено Тогда
			ЕстьСопроводительныеДокументы = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьСопроводительныеДокументы Тогда
		ДляДокумента.Удалить("СопроводительныеДокументы");
	КонецЕсли;
	
КонецПроцедуры

Функция ФлагЭкспедитор(ДляДокумента)
	
	МодульТНОбщегоНазначенияКлиентСервер = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер");
	
	ОтборПоРоли = Новый Структура;
	
	ОтборПоРоли.Вставить("Роль", ЗначениеМетаданных("Saby_РолиКонтрагентов.Заказчик"));
	НайденныеСтроки = МодульТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(
		ДляДокумента.ДанныеЮрЛиц, ОтборПоРоли);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	СтрокаЗаказчика = НайденныеСтроки[НайденныеСтроки.ВГраница()];
	
	ОтборПоРоли.Вставить("Роль", ЗначениеМетаданных("Saby_РолиКонтрагентов.Отправитель"));
	НайденныеСтроки = МодульТНОбщегоНазначенияКлиентСервер.НайтиСтрокиУниверсально(
		ДляДокумента.ДанныеЮрЛиц, ОтборПоРоли);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаОтправителя = НайденныеСтроки[НайденныеСтроки.ВГраница()];
	Иначе
		СтрокаОтправителя = МодульТНОбщегоНазначенияКлиентСервер.ШаблонДанныхЮрЛица();
	КонецЕсли;
	
	ЮрЛицаСовпадают = МодульТНОбщегоНазначенияКлиентСервер.ЮрЛицаСовпадают(СтрокаЗаказчика, СтрокаОтправителя);
	
	Возврат Не ЮрЛицаСовпадают;
	
КонецФункции

#КонецОбласти // Загрузка

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область include_etrn_base_CommonModule_ОпределениеМодуляКода
#КонецОбласти // include_etrn_base_CommonModule_ОпределениеМодуляКода

#Область include_etrn_base_CommonModule_ЗначениеМетаданных
#КонецОбласти // include_etrn_base_CommonModule_ЗначениеМетаданных
