
#Область ПрограммныйИнтерфейс

// Запись данных титулов
//
// Параметры: 
// 	ДинамическиеТитулы - Массив - данные по титулам в формате подстановок для записи 
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект исходного документа, по которому пишем данные
//  ИмяМетаданных - Строка - имя метаданных реквизита СсылкаНаДокумент
//
Процедура ЗаписатьДанные(ДинамическиеТитулы, ОбъектДок, ИмяМетаданных) Экспорт
	
	Если ДинамическиеТитулы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтруктураДинамическогоТитула Из ДинамическиеТитулы Цикл
		
		Если Не СтруктураДинамическогоТитула.Свойство("ДляРегистра")
			Или СтруктураДинамическогоТитула.ДляРегистра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураТитулаДляРегистра = СтруктураТитулаДляРегистра(СтруктураДинамическогоТитула, ИмяМетаданных);
		
		Если Не ОбъектДок.Ссылка.Пустая() Тогда
			МенеджерЗаписи = СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураТитулаДляРегистра);
			МенеджерЗаписи.Записать();
		Иначе
			ОбъектДок.ДобавитьСтруктуруТитулаДляЗаписи(СтруктураТитулаДляРегистра);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает дополненные данные вложения из СБИС. Добавляет признак наличия титула в регистре.
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.Saby_ТранспортнаяНакладная - документ, по которому загружаются данные.
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул из СБИС.
//  Вложения - Массив - массив соответствий данных из СБИС
//  ДопПараметры - Структура - структура дополнительных параметров загрузки вложений.
//    Saby_ТНЗагрузкаСервер.ДопПараметрыЗагрузкиВложения
//
// Возвращаемое значение:
//   Массив - расширенная информация по вложениям.
//
Функция ВложенияДляЗагрузки(СсылкаНаДокумент, Титул, Вложения, ДопПараметры) Экспорт
	
	РезультатФункции = Новый Массив;
	
	СоответствиеВложений = Новый Соответствие;
	
	ТаблицаВложений = Новый ТаблицаЗначений;
	ТаблицаВложений.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока("36"));
	ТаблицаВложений.Колонки.Добавить("Дата",          ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Для Каждого СтруктураВложения Из Вложения Цикл
		
		Идентификатор = Saby_ТНЗагрузкаСервер.ИдентификаторВложения(СтруктураВложения, Титул);
		
		СоответствиеВложений.Вставить(Идентификатор, СтруктураВложения);
		
		СтрокаВложения = ТаблицаВложений.Добавить();
		СтрокаВложения.Идентификатор = Идентификатор;
		СтрокаВложения.Дата          = Saby_ТНЗагрузкаСервер.ДатаВложения(СтруктураВложения, Титул);
		
	КонецЦикла;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ТаблицаВложений.Идентификатор КАК Идентификатор,
	|	ТаблицаВложений.Дата КАК Дата,
	|	&СсылкаНаДокумент КАК СсылкаНаДокумент
	|ПОМЕСТИТЬ ДанныеТаблицыВложений
	|ИЗ
	|	&ТаблицаВложений КАК ТаблицаВложений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Saby_ДанныеТитулов.Период КАК Период,
	|	Saby_ДанныеТитулов.ИдентификаторТитула КАК ИдентификаторТитула
	|ПОМЕСТИТЬ ЗагруженныеДинамическиеТитулы
	|ИЗ
	|	РегистрСведений.Saby_ДанныеТитулов КАК Saby_ДанныеТитулов
	|ГДЕ
	|	Saby_ДанныеТитулов.СсылкаНаДокумент = &СсылкаНаДокумент
	|	И Saby_ДанныеТитулов.ТипТитула = &ТипТитула
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Saby_ДанныеТитулов.Период) КАК Период,
	|	Saby_ДанныеТитулов.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	ДанныеТаблицыВложений.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ПериодПредыдущегоТитула
	|ИЗ
	|	РегистрСведений.Saby_ДанныеТитулов КАК Saby_ДанныеТитулов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеТаблицыВложений КАК ДанныеТаблицыВложений
	|		ПО Saby_ДанныеТитулов.СсылкаНаДокумент = ДанныеТаблицыВложений.СсылкаНаДокумент
	|			И Saby_ДанныеТитулов.Период <= ДанныеТаблицыВложений.Дата
	|			И Saby_ДанныеТитулов.ИдентификаторТитула <> ДанныеТаблицыВложений.Идентификатор
	|ГДЕ
	|	ЗНАЧЕНИЕ(Перечисление.Saby_ТипТитулаЭтрН.УведомлениеОУточнении) = &ТипТитула
	|
	|СГРУППИРОВАТЬ ПО
	|	Saby_ДанныеТитулов.СсылкаНаДокумент,
	|	ДанныеТаблицыВложений.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодПредыдущегоТитула.Идентификатор КАК Идентификатор,
	|	Saby_ДанныеТитулов.ТипТитула КАК ТипТитула
	|ПОМЕСТИТЬ ПрошлыйТитул
	|ИЗ
	|	ПериодПредыдущегоТитула КАК ПериодПредыдущегоТитула
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Saby_ДанныеТитулов КАК Saby_ДанныеТитулов
	|		ПО ПериодПредыдущегоТитула.СсылкаНаДокумент = Saby_ДанныеТитулов.СсылкаНаДокумент
	|			И ПериодПредыдущегоТитула.Период = Saby_ДанныеТитулов.Период
	|			И ПериодПредыдущегоТитула.Идентификатор <> Saby_ДанныеТитулов.ИдентификаторТитула
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТаблицыВложений.Идентификатор КАК Идентификатор,
	|	ДанныеТаблицыВложений.Дата КАК Дата,
	|	НЕ ЗагруженныеДинамическиеТитулы.ИдентификаторТитула ЕСТЬ NULL КАК ЗагруженВРегистр,
	|	ЕСТЬNULL(ПрошлыйТитул.ТипТитула, ЗНАЧЕНИЕ(Перечисление.Saby_ТипТитулаЭтрН.ПустаяСсылка)) КАК ТипПрошлогоТитула
	|ИЗ
	|	ДанныеТаблицыВложений КАК ДанныеТаблицыВложений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗагруженныеДинамическиеТитулы КАК ЗагруженныеДинамическиеТитулы
	|		ПО ДанныеТаблицыВложений.Идентификатор = ЗагруженныеДинамическиеТитулы.ИдентификаторТитула
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПрошлыйТитул КАК ПрошлыйТитул
	|		ПО ДанныеТаблицыВложений.Идентификатор = ПрошлыйТитул.Идентификатор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	ЗапросДанных.УстановитьПараметр("ТаблицаВложений", ТаблицаВложений);
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	ЗапросДанных.УстановитьПараметр("ТипТитула", Титул);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		СтруктураВложения = СоответствиеВложений.Получить(ВыборкаДанных.Идентификатор);
		СтруктураВложения.Вставить("ЗагруженВРегистр", ВыборкаДанных.ЗагруженВРегистр);
		Если Не ВыборкаДанных.ТипПрошлогоТитула.Пустая() Тогда
			СтруктураВложения.Вставить(
				"ПрошлыйТитул",
				Перечисления.Saby_ТипТитулаЭтрН.ТитулОтказа(ВыборкаДанных.ТипПрошлогоТитула));
		КонецЕсли;
		
		РезультатФункции.Добавить(СтруктураВложения);
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Получает следующую порцию данных титулов для ленты.
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.Saby_ТранспортнаяНакладная - документ для получения титулов
//  ПериодДо - Дата - период до которого получаются титулы
//  Отбор - Структура - дополнительные отборы
//
// Возвращаемое значение:
//   Массив - массив структур данны см. СтруктураДанных()
//
Функция СледующиеИзменения(СсылкаНаДокумент, ПериодДо, Отбор = Неопределено) Экспорт
	
	РезультатФункции = Новый Массив;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 999
	|	Saby_ДанныеТитулов.Период КАК Период,
	|	Saby_ДанныеТитулов.ТипТитула КАК ТипТитула,
	|	Saby_ДанныеТитулов.ИдентификаторТитула КАК ИдентификаторТитула,
	|	Saby_ДанныеТитулов.Данные КАК Данные,
	|	Saby_ДанныеТитулов.Просмотрено КАК Просмотрено,
	|	Saby_ДанныеТитулов.ТипТитулаОтказа КАК ТипТитулаОтказа
	|ИЗ
	|	РегистрСведений.Saby_ДанныеТитулов КАК Saby_ДанныеТитулов
	|ГДЕ
	|	Saby_ДанныеТитулов.СсылкаНаДокумент = &СсылкаНаДокумент
	|	И Saby_ДанныеТитулов.Период < &ПериодДо
	|	И 1 = 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	ЗапросДанных.Текст = СтрЗаменить(ЗапросДанных.Текст, "999", ПорцияВыборкиИзменений());
	
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	ЗапросДанных.УстановитьПараметр("ПериодДо",         ПериодДо);
	
	ПрименитьОтборы(ЗапросДанных, Отбор, "Saby_ДанныеТитулов");
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		
		СтруктураДанных = СтруктураДанных();
		СтруктураДанных.Вставить("Данные");
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ВыборкаДанных);
		
		Если ВыборкаДанных.ТипТитулаОтказа <> Перечисления.Saby_ТипТитулаЭтрН.ПустаяСсылка()
			И Не Перечисления.Saby_ТипТитулаЭтрН.ЭтоДинамическийТитул(ВыборкаДанных.ТипТитула) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьОписаниеИзменения(СтруктураДанных);
		
		ЗаполнитьПредставление(СтруктураДанных);
		
		СтруктураДанных.Удалить("Данные");
		
		РезультатФункции.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Получает количество титулов по документу в регистре.
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.Saby_ТранспортнаяНакладная - документ для получения титулов
//
// Возвращаемое значение:
//   Структура - структура данных:
//     * ВсегоИзменений - Число - всего титулов в регистре
//     * Непросмотренные - Число - непросмотренные титулы в регистре
//
Функция КоличествоИзменений(СсылкаНаДокумент) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ВсегоИзменений",  0);
	РезультатФункции.Вставить("Непросмотренные", 0);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Saby_ДанныеТитулов.ИдентификаторТитула) КАК Количество,
	|	Saby_ДанныеТитулов.Просмотрено КАК Просмотрено
	|ИЗ
	|	РегистрСведений.Saby_ДанныеТитулов КАК Saby_ДанныеТитулов
	|ГДЕ
	|	Saby_ДанныеТитулов.СсылкаНаДокумент = &СсылкаНаДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Saby_ДанныеТитулов.Просмотрено";
	
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		РезультатФункции.ВсегоИзменений = РезультатФункции.ВсегоИзменений + ВыборкаДанных.Количество;
		Если Не ВыборкаДанных.Просмотрено Тогда
			РезультатФункции.Непросмотренные = РезультатФункции.Непросмотренные + ВыборкаДанных.Количество;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Устанавливает признак Просмотрено в регистре.
//
// Параметры:
//  МассивСсылокНаДокумент - Массив - массив ссылок на документы для установки признака просмотрен.
//  ИдентификаторыТитулов - Массив - массив строк идентификаторов, которые нужно просмотреть.
//
Процедура Просмотреть(МассивСсылокНаДокумент, ИдентификаторыТитулов = Неопределено) Экспорт
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Saby_ДанныеТитулов.Период КАК Период,
	|	Saby_ДанныеТитулов.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	Saby_ДанныеТитулов.ТипТитула КАК ТипТитула,
	|	Saby_ДанныеТитулов.ИдентификаторТитула КАК ИдентификаторТитула,
	|	Saby_ДанныеТитулов.Данные КАК Данные,
	|	ИСТИНА КАК Просмотрено
	|ИЗ
	|	РегистрСведений.Saby_ДанныеТитулов КАК Saby_ДанныеТитулов
	|ГДЕ
	|	Saby_ДанныеТитулов.СсылкаНаДокумент В(&МассивСсылокНаДокумент)
	|	И Saby_ДанныеТитулов.ИдентификаторТитула В(&ИдентификаторыТитулов)
	|	И НЕ Saby_ДанныеТитулов.Просмотрено";
	
	ЗапросДанных.УстановитьПараметр("МассивСсылокНаДокумент", МассивСсылокНаДокумент);
	Если ИдентификаторыТитулов <> Неопределено Тогда
		ЗапросДанных.УстановитьПараметр("ИдентификаторыТитулов", ИдентификаторыТитулов);
	Иначе
		ЗапросДанных.Текст = СтрЗаменить(
			ЗапросДанных.Текст,
			"Saby_ДанныеТитулов.ИдентификаторТитула В(&ИдентификаторыТитулов)",
			"ИСТИНА");
	КонецЕсли;
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		МенеджерЗаписи = СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДанных);
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Записывет указанные данные в регистр по документу.
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.Saby_ТранспортнаяНакладная - документ для записи данных в регистр.
//  ТитулыДляПривязки - Массив - массив данных для записи в регистр.
//
Процедура ПривязатьТитулыКДокументу(СсылкаНаДокумент, ТитулыДляПривязки) Экспорт
	
	Для Каждого СтруктураТитулаДляРегистра Из ТитулыДляПривязки Цикл
		МенеджерЗаписи = СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураТитулаДляРегистра);
		МенеджерЗаписи.СсылкаНаДокумент = СсылкаНаДокумент;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Возвращает данные для визуализации ленты в документе транспортной накладной.
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.Saby_ТранспортнаяНакладная - документ, для которого нужны данные ленты.
//  ИмяМетаданных - Строка - имя метаданных реквизита СсылкаНаДокумент
//
// Возвращаемое значение:
//   Массив - массив структур данных для визуализации ленты см. СтруктураДанных()
//
Функция ДанныеДляЛенты(СсылкаНаДокумент, ИмяМетаданных) Экспорт
	
	РезультатФункции = Новый Массив;
	
	МенеджерТитулов = Документы[ИмяМетаданных].МенеджерТитулов();
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	МенеджерТитулов.СформироватьТаблицуДополнения(МенеджерВременныхТаблиц);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Saby_ДанныеТитулов.Период КАК Период,
	|	Saby_ДанныеТитулов.ТипТитула КАК ТипТитула,
	|	Saby_ДанныеТитулов.ИдентификаторТитула КАК ИдентификаторТитула,
	|	Saby_ДанныеТитулов.Основной КАК Основной,
	|	Saby_ДанныеТитулов.Данные КАК Данные,
	|	Saby_ДанныеТитулов.ТипТитулаОтказа КАК ТипТитулаОтказа
	|ПОМЕСТИТЬ ДанныеТитулов
	|ИЗ
	|	РегистрСведений.Saby_ДанныеТитулов КАК Saby_ДанныеТитулов
	|ГДЕ
	|	Saby_ДанныеТитулов.СсылкаНаДокумент = &СсылкаНаДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТитулов.Период КАК Период,
	|	ДанныеТитулов.ТипТитула КАК ТипТитула,
	|	ДанныеТитулов.ИдентификаторТитула КАК ИдентификаторТитула,
	|	ДанныеТитулов.Основной КАК Основной,
	|	ДанныеТитулов.Данные КАК Данные,
	|	ДанныеТитулов.ТипТитулаОтказа КАК ТипТитулаОтказа
	|ИЗ
	|	ДанныеТитулов КАК ДанныеТитулов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДополнения.Период,
	|	ТаблицаДополнения.ТипТитула,
	|	ТаблицаДополнения.ИдентификаторТитула,
	|	ТаблицаДополнения.Основной,
	|	ТаблицаДополнения.Данные,
	|	ТаблицаДополнения.ТипТитулаОтказа
	|ИЗ
	|	ТаблицаДополнения КАК ТаблицаДополнения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТитулов КАК ДанныеТитулов
	|		ПО ДанныеТитулов.ТипТитула = ТаблицаДополнения.ТипТитула
	|ГДЕ
	|	ДанныеТитулов.Период ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	
	ТитулыОтказа = Новый Соответствие;
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	Пока ВыборкаДанных.Следующий() Цикл
		
		Если ТитулыОтказа.Получить(ВыборкаДанных.ТипТитула) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаДанных.ТипТитулаОтказа <> МенеджерТитулов.ПустаяСсылка() Тогда
			ТитулыОтказа.Вставить(ВыборкаДанных.ТипТитулаОтказа, Истина);
		КонецЕсли;
		
		СтруктураДанных = СтруктураДанных();
		СтруктураДанных.Вставить("Данные");
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ВыборкаДанных);
		
		Если СтруктураДанных.ИдентификаторТитула = "" Тогда
			СтруктураДанных.Период = Дата(1, 1, 1, 0, 0, 0);
		КонецЕсли;
		
		ЗаполнитьОписание(СтруктураДанных);
		ЗаполнитьПредставление(СтруктураДанных);
		
		СтруктураДанных.Удалить("Данные");
		
		РезультатФункции.Добавить(СтруктураДанных);
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция СтруктураДанных()
	
	РезультатФункции = Новый Структура;
	
	РезультатФункции.Вставить("Период",              Дата(1, 1, 1, 0, 0, 0));
	РезультатФункции.Вставить("ТипТитула",           Перечисления.Saby_ТипТитулаЭтрН.ПустаяСсылка());
	РезультатФункции.Вставить("ИдентификаторТитула", "");
	РезультатФункции.Вставить("Описание",            "");
	РезультатФункции.Вставить("Просмотрено",         Ложь);
	РезультатФункции.Вставить("Представление",       "");
	РезультатФункции.Вставить("Основной",            Истина);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПорцияВыборкиИзменений(Знач Порция = 0)
	
	Если Порция = 0 Тогда
		Порция = 10;
	КонецЕсли;
	
	Возврат Формат(Порция, "ЧДЦ=0; ЧГ=");
	
КонецФункции

Процедура ПрименитьОтборы(ЗапросДанных, Отбор, ИмяОсновнойТаблицы)
	
	Если Не ЗначениеЗаполнено(Отбор) Или Не ЗначениеЗаполнено(ИмяОсновнойТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонОтбора = "И %1.%2 %3
	|И 1 = 1";
	
	ШаблонУсловияИПараметра = "%1 %2";
	
	Для Каждого КлючЗначение Из Отбор Цикл
		
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Массив") Тогда
			УсловиеИПараметр = СтрШаблон(ШаблонУсловияИПараметра, "В", "(&%2)");
		Иначе
			УсловиеИПараметр = СтрШаблон(ШаблонУсловияИПараметра, "=", "&%2");
		КонецЕсли;
		
		ШаблонТекущегоОтбора = СтрЗаменить(ШаблонОтбора, "%3", УсловиеИПараметр);
		
		ТекстОтбора = СтрШаблон(ШаблонТекущегоОтбора, ИмяОсновнойТаблицы, КлючЗначение.Ключ);
		
		ЗапросДанных.Текст = СтрЗаменить(ЗапросДанных.Текст, "И 1 = 1", ТекстОтбора);
		
		ЗапросДанных.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеИзменения(Изменение)
	
	Если Изменение.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.ПереадресовкаУведомление Тогда
		ИзмененияПереадресовкаУведомление(Изменение);
	ИначеЕсли Изменение.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.Переадресовка Тогда
		ИзмененияПереадресовка(Изменение);
	ИначеЕсли Изменение.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.ЗаменаВодителяТС Тогда
		ИзмененияЗаменаВодителяТС(Изменение);
	ИначеЕсли Изменение.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.ИзменениеСтоимости Тогда
		ИзмененияИзменениеСтоимости(Изменение);
	ИначеЕсли Изменение.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.СогласованиеСтоимости Тогда
		ИзмененияСогласованиеСтоимости(Изменение);
	ИначеЕсли Изменение.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.УведомлениеОУточнении Тогда
		ИзмененияУведомлениеОУточнении(Изменение);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзмененияПереадресовкаУведомление(Изменение)
	
	ДанныеИзменений = ЗначениеИзСтрокиВнутр(Изменение.Данные);
	
	МассивОписанийИзменений = Новый Массив;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Отправитель_АдресДоставки") Тогда
		МассивОписанийИзменений.Добавить("Согласование адреса доставки: " + ДанныеИзменений.Отправитель_АдресДоставки);
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Отправитель_ДоставитьДо") Тогда
		МассивОписанийИзменений.Добавить(
			"Согласование даты доставки: " + Формат(ДанныеИзменений.Отправитель_ДоставитьДо, "ДЛФ=DT"));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Получатель") Тогда
		МассивОписанийИзменений.Добавить("Согласование получателя: " + Формат(ДанныеИзменений.Получатель));
	КонецЕсли;
	
	Изменение.Описание = СтрСоединить(МассивОписанийИзменений, Символы.ПС);
	
КонецПроцедуры

Процедура ИзмененияПереадресовка(Изменение)
	
	ДанныеИзменений = ЗначениеИзСтрокиВнутр(Изменение.Данные);
	
	МассивОписанийИзменений = Новый Массив;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Отправитель_АдресДоставки") Тогда
		МассивОписанийИзменений.Добавить("Адрес доставки: " + ДанныеИзменений.Отправитель_АдресДоставки);
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Отправитель_ДоставитьДо") Тогда
		МассивОписанийИзменений.Добавить(
			"Дата доставки: " + Формат(ДанныеИзменений.Отправитель_ДоставитьДо, "ДЛФ=DT"));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Получатель") Тогда
		МассивОписанийИзменений.Добавить("Получатель: " + Формат(ДанныеИзменений.Получатель));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Отметки") Тогда
		МассивОписанийИзменений.Добавить("Добавлены отметки");
	КонецЕсли;
	
	Изменение.Описание = СтрСоединить(МассивОписанийИзменений, Символы.ПС);
	
КонецПроцедуры

Процедура ИзмененияЗаменаВодителяТС(Изменение)
	
	ДанныеИзменений = ЗначениеИзСтрокиВнутр(Изменение.Данные);
	
	МассивОписанийИзменений = Новый Массив;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "ПричинаЗамены") Тогда
		
		МассивОписанийИзменений.Добавить("Причина замены: " + ДанныеИзменений.ПричинаЗамены);
		
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Водители") Тогда
		
		МассивВодителей = Новый Массив;
		
		Для Каждого СтруктураВодителя Из ДанныеИзменений.Водители Цикл
			МассивВодителей.Добавить(Saby_ТНОбщегоНазначенияКлиентСервер.ПредставлениеФИО(СтруктураВодителя));
		КонецЦикла;
		
		МассивОписанийИзменений.Добавить("Водители: " + СтрСоединить(МассивВодителей, "; "));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "ТранспортныеСредства") Тогда
		
		ДобавитьИзмененияТранспортныхСредств(МассивОписанийИзменений, ДанныеИзменений);
		
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "СпецРазрешения") Тогда
		
		МассивСпецРазрешений = Новый Массив;
		
		ШаблонСпецРазрешения = "№ %1 от %2 срок %3";
		Для Каждого СтруктураСпецРазрешений Из ДанныеИзменений.СпецРазрешения Цикл
			ПредставлениеРазрешения = СтрШаблон(
				ШаблонСпецРазрешения,
				СтруктураСпецРазрешений.Номер,
				Формат(СтруктураСпецРазрешений.Дата, "ДФ=dd.MM.yyyy"),
				СтруктураСпецРазрешений.Срок);
			МассивСпецРазрешений.Добавить(ПредставлениеРазрешения);
		КонецЦикла;
		
		МассивОписанийИзменений.Добавить("Спец. разрешения: " + СтрСоединить(МассивСпецРазрешений, "; "));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Отметки") Тогда
		МассивОписанийИзменений.Добавить("Добавлены отметки");
	КонецЕсли;
	
	Изменение.Описание = СтрСоединить(МассивОписанийИзменений, Символы.ПС);
	
КонецПроцедуры

Процедура ДобавитьИзмененияТранспортныхСредств(МассивОписанийИзменений, ДанныеИзменений)
	
	МассивПрицепов = Новый Массив;
	МассивТС       = Новый Массив;
	
	Автомобиль = Перечисления.Saby_ВидыТС.Автомобиль;
	
	Для Каждого СтруктураТС Из ДанныеИзменений.ТранспортныеСредства Цикл
		Если СтруктураТС.Вид = Автомобиль Тогда
			МассивТС.Добавить(СтруктураТС.РегистрационныйНомер);
		Иначе
			МассивПрицепов.Добавить(СтруктураТС.РегистрационныйНомер);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивПрицепов.Количество() > 0 Тогда
		МассивОписанийИзменений.Добавить("Прицепы: " + СтрСоединить(МассивПрицепов, "; "));
	КонецЕсли;
	
	Если МассивТС.Количество() > 0 Тогда
		МассивОписанийИзменений.Добавить("ТС: " + СтрСоединить(МассивТС, "; "));
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзмененияИзменениеСтоимости(Изменение)
	
	ДанныеИзменений = ЗначениеИзСтрокиВнутр(Изменение.Данные);
	
	МассивОписанийИзменений = Новый Массив;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Сумма") Тогда
		МассивОписанийИзменений.Добавить("Сумма: " + Формат(ДанныеИзменений.Сумма, "ЧДЦ=2"));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Ставка") Тогда
		МассивОписанийИзменений.Добавить("НДС: " + ДанныеИзменений.Ставка);
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Условия") Тогда
		МассивОписанийИзменений.Добавить("Условия: " + ДанныеИзменений.Условия);
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Плательщик") Тогда
		МассивОписанийИзменений.Добавить("Плательщик: " + Строка(ДанныеИзменений.Плательщик));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "РасчетныйСчет") Тогда
		МассивОписанийИзменений.Добавить("Расчетный счет: " + Строка(ДанныеИзменений.РасчетныйСчет));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "ОснованиеОплаты") Тогда
		МассивОписанийИзменений.Добавить("Основание оплаты: " + Строка(ДанныеИзменений.ОснованиеОплаты));
	КонецЕсли;
	
	Изменение.Описание = СтрСоединить(МассивОписанийИзменений, Символы.ПС);
	
КонецПроцедуры

Процедура ИзмененияСогласованиеСтоимости(Изменение)
	
	ДанныеИзменений = ЗначениеИзСтрокиВнутр(Изменение.Данные);
	
	МассивОписанийИзменений = Новый Массив;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Сумма") Тогда
		МассивОписанийИзменений.Добавить("Согласование сумма: " + Формат(ДанныеИзменений.Сумма, "ЧДЦ=2"));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Ставка") Тогда
		МассивОписанийИзменений.Добавить("Согласование НДС: " + ДанныеИзменений.Ставка);
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Условия") Тогда
		МассивОписанийИзменений.Добавить("Согласование условий: " + ДанныеИзменений.Условия);
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Плательщик") Тогда
		МассивОписанийИзменений.Добавить("Согласование плательщика: " + Строка(ДанныеИзменений.Плательщик));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "РасчетныйСчет") Тогда
		МассивОписанийИзменений.Добавить("Согласование расчетного счета: " + Строка(ДанныеИзменений.РасчетныйСчет));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "ОснованиеОплаты") Тогда
		МассивОписанийИзменений.Добавить("Согласование основания оплаты: " + Строка(ДанныеИзменений.ОснованиеОплаты));
	КонецЕсли;
	
	Изменение.Описание = СтрСоединить(МассивОписанийИзменений, Символы.ПС);
	
КонецПроцедуры

Процедура ИзмененияУведомлениеОУточнении(Изменение)
	
	ДанныеИзменений = ЗначениеИзСтрокиВнутр(Изменение.Данные);
	
	МассивОписанийИзменений = Новый Массив;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "КомментарийУведомление") Тогда
		МассивОписанийИзменений.Добавить(Формат(ДанныеИзменений.КомментарийУведомление, "ЧДЦ=2"));
	КонецЕсли;
	
	Изменение.Описание = СтрСоединить(МассивОписанийИзменений, Символы.ПС);
	
КонецПроцедуры

Функция СвойствоЗаполнено(Данные, ИмяСвойства)
	
	ЗначениеСвойства = Неопределено;
	
	Возврат Данные.Свойство(ИмяСвойства, ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства);
	
КонецФункции

Функция СтруктураТитулаДляРегистра(СтруктураТитула, ИмяМетаданных)
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("Период",              Неопределено);
	РезультатФункции.Вставить("СсылкаНаДокумент",    Неопределено);
	РезультатФункции.Вставить("ТипТитула",           Неопределено);
	РезультатФункции.Вставить("ИдентификаторТитула", Неопределено);
	РезультатФункции.Вставить("Данные",              Неопределено);
	РезультатФункции.Вставить("Просмотрено",         Неопределено);
	РезультатФункции.Вставить("Основной",            Неопределено);
	РезультатФункции.Вставить("ТипТитулаОтказа",     Неопределено);
	
	ЗаполнитьЗначенияСвойств(РезультатФункции, СтруктураТитула.ДляРегистра);
	
	Если Не СтруктураТитула.ДляРегистра.СохранитьДанные Тогда
		РезультатФункции.Данные = ЗначениеВСтрокуВнутр(Новый Структура);
	Иначе
		РезультатФункции.Данные = ЗначениеВСтрокуВнутр(СтруктураТитула.ДляДокумента);
		
		МенеджерТитулов = Документы[ИмяМетаданных].МенеджерТитулов();
		
		Если РезультатФункции.ТипТитулаОтказа <> МенеджерТитулов.ПустаяСсылка()
			И Не МенеджерТитулов.ЭтоДинамическийТитул(РезультатФункции.ТипТитулаОтказа) Тогда
			РезультатФункции.Просмотрено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#Область Лента

Процедура ЗаполнитьОписание(СтруктураДанных)
	
	Если Не ЗначениеЗаполнено(СтруктураДанных.Данные) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.УведомлениеОУточнении Тогда
		ДанныеИзменений = ЗначениеИзСтрокиВнутр(СтруктураДанных.Данные);
		СтруктураДанных.Описание = ДанныеИзменений.КомментарийУведомление;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПредставление(СтруктураДанных)
	
	Если СтруктураДанных.Данные <> "" Тогда
		ДанныеИзменений = ЗначениеИзСтрокиВнутр(СтруктураДанных.Данные);
	Иначе
		ДанныеИзменений = Новый Структура;
	КонецЕсли;
	
	Если ДанныеИзменений.Свойство("Представление") И ДанныеИзменений.Представление <> Неопределено Тогда
		СтруктураДанных.Представление = ДанныеИзменений["Представление"];
	Иначе
		СтруктураДанных.Представление = Строка(СтруктураДанных.ТипТитула);
	КонецЕсли;
	СтруктураДанных.Представление = СокрЛП(СтрЗаменить(СтруктураДанных.Представление, " груза", ""));
	СтруктураДанных.Представление = СокрЛП(СтрЗаменить(СтруктураДанных.Представление, "груза", ""));
	СтруктураДанных.Представление = СтрЗаменить(СтруктураДанных.Представление, ".", Символы.ПС);
	
КонецПроцедуры

#КонецОбласти // Лента

#КонецОбласти // СлужебныеПроцедурыИФункции
