
#Область ПрограммныйИнтерфейс

Процедура ЗаписатьДанные(ДинамическиеТитулы, ОбъектДок) Экспорт
	
	Если ДинамическиеТитулы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтруктураДинамическогоТитула Из ДинамическиеТитулы Цикл
		
		Если Не СтруктураДинамическогоТитула.Свойство("ДляРегистра")
			Или СтруктураДинамическогоТитула.ДляРегистра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураТитулаДляРегистра = СтруктураТитулаДляРегистра(СтруктураДинамическогоТитула);
		
		Если Не ОбъектДок.Ссылка.Пустая() Тогда
			МенеджерЗаписи = СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураТитулаДляРегистра);
			МенеджерЗаписи.Записать();
		Иначе
			ОбъектДок.ДобавитьСтруктуруТитулаДляЗаписи(СтруктураТитулаДляРегистра);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВложенияДляЗагрузки(СсылкаНаДокумент, Титул, Вложения) Экспорт
	
	РезультатФункции = Новый Массив;
	
	СоответствиеВложений = Новый Соответствие;
	
	ТаблицаВложений = Новый ТаблицаЗначений;
	ТаблицаВложений.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока("36"));
	ТаблицаВложений.Колонки.Добавить("Дата",          ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	КодТитула = Saby_ТНОбщегоНазначенияСервер.ЗначениеТитула(Титул);
	
	Для Каждого СтруктураВложения Из Вложения Цикл
		
		Идентификатор = Saby_ТНОбщегоНазначенияСервер.ИдентификаторВложения(СтруктураВложения, КодТитула);
		
		СоответствиеВложений.Вставить(Идентификатор, СтруктураВложения);
		
		СтрокаВложения = ТаблицаВложений.Добавить();
		СтрокаВложения.Идентификатор = Идентификатор;
		СтрокаВложения.Дата          = Saby_ТНОбщегоНазначенияСервер.ДатаВложения(СтруктураВложения, Титул);
		
	КонецЦикла;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ТаблицаВложений.Идентификатор КАК Идентификатор,
	|	ТаблицаВложений.Дата КАК Дата
	|ПОМЕСТИТЬ ДанныеТаблицыВложений
	|ИЗ
	|	&ТаблицаВложений КАК ТаблицаВложений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Saby_ДанныеДинамическихТитулов.Период КАК Период,
	|	Saby_ДанныеДинамическихТитулов.ИдентификаторТитула КАК ИдентификаторТитула
	|ПОМЕСТИТЬ ЗагруженныеДинамическиеТитулы
	|ИЗ
	|	РегистрСведений.Saby_ДанныеДинамическихТитулов КАК Saby_ДанныеДинамическихТитулов
	|ГДЕ
	|	Saby_ДанныеДинамическихТитулов.СсылкаНаДокумент = &СсылкаНаДокумент
	|	И Saby_ДанныеДинамическихТитулов.ТипТитула = &ТипТитула
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТаблицыВложений.Идентификатор КАК Идентификатор,
	|	ДанныеТаблицыВложений.Дата КАК Дата,
	|	НЕ ЗагруженныеДинамическиеТитулы.ИдентификаторТитула ЕСТЬ NULL КАК ЗагруженВРегистр
	|ИЗ
	|	ДанныеТаблицыВложений КАК ДанныеТаблицыВложений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗагруженныеДинамическиеТитулы КАК ЗагруженныеДинамическиеТитулы
	|		ПО ДанныеТаблицыВложений.Идентификатор = ЗагруженныеДинамическиеТитулы.ИдентификаторТитула
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	ЗапросДанных.УстановитьПараметр("ТаблицаВложений", ТаблицаВложений);
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	ЗапросДанных.УстановитьПараметр("ТипТитула", Титул);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		СтруктураВложения = СоответствиеВложений.Получить(ВыборкаДанных.Идентификатор);
		СтруктураВложения.Вставить("ЗагруженВРегистр", ВыборкаДанных.ЗагруженВРегистр);
		
		РезультатФункции.Добавить(СтруктураВложения);
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СледующиеИзменения(СсылкаНаДокумент, ПериодДо, Отбор = Неопределено) Экспорт
	
	РезультатФункции = Новый Массив;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 999
	|	Saby_ДанныеДинамическихТитулов.Период КАК Период,
	|	Saby_ДанныеДинамическихТитулов.ТипТитула КАК ТипТитула,
	|	Saby_ДанныеДинамическихТитулов.ИдентификаторТитула КАК ИдентификаторТитула,
	|	Saby_ДанныеДинамическихТитулов.Данные КАК Данные,
	|	Saby_ДанныеДинамическихТитулов.Просмотрено КАК Просмотрено
	|ИЗ
	|	РегистрСведений.Saby_ДанныеДинамическихТитулов КАК Saby_ДанныеДинамическихТитулов
	|ГДЕ
	|	Saby_ДанныеДинамическихТитулов.СсылкаНаДокумент = &СсылкаНаДокумент
	|	И Saby_ДанныеДинамическихТитулов.Период < &ПериодДо
	|	И 1 = 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	ЗапросДанных.Текст = СтрЗаменить(ЗапросДанных.Текст, "999", ПорцияВыборкиИзменений());
	
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	ЗапросДанных.УстановитьПараметр("ПериодДо",         ПериодДо);
	
	ПрименитьОтборы(ЗапросДанных, Отбор, "Saby_ДанныеДинамическихТитулов");
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		
		Изменение = СтруктураИзменений();
		Изменение.Вставить("Данные");
		
		ЗаполнитьЗначенияСвойств(Изменение, ВыборкаДанных);
		
		ЗаполнитьОписаниеИзменения(Изменение);
		
		Изменение.Удалить("Данные");
		
		РезультатФункции.Добавить(Изменение);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция КоличествоИзменений(СсылкаНаДокумент) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ВсегоИзменений",  0);
	РезультатФункции.Вставить("Непросмотренные", 0);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Saby_ДанныеДинамическихТитулов.ИдентификаторТитула) КАК Количество,
	|	Saby_ДанныеДинамическихТитулов.Просмотрено КАК Просмотрено
	|ИЗ
	|	РегистрСведений.Saby_ДанныеДинамическихТитулов КАК Saby_ДанныеДинамическихТитулов
	|ГДЕ
	|	Saby_ДанныеДинамическихТитулов.СсылкаНаДокумент = &СсылкаНаДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Saby_ДанныеДинамическихТитулов.Просмотрено";
	
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		РезультатФункции.ВсегоИзменений = РезультатФункции.ВсегоИзменений + ВыборкаДанных.Количество;
		Если Не ВыборкаДанных.Просмотрено Тогда
			РезультатФункции.Непросмотренные = РезультатФункции.Непросмотренные + ВыборкаДанных.Количество;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура Просмотреть(МассивСсылокНаДокумент, ИдентификаторыТитулов = Неопределено) Экспорт
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Saby_ДанныеДинамическихТитулов.Период КАК Период,
	|	Saby_ДанныеДинамическихТитулов.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	Saby_ДанныеДинамическихТитулов.ТипТитула КАК ТипТитула,
	|	Saby_ДанныеДинамическихТитулов.ИдентификаторТитула КАК ИдентификаторТитула,
	|	Saby_ДанныеДинамическихТитулов.Данные КАК Данные,
	|	ИСТИНА КАК Просмотрено
	|ИЗ
	|	РегистрСведений.Saby_ДанныеДинамическихТитулов КАК Saby_ДанныеДинамическихТитулов
	|ГДЕ
	|	Saby_ДанныеДинамическихТитулов.СсылкаНаДокумент В(&МассивСсылокНаДокумент)
	|	И Saby_ДанныеДинамическихТитулов.ИдентификаторТитула В(&ИдентификаторыТитулов)
	|	И НЕ Saby_ДанныеДинамическихТитулов.Просмотрено";
	
	ЗапросДанных.УстановитьПараметр("МассивСсылокНаДокумент", МассивСсылокНаДокумент);
	Если ИдентификаторыТитулов <> Неопределено Тогда
		ЗапросДанных.УстановитьПараметр("ИдентификаторыТитулов", ИдентификаторыТитулов);
	Иначе
		ЗапросДанных.Текст = СтрЗаменить(
			ЗапросДанных.Текст,
			"Saby_ДанныеДинамическихТитулов.ИдентификаторТитула В(&ИдентификаторыТитулов)",
			"ИСТИНА"
		);
	КонецЕсли;
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		МенеджерЗаписи = СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДанных);
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПривязатьТитулыКДокументу(СсылкаНаДокумент, ДинамическиеТитулыДляПривязки) Экспорт
	
	Для Каждого СтруктураТитулаДляРегистра Из ДинамическиеТитулыДляПривязки Цикл
		МенеджерЗаписи = СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураТитулаДляРегистра);
		МенеджерЗаписи.СсылкаНаДокумент = СсылкаНаДокумент;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс
#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция СтруктураИзменений()
	
	РезультатФункции = Новый Структура;
	
	РезультатФункции.Вставить("Период",              Дата(1, 1, 1, 0, 0, 0));
	РезультатФункции.Вставить("ТипТитула",           Перечисления.Saby_ТипТитулаЭтрН.ПустаяСсылка());
	РезультатФункции.Вставить("ИдентификаторТитула", "");
	РезультатФункции.Вставить("Описание",            "");
	РезультатФункции.Вставить("Просмотрено",         Ложь);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПорцияВыборкиИзменений()
	
	Возврат 10;
	
КонецФункции

Процедура ПрименитьОтборы(ЗапросДанных, Отбор, ИмяОсновнойТаблицы)
	
	Если Не ЗначениеЗаполнено(Отбор) Или Не ЗначениеЗаполнено(ИмяОсновнойТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонОтбора = "И %1.%2 %3
	|И 1 = 1";
	
	ШаблонУсловияИПараметра = "%1 %2";
	
	Для Каждого КлючЗначение Из Отбор Цикл
		
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Массив") Тогда
			УсловиеИПараметр = СтрШаблон(ШаблонУсловияИПараметра, "В", "(&%2)");
		Иначе
			УсловиеИПараметр = СтрШаблон(ШаблонУсловияИПараметра, "=", "&%2");
		КонецЕсли;
		
		ШаблонТекущегоОтбора = СтрЗаменить(ШаблонОтбора, "%3", УсловиеИПараметр);
		
		ТекстОтбора = СтрШаблон(ШаблонТекущегоОтбора, ИмяОсновнойТаблицы, КлючЗначение.Ключ);
		
		ЗапросДанных.Текст = СтрЗаменить(ЗапросДанных.Текст, "И 1 = 1", ТекстОтбора);
		
		ЗапросДанных.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеИзменения(Изменение)
	
	Если Изменение.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.ПереадресовкаУведомление Тогда
		ИзмененияПереадресовкаУведомление(Изменение);
	ИначеЕсли Изменение.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.Переадресовка Тогда
		ИзмененияПереадресовка(Изменение);
	ИначеЕсли Изменение.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.ЗаменаВодителяТС Тогда
		ИзмененияЗаменаВодителяТС(Изменение);
	ИначеЕсли Изменение.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.ИзменениеСтоимости Тогда
		ИзмененияИзменениеСтоимости(Изменение);
	ИначеЕсли Изменение.ТипТитула = Перечисления.Saby_ТипТитулаЭтрН.СогласованиеСтоимости Тогда
		ИзмененияСогласованиеСтоимости(Изменение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзмененияПереадресовкаУведомление(Изменение)
	
	ДанныеИзменений = ЗначениеИзСтрокиВнутр(Изменение.Данные);
	
	МассивОписанийИзменений = Новый Массив;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Отправитель_АдресДоставки") Тогда
		МассивОписанийИзменений.Добавить("Согласование адреса доставки: " + ДанныеИзменений.Отправитель_АдресДоставки);
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Отправитель_ДоставитьДо") Тогда
		МассивОписанийИзменений.Добавить(
			"Согласование даты доставки: " + Формат(ДанныеИзменений.Отправитель_ДоставитьДо, "ДЛФ=DT")
		);
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Получатель") Тогда
		МассивОписанийИзменений.Добавить("Согласование получателя: " + Формат(ДанныеИзменений.Получатель));
	КонецЕсли;
	
	Изменение.Описание = СтрСоединить(МассивОписанийИзменений, Символы.ПС);
	
КонецПроцедуры

Процедура ИзмененияПереадресовка(Изменение)
	
	ДанныеИзменений = ЗначениеИзСтрокиВнутр(Изменение.Данные);
	
	МассивОписанийИзменений = Новый Массив;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Отправитель_АдресДоставки") Тогда
		МассивОписанийИзменений.Добавить("Адрес доставки: " + ДанныеИзменений.Отправитель_АдресДоставки);
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Отправитель_ДоставитьДо") Тогда
		МассивОписанийИзменений.Добавить(
			"Дата доставки: " + Формат(ДанныеИзменений.Отправитель_ДоставитьДо, "ДЛФ=DT")
		);
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Получатель") Тогда
		МассивОписанийИзменений.Добавить("Получатель: " + Формат(ДанныеИзменений.Получатель));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Отметки") Тогда
		МассивОписанийИзменений.Добавить("Добавлены отметки");
	КонецЕсли;
	
	Изменение.Описание = СтрСоединить(МассивОписанийИзменений, Символы.ПС);
	
КонецПроцедуры

Процедура ИзмененияЗаменаВодителяТС(Изменение)
	
	ДанныеИзменений = ЗначениеИзСтрокиВнутр(Изменение.Данные);
	
	МассивОписанийИзменений = Новый Массив;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Отправитель_ТранспортноеСредство") Тогда
		МассивОписанийИзменений.Добавить("ТС: " + Формат(ДанныеИзменений.Отправитель_ТранспортноеСредство));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Водители") Тогда
		
		МассивВодителей = Новый Массив;
		
		Для Каждого СтруктураВодителя Из ДанныеИзменений.Водители Цикл
			МассивВодителей.Добавить(Формат(СтруктураВодителя.Водитель));
		КонецЦикла;
		
		МассивОписанийИзменений.Добавить("Водители: " + СтрСоединить(МассивВодителей, "; "));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Прицепы") Тогда
		
		МассивПрицепов = Новый Массив;
		
		Для Каждого СтруктураПрицепа Из ДанныеИзменений.Прицепы Цикл
			МассивПрицепов.Добавить(Формат(СтруктураПрицепа.Прицеп));
		КонецЦикла;
		
		МассивОписанийИзменений.Добавить("Прицепы: " + СтрСоединить(МассивПрицепов, "; "));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "СпецРазрешения") Тогда
		
		МассивСпецРазрешений = Новый Массив;
		
		ШаблонСпецРазрешения = "№ %1 от %2 срок %3";
		Для Каждого СтруктураСпецРазрешений Из ДанныеИзменений.СпецРазрешения Цикл
			МассивСпецРазрешений.Добавить(
				СтрШаблон(
					ШаблонСпецРазрешения,
					СтруктураСпецРазрешений.Номер,
					Формат(СтруктураСпецРазрешений.Дата, "ДФ=dd.MM.yyyy"),
					СтруктураСпецРазрешений.Срок
				)
			);
		КонецЦикла;
		
		МассивОписанийИзменений.Добавить("Спец. разрешения: " + СтрСоединить(МассивСпецРазрешений, "; "));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Отметки") Тогда
		МассивОписанийИзменений.Добавить("Добавлены отметки");
	КонецЕсли;
	
	Изменение.Описание = СтрСоединить(МассивОписанийИзменений, Символы.ПС);
	
КонецПроцедуры

Процедура ИзмененияИзменениеСтоимости(Изменение)
	
	ДанныеИзменений = ЗначениеИзСтрокиВнутр(Изменение.Данные);
	
	МассивОписанийИзменений = Новый Массив;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Сумма") Тогда
		МассивОписанийИзменений.Добавить("Сумма: " + Формат(ДанныеИзменений.Сумма, "ЧДЦ=2"));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Ставка") Тогда
		МассивОписанийИзменений.Добавить("НДС: " + ДанныеИзменений.Ставка);
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Условия") Тогда
		МассивОписанийИзменений.Добавить("Условия: " + ДанныеИзменений.Условия);
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Плательщик") Тогда
		МассивОписанийИзменений.Добавить("Плательщик: " + Строка(ДанныеИзменений.Плательщик));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "РасчетныйСчет") Тогда
		МассивОписанийИзменений.Добавить("Расчетный счет: " + Строка(ДанныеИзменений.РасчетныйСчет));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "ОснованиеОплаты") Тогда
		МассивОписанийИзменений.Добавить("Основание оплаты: " + Строка(ДанныеИзменений.ОснованиеОплаты));
	КонецЕсли;
	
	Изменение.Описание = СтрСоединить(МассивОписанийИзменений, Символы.ПС);
	
КонецПроцедуры

Процедура ИзмененияСогласованиеСтоимости(Изменение)
	
	ДанныеИзменений = ЗначениеИзСтрокиВнутр(Изменение.Данные);
	
	МассивОписанийИзменений = Новый Массив;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Сумма") Тогда
		МассивОписанийИзменений.Добавить("Согласование сумма: " + Формат(ДанныеИзменений.Сумма, "ЧДЦ=2"));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Ставка") Тогда
		МассивОписанийИзменений.Добавить("Согласование НДС: " + ДанныеИзменений.Ставка);
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Условия") Тогда
		МассивОписанийИзменений.Добавить("Согласование условий: " + ДанныеИзменений.Условия);
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "Плательщик") Тогда
		МассивОписанийИзменений.Добавить("Согласование плательщика: " + Строка(ДанныеИзменений.Плательщик));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "РасчетныйСчет") Тогда
		МассивОписанийИзменений.Добавить("Согласование расчетного счета: " + Строка(ДанныеИзменений.РасчетныйСчет));
	КонецЕсли;
	
	Если СвойствоЗаполнено(ДанныеИзменений, "ОснованиеОплаты") Тогда
		МассивОписанийИзменений.Добавить("Согласование основания оплаты: " + Строка(ДанныеИзменений.ОснованиеОплаты));
	КонецЕсли;
	
	Изменение.Описание = СтрСоединить(МассивОписанийИзменений, Символы.ПС);
	
КонецПроцедуры

Функция СвойствоЗаполнено(Данные, ИмяСвойства)
	
	ЗначениеСвойства = Неопределено;
	
	Возврат Данные.Свойство(ИмяСвойства, ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства);
	
КонецФункции

Функция СтруктураТитулаДляРегистра(СтруктураДинамическогоТитула)
	
	РезультатФункции = Новый Структура("Период,СсылкаНаДокумент,ТипТитула,ИдентификаторТитула,Данные,Просмотрено");
	
	ЗаполнитьЗначенияСвойств(РезультатФункции, СтруктураДинамическогоТитула.ДляРегистра);
	РезультатФункции.Данные = ЗначениеВСтрокуВнутр(СтруктураДинамическогоТитула.ДляДокумента);
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
