
#Область ПрограммныйИнтерфейс

// Запись данных титулов
//
// Параметры: 
// 	ДинамическиеТитулы - Массив - данные по титулам в формате подстановок для записи 
//  ОбъектДок - ДокументОбъект.Saby_ТранспортнаяНакладная - объект исходного документа, по которому пишем данные
//  ИмяМетаданных - Строка - имя метаданных реквизита СсылкаНаДокумент
//
Процедура ЗаписатьДанные(ДинамическиеТитулы, ОбъектДок, ИмяМетаданных) Экспорт
	
	Если ДинамическиеТитулы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтруктураДинамическогоТитула Из ДинамическиеТитулы Цикл
		
		Если Не СтруктураДинамическогоТитула.Свойство("ДляРегистра")
			Или СтруктураДинамическогоТитула.ДляРегистра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураТитулаДляРегистра = СтруктураТитулаДляРегистра(СтруктураДинамическогоТитула, ИмяМетаданных);
		
		ЗаписатьДанныеТитулаПоОбъекту(ОбъектДок, СтруктураТитулаДляРегистра);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает дополненные данные вложения из СБИС. Добавляет признак наличия титула в регистре.
//
// Параметры:
//  ОбъектДок - ДокументСсылка.Saby_ТранспортнаяНакладная - документ, по которому загружаются данные.
//  Титул - ПеречислениеСсылка.Saby_ТипТитулаЭтрН - загружаемый титул из СБИС.
//  Вложения - Массив - массив соответствий данных из СБИС
//  ДопПараметры - Структура - структура дополнительных параметров загрузки вложений.
//    Saby_ТНЗагрузкаСервер.ДопПараметрыЗагрузкиВложения
//
// Возвращаемое значение:
//   Массив - расширенная информация по вложениям.
//
Функция ВложенияДляЗагрузки(ОбъектДок, Титул, Вложения, ДопПараметры) Экспорт
	
	РезультатФункции = Новый Массив;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЭтоВО = ТипЗнч(ОбъектДок) = Тип("Структура");
	Если ЭтоВО Тогда
		ИмяМетаданных = ОбъектДок.ИмяМетаданных;
		СформироватьДанныеТитулов(МенеджерВременныхТаблиц, ОбъектДок);
	Иначе
		ИмяМетаданных = ОбъектДок.Метаданные().Имя;
		СформироватьДанныеТитулов(МенеджерВременныхТаблиц, ОбъектДок.Ссылка);
	КонецЕсли;
	
	СоответствиеВложений = Новый Соответствие;
	
	ТаблицаВложений = Новый ТаблицаЗначений;
	ТаблицаВложений.Колонки.Добавить("Идентификатор", МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ОписаниеТипаСтрока("36"));
	ТаблицаВложений.Колонки.Добавить(
		"Дата",
		МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Для Каждого СтруктураВложения Из Вложения Цикл
		
		Идентификатор = МодульКода("Saby_ТНЗагрузкаСервер").ИдентификаторВложения(СтруктураВложения, Титул);
		
		СоответствиеВложений.Вставить(Идентификатор, СтруктураВложения);
		
		СтрокаВложения = ТаблицаВложений.Добавить();
		СтрокаВложения.Идентификатор = Идентификатор;
		СтрокаВложения.Дата          = МодульКода("Saby_ТНЗагрузкаСервер").ДатаВложения(СтруктураВложения, Титул);
		
	КонецЦикла;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ТаблицаВложений.Идентификатор КАК Идентификатор,
	|	ТаблицаВложений.Дата КАК Дата,
	|	&СсылкаНаДокумент КАК СсылкаНаДокумент
	|ПОМЕСТИТЬ ДанныеТаблицыВложений
	|ИЗ
	|	&ТаблицаВложений КАК ТаблицаВложений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Saby_ДанныеТитулов.Период КАК Период,
	|	Saby_ДанныеТитулов.ИдентификаторТитула КАК ИдентификаторТитула
	|ПОМЕСТИТЬ ЗагруженныеТитулы
	|ИЗ
	|	Saby_ДанныеТитулов КАК Saby_ДанныеТитулов
	|ГДЕ
	|	Saby_ДанныеТитулов.ТипТитула = &ТипТитула
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Saby_ДанныеТитулов.Период) КАК Период,
	|	Saby_ДанныеТитулов.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	ДанныеТаблицыВложений.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ПериодПредыдущегоТитула
	|ИЗ
	|	Saby_ДанныеТитулов КАК Saby_ДанныеТитулов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеТаблицыВложений КАК ДанныеТаблицыВложений
	|		ПО Saby_ДанныеТитулов.СсылкаНаДокумент = ДанныеТаблицыВложений.СсылкаНаДокумент
	|			И Saby_ДанныеТитулов.Период <= ДанныеТаблицыВложений.Дата
	|			И Saby_ДанныеТитулов.ИдентификаторТитула <> ДанныеТаблицыВложений.Идентификатор
	|ГДЕ
	|	&ЭтоУведомлениеОбУточнении
	|
	|СГРУППИРОВАТЬ ПО
	|	Saby_ДанныеТитулов.СсылкаНаДокумент,
	|	ДанныеТаблицыВложений.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодПредыдущегоТитула.Идентификатор КАК Идентификатор,
	|	Saby_ДанныеТитулов.ТипТитула КАК ТипТитула
	|ПОМЕСТИТЬ ПрошлыйТитул
	|ИЗ
	|	ПериодПредыдущегоТитула КАК ПериодПредыдущегоТитула
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Saby_ДанныеТитулов КАК Saby_ДанныеТитулов
	|		ПО ПериодПредыдущегоТитула.СсылкаНаДокумент = Saby_ДанныеТитулов.СсылкаНаДокумент
	|			И ПериодПредыдущегоТитула.Период = Saby_ДанныеТитулов.Период
	|			И ПериодПредыдущегоТитула.Идентификатор <> Saby_ДанныеТитулов.ИдентификаторТитула
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТаблицыВложений.Идентификатор КАК Идентификатор,
	|	ДанныеТаблицыВложений.Дата КАК Дата,
	|	НЕ ЗагруженныеТитулы.ИдентификаторТитула ЕСТЬ NULL КАК ЗагруженВРегистр,
	|	ЕСТЬNULL(ПрошлыйТитул.ТипТитула, &ПустаяСсылкаНаТитул) КАК ТипПрошлогоТитула
	|ИЗ
	|	ДанныеТаблицыВложений КАК ДанныеТаблицыВложений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗагруженныеТитулы КАК ЗагруженныеТитулы
	|		ПО ДанныеТаблицыВложений.Идентификатор = ЗагруженныеТитулы.ИдентификаторТитула
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПрошлыйТитул КАК ПрошлыйТитул
	|		ПО ДанныеТаблицыВложений.Идентификатор = ПрошлыйТитул.Идентификатор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	ЗапросДанных.УстановитьПараметр("ТаблицаВложений",  ТаблицаВложений);
	ЗапросДанных.УстановитьПараметр("СсылкаНаДокумент", ?(ЭтоВО, 0, ОбъектДок.Ссылка));
	ЗапросДанных.УстановитьПараметр("ТипТитула",        Титул);
	
	ЗапросДанных.УстановитьПараметр(
		"ЭтоУведомлениеОбУточнении",
		ЗначениеМетаданных("Saby_ТипТитулаЭтрН.УведомлениеОУточнении") = Титул);
		
	ЗапросДанных.УстановитьПараметр(
		"ПустаяСсылкаНаТитул",
		МодульКода("Saby_ТНОбщегоНазначенияСервер").РезультатФункцииТитулов(ИмяМетаданных, "ПустаяСсылка"));
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		СтруктураВложения = СоответствиеВложений.Получить(ВыборкаДанных.Идентификатор);
		СтруктураВложения.Вставить("ЗагруженВРегистр", ВыборкаДанных.ЗагруженВРегистр);
		Если ЗначениеЗаполнено(ВыборкаДанных.ТипПрошлогоТитула) Тогда
			СтруктураВложения.Вставить(
				"ПрошлыйТитул",
				МодульКода("Saby_ТНОбщегоНазначенияСервер").РезультатФункцииТитулов(
					ИмяМетаданных, "ТитулОтказа", ВыборкаДанных.ТипПрошлогоТитула));
		КонецЕсли;
		
		РезультатФункции.Добавить(СтруктураВложения);
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Устанавливает признак Просмотрено в регистре.
//
// Параметры:
//  МассивСсылокНаДокумент - Массив - массив ссылок на документы для установки признака просмотрен.
//  ИдентификаторыТитулов - Массив - массив строк идентификаторов, которые нужно просмотреть.
//
Процедура Просмотреть(МассивСсылокНаДокумент, ИдентификаторыТитулов = Неопределено) Экспорт
	
	ПросмотретьТитулы(МассивСсылокНаДокумент, ИдентификаторыТитулов);
	
КонецПроцедуры

// Записывет указанные данные в регистр по документу.
//
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.Saby_ТранспортнаяНакладная - документ для записи данных в регистр.
//  ТитулыДляПривязки - Массив - массив данных для записи в регистр.
//
Процедура ПривязатьТитулыКДокументу(СсылкаНаДокумент, ТитулыДляПривязки) Экспорт
	
	Для Каждого СтруктураТитулаДляРегистра Из ТитулыДляПривязки Цикл
		МенеджерЗаписи = МодульКода("РегистрыСведений.Saby_ДанныеТитулов").СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураТитулаДляРегистра);
		МенеджерЗаписи.СсылкаНаДокумент = СсылкаНаДокумент;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Возвращает данные для визуализации ленты в документе транспортной накладной.
//
// Параметры:
//  ОбъектДок - ДокументСсылка.Saby_ТранспортнаяНакладная - документ, для которого нужны данные ленты.
//  ИмяМетаданных - Строка - имя метаданных реквизита СсылкаНаДокумент
//  ТекущиеЭтапыДокумента - Массив - массив текущих титулов документа.
//
// Возвращаемое значение:
//   Массив - массив структур данных для визуализации ленты см. СтруктураДанных()
//
Функция ДанныеДляЛенты(ОбъектДок, ИмяМетаданных, ТекущиеЭтапыДокумента) Экспорт
	
	РезультатФункции = Новый Массив;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЭтоВО = ТипЗнч(ОбъектДок) = Тип("ФормаКлиентскогоПриложения");
	Если ЭтоВО Тогда
		СформироватьДанныеТитулов(МенеджерВременныхТаблиц, ОбъектДок);
	Иначе
		СформироватьДанныеТитулов(МенеджерВременныхТаблиц, ОбъектДок.Ссылка);
	КонецЕсли;
	
	МодульКода("Saby_ТНОбщегоНазначенияСервер").РезультатФункцииТитулов(
		ИмяМетаданных, "СформироватьТаблицуДополнения", МенеджерВременныхТаблиц, ТекущиеЭтапыДокумента, ОбъектДок.Ссылка);
	
	МодульКода("Документы." + ИмяМетаданных).ДобавитьДополнительныеДанныеВЛенту(МенеджерВременныхТаблиц, ОбъектДок.Ссылка);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	Saby_ДанныеТитулов.Период КАК Период,
	|	Saby_ДанныеТитулов.ТипТитула КАК ТипТитула,
	|	Saby_ДанныеТитулов.ИдентификаторТитула КАК ИдентификаторТитула,
	|	Saby_ДанныеТитулов.Основной КАК Основной,
	|	Saby_ДанныеТитулов.Данные КАК Данные,
	|	Saby_ДанныеТитулов.ТипТитулаОтказа КАК ТипТитулаОтказа,
	|	ЕСТЬNULL(ТаблицаДополнения.ЭтоТекущийЭтап, ЛОЖЬ) КАК ЭтоТекущийЭтап,
	|	Saby_ДанныеТитулов.ТипТитулаПорядок КАК ТипТитулаПорядок
	|ПОМЕСТИТЬ ДанныеТитулов
	|ИЗ
	|	Saby_ДанныеТитулов КАК Saby_ДанныеТитулов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДополнения КАК ТаблицаДополнения
	|		ПО Saby_ДанныеТитулов.ТипТитула = ТаблицаДополнения.ТипТитула
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТитулов.Период КАК Период,
	|	ДанныеТитулов.ТипТитула КАК ТипТитула,
	|	ДанныеТитулов.ИдентификаторТитула КАК ИдентификаторТитула,
	|	ДанныеТитулов.Основной КАК Основной,
	|	ДанныеТитулов.Данные КАК Данные,
	|	ДанныеТитулов.ТипТитулаОтказа КАК ТипТитулаОтказа,
	|	ДанныеТитулов.ТипТитулаПорядок КАК ТипТитулаПорядок,
	|	ИСТИНА КАК ТитулИзРегистра
	|ИЗ
	|	ДанныеТитулов КАК ДанныеТитулов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДополнения.Период,
	|	ТаблицаДополнения.ТипТитула,
	|	ТаблицаДополнения.ИдентификаторТитула,
	|	ТаблицаДополнения.Основной,
	|	ТаблицаДополнения.Данные,
	|	ТаблицаДополнения.ТипТитулаОтказа,
	|	ТаблицаДополнения.ТипТитулаПорядок,
	|	ЛОЖЬ
	|ИЗ
	|	ТаблицаДополнения КАК ТаблицаДополнения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТитулов КАК ДанныеТитулов
	|		ПО (ДанныеТитулов.ТипТитула = ТаблицаДополнения.ТипТитула)
	|ГДЕ
	|	ЕСТЬNULL(ДанныеТитулов.ЭтоТекущийЭтап, ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ТипТитулаПорядок";
	
	ТитулыОтказа = Новый Соответствие;
	
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	ПустаяСсылкаТитула = МодульКода("Saby_ТНОбщегоНазначенияСервер").РезультатФункцииТитулов(ИмяМетаданных, "ПустаяСсылка");
	
	Пока ВыборкаДанных.Следующий() Цикл
		
		Если ТитулыОтказа.Получить(ВыборкаДанных.ТипТитула) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаДанных.ТипТитулаОтказа <> ПустаяСсылкаТитула Тогда
			ТитулыОтказа.Вставить(ВыборкаДанных.ТипТитулаОтказа, Истина);
		КонецЕсли;
		
		СтруктураДанных = СтруктураДанных();
		СтруктураДанных.Вставить("Данные");
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ВыборкаДанных);
		
		Если ТипЗнч(СтруктураДанных.ИдентификаторТитула) <> Тип("Строка") Тогда
			СтруктураДанных.ИдентификаторТитула = Строка(СтруктураДанных.ИдентификаторТитула.УникальныйИдентификатор());
		КонецЕсли;
		
		Если Не ВыборкаДанных.ТитулИзРегистра Тогда
			СтруктураДанных.Период = Дата(1, 1, 1, 0, 0, 0);
		КонецЕсли;
		
		ЗаполнитьОписание(СтруктураДанных);
		ЗаполнитьПредставление(СтруктураДанных, ИмяМетаданных);
		
		СтруктураДанных.Удалить("Данные");
		
		РезультатФункции.Добавить(СтруктураДанных);
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция СтруктураДанных()
	
	РезультатФункции = Новый Структура;
	
	РезультатФункции.Вставить("Период",              Дата(1, 1, 1, 0, 0, 0));
	РезультатФункции.Вставить("ТипТитула",           ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПустаяСсылка"));
	РезультатФункции.Вставить("ИдентификаторТитула", "");
	РезультатФункции.Вставить("Описание",            "");
	РезультатФункции.Вставить("Просмотрено",         Ложь);
	РезультатФункции.Вставить("Представление",       "");
	РезультатФункции.Вставить("Основной",            Истина);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СтруктураТитулаДляРегистра(СтруктураТитула, ИмяМетаданных)
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("Период",              Неопределено);
	РезультатФункции.Вставить("СсылкаНаДокумент",    Неопределено);
	РезультатФункции.Вставить("ТипТитула",           Неопределено);
	РезультатФункции.Вставить("ИдентификаторТитула", Неопределено);
	РезультатФункции.Вставить("Данные",              Неопределено);
	РезультатФункции.Вставить("Просмотрено",         Неопределено);
	РезультатФункции.Вставить("Основной",            Неопределено);
	РезультатФункции.Вставить("ТипТитулаОтказа",     Неопределено);
	
	ЗаполнитьЗначенияСвойств(РезультатФункции, СтруктураТитула.ДляРегистра);
	
	Если Не СтруктураТитула.ДляРегистра.СохранитьДанные Тогда
		РезультатФункции.Данные = ЗначениеВСтрокуВнутр(Новый Структура);
	Иначе
		
		Если ЗначениеЗаполнено(СтруктураТитула.ДляРегистра.Данные) Тогда
			СтруктураДанныхТитула = СтруктураТитула.ДляРегистра.Данные;
		Иначе
			СтруктураДанныхТитула = СтруктураТитула.ДляДокумента;
		КонецЕсли;
		
		Если СтруктураДанныхТитула.Свойство("КлючСтроки") Тогда
			СтруктураДанныхТитула.Удалить("КлючСтроки");
		КонецЕсли;
		
		РезультатФункции.Данные = ЗначениеВСтрокуВнутр(СтруктураДанныхТитула);
		
		ПустаяСсылкаТитула   = МодульКода("Saby_ТНОбщегоНазначенияСервер").РезультатФункцииТитулов(ИмяМетаданных, "ПустаяСсылка");
		ЭтоДинамическийТитул = МодульКода("Saby_ТНОбщегоНазначенияСервер").РезультатФункцииТитулов(
			ИмяМетаданных, "ЭтоДинамическийТитул", РезультатФункции.ТипТитулаОтказа);
		
		Если РезультатФункции.ТипТитулаОтказа <> ПустаяСсылкаТитула И Не ЭтоДинамическийТитул Тогда
			РезультатФункции.Просмотрено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаписатьДанныеТитулаПоОбъекту(ОбъектДок, СтруктураТитулаДляРегистра)
	
	Если ЗначениеЗаполнено(ОбъектДок.Ссылка) И ТипЗнч(ОбъектДок.Ссылка) <> Тип("Структура") Тогда
		МенеджерЗаписи = МодульКода("РегистрыСведений.Saby_ДанныеТитулов").СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураТитулаДляРегистра);
		МенеджерЗаписи.Записать();
	ИначеЕсли МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").ЕстьРеквизитИлиСвойство(ОбъектДок, "ДополнительныеСвойства") Тогда
		Если Не ОбъектДок.ДополнительныеСвойства.Свойство("ТитулыДляПривязки") Тогда
			ОбъектДок.ДополнительныеСвойства.Вставить("ТитулыДляПривязки", Новый Массив);
		КонецЕсли;
		
		ОбъектДок.ДополнительныеСвойства.ТитулыДляПривязки.Добавить(СтруктураТитулаДляРегистра);
	Иначе // Для ВО пишем данные в реквизит формы
		ОтборПоИдентификатору = Новый Структура("ИдентификаторТитула", СтруктураТитулаДляРегистра.ИдентификаторТитула);
		НайденныеСтроки = МодульКода("Saby_ТНОбщегоНазначенияКлиентСервер").НайтиСтрокиУниверсально(
			ОбъектДок.ДанныеТитулов, ОтборПоИдентификатору);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ОбъектДок.ДанныеТитулов.Добавить(СтруктураТитулаДляРегистра);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область Лента

Процедура ЗаполнитьОписание(СтруктураДанных)
	
	Если Не ЗначениеЗаполнено(СтруктураДанных.Данные) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.УведомлениеОУточнении")
		Или СтруктураДанных.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ПриемкаГруза")
		Или СтруктураДанных.ТипТитула = ЗначениеМетаданных("Saby_ТипТитулаЭтрН.ВыдачаГруза") Тогда
		ДанныеИзменений = ЗначениеИзСтрокиВнутр(СтруктураДанных.Данные);
		Если ДанныеИзменений.Свойство("КомментарийУведомление") Тогда
			СтруктураДанных.Описание = ДанныеИзменений.КомментарийУведомление;
		КонецЕсли;
	ИначеЕсли СтруктураДанных.ТипТитула = "ПредыдущийПутевойЛист" Или СтруктураДанных.ТипТитула = "ЗаменаВодителя" Тогда
		СтруктураДанных.Описание = СтруктураДанных.ТипТитула;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПредставление(СтруктураДанных, ИмяМетаданных)
	
	Если СтруктураДанных.Данные <> "" Тогда
		ДанныеИзменений = ЗначениеИзСтрокиВнутр(СтруктураДанных.Данные);
	Иначе
		ДанныеИзменений = Новый Структура;
	КонецЕсли;
	
	Если ДанныеИзменений.Свойство("Представление") И ДанныеИзменений.Представление <> Неопределено Тогда
		СтруктураДанных.Представление = ДанныеИзменений["Представление"];
	Иначе
		ПредставленияТитула = МодульКода("Saby_ТНОбщегоНазначенияСервер").РезультатФункцииТитулов(
			ИмяМетаданных, "ПредставленияТитула", СтруктураДанных.ТипТитула);
		СтруктураДанных.Представление = ПредставленияТитула.Представление;
	КонецЕсли;
	СтруктураДанных.Представление = СокрЛП(СтрЗаменить(СтруктураДанных.Представление, " груза", ""));
	СтруктураДанных.Представление = СокрЛП(СтрЗаменить(СтруктураДанных.Представление, "груза", ""));
	СтруктураДанных.Представление = СтрЗаменить(СтруктураДанных.Представление, ".", Символы.ПС);
	
КонецПроцедуры

#КонецОбласти // Лента

#Область include_etrn_base_InformationRegister_ДанныеТитулов_СлужебныеПроцедурыИФункции
#КонецОбласти // include_etrn_base_InformationRegister_ДанныеТитулов_СлужебныеПроцедурыИФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область include_etrn_base_CommonModule_ОпределениеМодуляКода
#КонецОбласти // include_etrn_base_CommonModule_ОпределениеМодуляКода

#Область include_etrn_base_CommonModule_ЗначениеМетаданных
#КонецОбласти // include_etrn_base_CommonModule_ЗначениеМетаданных

#Область include_etrn_base_CommonModule_ОбъектОбработки
#КонецОбласти // include_etrn_base_CommonModule_ОбъектОбработки

