
&Вместо("ХранилищеФайлаИзИнформационнойБазы")
Функция Saby_ХранилищеФайлаИзИнформационнойБазы(ФайлСсылка)
		
	// Значение из расширения 
	Если Saby_ОбщегоНазначенияКлиентСервер.ПрисоединенныйФайлВРасширении(ФайлСсылка) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДвоичныеДанныеФайлов.Файл,
		|	ДвоичныеДанныеФайлов.ДвоичныеДанныеФайла
		|ИЗ
		|	РегистрСведений.Saby_ДвоичныеДанныеФайлов КАК ДвоичныеДанныеФайлов
		|ГДЕ
		|	ДвоичныеДанныеФайлов.Файл = &ФайлСсылка";
		
		Запрос.УстановитьПараметр("ФайлСсылка", ФайлСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Возврат ?(Выборка.Следующий(), Выборка.ДвоичныеДанныеФайла, Неопределено);
		
	Иначе 			
		Результат = ПродолжитьВызов(ФайлСсылка);
		Возврат Результат;		
	КонецЕсли;
	
КонецФункции

&Вместо("ДобавитьФайл")
Функция Saby_ДобавитьФайл(ПараметрыФайла, Знач АдресФайлаВоВременномХранилище, Знач АдресВременногоХранилищаТекста, Знач Описание, Знач НоваяСсылкаНаФайл)
	
	Если ЗначениеЗаполнено(НоваяСсылкаНаФайл)
		И Saby_ОбщегоНазначенияКлиентСервер.ПрисоединенныйФайлВРасширении(НоваяСсылкаНаФайл) Тогда
		
		Результат = Saby_ДобавитьФайлДляРасширения(
			ПараметрыФайла,
			АдресФайлаВоВременномХранилище,
			АдресВременногоХранилищаТекста,
			Описание,
			НоваяСсылкаНаФайл
		);
		
	Иначе
		
		Результат = ПродолжитьВызов(
			ПараметрыФайла,
			АдресФайлаВоВременномХранилище,
			АдресВременногоХранилищаТекста,
			Описание,
			НоваяСсылкаНаФайл
		);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Saby_ДобавитьФайлДляРасширения(ПараметрыФайла, Знач АдресФайлаВоВременномХранилище, Знач АдресВременногоХранилищаТекста, Знач Описание, Знач НоваяСсылкаНаФайл)

	ВладелецФайлов     = ПараметрыФайла.ВладелецФайлов;
	ИмяБезРасширения   = ПараметрыФайла.ИмяБезРасширения;
	РасширениеБезТочки = ПараметрыФайла.РасширениеБезТочки;

	Если Не ЗначениеЗаполнено(ВладелецФайлов) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не задано значение параметра %1 в %2.';
		|en = 'Parameter value %1 is not set in %2.'"), "ПараметрыФайла.ВладелецФайлов", "РаботаСФайлами.ДобавитьФайл");
	КонецЕсли;

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище); // ДвоичныеДанные
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("РаботаСФайлами.ДобавитьФайл",
	"АдресФайлаВоВременномХранилище", ДвоичныеДанные, Тип("ДвоичныеДанные"));

	ГруппаФайлов = Неопределено;
	Если ПараметрыФайла.Свойство("ГруппаФайлов")
		И ЗначениеЗаполнено(ПараметрыФайла.ГруппаФайлов)
		И Не РаботаСФайламиСлужебный.ЭтоПапкаФайлов(ВладелецФайлов) Тогда

		ГруппаФайлов = ПараметрыФайла.ГруппаФайлов;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(РасширениеБезТочки) Тогда
		ЧастиИмениФайла = СтрРазделить(ИмяБезРасширения, ".", Ложь);
		Если ЧастиИмениФайла.Количество() > 1 Тогда
			РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество() - 1];
			ИмяБезРасширения = Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - (СтрДлина(РасширениеБезТочки) + 1));
		КонецЕсли;
	КонецЕсли;

	ИмяБезРасширения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяБезРасширения);
	РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(РасширениеБезТочки); 

	ВремяИзмененияУниверсальное = ПараметрыФайла.ВремяИзмененияУниверсальное;
	Если Не ЗначениеЗаполнено(ВремяИзмененияУниверсальное)
		Или ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	КонецЕсли;

	ЗаголовокОшибки = НСтр("ru = 'Ошибка при добавлении присоединенного файла.';
	|en = 'Error adding attached file.'");
	
	Если НоваяСсылкаНаФайл = Неопределено Тогда
		ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ВладелецФайлов, "", ЗаголовокОшибки,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'В этом случае параметр ""%1"" должен быть указан.';
		|en = 'In this case, parameter ""%1"" is required.'"), "НоваяСсылкаНаФайл"));

		НоваяСсылкаНаФайл = Справочники[ИмяСправочника].ПолучитьСсылку();
	Иначе

		Если Не Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(НоваяСсылкаНаФайл))
			И Не Saby_ОбщегоНазначенияКлиентСервер.ПрисоединенныйФайлВРасширении(НоваяСсылкаНаФайл)
			Или Не ЗначениеЗаполнено(НоваяСсылкаНаФайл) Тогда

			ВызватьИсключение НСтр("ru = 'Ошибка при добавлении присоединенного файла.
			|Ссылка на новый файл не заполнена.';
			|en = 'Error adding attached file.
			|A reference to the new file is required.'");
		КонецЕсли;

		ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(
		ВладелецФайлов, НоваяСсылкаНаФайл.Метаданные().Имя, ЗаголовокОшибки);

	КонецЕсли;
	
	ХранитьВерсии = СтрСравнить(ИмяСправочника, Метаданные.Справочники.Файлы.Имя) = 0;

	ПрисоединенныйФайл = Справочники[ИмяСправочника].СоздатьЭлемент(); // ОпределяемыйТип.ПрисоединенныйФайлОбъект
	
	Если ОбщегоНазначения.СсылкаСуществует(НоваяСсылкаНаФайл)
		И Saby_ОбщегоНазначенияКлиентСервер.ПрисоединенныйФайлВРасширении(НоваяСсылкаНаФайл) Тогда
		ПрисоединенныйФайл = НоваяСсылкаНаФайл.ПолучитьОбъект();
	Иначе
		ПрисоединенныйФайл.УстановитьСсылкуНового(НоваяСсылкаНаФайл);
	КонецЕсли;
	
	ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
	ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	ПрисоединенныйФайл.ДатаСоздания                 = ТекущаяДатаСеанса();
	ПрисоединенныйФайл.Описание                     = Описание;
	ПрисоединенныйФайл.Наименование                 = ИмяБезРасширения;
	ПрисоединенныйФайл.Размер                       = ДвоичныеДанные.Размер();
	ПрисоединенныйФайл.Расширение                   = РасширениеБезТочки;
	Попытка
		ПрисоединенныйФайл.ТипХраненияФайла = РаботаСФайламиСлужебный.ТипХраненияФайла(ПрисоединенныйФайл.Размер,
			ПрисоединенныйФайл.Расширение
		);
	Исключение
		// Обратная совместимость с более ранними версиями
		ПрисоединенныйФайл.ТипХраненияФайла = РаботаСФайламиСлужебный.ТипХраненияФайлов(ПрисоединенныйФайл.Размер,
			ПрисоединенныйФайл.Расширение
		);
	КонецПопытки;
	ПрисоединенныйФайл.Изменил                      = ПараметрыФайла.Автор;
	ПрисоединенныйФайл.ХранитьВерсии                = ХранитьВерсии;

	Если ГруппаФайлов <> Неопределено Тогда
		ПрисоединенныйФайл.Родитель = ГруппаФайлов;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ПрисоединенныйФайл, ПараметрыФайла);

	ПрисоединенныйФайл.Том        = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	ПрисоединенныйФайл.ПутьКФайлу = "";
	ПрисоединенныйФайл.Заполнить(Неопределено);

	ИспользованиеПолнотекстовогоПоиска = Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.Использовать;
	ИзвлекатьТекст = Метаданные.Справочники[ИмяСправочника].ПолнотекстовыйПоиск = ИспользованиеПолнотекстовогоПоиска;

	Если ИзвлекатьТекст Тогда

		РезультатИзвлеченияТекста = РаботаСФайламиСлужебный.ИзвлечьТекст(АдресВременногоХранилищаТекста,
		ДвоичныеДанные, ПрисоединенныйФайл.Расширение);

		ПрисоединенныйФайл.ТекстХранилище = РезультатИзвлеченияТекста.ТекстХранилище;
		ПрисоединенныйФайл.СтатусИзвлеченияТекста = РезультатИзвлеченияТекста.СтатусИзвлеченияТекста;

	Иначе
		ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения("");
		ПрисоединенныйФайл.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ПрисоединенныйФайл.Изменил) Тогда
		ПрисоединенныйФайл.Изменил = Пользователи.АвторизованныйПользователь();
	КонецЕсли;

	Контекст = РаботаСФайламиСлужебный.КонтекстОбновленияФайла(ПрисоединенныйФайл, АдресФайлаВоВременномХранилище, НоваяСсылкаНаФайл);
	МенеджерФайла = РаботаСФайламиСлужебный.МенеджерФайлов(ПрисоединенныйФайл);
	МенеджерФайла.ПередОбновлениемДанныхФайла(Контекст);

	НачатьТранзакцию();
	Попытка

		МенеджерФайла.ПередЗаписьюДанныхФайла(Контекст, ПрисоединенныйФайл);
		ПрисоединенныйФайл.Записать();

		Если ХранитьВерсии Тогда

			Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				СвойстваФайла = РаботаСФайламиВТомахСлужебный.СвойстваФайлаВТоме(ПрисоединенныйФайл.Ссылка);
				АдресФайлаВоВременномХранилище = РаботаСФайламиВТомахСлужебный.ПолноеИмяФайлаВТоме(СвойстваФайла);
				ИсходныйФайл = Новый Файл(АдресФайлаВоВременномХранилище);
				СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией", ИсходныйФайл);
			Иначе
				СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
				СведенияОФайле.РасширениеБезТочки = РасширениеБезТочки;
				СведенияОФайле.ИмяБезРасширения   = ИмяБезРасширения;
				СведенияОФайле.Размер             = ПрисоединенныйФайл.Размер;
			КонецЕсли;

			СведенияОФайле.АдресВременногоХранилищаФайла   = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Контекст, 
			"ПутьКФайлу",
			АдресФайлаВоВременномХранилище);
			СведенияОФайле.АдресВременногоХранилищаТекста  = АдресВременногоХранилищаТекста;
			СведенияОФайле.ЗаписатьВИсторию                = Истина;

			Версия = РаботаСФайламиСлужебный.СоздатьВерсию(ПрисоединенныйФайл.Ссылка, СведенияОФайле);
			РаботаСФайламиСлужебный.ОбновитьВерсиюВФайле(ПрисоединенныйФайл.Ссылка, Версия, АдресВременногоХранилищаТекста);
		Иначе
			МенеджерФайла.ПриОбновленииДанныхФайла(Контекст, ПрисоединенныйФайл.Ссылка);
		КонецЕсли;

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();

		ИнформацияОбОшибке = ИнформацияОбОшибке();

		ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
		|%2';
		|en = 'Error adding attached file ""%1"":
		|%2'");
		КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСообщения,
		ИмяБезРасширения + "." + РасширениеБезТочки,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));

		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Файлы.Добавление присоединенного файла';
		|en = 'Files.Add attached file'",
		ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		КомментарийЖурналаРегистрации);

		МенеджерФайла.ПослеОбновленияДанныхФайла(Контекст, Ложь);

		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСообщения,
		ИмяБезРасширения + "." + РасширениеБезТочки,
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке));

	КонецПопытки;

	МенеджерФайла.ПослеОбновленияДанныхФайла(Контекст, Истина);

	РаботаСФайламиПереопределяемый.ПриСозданииФайла(ПрисоединенныйФайл.Ссылка);
	Возврат ПрисоединенныйФайл.Ссылка;

КонецФункции
